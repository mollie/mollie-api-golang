// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// EntityWebhookStatus - The subscription's current status.
type EntityWebhookStatus string

const (
	EntityWebhookStatusEnabled  EntityWebhookStatus = "enabled"
	EntityWebhookStatusBlocked  EntityWebhookStatus = "blocked"
	EntityWebhookStatusDisabled EntityWebhookStatus = "disabled"
	EntityWebhookStatusDeleted  EntityWebhookStatus = "deleted"
)

func (e EntityWebhookStatus) ToPointer() *EntityWebhookStatus {
	return &e
}
func (e *EntityWebhookStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "blocked":
		fallthrough
	case "disabled":
		fallthrough
	case "deleted":
		*e = EntityWebhookStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityWebhookStatus: %v", v)
	}
}

// EntityWebhookLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type EntityWebhookLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation URLObj `json:"documentation"`
}

func (o *EntityWebhookLinks) GetDocumentation() URLObj {
	if o == nil {
		return URLObj{}
	}
	return o.Documentation
}

type EntityWebhook struct {
	// Indicates the response contains a webhook subscription object.
	// Will always contain the string `webhook` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this subscription.
	ID string `json:"id"`
	// The subscription's events destination.
	URL string `json:"url"`
	// The identifier uniquely referring to the profile that created the subscription.
	ProfileID *string `json:"profileId"`
	// The subscription's date time of creation.
	CreatedAt string `json:"createdAt"`
	// The subscription's name.
	Name string `json:"name"`
	// The events types that are subscribed.
	EventTypes []WebhookEventTypes `json:"eventTypes"`
	// The subscription's current status.
	Status EntityWebhookStatus `json:"status"`
	// Whether this entity was created in live mode or in test mode.
	Mode Mode `json:"mode"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links EntityWebhookLinks `json:"_links"`
}

func (o *EntityWebhook) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *EntityWebhook) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EntityWebhook) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *EntityWebhook) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *EntityWebhook) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *EntityWebhook) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *EntityWebhook) GetEventTypes() []WebhookEventTypes {
	if o == nil {
		return []WebhookEventTypes{}
	}
	return o.EventTypes
}

func (o *EntityWebhook) GetStatus() EntityWebhookStatus {
	if o == nil {
		return EntityWebhookStatus("")
	}
	return o.Status
}

func (o *EntityWebhook) GetMode() Mode {
	if o == nil {
		return Mode("")
	}
	return o.Mode
}

func (o *EntityWebhook) GetLinks() EntityWebhookLinks {
	if o == nil {
		return EntityWebhookLinks{}
	}
	return o.Links
}
