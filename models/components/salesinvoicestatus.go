// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// SalesInvoiceStatus - The status for the invoice to end up in.
//
// A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
// the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
// mark it as paid. It can then subsequently be sent as well, same as with `issued`.
//
// A status value that cannot be set but can be returned is `canceled`, for invoices which were
// issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
//
// Dependent parameters:
//   - `paymentDetails` is required if invoice should be set directly to `paid`
//   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
//   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
type SalesInvoiceStatus string

const (
	SalesInvoiceStatusDraft  SalesInvoiceStatus = "draft"
	SalesInvoiceStatusIssued SalesInvoiceStatus = "issued"
	SalesInvoiceStatusPaid   SalesInvoiceStatus = "paid"
)

func (e SalesInvoiceStatus) ToPointer() *SalesInvoiceStatus {
	return &e
}
func (e *SalesInvoiceStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "issued":
		fallthrough
	case "paid":
		*e = SalesInvoiceStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SalesInvoiceStatus: %v", v)
	}
}
