// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// EntityMandateMethod - Payment method of the mandate.
//
// SEPA Direct Debit and PayPal mandates can be created directly.
type EntityMandateMethod string

const (
	EntityMandateMethodCreditcard  EntityMandateMethod = "creditcard"
	EntityMandateMethodDirectdebit EntityMandateMethod = "directdebit"
	EntityMandateMethodPaypal      EntityMandateMethod = "paypal"
)

func (e EntityMandateMethod) ToPointer() *EntityMandateMethod {
	return &e
}
func (e *EntityMandateMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "paypal":
		*e = EntityMandateMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityMandateMethod: %v", v)
	}
}

type EntityMandate struct {
	ID *string `json:"id,omitempty"`
	// Payment method of the mandate.
	//
	// SEPA Direct Debit and PayPal mandates can be created directly.
	Method *EntityMandateMethod `json:"method,omitempty"`
	// The customer's name.
	ConsumerName *string `json:"consumerName,omitempty"`
	// The customer's IBAN. Required for SEPA Direct Debit mandates.
	ConsumerAccount *string `json:"consumerAccount,omitempty"`
	// The BIC of the customer's bank.
	ConsumerBic *string `json:"consumerBic,omitempty"`
	// The customer's email address. Required for PayPal mandates.
	ConsumerEmail *string `json:"consumerEmail,omitempty"`
	// The date when the mandate was signed in `YYYY-MM-DD` format.
	SignatureDate *string `json:"signatureDate,omitempty"`
	// A custom mandate reference. For SEPA Direct Debit, it is vital to provide a unique reference. Some banks will
	// decline Direct Debit payments if the mandate reference is not unique.
	MandateReference *string `json:"mandateReference,omitempty"`
	// The billing agreement ID given by PayPal. For example: `B-12A34567B8901234CD`. Required for PayPal mandates.
	// Must provide either this field or `payPalVaultId`, but not both.
	PaypalBillingAgreementID *string `json:"paypalBillingAgreementId,omitempty"`
	// The Vault ID given by PayPal. For example: `8kk8451t`. Required for PayPal mandates.
	// Must provide either this field or `paypalBillingAgreementId`, but not both.
	PayPalVaultID *string `json:"payPalVaultId,omitempty"`
	CustomerID    *string `json:"customerId,omitempty"`
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
}

func (o *EntityMandate) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EntityMandate) GetMethod() *EntityMandateMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *EntityMandate) GetConsumerName() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerName
}

func (o *EntityMandate) GetConsumerAccount() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerAccount
}

func (o *EntityMandate) GetConsumerBic() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerBic
}

func (o *EntityMandate) GetConsumerEmail() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerEmail
}

func (o *EntityMandate) GetSignatureDate() *string {
	if o == nil {
		return nil
	}
	return o.SignatureDate
}

func (o *EntityMandate) GetMandateReference() *string {
	if o == nil {
		return nil
	}
	return o.MandateReference
}

func (o *EntityMandate) GetPaypalBillingAgreementID() *string {
	if o == nil {
		return nil
	}
	return o.PaypalBillingAgreementID
}

func (o *EntityMandate) GetPayPalVaultID() *string {
	if o == nil {
		return nil
	}
	return o.PayPalVaultID
}

func (o *EntityMandate) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *EntityMandate) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}
