// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type EntityRefundResponseExternalReference struct {
	// Specifies the reference type
	Type *RefundExternalReferenceTypeResponse `json:"type,omitempty"`
	// Unique reference from the payment provider
	ID *string `json:"id,omitempty"`
}

func (o *EntityRefundResponseExternalReference) GetType() *RefundExternalReferenceTypeResponse {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EntityRefundResponseExternalReference) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// EntityRefundResponseSource - Where the funds will be pulled back from.
type EntityRefundResponseSource struct {
	// The type of source. Currently only the source type `organization` is supported.
	Type           *RefundRoutingReversalsSourceType `json:"type,omitempty"`
	OrganizationID *string                           `json:"organizationId,omitempty"`
}

func (o *EntityRefundResponseSource) GetType() *RefundRoutingReversalsSourceType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EntityRefundResponseSource) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

type EntityRefundResponseRoutingReversal struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount *Amount `json:"amount,omitempty"`
	// Where the funds will be pulled back from.
	Source *EntityRefundResponseSource `json:"source,omitempty"`
}

func (o *EntityRefundResponseRoutingReversal) GetAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *EntityRefundResponseRoutingReversal) GetSource() *EntityRefundResponseSource {
	if o == nil {
		return nil
	}
	return o.Source
}

// EntityRefundResponseLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type EntityRefundResponseLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self URLObj `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Payment URLObj `json:"payment"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Settlement *URLNullable `json:"settlement,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation URLObj `json:"documentation"`
}

func (o *EntityRefundResponseLinks) GetSelf() URLObj {
	if o == nil {
		return URLObj{}
	}
	return o.Self
}

func (o *EntityRefundResponseLinks) GetPayment() URLObj {
	if o == nil {
		return URLObj{}
	}
	return o.Payment
}

func (o *EntityRefundResponseLinks) GetSettlement() *URLNullable {
	if o == nil {
		return nil
	}
	return o.Settlement
}

func (o *EntityRefundResponseLinks) GetDocumentation() URLObj {
	if o == nil {
		return URLObj{}
	}
	return o.Documentation
}

type EntityRefundResponse struct {
	// Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
	Resource string `json:"resource"`
	ID       string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode Mode `json:"mode"`
	// The description of the refund that may be shown to your customer, depending on the payment method used.
	Description string `json:"description"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount Amount `json:"amount"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	SettlementAmount *AmountNullable `json:"settlementAmount,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata     *Metadata    `json:"metadata"`
	PaymentID    *string      `json:"paymentId,omitempty"`
	SettlementID *string      `json:"settlementId,omitempty"`
	Status       RefundStatus `json:"status"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt         string                                 `json:"createdAt"`
	ExternalReference *EntityRefundResponseExternalReference `json:"externalReference,omitempty"`
	// *This feature is only available to marketplace operators.*
	//
	// When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
	//
	// If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
	// needs to be reversed from which merchant(s).
	//
	// If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
	RoutingReversals []EntityRefundResponseRoutingReversal `json:"routingReversals,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links EntityRefundResponseLinks `json:"_links"`
}

func (o *EntityRefundResponse) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *EntityRefundResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EntityRefundResponse) GetMode() Mode {
	if o == nil {
		return Mode("")
	}
	return o.Mode
}

func (o *EntityRefundResponse) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *EntityRefundResponse) GetAmount() Amount {
	if o == nil {
		return Amount{}
	}
	return o.Amount
}

func (o *EntityRefundResponse) GetSettlementAmount() *AmountNullable {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *EntityRefundResponse) GetMetadata() *Metadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *EntityRefundResponse) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *EntityRefundResponse) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *EntityRefundResponse) GetStatus() RefundStatus {
	if o == nil {
		return RefundStatus("")
	}
	return o.Status
}

func (o *EntityRefundResponse) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *EntityRefundResponse) GetExternalReference() *EntityRefundResponseExternalReference {
	if o == nil {
		return nil
	}
	return o.ExternalReference
}

func (o *EntityRefundResponse) GetRoutingReversals() []EntityRefundResponseRoutingReversal {
	if o == nil {
		return nil
	}
	return o.RoutingReversals
}

func (o *EntityRefundResponse) GetLinks() EntityRefundResponseLinks {
	if o == nil {
		return EntityRefundResponseLinks{}
	}
	return o.Links
}
