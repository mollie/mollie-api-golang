// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// EntitySalesInvoiceResponseMetadata - Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type EntitySalesInvoiceResponseMetadata struct {
}

// EntitySalesInvoiceResponseLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type EntitySalesInvoiceResponseLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *URLObj `json:"self,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	InvoicePayment *URLObj `json:"invoicePayment,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	PdfLink *URLObj `json:"pdfLink,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *URLObj `json:"documentation,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Next *URLObj `json:"next,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Previous *URLObj `json:"previous,omitempty"`
}

func (e *EntitySalesInvoiceResponseLinks) GetSelf() *URLObj {
	if e == nil {
		return nil
	}
	return e.Self
}

func (e *EntitySalesInvoiceResponseLinks) GetInvoicePayment() *URLObj {
	if e == nil {
		return nil
	}
	return e.InvoicePayment
}

func (e *EntitySalesInvoiceResponseLinks) GetPdfLink() *URLObj {
	if e == nil {
		return nil
	}
	return e.PdfLink
}

func (e *EntitySalesInvoiceResponseLinks) GetDocumentation() *URLObj {
	if e == nil {
		return nil
	}
	return e.Documentation
}

func (e *EntitySalesInvoiceResponseLinks) GetNext() *URLObj {
	if e == nil {
		return nil
	}
	return e.Next
}

func (e *EntitySalesInvoiceResponseLinks) GetPrevious() *URLObj {
	if e == nil {
		return nil
	}
	return e.Previous
}

type EntitySalesInvoiceResponse struct {
	// Indicates the response contains a sales invoice object. Will always contain the string `sales-invoice` for this
	// endpoint.
	Resource *string `json:"resource,omitempty"`
	ID       *string `json:"id,omitempty"`
	// When issued, an invoice number will be set for the sales invoice.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`
	// The status for the invoice to end up in.
	//
	// A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
	// the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
	// mark it as paid. It can then subsequently be sent as well, same as with `issued`.
	//
	// A status value that cannot be set but can be returned is `canceled`, for invoices which were
	// issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
	//
	// Dependent parameters:
	//   - `paymentDetails` is required if invoice should be set directly to `paid`
	//   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
	//   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
	Status *SalesInvoiceStatusResponse `json:"status,omitempty"`
	// The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
	VatScheme *SalesInvoiceVatSchemeResponse `json:"vatScheme,omitempty"`
	// The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
	// price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
	VatMode *SalesInvoiceVatModeResponse `json:"vatMode,omitempty"`
	// A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
	Memo *string `json:"memo,omitempty"`
	// Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *EntitySalesInvoiceResponseMetadata `json:"metadata,omitempty"`
	// The payment term to be set on the invoice.
	PaymentTerm    *SalesInvoicePaymentTermResponse    `json:"paymentTerm,omitempty"`
	PaymentDetails *SalesInvoicePaymentDetailsResponse `json:"paymentDetails,omitempty"`
	EmailDetails   *SalesInvoiceEmailDetails           `json:"emailDetails,omitempty"`
	// The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
	// provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
	CustomerID *string `json:"customerId,omitempty"`
	// The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
	// `customerId` becomes required as well. Only allowed for invoices with status `paid`.
	MandateID *string `json:"mandateId,omitempty"`
	// An identifier tied to the recipient data. This should be a unique value based on data your system contains,
	// so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
	// is not required to send a first invoice to a recipient.
	RecipientIdentifier *string                        `json:"recipientIdentifier,omitempty"`
	Recipient           *SalesInvoiceRecipientResponse `json:"recipient,omitempty"`
	// Provide the line items for the invoice. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the invoice.
	Lines    []SalesInvoiceLineItemResponse `json:"lines,omitempty"`
	Discount *SalesInvoiceDiscountResponse  `json:"discount,omitempty"`
	// This indicates whether the invoice is an e-invoice. The default value is `false` and can't be changed
	// after the invoice has been issued. When `emailDetails` is provided, an additional email is sent to the
	// recipient.
	//
	// E-invoicing is only available for merchants based in Belgium, Germany, and the Netherlands, and only when
	// the recipient is also located in one of these countries.
	IsEInvoice *bool `json:"isEInvoice,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	AmountDue *Amount `json:"amountDue,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	SubtotalAmount *Amount `json:"subtotalAmount,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	TotalAmount *Amount `json:"totalAmount,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	TotalVatAmount *Amount `json:"totalVatAmount,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	DiscountedSubtotalAmount *Amount `json:"discountedSubtotalAmount,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// If issued, the date when the sales invoice was issued, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format.
	IssuedAt *string `json:"issuedAt,omitempty"`
	// If paid, the date when the sales invoice was paid, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format.
	PaidAt *string `json:"paidAt,omitempty"`
	// If issued, the date when the sales invoice payment is due, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format.
	DueAt *string `json:"dueAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *EntitySalesInvoiceResponseLinks `json:"_links,omitempty"`
}

func (e *EntitySalesInvoiceResponse) GetResource() *string {
	if e == nil {
		return nil
	}
	return e.Resource
}

func (e *EntitySalesInvoiceResponse) GetID() *string {
	if e == nil {
		return nil
	}
	return e.ID
}

func (e *EntitySalesInvoiceResponse) GetInvoiceNumber() *string {
	if e == nil {
		return nil
	}
	return e.InvoiceNumber
}

func (e *EntitySalesInvoiceResponse) GetStatus() *SalesInvoiceStatusResponse {
	if e == nil {
		return nil
	}
	return e.Status
}

func (e *EntitySalesInvoiceResponse) GetVatScheme() *SalesInvoiceVatSchemeResponse {
	if e == nil {
		return nil
	}
	return e.VatScheme
}

func (e *EntitySalesInvoiceResponse) GetVatMode() *SalesInvoiceVatModeResponse {
	if e == nil {
		return nil
	}
	return e.VatMode
}

func (e *EntitySalesInvoiceResponse) GetMemo() *string {
	if e == nil {
		return nil
	}
	return e.Memo
}

func (e *EntitySalesInvoiceResponse) GetMetadata() *EntitySalesInvoiceResponseMetadata {
	if e == nil {
		return nil
	}
	return e.Metadata
}

func (e *EntitySalesInvoiceResponse) GetPaymentTerm() *SalesInvoicePaymentTermResponse {
	if e == nil {
		return nil
	}
	return e.PaymentTerm
}

func (e *EntitySalesInvoiceResponse) GetPaymentDetails() *SalesInvoicePaymentDetailsResponse {
	if e == nil {
		return nil
	}
	return e.PaymentDetails
}

func (e *EntitySalesInvoiceResponse) GetEmailDetails() *SalesInvoiceEmailDetails {
	if e == nil {
		return nil
	}
	return e.EmailDetails
}

func (e *EntitySalesInvoiceResponse) GetCustomerID() *string {
	if e == nil {
		return nil
	}
	return e.CustomerID
}

func (e *EntitySalesInvoiceResponse) GetMandateID() *string {
	if e == nil {
		return nil
	}
	return e.MandateID
}

func (e *EntitySalesInvoiceResponse) GetRecipientIdentifier() *string {
	if e == nil {
		return nil
	}
	return e.RecipientIdentifier
}

func (e *EntitySalesInvoiceResponse) GetRecipient() *SalesInvoiceRecipientResponse {
	if e == nil {
		return nil
	}
	return e.Recipient
}

func (e *EntitySalesInvoiceResponse) GetLines() []SalesInvoiceLineItemResponse {
	if e == nil {
		return nil
	}
	return e.Lines
}

func (e *EntitySalesInvoiceResponse) GetDiscount() *SalesInvoiceDiscountResponse {
	if e == nil {
		return nil
	}
	return e.Discount
}

func (e *EntitySalesInvoiceResponse) GetIsEInvoice() *bool {
	if e == nil {
		return nil
	}
	return e.IsEInvoice
}

func (e *EntitySalesInvoiceResponse) GetAmountDue() *Amount {
	if e == nil {
		return nil
	}
	return e.AmountDue
}

func (e *EntitySalesInvoiceResponse) GetSubtotalAmount() *Amount {
	if e == nil {
		return nil
	}
	return e.SubtotalAmount
}

func (e *EntitySalesInvoiceResponse) GetTotalAmount() *Amount {
	if e == nil {
		return nil
	}
	return e.TotalAmount
}

func (e *EntitySalesInvoiceResponse) GetTotalVatAmount() *Amount {
	if e == nil {
		return nil
	}
	return e.TotalVatAmount
}

func (e *EntitySalesInvoiceResponse) GetDiscountedSubtotalAmount() *Amount {
	if e == nil {
		return nil
	}
	return e.DiscountedSubtotalAmount
}

func (e *EntitySalesInvoiceResponse) GetCreatedAt() *string {
	if e == nil {
		return nil
	}
	return e.CreatedAt
}

func (e *EntitySalesInvoiceResponse) GetIssuedAt() *string {
	if e == nil {
		return nil
	}
	return e.IssuedAt
}

func (e *EntitySalesInvoiceResponse) GetPaidAt() *string {
	if e == nil {
		return nil
	}
	return e.PaidAt
}

func (e *EntitySalesInvoiceResponse) GetDueAt() *string {
	if e == nil {
		return nil
	}
	return e.DueAt
}

func (e *EntitySalesInvoiceResponse) GetLinks() *EntitySalesInvoiceResponseLinks {
	if e == nil {
		return nil
	}
	return e.Links
}
