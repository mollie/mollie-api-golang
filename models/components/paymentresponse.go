// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/types"
)

type PaymentResponseCategory string

const (
	PaymentResponseCategoryMeal         PaymentResponseCategory = "meal"
	PaymentResponseCategoryEco          PaymentResponseCategory = "eco"
	PaymentResponseCategoryGift         PaymentResponseCategory = "gift"
	PaymentResponseCategorySportCulture PaymentResponseCategory = "sport_culture"
)

func (e PaymentResponseCategory) ToPointer() *PaymentResponseCategory {
	return &e
}
func (e *PaymentResponseCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "meal":
		fallthrough
	case "eco":
		fallthrough
	case "gift":
		fallthrough
	case "sport_culture":
		*e = PaymentResponseCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentResponseCategory: %v", v)
	}
}

type PaymentResponseLine struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *PaymentLineTypeResponse `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	UnitPrice Amount `json:"unitPrice"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	DiscountAmount *Amount `json:"discountAmount,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	TotalAmount Amount `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	VatAmount *Amount `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []PaymentResponseCategory `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string            `json:"productUrl,omitempty"`
	Recurring  *RecurringLineItem `json:"recurring,omitempty"`
}

func (p *PaymentResponseLine) GetType() *PaymentLineTypeResponse {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *PaymentResponseLine) GetDescription() string {
	if p == nil {
		return ""
	}
	return p.Description
}

func (p *PaymentResponseLine) GetQuantity() int64 {
	if p == nil {
		return 0
	}
	return p.Quantity
}

func (p *PaymentResponseLine) GetQuantityUnit() *string {
	if p == nil {
		return nil
	}
	return p.QuantityUnit
}

func (p *PaymentResponseLine) GetUnitPrice() Amount {
	if p == nil {
		return Amount{}
	}
	return p.UnitPrice
}

func (p *PaymentResponseLine) GetDiscountAmount() *Amount {
	if p == nil {
		return nil
	}
	return p.DiscountAmount
}

func (p *PaymentResponseLine) GetTotalAmount() Amount {
	if p == nil {
		return Amount{}
	}
	return p.TotalAmount
}

func (p *PaymentResponseLine) GetVatRate() *string {
	if p == nil {
		return nil
	}
	return p.VatRate
}

func (p *PaymentResponseLine) GetVatAmount() *Amount {
	if p == nil {
		return nil
	}
	return p.VatAmount
}

func (p *PaymentResponseLine) GetSku() *string {
	if p == nil {
		return nil
	}
	return p.Sku
}

func (p *PaymentResponseLine) GetCategories() []PaymentResponseCategory {
	if p == nil {
		return nil
	}
	return p.Categories
}

func (p *PaymentResponseLine) GetImageURL() *string {
	if p == nil {
		return nil
	}
	return p.ImageURL
}

func (p *PaymentResponseLine) GetProductURL() *string {
	if p == nil {
		return nil
	}
	return p.ProductURL
}

func (p *PaymentResponseLine) GetRecurring() *RecurringLineItem {
	if p == nil {
		return nil
	}
	return p.Recurring
}

// PaymentResponseApplicationFee - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
//
// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
// `routing` parameter.
type PaymentResponseApplicationFee struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount *Amount `json:"amount,omitempty"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description *string `json:"description,omitempty"`
}

func (p *PaymentResponseApplicationFee) GetAmount() *Amount {
	if p == nil {
		return nil
	}
	return p.Amount
}

func (p *PaymentResponseApplicationFee) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

// Receipt - The Point of sale receipt object.
type Receipt struct {
	// A unique code provided by the cardholder’s bank to confirm that the transaction was successfully approved.
	AuthorizationCode *string `json:"authorizationCode,omitempty"`
	// The unique number that identifies a specific payment application on a chip card.
	ApplicationIdentifier *string `json:"applicationIdentifier,omitempty"`
	// The method by which the card was read by the terminal.
	CardReadMethod *PaymentDetailsReceiptCardReadMethodResponse `json:"cardReadMethod,omitempty"`
	// The method used to verify the cardholder's identity.
	CardVerificationMethod *PaymentDetailsReceiptCardVerificationMethodResponse `json:"cardVerificationMethod,omitempty"`
}

func (r *Receipt) GetAuthorizationCode() *string {
	if r == nil {
		return nil
	}
	return r.AuthorizationCode
}

func (r *Receipt) GetApplicationIdentifier() *string {
	if r == nil {
		return nil
	}
	return r.ApplicationIdentifier
}

func (r *Receipt) GetCardReadMethod() *PaymentDetailsReceiptCardReadMethodResponse {
	if r == nil {
		return nil
	}
	return r.CardReadMethod
}

func (r *Receipt) GetCardVerificationMethod() *PaymentDetailsReceiptCardVerificationMethodResponse {
	if r == nil {
		return nil
	}
	return r.CardVerificationMethod
}

// QrCode - Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
// the QR code details will be available in this object.
//
// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
// Bancontact QR payments can be completed by the customer using the Bancontact app.
type QrCode struct {
	// The height of the QR code image in pixels.
	Height *int64 `json:"height,omitempty"`
	// The width of the QR code image in pixels.
	Width *int64 `json:"width,omitempty"`
	// The URL to the QR code image. The image is a PNG file, and can be displayed directly in the browser or
	// downloaded.
	Src *string `json:"src,omitempty"`
}

func (q *QrCode) GetHeight() *int64 {
	if q == nil {
		return nil
	}
	return q.Height
}

func (q *QrCode) GetWidth() *int64 {
	if q == nil {
		return nil
	}
	return q.Width
}

func (q *QrCode) GetSrc() *string {
	if q == nil {
		return nil
	}
	return q.Src
}

// PaymentResponseDetails - An object containing payment details collected during the payment process. For example, details may include the
// customer's card or bank details and a payment reference. For the full list of details, please refer to the
// [method-specific parameters](extra-payment-parameters) guide.
type PaymentResponseDetails struct {
	// The customer's name, if made available by the payment method. For card payments, refer to details.cardHolder.
	ConsumerName *string `json:"consumerName,omitempty"`
	// The customer's account reference.
	//
	// For banking-based payment methods — such as iDEAL — this is normally either an IBAN or a domestic bank account
	// number.
	//
	// For PayPal, the account reference is an email address.
	//
	// For card and Bancontact payments, refer to details.cardNumber.
	ConsumerAccount *string `json:"consumerAccount,omitempty"`
	// The BIC of the customer's bank account, if applicable.
	ConsumerBic *string `json:"consumerBic,omitempty"`
	// For wallet payment methods — such as Apple Pay and PayPal — the shipping address is often already known by the
	// wallet provider. In these cases the shipping address may be available as a payment detail.
	ShippingAddress map[string]any `json:"shippingAddress,omitempty"`
	// For bancontact, it will be the customer's masked card number. For cards, it will be the last 4-digit of the
	// PAN. For Point-of-sale, it will be the the last 4 digits of the customer's masked card number.
	CardNumber *string `json:"cardNumber,omitempty"`
	// The name of the bank that the customer will need to make the bank transfer payment towards.
	BankName *string `json:"bankName,omitempty"`
	// The bank account number the customer will need to make the bank transfer payment towards.
	BankAccount *string `json:"bankAccount,omitempty"`
	// The BIC of the bank the customer will need to make the bank transfer payment towards.
	BankBic *string `json:"bankBic,omitempty"`
	// The Mollie-generated reference the customer needs to use when transfering the amount. Do not apply any
	// formatting here; show it to the customer as-is.
	TransferReference *string `json:"transferReference,omitempty"`
	// A unique fingerprint for a specific card. Can be used to identify returning customers.
	//
	// In the case of Point-of-sale payments, it's a unique identifier assigned to a cardholder's payment account,
	// linking multiple transactions from wallets and physical card to a single account, also across payment methods
	// or when the card is reissued.
	CardFingerprint *string `json:"cardFingerprint,omitempty"`
	// The customer's name as shown on their card.
	CardHolder *string `json:"cardHolder,omitempty"`
	// The card's target audience, if known.
	CardAudition *PaymentDetailsCardAuditionResponse `json:"cardAudition,omitempty"`
	// The card's label, if known.
	CardLabel *PaymentDetailsCardLabelResponse `json:"cardLabel,omitempty"`
	// The ISO 3166-1 alpha-2 country code of the country the card was issued in.
	CardCountryCode *string `json:"cardCountryCode,omitempty"`
	// The expiry date (MM/YY) of the card as displayed on the card.
	CardExpiryDate *string `json:"cardExpiryDate,omitempty"`
	// The card type.
	CardFunding *PaymentDetailsCardFundingResponse `json:"cardFunding,omitempty"`
	// The level of security applied during card processing.
	CardSecurity *PaymentDetailsCardSecurityResponse `json:"cardSecurity,omitempty"`
	// The applicable card fee region.
	FeeRegion *PaymentDetailsFeeRegionResponse `json:"feeRegion,omitempty"`
	// The first 6 and last 4 digits of the card number.
	CardMaskedNumber *string `json:"cardMaskedNumber,omitempty"`
	// The outcome of authentication attempted on transactions enforced by 3DS (ie valid only for oneoff and first).
	Card3dsEci *string `json:"card3dsEci,omitempty"`
	// The first 6 digit of the card bank identification number.
	CardBin *string `json:"cardBin,omitempty"`
	// The issuer of the Card.
	CardIssuer *string `json:"cardIssuer,omitempty"`
	// A failure code to help understand why the payment failed.
	FailureReason *PaymentDetailsFailureReasonResponse `json:"failureReason,omitempty"`
	// A human-friendly failure message that can be shown to the customer. The message is translated in accordance
	// with the payment's locale setting.
	FailureMessage *string `json:"failureMessage,omitempty"`
	// The wallet used when creating the payment.
	Wallet *PaymentDetailsWalletResponse `json:"wallet,omitempty"`
	// PayPal's reference for the payment.
	PaypalReference *string `json:"paypalReference,omitempty"`
	// ID of the customer's PayPal account.
	PaypalPayerID *string `json:"paypalPayerId,omitempty"`
	// Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
	// payments, and if the information is made available by PayPal.
	SellerProtection *PaymentDetailsSellerProtectionResponse `json:"sellerProtection,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	PaypalFee *AmountNullable `json:"paypalFee,omitempty"`
	// The paysafecard customer reference either provided via the API or otherwise auto-generated by Mollie.
	CustomerReference *string `json:"customerReference,omitempty"`
	// The ID of the terminal device where the payment took place on.
	TerminalID *string `json:"terminalId,omitempty"`
	// The first 6 digits & last 4 digits of the customer's masked card number.
	MaskedNumber *string `json:"maskedNumber,omitempty"`
	// The Point of sale receipt object.
	Receipt *Receipt `json:"receipt,omitempty"`
	// The creditor identifier indicates who is authorized to execute the payment. In this case, it is a
	// reference to Mollie.
	CreditorIdentifier *string `json:"creditorIdentifier,omitempty"`
	// Estimated date the payment is debited from the customer's bank account, in YYYY-MM-DD format.
	DueDate *types.Date `json:"dueDate,omitempty"`
	// Date the payment has been signed by the customer, in YYYY-MM-DD format. Only available if the payment
	// has been signed.
	SignatureDate *types.Date `json:"signatureDate,omitempty"`
	// The official reason why this payment has failed. A detailed description of each reason is available on the
	// website of the European Payments Council.
	BankReasonCode *string `json:"bankReasonCode,omitempty"`
	// A human-friendly description of the failure reason.
	BankReason *string `json:"bankReason,omitempty"`
	// The end-to-end identifier you provided in the batch file.
	EndToEndIdentifier *string `json:"endToEndIdentifier,omitempty"`
	// The mandate reference you provided in the batch file.
	MandateReference *string `json:"mandateReference,omitempty"`
	// The batch reference you provided in the batch file.
	BatchReference *string `json:"batchReference,omitempty"`
	// The file reference you provided in the batch file.
	FileReference *string `json:"fileReference,omitempty"`
	// Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
	// the QR code details will be available in this object.
	//
	// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
	// Bancontact QR payments can be completed by the customer using the Bancontact app.
	QrCode *QrCode `json:"qrCode,omitempty"`
	// For payments with gift cards: the masked gift card number of the first gift card applied to the payment.
	VoucherNumber *string `json:"voucherNumber,omitempty"`
	// An array of detail objects for each gift card that was used on this payment, if any.
	Giftcards []map[string]any `json:"giftcards,omitempty"`
	// For payments with vouchers: the brand name of the first voucher applied.
	Issuer *string `json:"issuer,omitempty"`
	// An array of detail objects for each voucher that was used on this payment, if any.
	Vouchers []map[string]any `json:"vouchers,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	RemainderAmount *Amount `json:"remainderAmount,omitempty"`
	// The payment method used to pay the remainder amount, after all gift cards or vouchers were applied.
	RemainderMethod *string `json:"remainderMethod,omitempty"`
	// Optional include. The full payment method details of the remainder payment.
	RemainderDetails map[string]any `json:"remainderDetails,omitempty"`
}

func (p PaymentResponseDetails) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentResponseDetails) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *PaymentResponseDetails) GetConsumerName() *string {
	if p == nil {
		return nil
	}
	return p.ConsumerName
}

func (p *PaymentResponseDetails) GetConsumerAccount() *string {
	if p == nil {
		return nil
	}
	return p.ConsumerAccount
}

func (p *PaymentResponseDetails) GetConsumerBic() *string {
	if p == nil {
		return nil
	}
	return p.ConsumerBic
}

func (p *PaymentResponseDetails) GetShippingAddress() map[string]any {
	if p == nil {
		return nil
	}
	return p.ShippingAddress
}

func (p *PaymentResponseDetails) GetCardNumber() *string {
	if p == nil {
		return nil
	}
	return p.CardNumber
}

func (p *PaymentResponseDetails) GetBankName() *string {
	if p == nil {
		return nil
	}
	return p.BankName
}

func (p *PaymentResponseDetails) GetBankAccount() *string {
	if p == nil {
		return nil
	}
	return p.BankAccount
}

func (p *PaymentResponseDetails) GetBankBic() *string {
	if p == nil {
		return nil
	}
	return p.BankBic
}

func (p *PaymentResponseDetails) GetTransferReference() *string {
	if p == nil {
		return nil
	}
	return p.TransferReference
}

func (p *PaymentResponseDetails) GetCardFingerprint() *string {
	if p == nil {
		return nil
	}
	return p.CardFingerprint
}

func (p *PaymentResponseDetails) GetCardHolder() *string {
	if p == nil {
		return nil
	}
	return p.CardHolder
}

func (p *PaymentResponseDetails) GetCardAudition() *PaymentDetailsCardAuditionResponse {
	if p == nil {
		return nil
	}
	return p.CardAudition
}

func (p *PaymentResponseDetails) GetCardLabel() *PaymentDetailsCardLabelResponse {
	if p == nil {
		return nil
	}
	return p.CardLabel
}

func (p *PaymentResponseDetails) GetCardCountryCode() *string {
	if p == nil {
		return nil
	}
	return p.CardCountryCode
}

func (p *PaymentResponseDetails) GetCardExpiryDate() *string {
	if p == nil {
		return nil
	}
	return p.CardExpiryDate
}

func (p *PaymentResponseDetails) GetCardFunding() *PaymentDetailsCardFundingResponse {
	if p == nil {
		return nil
	}
	return p.CardFunding
}

func (p *PaymentResponseDetails) GetCardSecurity() *PaymentDetailsCardSecurityResponse {
	if p == nil {
		return nil
	}
	return p.CardSecurity
}

func (p *PaymentResponseDetails) GetFeeRegion() *PaymentDetailsFeeRegionResponse {
	if p == nil {
		return nil
	}
	return p.FeeRegion
}

func (p *PaymentResponseDetails) GetCardMaskedNumber() *string {
	if p == nil {
		return nil
	}
	return p.CardMaskedNumber
}

func (p *PaymentResponseDetails) GetCard3dsEci() *string {
	if p == nil {
		return nil
	}
	return p.Card3dsEci
}

func (p *PaymentResponseDetails) GetCardBin() *string {
	if p == nil {
		return nil
	}
	return p.CardBin
}

func (p *PaymentResponseDetails) GetCardIssuer() *string {
	if p == nil {
		return nil
	}
	return p.CardIssuer
}

func (p *PaymentResponseDetails) GetFailureReason() *PaymentDetailsFailureReasonResponse {
	if p == nil {
		return nil
	}
	return p.FailureReason
}

func (p *PaymentResponseDetails) GetFailureMessage() *string {
	if p == nil {
		return nil
	}
	return p.FailureMessage
}

func (p *PaymentResponseDetails) GetWallet() *PaymentDetailsWalletResponse {
	if p == nil {
		return nil
	}
	return p.Wallet
}

func (p *PaymentResponseDetails) GetPaypalReference() *string {
	if p == nil {
		return nil
	}
	return p.PaypalReference
}

func (p *PaymentResponseDetails) GetPaypalPayerID() *string {
	if p == nil {
		return nil
	}
	return p.PaypalPayerID
}

func (p *PaymentResponseDetails) GetSellerProtection() *PaymentDetailsSellerProtectionResponse {
	if p == nil {
		return nil
	}
	return p.SellerProtection
}

func (p *PaymentResponseDetails) GetPaypalFee() *AmountNullable {
	if p == nil {
		return nil
	}
	return p.PaypalFee
}

func (p *PaymentResponseDetails) GetCustomerReference() *string {
	if p == nil {
		return nil
	}
	return p.CustomerReference
}

func (p *PaymentResponseDetails) GetTerminalID() *string {
	if p == nil {
		return nil
	}
	return p.TerminalID
}

func (p *PaymentResponseDetails) GetMaskedNumber() *string {
	if p == nil {
		return nil
	}
	return p.MaskedNumber
}

func (p *PaymentResponseDetails) GetReceipt() *Receipt {
	if p == nil {
		return nil
	}
	return p.Receipt
}

func (p *PaymentResponseDetails) GetCreditorIdentifier() *string {
	if p == nil {
		return nil
	}
	return p.CreditorIdentifier
}

func (p *PaymentResponseDetails) GetDueDate() *types.Date {
	if p == nil {
		return nil
	}
	return p.DueDate
}

func (p *PaymentResponseDetails) GetSignatureDate() *types.Date {
	if p == nil {
		return nil
	}
	return p.SignatureDate
}

func (p *PaymentResponseDetails) GetBankReasonCode() *string {
	if p == nil {
		return nil
	}
	return p.BankReasonCode
}

func (p *PaymentResponseDetails) GetBankReason() *string {
	if p == nil {
		return nil
	}
	return p.BankReason
}

func (p *PaymentResponseDetails) GetEndToEndIdentifier() *string {
	if p == nil {
		return nil
	}
	return p.EndToEndIdentifier
}

func (p *PaymentResponseDetails) GetMandateReference() *string {
	if p == nil {
		return nil
	}
	return p.MandateReference
}

func (p *PaymentResponseDetails) GetBatchReference() *string {
	if p == nil {
		return nil
	}
	return p.BatchReference
}

func (p *PaymentResponseDetails) GetFileReference() *string {
	if p == nil {
		return nil
	}
	return p.FileReference
}

func (p *PaymentResponseDetails) GetQrCode() *QrCode {
	if p == nil {
		return nil
	}
	return p.QrCode
}

func (p *PaymentResponseDetails) GetVoucherNumber() *string {
	if p == nil {
		return nil
	}
	return p.VoucherNumber
}

func (p *PaymentResponseDetails) GetGiftcards() []map[string]any {
	if p == nil {
		return nil
	}
	return p.Giftcards
}

func (p *PaymentResponseDetails) GetIssuer() *string {
	if p == nil {
		return nil
	}
	return p.Issuer
}

func (p *PaymentResponseDetails) GetVouchers() []map[string]any {
	if p == nil {
		return nil
	}
	return p.Vouchers
}

func (p *PaymentResponseDetails) GetRemainderAmount() *Amount {
	if p == nil {
		return nil
	}
	return p.RemainderAmount
}

func (p *PaymentResponseDetails) GetRemainderMethod() *string {
	if p == nil {
		return nil
	}
	return p.RemainderMethod
}

func (p *PaymentResponseDetails) GetRemainderDetails() map[string]any {
	if p == nil {
		return nil
	}
	return p.RemainderDetails
}

// PaymentResponseLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type PaymentResponseLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self URLObj `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Checkout *URLObj `json:"checkout,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	MobileAppCheckout *URLObj `json:"mobileAppCheckout,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	ChangePaymentState *URLObj `json:"changePaymentState,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Dashboard URLObj `json:"dashboard"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Refunds *URLObj `json:"refunds,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Chargebacks *URLObj `json:"chargebacks,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Captures *URLObj `json:"captures,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Settlement *URLObj `json:"settlement,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Customer *URLObj `json:"customer,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Mandate *URLObj `json:"mandate,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Subscription *URLObj `json:"subscription,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Order *URLObj `json:"order,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Terminal *URLObj `json:"terminal,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *URLObj `json:"documentation,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Status *URLObj `json:"status,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	PayOnline *URLObj `json:"payOnline,omitempty"`
}

func (p *PaymentResponseLinks) GetSelf() URLObj {
	if p == nil {
		return URLObj{}
	}
	return p.Self
}

func (p *PaymentResponseLinks) GetCheckout() *URLObj {
	if p == nil {
		return nil
	}
	return p.Checkout
}

func (p *PaymentResponseLinks) GetMobileAppCheckout() *URLObj {
	if p == nil {
		return nil
	}
	return p.MobileAppCheckout
}

func (p *PaymentResponseLinks) GetChangePaymentState() *URLObj {
	if p == nil {
		return nil
	}
	return p.ChangePaymentState
}

func (p *PaymentResponseLinks) GetDashboard() URLObj {
	if p == nil {
		return URLObj{}
	}
	return p.Dashboard
}

func (p *PaymentResponseLinks) GetRefunds() *URLObj {
	if p == nil {
		return nil
	}
	return p.Refunds
}

func (p *PaymentResponseLinks) GetChargebacks() *URLObj {
	if p == nil {
		return nil
	}
	return p.Chargebacks
}

func (p *PaymentResponseLinks) GetCaptures() *URLObj {
	if p == nil {
		return nil
	}
	return p.Captures
}

func (p *PaymentResponseLinks) GetSettlement() *URLObj {
	if p == nil {
		return nil
	}
	return p.Settlement
}

func (p *PaymentResponseLinks) GetCustomer() *URLObj {
	if p == nil {
		return nil
	}
	return p.Customer
}

func (p *PaymentResponseLinks) GetMandate() *URLObj {
	if p == nil {
		return nil
	}
	return p.Mandate
}

func (p *PaymentResponseLinks) GetSubscription() *URLObj {
	if p == nil {
		return nil
	}
	return p.Subscription
}

func (p *PaymentResponseLinks) GetOrder() *URLObj {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PaymentResponseLinks) GetTerminal() *URLObj {
	if p == nil {
		return nil
	}
	return p.Terminal
}

func (p *PaymentResponseLinks) GetDocumentation() *URLObj {
	if p == nil {
		return nil
	}
	return p.Documentation
}

func (p *PaymentResponseLinks) GetStatus() *URLObj {
	if p == nil {
		return nil
	}
	return p.Status
}

func (p *PaymentResponseLinks) GetPayOnline() *URLObj {
	if p == nil {
		return nil
	}
	return p.PayOnline
}

type PaymentResponse struct {
	// Indicates the response contains a payment object. Will always contain the string `payment` for this endpoint.
	Resource *string `json:"resource,omitempty"`
	ID       *string `json:"id,omitempty"`
	// Whether this entity was created in live mode or in test mode.
	Mode *Mode `json:"mode,omitempty"`
	// The description of the payment. This will be shown to your customer on their card or bank statement when possible.
	// We truncate the description automatically according to the limits of the used payment method. The description is
	// also visible in any exports you generate.
	//
	// We recommend you use a unique identifier so that you can always link the payment to the order in your back office.
	// This is particularly useful for bookkeeping.
	//
	// The maximum length of the description field differs per payment method, with the absolute maximum being 255
	// characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
	Description *string `json:"description,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount *Amount `json:"amount,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	AmountRefunded *Amount `json:"amountRefunded,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	AmountRemaining *Amount `json:"amountRemaining,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	AmountCaptured *Amount `json:"amountCaptured,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	AmountChargedBack *Amount `json:"amountChargedBack,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	SettlementAmount *Amount `json:"settlementAmount,omitempty"`
	// The URL your customer will be redirected to after the payment process.
	//
	// It could make sense for the redirectUrl to contain a unique identifier – like your order ID – so you can show the
	// right page referencing the order when your customer returns.
	//
	// The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for
	// Apple Pay payments with an `applePayPaymentToken`.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not
	// provided, the customer will be redirected to the `redirectUrl` instead — see above.
	//
	// Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is
	// therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle
	// payment cancellations.
	CancelURL *string `json:"cancelUrl,omitempty"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines           []PaymentResponseLine `json:"lines,omitempty"`
	BillingAddress  *PaymentAddress       `json:"billingAddress,omitempty"`
	ShippingAddress *PaymentAddress       `json:"shippingAddress,omitempty"`
	// Allows you to preset the language to be used.
	Locale *LocaleResponse `json:"locale,omitempty"`
	// This optional field contains your customer's ISO 3166-1 alpha-2 country code, detected by us during checkout. This
	// field is omitted if the country code was not detected.
	CountryCode *string `json:"countryCode,omitempty"`
	// Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment
	// method and your customer will skip the selection screen and is sent directly to the chosen payment method. The
	// parameter enables you to fully integrate the payment method selection into your website.
	//
	// You can also specify the methods in an array. By doing so we will still show the payment method selection screen
	// but will only show the methods specified in the array. For example, you can use this functionality to only show
	// payment methods from a specific country to your customer `['bancontact', 'belfius']`.
	Method *MethodResponse `json:"method,omitempty"`
	// For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT
	// rates you have used for the order to ensure your customer's country matches the VAT country.
	//
	// Use this parameter to restrict the payment methods available to your customer to those from a single country.
	//
	// If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
	//
	// The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
	RestrictPaymentMethodsToCountry *string `json:"restrictPaymentMethodsToCountry,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *Metadata `json:"metadata,omitempty"`
	// Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
	// and capture at a later time.
	//
	// This field needs to be set to `manual` for method `riverty`.
	CaptureMode *CaptureModeResponse `json:"captureMode,omitempty"`
	// **Only relevant if you wish to manage authorization and capturing separately.**
	//
	// Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a
	// later point either be 'captured' or canceled.
	//
	// By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a
	// capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For
	// example `8 hours` or `2 days`.
	//
	// To schedule an automatic capture, the `captureMode` must be set to `automatic`.
	//
	// The maximum delay is 7 days (168 hours).
	//
	// Possible values: `... hours` `... days`
	CaptureDelay *string `json:"captureDelay,omitempty"`
	// Indicates the date before which the payment needs to be captured, in ISO 8601 format. From this date onwards we
	// can no longer guarantee a successful capture. The parameter is omitted if the payment is not authorized (yet).
	CaptureBefore *string `json:"captureBefore,omitempty"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	//
	// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
	// `routing` parameter.
	ApplicationFee *PaymentResponseApplicationFee `json:"applicationFee,omitempty"`
	// *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
	//
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you create payments on your own account that you want to split between yourself and one or more connected
	// merchants, you can use this `routing` parameter to route the payment accordingly.
	//
	// The `routing` parameter should contain an array of objects, with each object describing the destination for a
	// specific portion of the payment.
	//
	// It is not necessary to indicate in the array which portion goes to yourself. After all portions of the total
	// payment amount have been routed, the amount left will be routed to the current organization automatically.
	//
	// If instead you use OAuth to create payments on a connected merchant's account, refer to the `applicationFee`
	// parameter.
	Routing        []EntityPaymentRouteResponse `json:"routing,omitempty"`
	SequenceType   *SequenceTypeResponse        `json:"sequenceType,omitempty"`
	SubscriptionID *string                      `json:"subscriptionId,omitempty"`
	MandateID      *string                      `json:"mandateId,omitempty"`
	CustomerID     *string                      `json:"customerId,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
	// request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
	// required.
	ProfileID    *string `json:"profileId,omitempty"`
	SettlementID *string `json:"settlementId,omitempty"`
	OrderID      *string `json:"orderId,omitempty"`
	// The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
	// statuses occur at what point.
	Status *PaymentStatus `json:"status,omitempty"`
	// This object offers details about the status of a payment. Currently it is only available for point-of-sale
	// payments.
	//
	// You can find more information about the possible values of this object on
	// [this page](status-reasons).**
	StatusReason *StatusReason `json:"statusReason,omitempty"`
	// Whether the payment can be canceled. This parameter is omitted if the payment reaches a final state.
	IsCancelable *bool `json:"isCancelable,omitempty"`
	// An object containing payment details collected during the payment process. For example, details may include the
	// customer's card or bank details and a payment reference. For the full list of details, please refer to the
	// [method-specific parameters](extra-payment-parameters) guide.
	Details *PaymentResponseDetails `json:"details,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The date and time the payment became authorized, in ISO 8601 format. This parameter is omitted if the payment is
	// not authorized (yet).
	AuthorizedAt *string `json:"authorizedAt,omitempty"`
	// The date and time the payment became paid, in ISO 8601 format. This parameter is omitted if the payment is not
	// completed (yet).
	PaidAt *string `json:"paidAt,omitempty"`
	// The date and time the payment was canceled, in ISO 8601 format. This parameter is omitted if the payment is not
	// canceled (yet).
	CanceledAt *string `json:"canceledAt,omitempty"`
	// The date and time the payment will expire, in ISO 8601 format. This parameter is omitted if the payment can no
	// longer expire.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The date and time the payment was expired, in ISO 8601 format. This parameter is omitted if the payment did not
	// expire (yet).
	ExpiredAt *string `json:"expiredAt,omitempty"`
	// The date and time the payment failed, in ISO 8601 format. This parameter is omitted if the payment did not fail
	// (yet).
	FailedAt *string `json:"failedAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *PaymentResponseLinks `json:"_links,omitempty"`
}

func (p *PaymentResponse) GetResource() *string {
	if p == nil {
		return nil
	}
	return p.Resource
}

func (p *PaymentResponse) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PaymentResponse) GetMode() *Mode {
	if p == nil {
		return nil
	}
	return p.Mode
}

func (p *PaymentResponse) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *PaymentResponse) GetAmount() *Amount {
	if p == nil {
		return nil
	}
	return p.Amount
}

func (p *PaymentResponse) GetAmountRefunded() *Amount {
	if p == nil {
		return nil
	}
	return p.AmountRefunded
}

func (p *PaymentResponse) GetAmountRemaining() *Amount {
	if p == nil {
		return nil
	}
	return p.AmountRemaining
}

func (p *PaymentResponse) GetAmountCaptured() *Amount {
	if p == nil {
		return nil
	}
	return p.AmountCaptured
}

func (p *PaymentResponse) GetAmountChargedBack() *Amount {
	if p == nil {
		return nil
	}
	return p.AmountChargedBack
}

func (p *PaymentResponse) GetSettlementAmount() *Amount {
	if p == nil {
		return nil
	}
	return p.SettlementAmount
}

func (p *PaymentResponse) GetRedirectURL() *string {
	if p == nil {
		return nil
	}
	return p.RedirectURL
}

func (p *PaymentResponse) GetCancelURL() *string {
	if p == nil {
		return nil
	}
	return p.CancelURL
}

func (p *PaymentResponse) GetWebhookURL() *string {
	if p == nil {
		return nil
	}
	return p.WebhookURL
}

func (p *PaymentResponse) GetLines() []PaymentResponseLine {
	if p == nil {
		return nil
	}
	return p.Lines
}

func (p *PaymentResponse) GetBillingAddress() *PaymentAddress {
	if p == nil {
		return nil
	}
	return p.BillingAddress
}

func (p *PaymentResponse) GetShippingAddress() *PaymentAddress {
	if p == nil {
		return nil
	}
	return p.ShippingAddress
}

func (p *PaymentResponse) GetLocale() *LocaleResponse {
	if p == nil {
		return nil
	}
	return p.Locale
}

func (p *PaymentResponse) GetCountryCode() *string {
	if p == nil {
		return nil
	}
	return p.CountryCode
}

func (p *PaymentResponse) GetMethod() *MethodResponse {
	if p == nil {
		return nil
	}
	return p.Method
}

func (p *PaymentResponse) GetRestrictPaymentMethodsToCountry() *string {
	if p == nil {
		return nil
	}
	return p.RestrictPaymentMethodsToCountry
}

func (p *PaymentResponse) GetMetadata() *Metadata {
	if p == nil {
		return nil
	}
	return p.Metadata
}

func (p *PaymentResponse) GetCaptureMode() *CaptureModeResponse {
	if p == nil {
		return nil
	}
	return p.CaptureMode
}

func (p *PaymentResponse) GetCaptureDelay() *string {
	if p == nil {
		return nil
	}
	return p.CaptureDelay
}

func (p *PaymentResponse) GetCaptureBefore() *string {
	if p == nil {
		return nil
	}
	return p.CaptureBefore
}

func (p *PaymentResponse) GetApplicationFee() *PaymentResponseApplicationFee {
	if p == nil {
		return nil
	}
	return p.ApplicationFee
}

func (p *PaymentResponse) GetRouting() []EntityPaymentRouteResponse {
	if p == nil {
		return nil
	}
	return p.Routing
}

func (p *PaymentResponse) GetSequenceType() *SequenceTypeResponse {
	if p == nil {
		return nil
	}
	return p.SequenceType
}

func (p *PaymentResponse) GetSubscriptionID() *string {
	if p == nil {
		return nil
	}
	return p.SubscriptionID
}

func (p *PaymentResponse) GetMandateID() *string {
	if p == nil {
		return nil
	}
	return p.MandateID
}

func (p *PaymentResponse) GetCustomerID() *string {
	if p == nil {
		return nil
	}
	return p.CustomerID
}

func (p *PaymentResponse) GetProfileID() *string {
	if p == nil {
		return nil
	}
	return p.ProfileID
}

func (p *PaymentResponse) GetSettlementID() *string {
	if p == nil {
		return nil
	}
	return p.SettlementID
}

func (p *PaymentResponse) GetOrderID() *string {
	if p == nil {
		return nil
	}
	return p.OrderID
}

func (p *PaymentResponse) GetStatus() *PaymentStatus {
	if p == nil {
		return nil
	}
	return p.Status
}

func (p *PaymentResponse) GetStatusReason() *StatusReason {
	if p == nil {
		return nil
	}
	return p.StatusReason
}

func (p *PaymentResponse) GetIsCancelable() *bool {
	if p == nil {
		return nil
	}
	return p.IsCancelable
}

func (p *PaymentResponse) GetDetails() *PaymentResponseDetails {
	if p == nil {
		return nil
	}
	return p.Details
}

func (p *PaymentResponse) GetCreatedAt() *string {
	if p == nil {
		return nil
	}
	return p.CreatedAt
}

func (p *PaymentResponse) GetAuthorizedAt() *string {
	if p == nil {
		return nil
	}
	return p.AuthorizedAt
}

func (p *PaymentResponse) GetPaidAt() *string {
	if p == nil {
		return nil
	}
	return p.PaidAt
}

func (p *PaymentResponse) GetCanceledAt() *string {
	if p == nil {
		return nil
	}
	return p.CanceledAt
}

func (p *PaymentResponse) GetExpiresAt() *string {
	if p == nil {
		return nil
	}
	return p.ExpiresAt
}

func (p *PaymentResponse) GetExpiredAt() *string {
	if p == nil {
		return nil
	}
	return p.ExpiredAt
}

func (p *PaymentResponse) GetFailedAt() *string {
	if p == nil {
		return nil
	}
	return p.FailedAt
}

func (p *PaymentResponse) GetLinks() *PaymentResponseLinks {
	if p == nil {
		return nil
	}
	return p.Links
}
