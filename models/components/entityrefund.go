// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// EntityRefundTypeAcquirerReference - Specifies the reference type
type EntityRefundTypeAcquirerReference string

const (
	EntityRefundTypeAcquirerReferenceAcquirerReference EntityRefundTypeAcquirerReference = "acquirer-reference"
)

func (e EntityRefundTypeAcquirerReference) ToPointer() *EntityRefundTypeAcquirerReference {
	return &e
}
func (e *EntityRefundTypeAcquirerReference) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "acquirer-reference":
		*e = EntityRefundTypeAcquirerReference(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityRefundTypeAcquirerReference: %v", v)
	}
}

type EntityRefundExternalReference struct {
	// Specifies the reference type
	Type *EntityRefundTypeAcquirerReference `json:"type,omitempty"`
	// Unique reference from the payment provider
	ID *string `json:"id,omitempty"`
}

func (o *EntityRefundExternalReference) GetType() *EntityRefundTypeAcquirerReference {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EntityRefundExternalReference) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// RoutingReversalType - The type of source. Currently only the source type `organization` is supported.
type RoutingReversalType string

const (
	RoutingReversalTypeOrganization RoutingReversalType = "organization"
)

func (e RoutingReversalType) ToPointer() *RoutingReversalType {
	return &e
}
func (e *RoutingReversalType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organization":
		*e = RoutingReversalType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RoutingReversalType: %v", v)
	}
}

// EntityRefundSource - Where the funds will be pulled back from.
type EntityRefundSource struct {
	// The type of source. Currently only the source type `organization` is supported.
	Type           *RoutingReversalType `json:"type,omitempty"`
	OrganizationID *string              `json:"organizationId,omitempty"`
}

func (o *EntityRefundSource) GetType() *RoutingReversalType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EntityRefundSource) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

type EntityRefundRoutingReversal struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount *Amount `json:"amount,omitempty"`
	// Where the funds will be pulled back from.
	Source *EntityRefundSource `json:"source,omitempty"`
}

func (o *EntityRefundRoutingReversal) GetAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *EntityRefundRoutingReversal) GetSource() *EntityRefundSource {
	if o == nil {
		return nil
	}
	return o.Source
}

type EntityRefund struct {
	ID string `json:"id"`
	// The description of the refund that may be shown to your customer, depending on the payment method used.
	Description string `json:"description"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount Amount `json:"amount"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	SettlementAmount *AmountNullable `json:"settlementAmount,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata          *Metadata                      `json:"metadata"`
	PaymentID         *string                        `json:"paymentId,omitempty"`
	SettlementID      *string                        `json:"settlementId,omitempty"`
	ExternalReference *EntityRefundExternalReference `json:"externalReference,omitempty"`
	// *This feature is only available to marketplace operators.*
	//
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants, by providing the `routing` object during [payment creation](create-payment).
	//
	// When creating refunds for these *routed* payments, by default the full amount is deducted from your balance.
	//
	// If you want to pull back the funds that were routed to the connected merchant(s), you can set this parameter to
	// `true` when issuing a full refund.
	//
	// For more fine-grained control and for partial refunds, use the `routingReversals` parameter instead.
	ReverseRouting *bool `json:"reverseRouting,omitempty"`
	// *This feature is only available to marketplace operators.*
	//
	// When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
	//
	// If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
	// needs to be reversed from which merchant(s).
	//
	// If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
	RoutingReversals []EntityRefundRoutingReversal `json:"routingReversals,omitempty"`
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
}

func (o *EntityRefund) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EntityRefund) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *EntityRefund) GetAmount() Amount {
	if o == nil {
		return Amount{}
	}
	return o.Amount
}

func (o *EntityRefund) GetSettlementAmount() *AmountNullable {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *EntityRefund) GetMetadata() *Metadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *EntityRefund) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *EntityRefund) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *EntityRefund) GetExternalReference() *EntityRefundExternalReference {
	if o == nil {
		return nil
	}
	return o.ExternalReference
}

func (o *EntityRefund) GetReverseRouting() *bool {
	if o == nil {
		return nil
	}
	return o.ReverseRouting
}

func (o *EntityRefund) GetRoutingReversals() []EntityRefundRoutingReversal {
	if o == nil {
		return nil
	}
	return o.RoutingReversals
}

func (o *EntityRefund) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}
