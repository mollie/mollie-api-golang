// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
)

type MetadataType string

const (
	MetadataTypeStr        MetadataType = "str"
	MetadataTypeMapOfAny   MetadataType = "mapOfAny"
	MetadataTypeArrayOfStr MetadataType = "arrayOfStr"
)

// Metadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type Metadata struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type MetadataType
}

func CreateMetadataStr(str string) Metadata {
	typ := MetadataTypeStr

	return Metadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateMetadataMapOfAny(mapOfAny map[string]any) Metadata {
	typ := MetadataTypeMapOfAny

	return Metadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateMetadataArrayOfStr(arrayOfStr []string) Metadata {
	typ := MetadataTypeArrayOfStr

	return Metadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *Metadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = MetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = MetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = MetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Metadata", string(data))
}

func (u Metadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type Metadata: all fields are null")
}
