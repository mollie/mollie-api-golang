// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/types"
)

// PaymentRequestType - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type PaymentRequestType string

const (
	PaymentRequestTypePhysical    PaymentRequestType = "physical"
	PaymentRequestTypeDigital     PaymentRequestType = "digital"
	PaymentRequestTypeShippingFee PaymentRequestType = "shipping_fee"
	PaymentRequestTypeDiscount    PaymentRequestType = "discount"
	PaymentRequestTypeStoreCredit PaymentRequestType = "store_credit"
	PaymentRequestTypeGiftCard    PaymentRequestType = "gift_card"
	PaymentRequestTypeSurcharge   PaymentRequestType = "surcharge"
	PaymentRequestTypeTip         PaymentRequestType = "tip"
)

func (e PaymentRequestType) ToPointer() *PaymentRequestType {
	return &e
}
func (e *PaymentRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "physical":
		fallthrough
	case "digital":
		fallthrough
	case "shipping_fee":
		fallthrough
	case "discount":
		fallthrough
	case "store_credit":
		fallthrough
	case "gift_card":
		fallthrough
	case "surcharge":
		fallthrough
	case "tip":
		*e = PaymentRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentRequestType: %v", v)
	}
}

type PaymentRequestCategory string

const (
	PaymentRequestCategoryMeal         PaymentRequestCategory = "meal"
	PaymentRequestCategoryEco          PaymentRequestCategory = "eco"
	PaymentRequestCategoryGift         PaymentRequestCategory = "gift"
	PaymentRequestCategorySportCulture PaymentRequestCategory = "sport_culture"
)

func (e PaymentRequestCategory) ToPointer() *PaymentRequestCategory {
	return &e
}
func (e *PaymentRequestCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "meal":
		fallthrough
	case "eco":
		fallthrough
	case "gift":
		fallthrough
	case "sport_culture":
		*e = PaymentRequestCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentRequestCategory: %v", v)
	}
}

type PaymentRequestLine struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *PaymentRequestType `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	UnitPrice Amount `json:"unitPrice"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	DiscountAmount *Amount `json:"discountAmount,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	TotalAmount Amount `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	VatAmount *Amount `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []PaymentRequestCategory `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string            `json:"productUrl,omitempty"`
	Recurring  *RecurringLineItem `json:"recurring,omitempty"`
}

func (o *PaymentRequestLine) GetType() *PaymentRequestType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *PaymentRequestLine) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *PaymentRequestLine) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *PaymentRequestLine) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *PaymentRequestLine) GetUnitPrice() Amount {
	if o == nil {
		return Amount{}
	}
	return o.UnitPrice
}

func (o *PaymentRequestLine) GetDiscountAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *PaymentRequestLine) GetTotalAmount() Amount {
	if o == nil {
		return Amount{}
	}
	return o.TotalAmount
}

func (o *PaymentRequestLine) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *PaymentRequestLine) GetVatAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *PaymentRequestLine) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *PaymentRequestLine) GetCategories() []PaymentRequestCategory {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *PaymentRequestLine) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *PaymentRequestLine) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}

func (o *PaymentRequestLine) GetRecurring() *RecurringLineItem {
	if o == nil {
		return nil
	}
	return o.Recurring
}

// PaymentRequestApplicationFee - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
//
// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
// `routing` parameter.
type PaymentRequestApplicationFee struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount *Amount `json:"amount,omitempty"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description *string `json:"description,omitempty"`
}

func (o *PaymentRequestApplicationFee) GetAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *PaymentRequestApplicationFee) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// Company - Billie is a business-to-business (B2B) payment method. It requires extra information to identify the organization
// that is completing the payment. It is recommended to include these parameters up front for a seamless flow.
// Otherwise, Billie will ask the customer to complete the missing fields during checkout.
type Company struct {
	// The organization's registration number.
	RegistrationNumber *string `json:"registrationNumber,omitempty"`
	// The organization's VAT number.
	VatNumber *string `json:"vatNumber,omitempty"`
	// The organization's entity type.
	EntityType *string `json:"entityType,omitempty"`
}

func (o *Company) GetRegistrationNumber() *string {
	if o == nil {
		return nil
	}
	return o.RegistrationNumber
}

func (o *Company) GetVatNumber() *string {
	if o == nil {
		return nil
	}
	return o.VatNumber
}

func (o *Company) GetEntityType() *string {
	if o == nil {
		return nil
	}
	return o.EntityType
}

type PaymentRequest struct {
	ID *string `json:"id,omitempty"`
	// The description of the payment. This will be shown to your customer on their card or bank statement when possible.
	// We truncate the description automatically according to the limits of the used payment method. The description is
	// also visible in any exports you generate.
	//
	// We recommend you use a unique identifier so that you can always link the payment to the order in your back office.
	// This is particularly useful for bookkeeping.
	//
	// The maximum length of the description field differs per payment method, with the absolute maximum being 255
	// characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
	Description *string `json:"description,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount *Amount `json:"amount,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	AmountRefunded *Amount `json:"amountRefunded,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	AmountRemaining *Amount `json:"amountRemaining,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	AmountCaptured *Amount `json:"amountCaptured,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	AmountChargedBack *Amount `json:"amountChargedBack,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	SettlementAmount *Amount `json:"settlementAmount,omitempty"`
	// The URL your customer will be redirected to after the payment process.
	//
	// It could make sense for the redirectUrl to contain a unique identifier – like your order ID – so you can show the
	// right page referencing the order when your customer returns.
	//
	// The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for
	// Apple Pay payments with an `applePayPaymentToken`.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not
	// provided, the customer will be redirected to the `redirectUrl` instead — see above.
	//
	// Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is
	// therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle
	// payment cancellations.
	CancelURL *string `json:"cancelUrl,omitempty"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines           []PaymentRequestLine `json:"lines,omitempty"`
	BillingAddress  *PaymentAddress      `json:"billingAddress,omitempty"`
	ShippingAddress *PaymentAddress      `json:"shippingAddress,omitempty"`
	// Allows you to preset the language to be used.
	Locale *Locale `json:"locale,omitempty"`
	// Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment
	// method and your customer will skip the selection screen and is sent directly to the chosen payment method. The
	// parameter enables you to fully integrate the payment method selection into your website.
	//
	// You can also specify the methods in an array. By doing so we will still show the payment method selection screen
	// but will only show the methods specified in the array. For example, you can use this functionality to only show
	// payment methods from a specific country to your customer `['bancontact', 'belfius']`.
	Method *Method `json:"method,omitempty"`
	// **Only relevant for iDEAL, KBC/CBC, gift card, and voucher payments.**
	//
	// **⚠️ With the introduction of iDEAL 2 in 2025, this field will be ignored for iDEAL payments. For more information
	// on the migration, refer to our [help center](https://help.mollie.com/hc/articles/19100313768338-iDEAL-2-0).**
	//
	// Some payment methods are a network of connected banks or card issuers. In these cases, after selecting the payment
	// method, the customer may still need to select the appropriate issuer before the payment can proceed.
	//
	// We provide hosted issuer selection screens, but these screens can be skipped by providing the `issuer` via the API
	// up front.
	//
	// The full list of issuers for a specific method can be retrieved via the Methods API by using the optional
	// `issuers` include.
	//
	// A valid issuer for iDEAL is for example `ideal_INGBNL2A` (for ING Bank).
	Issuer *string `json:"issuer,omitempty"`
	// For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT
	// rates you have used for the order to ensure your customer's country matches the VAT country.
	//
	// Use this parameter to restrict the payment methods available to your customer to those from a single country.
	//
	// If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
	//
	// The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
	RestrictPaymentMethodsToCountry *string `json:"restrictPaymentMethodsToCountry,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *Metadata `json:"metadata,omitempty"`
	// Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
	// and capture at a later time.
	//
	// This field needs to be set to `manual` for method `riverty`.
	CaptureMode *CaptureMode `json:"captureMode,omitempty"`
	// **Only relevant if you wish to manage authorization and capturing separately.**
	//
	// Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a
	// later point either be 'captured' or canceled.
	//
	// By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a
	// capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For
	// example `8 hours` or `2 days`.
	//
	// To schedule an automatic capture, the `captureMode` must be set to `automatic`.
	//
	// The maximum delay is 7 days (168 hours).
	//
	// Possible values: `... hours` `... days`
	CaptureDelay *string `json:"captureDelay,omitempty"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	//
	// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
	// `routing` parameter.
	ApplicationFee *PaymentRequestApplicationFee `json:"applicationFee,omitempty"`
	// *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
	//
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you create payments on your own account that you want to split between yourself and one or more connected
	// merchants, you can use this `routing` parameter to route the payment accordingly.
	//
	// The `routing` parameter should contain an array of objects, with each object describing the destination for a
	// specific portion of the payment.
	//
	// It is not necessary to indicate in the array which portion goes to yourself. After all portions of the total
	// payment amount have been routed, the amount left will be routed to the current organization automatically.
	//
	// If instead you use OAuth to create payments on a connected merchant's account, refer to the `applicationFee`
	// parameter.
	Routing        []EntityPaymentRoute `json:"routing,omitempty"`
	SequenceType   *SequenceType        `json:"sequenceType,omitempty"`
	SubscriptionID *string              `json:"subscriptionId,omitempty"`
	MandateID      *string              `json:"mandateId,omitempty"`
	CustomerID     *string              `json:"customerId,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
	// request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
	// required.
	ProfileID    *string `json:"profileId,omitempty"`
	SettlementID *string `json:"settlementId,omitempty"`
	OrderID      *string `json:"orderId,omitempty"`
	// The date by which the payment should be completed in `YYYY-MM-DD` format
	DueDate *string `json:"dueDate,omitempty"`
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
	// The Apple Pay Payment token object (encoded as JSON) that is part of the result of authorizing a payment request.
	// The token contains the payment information needed to authorize the payment.
	//
	// The object should be passed encoded in a JSON string.
	ApplePayPaymentToken *string `json:"applePayPaymentToken,omitempty"`
	// Billie is a business-to-business (B2B) payment method. It requires extra information to identify the organization
	// that is completing the payment. It is recommended to include these parameters up front for a seamless flow.
	// Otherwise, Billie will ask the customer to complete the missing fields during checkout.
	Company *Company `json:"company,omitempty"`
	// When creating credit card payments using Mollie Components, you need to provide the card token you received from
	// the card component in this field. The token represents the customer's card information needed to complete the
	// payment. Note: field only valid for oneoff and first payments. For recurring payments, the customerId alone is
	// enough.
	CardToken *string `json:"cardToken,omitempty"`
	// The card token you received from the card component of Mollie Components. The token represents the customer's card
	// information needed to complete the payment.
	VoucherNumber *string `json:"voucherNumber,omitempty"`
	// The PIN on the gift card. You can supply this to prefill the PIN, if the card has any.
	VoucherPin *string `json:"voucherPin,omitempty"`
	// The customer's date of birth. If not provided via the API, iDeal in3 will ask the customer to provide it during
	// the payment process.
	ConsumerDateOfBirth *types.Date `json:"consumerDateOfBirth,omitempty"`
	// For some industries, additional purchase information can be sent to Klarna to increase the authorization rate.
	// You can submit your extra data in this field if you have agreed upon this with Klarna. This field should be an
	// object containing any of the allowed keys and sub-objects described at the Klarna Developer Documentation.
	ExtraMerchantData map[string]any `json:"extraMerchantData,omitempty"`
	// The unique ID you have used for the PayPal fraud library. You should include this if you use PayPal for an
	// on-demand payment.
	SessionID *string `json:"sessionId,omitempty"`
	// Indicate if you are about to deliver digital goods, such as for example a software license. Setting this parameter
	// can have consequences for your PayPal Seller Protection. Refer to PayPal's documentation for more information.
	DigitalGoods *bool `json:"digitalGoods,omitempty"`
	// Used by paysafecard for customer identification across payments. When you generate a customer reference yourself,
	// make sure not to put personal identifiable information or IP addresses in the customer reference directly.
	CustomerReference *string `json:"customerReference,omitempty"`
	// The ID of the terminal device where you want to initiate the payment on.
	TerminalID *string `json:"terminalId,omitempty"`
}

func (p PaymentRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *PaymentRequest) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PaymentRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PaymentRequest) GetAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *PaymentRequest) GetAmountRefunded() *Amount {
	if o == nil {
		return nil
	}
	return o.AmountRefunded
}

func (o *PaymentRequest) GetAmountRemaining() *Amount {
	if o == nil {
		return nil
	}
	return o.AmountRemaining
}

func (o *PaymentRequest) GetAmountCaptured() *Amount {
	if o == nil {
		return nil
	}
	return o.AmountCaptured
}

func (o *PaymentRequest) GetAmountChargedBack() *Amount {
	if o == nil {
		return nil
	}
	return o.AmountChargedBack
}

func (o *PaymentRequest) GetSettlementAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *PaymentRequest) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *PaymentRequest) GetCancelURL() *string {
	if o == nil {
		return nil
	}
	return o.CancelURL
}

func (o *PaymentRequest) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *PaymentRequest) GetLines() []PaymentRequestLine {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *PaymentRequest) GetBillingAddress() *PaymentAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *PaymentRequest) GetShippingAddress() *PaymentAddress {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *PaymentRequest) GetLocale() *Locale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *PaymentRequest) GetMethod() *Method {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PaymentRequest) GetIssuer() *string {
	if o == nil {
		return nil
	}
	return o.Issuer
}

func (o *PaymentRequest) GetRestrictPaymentMethodsToCountry() *string {
	if o == nil {
		return nil
	}
	return o.RestrictPaymentMethodsToCountry
}

func (o *PaymentRequest) GetMetadata() *Metadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *PaymentRequest) GetCaptureMode() *CaptureMode {
	if o == nil {
		return nil
	}
	return o.CaptureMode
}

func (o *PaymentRequest) GetCaptureDelay() *string {
	if o == nil {
		return nil
	}
	return o.CaptureDelay
}

func (o *PaymentRequest) GetApplicationFee() *PaymentRequestApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *PaymentRequest) GetRouting() []EntityPaymentRoute {
	if o == nil {
		return nil
	}
	return o.Routing
}

func (o *PaymentRequest) GetSequenceType() *SequenceType {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *PaymentRequest) GetSubscriptionID() *string {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

func (o *PaymentRequest) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *PaymentRequest) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *PaymentRequest) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *PaymentRequest) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *PaymentRequest) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *PaymentRequest) GetDueDate() *string {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *PaymentRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

func (o *PaymentRequest) GetApplePayPaymentToken() *string {
	if o == nil {
		return nil
	}
	return o.ApplePayPaymentToken
}

func (o *PaymentRequest) GetCompany() *Company {
	if o == nil {
		return nil
	}
	return o.Company
}

func (o *PaymentRequest) GetCardToken() *string {
	if o == nil {
		return nil
	}
	return o.CardToken
}

func (o *PaymentRequest) GetVoucherNumber() *string {
	if o == nil {
		return nil
	}
	return o.VoucherNumber
}

func (o *PaymentRequest) GetVoucherPin() *string {
	if o == nil {
		return nil
	}
	return o.VoucherPin
}

func (o *PaymentRequest) GetConsumerDateOfBirth() *types.Date {
	if o == nil {
		return nil
	}
	return o.ConsumerDateOfBirth
}

func (o *PaymentRequest) GetExtraMerchantData() map[string]any {
	if o == nil {
		return nil
	}
	return o.ExtraMerchantData
}

func (o *PaymentRequest) GetSessionID() *string {
	if o == nil {
		return nil
	}
	return o.SessionID
}

func (o *PaymentRequest) GetDigitalGoods() *bool {
	if o == nil {
		return nil
	}
	return o.DigitalGoods
}

func (o *PaymentRequest) GetCustomerReference() *string {
	if o == nil {
		return nil
	}
	return o.CustomerReference
}

func (o *PaymentRequest) GetTerminalID() *string {
	if o == nil {
		return nil
	}
	return o.TerminalID
}
