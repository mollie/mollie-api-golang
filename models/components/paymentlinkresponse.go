// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/mollie/mollie-api-golang/internal/utils"
)

// PaymentLinkResponseApplicationFee - With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
type PaymentLinkResponseApplicationFee struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount Amount `json:"amount"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description string `json:"description"`
}

func (p PaymentLinkResponseApplicationFee) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentLinkResponseApplicationFee) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"amount", "description"}); err != nil {
		return err
	}
	return nil
}

func (p *PaymentLinkResponseApplicationFee) GetAmount() Amount {
	if p == nil {
		return Amount{}
	}
	return p.Amount
}

func (p *PaymentLinkResponseApplicationFee) GetDescription() string {
	if p == nil {
		return ""
	}
	return p.Description
}

// PaymentLinkResponseLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type PaymentLinkResponseLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self URLObj `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	PaymentLink URLObj `json:"paymentLink"`
}

func (p PaymentLinkResponseLinks) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentLinkResponseLinks) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"self", "paymentLink"}); err != nil {
		return err
	}
	return nil
}

func (p *PaymentLinkResponseLinks) GetSelf() URLObj {
	if p == nil {
		return URLObj{}
	}
	return p.Self
}

func (p *PaymentLinkResponseLinks) GetPaymentLink() URLObj {
	if p == nil {
		return URLObj{}
	}
	return p.PaymentLink
}

type PaymentLinkResponse struct {
	// Indicates the response contains a payment link object. Will always contain the string `payment-link` for this
	// endpoint.
	Resource *string `json:"resource,omitempty"`
	ID       *string `json:"id,omitempty"`
	// Whether this entity was created in live mode or in test mode.
	Mode *Mode `json:"mode,omitempty"`
	// A short description of the payment link. The description is visible in the Dashboard and will be shown on the
	// customer's bank or card statement when possible.
	Description *string `json:"description,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount *AmountNullable `json:"amount,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	MinimumAmount *AmountNullable `json:"minimumAmount,omitempty"`
	// Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
	Archived *bool `json:"archived,omitempty"`
	// The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
	// the customer will be shown a generic message after completing the payment.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
	// resulting from the payment link.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines           []PaymentLineItemResponse `json:"lines,omitempty"`
	BillingAddress  *PaymentAddress           `json:"billingAddress,omitempty"`
	ShippingAddress *PaymentAddress           `json:"shippingAddress,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
	// request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
	// required.
	ProfileID *string `json:"profileId,omitempty"`
	// Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
	// payments using the same link.
	//
	// If no value is specified, the field defaults to `false`, allowing only a single payment per link.
	Reusable *bool `json:"reusable,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The date and time the payment link became paid, in ISO 8601 format.
	PaidAt *string `json:"paidAt,omitempty"`
	// The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
	// the payment link will not expire automatically.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// An array of payment methods that are allowed to be used for this payment link. When this parameter is
	// not provided or is an empty array, all enabled payment methods will be available.
	//
	// Enum: 'applepay', 'bacs', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'billie', 'blik', 'creditcard', 'eps',
	// 'giftcard', 'ideal', 'in3', 'kbc', 'klarna', 'mbway', 'multibanco', 'mybank', 'paybybank', 'paypal', 'paysafecard',
	// 'pointofsale', 'przelewy24', 'riverty', 'satispay', 'swish', 'trustly', 'twint', 'voucher'.
	AllowedMethods []string `json:"allowedMethods,omitempty"`
	// With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	ApplicationFee *PaymentLinkResponseApplicationFee `json:"applicationFee,omitempty"`
	SequenceType   *PaymentLinkSequenceTypeResponse   `json:"sequenceType,omitempty"`
	// **Only relevant when `sequenceType` is set to `first`**
	//
	// The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
	// the customer will be required to input relevant information which will be used to establish a mandate after
	// the payment is made.
	CustomerID *string `json:"customerId,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *PaymentLinkResponseLinks `json:"_links,omitempty"`
}

func (p PaymentLinkResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentLinkResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *PaymentLinkResponse) GetResource() *string {
	if p == nil {
		return nil
	}
	return p.Resource
}

func (p *PaymentLinkResponse) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PaymentLinkResponse) GetMode() *Mode {
	if p == nil {
		return nil
	}
	return p.Mode
}

func (p *PaymentLinkResponse) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *PaymentLinkResponse) GetAmount() *AmountNullable {
	if p == nil {
		return nil
	}
	return p.Amount
}

func (p *PaymentLinkResponse) GetMinimumAmount() *AmountNullable {
	if p == nil {
		return nil
	}
	return p.MinimumAmount
}

func (p *PaymentLinkResponse) GetArchived() *bool {
	if p == nil {
		return nil
	}
	return p.Archived
}

func (p *PaymentLinkResponse) GetRedirectURL() *string {
	if p == nil {
		return nil
	}
	return p.RedirectURL
}

func (p *PaymentLinkResponse) GetWebhookURL() *string {
	if p == nil {
		return nil
	}
	return p.WebhookURL
}

func (p *PaymentLinkResponse) GetLines() []PaymentLineItemResponse {
	if p == nil {
		return nil
	}
	return p.Lines
}

func (p *PaymentLinkResponse) GetBillingAddress() *PaymentAddress {
	if p == nil {
		return nil
	}
	return p.BillingAddress
}

func (p *PaymentLinkResponse) GetShippingAddress() *PaymentAddress {
	if p == nil {
		return nil
	}
	return p.ShippingAddress
}

func (p *PaymentLinkResponse) GetProfileID() *string {
	if p == nil {
		return nil
	}
	return p.ProfileID
}

func (p *PaymentLinkResponse) GetReusable() *bool {
	if p == nil {
		return nil
	}
	return p.Reusable
}

func (p *PaymentLinkResponse) GetCreatedAt() *string {
	if p == nil {
		return nil
	}
	return p.CreatedAt
}

func (p *PaymentLinkResponse) GetPaidAt() *string {
	if p == nil {
		return nil
	}
	return p.PaidAt
}

func (p *PaymentLinkResponse) GetExpiresAt() *string {
	if p == nil {
		return nil
	}
	return p.ExpiresAt
}

func (p *PaymentLinkResponse) GetAllowedMethods() []string {
	if p == nil {
		return nil
	}
	return p.AllowedMethods
}

func (p *PaymentLinkResponse) GetApplicationFee() *PaymentLinkResponseApplicationFee {
	if p == nil {
		return nil
	}
	return p.ApplicationFee
}

func (p *PaymentLinkResponse) GetSequenceType() *PaymentLinkSequenceTypeResponse {
	if p == nil {
		return nil
	}
	return p.SequenceType
}

func (p *PaymentLinkResponse) GetCustomerID() *string {
	if p == nil {
		return nil
	}
	return p.CustomerID
}

func (p *PaymentLinkResponse) GetLinks() *PaymentLinkResponseLinks {
	if p == nil {
		return nil
	}
	return p.Links
}
