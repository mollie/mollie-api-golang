// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type UpdateValuesSalesInvoice struct {
	// Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
	// such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `json:"testmode,omitempty"`
	// The status for the invoice to end up in.
	//
	// A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
	// the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
	// mark it as paid. It can then subsequently be sent as well, same as with `issued`.
	//
	// A status value that cannot be set but can be returned is `canceled`, for invoices which were
	// issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
	//
	// Dependent parameters:
	//   - `paymentDetails` is required if invoice should be set directly to `paid`
	//   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
	//   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
	Status *SalesInvoiceStatus `json:"status,omitempty"`
	// A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
	Memo *string `json:"memo,omitempty"`
	// The payment term to be set on the invoice.
	PaymentTerm    *SalesInvoicePaymentTerm    `json:"paymentTerm,omitempty"`
	PaymentDetails *SalesInvoicePaymentDetails `json:"paymentDetails,omitempty"`
	EmailDetails   *SalesInvoiceEmailDetails   `json:"emailDetails,omitempty"`
	// An identifier tied to the recipient data. This should be a unique value based on data your system contains,
	// so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
	// is not required to send a first invoice to a recipient.
	RecipientIdentifier *string                `json:"recipientIdentifier,omitempty"`
	Recipient           *SalesInvoiceRecipient `json:"recipient,omitempty"`
	// Provide the line items for the invoice. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the invoice.
	Lines    []SalesInvoiceLineItem `json:"lines,omitempty"`
	Discount *SalesInvoiceDiscount  `json:"discount,omitempty"`
	// This indicates whether the invoice is an e-invoice. The default value is `false` and can't be changed
	// after the invoice has been issued.
	//
	// When `emailDetails` is provided, an additional email is sent to the recipient.
	IsEInvoice *bool `json:"isEInvoice,omitempty"`
}

func (u *UpdateValuesSalesInvoice) GetTestmode() *bool {
	if u == nil {
		return nil
	}
	return u.Testmode
}

func (u *UpdateValuesSalesInvoice) GetStatus() *SalesInvoiceStatus {
	if u == nil {
		return nil
	}
	return u.Status
}

func (u *UpdateValuesSalesInvoice) GetMemo() *string {
	if u == nil {
		return nil
	}
	return u.Memo
}

func (u *UpdateValuesSalesInvoice) GetPaymentTerm() *SalesInvoicePaymentTerm {
	if u == nil {
		return nil
	}
	return u.PaymentTerm
}

func (u *UpdateValuesSalesInvoice) GetPaymentDetails() *SalesInvoicePaymentDetails {
	if u == nil {
		return nil
	}
	return u.PaymentDetails
}

func (u *UpdateValuesSalesInvoice) GetEmailDetails() *SalesInvoiceEmailDetails {
	if u == nil {
		return nil
	}
	return u.EmailDetails
}

func (u *UpdateValuesSalesInvoice) GetRecipientIdentifier() *string {
	if u == nil {
		return nil
	}
	return u.RecipientIdentifier
}

func (u *UpdateValuesSalesInvoice) GetRecipient() *SalesInvoiceRecipient {
	if u == nil {
		return nil
	}
	return u.Recipient
}

func (u *UpdateValuesSalesInvoice) GetLines() []SalesInvoiceLineItem {
	if u == nil {
		return nil
	}
	return u.Lines
}

func (u *UpdateValuesSalesInvoice) GetDiscount() *SalesInvoiceDiscount {
	if u == nil {
		return nil
	}
	return u.Discount
}

func (u *UpdateValuesSalesInvoice) GetIsEInvoice() *bool {
	if u == nil {
		return nil
	}
	return u.IsEInvoice
}
