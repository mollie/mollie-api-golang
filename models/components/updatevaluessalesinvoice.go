// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// UpdateValuesSalesInvoiceStatus - The status for the invoice to end up in.
//
// Dependent parameters: `paymentDetails` for `paid`, `emailDetails` for `issued` and `paid`.
type UpdateValuesSalesInvoiceStatus string

const (
	UpdateValuesSalesInvoiceStatusDraft  UpdateValuesSalesInvoiceStatus = "draft"
	UpdateValuesSalesInvoiceStatusIssued UpdateValuesSalesInvoiceStatus = "issued"
	UpdateValuesSalesInvoiceStatusPaid   UpdateValuesSalesInvoiceStatus = "paid"
)

func (e UpdateValuesSalesInvoiceStatus) ToPointer() *UpdateValuesSalesInvoiceStatus {
	return &e
}
func (e *UpdateValuesSalesInvoiceStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "issued":
		fallthrough
	case "paid":
		*e = UpdateValuesSalesInvoiceStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateValuesSalesInvoiceStatus: %v", v)
	}
}

// UpdateValuesSalesInvoicePaymentTerm - The payment term to be set on the invoice.
type UpdateValuesSalesInvoicePaymentTerm string

const (
	UpdateValuesSalesInvoicePaymentTermSevendays               UpdateValuesSalesInvoicePaymentTerm = "7 days"
	UpdateValuesSalesInvoicePaymentTermFourteendays            UpdateValuesSalesInvoicePaymentTerm = "14 days"
	UpdateValuesSalesInvoicePaymentTermThirtydays              UpdateValuesSalesInvoicePaymentTerm = "30 days"
	UpdateValuesSalesInvoicePaymentTermFortyFivedays           UpdateValuesSalesInvoicePaymentTerm = "45 days"
	UpdateValuesSalesInvoicePaymentTermSixtydays               UpdateValuesSalesInvoicePaymentTerm = "60 days"
	UpdateValuesSalesInvoicePaymentTermNinetydays              UpdateValuesSalesInvoicePaymentTerm = "90 days"
	UpdateValuesSalesInvoicePaymentTermOneHundredAndTwentydays UpdateValuesSalesInvoicePaymentTerm = "120 days"
)

func (e UpdateValuesSalesInvoicePaymentTerm) ToPointer() *UpdateValuesSalesInvoicePaymentTerm {
	return &e
}
func (e *UpdateValuesSalesInvoicePaymentTerm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "7 days":
		fallthrough
	case "14 days":
		fallthrough
	case "30 days":
		fallthrough
	case "45 days":
		fallthrough
	case "60 days":
		fallthrough
	case "90 days":
		fallthrough
	case "120 days":
		*e = UpdateValuesSalesInvoicePaymentTerm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateValuesSalesInvoicePaymentTerm: %v", v)
	}
}

type UpdateValuesSalesInvoice struct {
	// Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
	// such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `json:"testmode,omitempty"`
	// The status for the invoice to end up in.
	//
	// Dependent parameters: `paymentDetails` for `paid`, `emailDetails` for `issued` and `paid`.
	Status *UpdateValuesSalesInvoiceStatus `json:"status,omitempty"`
	// A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
	Memo *string `json:"memo,omitempty"`
	// The payment term to be set on the invoice.
	PaymentTerm    *UpdateValuesSalesInvoicePaymentTerm `json:"paymentTerm,omitempty"`
	PaymentDetails *SalesInvoicePaymentDetails          `json:"paymentDetails,omitempty"`
	EmailDetails   *SalesInvoiceEmailDetails            `json:"emailDetails,omitempty"`
	// An identifier tied to the recipient data. This should be a unique value based on data your system contains,
	// so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
	// is not required to send a first invoice to a recipient.
	RecipientIdentifier *string                `json:"recipientIdentifier,omitempty"`
	Recipient           *SalesInvoiceRecipient `json:"recipient,omitempty"`
	// Provide the line items for the invoice. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the invoice.
	Lines    []SalesInvoiceLineItem `json:"lines,omitempty"`
	Discount *SalesInvoiceDiscount  `json:"discount,omitempty"`
}

func (o *UpdateValuesSalesInvoice) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

func (o *UpdateValuesSalesInvoice) GetStatus() *UpdateValuesSalesInvoiceStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateValuesSalesInvoice) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *UpdateValuesSalesInvoice) GetPaymentTerm() *UpdateValuesSalesInvoicePaymentTerm {
	if o == nil {
		return nil
	}
	return o.PaymentTerm
}

func (o *UpdateValuesSalesInvoice) GetPaymentDetails() *SalesInvoicePaymentDetails {
	if o == nil {
		return nil
	}
	return o.PaymentDetails
}

func (o *UpdateValuesSalesInvoice) GetEmailDetails() *SalesInvoiceEmailDetails {
	if o == nil {
		return nil
	}
	return o.EmailDetails
}

func (o *UpdateValuesSalesInvoice) GetRecipientIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.RecipientIdentifier
}

func (o *UpdateValuesSalesInvoice) GetRecipient() *SalesInvoiceRecipient {
	if o == nil {
		return nil
	}
	return o.Recipient
}

func (o *UpdateValuesSalesInvoice) GetLines() []SalesInvoiceLineItem {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *UpdateValuesSalesInvoice) GetDiscount() *SalesInvoiceDiscount {
	if o == nil {
		return nil
	}
	return o.Discount
}
