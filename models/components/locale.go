// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Locale - Allows you to preset the language to be used.
type Locale string

const (
	LocaleEnUs Locale = "en_US"
	LocaleEnGb Locale = "en_GB"
	LocaleNlNl Locale = "nl_NL"
	LocaleNlBe Locale = "nl_BE"
	LocaleDeDe Locale = "de_DE"
	LocaleDeAt Locale = "de_AT"
	LocaleDeCh Locale = "de_CH"
	LocaleFrFr Locale = "fr_FR"
	LocaleFrBe Locale = "fr_BE"
	LocaleEsEs Locale = "es_ES"
	LocaleCaEs Locale = "ca_ES"
	LocalePtPt Locale = "pt_PT"
	LocaleItIt Locale = "it_IT"
	LocaleNbNo Locale = "nb_NO"
	LocaleSvSe Locale = "sv_SE"
	LocaleFiFi Locale = "fi_FI"
	LocaleDaDk Locale = "da_DK"
	LocaleIsIs Locale = "is_IS"
	LocaleHuHu Locale = "hu_HU"
	LocalePlPl Locale = "pl_PL"
	LocaleLvLv Locale = "lv_LV"
	LocaleLtLt Locale = "lt_LT"
	LocaleNull Locale = "null"
)

func (e Locale) ToPointer() *Locale {
	return &e
}
func (e *Locale) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		fallthrough
	case "es_ES":
		fallthrough
	case "ca_ES":
		fallthrough
	case "pt_PT":
		fallthrough
	case "it_IT":
		fallthrough
	case "nb_NO":
		fallthrough
	case "sv_SE":
		fallthrough
	case "fi_FI":
		fallthrough
	case "da_DK":
		fallthrough
	case "is_IS":
		fallthrough
	case "hu_HU":
		fallthrough
	case "pl_PL":
		fallthrough
	case "lv_LV":
		fallthrough
	case "lt_LT":
		fallthrough
	case "null":
		*e = Locale(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Locale: %v", v)
	}
}
