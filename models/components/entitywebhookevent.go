// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
)

type EntityType string

const (
	EntityTypePaymentLinkResponse   EntityType = "payment-link-response"
	EntityTypeEntityProfileResponse EntityType = "entity-profile-response"
)

type Entity struct {
	PaymentLinkResponse   *PaymentLinkResponse   `queryParam:"inline" name:"entity"`
	EntityProfileResponse *EntityProfileResponse `queryParam:"inline" name:"entity"`

	Type EntityType
}

func CreateEntityPaymentLinkResponse(paymentLinkResponse PaymentLinkResponse) Entity {
	typ := EntityTypePaymentLinkResponse

	return Entity{
		PaymentLinkResponse: &paymentLinkResponse,
		Type:                typ,
	}
}

func CreateEntityEntityProfileResponse(entityProfileResponse EntityProfileResponse) Entity {
	typ := EntityTypeEntityProfileResponse

	return Entity{
		EntityProfileResponse: &entityProfileResponse,
		Type:                  typ,
	}
}

func (u *Entity) UnmarshalJSON(data []byte) error {

	var paymentLinkResponse PaymentLinkResponse = PaymentLinkResponse{}
	if err := utils.UnmarshalJSON(data, &paymentLinkResponse, "", true, nil); err == nil {
		u.PaymentLinkResponse = &paymentLinkResponse
		u.Type = EntityTypePaymentLinkResponse
		return nil
	}

	var entityProfileResponse EntityProfileResponse = EntityProfileResponse{}
	if err := utils.UnmarshalJSON(data, &entityProfileResponse, "", true, nil); err == nil {
		u.EntityProfileResponse = &entityProfileResponse
		u.Type = EntityTypeEntityProfileResponse
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Entity", string(data))
}

func (u Entity) MarshalJSON() ([]byte, error) {
	if u.PaymentLinkResponse != nil {
		return utils.MarshalJSON(u.PaymentLinkResponse, "", true)
	}

	if u.EntityProfileResponse != nil {
		return utils.MarshalJSON(u.EntityProfileResponse, "", true)
	}

	return nil, errors.New("could not marshal union type Entity: all fields are null")
}

// Embedded - Full payload of the event.
type Embedded struct {
	Entity *Entity `json:"entity,omitempty"`
}

func (o *Embedded) GetEntity() *Entity {
	if o == nil {
		return nil
	}
	return o.Entity
}

// EntityWebhookEventLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type EntityWebhookEventLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self URLObj `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation URLObj `json:"documentation"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Entity *URLObj `json:"entity,omitempty"`
}

func (o *EntityWebhookEventLinks) GetSelf() URLObj {
	if o == nil {
		return URLObj{}
	}
	return o.Self
}

func (o *EntityWebhookEventLinks) GetDocumentation() URLObj {
	if o == nil {
		return URLObj{}
	}
	return o.Documentation
}

func (o *EntityWebhookEventLinks) GetEntity() *URLObj {
	if o == nil {
		return nil
	}
	return o.Entity
}

type EntityWebhookEvent struct {
	// Indicates the response contains a webhook event object. Will always contain the string `event` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this event.
	ID string `json:"id"`
	// The event's type
	WebhookEventTypes WebhookEventTypes `json:"type"`
	// The entity token that triggered the event
	EntityID string `json:"entityId"`
	// The event's date time of creation.
	CreatedAt string `json:"createdAt"`
	// Full payload of the event.
	Embedded *Embedded `json:"_embedded,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links EntityWebhookEventLinks `json:"_links"`
}

func (o *EntityWebhookEvent) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *EntityWebhookEvent) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EntityWebhookEvent) GetWebhookEventTypes() WebhookEventTypes {
	if o == nil {
		return WebhookEventTypes("")
	}
	return o.WebhookEventTypes
}

func (o *EntityWebhookEvent) GetEntityID() string {
	if o == nil {
		return ""
	}
	return o.EntityID
}

func (o *EntityWebhookEvent) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *EntityWebhookEvent) GetEmbedded() *Embedded {
	if o == nil {
		return nil
	}
	return o.Embedded
}

func (o *EntityWebhookEvent) GetLinks() EntityWebhookEventLinks {
	if o == nil {
		return EntityWebhookEventLinks{}
	}
	return o.Links
}
