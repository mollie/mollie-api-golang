// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type MandateResponseDetails struct {
	// The customer's name. Available for SEPA Direct Debit and PayPal mandates.
	ConsumerName *string `json:"consumerName,omitempty"`
	// The customer's IBAN or email address. Available for SEPA Direct Debit and PayPal mandates.
	ConsumerAccount *string `json:"consumerAccount,omitempty"`
	// The BIC of the customer's bank. Available for SEPA Direct Debit mandates.
	ConsumerBic *string `json:"consumerBic,omitempty"`
	// The card holder's name. Available for card mandates.
	CardHolder *string `json:"cardHolder,omitempty"`
	// The last four digits of the card number. Available for card mandates.
	CardNumber *string `json:"cardNumber,omitempty"`
	// The card's expiry date in `YYYY-MM-DD` format. Available for card mandates.
	CardExpiryDate *string `json:"cardExpiryDate,omitempty"`
	// The card's label. Available for card mandates, if the card label could be detected.
	CardLabel *MandateDetailsCardLabelResponse `json:"cardLabel,omitempty"`
	// Unique alphanumeric representation of this specific card. Available for card mandates. Can be used to identify
	// returning customers.
	CardFingerprint *string `json:"cardFingerprint,omitempty"`
}

func (m *MandateResponseDetails) GetConsumerName() *string {
	if m == nil {
		return nil
	}
	return m.ConsumerName
}

func (m *MandateResponseDetails) GetConsumerAccount() *string {
	if m == nil {
		return nil
	}
	return m.ConsumerAccount
}

func (m *MandateResponseDetails) GetConsumerBic() *string {
	if m == nil {
		return nil
	}
	return m.ConsumerBic
}

func (m *MandateResponseDetails) GetCardHolder() *string {
	if m == nil {
		return nil
	}
	return m.CardHolder
}

func (m *MandateResponseDetails) GetCardNumber() *string {
	if m == nil {
		return nil
	}
	return m.CardNumber
}

func (m *MandateResponseDetails) GetCardExpiryDate() *string {
	if m == nil {
		return nil
	}
	return m.CardExpiryDate
}

func (m *MandateResponseDetails) GetCardLabel() *MandateDetailsCardLabelResponse {
	if m == nil {
		return nil
	}
	return m.CardLabel
}

func (m *MandateResponseDetails) GetCardFingerprint() *string {
	if m == nil {
		return nil
	}
	return m.CardFingerprint
}

// MandateResponseLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type MandateResponseLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self URLObj `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Customer URLObj `json:"customer"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation URLObj `json:"documentation"`
}

func (m *MandateResponseLinks) GetSelf() URLObj {
	if m == nil {
		return URLObj{}
	}
	return m.Self
}

func (m *MandateResponseLinks) GetCustomer() URLObj {
	if m == nil {
		return URLObj{}
	}
	return m.Customer
}

func (m *MandateResponseLinks) GetDocumentation() URLObj {
	if m == nil {
		return URLObj{}
	}
	return m.Documentation
}

type MandateResponse struct {
	// Indicates the response contains a mandate object. Will always contain the string `mandate` for this endpoint.
	Resource *string `json:"resource,omitempty"`
	ID       *string `json:"id,omitempty"`
	// Whether this entity was created in live mode or in test mode.
	Mode *Mode `json:"mode,omitempty"`
	// Payment method of the mandate.
	//
	// SEPA Direct Debit and PayPal mandates can be created directly.
	Method  *MandateMethodResponse  `json:"method,omitempty"`
	Details *MandateResponseDetails `json:"details,omitempty"`
	// The date when the mandate was signed in `YYYY-MM-DD` format.
	SignatureDate *string `json:"signatureDate,omitempty"`
	// A custom mandate reference. For SEPA Direct Debit, it is vital to provide a unique reference. Some banks will
	// decline Direct Debit payments if the mandate reference is not unique.
	MandateReference *string `json:"mandateReference,omitempty"`
	// The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
	// when we did not received the IBAN yet from the first payment.
	Status     *MandateStatus `json:"status,omitempty"`
	CustomerID *string        `json:"customerId,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *MandateResponseLinks `json:"_links,omitempty"`
}

func (m *MandateResponse) GetResource() *string {
	if m == nil {
		return nil
	}
	return m.Resource
}

func (m *MandateResponse) GetID() *string {
	if m == nil {
		return nil
	}
	return m.ID
}

func (m *MandateResponse) GetMode() *Mode {
	if m == nil {
		return nil
	}
	return m.Mode
}

func (m *MandateResponse) GetMethod() *MandateMethodResponse {
	if m == nil {
		return nil
	}
	return m.Method
}

func (m *MandateResponse) GetDetails() *MandateResponseDetails {
	if m == nil {
		return nil
	}
	return m.Details
}

func (m *MandateResponse) GetSignatureDate() *string {
	if m == nil {
		return nil
	}
	return m.SignatureDate
}

func (m *MandateResponse) GetMandateReference() *string {
	if m == nil {
		return nil
	}
	return m.MandateReference
}

func (m *MandateResponse) GetStatus() *MandateStatus {
	if m == nil {
		return nil
	}
	return m.Status
}

func (m *MandateResponse) GetCustomerID() *string {
	if m == nil {
		return nil
	}
	return m.CustomerID
}

func (m *MandateResponse) GetCreatedAt() *string {
	if m == nil {
		return nil
	}
	return m.CreatedAt
}

func (m *MandateResponse) GetLinks() *MandateResponseLinks {
	if m == nil {
		return nil
	}
	return m.Links
}
