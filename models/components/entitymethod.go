// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// EntityMethodImage - URLs of images representing the payment method.
type EntityMethodImage struct {
	// The URL pointing to an icon of 32 by 24 pixels.
	Size1x string `json:"size1x"`
	// The URL pointing to an icon of 64 by 48 pixels.
	Size2x string `json:"size2x"`
	// The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can
	// scale to any desired size without compromising visual quality.
	Svg string `json:"svg"`
}

func (e *EntityMethodImage) GetSize1x() string {
	if e == nil {
		return ""
	}
	return e.Size1x
}

func (e *EntityMethodImage) GetSize2x() string {
	if e == nil {
		return ""
	}
	return e.Size2x
}

func (e *EntityMethodImage) GetSvg() string {
	if e == nil {
		return ""
	}
	return e.Svg
}

// EntityMethodIssuerImage - URLs of images representing the issuer.
// required:
//   - size1x
//   - size2x
//   - svg
type EntityMethodIssuerImage struct {
	// The URL pointing to an icon of 32 by 24 pixels.
	Size1x *string `json:"size1x,omitempty"`
	// The URL pointing to an icon of 64 by 48 pixels.
	Size2x *string `json:"size2x,omitempty"`
	// The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can
	// scale to any desired size without compromising visual quality.
	Svg *string `json:"svg,omitempty"`
}

func (e *EntityMethodIssuerImage) GetSize1x() *string {
	if e == nil {
		return nil
	}
	return e.Size1x
}

func (e *EntityMethodIssuerImage) GetSize2x() *string {
	if e == nil {
		return nil
	}
	return e.Size2x
}

func (e *EntityMethodIssuerImage) GetSvg() *string {
	if e == nil {
		return nil
	}
	return e.Svg
}

type EntityMethodIssuer struct {
	Resource string `json:"resource"`
	ID       string `json:"id"`
	// The full name of the issuer.
	Name string `json:"name"`
	// URLs of images representing the issuer.
	// required:
	//   - size1x
	//   - size2x
	//   - svg
	Image EntityMethodIssuerImage `json:"image"`
}

func (e *EntityMethodIssuer) GetResource() string {
	if e == nil {
		return ""
	}
	return e.Resource
}

func (e *EntityMethodIssuer) GetID() string {
	if e == nil {
		return ""
	}
	return e.ID
}

func (e *EntityMethodIssuer) GetName() string {
	if e == nil {
		return ""
	}
	return e.Name
}

func (e *EntityMethodIssuer) GetImage() EntityMethodIssuerImage {
	if e == nil {
		return EntityMethodIssuerImage{}
	}
	return e.Image
}

// EntityMethodLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type EntityMethodLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self URLObj `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *URLObj `json:"documentation,omitempty"`
}

func (e *EntityMethodLinks) GetSelf() URLObj {
	if e == nil {
		return URLObj{}
	}
	return e.Self
}

func (e *EntityMethodLinks) GetDocumentation() *URLObj {
	if e == nil {
		return nil
	}
	return e.Documentation
}

type EntityMethod struct {
	// Indicates the response contains a payment method object. Will always contain the string `method` for this
	// endpoint.
	Resource string `json:"resource"`
	// Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment
	// method and your customer will skip the selection screen and is sent directly to the chosen payment method. The
	// parameter enables you to fully integrate the payment method selection into your website.
	//
	// You can also specify the methods in an array. By doing so we will still show the payment method selection screen
	// but will only show the methods specified in the array. For example, you can use this functionality to only show
	// payment methods from a specific country to your customer `['bancontact', 'belfius']`.
	ID *MethodResponse `json:"id"`
	// The full name of the payment method.
	//
	// If a `locale` parameter is provided, the name is translated to the given locale if possible.
	Description string `json:"description"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	MinimumAmount Amount `json:"minimumAmount"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	MaximumAmount *AmountNullable `json:"maximumAmount"`
	// URLs of images representing the payment method.
	Image EntityMethodImage `json:"image"`
	// The payment method's activation status for this profile.
	Status MethodStatus `json:"status"`
	// **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant
	// for iDEAL, KBC/CBC, gift cards, and vouchers.
	Issuers []EntityMethodIssuer `json:"issuers,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links EntityMethodLinks `json:"_links"`
}

func (e *EntityMethod) GetResource() string {
	if e == nil {
		return ""
	}
	return e.Resource
}

func (e *EntityMethod) GetID() *MethodResponse {
	if e == nil {
		return nil
	}
	return e.ID
}

func (e *EntityMethod) GetDescription() string {
	if e == nil {
		return ""
	}
	return e.Description
}

func (e *EntityMethod) GetMinimumAmount() Amount {
	if e == nil {
		return Amount{}
	}
	return e.MinimumAmount
}

func (e *EntityMethod) GetMaximumAmount() *AmountNullable {
	if e == nil {
		return nil
	}
	return e.MaximumAmount
}

func (e *EntityMethod) GetImage() EntityMethodImage {
	if e == nil {
		return EntityMethodImage{}
	}
	return e.Image
}

func (e *EntityMethod) GetStatus() MethodStatus {
	if e == nil {
		return MethodStatus("")
	}
	return e.Status
}

func (e *EntityMethod) GetIssuers() []EntityMethodIssuer {
	if e == nil {
		return nil
	}
	return e.Issuers
}

func (e *EntityMethod) GetLinks() EntityMethodLinks {
	if e == nil {
		return EntityMethodLinks{}
	}
	return e.Links
}
