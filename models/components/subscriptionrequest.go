// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// SubscriptionRequestMethod - The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
type SubscriptionRequestMethod string

const (
	SubscriptionRequestMethodCreditcard  SubscriptionRequestMethod = "creditcard"
	SubscriptionRequestMethodDirectdebit SubscriptionRequestMethod = "directdebit"
	SubscriptionRequestMethodPaypal      SubscriptionRequestMethod = "paypal"
)

func (e SubscriptionRequestMethod) ToPointer() *SubscriptionRequestMethod {
	return &e
}
func (e *SubscriptionRequestMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "paypal":
		*e = SubscriptionRequestMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SubscriptionRequestMethod: %v", v)
	}
}

// SubscriptionRequestApplicationFee - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
//
// Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
// information.
type SubscriptionRequestApplicationFee struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount      Amount `json:"amount"`
	Description string `json:"description"`
}

func (o *SubscriptionRequestApplicationFee) GetAmount() Amount {
	if o == nil {
		return Amount{}
	}
	return o.Amount
}

func (o *SubscriptionRequestApplicationFee) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

type SubscriptionRequest struct {
	ID *string `json:"id,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount *Amount `json:"amount,omitempty"`
	// Total number of payments for the subscription. Once this number of payments is reached, the subscription is
	// considered completed.
	//
	// Test mode subscriptions will get canceled automatically after 10 payments.
	Times *int64 `json:"times,omitempty"`
	// Interval to wait between payments, for example `1 month` or `14 days`.
	//
	// The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval *string `json:"interval,omitempty"`
	// The start date of the subscription in `YYYY-MM-DD` format.
	StartDate *string `json:"startDate,omitempty"`
	// The subscription's description will be used as the description of the resulting individual payments and so showing
	// up on the bank statement of the consumer.
	//
	// **Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
	Description *string `json:"description,omitempty"`
	// The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
	Method *SubscriptionRequestMethod `json:"method,omitempty"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
	//
	// Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
	// information.
	ApplicationFee *SubscriptionRequestApplicationFee `json:"applicationFee,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *Metadata `json:"metadata,omitempty"`
	// We will call this URL for any payment status changes of payments resulting from this subscription.
	//
	// This webhook will receive **all** events for the subscription's payments. This may include payment failures as
	// well. Be sure to verify the payment's subscription ID and its status.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	CustomerID *string `json:"customerId,omitempty"`
	MandateID  *string `json:"mandateId,omitempty"`
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
}

func (o *SubscriptionRequest) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SubscriptionRequest) GetAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *SubscriptionRequest) GetTimes() *int64 {
	if o == nil {
		return nil
	}
	return o.Times
}

func (o *SubscriptionRequest) GetInterval() *string {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *SubscriptionRequest) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *SubscriptionRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *SubscriptionRequest) GetMethod() *SubscriptionRequestMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *SubscriptionRequest) GetApplicationFee() *SubscriptionRequestApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *SubscriptionRequest) GetMetadata() *Metadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *SubscriptionRequest) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *SubscriptionRequest) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *SubscriptionRequest) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *SubscriptionRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}
