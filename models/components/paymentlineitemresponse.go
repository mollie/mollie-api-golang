// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
)

// PaymentLineItemResponseType - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type PaymentLineItemResponseType string

const (
	PaymentLineItemResponseTypePhysical    PaymentLineItemResponseType = "physical"
	PaymentLineItemResponseTypeDigital     PaymentLineItemResponseType = "digital"
	PaymentLineItemResponseTypeShippingFee PaymentLineItemResponseType = "shipping_fee"
	PaymentLineItemResponseTypeDiscount    PaymentLineItemResponseType = "discount"
	PaymentLineItemResponseTypeStoreCredit PaymentLineItemResponseType = "store_credit"
	PaymentLineItemResponseTypeGiftCard    PaymentLineItemResponseType = "gift_card"
	PaymentLineItemResponseTypeSurcharge   PaymentLineItemResponseType = "surcharge"
	PaymentLineItemResponseTypeTip         PaymentLineItemResponseType = "tip"
)

func (e PaymentLineItemResponseType) ToPointer() *PaymentLineItemResponseType {
	return &e
}
func (e *PaymentLineItemResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "physical":
		fallthrough
	case "digital":
		fallthrough
	case "shipping_fee":
		fallthrough
	case "discount":
		fallthrough
	case "store_credit":
		fallthrough
	case "gift_card":
		fallthrough
	case "surcharge":
		fallthrough
	case "tip":
		*e = PaymentLineItemResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentLineItemResponseType: %v", v)
	}
}

type PaymentLineItemResponseCategory string

const (
	PaymentLineItemResponseCategoryMeal         PaymentLineItemResponseCategory = "meal"
	PaymentLineItemResponseCategoryEco          PaymentLineItemResponseCategory = "eco"
	PaymentLineItemResponseCategoryGift         PaymentLineItemResponseCategory = "gift"
	PaymentLineItemResponseCategorySportCulture PaymentLineItemResponseCategory = "sport_culture"
)

func (e PaymentLineItemResponseCategory) ToPointer() *PaymentLineItemResponseCategory {
	return &e
}
func (e *PaymentLineItemResponseCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "meal":
		fallthrough
	case "eco":
		fallthrough
	case "gift":
		fallthrough
	case "sport_culture":
		*e = PaymentLineItemResponseCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentLineItemResponseCategory: %v", v)
	}
}

type PaymentLineItemResponse struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *PaymentLineItemResponseType `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	UnitPrice Amount `json:"unitPrice"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	DiscountAmount *Amount `json:"discountAmount,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	TotalAmount Amount `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	VatAmount *Amount `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []PaymentLineItemResponseCategory `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string `json:"productUrl,omitempty"`
}

func (p PaymentLineItemResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentLineItemResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"description", "quantity", "unitPrice", "totalAmount"}); err != nil {
		return err
	}
	return nil
}

func (o *PaymentLineItemResponse) GetType() *PaymentLineItemResponseType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *PaymentLineItemResponse) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *PaymentLineItemResponse) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *PaymentLineItemResponse) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *PaymentLineItemResponse) GetUnitPrice() Amount {
	if o == nil {
		return Amount{}
	}
	return o.UnitPrice
}

func (o *PaymentLineItemResponse) GetDiscountAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *PaymentLineItemResponse) GetTotalAmount() Amount {
	if o == nil {
		return Amount{}
	}
	return o.TotalAmount
}

func (o *PaymentLineItemResponse) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *PaymentLineItemResponse) GetVatAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *PaymentLineItemResponse) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *PaymentLineItemResponse) GetCategories() []PaymentLineItemResponseCategory {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *PaymentLineItemResponse) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *PaymentLineItemResponse) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}
