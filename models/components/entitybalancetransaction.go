// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// EntityBalanceTransactionType - The type of transaction, for example `payment` or `refund`. Values include the below examples, although this list
// is not definitive.
//
// * Regular payment processing: `payment` `capture` `unauthorized-direct-debit` `failed-payment`
// * Refunds and chargebacks: `refund` `returned-refund` `chargeback` `chargeback-reversal`
// * Settlements: `outgoing-transfer` `canceled-outgoing-transfer` `returned-transfer`
// * Invoicing: `invoice-compensation` `balance-correction`
// * Mollie Connect: `application-fee` `split-payment` `platform-payment-refund` `platform-payment-chargeback`
type EntityBalanceTransactionType string

const (
	EntityBalanceTransactionTypeApplicationFee                    EntityBalanceTransactionType = "application-fee"
	EntityBalanceTransactionTypeCapture                           EntityBalanceTransactionType = "capture"
	EntityBalanceTransactionTypeChargeback                        EntityBalanceTransactionType = "chargeback"
	EntityBalanceTransactionTypeChargebackReversal                EntityBalanceTransactionType = "chargeback-reversal"
	EntityBalanceTransactionTypeFailedPaymentFee                  EntityBalanceTransactionType = "failed-payment-fee"
	EntityBalanceTransactionTypeFailedPayment                     EntityBalanceTransactionType = "failed-payment"
	EntityBalanceTransactionTypeInvoiceCompensation               EntityBalanceTransactionType = "invoice-compensation"
	EntityBalanceTransactionTypePayment                           EntityBalanceTransactionType = "payment"
	EntityBalanceTransactionTypePaymentFee                        EntityBalanceTransactionType = "payment-fee"
	EntityBalanceTransactionTypePaymentCommission                 EntityBalanceTransactionType = "payment-commission"
	EntityBalanceTransactionTypeRefund                            EntityBalanceTransactionType = "refund"
	EntityBalanceTransactionTypeReturnedRefund                    EntityBalanceTransactionType = "returned-refund"
	EntityBalanceTransactionTypeReturnedTransfer                  EntityBalanceTransactionType = "returned-transfer"
	EntityBalanceTransactionTypeSplitPayment                      EntityBalanceTransactionType = "split-payment"
	EntityBalanceTransactionTypeOutgoingTransfer                  EntityBalanceTransactionType = "outgoing-transfer"
	EntityBalanceTransactionTypeCaptureCommission                 EntityBalanceTransactionType = "capture-commission"
	EntityBalanceTransactionTypeCanceledOutgoingTransfer          EntityBalanceTransactionType = "canceled-outgoing-transfer"
	EntityBalanceTransactionTypeIncomingTransfer                  EntityBalanceTransactionType = "incoming-transfer"
	EntityBalanceTransactionTypeAPIPaymentRollingReserveRelease   EntityBalanceTransactionType = "api-payment-rolling-reserve-release"
	EntityBalanceTransactionTypeCaptureRollingReserveRelease      EntityBalanceTransactionType = "capture-rolling-reserve-release"
	EntityBalanceTransactionTypeReimbursementFee                  EntityBalanceTransactionType = "reimbursement-fee"
	EntityBalanceTransactionTypeBalanceCorrection                 EntityBalanceTransactionType = "balance-correction"
	EntityBalanceTransactionTypeUnauthorizedDirectDebit           EntityBalanceTransactionType = "unauthorized-direct-debit"
	EntityBalanceTransactionTypeBankChargedFailureFee             EntityBalanceTransactionType = "bank-charged-failure-fee"
	EntityBalanceTransactionTypePlatformPaymentRefund             EntityBalanceTransactionType = "platform-payment-refund"
	EntityBalanceTransactionTypeRefundCompensation                EntityBalanceTransactionType = "refund-compensation"
	EntityBalanceTransactionTypeReturnedRefundCompensation        EntityBalanceTransactionType = "returned-refund-compensation"
	EntityBalanceTransactionTypeReturnedPlatformPaymentRefund     EntityBalanceTransactionType = "returned-platform-payment-refund"
	EntityBalanceTransactionTypePlatformPaymentChargeback         EntityBalanceTransactionType = "platform-payment-chargeback"
	EntityBalanceTransactionTypeChargebackCompensation            EntityBalanceTransactionType = "chargeback-compensation"
	EntityBalanceTransactionTypeReversedPlatformPaymentChargeback EntityBalanceTransactionType = "reversed-platform-payment-chargeback"
	EntityBalanceTransactionTypeReversedChargebackCompensation    EntityBalanceTransactionType = "reversed-chargeback-compensation"
	EntityBalanceTransactionTypeFailedSplitPaymentPlatform        EntityBalanceTransactionType = "failed-split-payment-platform"
	EntityBalanceTransactionTypeFailedSplitPaymentCompensation    EntityBalanceTransactionType = "failed-split-payment-compensation"
	EntityBalanceTransactionTypeCashAdvanceLoan                   EntityBalanceTransactionType = "cash-advance-loan"
	EntityBalanceTransactionTypePlatformConnectedOrganizationsFee EntityBalanceTransactionType = "platform-connected-organizations-fee"
	EntityBalanceTransactionTypeSplitTransaction                  EntityBalanceTransactionType = "split-transaction"
	EntityBalanceTransactionTypeManagedFee                        EntityBalanceTransactionType = "managed-fee"
	EntityBalanceTransactionTypeReturnedManagedFee                EntityBalanceTransactionType = "returned-managed-fee"
	EntityBalanceTransactionTypeTopup                             EntityBalanceTransactionType = "topup"
	EntityBalanceTransactionTypeBalanceReserve                    EntityBalanceTransactionType = "balance-reserve"
	EntityBalanceTransactionTypeBalanceReserveReturn              EntityBalanceTransactionType = "balance-reserve-return"
	EntityBalanceTransactionTypeMovement                          EntityBalanceTransactionType = "movement"
	EntityBalanceTransactionTypePostPaymentSplitPayment           EntityBalanceTransactionType = "post-payment-split-payment"
	EntityBalanceTransactionTypeCashCollateralIssuance            EntityBalanceTransactionType = "cash-collateral-issuance"
	EntityBalanceTransactionTypeCashCollateralRelease             EntityBalanceTransactionType = "cash-collateral-release"
)

func (e EntityBalanceTransactionType) ToPointer() *EntityBalanceTransactionType {
	return &e
}
func (e *EntityBalanceTransactionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "application-fee":
		fallthrough
	case "capture":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "failed-payment-fee":
		fallthrough
	case "failed-payment":
		fallthrough
	case "invoice-compensation":
		fallthrough
	case "payment":
		fallthrough
	case "payment-fee":
		fallthrough
	case "payment-commission":
		fallthrough
	case "refund":
		fallthrough
	case "returned-refund":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "split-payment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "capture-commission":
		fallthrough
	case "canceled-outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "api-payment-rolling-reserve-release":
		fallthrough
	case "capture-rolling-reserve-release":
		fallthrough
	case "reimbursement-fee":
		fallthrough
	case "balance-correction":
		fallthrough
	case "unauthorized-direct-debit":
		fallthrough
	case "bank-charged-failure-fee":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "failed-split-payment-platform":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "cash-advance-loan":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "split-transaction":
		fallthrough
	case "managed-fee":
		fallthrough
	case "returned-managed-fee":
		fallthrough
	case "topup":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "movement":
		fallthrough
	case "post-payment-split-payment":
		fallthrough
	case "cash-collateral-issuance":
		fallthrough
	case "cash-collateral-release":
		*e = EntityBalanceTransactionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityBalanceTransactionType: %v", v)
	}
}

type Payment struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (o *Payment) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *Payment) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

type Capture struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	CaptureID          *string `json:"captureId,omitempty"`
	CaptureDescription *string `json:"captureDescription,omitempty"`
}

func (o *Capture) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *Capture) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *Capture) GetCaptureID() *string {
	if o == nil {
		return nil
	}
	return o.CaptureID
}

func (o *Capture) GetCaptureDescription() *string {
	if o == nil {
		return nil
	}
	return o.CaptureDescription
}

type CaptureCommision struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	CaptureID          *string `json:"captureId,omitempty"`
	CaptureDescription *string `json:"captureDescription,omitempty"`
}

func (o *CaptureCommision) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *CaptureCommision) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *CaptureCommision) GetCaptureID() *string {
	if o == nil {
		return nil
	}
	return o.CaptureID
}

func (o *CaptureCommision) GetCaptureDescription() *string {
	if o == nil {
		return nil
	}
	return o.CaptureDescription
}

type CaptureRollingReserveRelease struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	CaptureID          *string `json:"captureId,omitempty"`
	CaptureDescription *string `json:"captureDescription,omitempty"`
}

func (o *CaptureRollingReserveRelease) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *CaptureRollingReserveRelease) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *CaptureRollingReserveRelease) GetCaptureID() *string {
	if o == nil {
		return nil
	}
	return o.CaptureID
}

func (o *CaptureRollingReserveRelease) GetCaptureDescription() *string {
	if o == nil {
		return nil
	}
	return o.CaptureDescription
}

type UnauthorizedDirectDebit struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (o *UnauthorizedDirectDebit) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *UnauthorizedDirectDebit) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

type FailedPayment struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (o *FailedPayment) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *FailedPayment) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

type Refund struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (o *Refund) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *Refund) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *Refund) GetRefundID() *string {
	if o == nil {
		return nil
	}
	return o.RefundID
}

func (o *Refund) GetRefundDescription() *string {
	if o == nil {
		return nil
	}
	return o.RefundDescription
}

type RefundCompensation struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (o *RefundCompensation) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *RefundCompensation) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *RefundCompensation) GetRefundID() *string {
	if o == nil {
		return nil
	}
	return o.RefundID
}

func (o *RefundCompensation) GetRefundDescription() *string {
	if o == nil {
		return nil
	}
	return o.RefundDescription
}

type ReturnedRefund struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (o *ReturnedRefund) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ReturnedRefund) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ReturnedRefund) GetRefundID() *string {
	if o == nil {
		return nil
	}
	return o.RefundID
}

func (o *ReturnedRefund) GetRefundDescription() *string {
	if o == nil {
		return nil
	}
	return o.RefundDescription
}

type ReturnedRefundCompensation struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (o *ReturnedRefundCompensation) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ReturnedRefundCompensation) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ReturnedRefundCompensation) GetRefundID() *string {
	if o == nil {
		return nil
	}
	return o.RefundID
}

func (o *ReturnedRefundCompensation) GetRefundDescription() *string {
	if o == nil {
		return nil
	}
	return o.RefundDescription
}

type Chargeback struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (o *Chargeback) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *Chargeback) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *Chargeback) GetChargebackID() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackID
}

func (o *Chargeback) GetChargebackDescription() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackDescription
}

type ChargebackReversal struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (o *ChargebackReversal) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ChargebackReversal) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ChargebackReversal) GetChargebackID() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackID
}

func (o *ChargebackReversal) GetChargebackDescription() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackDescription
}

type ChargebackCompensation struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (o *ChargebackCompensation) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ChargebackCompensation) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ChargebackCompensation) GetChargebackID() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackID
}

func (o *ChargebackCompensation) GetChargebackDescription() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackDescription
}

type ReversedChargebackCompensation struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (o *ReversedChargebackCompensation) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ReversedChargebackCompensation) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ReversedChargebackCompensation) GetChargebackID() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackID
}

func (o *ReversedChargebackCompensation) GetChargebackDescription() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackDescription
}

type OutgoingTransfer struct {
	TransferID   *string `json:"transferId,omitempty"`
	SettlementID *string `json:"settlementId,omitempty"`
}

func (o *OutgoingTransfer) GetTransferID() *string {
	if o == nil {
		return nil
	}
	return o.TransferID
}

func (o *OutgoingTransfer) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

type CanceledOutgoingTransfer struct {
	TransferID   *string `json:"transferId,omitempty"`
	SettlementID *string `json:"settlementId,omitempty"`
}

func (o *CanceledOutgoingTransfer) GetTransferID() *string {
	if o == nil {
		return nil
	}
	return o.TransferID
}

func (o *CanceledOutgoingTransfer) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

type ReturnedTransfer struct {
	TransferID   *string `json:"transferId,omitempty"`
	SettlementID *string `json:"settlementId,omitempty"`
}

func (o *ReturnedTransfer) GetTransferID() *string {
	if o == nil {
		return nil
	}
	return o.TransferID
}

func (o *ReturnedTransfer) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

type InvoiceCompensation struct {
	InvoiceID *string `json:"invoiceId,omitempty"`
}

func (o *InvoiceCompensation) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

type EntityBalanceTransactionApplicationFee struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	PayingOwner        *string `json:"payingOwner,omitempty"`
}

func (o *EntityBalanceTransactionApplicationFee) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *EntityBalanceTransactionApplicationFee) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *EntityBalanceTransactionApplicationFee) GetPayingOwner() *string {
	if o == nil {
		return nil
	}
	return o.PayingOwner
}

type SplitPayment struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	PaymentOnwer       *string `json:"paymentOnwer,omitempty"`
}

func (o *SplitPayment) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *SplitPayment) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *SplitPayment) GetPaymentOnwer() *string {
	if o == nil {
		return nil
	}
	return o.PaymentOnwer
}

type PlatformPaymentRefund struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (o *PlatformPaymentRefund) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *PlatformPaymentRefund) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *PlatformPaymentRefund) GetRefundID() *string {
	if o == nil {
		return nil
	}
	return o.RefundID
}

func (o *PlatformPaymentRefund) GetRefundDescription() *string {
	if o == nil {
		return nil
	}
	return o.RefundDescription
}

type ReturnedPlatformPaymentRefund struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (o *ReturnedPlatformPaymentRefund) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ReturnedPlatformPaymentRefund) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ReturnedPlatformPaymentRefund) GetRefundID() *string {
	if o == nil {
		return nil
	}
	return o.RefundID
}

func (o *ReturnedPlatformPaymentRefund) GetRefundDescription() *string {
	if o == nil {
		return nil
	}
	return o.RefundDescription
}

type PlatformPaymentChargeback struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (o *PlatformPaymentChargeback) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *PlatformPaymentChargeback) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *PlatformPaymentChargeback) GetChargebackID() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackID
}

func (o *PlatformPaymentChargeback) GetChargebackDescription() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackDescription
}

type ReversedPlatformPaymentChargeback struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (o *ReversedPlatformPaymentChargeback) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ReversedPlatformPaymentChargeback) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ReversedPlatformPaymentChargeback) GetChargebackID() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackID
}

func (o *ReversedPlatformPaymentChargeback) GetChargebackDescription() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackDescription
}

type PaymentCommission struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	OrganizationID     *string `json:"organizationId,omitempty"`
}

func (o *PaymentCommission) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *PaymentCommission) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *PaymentCommission) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

type ReimbursementFee struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (o *ReimbursementFee) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ReimbursementFee) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

type FailedPaymentFee struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (o *FailedPaymentFee) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *FailedPaymentFee) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

type PaymentFee struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (o *PaymentFee) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *PaymentFee) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

type ManagedFee struct {
	FeeType *string `json:"feeType,omitempty"`
	FeeID   *string `json:"feeId,omitempty"`
}

func (o *ManagedFee) GetFeeType() *string {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *ManagedFee) GetFeeID() *string {
	if o == nil {
		return nil
	}
	return o.FeeID
}

type ReturnedManagedFee struct {
	FeeType *string `json:"feeType,omitempty"`
	FeeID   *string `json:"feeId,omitempty"`
}

func (o *ReturnedManagedFee) GetFeeType() *string {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *ReturnedManagedFee) GetFeeID() *string {
	if o == nil {
		return nil
	}
	return o.FeeID
}

type PostPaymentSplitPayment struct {
	PaymentID *string `json:"paymentId,omitempty"`
}

func (o *PostPaymentSplitPayment) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

// Context - Depending on the type of the balance transaction, we will try to give more context about the specific event that
// triggered it. For example, the context object for a payment transaction will look like
// `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo", "paymentDescription": "Description"}`.
//
// Below is a complete list of the context values that each type of transaction will have.
//
// * Type `payment`: `paymentId`, `paymentDescription`
// * Type `capture`: `paymentId` `captureId`, `paymentDescription`, `captureDescription`
// * Type `capture-commission`: `paymentId`, `paymentDescription`, `organizationId`
// * Type `capture-rolling-reserve-release`: `paymentId`, `paymentDescription`, `captureId`, `captureDescription`
// * Type `unauthorized-direct-debit`: `paymentId`, `paymentDescription`
// * Type `failed-payment`: `paymentId`, `paymentDescription`
// * Type `refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `returned-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `returned-refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `chargeback-reversal`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `reversed-chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `outgoing-transfer`: `settlementId` `transferId`
// * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
// * Type `returned-transfer`: `settlementId` `transferId`
// * Type `invoice-compensation`: `invoiceId`
// * Type `balance-correction`: none
// * Type `application-fee`: `paymentId`, `paymentDescription`, `payingOwner`
// * Type `split-payment`: `paymentId`, `paymentDescription`, `paymentOwner`
// * Type `platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `returned-platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `reversed-platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `payment-commission`: `paymentId`, `paymentDescription`, `organizationId`
// * Type `reimbursement-fee`: `paymentId`, `paymentDescription`
// * Type `failed-payment-fee`: `paymentId`, `paymentDescription`
// * Type `payment-fee`: `paymentId`, `paymentDescription`
// * Type `cash-advance-loan`: none
// * Type `platform-connected-organizations-fee`: none
// * Type `managed-fee`: `feeType`, `<name of the fee>Id`
// * Type `returned-managed-fee`:  `feeType`, `<name of the fee>Id`
// * Type `topup`: none
// * Type `balance-reserve`: none
// * Type `balance-reserve-return`: none
// * Type `movement`: none
// * Type `post-payment-split-payment`: `paymentId`
// * Type `cash-collateral-issuance`: none
// * Type `cash-collateral-release`: none
type Context struct {
	Payment                           *Payment                                `json:"payment,omitempty"`
	Capture                           *Capture                                `json:"capture,omitempty"`
	CaptureCommision                  *CaptureCommision                       `json:"capture-commision,omitempty"`
	CaptureRollingReserveRelease      *CaptureRollingReserveRelease           `json:"capture-rolling-reserve-release,omitempty"`
	UnauthorizedDirectDebit           *UnauthorizedDirectDebit                `json:"unauthorized-direct-debit,omitempty"`
	FailedPayment                     *FailedPayment                          `json:"failed-payment,omitempty"`
	Refund                            *Refund                                 `json:"refund,omitempty"`
	RefundCompensation                *RefundCompensation                     `json:"refund-compensation,omitempty"`
	ReturnedRefund                    *ReturnedRefund                         `json:"returned-refund,omitempty"`
	ReturnedRefundCompensation        *ReturnedRefundCompensation             `json:"returned-refund-compensation,omitempty"`
	Chargeback                        *Chargeback                             `json:"chargeback,omitempty"`
	ChargebackReversal                *ChargebackReversal                     `json:"chargeback-reversal,omitempty"`
	ChargebackCompensation            *ChargebackCompensation                 `json:"chargeback-compensation,omitempty"`
	ReversedChargebackCompensation    *ReversedChargebackCompensation         `json:"reversed-chargeback-compensation,omitempty"`
	OutgoingTransfer                  *OutgoingTransfer                       `json:"outgoing-transfer,omitempty"`
	CanceledOutgoingTransfer          *CanceledOutgoingTransfer               `json:"canceled-outgoing-transfer,omitempty"`
	ReturnedTransfer                  *ReturnedTransfer                       `json:"returned-transfer,omitempty"`
	InvoiceCompensation               *InvoiceCompensation                    `json:"invoice-compensation,omitempty"`
	ApplicationFee                    *EntityBalanceTransactionApplicationFee `json:"application-fee,omitempty"`
	SplitPayment                      *SplitPayment                           `json:"split-payment,omitempty"`
	PlatformPaymentRefund             *PlatformPaymentRefund                  `json:"platform-payment-refund,omitempty"`
	ReturnedPlatformPaymentRefund     *ReturnedPlatformPaymentRefund          `json:"returned-platform-payment-refund,omitempty"`
	PlatformPaymentChargeback         *PlatformPaymentChargeback              `json:"platform-payment-chargeback,omitempty"`
	ReversedPlatformPaymentChargeback *ReversedPlatformPaymentChargeback      `json:"reversed-platform-payment-chargeback,omitempty"`
	PaymentCommission                 *PaymentCommission                      `json:"payment-commission,omitempty"`
	ReimbursementFee                  *ReimbursementFee                       `json:"reimbursement-fee,omitempty"`
	FailedPaymentFee                  *FailedPaymentFee                       `json:"failed-payment-fee,omitempty"`
	PaymentFee                        *PaymentFee                             `json:"payment-fee,omitempty"`
	ManagedFee                        *ManagedFee                             `json:"managed-fee,omitempty"`
	ReturnedManagedFee                *ReturnedManagedFee                     `json:"returned-managed-fee,omitempty"`
	PostPaymentSplitPayment           *PostPaymentSplitPayment                `json:"post-payment-split-payment,omitempty"`
}

func (o *Context) GetPayment() *Payment {
	if o == nil {
		return nil
	}
	return o.Payment
}

func (o *Context) GetCapture() *Capture {
	if o == nil {
		return nil
	}
	return o.Capture
}

func (o *Context) GetCaptureCommision() *CaptureCommision {
	if o == nil {
		return nil
	}
	return o.CaptureCommision
}

func (o *Context) GetCaptureRollingReserveRelease() *CaptureRollingReserveRelease {
	if o == nil {
		return nil
	}
	return o.CaptureRollingReserveRelease
}

func (o *Context) GetUnauthorizedDirectDebit() *UnauthorizedDirectDebit {
	if o == nil {
		return nil
	}
	return o.UnauthorizedDirectDebit
}

func (o *Context) GetFailedPayment() *FailedPayment {
	if o == nil {
		return nil
	}
	return o.FailedPayment
}

func (o *Context) GetRefund() *Refund {
	if o == nil {
		return nil
	}
	return o.Refund
}

func (o *Context) GetRefundCompensation() *RefundCompensation {
	if o == nil {
		return nil
	}
	return o.RefundCompensation
}

func (o *Context) GetReturnedRefund() *ReturnedRefund {
	if o == nil {
		return nil
	}
	return o.ReturnedRefund
}

func (o *Context) GetReturnedRefundCompensation() *ReturnedRefundCompensation {
	if o == nil {
		return nil
	}
	return o.ReturnedRefundCompensation
}

func (o *Context) GetChargeback() *Chargeback {
	if o == nil {
		return nil
	}
	return o.Chargeback
}

func (o *Context) GetChargebackReversal() *ChargebackReversal {
	if o == nil {
		return nil
	}
	return o.ChargebackReversal
}

func (o *Context) GetChargebackCompensation() *ChargebackCompensation {
	if o == nil {
		return nil
	}
	return o.ChargebackCompensation
}

func (o *Context) GetReversedChargebackCompensation() *ReversedChargebackCompensation {
	if o == nil {
		return nil
	}
	return o.ReversedChargebackCompensation
}

func (o *Context) GetOutgoingTransfer() *OutgoingTransfer {
	if o == nil {
		return nil
	}
	return o.OutgoingTransfer
}

func (o *Context) GetCanceledOutgoingTransfer() *CanceledOutgoingTransfer {
	if o == nil {
		return nil
	}
	return o.CanceledOutgoingTransfer
}

func (o *Context) GetReturnedTransfer() *ReturnedTransfer {
	if o == nil {
		return nil
	}
	return o.ReturnedTransfer
}

func (o *Context) GetInvoiceCompensation() *InvoiceCompensation {
	if o == nil {
		return nil
	}
	return o.InvoiceCompensation
}

func (o *Context) GetApplicationFee() *EntityBalanceTransactionApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *Context) GetSplitPayment() *SplitPayment {
	if o == nil {
		return nil
	}
	return o.SplitPayment
}

func (o *Context) GetPlatformPaymentRefund() *PlatformPaymentRefund {
	if o == nil {
		return nil
	}
	return o.PlatformPaymentRefund
}

func (o *Context) GetReturnedPlatformPaymentRefund() *ReturnedPlatformPaymentRefund {
	if o == nil {
		return nil
	}
	return o.ReturnedPlatformPaymentRefund
}

func (o *Context) GetPlatformPaymentChargeback() *PlatformPaymentChargeback {
	if o == nil {
		return nil
	}
	return o.PlatformPaymentChargeback
}

func (o *Context) GetReversedPlatformPaymentChargeback() *ReversedPlatformPaymentChargeback {
	if o == nil {
		return nil
	}
	return o.ReversedPlatformPaymentChargeback
}

func (o *Context) GetPaymentCommission() *PaymentCommission {
	if o == nil {
		return nil
	}
	return o.PaymentCommission
}

func (o *Context) GetReimbursementFee() *ReimbursementFee {
	if o == nil {
		return nil
	}
	return o.ReimbursementFee
}

func (o *Context) GetFailedPaymentFee() *FailedPaymentFee {
	if o == nil {
		return nil
	}
	return o.FailedPaymentFee
}

func (o *Context) GetPaymentFee() *PaymentFee {
	if o == nil {
		return nil
	}
	return o.PaymentFee
}

func (o *Context) GetManagedFee() *ManagedFee {
	if o == nil {
		return nil
	}
	return o.ManagedFee
}

func (o *Context) GetReturnedManagedFee() *ReturnedManagedFee {
	if o == nil {
		return nil
	}
	return o.ReturnedManagedFee
}

func (o *Context) GetPostPaymentSplitPayment() *PostPaymentSplitPayment {
	if o == nil {
		return nil
	}
	return o.PostPaymentSplitPayment
}

type EntityBalanceTransaction struct {
	// Indicates the response contains a balance transaction object. Will always contain the string `balance-transaction`
	// for this endpoint.
	Resource *string `json:"resource,omitempty"`
	ID       *string `json:"id,omitempty"`
	// The type of transaction, for example `payment` or `refund`. Values include the below examples, although this list
	// is not definitive.
	//
	// * Regular payment processing: `payment` `capture` `unauthorized-direct-debit` `failed-payment`
	// * Refunds and chargebacks: `refund` `returned-refund` `chargeback` `chargeback-reversal`
	// * Settlements: `outgoing-transfer` `canceled-outgoing-transfer` `returned-transfer`
	// * Invoicing: `invoice-compensation` `balance-correction`
	// * Mollie Connect: `application-fee` `split-payment` `platform-payment-refund` `platform-payment-chargeback`
	Type *EntityBalanceTransactionType `json:"type,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	ResultAmount *Amount `json:"resultAmount,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	InitialAmount *Amount `json:"initialAmount,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Deductions *AmountNullable `json:"deductions,omitempty"`
	// Depending on the type of the balance transaction, we will try to give more context about the specific event that
	// triggered it. For example, the context object for a payment transaction will look like
	// `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo", "paymentDescription": "Description"}`.
	//
	// Below is a complete list of the context values that each type of transaction will have.
	//
	// * Type `payment`: `paymentId`, `paymentDescription`
	// * Type `capture`: `paymentId` `captureId`, `paymentDescription`, `captureDescription`
	// * Type `capture-commission`: `paymentId`, `paymentDescription`, `organizationId`
	// * Type `capture-rolling-reserve-release`: `paymentId`, `paymentDescription`, `captureId`, `captureDescription`
	// * Type `unauthorized-direct-debit`: `paymentId`, `paymentDescription`
	// * Type `failed-payment`: `paymentId`, `paymentDescription`
	// * Type `refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `returned-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `returned-refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `chargeback-reversal`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `reversed-chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `outgoing-transfer`: `settlementId` `transferId`
	// * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
	// * Type `returned-transfer`: `settlementId` `transferId`
	// * Type `invoice-compensation`: `invoiceId`
	// * Type `balance-correction`: none
	// * Type `application-fee`: `paymentId`, `paymentDescription`, `payingOwner`
	// * Type `split-payment`: `paymentId`, `paymentDescription`, `paymentOwner`
	// * Type `platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `returned-platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `reversed-platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `payment-commission`: `paymentId`, `paymentDescription`, `organizationId`
	// * Type `reimbursement-fee`: `paymentId`, `paymentDescription`
	// * Type `failed-payment-fee`: `paymentId`, `paymentDescription`
	// * Type `payment-fee`: `paymentId`, `paymentDescription`
	// * Type `cash-advance-loan`: none
	// * Type `platform-connected-organizations-fee`: none
	// * Type `managed-fee`: `feeType`, `<name of the fee>Id`
	// * Type `returned-managed-fee`:  `feeType`, `<name of the fee>Id`
	// * Type `topup`: none
	// * Type `balance-reserve`: none
	// * Type `balance-reserve-return`: none
	// * Type `movement`: none
	// * Type `post-payment-split-payment`: `paymentId`
	// * Type `cash-collateral-issuance`: none
	// * Type `cash-collateral-release`: none
	Context *Context `json:"context,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
}

func (o *EntityBalanceTransaction) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *EntityBalanceTransaction) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EntityBalanceTransaction) GetType() *EntityBalanceTransactionType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EntityBalanceTransaction) GetResultAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.ResultAmount
}

func (o *EntityBalanceTransaction) GetInitialAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.InitialAmount
}

func (o *EntityBalanceTransaction) GetDeductions() *AmountNullable {
	if o == nil {
		return nil
	}
	return o.Deductions
}

func (o *EntityBalanceTransaction) GetContext() *Context {
	if o == nil {
		return nil
	}
	return o.Context
}

func (o *EntityBalanceTransaction) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}
