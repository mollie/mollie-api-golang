// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type Payment struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (p *Payment) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *Payment) GetPaymentDescription() *string {
	if p == nil {
		return nil
	}
	return p.PaymentDescription
}

type Capture struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	CaptureID          *string `json:"captureId,omitempty"`
	CaptureDescription *string `json:"captureDescription,omitempty"`
}

func (c *Capture) GetPaymentID() *string {
	if c == nil {
		return nil
	}
	return c.PaymentID
}

func (c *Capture) GetPaymentDescription() *string {
	if c == nil {
		return nil
	}
	return c.PaymentDescription
}

func (c *Capture) GetCaptureID() *string {
	if c == nil {
		return nil
	}
	return c.CaptureID
}

func (c *Capture) GetCaptureDescription() *string {
	if c == nil {
		return nil
	}
	return c.CaptureDescription
}

type CaptureCommision struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	CaptureID          *string `json:"captureId,omitempty"`
	CaptureDescription *string `json:"captureDescription,omitempty"`
}

func (c *CaptureCommision) GetPaymentID() *string {
	if c == nil {
		return nil
	}
	return c.PaymentID
}

func (c *CaptureCommision) GetPaymentDescription() *string {
	if c == nil {
		return nil
	}
	return c.PaymentDescription
}

func (c *CaptureCommision) GetCaptureID() *string {
	if c == nil {
		return nil
	}
	return c.CaptureID
}

func (c *CaptureCommision) GetCaptureDescription() *string {
	if c == nil {
		return nil
	}
	return c.CaptureDescription
}

type CaptureRollingReserveRelease struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	CaptureID          *string `json:"captureId,omitempty"`
	CaptureDescription *string `json:"captureDescription,omitempty"`
}

func (c *CaptureRollingReserveRelease) GetPaymentID() *string {
	if c == nil {
		return nil
	}
	return c.PaymentID
}

func (c *CaptureRollingReserveRelease) GetPaymentDescription() *string {
	if c == nil {
		return nil
	}
	return c.PaymentDescription
}

func (c *CaptureRollingReserveRelease) GetCaptureID() *string {
	if c == nil {
		return nil
	}
	return c.CaptureID
}

func (c *CaptureRollingReserveRelease) GetCaptureDescription() *string {
	if c == nil {
		return nil
	}
	return c.CaptureDescription
}

type UnauthorizedDirectDebit struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (u *UnauthorizedDirectDebit) GetPaymentID() *string {
	if u == nil {
		return nil
	}
	return u.PaymentID
}

func (u *UnauthorizedDirectDebit) GetPaymentDescription() *string {
	if u == nil {
		return nil
	}
	return u.PaymentDescription
}

type FailedPayment struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (f *FailedPayment) GetPaymentID() *string {
	if f == nil {
		return nil
	}
	return f.PaymentID
}

func (f *FailedPayment) GetPaymentDescription() *string {
	if f == nil {
		return nil
	}
	return f.PaymentDescription
}

type Refund struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (r *Refund) GetPaymentID() *string {
	if r == nil {
		return nil
	}
	return r.PaymentID
}

func (r *Refund) GetPaymentDescription() *string {
	if r == nil {
		return nil
	}
	return r.PaymentDescription
}

func (r *Refund) GetRefundID() *string {
	if r == nil {
		return nil
	}
	return r.RefundID
}

func (r *Refund) GetRefundDescription() *string {
	if r == nil {
		return nil
	}
	return r.RefundDescription
}

type RefundCompensation struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (r *RefundCompensation) GetPaymentID() *string {
	if r == nil {
		return nil
	}
	return r.PaymentID
}

func (r *RefundCompensation) GetPaymentDescription() *string {
	if r == nil {
		return nil
	}
	return r.PaymentDescription
}

func (r *RefundCompensation) GetRefundID() *string {
	if r == nil {
		return nil
	}
	return r.RefundID
}

func (r *RefundCompensation) GetRefundDescription() *string {
	if r == nil {
		return nil
	}
	return r.RefundDescription
}

type ReturnedRefund struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (r *ReturnedRefund) GetPaymentID() *string {
	if r == nil {
		return nil
	}
	return r.PaymentID
}

func (r *ReturnedRefund) GetPaymentDescription() *string {
	if r == nil {
		return nil
	}
	return r.PaymentDescription
}

func (r *ReturnedRefund) GetRefundID() *string {
	if r == nil {
		return nil
	}
	return r.RefundID
}

func (r *ReturnedRefund) GetRefundDescription() *string {
	if r == nil {
		return nil
	}
	return r.RefundDescription
}

type ReturnedRefundCompensation struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (r *ReturnedRefundCompensation) GetPaymentID() *string {
	if r == nil {
		return nil
	}
	return r.PaymentID
}

func (r *ReturnedRefundCompensation) GetPaymentDescription() *string {
	if r == nil {
		return nil
	}
	return r.PaymentDescription
}

func (r *ReturnedRefundCompensation) GetRefundID() *string {
	if r == nil {
		return nil
	}
	return r.RefundID
}

func (r *ReturnedRefundCompensation) GetRefundDescription() *string {
	if r == nil {
		return nil
	}
	return r.RefundDescription
}

type Chargeback struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (c *Chargeback) GetPaymentID() *string {
	if c == nil {
		return nil
	}
	return c.PaymentID
}

func (c *Chargeback) GetPaymentDescription() *string {
	if c == nil {
		return nil
	}
	return c.PaymentDescription
}

func (c *Chargeback) GetChargebackID() *string {
	if c == nil {
		return nil
	}
	return c.ChargebackID
}

func (c *Chargeback) GetChargebackDescription() *string {
	if c == nil {
		return nil
	}
	return c.ChargebackDescription
}

type ChargebackReversal struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (c *ChargebackReversal) GetPaymentID() *string {
	if c == nil {
		return nil
	}
	return c.PaymentID
}

func (c *ChargebackReversal) GetPaymentDescription() *string {
	if c == nil {
		return nil
	}
	return c.PaymentDescription
}

func (c *ChargebackReversal) GetChargebackID() *string {
	if c == nil {
		return nil
	}
	return c.ChargebackID
}

func (c *ChargebackReversal) GetChargebackDescription() *string {
	if c == nil {
		return nil
	}
	return c.ChargebackDescription
}

type ChargebackCompensation struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (c *ChargebackCompensation) GetPaymentID() *string {
	if c == nil {
		return nil
	}
	return c.PaymentID
}

func (c *ChargebackCompensation) GetPaymentDescription() *string {
	if c == nil {
		return nil
	}
	return c.PaymentDescription
}

func (c *ChargebackCompensation) GetChargebackID() *string {
	if c == nil {
		return nil
	}
	return c.ChargebackID
}

func (c *ChargebackCompensation) GetChargebackDescription() *string {
	if c == nil {
		return nil
	}
	return c.ChargebackDescription
}

type ReversedChargebackCompensation struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (r *ReversedChargebackCompensation) GetPaymentID() *string {
	if r == nil {
		return nil
	}
	return r.PaymentID
}

func (r *ReversedChargebackCompensation) GetPaymentDescription() *string {
	if r == nil {
		return nil
	}
	return r.PaymentDescription
}

func (r *ReversedChargebackCompensation) GetChargebackID() *string {
	if r == nil {
		return nil
	}
	return r.ChargebackID
}

func (r *ReversedChargebackCompensation) GetChargebackDescription() *string {
	if r == nil {
		return nil
	}
	return r.ChargebackDescription
}

type OutgoingTransfer struct {
	TransferID   *string `json:"transferId,omitempty"`
	SettlementID *string `json:"settlementId,omitempty"`
}

func (o *OutgoingTransfer) GetTransferID() *string {
	if o == nil {
		return nil
	}
	return o.TransferID
}

func (o *OutgoingTransfer) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

type CanceledOutgoingTransfer struct {
	TransferID   *string `json:"transferId,omitempty"`
	SettlementID *string `json:"settlementId,omitempty"`
}

func (c *CanceledOutgoingTransfer) GetTransferID() *string {
	if c == nil {
		return nil
	}
	return c.TransferID
}

func (c *CanceledOutgoingTransfer) GetSettlementID() *string {
	if c == nil {
		return nil
	}
	return c.SettlementID
}

type ReturnedTransfer struct {
	TransferID   *string `json:"transferId,omitempty"`
	SettlementID *string `json:"settlementId,omitempty"`
}

func (r *ReturnedTransfer) GetTransferID() *string {
	if r == nil {
		return nil
	}
	return r.TransferID
}

func (r *ReturnedTransfer) GetSettlementID() *string {
	if r == nil {
		return nil
	}
	return r.SettlementID
}

type InvoiceCompensation struct {
	InvoiceID *string `json:"invoiceId,omitempty"`
}

func (i *InvoiceCompensation) GetInvoiceID() *string {
	if i == nil {
		return nil
	}
	return i.InvoiceID
}

type EntityBalanceTransactionApplicationFee struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	PayingOwner        *string `json:"payingOwner,omitempty"`
}

func (e *EntityBalanceTransactionApplicationFee) GetPaymentID() *string {
	if e == nil {
		return nil
	}
	return e.PaymentID
}

func (e *EntityBalanceTransactionApplicationFee) GetPaymentDescription() *string {
	if e == nil {
		return nil
	}
	return e.PaymentDescription
}

func (e *EntityBalanceTransactionApplicationFee) GetPayingOwner() *string {
	if e == nil {
		return nil
	}
	return e.PayingOwner
}

type SplitPayment struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	PaymentOnwer       *string `json:"paymentOnwer,omitempty"`
}

func (s *SplitPayment) GetPaymentID() *string {
	if s == nil {
		return nil
	}
	return s.PaymentID
}

func (s *SplitPayment) GetPaymentDescription() *string {
	if s == nil {
		return nil
	}
	return s.PaymentDescription
}

func (s *SplitPayment) GetPaymentOnwer() *string {
	if s == nil {
		return nil
	}
	return s.PaymentOnwer
}

type PlatformPaymentRefund struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (p *PlatformPaymentRefund) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PlatformPaymentRefund) GetPaymentDescription() *string {
	if p == nil {
		return nil
	}
	return p.PaymentDescription
}

func (p *PlatformPaymentRefund) GetRefundID() *string {
	if p == nil {
		return nil
	}
	return p.RefundID
}

func (p *PlatformPaymentRefund) GetRefundDescription() *string {
	if p == nil {
		return nil
	}
	return p.RefundDescription
}

type ReturnedPlatformPaymentRefund struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (r *ReturnedPlatformPaymentRefund) GetPaymentID() *string {
	if r == nil {
		return nil
	}
	return r.PaymentID
}

func (r *ReturnedPlatformPaymentRefund) GetPaymentDescription() *string {
	if r == nil {
		return nil
	}
	return r.PaymentDescription
}

func (r *ReturnedPlatformPaymentRefund) GetRefundID() *string {
	if r == nil {
		return nil
	}
	return r.RefundID
}

func (r *ReturnedPlatformPaymentRefund) GetRefundDescription() *string {
	if r == nil {
		return nil
	}
	return r.RefundDescription
}

type PlatformPaymentChargeback struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (p *PlatformPaymentChargeback) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PlatformPaymentChargeback) GetPaymentDescription() *string {
	if p == nil {
		return nil
	}
	return p.PaymentDescription
}

func (p *PlatformPaymentChargeback) GetChargebackID() *string {
	if p == nil {
		return nil
	}
	return p.ChargebackID
}

func (p *PlatformPaymentChargeback) GetChargebackDescription() *string {
	if p == nil {
		return nil
	}
	return p.ChargebackDescription
}

type ReversedPlatformPaymentChargeback struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (r *ReversedPlatformPaymentChargeback) GetPaymentID() *string {
	if r == nil {
		return nil
	}
	return r.PaymentID
}

func (r *ReversedPlatformPaymentChargeback) GetPaymentDescription() *string {
	if r == nil {
		return nil
	}
	return r.PaymentDescription
}

func (r *ReversedPlatformPaymentChargeback) GetChargebackID() *string {
	if r == nil {
		return nil
	}
	return r.ChargebackID
}

func (r *ReversedPlatformPaymentChargeback) GetChargebackDescription() *string {
	if r == nil {
		return nil
	}
	return r.ChargebackDescription
}

type PaymentCommission struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	OrganizationID     *string `json:"organizationId,omitempty"`
}

func (p *PaymentCommission) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentCommission) GetPaymentDescription() *string {
	if p == nil {
		return nil
	}
	return p.PaymentDescription
}

func (p *PaymentCommission) GetOrganizationID() *string {
	if p == nil {
		return nil
	}
	return p.OrganizationID
}

type ReimbursementFee struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (r *ReimbursementFee) GetPaymentID() *string {
	if r == nil {
		return nil
	}
	return r.PaymentID
}

func (r *ReimbursementFee) GetPaymentDescription() *string {
	if r == nil {
		return nil
	}
	return r.PaymentDescription
}

type FailedPaymentFee struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (f *FailedPaymentFee) GetPaymentID() *string {
	if f == nil {
		return nil
	}
	return f.PaymentID
}

func (f *FailedPaymentFee) GetPaymentDescription() *string {
	if f == nil {
		return nil
	}
	return f.PaymentDescription
}

type PaymentFee struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (p *PaymentFee) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentFee) GetPaymentDescription() *string {
	if p == nil {
		return nil
	}
	return p.PaymentDescription
}

type ManagedFee struct {
	FeeType *string `json:"feeType,omitempty"`
	FeeID   *string `json:"feeId,omitempty"`
}

func (m *ManagedFee) GetFeeType() *string {
	if m == nil {
		return nil
	}
	return m.FeeType
}

func (m *ManagedFee) GetFeeID() *string {
	if m == nil {
		return nil
	}
	return m.FeeID
}

type ReturnedManagedFee struct {
	FeeType *string `json:"feeType,omitempty"`
	FeeID   *string `json:"feeId,omitempty"`
}

func (r *ReturnedManagedFee) GetFeeType() *string {
	if r == nil {
		return nil
	}
	return r.FeeType
}

func (r *ReturnedManagedFee) GetFeeID() *string {
	if r == nil {
		return nil
	}
	return r.FeeID
}

type PostPaymentSplitPayment struct {
	PaymentID *string `json:"paymentId,omitempty"`
}

func (p *PostPaymentSplitPayment) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

// Context - Depending on the type of the balance transaction, we will try to give more context about the specific event that
// triggered it. For example, the context object for a payment transaction will look like
// `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo", "paymentDescription": "Description"}`.
//
// Below is a complete list of the context values that each type of transaction will have.
//
// * Type `payment`: `paymentId`, `paymentDescription`
// * Type `capture`: `paymentId` `captureId`, `paymentDescription`, `captureDescription`
// * Type `capture-commission`: `paymentId`, `paymentDescription`, `organizationId`
// * Type `capture-rolling-reserve-release`: `paymentId`, `paymentDescription`, `captureId`, `captureDescription`
// * Type `unauthorized-direct-debit`: `paymentId`, `paymentDescription`
// * Type `failed-payment`: `paymentId`, `paymentDescription`
// * Type `refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `returned-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `returned-refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `chargeback-reversal`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `reversed-chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `outgoing-transfer`: `settlementId` `transferId`
// * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
// * Type `returned-transfer`: `settlementId` `transferId`
// * Type `invoice-compensation`: `invoiceId`
// * Type `balance-correction`: none
// * Type `application-fee`: `paymentId`, `paymentDescription`, `payingOwner`
// * Type `split-payment`: `paymentId`, `paymentDescription`, `paymentOwner`
// * Type `platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `returned-platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `reversed-platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `payment-commission`: `paymentId`, `paymentDescription`, `organizationId`
// * Type `reimbursement-fee`: `paymentId`, `paymentDescription`
// * Type `failed-payment-fee`: `paymentId`, `paymentDescription`
// * Type `payment-fee`: `paymentId`, `paymentDescription`
// * Type `cash-advance-loan`: none
// * Type `platform-connected-organizations-fee`: none
// * Type `managed-fee`: `feeType`, `<name of the fee>Id`
// * Type `returned-managed-fee`:  `feeType`, `<name of the fee>Id`
// * Type `topup`: none
// * Type `balance-reserve`: none
// * Type `balance-reserve-return`: none
// * Type `movement`: none
// * Type `post-payment-split-payment`: `paymentId`
// * Type `cash-collateral-issuance`: none
// * Type `cash-collateral-release`: none
type Context struct {
	Payment                           *Payment                                `json:"payment,omitempty"`
	Capture                           *Capture                                `json:"capture,omitempty"`
	CaptureCommision                  *CaptureCommision                       `json:"capture-commision,omitempty"`
	CaptureRollingReserveRelease      *CaptureRollingReserveRelease           `json:"capture-rolling-reserve-release,omitempty"`
	UnauthorizedDirectDebit           *UnauthorizedDirectDebit                `json:"unauthorized-direct-debit,omitempty"`
	FailedPayment                     *FailedPayment                          `json:"failed-payment,omitempty"`
	Refund                            *Refund                                 `json:"refund,omitempty"`
	RefundCompensation                *RefundCompensation                     `json:"refund-compensation,omitempty"`
	ReturnedRefund                    *ReturnedRefund                         `json:"returned-refund,omitempty"`
	ReturnedRefundCompensation        *ReturnedRefundCompensation             `json:"returned-refund-compensation,omitempty"`
	Chargeback                        *Chargeback                             `json:"chargeback,omitempty"`
	ChargebackReversal                *ChargebackReversal                     `json:"chargeback-reversal,omitempty"`
	ChargebackCompensation            *ChargebackCompensation                 `json:"chargeback-compensation,omitempty"`
	ReversedChargebackCompensation    *ReversedChargebackCompensation         `json:"reversed-chargeback-compensation,omitempty"`
	OutgoingTransfer                  *OutgoingTransfer                       `json:"outgoing-transfer,omitempty"`
	CanceledOutgoingTransfer          *CanceledOutgoingTransfer               `json:"canceled-outgoing-transfer,omitempty"`
	ReturnedTransfer                  *ReturnedTransfer                       `json:"returned-transfer,omitempty"`
	InvoiceCompensation               *InvoiceCompensation                    `json:"invoice-compensation,omitempty"`
	ApplicationFee                    *EntityBalanceTransactionApplicationFee `json:"application-fee,omitempty"`
	SplitPayment                      *SplitPayment                           `json:"split-payment,omitempty"`
	PlatformPaymentRefund             *PlatformPaymentRefund                  `json:"platform-payment-refund,omitempty"`
	ReturnedPlatformPaymentRefund     *ReturnedPlatformPaymentRefund          `json:"returned-platform-payment-refund,omitempty"`
	PlatformPaymentChargeback         *PlatformPaymentChargeback              `json:"platform-payment-chargeback,omitempty"`
	ReversedPlatformPaymentChargeback *ReversedPlatformPaymentChargeback      `json:"reversed-platform-payment-chargeback,omitempty"`
	PaymentCommission                 *PaymentCommission                      `json:"payment-commission,omitempty"`
	ReimbursementFee                  *ReimbursementFee                       `json:"reimbursement-fee,omitempty"`
	FailedPaymentFee                  *FailedPaymentFee                       `json:"failed-payment-fee,omitempty"`
	PaymentFee                        *PaymentFee                             `json:"payment-fee,omitempty"`
	ManagedFee                        *ManagedFee                             `json:"managed-fee,omitempty"`
	ReturnedManagedFee                *ReturnedManagedFee                     `json:"returned-managed-fee,omitempty"`
	PostPaymentSplitPayment           *PostPaymentSplitPayment                `json:"post-payment-split-payment,omitempty"`
}

func (c *Context) GetPayment() *Payment {
	if c == nil {
		return nil
	}
	return c.Payment
}

func (c *Context) GetCapture() *Capture {
	if c == nil {
		return nil
	}
	return c.Capture
}

func (c *Context) GetCaptureCommision() *CaptureCommision {
	if c == nil {
		return nil
	}
	return c.CaptureCommision
}

func (c *Context) GetCaptureRollingReserveRelease() *CaptureRollingReserveRelease {
	if c == nil {
		return nil
	}
	return c.CaptureRollingReserveRelease
}

func (c *Context) GetUnauthorizedDirectDebit() *UnauthorizedDirectDebit {
	if c == nil {
		return nil
	}
	return c.UnauthorizedDirectDebit
}

func (c *Context) GetFailedPayment() *FailedPayment {
	if c == nil {
		return nil
	}
	return c.FailedPayment
}

func (c *Context) GetRefund() *Refund {
	if c == nil {
		return nil
	}
	return c.Refund
}

func (c *Context) GetRefundCompensation() *RefundCompensation {
	if c == nil {
		return nil
	}
	return c.RefundCompensation
}

func (c *Context) GetReturnedRefund() *ReturnedRefund {
	if c == nil {
		return nil
	}
	return c.ReturnedRefund
}

func (c *Context) GetReturnedRefundCompensation() *ReturnedRefundCompensation {
	if c == nil {
		return nil
	}
	return c.ReturnedRefundCompensation
}

func (c *Context) GetChargeback() *Chargeback {
	if c == nil {
		return nil
	}
	return c.Chargeback
}

func (c *Context) GetChargebackReversal() *ChargebackReversal {
	if c == nil {
		return nil
	}
	return c.ChargebackReversal
}

func (c *Context) GetChargebackCompensation() *ChargebackCompensation {
	if c == nil {
		return nil
	}
	return c.ChargebackCompensation
}

func (c *Context) GetReversedChargebackCompensation() *ReversedChargebackCompensation {
	if c == nil {
		return nil
	}
	return c.ReversedChargebackCompensation
}

func (c *Context) GetOutgoingTransfer() *OutgoingTransfer {
	if c == nil {
		return nil
	}
	return c.OutgoingTransfer
}

func (c *Context) GetCanceledOutgoingTransfer() *CanceledOutgoingTransfer {
	if c == nil {
		return nil
	}
	return c.CanceledOutgoingTransfer
}

func (c *Context) GetReturnedTransfer() *ReturnedTransfer {
	if c == nil {
		return nil
	}
	return c.ReturnedTransfer
}

func (c *Context) GetInvoiceCompensation() *InvoiceCompensation {
	if c == nil {
		return nil
	}
	return c.InvoiceCompensation
}

func (c *Context) GetApplicationFee() *EntityBalanceTransactionApplicationFee {
	if c == nil {
		return nil
	}
	return c.ApplicationFee
}

func (c *Context) GetSplitPayment() *SplitPayment {
	if c == nil {
		return nil
	}
	return c.SplitPayment
}

func (c *Context) GetPlatformPaymentRefund() *PlatformPaymentRefund {
	if c == nil {
		return nil
	}
	return c.PlatformPaymentRefund
}

func (c *Context) GetReturnedPlatformPaymentRefund() *ReturnedPlatformPaymentRefund {
	if c == nil {
		return nil
	}
	return c.ReturnedPlatformPaymentRefund
}

func (c *Context) GetPlatformPaymentChargeback() *PlatformPaymentChargeback {
	if c == nil {
		return nil
	}
	return c.PlatformPaymentChargeback
}

func (c *Context) GetReversedPlatformPaymentChargeback() *ReversedPlatformPaymentChargeback {
	if c == nil {
		return nil
	}
	return c.ReversedPlatformPaymentChargeback
}

func (c *Context) GetPaymentCommission() *PaymentCommission {
	if c == nil {
		return nil
	}
	return c.PaymentCommission
}

func (c *Context) GetReimbursementFee() *ReimbursementFee {
	if c == nil {
		return nil
	}
	return c.ReimbursementFee
}

func (c *Context) GetFailedPaymentFee() *FailedPaymentFee {
	if c == nil {
		return nil
	}
	return c.FailedPaymentFee
}

func (c *Context) GetPaymentFee() *PaymentFee {
	if c == nil {
		return nil
	}
	return c.PaymentFee
}

func (c *Context) GetManagedFee() *ManagedFee {
	if c == nil {
		return nil
	}
	return c.ManagedFee
}

func (c *Context) GetReturnedManagedFee() *ReturnedManagedFee {
	if c == nil {
		return nil
	}
	return c.ReturnedManagedFee
}

func (c *Context) GetPostPaymentSplitPayment() *PostPaymentSplitPayment {
	if c == nil {
		return nil
	}
	return c.PostPaymentSplitPayment
}

type EntityBalanceTransaction struct {
	// Indicates the response contains a balance transaction object. Will always contain the string `balance-transaction`
	// for this endpoint.
	Resource string                 `json:"resource"`
	ID       string                 `json:"id"`
	Type     BalanceTransactionType `json:"type"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	ResultAmount Amount `json:"resultAmount"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	InitialAmount Amount `json:"initialAmount"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Deductions *AmountNullable `json:"deductions,omitempty"`
	// Depending on the type of the balance transaction, we will try to give more context about the specific event that
	// triggered it. For example, the context object for a payment transaction will look like
	// `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo", "paymentDescription": "Description"}`.
	//
	// Below is a complete list of the context values that each type of transaction will have.
	//
	// * Type `payment`: `paymentId`, `paymentDescription`
	// * Type `capture`: `paymentId` `captureId`, `paymentDescription`, `captureDescription`
	// * Type `capture-commission`: `paymentId`, `paymentDescription`, `organizationId`
	// * Type `capture-rolling-reserve-release`: `paymentId`, `paymentDescription`, `captureId`, `captureDescription`
	// * Type `unauthorized-direct-debit`: `paymentId`, `paymentDescription`
	// * Type `failed-payment`: `paymentId`, `paymentDescription`
	// * Type `refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `returned-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `returned-refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `chargeback-reversal`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `reversed-chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `outgoing-transfer`: `settlementId` `transferId`
	// * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
	// * Type `returned-transfer`: `settlementId` `transferId`
	// * Type `invoice-compensation`: `invoiceId`
	// * Type `balance-correction`: none
	// * Type `application-fee`: `paymentId`, `paymentDescription`, `payingOwner`
	// * Type `split-payment`: `paymentId`, `paymentDescription`, `paymentOwner`
	// * Type `platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `returned-platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `reversed-platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `payment-commission`: `paymentId`, `paymentDescription`, `organizationId`
	// * Type `reimbursement-fee`: `paymentId`, `paymentDescription`
	// * Type `failed-payment-fee`: `paymentId`, `paymentDescription`
	// * Type `payment-fee`: `paymentId`, `paymentDescription`
	// * Type `cash-advance-loan`: none
	// * Type `platform-connected-organizations-fee`: none
	// * Type `managed-fee`: `feeType`, `<name of the fee>Id`
	// * Type `returned-managed-fee`:  `feeType`, `<name of the fee>Id`
	// * Type `topup`: none
	// * Type `balance-reserve`: none
	// * Type `balance-reserve-return`: none
	// * Type `movement`: none
	// * Type `post-payment-split-payment`: `paymentId`
	// * Type `cash-collateral-issuance`: none
	// * Type `cash-collateral-release`: none
	Context *Context `json:"context,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
}

func (e *EntityBalanceTransaction) GetResource() string {
	if e == nil {
		return ""
	}
	return e.Resource
}

func (e *EntityBalanceTransaction) GetID() string {
	if e == nil {
		return ""
	}
	return e.ID
}

func (e *EntityBalanceTransaction) GetType() BalanceTransactionType {
	if e == nil {
		return BalanceTransactionType("")
	}
	return e.Type
}

func (e *EntityBalanceTransaction) GetResultAmount() Amount {
	if e == nil {
		return Amount{}
	}
	return e.ResultAmount
}

func (e *EntityBalanceTransaction) GetInitialAmount() Amount {
	if e == nil {
		return Amount{}
	}
	return e.InitialAmount
}

func (e *EntityBalanceTransaction) GetDeductions() *AmountNullable {
	if e == nil {
		return nil
	}
	return e.Deductions
}

func (e *EntityBalanceTransaction) GetContext() *Context {
	if e == nil {
		return nil
	}
	return e.Context
}

func (e *EntityBalanceTransaction) GetCreatedAt() string {
	if e == nil {
		return ""
	}
	return e.CreatedAt
}
