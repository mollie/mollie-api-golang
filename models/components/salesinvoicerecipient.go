// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// SalesInvoiceRecipientType - The type of recipient, either `consumer` or `business`. This will determine what further fields are
// required on the `recipient` object.
type SalesInvoiceRecipientType string

const (
	SalesInvoiceRecipientTypeConsumer SalesInvoiceRecipientType = "consumer"
	SalesInvoiceRecipientTypeBusiness SalesInvoiceRecipientType = "business"
)

func (e SalesInvoiceRecipientType) ToPointer() *SalesInvoiceRecipientType {
	return &e
}
func (e *SalesInvoiceRecipientType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "business":
		*e = SalesInvoiceRecipientType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SalesInvoiceRecipientType: %v", v)
	}
}

// SalesInvoiceRecipientLocale - The locale for the recipient, to be used for translations in PDF generation and payment pages.
type SalesInvoiceRecipientLocale string

const (
	SalesInvoiceRecipientLocaleEnUs SalesInvoiceRecipientLocale = "en_US"
	SalesInvoiceRecipientLocaleEnGb SalesInvoiceRecipientLocale = "en_GB"
	SalesInvoiceRecipientLocaleNlNl SalesInvoiceRecipientLocale = "nl_NL"
	SalesInvoiceRecipientLocaleNlBe SalesInvoiceRecipientLocale = "nl_BE"
	SalesInvoiceRecipientLocaleDeDe SalesInvoiceRecipientLocale = "de_DE"
	SalesInvoiceRecipientLocaleDeAt SalesInvoiceRecipientLocale = "de_AT"
	SalesInvoiceRecipientLocaleDeCh SalesInvoiceRecipientLocale = "de_CH"
	SalesInvoiceRecipientLocaleFrFr SalesInvoiceRecipientLocale = "fr_FR"
	SalesInvoiceRecipientLocaleFrBe SalesInvoiceRecipientLocale = "fr_BE"
)

func (e SalesInvoiceRecipientLocale) ToPointer() *SalesInvoiceRecipientLocale {
	return &e
}
func (e *SalesInvoiceRecipientLocale) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		*e = SalesInvoiceRecipientLocale(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SalesInvoiceRecipientLocale: %v", v)
	}
}

type SalesInvoiceRecipient struct {
	// The type of recipient, either `consumer` or `business`. This will determine what further fields are
	// required on the `recipient` object.
	Type SalesInvoiceRecipientType `json:"type"`
	// The title of the `consumer` type recipient, for example Mr. or Mrs..
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain
	// only numbers.
	GivenName *string `json:"givenName,omitempty"`
	// The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain
	// only numbers.
	FamilyName *string `json:"familyName,omitempty"`
	// The trading name of the `business` type recipient.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber`
	// has to be provided.
	OrganizationNumber *string `json:"organizationNumber,omitempty"`
	// The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber`
	// has to be provided.
	VatNumber *string `json:"vatNumber,omitempty"`
	// The email address of the recipient.
	Email string `json:"email"`
	// The phone number of the recipient.
	Phone *string `json:"phone,omitempty"`
	// A street and street number.
	StreetAndNumber string `json:"streetAndNumber"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code.
	PostalCode string `json:"postalCode"`
	// The recipient's city.
	City string `json:"city"`
	// The recipient's region.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	Country string `json:"country"`
	// The locale for the recipient, to be used for translations in PDF generation and payment pages.
	Locale SalesInvoiceRecipientLocale `json:"locale"`
}

func (o *SalesInvoiceRecipient) GetType() SalesInvoiceRecipientType {
	if o == nil {
		return SalesInvoiceRecipientType("")
	}
	return o.Type
}

func (o *SalesInvoiceRecipient) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *SalesInvoiceRecipient) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *SalesInvoiceRecipient) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *SalesInvoiceRecipient) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *SalesInvoiceRecipient) GetOrganizationNumber() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationNumber
}

func (o *SalesInvoiceRecipient) GetVatNumber() *string {
	if o == nil {
		return nil
	}
	return o.VatNumber
}

func (o *SalesInvoiceRecipient) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *SalesInvoiceRecipient) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *SalesInvoiceRecipient) GetStreetAndNumber() string {
	if o == nil {
		return ""
	}
	return o.StreetAndNumber
}

func (o *SalesInvoiceRecipient) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *SalesInvoiceRecipient) GetPostalCode() string {
	if o == nil {
		return ""
	}
	return o.PostalCode
}

func (o *SalesInvoiceRecipient) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *SalesInvoiceRecipient) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *SalesInvoiceRecipient) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *SalesInvoiceRecipient) GetLocale() SalesInvoiceRecipientLocale {
	if o == nil {
		return SalesInvoiceRecipientLocale("")
	}
	return o.Locale
}
