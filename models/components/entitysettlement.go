// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// Rate - The service rates, further divided into `fixed` and `percentage` costs.
type Rate struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Fixed      *Amount `json:"fixed,omitempty"`
	Percentage *string `json:"percentage,omitempty"`
}

func (r *Rate) GetFixed() *Amount {
	if r == nil {
		return nil
	}
	return r.Fixed
}

func (r *Rate) GetPercentage() *string {
	if r == nil {
		return nil
	}
	return r.Percentage
}

type Cost struct {
	// A description of the cost subtotal
	Description string `json:"description"`
	// The payment method, if applicable
	Method *PaymentMethod `json:"method"`
	// The number of fees
	Count int64 `json:"count"`
	// The service rates, further divided into `fixed` and `percentage` costs.
	Rate Rate `json:"rate"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	AmountNet Amount `json:"amountNet"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	AmountVat *AmountNullable `json:"amountVat"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	AmountGross Amount `json:"amountGross"`
}

func (c *Cost) GetDescription() string {
	if c == nil {
		return ""
	}
	return c.Description
}

func (c *Cost) GetMethod() *PaymentMethod {
	if c == nil {
		return nil
	}
	return c.Method
}

func (c *Cost) GetCount() int64 {
	if c == nil {
		return 0
	}
	return c.Count
}

func (c *Cost) GetRate() Rate {
	if c == nil {
		return Rate{}
	}
	return c.Rate
}

func (c *Cost) GetAmountNet() Amount {
	if c == nil {
		return Amount{}
	}
	return c.AmountNet
}

func (c *Cost) GetAmountVat() *AmountNullable {
	if c == nil {
		return nil
	}
	return c.AmountVat
}

func (c *Cost) GetAmountGross() Amount {
	if c == nil {
		return Amount{}
	}
	return c.AmountGross
}

type Revenue struct {
	// A description of the revenue subtotal
	Description string `json:"description"`
	// The payment method, if applicable
	Method *PaymentMethod `json:"method"`
	// The number of payments
	Count int64 `json:"count"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	AmountNet Amount `json:"amountNet"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	AmountVat *AmountNullable `json:"amountVat"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	AmountGross Amount `json:"amountGross"`
}

func (r *Revenue) GetDescription() string {
	if r == nil {
		return ""
	}
	return r.Description
}

func (r *Revenue) GetMethod() *PaymentMethod {
	if r == nil {
		return nil
	}
	return r.Method
}

func (r *Revenue) GetCount() int64 {
	if r == nil {
		return 0
	}
	return r.Count
}

func (r *Revenue) GetAmountNet() Amount {
	if r == nil {
		return Amount{}
	}
	return r.AmountNet
}

func (r *Revenue) GetAmountVat() *AmountNullable {
	if r == nil {
		return nil
	}
	return r.AmountVat
}

func (r *Revenue) GetAmountGross() Amount {
	if r == nil {
		return Amount{}
	}
	return r.AmountGross
}

type Periods struct {
	// An array of cost objects, describing the fees withheld for each payment method during this period.
	Costs []Cost `json:"costs,omitempty"`
	// An array of revenue objects containing the total revenue for each payment method during this period.
	Revenue   []Revenue `json:"revenue,omitempty"`
	InvoiceID *string   `json:"invoiceId,omitempty"`
	// The invoice reference, if the invoice has been created already.
	InvoiceReference *string `json:"invoiceReference,omitempty"`
}

func (p *Periods) GetCosts() []Cost {
	if p == nil {
		return nil
	}
	return p.Costs
}

func (p *Periods) GetRevenue() []Revenue {
	if p == nil {
		return nil
	}
	return p.Revenue
}

func (p *Periods) GetInvoiceID() *string {
	if p == nil {
		return nil
	}
	return p.InvoiceID
}

func (p *Periods) GetInvoiceReference() *string {
	if p == nil {
		return nil
	}
	return p.InvoiceReference
}

// EntitySettlementLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type EntitySettlementLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self URLObj `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Payments *URLObj `json:"payments,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Captures *URLObj `json:"captures,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Refunds *URLObj `json:"refunds,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Chargebacks *URLObj `json:"chargebacks,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Invoice *URLNullable `json:"invoice,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *URLObj `json:"documentation,omitempty"`
}

func (e *EntitySettlementLinks) GetSelf() URLObj {
	if e == nil {
		return URLObj{}
	}
	return e.Self
}

func (e *EntitySettlementLinks) GetPayments() *URLObj {
	if e == nil {
		return nil
	}
	return e.Payments
}

func (e *EntitySettlementLinks) GetCaptures() *URLObj {
	if e == nil {
		return nil
	}
	return e.Captures
}

func (e *EntitySettlementLinks) GetRefunds() *URLObj {
	if e == nil {
		return nil
	}
	return e.Refunds
}

func (e *EntitySettlementLinks) GetChargebacks() *URLObj {
	if e == nil {
		return nil
	}
	return e.Chargebacks
}

func (e *EntitySettlementLinks) GetInvoice() *URLNullable {
	if e == nil {
		return nil
	}
	return e.Invoice
}

func (e *EntitySettlementLinks) GetDocumentation() *URLObj {
	if e == nil {
		return nil
	}
	return e.Documentation
}

type EntitySettlement struct {
	// Indicates the response contains a settlement object. Will always contain the string `settlement` for this
	// endpoint.
	Resource string `json:"resource"`
	ID       string `json:"id"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The settlement's bank reference, as found in your Mollie account and on your bank statement.
	Reference *string `json:"reference,omitempty"`
	// The date on which the settlement was settled, in ISO 8601 format.
	//
	// For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement
	// date is available.
	SettledAt *string `json:"settledAt,omitempty"`
	// The status of the settlement.
	Status SettlementStatus `json:"status"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    Amount  `json:"amount"`
	BalanceID string  `json:"balanceId"`
	InvoiceID *string `json:"invoiceId,omitempty"`
	// For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
	// transactions are grouped into 'period' objects â€” one for each calendar month.
	//
	// For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
	// all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
	//
	// Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
	// look as follows: `{"2024": {"04": {...}, "05": {...}}}`. The year and month in this documentation are referred as `<year>` and `<month>`.
	//
	// The example response should give a good idea of what this looks like in practise.
	Periods map[string]map[string]Periods `json:"periods,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links EntitySettlementLinks `json:"_links"`
}

func (e *EntitySettlement) GetResource() string {
	if e == nil {
		return ""
	}
	return e.Resource
}

func (e *EntitySettlement) GetID() string {
	if e == nil {
		return ""
	}
	return e.ID
}

func (e *EntitySettlement) GetCreatedAt() *string {
	if e == nil {
		return nil
	}
	return e.CreatedAt
}

func (e *EntitySettlement) GetReference() *string {
	if e == nil {
		return nil
	}
	return e.Reference
}

func (e *EntitySettlement) GetSettledAt() *string {
	if e == nil {
		return nil
	}
	return e.SettledAt
}

func (e *EntitySettlement) GetStatus() SettlementStatus {
	if e == nil {
		return SettlementStatus("")
	}
	return e.Status
}

func (e *EntitySettlement) GetAmount() Amount {
	if e == nil {
		return Amount{}
	}
	return e.Amount
}

func (e *EntitySettlement) GetBalanceID() string {
	if e == nil {
		return ""
	}
	return e.BalanceID
}

func (e *EntitySettlement) GetInvoiceID() *string {
	if e == nil {
		return nil
	}
	return e.InvoiceID
}

func (e *EntitySettlement) GetPeriods() map[string]map[string]Periods {
	if e == nil {
		return nil
	}
	return e.Periods
}

func (e *EntitySettlement) GetLinks() EntitySettlementLinks {
	if e == nil {
		return EntitySettlementLinks{}
	}
	return e.Links
}
