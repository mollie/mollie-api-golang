// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type EntityCapabilityStatus string

const (
	EntityCapabilityStatusUnrequested EntityCapabilityStatus = "unrequested"
	EntityCapabilityStatusEnabled     EntityCapabilityStatus = "enabled"
	EntityCapabilityStatusDisabled    EntityCapabilityStatus = "disabled"
	EntityCapabilityStatusPending     EntityCapabilityStatus = "pending"
)

func (e EntityCapabilityStatus) ToPointer() *EntityCapabilityStatus {
	return &e
}
func (e *EntityCapabilityStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unrequested":
		fallthrough
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "pending":
		*e = EntityCapabilityStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityCapabilityStatus: %v", v)
	}
}

type StatusReasonEnum string

const (
	StatusReasonEnumRequirementPastDue          StatusReasonEnum = "requirement-past-due"
	StatusReasonEnumOnboardingInformationNeeded StatusReasonEnum = "onboarding-information-needed"
)

func (e StatusReasonEnum) ToPointer() *StatusReasonEnum {
	return &e
}
func (e *StatusReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "requirement-past-due":
		fallthrough
	case "onboarding-information-needed":
		*e = StatusReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatusReasonEnum: %v", v)
	}
}

type EntityCapability struct {
	// Always the word `capability` for this resource type.
	Resource *string `json:"resource,omitempty"`
	// A unique name for this capability like `payments` / `settlements`.
	Name         *string                       `json:"name,omitempty"`
	Status       *EntityCapabilityStatus       `json:"status,omitempty"`
	StatusReason *StatusReasonEnum             `json:"statusReason,omitempty"`
	Requirements []EntityCapabilityRequirement `json:"requirements,omitempty"`
}

func (o *EntityCapability) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *EntityCapability) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EntityCapability) GetStatus() *EntityCapabilityStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *EntityCapability) GetStatusReason() *StatusReasonEnum {
	if o == nil {
		return nil
	}
	return o.StatusReason
}

func (o *EntityCapability) GetRequirements() []EntityCapabilityRequirement {
	if o == nil {
		return nil
	}
	return o.Requirements
}
