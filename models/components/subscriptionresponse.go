// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// SubscriptionResponseApplicationFee - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
//
// Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
// information.
type SubscriptionResponseApplicationFee struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount      Amount `json:"amount"`
	Description string `json:"description"`
}

func (s *SubscriptionResponseApplicationFee) GetAmount() Amount {
	if s == nil {
		return Amount{}
	}
	return s.Amount
}

func (s *SubscriptionResponseApplicationFee) GetDescription() string {
	if s == nil {
		return ""
	}
	return s.Description
}

// SubscriptionResponseLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type SubscriptionResponseLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self URLObj `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Customer *URLNullable `json:"customer"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Mandate *URLNullable `json:"mandate,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Profile *URLNullable `json:"profile"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Payments *URLNullable `json:"payments,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation URLObj `json:"documentation"`
}

func (s *SubscriptionResponseLinks) GetSelf() URLObj {
	if s == nil {
		return URLObj{}
	}
	return s.Self
}

func (s *SubscriptionResponseLinks) GetCustomer() *URLNullable {
	if s == nil {
		return nil
	}
	return s.Customer
}

func (s *SubscriptionResponseLinks) GetMandate() *URLNullable {
	if s == nil {
		return nil
	}
	return s.Mandate
}

func (s *SubscriptionResponseLinks) GetProfile() *URLNullable {
	if s == nil {
		return nil
	}
	return s.Profile
}

func (s *SubscriptionResponseLinks) GetPayments() *URLNullable {
	if s == nil {
		return nil
	}
	return s.Payments
}

func (s *SubscriptionResponseLinks) GetDocumentation() URLObj {
	if s == nil {
		return URLObj{}
	}
	return s.Documentation
}

type SubscriptionResponse struct {
	// Indicates the response contains a subscription object. Will always contain the string `subscription` for this
	// endpoint.
	Resource *string `json:"resource,omitempty"`
	ID       *string `json:"id,omitempty"`
	// Whether this entity was created in live mode or in test mode.
	Mode *Mode `json:"mode,omitempty"`
	// The subscription's current status is directly related to the status of the underlying customer or mandate that is
	// enabling the subscription.
	Status *SubscriptionStatus `json:"status,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount *Amount `json:"amount,omitempty"`
	// Total number of payments for the subscription. Once this number of payments is reached, the subscription is
	// considered completed.
	//
	// Test mode subscriptions will get canceled automatically after 10 payments.
	Times *int64 `json:"times,omitempty"`
	// Number of payments left for the subscription.
	TimesRemaining *int64 `json:"timesRemaining,omitempty"`
	// Interval to wait between payments, for example `1 month` or `14 days`.
	//
	// The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval *string `json:"interval,omitempty"`
	// The start date of the subscription in `YYYY-MM-DD` format.
	StartDate *string `json:"startDate,omitempty"`
	// The date of the next scheduled payment in `YYYY-MM-DD` format. If the subscription has been completed or canceled,
	// this parameter will not be returned.
	NextPaymentDate *string `json:"nextPaymentDate,omitempty"`
	// The subscription's description will be used as the description of the resulting individual payments and so showing
	// up on the bank statement of the consumer.
	//
	// **Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
	Description *string `json:"description,omitempty"`
	// The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
	Method *SubscriptionMethodResponse `json:"method,omitempty"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
	//
	// Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
	// information.
	ApplicationFee *SubscriptionResponseApplicationFee `json:"applicationFee,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *Metadata `json:"metadata,omitempty"`
	// We will call this URL for any payment status changes of payments resulting from this subscription.
	//
	// This webhook will receive **all** events for the subscription's payments. This may include payment failures as
	// well. Be sure to verify the payment's subscription ID and its status.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	CustomerID *string `json:"customerId,omitempty"`
	MandateID  *string `json:"mandateId,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The subscription's date and time of cancellation, in ISO 8601 format. This parameter is omitted if the
	// subscription is not canceled (yet).
	CanceledAt *string `json:"canceledAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *SubscriptionResponseLinks `json:"_links,omitempty"`
}

func (s *SubscriptionResponse) GetResource() *string {
	if s == nil {
		return nil
	}
	return s.Resource
}

func (s *SubscriptionResponse) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SubscriptionResponse) GetMode() *Mode {
	if s == nil {
		return nil
	}
	return s.Mode
}

func (s *SubscriptionResponse) GetStatus() *SubscriptionStatus {
	if s == nil {
		return nil
	}
	return s.Status
}

func (s *SubscriptionResponse) GetAmount() *Amount {
	if s == nil {
		return nil
	}
	return s.Amount
}

func (s *SubscriptionResponse) GetTimes() *int64 {
	if s == nil {
		return nil
	}
	return s.Times
}

func (s *SubscriptionResponse) GetTimesRemaining() *int64 {
	if s == nil {
		return nil
	}
	return s.TimesRemaining
}

func (s *SubscriptionResponse) GetInterval() *string {
	if s == nil {
		return nil
	}
	return s.Interval
}

func (s *SubscriptionResponse) GetStartDate() *string {
	if s == nil {
		return nil
	}
	return s.StartDate
}

func (s *SubscriptionResponse) GetNextPaymentDate() *string {
	if s == nil {
		return nil
	}
	return s.NextPaymentDate
}

func (s *SubscriptionResponse) GetDescription() *string {
	if s == nil {
		return nil
	}
	return s.Description
}

func (s *SubscriptionResponse) GetMethod() *SubscriptionMethodResponse {
	if s == nil {
		return nil
	}
	return s.Method
}

func (s *SubscriptionResponse) GetApplicationFee() *SubscriptionResponseApplicationFee {
	if s == nil {
		return nil
	}
	return s.ApplicationFee
}

func (s *SubscriptionResponse) GetMetadata() *Metadata {
	if s == nil {
		return nil
	}
	return s.Metadata
}

func (s *SubscriptionResponse) GetWebhookURL() *string {
	if s == nil {
		return nil
	}
	return s.WebhookURL
}

func (s *SubscriptionResponse) GetCustomerID() *string {
	if s == nil {
		return nil
	}
	return s.CustomerID
}

func (s *SubscriptionResponse) GetMandateID() *string {
	if s == nil {
		return nil
	}
	return s.MandateID
}

func (s *SubscriptionResponse) GetCreatedAt() *string {
	if s == nil {
		return nil
	}
	return s.CreatedAt
}

func (s *SubscriptionResponse) GetCanceledAt() *string {
	if s == nil {
		return nil
	}
	return s.CanceledAt
}

func (s *SubscriptionResponse) GetLinks() *SubscriptionResponseLinks {
	if s == nil {
		return nil
	}
	return s.Links
}
