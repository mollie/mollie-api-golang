// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/mollie/mollie-api-golang/internal/utils"
)

// Review - Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved
// automatically, unless a switch to a live profile has been requested. The review object will therefore usually be
// `null` in test mode.
type Review struct {
	// The status of the requested changes.
	Status *ProfileReviewStatusResponse `json:"status,omitempty"`
}

func (r Review) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *Review) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (r *Review) GetStatus() *ProfileReviewStatusResponse {
	if r == nil {
		return nil
	}
	return r.Status
}

// EntityProfileResponseLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type EntityProfileResponseLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *URLObj `json:"self,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Dashboard *URLObj `json:"dashboard,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Chargebacks *URLObj `json:"chargebacks,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Methods *URLObj `json:"methods,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Payments *URLObj `json:"payments,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Refunds *URLObj `json:"refunds,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	CheckoutPreviewURL *URLObj `json:"checkoutPreviewUrl,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *URLObj `json:"documentation,omitempty"`
}

func (e EntityProfileResponseLinks) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityProfileResponseLinks) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (e *EntityProfileResponseLinks) GetSelf() *URLObj {
	if e == nil {
		return nil
	}
	return e.Self
}

func (e *EntityProfileResponseLinks) GetDashboard() *URLObj {
	if e == nil {
		return nil
	}
	return e.Dashboard
}

func (e *EntityProfileResponseLinks) GetChargebacks() *URLObj {
	if e == nil {
		return nil
	}
	return e.Chargebacks
}

func (e *EntityProfileResponseLinks) GetMethods() *URLObj {
	if e == nil {
		return nil
	}
	return e.Methods
}

func (e *EntityProfileResponseLinks) GetPayments() *URLObj {
	if e == nil {
		return nil
	}
	return e.Payments
}

func (e *EntityProfileResponseLinks) GetRefunds() *URLObj {
	if e == nil {
		return nil
	}
	return e.Refunds
}

func (e *EntityProfileResponseLinks) GetCheckoutPreviewURL() *URLObj {
	if e == nil {
		return nil
	}
	return e.CheckoutPreviewURL
}

func (e *EntityProfileResponseLinks) GetDocumentation() *URLObj {
	if e == nil {
		return nil
	}
	return e.Documentation
}

type EntityProfileResponse struct {
	// Indicates the response contains a profile object. Will always contain the string `profile` for this endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this profile. Example: `pfl_v9hTwCvYqw`.
	ID *string `json:"id,omitempty"`
	// Whether this entity was created in live mode or in test mode.
	Mode *Mode `json:"mode,omitempty"`
	// The profile's name, this will usually reflect the trade name or brand name of the profile's website or
	// application.
	Name *string `json:"name,omitempty"`
	// The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are
	// allowed.
	Website *string `json:"website,omitempty"`
	// The email address associated with the profile's trade name or brand.
	Email *string `json:"email,omitempty"`
	// The phone number associated with the profile's trade name or brand.
	Phone *string `json:"phone,omitempty"`
	// The products or services offered by the profile's website or application.
	Description *string `json:"description,omitempty"`
	// A list of countries where you expect that the majority of the profile's customers reside,
	// in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	CountriesOfActivity []string `json:"countriesOfActivity,omitempty"`
	// The industry associated with the profile's trade name or brand. Please refer to the
	// [business category list](common-data-types#business-category) for all possible options.
	BusinessCategory *string `json:"businessCategory,omitempty"`
	// The profile status determines whether the profile is able to receive live payments.
	//
	// * `unverified`: The profile has not been verified yet and can only be used to create test payments.
	// * `verified`: The profile has been verified and can be used to create live payments and test payments.
	// * `blocked`: The profile is blocked and can no longer be used or changed.
	Status *ProfileStatus `json:"status,omitempty"`
	// Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved
	// automatically, unless a switch to a live profile has been requested. The review object will therefore usually be
	// `null` in test mode.
	Review *Review `json:"review,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *EntityProfileResponseLinks `json:"_links,omitempty"`
}

func (e EntityProfileResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityProfileResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (e *EntityProfileResponse) GetResource() *string {
	if e == nil {
		return nil
	}
	return e.Resource
}

func (e *EntityProfileResponse) GetID() *string {
	if e == nil {
		return nil
	}
	return e.ID
}

func (e *EntityProfileResponse) GetMode() *Mode {
	if e == nil {
		return nil
	}
	return e.Mode
}

func (e *EntityProfileResponse) GetName() *string {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *EntityProfileResponse) GetWebsite() *string {
	if e == nil {
		return nil
	}
	return e.Website
}

func (e *EntityProfileResponse) GetEmail() *string {
	if e == nil {
		return nil
	}
	return e.Email
}

func (e *EntityProfileResponse) GetPhone() *string {
	if e == nil {
		return nil
	}
	return e.Phone
}

func (e *EntityProfileResponse) GetDescription() *string {
	if e == nil {
		return nil
	}
	return e.Description
}

func (e *EntityProfileResponse) GetCountriesOfActivity() []string {
	if e == nil {
		return nil
	}
	return e.CountriesOfActivity
}

func (e *EntityProfileResponse) GetBusinessCategory() *string {
	if e == nil {
		return nil
	}
	return e.BusinessCategory
}

func (e *EntityProfileResponse) GetStatus() *ProfileStatus {
	if e == nil {
		return nil
	}
	return e.Status
}

func (e *EntityProfileResponse) GetReview() *Review {
	if e == nil {
		return nil
	}
	return e.Review
}

func (e *EntityProfileResponse) GetCreatedAt() *string {
	if e == nil {
		return nil
	}
	return e.CreatedAt
}

func (e *EntityProfileResponse) GetLinks() *EntityProfileResponseLinks {
	if e == nil {
		return nil
	}
	return e.Links
}
