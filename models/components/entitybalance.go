// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// EntityBalanceStatus - The status of the balance.
type EntityBalanceStatus string

const (
	EntityBalanceStatusActive   EntityBalanceStatus = "active"
	EntityBalanceStatusInactive EntityBalanceStatus = "inactive"
)

func (e EntityBalanceStatus) ToPointer() *EntityBalanceStatus {
	return &e
}
func (e *EntityBalanceStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		*e = EntityBalanceStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityBalanceStatus: %v", v)
	}
}

// TransferFrequency - The frequency with which the available amount on the balance will be settled to the configured transfer
// destination.
//
// Settlements created during weekends or on bank holidays will take place on the next business day.
type TransferFrequency string

const (
	TransferFrequencyDaily          TransferFrequency = "daily"
	TransferFrequencyEveryMonday    TransferFrequency = "every-monday"
	TransferFrequencyEveryTuesday   TransferFrequency = "every-tuesday"
	TransferFrequencyEveryWednesday TransferFrequency = "every-wednesday"
	TransferFrequencyEveryThursday  TransferFrequency = "every-thursday"
	TransferFrequencyEveryFriday    TransferFrequency = "every-friday"
	TransferFrequencyMonthly        TransferFrequency = "monthly"
	TransferFrequencyNever          TransferFrequency = "never"
)

func (e TransferFrequency) ToPointer() *TransferFrequency {
	return &e
}
func (e *TransferFrequency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "daily":
		fallthrough
	case "every-monday":
		fallthrough
	case "every-tuesday":
		fallthrough
	case "every-wednesday":
		fallthrough
	case "every-thursday":
		fallthrough
	case "every-friday":
		fallthrough
	case "monthly":
		fallthrough
	case "never":
		*e = TransferFrequency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferFrequency: %v", v)
	}
}

// EntityBalanceType - The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
//
// * `bank-account` — Transfer the balance amount to an external bank account
type EntityBalanceType string

const (
	EntityBalanceTypeBankAccount EntityBalanceType = "bank-account"
)

func (e EntityBalanceType) ToPointer() *EntityBalanceType {
	return &e
}
func (e *EntityBalanceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bank-account":
		*e = EntityBalanceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityBalanceType: %v", v)
	}
}

// TransferDestination - The destination where the available amount will be automatically transferred to according to the configured
// transfer frequency.
type TransferDestination struct {
	// The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
	//
	// * `bank-account` — Transfer the balance amount to an external bank account
	Type *EntityBalanceType `json:"type,omitempty"`
	// The configured bank account number of the beneficiary the balance amount is to be transferred to.
	BankAccount *string `json:"bankAccount,omitempty"`
	// The full name of the beneficiary the balance amount is to be transferred to.
	BeneficiaryName *string `json:"beneficiaryName,omitempty"`
}

func (o *TransferDestination) GetType() *EntityBalanceType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *TransferDestination) GetBankAccount() *string {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *TransferDestination) GetBeneficiaryName() *string {
	if o == nil {
		return nil
	}
	return o.BeneficiaryName
}

// EntityBalanceLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type EntityBalanceLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *URLObj `json:"self,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *URLObj `json:"documentation,omitempty"`
}

func (o *EntityBalanceLinks) GetSelf() *URLObj {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *EntityBalanceLinks) GetDocumentation() *URLObj {
	if o == nil {
		return nil
	}
	return o.Documentation
}

type EntityBalance struct {
	// Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
	Resource *string `json:"resource,omitempty"`
	ID       *string `json:"id,omitempty"`
	// Whether this entity was created in live mode or in test mode.
	Mode *Mode `json:"mode,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string     `json:"createdAt,omitempty"`
	Currency  *Currencies `json:"currency,omitempty"`
	// The description or name of the balance. Can be used to denote the purpose of the balance.
	Description *string `json:"description,omitempty"`
	// The status of the balance.
	Status *EntityBalanceStatus `json:"status,omitempty"`
	// The frequency with which the available amount on the balance will be settled to the configured transfer
	// destination.
	//
	// Settlements created during weekends or on bank holidays will take place on the next business day.
	TransferFrequency *TransferFrequency `json:"transferFrequency,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	TransferThreshold *Amount `json:"transferThreshold,omitempty"`
	// The transfer reference set to be included in all the transfers for this balance.
	TransferReference *string `json:"transferReference,omitempty"`
	// The destination where the available amount will be automatically transferred to according to the configured
	// transfer frequency.
	TransferDestination *TransferDestination `json:"transferDestination,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	AvailableAmount *Amount `json:"availableAmount,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	PendingAmount *Amount `json:"pendingAmount,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *EntityBalanceLinks `json:"_links,omitempty"`
}

func (o *EntityBalance) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *EntityBalance) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EntityBalance) GetMode() *Mode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *EntityBalance) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *EntityBalance) GetCurrency() *Currencies {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *EntityBalance) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *EntityBalance) GetStatus() *EntityBalanceStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *EntityBalance) GetTransferFrequency() *TransferFrequency {
	if o == nil {
		return nil
	}
	return o.TransferFrequency
}

func (o *EntityBalance) GetTransferThreshold() *Amount {
	if o == nil {
		return nil
	}
	return o.TransferThreshold
}

func (o *EntityBalance) GetTransferReference() *string {
	if o == nil {
		return nil
	}
	return o.TransferReference
}

func (o *EntityBalance) GetTransferDestination() *TransferDestination {
	if o == nil {
		return nil
	}
	return o.TransferDestination
}

func (o *EntityBalance) GetAvailableAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.AvailableAmount
}

func (o *EntityBalance) GetPendingAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.PendingAmount
}

func (o *EntityBalance) GetLinks() *EntityBalanceLinks {
	if o == nil {
		return nil
	}
	return o.Links
}
