// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// GetPrimaryBalanceMode - Whether this entity was created in live mode or in test mode.
type GetPrimaryBalanceMode string

const (
	GetPrimaryBalanceModeLive GetPrimaryBalanceMode = "live"
	GetPrimaryBalanceModeTest GetPrimaryBalanceMode = "test"
)

func (e GetPrimaryBalanceMode) ToPointer() *GetPrimaryBalanceMode {
	return &e
}
func (e *GetPrimaryBalanceMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = GetPrimaryBalanceMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPrimaryBalanceMode: %v", v)
	}
}

// GetPrimaryBalanceCurrency - The balance's ISO 4217 currency code.
type GetPrimaryBalanceCurrency string

const (
	GetPrimaryBalanceCurrencyEur GetPrimaryBalanceCurrency = "EUR"
	GetPrimaryBalanceCurrencyGbp GetPrimaryBalanceCurrency = "GBP"
	GetPrimaryBalanceCurrencyChf GetPrimaryBalanceCurrency = "CHF"
	GetPrimaryBalanceCurrencyDkk GetPrimaryBalanceCurrency = "DKK"
	GetPrimaryBalanceCurrencyNok GetPrimaryBalanceCurrency = "NOK"
	GetPrimaryBalanceCurrencyPln GetPrimaryBalanceCurrency = "PLN"
	GetPrimaryBalanceCurrencySek GetPrimaryBalanceCurrency = "SEK"
	GetPrimaryBalanceCurrencyUsd GetPrimaryBalanceCurrency = "USD"
	GetPrimaryBalanceCurrencyCzk GetPrimaryBalanceCurrency = "CZK"
	GetPrimaryBalanceCurrencyHuf GetPrimaryBalanceCurrency = "HUF"
	GetPrimaryBalanceCurrencyAud GetPrimaryBalanceCurrency = "AUD"
	GetPrimaryBalanceCurrencyCad GetPrimaryBalanceCurrency = "CAD"
)

func (e GetPrimaryBalanceCurrency) ToPointer() *GetPrimaryBalanceCurrency {
	return &e
}
func (e *GetPrimaryBalanceCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "CHF":
		fallthrough
	case "DKK":
		fallthrough
	case "NOK":
		fallthrough
	case "PLN":
		fallthrough
	case "SEK":
		fallthrough
	case "USD":
		fallthrough
	case "CZK":
		fallthrough
	case "HUF":
		fallthrough
	case "AUD":
		fallthrough
	case "CAD":
		*e = GetPrimaryBalanceCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPrimaryBalanceCurrency: %v", v)
	}
}

// GetPrimaryBalanceStatus - The status of the balance.
type GetPrimaryBalanceStatus string

const (
	GetPrimaryBalanceStatusActive   GetPrimaryBalanceStatus = "active"
	GetPrimaryBalanceStatusInactive GetPrimaryBalanceStatus = "inactive"
)

func (e GetPrimaryBalanceStatus) ToPointer() *GetPrimaryBalanceStatus {
	return &e
}
func (e *GetPrimaryBalanceStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		*e = GetPrimaryBalanceStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPrimaryBalanceStatus: %v", v)
	}
}

// GetPrimaryBalanceTransferFrequency - The frequency with which the available amount on the balance will be settled to the configured transfer
// destination.
//
// Settlements created during weekends or on bank holidays will take place on the next business day.
type GetPrimaryBalanceTransferFrequency string

const (
	GetPrimaryBalanceTransferFrequencyDaily          GetPrimaryBalanceTransferFrequency = "daily"
	GetPrimaryBalanceTransferFrequencyEveryMonday    GetPrimaryBalanceTransferFrequency = "every-monday"
	GetPrimaryBalanceTransferFrequencyEveryTuesday   GetPrimaryBalanceTransferFrequency = "every-tuesday"
	GetPrimaryBalanceTransferFrequencyEveryWednesday GetPrimaryBalanceTransferFrequency = "every-wednesday"
	GetPrimaryBalanceTransferFrequencyEveryThursday  GetPrimaryBalanceTransferFrequency = "every-thursday"
	GetPrimaryBalanceTransferFrequencyEveryFriday    GetPrimaryBalanceTransferFrequency = "every-friday"
	GetPrimaryBalanceTransferFrequencyMonthly        GetPrimaryBalanceTransferFrequency = "monthly"
	GetPrimaryBalanceTransferFrequencyNever          GetPrimaryBalanceTransferFrequency = "never"
)

func (e GetPrimaryBalanceTransferFrequency) ToPointer() *GetPrimaryBalanceTransferFrequency {
	return &e
}
func (e *GetPrimaryBalanceTransferFrequency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "daily":
		fallthrough
	case "every-monday":
		fallthrough
	case "every-tuesday":
		fallthrough
	case "every-wednesday":
		fallthrough
	case "every-thursday":
		fallthrough
	case "every-friday":
		fallthrough
	case "monthly":
		fallthrough
	case "never":
		*e = GetPrimaryBalanceTransferFrequency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPrimaryBalanceTransferFrequency: %v", v)
	}
}

// GetPrimaryBalanceTransferThreshold - The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds
// this threshold, the complete balance will be paid out to the transfer destination according to the configured
// frequency.
type GetPrimaryBalanceTransferThreshold struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPrimaryBalanceTransferThreshold) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPrimaryBalanceTransferThreshold) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPrimaryBalanceType - The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
//
// * `bank-account` — Transfer the balance amount to an external bank account
type GetPrimaryBalanceType string

const (
	GetPrimaryBalanceTypeBankAccount GetPrimaryBalanceType = "bank-account"
)

func (e GetPrimaryBalanceType) ToPointer() *GetPrimaryBalanceType {
	return &e
}
func (e *GetPrimaryBalanceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bank-account":
		*e = GetPrimaryBalanceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPrimaryBalanceType: %v", v)
	}
}

// GetPrimaryBalanceTransferDestination - The destination where the available amount will be automatically transferred to according to the configured
// transfer frequency.
type GetPrimaryBalanceTransferDestination struct {
	// The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
	//
	// * `bank-account` — Transfer the balance amount to an external bank account
	Type *GetPrimaryBalanceType `json:"type,omitempty"`
	// The configured bank account number of the beneficiary the balance amount is to be transferred to.
	BankAccount *string `json:"bankAccount,omitempty"`
	// The full name of the beneficiary the balance amount is to be transferred to.
	BeneficiaryName *string `json:"beneficiaryName,omitempty"`
}

func (o *GetPrimaryBalanceTransferDestination) GetType() *GetPrimaryBalanceType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetPrimaryBalanceTransferDestination) GetBankAccount() *string {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *GetPrimaryBalanceTransferDestination) GetBeneficiaryName() *string {
	if o == nil {
		return nil
	}
	return o.BeneficiaryName
}

// GetPrimaryBalanceAvailableAmount - The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
type GetPrimaryBalanceAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPrimaryBalanceAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPrimaryBalanceAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPrimaryBalancePendingAmount - The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a
// few days to clear.
type GetPrimaryBalancePendingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPrimaryBalancePendingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPrimaryBalancePendingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPrimaryBalanceSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetPrimaryBalanceSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPrimaryBalanceSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPrimaryBalanceSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPrimaryBalanceDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetPrimaryBalanceDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPrimaryBalanceDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPrimaryBalanceDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPrimaryBalanceLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetPrimaryBalanceLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *GetPrimaryBalanceSelf `json:"self,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *GetPrimaryBalanceDocumentation `json:"documentation,omitempty"`
}

func (o *GetPrimaryBalanceLinks) GetSelf() *GetPrimaryBalanceSelf {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *GetPrimaryBalanceLinks) GetDocumentation() *GetPrimaryBalanceDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

// GetPrimaryBalanceResponseBody - The primary balance object.
type GetPrimaryBalanceResponseBody struct {
	// Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this balance.
	ID *string `json:"id,omitempty"`
	// Whether this entity was created in live mode or in test mode.
	Mode *GetPrimaryBalanceMode `json:"mode,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The balance's ISO 4217 currency code.
	Currency *GetPrimaryBalanceCurrency `json:"currency,omitempty"`
	// The description or name of the balance. Can be used to denote the purpose of the balance.
	Description *string `json:"description,omitempty"`
	// The status of the balance.
	Status *GetPrimaryBalanceStatus `json:"status,omitempty"`
	// The frequency with which the available amount on the balance will be settled to the configured transfer
	// destination.
	//
	// Settlements created during weekends or on bank holidays will take place on the next business day.
	TransferFrequency *GetPrimaryBalanceTransferFrequency `json:"transferFrequency,omitempty"`
	// The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds
	// this threshold, the complete balance will be paid out to the transfer destination according to the configured
	// frequency.
	TransferThreshold *GetPrimaryBalanceTransferThreshold `json:"transferThreshold,omitempty"`
	// The transfer reference set to be included in all the transfers for this balance.
	TransferReference *string `json:"transferReference,omitempty"`
	// The destination where the available amount will be automatically transferred to according to the configured
	// transfer frequency.
	TransferDestination *GetPrimaryBalanceTransferDestination `json:"transferDestination,omitempty"`
	// The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
	AvailableAmount *GetPrimaryBalanceAvailableAmount `json:"availableAmount,omitempty"`
	// The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a
	// few days to clear.
	PendingAmount *GetPrimaryBalancePendingAmount `json:"pendingAmount,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *GetPrimaryBalanceLinks `json:"_links,omitempty"`
}

func (o *GetPrimaryBalanceResponseBody) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *GetPrimaryBalanceResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetPrimaryBalanceResponseBody) GetMode() *GetPrimaryBalanceMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *GetPrimaryBalanceResponseBody) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetPrimaryBalanceResponseBody) GetCurrency() *GetPrimaryBalanceCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *GetPrimaryBalanceResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetPrimaryBalanceResponseBody) GetStatus() *GetPrimaryBalanceStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetPrimaryBalanceResponseBody) GetTransferFrequency() *GetPrimaryBalanceTransferFrequency {
	if o == nil {
		return nil
	}
	return o.TransferFrequency
}

func (o *GetPrimaryBalanceResponseBody) GetTransferThreshold() *GetPrimaryBalanceTransferThreshold {
	if o == nil {
		return nil
	}
	return o.TransferThreshold
}

func (o *GetPrimaryBalanceResponseBody) GetTransferReference() *string {
	if o == nil {
		return nil
	}
	return o.TransferReference
}

func (o *GetPrimaryBalanceResponseBody) GetTransferDestination() *GetPrimaryBalanceTransferDestination {
	if o == nil {
		return nil
	}
	return o.TransferDestination
}

func (o *GetPrimaryBalanceResponseBody) GetAvailableAmount() *GetPrimaryBalanceAvailableAmount {
	if o == nil {
		return nil
	}
	return o.AvailableAmount
}

func (o *GetPrimaryBalanceResponseBody) GetPendingAmount() *GetPrimaryBalancePendingAmount {
	if o == nil {
		return nil
	}
	return o.PendingAmount
}

func (o *GetPrimaryBalanceResponseBody) GetLinks() *GetPrimaryBalanceLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type GetPrimaryBalanceResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The primary balance object.
	Object *GetPrimaryBalanceResponseBody
}

func (o *GetPrimaryBalanceResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetPrimaryBalanceResponse) GetObject() *GetPrimaryBalanceResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
