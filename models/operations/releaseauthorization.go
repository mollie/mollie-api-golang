// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type ReleaseAuthorizationRequestBody struct {
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
	// request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
	// required.
	ProfileID *string `json:"profileId,omitempty"`
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
}

func (r *ReleaseAuthorizationRequestBody) GetProfileID() *string {
	if r == nil {
		return nil
	}
	return r.ProfileID
}

func (r *ReleaseAuthorizationRequestBody) GetTestmode() *bool {
	if r == nil {
		return nil
	}
	return r.Testmode
}

type ReleaseAuthorizationRequest struct {
	// Provide the ID of the related payment.
	PaymentID string `pathParam:"style=simple,explode=false,name=paymentId"`
	// A unique key to ensure idempotent requests. This key should be a UUID v4 string.
	IdempotencyKey *string                          `header:"style=simple,explode=false,name=idempotency-key"`
	RequestBody    *ReleaseAuthorizationRequestBody `request:"mediaType=application/json"`
}

func (r *ReleaseAuthorizationRequest) GetPaymentID() string {
	if r == nil {
		return ""
	}
	return r.PaymentID
}

func (r *ReleaseAuthorizationRequest) GetIdempotencyKey() *string {
	if r == nil {
		return nil
	}
	return r.IdempotencyKey
}

func (r *ReleaseAuthorizationRequest) GetRequestBody() *ReleaseAuthorizationRequestBody {
	if r == nil {
		return nil
	}
	return r.RequestBody
}

type ReleaseAuthorizationResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The request was accepted and will be processed asynchronously.
	Any any
}

func (r *ReleaseAuthorizationResponse) GetHTTPMeta() components.HTTPMetadata {
	if r == nil {
		return components.HTTPMetadata{}
	}
	return r.HTTPMeta
}

func (r *ReleaseAuthorizationResponse) GetAny() any {
	if r == nil {
		return nil
	}
	return r.Any
}
