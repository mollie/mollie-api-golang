// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type ListInvoicesRequest struct {
	// Filter for an invoice with a specific invoice reference, for example
	// `2024.10000`.
	Reference *string `queryParam:"style=form,explode=true,name=reference"`
	// Filter for invoices of a specific year, for example `2024`.
	Year *string `queryParam:"style=form,explode=true,name=year"`
	// Filter for invoices of a specific month, for example `01`.
	Month *string `queryParam:"style=form,explode=true,name=month"`
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
	// result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
	// newest to oldest.
	Sort *components.ListSort `queryParam:"style=form,explode=true,name=sort"`
	// A unique key to ensure idempotent requests. This key should be a UUID v4 string.
	IdempotencyKey *string `header:"style=simple,explode=false,name=idempotency-key"`
}

func (l *ListInvoicesRequest) GetReference() *string {
	if l == nil {
		return nil
	}
	return l.Reference
}

func (l *ListInvoicesRequest) GetYear() *string {
	if l == nil {
		return nil
	}
	return l.Year
}

func (l *ListInvoicesRequest) GetMonth() *string {
	if l == nil {
		return nil
	}
	return l.Month
}

func (l *ListInvoicesRequest) GetFrom() *string {
	if l == nil {
		return nil
	}
	return l.From
}

func (l *ListInvoicesRequest) GetLimit() *int64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListInvoicesRequest) GetSort() *components.ListSort {
	if l == nil {
		return nil
	}
	return l.Sort
}

func (l *ListInvoicesRequest) GetIdempotencyKey() *string {
	if l == nil {
		return nil
	}
	return l.IdempotencyKey
}

type Invoice struct {
}

type ListInvoicesEmbedded struct {
	// An array of invoice objects. For a complete reference of
	// the invoice object, refer to the [Get invoice endpoint](get-invoice) documentation.
	Invoices []Invoice `json:"invoices"`
}

func (l *ListInvoicesEmbedded) GetInvoices() []Invoice {
	if l == nil {
		return []Invoice{}
	}
	return l.Invoices
}

// ListInvoicesResponseBody - A list of invoice objects. For a complete reference of the invoice
// object, refer to the [Get invoice endpoint](get-invoice) documentation.
type ListInvoicesResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    int64                `json:"count"`
	Embedded ListInvoicesEmbedded `json:"_embedded"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links components.ListLinks `json:"_links"`
}

func (l *ListInvoicesResponseBody) GetCount() int64 {
	if l == nil {
		return 0
	}
	return l.Count
}

func (l *ListInvoicesResponseBody) GetEmbedded() ListInvoicesEmbedded {
	if l == nil {
		return ListInvoicesEmbedded{}
	}
	return l.Embedded
}

func (l *ListInvoicesResponseBody) GetLinks() components.ListLinks {
	if l == nil {
		return components.ListLinks{}
	}
	return l.Links
}

type ListInvoicesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of invoice objects. For a complete reference of the invoice
	// object, refer to the [Get invoice endpoint](get-invoice) documentation.
	Object *ListInvoicesResponseBody
}

func (l *ListInvoicesResponse) GetHTTPMeta() components.HTTPMetadata {
	if l == nil {
		return components.HTTPMetadata{}
	}
	return l.HTTPMeta
}

func (l *ListInvoicesResponse) GetObject() *ListInvoicesResponseBody {
	if l == nil {
		return nil
	}
	return l.Object
}
