// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
)

// ListSubscriptionsSort - Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
// newest to oldest.
type ListSubscriptionsSort string

const (
	ListSubscriptionsSortAsc  ListSubscriptionsSort = "asc"
	ListSubscriptionsSortDesc ListSubscriptionsSort = "desc"
)

func (e ListSubscriptionsSort) ToPointer() *ListSubscriptionsSort {
	return &e
}
func (e *ListSubscriptionsSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = ListSubscriptionsSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSubscriptionsSort: %v", v)
	}
}

type ListSubscriptionsRequest struct {
	// Provide the ID of the related customer.
	CustomerID string `pathParam:"style=simple,explode=false,name=customerId"`
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
	// result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
	// newest to oldest.
	Sort *ListSubscriptionsSort `queryParam:"style=form,explode=true,name=sort"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *ListSubscriptionsRequest) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *ListSubscriptionsRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListSubscriptionsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListSubscriptionsRequest) GetSort() *ListSubscriptionsSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListSubscriptionsRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// ListSubscriptionsNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type ListSubscriptionsNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListSubscriptionsNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSubscriptionsNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListSubscriptionsNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListSubscriptionsNotFoundDocumentation `json:"documentation"`
}

func (o *ListSubscriptionsNotFoundLinks) GetDocumentation() ListSubscriptionsNotFoundDocumentation {
	if o == nil {
		return ListSubscriptionsNotFoundDocumentation{}
	}
	return o.Documentation
}

// ListSubscriptionsBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type ListSubscriptionsBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListSubscriptionsBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSubscriptionsBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListSubscriptionsBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListSubscriptionsBadRequestDocumentation `json:"documentation"`
}

func (o *ListSubscriptionsBadRequestLinks) GetDocumentation() ListSubscriptionsBadRequestDocumentation {
	if o == nil {
		return ListSubscriptionsBadRequestDocumentation{}
	}
	return o.Documentation
}

// ListSubscriptionsMode - Whether this entity was created in live mode or in test mode.
type ListSubscriptionsMode string

const (
	ListSubscriptionsModeLive ListSubscriptionsMode = "live"
	ListSubscriptionsModeTest ListSubscriptionsMode = "test"
)

func (e ListSubscriptionsMode) ToPointer() *ListSubscriptionsMode {
	return &e
}

// ListSubscriptionsStatus - The subscription's current status is directly related to the status of the underlying customer or mandate that is
// enabling the subscription.
type ListSubscriptionsStatus string

const (
	ListSubscriptionsStatusPending   ListSubscriptionsStatus = "pending"
	ListSubscriptionsStatusActive    ListSubscriptionsStatus = "active"
	ListSubscriptionsStatusCanceled  ListSubscriptionsStatus = "canceled"
	ListSubscriptionsStatusSuspended ListSubscriptionsStatus = "suspended"
	ListSubscriptionsStatusCompleted ListSubscriptionsStatus = "completed"
)

func (e ListSubscriptionsStatus) ToPointer() *ListSubscriptionsStatus {
	return &e
}

// ListSubscriptionsAmount - The amount for each individual payment that is charged with this subscription. For example, for a monthly
// subscription of €10, the subscription amount should be set to €10.
type ListSubscriptionsAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSubscriptionsAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSubscriptionsAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSubscriptionsMethod - The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
type ListSubscriptionsMethod string

const (
	ListSubscriptionsMethodCreditcard  ListSubscriptionsMethod = "creditcard"
	ListSubscriptionsMethodDirectdebit ListSubscriptionsMethod = "directdebit"
	ListSubscriptionsMethodPaypal      ListSubscriptionsMethod = "paypal"
)

func (e ListSubscriptionsMethod) ToPointer() *ListSubscriptionsMethod {
	return &e
}

// ListSubscriptionsApplicationFeeAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type ListSubscriptionsApplicationFeeAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSubscriptionsApplicationFeeAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSubscriptionsApplicationFeeAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSubscriptionsApplicationFee - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
//
// Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
// information.
type ListSubscriptionsApplicationFee struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount      ListSubscriptionsApplicationFeeAmount `json:"amount"`
	Description string                                `json:"description"`
}

func (o *ListSubscriptionsApplicationFee) GetAmount() ListSubscriptionsApplicationFeeAmount {
	if o == nil {
		return ListSubscriptionsApplicationFeeAmount{}
	}
	return o.Amount
}

func (o *ListSubscriptionsApplicationFee) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

type ListSubscriptionsMetadataType string

const (
	ListSubscriptionsMetadataTypeStr        ListSubscriptionsMetadataType = "str"
	ListSubscriptionsMetadataTypeMapOfAny   ListSubscriptionsMetadataType = "mapOfAny"
	ListSubscriptionsMetadataTypeArrayOfStr ListSubscriptionsMetadataType = "arrayOfStr"
)

// ListSubscriptionsMetadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
// Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
// 1kB.
//
// Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
type ListSubscriptionsMetadata struct {
	Str        *string        `queryParam:"inline"`
	MapOfAny   map[string]any `queryParam:"inline"`
	ArrayOfStr []string       `queryParam:"inline"`

	Type ListSubscriptionsMetadataType
}

func CreateListSubscriptionsMetadataStr(str string) ListSubscriptionsMetadata {
	typ := ListSubscriptionsMetadataTypeStr

	return ListSubscriptionsMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateListSubscriptionsMetadataMapOfAny(mapOfAny map[string]any) ListSubscriptionsMetadata {
	typ := ListSubscriptionsMetadataTypeMapOfAny

	return ListSubscriptionsMetadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateListSubscriptionsMetadataArrayOfStr(arrayOfStr []string) ListSubscriptionsMetadata {
	typ := ListSubscriptionsMetadataTypeArrayOfStr

	return ListSubscriptionsMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ListSubscriptionsMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = ListSubscriptionsMetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ListSubscriptionsMetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ListSubscriptionsMetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListSubscriptionsMetadata", string(data))
}

func (u ListSubscriptionsMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ListSubscriptionsMetadata: all fields are null")
}

// ListSubscriptionsSubscriptionSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListSubscriptionsSubscriptionSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSubscriptionsSubscriptionSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSubscriptionsSubscriptionSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSubscriptionsCustomer - The API resource URL of the [customer](get-customer) this subscription was created for.
type ListSubscriptionsCustomer struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSubscriptionsCustomer) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSubscriptionsCustomer) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSubscriptionsMandate - The API resource URL of the [mandate](get-mandate) this subscription was created for.
type ListSubscriptionsMandate struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSubscriptionsMandate) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSubscriptionsMandate) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSubscriptionsProfile - The API resource URL of the [profile](get-profile) this subscription was created for.
type ListSubscriptionsProfile struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSubscriptionsProfile) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSubscriptionsProfile) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSubscriptionsPayments - The API resource URL of the [payments](list-payments) created for this subscription. Omitted if no such
// payments exist (yet).
type ListSubscriptionsPayments struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSubscriptionsPayments) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSubscriptionsPayments) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSubscriptionsSubscriptionDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListSubscriptionsSubscriptionDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSubscriptionsSubscriptionDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSubscriptionsSubscriptionDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSubscriptionsSubscriptionLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type ListSubscriptionsSubscriptionLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self ListSubscriptionsSubscriptionSelf `json:"self"`
	// The API resource URL of the [customer](get-customer) this subscription was created for.
	Customer *ListSubscriptionsCustomer `json:"customer"`
	// The API resource URL of the [mandate](get-mandate) this subscription was created for.
	Mandate *ListSubscriptionsMandate `json:"mandate,omitempty"`
	// The API resource URL of the [profile](get-profile) this subscription was created for.
	Profile *ListSubscriptionsProfile `json:"profile"`
	// The API resource URL of the [payments](list-payments) created for this subscription. Omitted if no such
	// payments exist (yet).
	Payments *ListSubscriptionsPayments `json:"payments,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListSubscriptionsSubscriptionDocumentation `json:"documentation"`
}

func (o *ListSubscriptionsSubscriptionLinks) GetSelf() ListSubscriptionsSubscriptionSelf {
	if o == nil {
		return ListSubscriptionsSubscriptionSelf{}
	}
	return o.Self
}

func (o *ListSubscriptionsSubscriptionLinks) GetCustomer() *ListSubscriptionsCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *ListSubscriptionsSubscriptionLinks) GetMandate() *ListSubscriptionsMandate {
	if o == nil {
		return nil
	}
	return o.Mandate
}

func (o *ListSubscriptionsSubscriptionLinks) GetProfile() *ListSubscriptionsProfile {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *ListSubscriptionsSubscriptionLinks) GetPayments() *ListSubscriptionsPayments {
	if o == nil {
		return nil
	}
	return o.Payments
}

func (o *ListSubscriptionsSubscriptionLinks) GetDocumentation() ListSubscriptionsSubscriptionDocumentation {
	if o == nil {
		return ListSubscriptionsSubscriptionDocumentation{}
	}
	return o.Documentation
}

type ListSubscriptionsSubscription struct {
	// Indicates the response contains a subscription object. Will always contain the string `subscription` for this
	// endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this subscription. Example: `sub_rVKGtNd6s3`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode ListSubscriptionsMode `json:"mode"`
	// The subscription's current status is directly related to the status of the underlying customer or mandate that is
	// enabling the subscription.
	Status ListSubscriptionsStatus `json:"status"`
	// The amount for each individual payment that is charged with this subscription. For example, for a monthly
	// subscription of €10, the subscription amount should be set to €10.
	Amount ListSubscriptionsAmount `json:"amount"`
	// Total number of payments for the subscription. Once this number of payments is reached, the subscription is
	// considered completed.
	//
	// Test mode subscriptions will get canceled automatically after 10 payments.
	Times *int64 `json:"times"`
	// Number of payments left for the subscription.
	TimesRemaining *int64 `json:"timesRemaining"`
	// Interval to wait between payments, for example `1 month` or `14 days`.
	//
	// The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval string `json:"interval"`
	// The start date of the subscription in `YYYY-MM-DD` format.
	StartDate string `json:"startDate"`
	// The date of the next scheduled payment in `YYYY-MM-DD` format. If the subscription has been completed or canceled,
	// this parameter will not be returned.
	NextPaymentDate *string `json:"nextPaymentDate,omitempty"`
	// The subscription's description will be used as the description of the resulting individual payments and so showing
	// up on the bank statement of the consumer.
	//
	// **Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
	Description string `json:"description"`
	// The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
	Method *ListSubscriptionsMethod `json:"method"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
	//
	// Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
	// information.
	ApplicationFee *ListSubscriptionsApplicationFee `json:"applicationFee,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
	// Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
	// 1kB.
	//
	// Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
	Metadata *ListSubscriptionsMetadata `json:"metadata"`
	// We will call this URL for any payment status changes of payments resulting from this subscription.
	//
	// This webhook will receive **all** events for the subscription's payments. This may include payment failures as
	// well. Be sure to verify the payment's subscription ID and its status.
	WebhookURL string `json:"webhookUrl"`
	// The customer this subscription belongs to.
	CustomerID string `json:"customerId"`
	// The mandate used for this subscription, if any.
	MandateID *string `json:"mandateId,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The subscription's date and time of cancellation, in ISO 8601 format. This parameter is omitted if the
	// subscription is not canceled (yet).
	CanceledAt *string `json:"canceledAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links ListSubscriptionsSubscriptionLinks `json:"_links"`
}

func (o *ListSubscriptionsSubscription) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *ListSubscriptionsSubscription) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListSubscriptionsSubscription) GetMode() ListSubscriptionsMode {
	if o == nil {
		return ListSubscriptionsMode("")
	}
	return o.Mode
}

func (o *ListSubscriptionsSubscription) GetStatus() ListSubscriptionsStatus {
	if o == nil {
		return ListSubscriptionsStatus("")
	}
	return o.Status
}

func (o *ListSubscriptionsSubscription) GetAmount() ListSubscriptionsAmount {
	if o == nil {
		return ListSubscriptionsAmount{}
	}
	return o.Amount
}

func (o *ListSubscriptionsSubscription) GetTimes() *int64 {
	if o == nil {
		return nil
	}
	return o.Times
}

func (o *ListSubscriptionsSubscription) GetTimesRemaining() *int64 {
	if o == nil {
		return nil
	}
	return o.TimesRemaining
}

func (o *ListSubscriptionsSubscription) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *ListSubscriptionsSubscription) GetStartDate() string {
	if o == nil {
		return ""
	}
	return o.StartDate
}

func (o *ListSubscriptionsSubscription) GetNextPaymentDate() *string {
	if o == nil {
		return nil
	}
	return o.NextPaymentDate
}

func (o *ListSubscriptionsSubscription) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *ListSubscriptionsSubscription) GetMethod() *ListSubscriptionsMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *ListSubscriptionsSubscription) GetApplicationFee() *ListSubscriptionsApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *ListSubscriptionsSubscription) GetMetadata() *ListSubscriptionsMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ListSubscriptionsSubscription) GetWebhookURL() string {
	if o == nil {
		return ""
	}
	return o.WebhookURL
}

func (o *ListSubscriptionsSubscription) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *ListSubscriptionsSubscription) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *ListSubscriptionsSubscription) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListSubscriptionsSubscription) GetCanceledAt() *string {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *ListSubscriptionsSubscription) GetLinks() ListSubscriptionsSubscriptionLinks {
	if o == nil {
		return ListSubscriptionsSubscriptionLinks{}
	}
	return o.Links
}

type ListSubscriptionsEmbedded struct {
	// An array of subscription objects.
	Subscriptions []ListSubscriptionsSubscription `json:"subscriptions,omitempty"`
}

func (o *ListSubscriptionsEmbedded) GetSubscriptions() []ListSubscriptionsSubscription {
	if o == nil {
		return nil
	}
	return o.Subscriptions
}

// ListSubscriptionsSelf - The URL to the current set of items.
type ListSubscriptionsSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSubscriptionsSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSubscriptionsSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSubscriptionsPrevious - The previous set of items, if available.
type ListSubscriptionsPrevious struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSubscriptionsPrevious) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSubscriptionsPrevious) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSubscriptionsNext - The next set of items, if available.
type ListSubscriptionsNext struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSubscriptionsNext) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSubscriptionsNext) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSubscriptionsDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListSubscriptionsDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSubscriptionsDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSubscriptionsDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSubscriptionsLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
type ListSubscriptionsLinks struct {
	// The URL to the current set of items.
	Self ListSubscriptionsSelf `json:"self"`
	// The previous set of items, if available.
	Previous *ListSubscriptionsPrevious `json:"previous"`
	// The next set of items, if available.
	Next *ListSubscriptionsNext `json:"next"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListSubscriptionsDocumentation `json:"documentation"`
}

func (o *ListSubscriptionsLinks) GetSelf() ListSubscriptionsSelf {
	if o == nil {
		return ListSubscriptionsSelf{}
	}
	return o.Self
}

func (o *ListSubscriptionsLinks) GetPrevious() *ListSubscriptionsPrevious {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *ListSubscriptionsLinks) GetNext() *ListSubscriptionsNext {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListSubscriptionsLinks) GetDocumentation() ListSubscriptionsDocumentation {
	if o == nil {
		return ListSubscriptionsDocumentation{}
	}
	return o.Documentation
}

// ListSubscriptionsResponseBody - A list of subscription objects.
type ListSubscriptionsResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    int64                     `json:"count"`
	Embedded ListSubscriptionsEmbedded `json:"_embedded"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links ListSubscriptionsLinks `json:"_links"`
}

func (o *ListSubscriptionsResponseBody) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListSubscriptionsResponseBody) GetEmbedded() ListSubscriptionsEmbedded {
	if o == nil {
		return ListSubscriptionsEmbedded{}
	}
	return o.Embedded
}

func (o *ListSubscriptionsResponseBody) GetLinks() ListSubscriptionsLinks {
	if o == nil {
		return ListSubscriptionsLinks{}
	}
	return o.Links
}

type ListSubscriptionsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of subscription objects.
	Object *ListSubscriptionsResponseBody
}

func (o *ListSubscriptionsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListSubscriptionsResponse) GetObject() *ListSubscriptionsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
