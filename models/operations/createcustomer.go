// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
)

// CreateCustomerLocaleRequest - Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
// absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
type CreateCustomerLocaleRequest string

const (
	CreateCustomerLocaleRequestEnUs CreateCustomerLocaleRequest = "en_US"
	CreateCustomerLocaleRequestEnGb CreateCustomerLocaleRequest = "en_GB"
	CreateCustomerLocaleRequestNlNl CreateCustomerLocaleRequest = "nl_NL"
	CreateCustomerLocaleRequestNlBe CreateCustomerLocaleRequest = "nl_BE"
	CreateCustomerLocaleRequestDeDe CreateCustomerLocaleRequest = "de_DE"
	CreateCustomerLocaleRequestDeAt CreateCustomerLocaleRequest = "de_AT"
	CreateCustomerLocaleRequestDeCh CreateCustomerLocaleRequest = "de_CH"
	CreateCustomerLocaleRequestFrFr CreateCustomerLocaleRequest = "fr_FR"
	CreateCustomerLocaleRequestFrBe CreateCustomerLocaleRequest = "fr_BE"
	CreateCustomerLocaleRequestEsEs CreateCustomerLocaleRequest = "es_ES"
	CreateCustomerLocaleRequestCaEs CreateCustomerLocaleRequest = "ca_ES"
	CreateCustomerLocaleRequestPtPt CreateCustomerLocaleRequest = "pt_PT"
	CreateCustomerLocaleRequestItIt CreateCustomerLocaleRequest = "it_IT"
	CreateCustomerLocaleRequestNbNo CreateCustomerLocaleRequest = "nb_NO"
	CreateCustomerLocaleRequestSvSe CreateCustomerLocaleRequest = "sv_SE"
	CreateCustomerLocaleRequestFiFi CreateCustomerLocaleRequest = "fi_FI"
	CreateCustomerLocaleRequestDaDk CreateCustomerLocaleRequest = "da_DK"
	CreateCustomerLocaleRequestIsIs CreateCustomerLocaleRequest = "is_IS"
	CreateCustomerLocaleRequestHuHu CreateCustomerLocaleRequest = "hu_HU"
	CreateCustomerLocaleRequestPlPl CreateCustomerLocaleRequest = "pl_PL"
	CreateCustomerLocaleRequestLvLv CreateCustomerLocaleRequest = "lv_LV"
	CreateCustomerLocaleRequestLtLt CreateCustomerLocaleRequest = "lt_LT"
)

func (e CreateCustomerLocaleRequest) ToPointer() *CreateCustomerLocaleRequest {
	return &e
}
func (e *CreateCustomerLocaleRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		fallthrough
	case "es_ES":
		fallthrough
	case "ca_ES":
		fallthrough
	case "pt_PT":
		fallthrough
	case "it_IT":
		fallthrough
	case "nb_NO":
		fallthrough
	case "sv_SE":
		fallthrough
	case "fi_FI":
		fallthrough
	case "da_DK":
		fallthrough
	case "is_IS":
		fallthrough
	case "hu_HU":
		fallthrough
	case "pl_PL":
		fallthrough
	case "lv_LV":
		fallthrough
	case "lt_LT":
		*e = CreateCustomerLocaleRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomerLocaleRequest: %v", v)
	}
}

type CreateCustomerMetadataRequestType string

const (
	CreateCustomerMetadataRequestTypeStr        CreateCustomerMetadataRequestType = "str"
	CreateCustomerMetadataRequestTypeMapOfAny   CreateCustomerMetadataRequestType = "mapOfAny"
	CreateCustomerMetadataRequestTypeArrayOfStr CreateCustomerMetadataRequestType = "arrayOfStr"
)

// CreateCustomerMetadataRequest - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type CreateCustomerMetadataRequest struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type CreateCustomerMetadataRequestType
}

func CreateCreateCustomerMetadataRequestStr(str string) CreateCustomerMetadataRequest {
	typ := CreateCustomerMetadataRequestTypeStr

	return CreateCustomerMetadataRequest{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateCustomerMetadataRequestMapOfAny(mapOfAny map[string]any) CreateCustomerMetadataRequest {
	typ := CreateCustomerMetadataRequestTypeMapOfAny

	return CreateCustomerMetadataRequest{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateCreateCustomerMetadataRequestArrayOfStr(arrayOfStr []string) CreateCustomerMetadataRequest {
	typ := CreateCustomerMetadataRequestTypeArrayOfStr

	return CreateCustomerMetadataRequest{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreateCustomerMetadataRequest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CreateCustomerMetadataRequestTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CreateCustomerMetadataRequestTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreateCustomerMetadataRequestTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateCustomerMetadataRequest", string(data))
}

func (u CreateCustomerMetadataRequest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreateCustomerMetadataRequest: all fields are null")
}

type CreateCustomerRequest struct {
	// The full name of the customer.
	Name *string `json:"name,omitempty"`
	// The email address of the customer.
	Email *string `json:"email,omitempty"`
	// Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
	// absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
	Locale *CreateCustomerLocaleRequest `json:"locale,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *CreateCustomerMetadataRequest `json:"metadata,omitempty"`
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
}

func (o *CreateCustomerRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateCustomerRequest) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreateCustomerRequest) GetLocale() *CreateCustomerLocaleRequest {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *CreateCustomerRequest) GetMetadata() *CreateCustomerMetadataRequest {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreateCustomerRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// CreateCustomerNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type CreateCustomerNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *CreateCustomerNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateCustomerNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CreateCustomerNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation CreateCustomerNotFoundDocumentation `json:"documentation"`
}

func (o *CreateCustomerNotFoundLinks) GetDocumentation() CreateCustomerNotFoundDocumentation {
	if o == nil {
		return CreateCustomerNotFoundDocumentation{}
	}
	return o.Documentation
}

// CreateCustomerMode - Whether this entity was created in live mode or in test mode.
type CreateCustomerMode string

const (
	CreateCustomerModeLive CreateCustomerMode = "live"
	CreateCustomerModeTest CreateCustomerMode = "test"
)

func (e CreateCustomerMode) ToPointer() *CreateCustomerMode {
	return &e
}
func (e *CreateCustomerMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = CreateCustomerMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomerMode: %v", v)
	}
}

// CreateCustomerLocaleResponse - Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
// absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
type CreateCustomerLocaleResponse string

const (
	CreateCustomerLocaleResponseEnUs CreateCustomerLocaleResponse = "en_US"
	CreateCustomerLocaleResponseEnGb CreateCustomerLocaleResponse = "en_GB"
	CreateCustomerLocaleResponseNlNl CreateCustomerLocaleResponse = "nl_NL"
	CreateCustomerLocaleResponseNlBe CreateCustomerLocaleResponse = "nl_BE"
	CreateCustomerLocaleResponseDeDe CreateCustomerLocaleResponse = "de_DE"
	CreateCustomerLocaleResponseDeAt CreateCustomerLocaleResponse = "de_AT"
	CreateCustomerLocaleResponseDeCh CreateCustomerLocaleResponse = "de_CH"
	CreateCustomerLocaleResponseFrFr CreateCustomerLocaleResponse = "fr_FR"
	CreateCustomerLocaleResponseFrBe CreateCustomerLocaleResponse = "fr_BE"
	CreateCustomerLocaleResponseEsEs CreateCustomerLocaleResponse = "es_ES"
	CreateCustomerLocaleResponseCaEs CreateCustomerLocaleResponse = "ca_ES"
	CreateCustomerLocaleResponsePtPt CreateCustomerLocaleResponse = "pt_PT"
	CreateCustomerLocaleResponseItIt CreateCustomerLocaleResponse = "it_IT"
	CreateCustomerLocaleResponseNbNo CreateCustomerLocaleResponse = "nb_NO"
	CreateCustomerLocaleResponseSvSe CreateCustomerLocaleResponse = "sv_SE"
	CreateCustomerLocaleResponseFiFi CreateCustomerLocaleResponse = "fi_FI"
	CreateCustomerLocaleResponseDaDk CreateCustomerLocaleResponse = "da_DK"
	CreateCustomerLocaleResponseIsIs CreateCustomerLocaleResponse = "is_IS"
	CreateCustomerLocaleResponseHuHu CreateCustomerLocaleResponse = "hu_HU"
	CreateCustomerLocaleResponsePlPl CreateCustomerLocaleResponse = "pl_PL"
	CreateCustomerLocaleResponseLvLv CreateCustomerLocaleResponse = "lv_LV"
	CreateCustomerLocaleResponseLtLt CreateCustomerLocaleResponse = "lt_LT"
)

func (e CreateCustomerLocaleResponse) ToPointer() *CreateCustomerLocaleResponse {
	return &e
}
func (e *CreateCustomerLocaleResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		fallthrough
	case "es_ES":
		fallthrough
	case "ca_ES":
		fallthrough
	case "pt_PT":
		fallthrough
	case "it_IT":
		fallthrough
	case "nb_NO":
		fallthrough
	case "sv_SE":
		fallthrough
	case "fi_FI":
		fallthrough
	case "da_DK":
		fallthrough
	case "is_IS":
		fallthrough
	case "hu_HU":
		fallthrough
	case "pl_PL":
		fallthrough
	case "lv_LV":
		fallthrough
	case "lt_LT":
		*e = CreateCustomerLocaleResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomerLocaleResponse: %v", v)
	}
}

type CreateCustomerMetadataResponseType string

const (
	CreateCustomerMetadataResponseTypeStr        CreateCustomerMetadataResponseType = "str"
	CreateCustomerMetadataResponseTypeMapOfAny   CreateCustomerMetadataResponseType = "mapOfAny"
	CreateCustomerMetadataResponseTypeArrayOfStr CreateCustomerMetadataResponseType = "arrayOfStr"
)

// CreateCustomerMetadataResponse - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type CreateCustomerMetadataResponse struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type CreateCustomerMetadataResponseType
}

func CreateCreateCustomerMetadataResponseStr(str string) CreateCustomerMetadataResponse {
	typ := CreateCustomerMetadataResponseTypeStr

	return CreateCustomerMetadataResponse{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateCustomerMetadataResponseMapOfAny(mapOfAny map[string]any) CreateCustomerMetadataResponse {
	typ := CreateCustomerMetadataResponseTypeMapOfAny

	return CreateCustomerMetadataResponse{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateCreateCustomerMetadataResponseArrayOfStr(arrayOfStr []string) CreateCustomerMetadataResponse {
	typ := CreateCustomerMetadataResponseTypeArrayOfStr

	return CreateCustomerMetadataResponse{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreateCustomerMetadataResponse) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CreateCustomerMetadataResponseTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CreateCustomerMetadataResponseTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreateCustomerMetadataResponseTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateCustomerMetadataResponse", string(data))
}

func (u CreateCustomerMetadataResponse) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreateCustomerMetadataResponse: all fields are null")
}

// CreateCustomerSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CreateCustomerSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreateCustomerSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateCustomerSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateCustomerDashboard - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CreateCustomerDashboard struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreateCustomerDashboard) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateCustomerDashboard) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateCustomerPayments - The API resource URL of the [payments](list-payments) linked to this customer. Omitted if no such payments
// exist (yet).
type CreateCustomerPayments struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *CreateCustomerPayments) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *CreateCustomerPayments) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// CreateCustomerMandates - The API resource URL of the [mandates](list-mandates) linked to this customer. Omitted if no such mandates
// exist (yet).
type CreateCustomerMandates struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *CreateCustomerMandates) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *CreateCustomerMandates) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// CreateCustomerSubscriptions - The API resource URL of the [subscriptions](list-subscriptions) linked to this customer. Omitted if no such
// subscriptions exist (yet).
type CreateCustomerSubscriptions struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *CreateCustomerSubscriptions) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *CreateCustomerSubscriptions) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// CreateCustomerDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CreateCustomerDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreateCustomerDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateCustomerDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateCustomerLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type CreateCustomerLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self CreateCustomerSelf `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Dashboard CreateCustomerDashboard `json:"dashboard"`
	// The API resource URL of the [payments](list-payments) linked to this customer. Omitted if no such payments
	// exist (yet).
	Payments *CreateCustomerPayments `json:"payments,omitempty"`
	// The API resource URL of the [mandates](list-mandates) linked to this customer. Omitted if no such mandates
	// exist (yet).
	Mandates *CreateCustomerMandates `json:"mandates,omitempty"`
	// The API resource URL of the [subscriptions](list-subscriptions) linked to this customer. Omitted if no such
	// subscriptions exist (yet).
	Subscriptions *CreateCustomerSubscriptions `json:"subscriptions,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation CreateCustomerDocumentation `json:"documentation"`
}

func (o *CreateCustomerLinks) GetSelf() CreateCustomerSelf {
	if o == nil {
		return CreateCustomerSelf{}
	}
	return o.Self
}

func (o *CreateCustomerLinks) GetDashboard() CreateCustomerDashboard {
	if o == nil {
		return CreateCustomerDashboard{}
	}
	return o.Dashboard
}

func (o *CreateCustomerLinks) GetPayments() *CreateCustomerPayments {
	if o == nil {
		return nil
	}
	return o.Payments
}

func (o *CreateCustomerLinks) GetMandates() *CreateCustomerMandates {
	if o == nil {
		return nil
	}
	return o.Mandates
}

func (o *CreateCustomerLinks) GetSubscriptions() *CreateCustomerSubscriptions {
	if o == nil {
		return nil
	}
	return o.Subscriptions
}

func (o *CreateCustomerLinks) GetDocumentation() CreateCustomerDocumentation {
	if o == nil {
		return CreateCustomerDocumentation{}
	}
	return o.Documentation
}

// CreateCustomerResponseBody - The newly created customer object.
type CreateCustomerResponseBody struct {
	// Indicates the response contains a customer object. Will always contain the string `customer` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this customer. Example: `cst_vsKJpSsabw`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode CreateCustomerMode `json:"mode"`
	// The full name of the customer.
	Name *string `json:"name"`
	// The email address of the customer.
	Email *string `json:"email"`
	// Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
	// absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
	Locale *CreateCustomerLocaleResponse `json:"locale"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *CreateCustomerMetadataResponse `json:"metadata"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links CreateCustomerLinks `json:"_links"`
}

func (o *CreateCustomerResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *CreateCustomerResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateCustomerResponseBody) GetMode() CreateCustomerMode {
	if o == nil {
		return CreateCustomerMode("")
	}
	return o.Mode
}

func (o *CreateCustomerResponseBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateCustomerResponseBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreateCustomerResponseBody) GetLocale() *CreateCustomerLocaleResponse {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *CreateCustomerResponseBody) GetMetadata() *CreateCustomerMetadataResponse {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreateCustomerResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreateCustomerResponseBody) GetLinks() CreateCustomerLinks {
	if o == nil {
		return CreateCustomerLinks{}
	}
	return o.Links
}

type CreateCustomerResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The newly created customer object.
	Object *CreateCustomerResponseBody
}

func (o *CreateCustomerResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateCustomerResponse) GetObject() *CreateCustomerResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
