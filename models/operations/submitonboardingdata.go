// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// VatRegulation - Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in
// The United Kingdom, and shifted VAT for merchants in the European Union.
//
// The field can be omitted for merchants residing in other countries.
type VatRegulation string

const (
	VatRegulationDutch   VatRegulation = "dutch"
	VatRegulationBritish VatRegulation = "british"
	VatRegulationShifted VatRegulation = "shifted"
)

func (e VatRegulation) ToPointer() *VatRegulation {
	return &e
}
func (e *VatRegulation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dutch":
		fallthrough
	case "british":
		fallthrough
	case "shifted":
		*e = VatRegulation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VatRegulation: %v", v)
	}
}

type Organization struct {
	// The name of the organization.
	Name    *string             `json:"name,omitempty"`
	Address *components.Address `json:"address,omitempty"`
	// The registration number of the organization at their local chamber of commerce.
	RegistrationNumber *string `json:"registrationNumber,omitempty"`
	// The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT
	// numbers are verified against the international registry *VIES*.
	//
	// The field can be omitted for merchants residing in other countries.
	VatNumber *string `json:"vatNumber,omitempty"`
	// Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in
	// The United Kingdom, and shifted VAT for merchants in the European Union.
	//
	// The field can be omitted for merchants residing in other countries.
	VatRegulation *VatRegulation `json:"vatRegulation,omitempty"`
}

func (o *Organization) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Organization) GetAddress() *components.Address {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *Organization) GetRegistrationNumber() *string {
	if o == nil {
		return nil
	}
	return o.RegistrationNumber
}

func (o *Organization) GetVatNumber() *string {
	if o == nil {
		return nil
	}
	return o.VatNumber
}

func (o *Organization) GetVatRegulation() *VatRegulation {
	if o == nil {
		return nil
	}
	return o.VatRegulation
}

type Profile struct {
	// The profile's name, this will usually reflect the trade name or brand name of the profile's website
	// or application.
	Name *string `json:"name,omitempty"`
	// The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@`
	// signs are allowed.
	URL *string `json:"url,omitempty"`
	// The email address associated with the profile's trade name or brand.
	Email *string `json:"email,omitempty"`
	// The phone number associated with the profile's trade name or brand.
	Phone *string `json:"phone,omitempty"`
	// The products or services offered by the profile's website or application.
	Description *string `json:"description,omitempty"`
	// The industry associated with the profile's trade name or brand. Please refer to the
	// [business category list](common-data-types) for all possible options.
	BusinessCategory *string `json:"businessCategory,omitempty"`
}

func (p *Profile) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *Profile) GetURL() *string {
	if p == nil {
		return nil
	}
	return p.URL
}

func (p *Profile) GetEmail() *string {
	if p == nil {
		return nil
	}
	return p.Email
}

func (p *Profile) GetPhone() *string {
	if p == nil {
		return nil
	}
	return p.Phone
}

func (p *Profile) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *Profile) GetBusinessCategory() *string {
	if p == nil {
		return nil
	}
	return p.BusinessCategory
}

type SubmitOnboardingDataRequestBody struct {
	Organization *Organization `json:"organization,omitempty"`
	Profile      *Profile      `json:"profile,omitempty"`
}

func (s *SubmitOnboardingDataRequestBody) GetOrganization() *Organization {
	if s == nil {
		return nil
	}
	return s.Organization
}

func (s *SubmitOnboardingDataRequestBody) GetProfile() *Profile {
	if s == nil {
		return nil
	}
	return s.Profile
}

type SubmitOnboardingDataRequest struct {
	// A unique key to ensure idempotent requests. This key should be a UUID v4 string.
	IdempotencyKey *string                          `header:"style=simple,explode=false,name=idempotency-key"`
	RequestBody    *SubmitOnboardingDataRequestBody `request:"mediaType=application/json"`
}

func (s *SubmitOnboardingDataRequest) GetIdempotencyKey() *string {
	if s == nil {
		return nil
	}
	return s.IdempotencyKey
}

func (s *SubmitOnboardingDataRequest) GetRequestBody() *SubmitOnboardingDataRequestBody {
	if s == nil {
		return nil
	}
	return s.RequestBody
}

type SubmitOnboardingDataResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// An empty response.
	Any any
}

func (s *SubmitOnboardingDataResponse) GetHTTPMeta() components.HTTPMetadata {
	if s == nil {
		return components.HTTPMetadata{}
	}
	return s.HTTPMeta
}

func (s *SubmitOnboardingDataResponse) GetAny() any {
	if s == nil {
		return nil
	}
	return s.Any
}
