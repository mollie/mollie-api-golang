// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// SubmitOnboardingDataAddress - The address of the organization.
type SubmitOnboardingDataAddress struct {
	// A street and street number.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	PostalCode *string `json:"postalCode,omitempty"`
	City       *string `json:"city,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	Country *string `json:"country,omitempty"`
}

func (o *SubmitOnboardingDataAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *SubmitOnboardingDataAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *SubmitOnboardingDataAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *SubmitOnboardingDataAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// SubmitOnboardingDataVatRegulation - Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in
// The United Kingdom, and shifted VAT for merchants in the European Union.
//
// The field can be omitted for merchants residing in other countries.
type SubmitOnboardingDataVatRegulation string

const (
	SubmitOnboardingDataVatRegulationDutch   SubmitOnboardingDataVatRegulation = "dutch"
	SubmitOnboardingDataVatRegulationBritish SubmitOnboardingDataVatRegulation = "british"
	SubmitOnboardingDataVatRegulationShifted SubmitOnboardingDataVatRegulation = "shifted"
)

func (e SubmitOnboardingDataVatRegulation) ToPointer() *SubmitOnboardingDataVatRegulation {
	return &e
}
func (e *SubmitOnboardingDataVatRegulation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dutch":
		fallthrough
	case "british":
		fallthrough
	case "shifted":
		*e = SubmitOnboardingDataVatRegulation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SubmitOnboardingDataVatRegulation: %v", v)
	}
}

type SubmitOnboardingDataOrganization struct {
	// The name of the organization.
	Name *string `json:"name,omitempty"`
	// The address of the organization.
	Address *SubmitOnboardingDataAddress `json:"address,omitempty"`
	// The registration number of the organization at their local chamber of commerce.
	RegistrationNumber *string `json:"registrationNumber,omitempty"`
	// The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT
	// numbers are verified against the international registry *VIES*.
	//
	// The field can be omitted for merchants residing in other countries.
	VatNumber *string `json:"vatNumber,omitempty"`
	// Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in
	// The United Kingdom, and shifted VAT for merchants in the European Union.
	//
	// The field can be omitted for merchants residing in other countries.
	VatRegulation *SubmitOnboardingDataVatRegulation `json:"vatRegulation,omitempty"`
}

func (o *SubmitOnboardingDataOrganization) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *SubmitOnboardingDataOrganization) GetAddress() *SubmitOnboardingDataAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *SubmitOnboardingDataOrganization) GetRegistrationNumber() *string {
	if o == nil {
		return nil
	}
	return o.RegistrationNumber
}

func (o *SubmitOnboardingDataOrganization) GetVatNumber() *string {
	if o == nil {
		return nil
	}
	return o.VatNumber
}

func (o *SubmitOnboardingDataOrganization) GetVatRegulation() *SubmitOnboardingDataVatRegulation {
	if o == nil {
		return nil
	}
	return o.VatRegulation
}

type SubmitOnboardingDataProfile struct {
	// The profile's name, this will usually reflect the trade name or brand name of the profile's website
	// or application.
	Name *string `json:"name,omitempty"`
	// The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@`
	// signs are allowed.
	URL *string `json:"url,omitempty"`
	// The email address associated with the profile's trade name or brand.
	Email *string `json:"email,omitempty"`
	// The phone number associated with the profile's trade name or brand.
	Phone *string `json:"phone,omitempty"`
	// The products or services offered by the profile's website or application.
	Description *string `json:"description,omitempty"`
	// The industry associated with the profile's trade name or brand. Please refer to the
	// [business category list](common-data-types) for all possible options.
	BusinessCategory *string `json:"businessCategory,omitempty"`
}

func (o *SubmitOnboardingDataProfile) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *SubmitOnboardingDataProfile) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *SubmitOnboardingDataProfile) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *SubmitOnboardingDataProfile) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *SubmitOnboardingDataProfile) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *SubmitOnboardingDataProfile) GetBusinessCategory() *string {
	if o == nil {
		return nil
	}
	return o.BusinessCategory
}

type SubmitOnboardingDataRequest struct {
	Organization *SubmitOnboardingDataOrganization `json:"organization,omitempty"`
	Profile      *SubmitOnboardingDataProfile      `json:"profile,omitempty"`
}

func (o *SubmitOnboardingDataRequest) GetOrganization() *SubmitOnboardingDataOrganization {
	if o == nil {
		return nil
	}
	return o.Organization
}

func (o *SubmitOnboardingDataRequest) GetProfile() *SubmitOnboardingDataProfile {
	if o == nil {
		return nil
	}
	return o.Profile
}

type SubmitOnboardingDataResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// An empty response.
	Any any
}

func (o *SubmitOnboardingDataResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *SubmitOnboardingDataResponse) GetAny() any {
	if o == nil {
		return nil
	}
	return o.Any
}
