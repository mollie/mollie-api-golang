// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type ListAllMethodsGlobals struct {
	// The identifier referring to the [profile](get-profile) you wish to
	// retrieve the resources for.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
	// organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
	ProfileID *string `queryParam:"style=form,explode=true,name=profileId"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (l *ListAllMethodsGlobals) GetProfileID() *string {
	if l == nil {
		return nil
	}
	return l.ProfileID
}

func (l *ListAllMethodsGlobals) GetTestmode() *bool {
	if l == nil {
		return nil
	}
	return l.Testmode
}

type ListAllMethodsRequest struct {
	// Response language
	Locale *components.Locale `queryParam:"style=form,explode=true,name=locale"`
	// If supplied, only payment methods that support the amount and currency
	// are returned.
	//
	// Example: `/v2/methods/all?amount[value]=100.00&amount[currency]=USD`
	Amount *components.Amount `queryParam:"style=deepObject,explode=true,name=amount"`
	// This endpoint allows you to include additional information via the `include` query string parameter.
	Include *string `queryParam:"style=form,explode=true,name=include"`
	// Set this parameter to `first` to only return the methods that
	// can be used for the first payment of a recurring sequence.
	//
	// Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
	SequenceType *components.SequenceType `queryParam:"style=form,explode=true,name=sequenceType"`
	// The identifier referring to the [profile](get-profile) you wish to
	// retrieve the resources for.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
	// organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
	ProfileID *string `queryParam:"style=form,explode=true,name=profileId"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
	// A unique key to ensure idempotent requests. This key should be a UUID v4 string.
	IdempotencyKey *string `header:"style=simple,explode=false,name=idempotency-key"`
}

func (l *ListAllMethodsRequest) GetLocale() *components.Locale {
	if l == nil {
		return nil
	}
	return l.Locale
}

func (l *ListAllMethodsRequest) GetAmount() *components.Amount {
	if l == nil {
		return nil
	}
	return l.Amount
}

func (l *ListAllMethodsRequest) GetInclude() *string {
	if l == nil {
		return nil
	}
	return l.Include
}

func (l *ListAllMethodsRequest) GetSequenceType() *components.SequenceType {
	if l == nil {
		return nil
	}
	return l.SequenceType
}

func (l *ListAllMethodsRequest) GetProfileID() *string {
	if l == nil {
		return nil
	}
	return l.ProfileID
}

func (l *ListAllMethodsRequest) GetTestmode() *bool {
	if l == nil {
		return nil
	}
	return l.Testmode
}

func (l *ListAllMethodsRequest) GetIdempotencyKey() *string {
	if l == nil {
		return nil
	}
	return l.IdempotencyKey
}

type ListAllMethodsEmbedded struct {
	// An array of payment method objects. For a complete
	// reference of the payment method object, refer to the [Get payment method endpoint](get-method)
	// documentation.
	Methods []components.EntityMethodAll `json:"methods"`
}

func (l *ListAllMethodsEmbedded) GetMethods() []components.EntityMethodAll {
	if l == nil {
		return []components.EntityMethodAll{}
	}
	return l.Methods
}

type ListAllMethodsLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self components.URLObj `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation components.URLObj `json:"documentation"`
}

func (l *ListAllMethodsLinks) GetSelf() components.URLObj {
	if l == nil {
		return components.URLObj{}
	}
	return l.Self
}

func (l *ListAllMethodsLinks) GetDocumentation() components.URLObj {
	if l == nil {
		return components.URLObj{}
	}
	return l.Documentation
}

// ListAllMethodsResponseBody - A list of payment method objects. For a complete reference of the
// payment method object, refer to the [Get payment method endpoint](get-method) documentation.
type ListAllMethodsResponseBody struct {
	// The number of payment method objects in this result set. Results are **not** paginated.
	Count    int64                  `json:"count"`
	Embedded ListAllMethodsEmbedded `json:"_embedded"`
	Links    ListAllMethodsLinks    `json:"_links"`
}

func (l *ListAllMethodsResponseBody) GetCount() int64 {
	if l == nil {
		return 0
	}
	return l.Count
}

func (l *ListAllMethodsResponseBody) GetEmbedded() ListAllMethodsEmbedded {
	if l == nil {
		return ListAllMethodsEmbedded{}
	}
	return l.Embedded
}

func (l *ListAllMethodsResponseBody) GetLinks() ListAllMethodsLinks {
	if l == nil {
		return ListAllMethodsLinks{}
	}
	return l.Links
}

type ListAllMethodsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of payment method objects. For a complete reference of the
	// payment method object, refer to the [Get payment method endpoint](get-method) documentation.
	Object *ListAllMethodsResponseBody
}

func (l *ListAllMethodsResponse) GetHTTPMeta() components.HTTPMetadata {
	if l == nil {
		return components.HTTPMetadata{}
	}
	return l.HTTPMeta
}

func (l *ListAllMethodsResponse) GetObject() *ListAllMethodsResponseBody {
	if l == nil {
		return nil
	}
	return l.Object
}
