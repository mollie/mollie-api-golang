// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type CreateWebhookRequestBody struct {
	// A name that identifies the webhook.
	Name string `json:"name"`
	// The URL Mollie will send the events to. This URL must be publicly accessible.
	URL string `json:"url"`
	// The event's type
	WebhookEventTypes components.WebhookEventTypes `json:"eventTypes"`
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
}

func (c *CreateWebhookRequestBody) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CreateWebhookRequestBody) GetURL() string {
	if c == nil {
		return ""
	}
	return c.URL
}

func (c *CreateWebhookRequestBody) GetWebhookEventTypes() components.WebhookEventTypes {
	if c == nil {
		return components.WebhookEventTypes("")
	}
	return c.WebhookEventTypes
}

func (c *CreateWebhookRequestBody) GetTestmode() *bool {
	if c == nil {
		return nil
	}
	return c.Testmode
}

type CreateWebhookRequest struct {
	// A unique key to ensure idempotent requests. This key should be a UUID v4 string.
	IdempotencyKey *string                   `header:"style=simple,explode=false,name=idempotency-key"`
	RequestBody    *CreateWebhookRequestBody `request:"mediaType=application/json"`
}

func (c *CreateWebhookRequest) GetIdempotencyKey() *string {
	if c == nil {
		return nil
	}
	return c.IdempotencyKey
}

func (c *CreateWebhookRequest) GetRequestBody() *CreateWebhookRequestBody {
	if c == nil {
		return nil
	}
	return c.RequestBody
}

type CreateWebhookResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The webhook object.
	CreateWebhook *components.CreateWebhook
}

func (c *CreateWebhookResponse) GetHTTPMeta() components.HTTPMetadata {
	if c == nil {
		return components.HTTPMetadata{}
	}
	return c.HTTPMeta
}

func (c *CreateWebhookResponse) GetCreateWebhook() *components.CreateWebhook {
	if c == nil {
		return nil
	}
	return c.CreateWebhook
}
