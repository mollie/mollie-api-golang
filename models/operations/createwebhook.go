// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// CreateWebhookEventTypes - The list of events to enable for this webhook. You may specify `'*'` to add all events, except those that require explicit selection. Separate multiple event types with a comma.
type CreateWebhookEventTypes string

const (
	CreateWebhookEventTypesPaymentLinkPaid           CreateWebhookEventTypes = "payment-link.paid"
	CreateWebhookEventTypesBalanceTransactionCreated CreateWebhookEventTypes = "balance-transaction.created"
	CreateWebhookEventTypesSalesInvoiceCreated       CreateWebhookEventTypes = "sales-invoice.created"
	CreateWebhookEventTypesSalesInvoiceIssued        CreateWebhookEventTypes = "sales-invoice.issued"
	CreateWebhookEventTypesSalesInvoiceCanceled      CreateWebhookEventTypes = "sales-invoice.canceled"
	CreateWebhookEventTypesSalesInvoicePaid          CreateWebhookEventTypes = "sales-invoice.paid"
)

func (e CreateWebhookEventTypes) ToPointer() *CreateWebhookEventTypes {
	return &e
}
func (e *CreateWebhookEventTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-link.paid":
		fallthrough
	case "balance-transaction.created":
		fallthrough
	case "sales-invoice.created":
		fallthrough
	case "sales-invoice.issued":
		fallthrough
	case "sales-invoice.canceled":
		fallthrough
	case "sales-invoice.paid":
		*e = CreateWebhookEventTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWebhookEventTypes: %v", v)
	}
}

type CreateWebhookRequest struct {
	// A name that identifies the webhook.
	Name string `json:"name"`
	// The URL Mollie will send the events to. This URL must be publicly accessible.
	URL string `json:"url"`
	// The list of events to enable for this webhook. You may specify `'*'` to add all events, except those that require explicit selection. Separate multiple event types with a comma.
	EventTypes CreateWebhookEventTypes `json:"eventTypes"`
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
}

func (o *CreateWebhookRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateWebhookRequest) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateWebhookRequest) GetEventTypes() CreateWebhookEventTypes {
	if o == nil {
		return CreateWebhookEventTypes("")
	}
	return o.EventTypes
}

func (o *CreateWebhookRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// CreateWebhookUnprocessableEntityDocumentation - The URL to the generic Mollie API error handling guide.
type CreateWebhookUnprocessableEntityDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *CreateWebhookUnprocessableEntityDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateWebhookUnprocessableEntityDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CreateWebhookUnprocessableEntityLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation CreateWebhookUnprocessableEntityDocumentation `json:"documentation"`
}

func (o *CreateWebhookUnprocessableEntityLinks) GetDocumentation() CreateWebhookUnprocessableEntityDocumentation {
	if o == nil {
		return CreateWebhookUnprocessableEntityDocumentation{}
	}
	return o.Documentation
}

// CreateWebhookStatus - The subscription's current status.
type CreateWebhookStatus string

const (
	CreateWebhookStatusEnabled  CreateWebhookStatus = "enabled"
	CreateWebhookStatusBlocked  CreateWebhookStatus = "blocked"
	CreateWebhookStatusDisabled CreateWebhookStatus = "disabled"
)

func (e CreateWebhookStatus) ToPointer() *CreateWebhookStatus {
	return &e
}

// CreateWebhookMode - The subscription's mode.
type CreateWebhookMode string

const (
	CreateWebhookModeLive CreateWebhookMode = "live"
	CreateWebhookModeTest CreateWebhookMode = "test"
)

func (e CreateWebhookMode) ToPointer() *CreateWebhookMode {
	return &e
}

// CreateWebhookDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CreateWebhookDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreateWebhookDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateWebhookDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateWebhookLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type CreateWebhookLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *CreateWebhookDocumentation `json:"documentation,omitempty"`
}

func (o *CreateWebhookLinks) GetDocumentation() *CreateWebhookDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

// CreateWebhookResponseBody - The webhook object.
type CreateWebhookResponseBody struct {
	// Indicates the response contains a webhook subscription object. Will always contain the string `webhook` for this endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this subscription.
	ID *string `json:"id,omitempty"`
	// The subscription's events destination.
	URL *string `json:"url,omitempty"`
	// The identifier uniquely referring to the profile that created the subscription.
	ProfileID *string `json:"profileId,omitempty"`
	// The subscription's date time of creation.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The subscription's name.
	Name *string `json:"name,omitempty"`
	// The events types that are subscribed.
	EventTypes []string `json:"eventTypes,omitempty"`
	// The subscription's current status.
	Status *CreateWebhookStatus `json:"status,omitempty"`
	// The subscription's mode.
	Mode *CreateWebhookMode `json:"mode,omitempty"`
	// The subscription's secret.
	WebhookSecret *string `json:"webhookSecret,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *CreateWebhookLinks `json:"_links,omitempty"`
}

func (o *CreateWebhookResponseBody) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *CreateWebhookResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateWebhookResponseBody) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *CreateWebhookResponseBody) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *CreateWebhookResponseBody) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateWebhookResponseBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateWebhookResponseBody) GetEventTypes() []string {
	if o == nil {
		return nil
	}
	return o.EventTypes
}

func (o *CreateWebhookResponseBody) GetStatus() *CreateWebhookStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateWebhookResponseBody) GetMode() *CreateWebhookMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *CreateWebhookResponseBody) GetWebhookSecret() *string {
	if o == nil {
		return nil
	}
	return o.WebhookSecret
}

func (o *CreateWebhookResponseBody) GetLinks() *CreateWebhookLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type CreateWebhookResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The webhook object.
	Object *CreateWebhookResponseBody
}

func (o *CreateWebhookResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateWebhookResponse) GetObject() *CreateWebhookResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
