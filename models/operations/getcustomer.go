// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type GetCustomerRequest struct {
	// Provide the ID of the related customer.
	CustomerID string `pathParam:"style=simple,explode=false,name=customerId"`
	// This endpoint allows you to include additional information via the `include` query string parameter.
	Include *string `queryParam:"style=form,explode=true,name=include"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
	// A unique key to ensure idempotent requests. This key should be a UUID v4 string.
	IdempotencyKey *string `header:"style=simple,explode=false,name=idempotency-key"`
}

func (o *GetCustomerRequest) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *GetCustomerRequest) GetInclude() *string {
	if o == nil {
		return nil
	}
	return o.Include
}

func (o *GetCustomerRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

func (o *GetCustomerRequest) GetIdempotencyKey() *string {
	if o == nil {
		return nil
	}
	return o.IdempotencyKey
}

// GetCustomerLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetCustomerLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self components.URLObj `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Dashboard components.URLObj `json:"dashboard"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Payments *components.URLNullable `json:"payments,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Mandates *components.URLNullable `json:"mandates,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Subscriptions *components.URLNullable `json:"subscriptions,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation components.URLObj `json:"documentation"`
}

func (o *GetCustomerLinks) GetSelf() components.URLObj {
	if o == nil {
		return components.URLObj{}
	}
	return o.Self
}

func (o *GetCustomerLinks) GetDashboard() components.URLObj {
	if o == nil {
		return components.URLObj{}
	}
	return o.Dashboard
}

func (o *GetCustomerLinks) GetPayments() *components.URLNullable {
	if o == nil {
		return nil
	}
	return o.Payments
}

func (o *GetCustomerLinks) GetMandates() *components.URLNullable {
	if o == nil {
		return nil
	}
	return o.Mandates
}

func (o *GetCustomerLinks) GetSubscriptions() *components.URLNullable {
	if o == nil {
		return nil
	}
	return o.Subscriptions
}

func (o *GetCustomerLinks) GetDocumentation() components.URLObj {
	if o == nil {
		return components.URLObj{}
	}
	return o.Documentation
}

// GetCustomerResponseBody - The customer object.
type GetCustomerResponseBody struct {
	// Indicates the response contains a customer object. Will always contain the string `customer` for this endpoint.
	Resource *string `json:"resource,omitempty"`
	ID       *string `json:"id,omitempty"`
	// Whether this entity was created in live mode or in test mode.
	Mode *components.Mode `json:"mode,omitempty"`
	// The full name of the customer.
	Name *string `json:"name,omitempty"`
	// The email address of the customer.
	Email *string `json:"email,omitempty"`
	// Allows you to preset the language to be used.
	Locale *components.LocaleResponse `json:"locale,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *components.Metadata `json:"metadata,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links  *GetCustomerLinks        `json:"_links,omitempty"`
	Events []components.EntityEvent `json:"events,omitempty"`
}

func (o *GetCustomerResponseBody) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *GetCustomerResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetCustomerResponseBody) GetMode() *components.Mode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *GetCustomerResponseBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetCustomerResponseBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetCustomerResponseBody) GetLocale() *components.LocaleResponse {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *GetCustomerResponseBody) GetMetadata() *components.Metadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *GetCustomerResponseBody) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetCustomerResponseBody) GetLinks() *GetCustomerLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *GetCustomerResponseBody) GetEvents() []components.EntityEvent {
	if o == nil {
		return nil
	}
	return o.Events
}

type GetCustomerResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The customer object.
	Object *GetCustomerResponseBody
}

func (o *GetCustomerResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetCustomerResponse) GetObject() *GetCustomerResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
