// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
)

// ListCustomersSort - Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
// newest to oldest.
type ListCustomersSort string

const (
	ListCustomersSortAsc  ListCustomersSort = "asc"
	ListCustomersSortDesc ListCustomersSort = "desc"
)

func (e ListCustomersSort) ToPointer() *ListCustomersSort {
	return &e
}
func (e *ListCustomersSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = ListCustomersSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomersSort: %v", v)
	}
}

type ListCustomersRequest struct {
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
	// result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
	// newest to oldest.
	Sort *ListCustomersSort `queryParam:"style=form,explode=true,name=sort"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *ListCustomersRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListCustomersRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListCustomersRequest) GetSort() *ListCustomersSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListCustomersRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// ListCustomersNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type ListCustomersNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListCustomersNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomersNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListCustomersNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListCustomersNotFoundDocumentation `json:"documentation"`
}

func (o *ListCustomersNotFoundLinks) GetDocumentation() ListCustomersNotFoundDocumentation {
	if o == nil {
		return ListCustomersNotFoundDocumentation{}
	}
	return o.Documentation
}

// ListCustomersBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type ListCustomersBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListCustomersBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomersBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListCustomersBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListCustomersBadRequestDocumentation `json:"documentation"`
}

func (o *ListCustomersBadRequestLinks) GetDocumentation() ListCustomersBadRequestDocumentation {
	if o == nil {
		return ListCustomersBadRequestDocumentation{}
	}
	return o.Documentation
}

// ListCustomersMode - Whether this entity was created in live mode or in test mode.
type ListCustomersMode string

const (
	ListCustomersModeLive ListCustomersMode = "live"
	ListCustomersModeTest ListCustomersMode = "test"
)

func (e ListCustomersMode) ToPointer() *ListCustomersMode {
	return &e
}

// ListCustomersLocale - Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
// absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
type ListCustomersLocale string

const (
	ListCustomersLocaleEnUs ListCustomersLocale = "en_US"
	ListCustomersLocaleEnGb ListCustomersLocale = "en_GB"
	ListCustomersLocaleNlNl ListCustomersLocale = "nl_NL"
	ListCustomersLocaleNlBe ListCustomersLocale = "nl_BE"
	ListCustomersLocaleDeDe ListCustomersLocale = "de_DE"
	ListCustomersLocaleDeAt ListCustomersLocale = "de_AT"
	ListCustomersLocaleDeCh ListCustomersLocale = "de_CH"
	ListCustomersLocaleFrFr ListCustomersLocale = "fr_FR"
	ListCustomersLocaleFrBe ListCustomersLocale = "fr_BE"
	ListCustomersLocaleEsEs ListCustomersLocale = "es_ES"
	ListCustomersLocaleCaEs ListCustomersLocale = "ca_ES"
	ListCustomersLocalePtPt ListCustomersLocale = "pt_PT"
	ListCustomersLocaleItIt ListCustomersLocale = "it_IT"
	ListCustomersLocaleNbNo ListCustomersLocale = "nb_NO"
	ListCustomersLocaleSvSe ListCustomersLocale = "sv_SE"
	ListCustomersLocaleFiFi ListCustomersLocale = "fi_FI"
	ListCustomersLocaleDaDk ListCustomersLocale = "da_DK"
	ListCustomersLocaleIsIs ListCustomersLocale = "is_IS"
	ListCustomersLocaleHuHu ListCustomersLocale = "hu_HU"
	ListCustomersLocalePlPl ListCustomersLocale = "pl_PL"
	ListCustomersLocaleLvLv ListCustomersLocale = "lv_LV"
	ListCustomersLocaleLtLt ListCustomersLocale = "lt_LT"
)

func (e ListCustomersLocale) ToPointer() *ListCustomersLocale {
	return &e
}

type ListCustomersMetadataType string

const (
	ListCustomersMetadataTypeStr        ListCustomersMetadataType = "str"
	ListCustomersMetadataTypeMapOfAny   ListCustomersMetadataType = "mapOfAny"
	ListCustomersMetadataTypeArrayOfStr ListCustomersMetadataType = "arrayOfStr"
)

// ListCustomersMetadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type ListCustomersMetadata struct {
	Str        *string        `queryParam:"inline"`
	MapOfAny   map[string]any `queryParam:"inline"`
	ArrayOfStr []string       `queryParam:"inline"`

	Type ListCustomersMetadataType
}

func CreateListCustomersMetadataStr(str string) ListCustomersMetadata {
	typ := ListCustomersMetadataTypeStr

	return ListCustomersMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateListCustomersMetadataMapOfAny(mapOfAny map[string]any) ListCustomersMetadata {
	typ := ListCustomersMetadataTypeMapOfAny

	return ListCustomersMetadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateListCustomersMetadataArrayOfStr(arrayOfStr []string) ListCustomersMetadata {
	typ := ListCustomersMetadataTypeArrayOfStr

	return ListCustomersMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ListCustomersMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = ListCustomersMetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ListCustomersMetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ListCustomersMetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListCustomersMetadata", string(data))
}

func (u ListCustomersMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ListCustomersMetadata: all fields are null")
}

// CustomerSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CustomerSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CustomerSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CustomerSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomersDashboard - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListCustomersDashboard struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomersDashboard) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomersDashboard) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomersPayments - The API resource URL of the [payments](list-payments) linked to this customer. Omitted if no such payments
// exist (yet).
type ListCustomersPayments struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListCustomersPayments) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListCustomersPayments) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListCustomersMandates - The API resource URL of the [mandates](list-mandates) linked to this customer. Omitted if no such mandates
// exist (yet).
type ListCustomersMandates struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListCustomersMandates) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListCustomersMandates) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListCustomersSubscriptions - The API resource URL of the [subscriptions](list-subscriptions) linked to this customer. Omitted if no such
// subscriptions exist (yet).
type ListCustomersSubscriptions struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListCustomersSubscriptions) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListCustomersSubscriptions) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// CustomerDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CustomerDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CustomerDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CustomerDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CustomerLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type CustomerLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self CustomerSelf `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Dashboard ListCustomersDashboard `json:"dashboard"`
	// The API resource URL of the [payments](list-payments) linked to this customer. Omitted if no such payments
	// exist (yet).
	Payments *ListCustomersPayments `json:"payments,omitempty"`
	// The API resource URL of the [mandates](list-mandates) linked to this customer. Omitted if no such mandates
	// exist (yet).
	Mandates *ListCustomersMandates `json:"mandates,omitempty"`
	// The API resource URL of the [subscriptions](list-subscriptions) linked to this customer. Omitted if no such
	// subscriptions exist (yet).
	Subscriptions *ListCustomersSubscriptions `json:"subscriptions,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation CustomerDocumentation `json:"documentation"`
}

func (o *CustomerLinks) GetSelf() CustomerSelf {
	if o == nil {
		return CustomerSelf{}
	}
	return o.Self
}

func (o *CustomerLinks) GetDashboard() ListCustomersDashboard {
	if o == nil {
		return ListCustomersDashboard{}
	}
	return o.Dashboard
}

func (o *CustomerLinks) GetPayments() *ListCustomersPayments {
	if o == nil {
		return nil
	}
	return o.Payments
}

func (o *CustomerLinks) GetMandates() *ListCustomersMandates {
	if o == nil {
		return nil
	}
	return o.Mandates
}

func (o *CustomerLinks) GetSubscriptions() *ListCustomersSubscriptions {
	if o == nil {
		return nil
	}
	return o.Subscriptions
}

func (o *CustomerLinks) GetDocumentation() CustomerDocumentation {
	if o == nil {
		return CustomerDocumentation{}
	}
	return o.Documentation
}

type ListCustomersCustomer struct {
	// Indicates the response contains a customer object. Will always contain the string `customer` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this customer. Example: `cst_vsKJpSsabw`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode ListCustomersMode `json:"mode"`
	// The full name of the customer.
	Name *string `json:"name"`
	// The email address of the customer.
	Email *string `json:"email"`
	// Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
	// absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
	Locale *ListCustomersLocale `json:"locale"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *ListCustomersMetadata `json:"metadata"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links CustomerLinks `json:"_links"`
}

func (o *ListCustomersCustomer) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *ListCustomersCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListCustomersCustomer) GetMode() ListCustomersMode {
	if o == nil {
		return ListCustomersMode("")
	}
	return o.Mode
}

func (o *ListCustomersCustomer) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListCustomersCustomer) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ListCustomersCustomer) GetLocale() *ListCustomersLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *ListCustomersCustomer) GetMetadata() *ListCustomersMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ListCustomersCustomer) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListCustomersCustomer) GetLinks() CustomerLinks {
	if o == nil {
		return CustomerLinks{}
	}
	return o.Links
}

type ListCustomersEmbedded struct {
	// An array of customer objects.
	Customers []ListCustomersCustomer `json:"customers,omitempty"`
}

func (o *ListCustomersEmbedded) GetCustomers() []ListCustomersCustomer {
	if o == nil {
		return nil
	}
	return o.Customers
}

// ListCustomersSelf - The URL to the current set of items.
type ListCustomersSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomersSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomersSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomersPrevious - The previous set of items, if available.
type ListCustomersPrevious struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListCustomersPrevious) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListCustomersPrevious) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListCustomersNext - The next set of items, if available.
type ListCustomersNext struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListCustomersNext) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListCustomersNext) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListCustomersDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListCustomersDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomersDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomersDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomersLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
type ListCustomersLinks struct {
	// The URL to the current set of items.
	Self ListCustomersSelf `json:"self"`
	// The previous set of items, if available.
	Previous *ListCustomersPrevious `json:"previous"`
	// The next set of items, if available.
	Next *ListCustomersNext `json:"next"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListCustomersDocumentation `json:"documentation"`
}

func (o *ListCustomersLinks) GetSelf() ListCustomersSelf {
	if o == nil {
		return ListCustomersSelf{}
	}
	return o.Self
}

func (o *ListCustomersLinks) GetPrevious() *ListCustomersPrevious {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *ListCustomersLinks) GetNext() *ListCustomersNext {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListCustomersLinks) GetDocumentation() ListCustomersDocumentation {
	if o == nil {
		return ListCustomersDocumentation{}
	}
	return o.Documentation
}

// ListCustomersResponseBody - A list of customer objects.
type ListCustomersResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    *int64                 `json:"count,omitempty"`
	Embedded *ListCustomersEmbedded `json:"_embedded,omitempty"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links *ListCustomersLinks `json:"_links,omitempty"`
}

func (o *ListCustomersResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ListCustomersResponseBody) GetEmbedded() *ListCustomersEmbedded {
	if o == nil {
		return nil
	}
	return o.Embedded
}

func (o *ListCustomersResponseBody) GetLinks() *ListCustomersLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type ListCustomersResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of customer objects.
	Object *ListCustomersResponseBody
}

func (o *ListCustomersResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListCustomersResponse) GetObject() *ListCustomersResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
