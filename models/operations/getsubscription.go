// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
)

type GetSubscriptionRequest struct {
	// Provide the ID of the related customer.
	CustomerID string `pathParam:"style=simple,explode=false,name=customerId"`
	// Provide the ID of the related subscription.
	SubscriptionID string `pathParam:"style=simple,explode=false,name=subscriptionId"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *GetSubscriptionRequest) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *GetSubscriptionRequest) GetSubscriptionID() string {
	if o == nil {
		return ""
	}
	return o.SubscriptionID
}

func (o *GetSubscriptionRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// GetSubscriptionNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type GetSubscriptionNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetSubscriptionNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetSubscriptionNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetSubscriptionNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetSubscriptionNotFoundDocumentation `json:"documentation"`
}

func (o *GetSubscriptionNotFoundLinks) GetDocumentation() GetSubscriptionNotFoundDocumentation {
	if o == nil {
		return GetSubscriptionNotFoundDocumentation{}
	}
	return o.Documentation
}

// GetSubscriptionMode - Whether this entity was created in live mode or in test mode.
type GetSubscriptionMode string

const (
	GetSubscriptionModeLive GetSubscriptionMode = "live"
	GetSubscriptionModeTest GetSubscriptionMode = "test"
)

func (e GetSubscriptionMode) ToPointer() *GetSubscriptionMode {
	return &e
}
func (e *GetSubscriptionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = GetSubscriptionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSubscriptionMode: %v", v)
	}
}

// GetSubscriptionStatus - The subscription's current status is directly related to the status of the underlying customer or mandate that is
// enabling the subscription.
type GetSubscriptionStatus string

const (
	GetSubscriptionStatusPending   GetSubscriptionStatus = "pending"
	GetSubscriptionStatusActive    GetSubscriptionStatus = "active"
	GetSubscriptionStatusCanceled  GetSubscriptionStatus = "canceled"
	GetSubscriptionStatusSuspended GetSubscriptionStatus = "suspended"
	GetSubscriptionStatusCompleted GetSubscriptionStatus = "completed"
)

func (e GetSubscriptionStatus) ToPointer() *GetSubscriptionStatus {
	return &e
}
func (e *GetSubscriptionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "active":
		fallthrough
	case "canceled":
		fallthrough
	case "suspended":
		fallthrough
	case "completed":
		*e = GetSubscriptionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSubscriptionStatus: %v", v)
	}
}

// GetSubscriptionAmount - The amount for each individual payment that is charged with this subscription. For example, for a monthly
// subscription of €10, the subscription amount should be set to €10.
type GetSubscriptionAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetSubscriptionAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetSubscriptionAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetSubscriptionMethod - The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
type GetSubscriptionMethod string

const (
	GetSubscriptionMethodCreditcard  GetSubscriptionMethod = "creditcard"
	GetSubscriptionMethodDirectdebit GetSubscriptionMethod = "directdebit"
	GetSubscriptionMethodPaypal      GetSubscriptionMethod = "paypal"
)

func (e GetSubscriptionMethod) ToPointer() *GetSubscriptionMethod {
	return &e
}
func (e *GetSubscriptionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "paypal":
		*e = GetSubscriptionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSubscriptionMethod: %v", v)
	}
}

// GetSubscriptionApplicationFeeAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type GetSubscriptionApplicationFeeAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetSubscriptionApplicationFeeAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetSubscriptionApplicationFeeAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetSubscriptionApplicationFee - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
//
// Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
// information.
type GetSubscriptionApplicationFee struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount      GetSubscriptionApplicationFeeAmount `json:"amount"`
	Description string                              `json:"description"`
}

func (o *GetSubscriptionApplicationFee) GetAmount() GetSubscriptionApplicationFeeAmount {
	if o == nil {
		return GetSubscriptionApplicationFeeAmount{}
	}
	return o.Amount
}

func (o *GetSubscriptionApplicationFee) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

type GetSubscriptionMetadataType string

const (
	GetSubscriptionMetadataTypeStr        GetSubscriptionMetadataType = "str"
	GetSubscriptionMetadataTypeMapOfAny   GetSubscriptionMetadataType = "mapOfAny"
	GetSubscriptionMetadataTypeArrayOfStr GetSubscriptionMetadataType = "arrayOfStr"
)

// GetSubscriptionMetadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
// Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
// 1kB.
//
// Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
type GetSubscriptionMetadata struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type GetSubscriptionMetadataType
}

func CreateGetSubscriptionMetadataStr(str string) GetSubscriptionMetadata {
	typ := GetSubscriptionMetadataTypeStr

	return GetSubscriptionMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetSubscriptionMetadataMapOfAny(mapOfAny map[string]any) GetSubscriptionMetadata {
	typ := GetSubscriptionMetadataTypeMapOfAny

	return GetSubscriptionMetadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateGetSubscriptionMetadataArrayOfStr(arrayOfStr []string) GetSubscriptionMetadata {
	typ := GetSubscriptionMetadataTypeArrayOfStr

	return GetSubscriptionMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *GetSubscriptionMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = GetSubscriptionMetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = GetSubscriptionMetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetSubscriptionMetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetSubscriptionMetadata", string(data))
}

func (u GetSubscriptionMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type GetSubscriptionMetadata: all fields are null")
}

// GetSubscriptionSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetSubscriptionSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetSubscriptionSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetSubscriptionSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetSubscriptionCustomer - The API resource URL of the [customer](get-customer) this subscription was created for.
type GetSubscriptionCustomer struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *GetSubscriptionCustomer) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *GetSubscriptionCustomer) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// GetSubscriptionMandate - The API resource URL of the [mandate](get-mandate) this subscription was created for.
type GetSubscriptionMandate struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *GetSubscriptionMandate) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *GetSubscriptionMandate) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// GetSubscriptionProfile - The API resource URL of the [profile](get-profile) this subscription was created for.
type GetSubscriptionProfile struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *GetSubscriptionProfile) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *GetSubscriptionProfile) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// GetSubscriptionPayments - The API resource URL of the [payments](list-payments) created for this subscription. Omitted if no such
// payments exist (yet).
type GetSubscriptionPayments struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *GetSubscriptionPayments) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *GetSubscriptionPayments) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// GetSubscriptionDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetSubscriptionDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetSubscriptionDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetSubscriptionDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetSubscriptionLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetSubscriptionLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self GetSubscriptionSelf `json:"self"`
	// The API resource URL of the [customer](get-customer) this subscription was created for.
	Customer *GetSubscriptionCustomer `json:"customer"`
	// The API resource URL of the [mandate](get-mandate) this subscription was created for.
	Mandate *GetSubscriptionMandate `json:"mandate,omitempty"`
	// The API resource URL of the [profile](get-profile) this subscription was created for.
	Profile *GetSubscriptionProfile `json:"profile"`
	// The API resource URL of the [payments](list-payments) created for this subscription. Omitted if no such
	// payments exist (yet).
	Payments *GetSubscriptionPayments `json:"payments,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation GetSubscriptionDocumentation `json:"documentation"`
}

func (o *GetSubscriptionLinks) GetSelf() GetSubscriptionSelf {
	if o == nil {
		return GetSubscriptionSelf{}
	}
	return o.Self
}

func (o *GetSubscriptionLinks) GetCustomer() *GetSubscriptionCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *GetSubscriptionLinks) GetMandate() *GetSubscriptionMandate {
	if o == nil {
		return nil
	}
	return o.Mandate
}

func (o *GetSubscriptionLinks) GetProfile() *GetSubscriptionProfile {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *GetSubscriptionLinks) GetPayments() *GetSubscriptionPayments {
	if o == nil {
		return nil
	}
	return o.Payments
}

func (o *GetSubscriptionLinks) GetDocumentation() GetSubscriptionDocumentation {
	if o == nil {
		return GetSubscriptionDocumentation{}
	}
	return o.Documentation
}

// GetSubscriptionResponseBody - The subscription object.
type GetSubscriptionResponseBody struct {
	// Indicates the response contains a subscription object. Will always contain the string `subscription` for this
	// endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this subscription. Example: `sub_rVKGtNd6s3`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode GetSubscriptionMode `json:"mode"`
	// The subscription's current status is directly related to the status of the underlying customer or mandate that is
	// enabling the subscription.
	Status GetSubscriptionStatus `json:"status"`
	// The amount for each individual payment that is charged with this subscription. For example, for a monthly
	// subscription of €10, the subscription amount should be set to €10.
	Amount GetSubscriptionAmount `json:"amount"`
	// Total number of payments for the subscription. Once this number of payments is reached, the subscription is
	// considered completed.
	//
	// Test mode subscriptions will get canceled automatically after 10 payments.
	Times *int64 `json:"times"`
	// Number of payments left for the subscription.
	TimesRemaining *int64 `json:"timesRemaining"`
	// Interval to wait between payments, for example `1 month` or `14 days`.
	//
	// The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval string `json:"interval"`
	// The start date of the subscription in `YYYY-MM-DD` format.
	StartDate string `json:"startDate"`
	// The date of the next scheduled payment in `YYYY-MM-DD` format. If the subscription has been completed or canceled,
	// this parameter will not be returned.
	NextPaymentDate *string `json:"nextPaymentDate,omitempty"`
	// The subscription's description will be used as the description of the resulting individual payments and so showing
	// up on the bank statement of the consumer.
	//
	// **Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
	Description string `json:"description"`
	// The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
	Method *GetSubscriptionMethod `json:"method"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
	//
	// Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
	// information.
	ApplicationFee *GetSubscriptionApplicationFee `json:"applicationFee,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
	// Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
	// 1kB.
	//
	// Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
	Metadata *GetSubscriptionMetadata `json:"metadata"`
	// We will call this URL for any payment status changes of payments resulting from this subscription.
	//
	// This webhook will receive **all** events for the subscription's payments. This may include payment failures as
	// well. Be sure to verify the payment's subscription ID and its status.
	WebhookURL string `json:"webhookUrl"`
	// The customer this subscription belongs to.
	CustomerID string `json:"customerId"`
	// The mandate used for this subscription, if any.
	MandateID *string `json:"mandateId,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The subscription's date and time of cancellation, in ISO 8601 format. This parameter is omitted if the
	// subscription is not canceled (yet).
	CanceledAt *string `json:"canceledAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links GetSubscriptionLinks `json:"_links"`
}

func (o *GetSubscriptionResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *GetSubscriptionResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetSubscriptionResponseBody) GetMode() GetSubscriptionMode {
	if o == nil {
		return GetSubscriptionMode("")
	}
	return o.Mode
}

func (o *GetSubscriptionResponseBody) GetStatus() GetSubscriptionStatus {
	if o == nil {
		return GetSubscriptionStatus("")
	}
	return o.Status
}

func (o *GetSubscriptionResponseBody) GetAmount() GetSubscriptionAmount {
	if o == nil {
		return GetSubscriptionAmount{}
	}
	return o.Amount
}

func (o *GetSubscriptionResponseBody) GetTimes() *int64 {
	if o == nil {
		return nil
	}
	return o.Times
}

func (o *GetSubscriptionResponseBody) GetTimesRemaining() *int64 {
	if o == nil {
		return nil
	}
	return o.TimesRemaining
}

func (o *GetSubscriptionResponseBody) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *GetSubscriptionResponseBody) GetStartDate() string {
	if o == nil {
		return ""
	}
	return o.StartDate
}

func (o *GetSubscriptionResponseBody) GetNextPaymentDate() *string {
	if o == nil {
		return nil
	}
	return o.NextPaymentDate
}

func (o *GetSubscriptionResponseBody) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *GetSubscriptionResponseBody) GetMethod() *GetSubscriptionMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *GetSubscriptionResponseBody) GetApplicationFee() *GetSubscriptionApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *GetSubscriptionResponseBody) GetMetadata() *GetSubscriptionMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *GetSubscriptionResponseBody) GetWebhookURL() string {
	if o == nil {
		return ""
	}
	return o.WebhookURL
}

func (o *GetSubscriptionResponseBody) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *GetSubscriptionResponseBody) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *GetSubscriptionResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GetSubscriptionResponseBody) GetCanceledAt() *string {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetSubscriptionResponseBody) GetLinks() GetSubscriptionLinks {
	if o == nil {
		return GetSubscriptionLinks{}
	}
	return o.Links
}

type GetSubscriptionResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The subscription object.
	Object *GetSubscriptionResponseBody
}

func (o *GetSubscriptionResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetSubscriptionResponse) GetObject() *GetSubscriptionResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
