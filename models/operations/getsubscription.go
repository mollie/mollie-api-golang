// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type GetSubscriptionGlobals struct {
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (g *GetSubscriptionGlobals) GetTestmode() *bool {
	if g == nil {
		return nil
	}
	return g.Testmode
}

type GetSubscriptionRequest struct {
	// Provide the ID of the related customer.
	CustomerID string `pathParam:"style=simple,explode=false,name=customerId"`
	// Provide the ID of the related subscription.
	SubscriptionID string `pathParam:"style=simple,explode=false,name=subscriptionId"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
	// A unique key to ensure idempotent requests. This key should be a UUID v4 string.
	IdempotencyKey *string `header:"style=simple,explode=false,name=idempotency-key"`
}

func (g *GetSubscriptionRequest) GetCustomerID() string {
	if g == nil {
		return ""
	}
	return g.CustomerID
}

func (g *GetSubscriptionRequest) GetSubscriptionID() string {
	if g == nil {
		return ""
	}
	return g.SubscriptionID
}

func (g *GetSubscriptionRequest) GetTestmode() *bool {
	if g == nil {
		return nil
	}
	return g.Testmode
}

func (g *GetSubscriptionRequest) GetIdempotencyKey() *string {
	if g == nil {
		return nil
	}
	return g.IdempotencyKey
}

type GetSubscriptionResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The subscription object.
	SubscriptionResponse *components.SubscriptionResponse
}

func (g *GetSubscriptionResponse) GetHTTPMeta() components.HTTPMetadata {
	if g == nil {
		return components.HTTPMetadata{}
	}
	return g.HTTPMeta
}

func (g *GetSubscriptionResponse) GetSubscriptionResponse() *components.SubscriptionResponse {
	if g == nil {
		return nil
	}
	return g.SubscriptionResponse
}
