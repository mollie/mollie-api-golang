// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
	"github.com/mollie/mollie-api-golang/types"
)

// GetPaymentInclude - This endpoint allows you to include additional information via the `include` query string parameter.
type GetPaymentInclude string

const (
	GetPaymentIncludeDetailsQrCode           GetPaymentInclude = "details.qrCode"
	GetPaymentIncludeDetailsRemainderDetails GetPaymentInclude = "details.remainderDetails"
)

func (e GetPaymentInclude) ToPointer() *GetPaymentInclude {
	return &e
}
func (e *GetPaymentInclude) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "details.qrCode":
		fallthrough
	case "details.remainderDetails":
		*e = GetPaymentInclude(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentInclude: %v", v)
	}
}

// GetPaymentEmbed - This endpoint allows embedding related API items by appending the
// following values via the `embed` query string parameter.
type GetPaymentEmbed string

const (
	GetPaymentEmbedCaptures    GetPaymentEmbed = "captures"
	GetPaymentEmbedRefunds     GetPaymentEmbed = "refunds"
	GetPaymentEmbedChargebacks GetPaymentEmbed = "chargebacks"
)

func (e GetPaymentEmbed) ToPointer() *GetPaymentEmbed {
	return &e
}
func (e *GetPaymentEmbed) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "captures":
		fallthrough
	case "refunds":
		fallthrough
	case "chargebacks":
		*e = GetPaymentEmbed(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentEmbed: %v", v)
	}
}

type GetPaymentRequest struct {
	// Provide the ID of the related payment.
	PaymentID string `pathParam:"style=simple,explode=false,name=paymentId"`
	// This endpoint allows you to include additional information via the `include` query string parameter.
	Include *GetPaymentInclude `queryParam:"style=form,explode=true,name=include"`
	// This endpoint allows embedding related API items by appending the
	// following values via the `embed` query string parameter.
	Embed *GetPaymentEmbed `queryParam:"style=form,explode=true,name=embed"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *GetPaymentRequest) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *GetPaymentRequest) GetInclude() *GetPaymentInclude {
	if o == nil {
		return nil
	}
	return o.Include
}

func (o *GetPaymentRequest) GetEmbed() *GetPaymentEmbed {
	if o == nil {
		return nil
	}
	return o.Embed
}

func (o *GetPaymentRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// GetPaymentNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type GetPaymentNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetPaymentNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetPaymentNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetPaymentNotFoundDocumentation `json:"documentation"`
}

func (o *GetPaymentNotFoundLinks) GetDocumentation() GetPaymentNotFoundDocumentation {
	if o == nil {
		return GetPaymentNotFoundDocumentation{}
	}
	return o.Documentation
}

// GetPaymentMode - Whether this entity was created in live mode or in test mode.
type GetPaymentMode string

const (
	GetPaymentModeLive GetPaymentMode = "live"
	GetPaymentModeTest GetPaymentMode = "test"
)

func (e GetPaymentMode) ToPointer() *GetPaymentMode {
	return &e
}
func (e *GetPaymentMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = GetPaymentMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentMode: %v", v)
	}
}

// GetPaymentAmount - The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge â‚¬1000.00.
//
// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
// retrieved using the Get method endpoint.
//
// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
// tip amount.
type GetPaymentAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentAmountRefunded - The total amount that is already refunded. Only available when refunds are available for this payment. For some
// payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
// costs for a return shipment to the customer.
type GetPaymentAmountRefunded struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentAmountRefunded) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentAmountRefunded) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentAmountRemaining - The remaining amount that can be refunded. Only available when refunds are available for this payment.
type GetPaymentAmountRemaining struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentAmountRemaining) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentAmountRemaining) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentAmountCaptured - The total amount that is already captured for this payment. Only available when this payment supports captures.
type GetPaymentAmountCaptured struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentAmountCaptured) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentAmountCaptured) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentAmountChargedBack - The total amount that was charged back for this payment. Only available when the total charged back amount is not
// zero.
type GetPaymentAmountChargedBack struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentAmountChargedBack) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentAmountChargedBack) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentSettlementAmount - This optional field will contain the approximate amount that will be settled to your account, converted to the
// currency your account is settled in.
//
// Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
// settled by Mollie the `settlementAmount` is omitted from the response.
//
// Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
// using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
type GetPaymentSettlementAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentSettlementAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentSettlementAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLineType - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type GetPaymentLineType string

const (
	GetPaymentLineTypePhysical    GetPaymentLineType = "physical"
	GetPaymentLineTypeDigital     GetPaymentLineType = "digital"
	GetPaymentLineTypeShippingFee GetPaymentLineType = "shipping_fee"
	GetPaymentLineTypeDiscount    GetPaymentLineType = "discount"
	GetPaymentLineTypeStoreCredit GetPaymentLineType = "store_credit"
	GetPaymentLineTypeGiftCard    GetPaymentLineType = "gift_card"
	GetPaymentLineTypeSurcharge   GetPaymentLineType = "surcharge"
	GetPaymentLineTypeTip         GetPaymentLineType = "tip"
)

func (e GetPaymentLineType) ToPointer() *GetPaymentLineType {
	return &e
}
func (e *GetPaymentLineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "physical":
		fallthrough
	case "digital":
		fallthrough
	case "shipping_fee":
		fallthrough
	case "discount":
		fallthrough
	case "store_credit":
		fallthrough
	case "gift_card":
		fallthrough
	case "surcharge":
		fallthrough
	case "tip":
		*e = GetPaymentLineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLineType: %v", v)
	}
}

// GetPaymentUnitPrice - The price of a single item including VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs â‚¬89.00 each.
//
// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
//
// The unit price can be zero in case of free items.
type GetPaymentUnitPrice struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentUnitPrice) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentUnitPrice) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentDiscountAmount - Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
// type.
type GetPaymentDiscountAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentDiscountAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentDiscountAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentTotalAmount - The total amount of the line, including VAT and discounts.
//
// Should match the following formula: `(unitPrice Ã— quantity) - discountAmount`.
//
// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
type GetPaymentTotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentTotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentTotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentVatAmount - The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
// calculated with the formula `totalAmount Ã— (vatRate / (100 + vatRate))`.
//
// Any deviations from this will result in an error.
//
// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
// `SEK 100.00 Ã— (25 / 125) = SEK 20.00`.
type GetPaymentVatAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentVatAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentVatAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetPaymentCategory string

const (
	GetPaymentCategoryMeal         GetPaymentCategory = "meal"
	GetPaymentCategoryEco          GetPaymentCategory = "eco"
	GetPaymentCategoryGift         GetPaymentCategory = "gift"
	GetPaymentCategorySportCulture GetPaymentCategory = "sport_culture"
)

func (e GetPaymentCategory) ToPointer() *GetPaymentCategory {
	return &e
}
func (e *GetPaymentCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "meal":
		fallthrough
	case "eco":
		fallthrough
	case "gift":
		fallthrough
	case "sport_culture":
		*e = GetPaymentCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentCategory: %v", v)
	}
}

// GetPaymentRecurringAmount - Total amount and currency of the recurring item.
type GetPaymentRecurringAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentRecurringAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentRecurringAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentRecurring - The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
// to inform the shopper of the details for recurring products in the payments.
type GetPaymentRecurring struct {
	// A description of the recurring item. If not present, the main description of the item will be used.
	Description *string `json:"description,omitempty"`
	// Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval string `json:"interval"`
	// Total amount and currency of the recurring item.
	Amount *GetPaymentRecurringAmount `json:"amount,omitempty"`
	// Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
	Times *int64 `json:"times,omitempty"`
	// The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
	StartDate *string `json:"startDate,omitempty"`
}

func (o *GetPaymentRecurring) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetPaymentRecurring) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *GetPaymentRecurring) GetAmount() *GetPaymentRecurringAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *GetPaymentRecurring) GetTimes() *int64 {
	if o == nil {
		return nil
	}
	return o.Times
}

func (o *GetPaymentRecurring) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

type GetPaymentLine struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *GetPaymentLineType `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// The price of a single item including VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs â‚¬89.00 each.
	//
	// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
	//
	// The unit price can be zero in case of free items.
	UnitPrice GetPaymentUnitPrice `json:"unitPrice"`
	// Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
	// type.
	DiscountAmount *GetPaymentDiscountAmount `json:"discountAmount,omitempty"`
	// The total amount of the line, including VAT and discounts.
	//
	// Should match the following formula: `(unitPrice Ã— quantity) - discountAmount`.
	//
	// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
	TotalAmount GetPaymentTotalAmount `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
	// calculated with the formula `totalAmount Ã— (vatRate / (100 + vatRate))`.
	//
	// Any deviations from this will result in an error.
	//
	// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
	// `SEK 100.00 Ã— (25 / 125) = SEK 20.00`.
	VatAmount *GetPaymentVatAmount `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []GetPaymentCategory `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string `json:"productUrl,omitempty"`
	// The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
	// to inform the shopper of the details for recurring products in the payments.
	Recurring *GetPaymentRecurring `json:"recurring,omitempty"`
}

func (o *GetPaymentLine) GetType() *GetPaymentLineType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetPaymentLine) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *GetPaymentLine) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *GetPaymentLine) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *GetPaymentLine) GetUnitPrice() GetPaymentUnitPrice {
	if o == nil {
		return GetPaymentUnitPrice{}
	}
	return o.UnitPrice
}

func (o *GetPaymentLine) GetDiscountAmount() *GetPaymentDiscountAmount {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *GetPaymentLine) GetTotalAmount() GetPaymentTotalAmount {
	if o == nil {
		return GetPaymentTotalAmount{}
	}
	return o.TotalAmount
}

func (o *GetPaymentLine) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *GetPaymentLine) GetVatAmount() *GetPaymentVatAmount {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *GetPaymentLine) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *GetPaymentLine) GetCategories() []GetPaymentCategory {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *GetPaymentLine) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *GetPaymentLine) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}

func (o *GetPaymentLine) GetRecurring() *GetPaymentRecurring {
	if o == nil {
		return nil
	}
	return o.Recurring
}

// GetPaymentBillingAddress - The customer's billing address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
//
// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
type GetPaymentBillingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *GetPaymentBillingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *GetPaymentBillingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *GetPaymentBillingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *GetPaymentBillingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *GetPaymentBillingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *GetPaymentBillingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *GetPaymentBillingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *GetPaymentBillingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetPaymentBillingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *GetPaymentBillingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *GetPaymentBillingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *GetPaymentBillingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// GetPaymentShippingAddress - The customer's shipping address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
type GetPaymentShippingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *GetPaymentShippingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *GetPaymentShippingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *GetPaymentShippingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *GetPaymentShippingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *GetPaymentShippingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *GetPaymentShippingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *GetPaymentShippingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *GetPaymentShippingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetPaymentShippingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *GetPaymentShippingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *GetPaymentShippingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *GetPaymentShippingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// GetPaymentLocale - Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
// locale, but our hosted payment pages currently only support the specified languages.
//
// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
// customer use a local bank account greatly increases the conversion and speed of payment.
type GetPaymentLocale string

const (
	GetPaymentLocaleEnUs GetPaymentLocale = "en_US"
	GetPaymentLocaleEnGb GetPaymentLocale = "en_GB"
	GetPaymentLocaleNlNl GetPaymentLocale = "nl_NL"
	GetPaymentLocaleNlBe GetPaymentLocale = "nl_BE"
	GetPaymentLocaleDeDe GetPaymentLocale = "de_DE"
	GetPaymentLocaleDeAt GetPaymentLocale = "de_AT"
	GetPaymentLocaleDeCh GetPaymentLocale = "de_CH"
	GetPaymentLocaleFrFr GetPaymentLocale = "fr_FR"
	GetPaymentLocaleFrBe GetPaymentLocale = "fr_BE"
	GetPaymentLocaleEsEs GetPaymentLocale = "es_ES"
	GetPaymentLocaleCaEs GetPaymentLocale = "ca_ES"
	GetPaymentLocalePtPt GetPaymentLocale = "pt_PT"
	GetPaymentLocaleItIt GetPaymentLocale = "it_IT"
	GetPaymentLocaleNbNo GetPaymentLocale = "nb_NO"
	GetPaymentLocaleSvSe GetPaymentLocale = "sv_SE"
	GetPaymentLocaleFiFi GetPaymentLocale = "fi_FI"
	GetPaymentLocaleDaDk GetPaymentLocale = "da_DK"
	GetPaymentLocaleIsIs GetPaymentLocale = "is_IS"
	GetPaymentLocaleHuHu GetPaymentLocale = "hu_HU"
	GetPaymentLocalePlPl GetPaymentLocale = "pl_PL"
	GetPaymentLocaleLvLv GetPaymentLocale = "lv_LV"
	GetPaymentLocaleLtLt GetPaymentLocale = "lt_LT"
)

func (e GetPaymentLocale) ToPointer() *GetPaymentLocale {
	return &e
}
func (e *GetPaymentLocale) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		fallthrough
	case "es_ES":
		fallthrough
	case "ca_ES":
		fallthrough
	case "pt_PT":
		fallthrough
	case "it_IT":
		fallthrough
	case "nb_NO":
		fallthrough
	case "sv_SE":
		fallthrough
	case "fi_FI":
		fallthrough
	case "da_DK":
		fallthrough
	case "is_IS":
		fallthrough
	case "hu_HU":
		fallthrough
	case "pl_PL":
		fallthrough
	case "lv_LV":
		fallthrough
	case "lt_LT":
		*e = GetPaymentLocale(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLocale: %v", v)
	}
}

// GetPaymentMethod - The payment method used for this transaction. If a specific method was selected during payment initialization,
// this field reflects that choice.
type GetPaymentMethod string

const (
	GetPaymentMethodAlma           GetPaymentMethod = "alma"
	GetPaymentMethodApplepay       GetPaymentMethod = "applepay"
	GetPaymentMethodBacs           GetPaymentMethod = "bacs"
	GetPaymentMethodBancomatpay    GetPaymentMethod = "bancomatpay"
	GetPaymentMethodBancontact     GetPaymentMethod = "bancontact"
	GetPaymentMethodBanktransfer   GetPaymentMethod = "banktransfer"
	GetPaymentMethodBelfius        GetPaymentMethod = "belfius"
	GetPaymentMethodBillie         GetPaymentMethod = "billie"
	GetPaymentMethodBizum          GetPaymentMethod = "bizum"
	GetPaymentMethodBlik           GetPaymentMethod = "blik"
	GetPaymentMethodCreditcard     GetPaymentMethod = "creditcard"
	GetPaymentMethodDirectdebit    GetPaymentMethod = "directdebit"
	GetPaymentMethodEps            GetPaymentMethod = "eps"
	GetPaymentMethodGiftcard       GetPaymentMethod = "giftcard"
	GetPaymentMethodIdeal          GetPaymentMethod = "ideal"
	GetPaymentMethodIn3            GetPaymentMethod = "in3"
	GetPaymentMethodKbc            GetPaymentMethod = "kbc"
	GetPaymentMethodKlarna         GetPaymentMethod = "klarna"
	GetPaymentMethodKlarnapaylater GetPaymentMethod = "klarnapaylater"
	GetPaymentMethodKlarnapaynow   GetPaymentMethod = "klarnapaynow"
	GetPaymentMethodKlarnasliceit  GetPaymentMethod = "klarnasliceit"
	GetPaymentMethodMbway          GetPaymentMethod = "mbway"
	GetPaymentMethodMultibanco     GetPaymentMethod = "multibanco"
	GetPaymentMethodMybank         GetPaymentMethod = "mybank"
	GetPaymentMethodPaybybank      GetPaymentMethod = "paybybank"
	GetPaymentMethodPayconiq       GetPaymentMethod = "payconiq"
	GetPaymentMethodPaypal         GetPaymentMethod = "paypal"
	GetPaymentMethodPaysafecard    GetPaymentMethod = "paysafecard"
	GetPaymentMethodPointofsale    GetPaymentMethod = "pointofsale"
	GetPaymentMethodPrzelewy24     GetPaymentMethod = "przelewy24"
	GetPaymentMethodRiverty        GetPaymentMethod = "riverty"
	GetPaymentMethodSatispay       GetPaymentMethod = "satispay"
	GetPaymentMethodSwish          GetPaymentMethod = "swish"
	GetPaymentMethodTrustly        GetPaymentMethod = "trustly"
	GetPaymentMethodTwint          GetPaymentMethod = "twint"
	GetPaymentMethodVoucher        GetPaymentMethod = "voucher"
)

func (e GetPaymentMethod) ToPointer() *GetPaymentMethod {
	return &e
}
func (e *GetPaymentMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "applepay":
		fallthrough
	case "bacs":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "kbc":
		fallthrough
	case "klarna":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "pointofsale":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = GetPaymentMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentMethod: %v", v)
	}
}

type GetPaymentMetadataType string

const (
	GetPaymentMetadataTypeStr        GetPaymentMetadataType = "str"
	GetPaymentMetadataTypeMapOfAny   GetPaymentMetadataType = "mapOfAny"
	GetPaymentMetadataTypeArrayOfStr GetPaymentMetadataType = "arrayOfStr"
)

// GetPaymentMetadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type GetPaymentMetadata struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type GetPaymentMetadataType
}

func CreateGetPaymentMetadataStr(str string) GetPaymentMetadata {
	typ := GetPaymentMetadataTypeStr

	return GetPaymentMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetPaymentMetadataMapOfAny(mapOfAny map[string]any) GetPaymentMetadata {
	typ := GetPaymentMetadataTypeMapOfAny

	return GetPaymentMetadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateGetPaymentMetadataArrayOfStr(arrayOfStr []string) GetPaymentMetadata {
	typ := GetPaymentMetadataTypeArrayOfStr

	return GetPaymentMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *GetPaymentMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = GetPaymentMetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = GetPaymentMetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetPaymentMetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetPaymentMetadata", string(data))
}

func (u GetPaymentMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type GetPaymentMetadata: all fields are null")
}

// GetPaymentCaptureMode - Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
// and capture at a later time.
//
// This field needs to be set to `manual` for method `riverty`.
type GetPaymentCaptureMode string

const (
	GetPaymentCaptureModeAutomatic GetPaymentCaptureMode = "automatic"
	GetPaymentCaptureModeManual    GetPaymentCaptureMode = "manual"
)

func (e GetPaymentCaptureMode) ToPointer() *GetPaymentCaptureMode {
	return &e
}
func (e *GetPaymentCaptureMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automatic":
		fallthrough
	case "manual":
		*e = GetPaymentCaptureMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentCaptureMode: %v", v)
	}
}

// GetPaymentApplicationFeeAmount - The fee that you wish to charge.
//
// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
// a â‚¬0.99 fee on a â‚¬1.00 payment.
type GetPaymentApplicationFeeAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentApplicationFeeAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentApplicationFeeAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentApplicationFee - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
//
// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
// `routing` parameter.
type GetPaymentApplicationFee struct {
	// The fee that you wish to charge.
	//
	// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
	// a â‚¬0.99 fee on a â‚¬1.00 payment.
	Amount *GetPaymentApplicationFeeAmount `json:"amount,omitempty"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description *string `json:"description,omitempty"`
}

func (o *GetPaymentApplicationFee) GetAmount() *GetPaymentApplicationFeeAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *GetPaymentApplicationFee) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// GetPaymentRoutingMode - Whether this entity was created in live mode or in test mode.
type GetPaymentRoutingMode string

const (
	GetPaymentRoutingModeLive GetPaymentRoutingMode = "live"
	GetPaymentRoutingModeTest GetPaymentRoutingMode = "test"
)

func (e GetPaymentRoutingMode) ToPointer() *GetPaymentRoutingMode {
	return &e
}
func (e *GetPaymentRoutingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = GetPaymentRoutingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentRoutingMode: %v", v)
	}
}

// GetPaymentRoutingAmount - The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
type GetPaymentRoutingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentRoutingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentRoutingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentRoutingType - The type of destination. Currently only the destination type `organization` is supported.
type GetPaymentRoutingType string

const (
	GetPaymentRoutingTypeOrganization GetPaymentRoutingType = "organization"
)

func (e GetPaymentRoutingType) ToPointer() *GetPaymentRoutingType {
	return &e
}
func (e *GetPaymentRoutingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organization":
		*e = GetPaymentRoutingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentRoutingType: %v", v)
	}
}

// GetPaymentDestination - The destination of this portion of the payment.
type GetPaymentDestination struct {
	// The type of destination. Currently only the destination type `organization` is supported.
	Type GetPaymentRoutingType `json:"type"`
	// Required for destination type `organization`. The ID of the connected organization the funds should be
	// routed to.
	OrganizationID string `json:"organizationId"`
}

func (o *GetPaymentDestination) GetType() GetPaymentRoutingType {
	if o == nil {
		return GetPaymentRoutingType("")
	}
	return o.Type
}

func (o *GetPaymentDestination) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

// GetPaymentRoutingSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetPaymentRoutingSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentRoutingSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentRoutingSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentPayment - The API resource URL of the [payment](get-payment) that belong to this route.
type GetPaymentPayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentPayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentPayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentRoutingLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetPaymentRoutingLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self GetPaymentRoutingSelf `json:"self"`
	// The API resource URL of the [payment](get-payment) that belong to this route.
	Payment GetPaymentPayment `json:"payment"`
}

func (o *GetPaymentRoutingLinks) GetSelf() GetPaymentRoutingSelf {
	if o == nil {
		return GetPaymentRoutingSelf{}
	}
	return o.Self
}

func (o *GetPaymentRoutingLinks) GetPayment() GetPaymentPayment {
	if o == nil {
		return GetPaymentPayment{}
	}
	return o.Payment
}

type GetPaymentRouting struct {
	// Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this route. Mollie will always refer to the route by this ID.
	// Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode GetPaymentRoutingMode `json:"mode"`
	// The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
	Amount GetPaymentRoutingAmount `json:"amount"`
	// The destination of this portion of the payment.
	Destination GetPaymentDestination `json:"destination"`
	// The date and time when the route was created. The date is given in ISO 8601 format.
	CreatedAt string `json:"createdAt"`
	// Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
	// date must be given in `YYYY-MM-DD` format.
	//
	// If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
	ReleaseDate *string `json:"releaseDate,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links GetPaymentRoutingLinks `json:"_links"`
}

func (o *GetPaymentRouting) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *GetPaymentRouting) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetPaymentRouting) GetMode() GetPaymentRoutingMode {
	if o == nil {
		return GetPaymentRoutingMode("")
	}
	return o.Mode
}

func (o *GetPaymentRouting) GetAmount() GetPaymentRoutingAmount {
	if o == nil {
		return GetPaymentRoutingAmount{}
	}
	return o.Amount
}

func (o *GetPaymentRouting) GetDestination() GetPaymentDestination {
	if o == nil {
		return GetPaymentDestination{}
	}
	return o.Destination
}

func (o *GetPaymentRouting) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GetPaymentRouting) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *GetPaymentRouting) GetLinks() GetPaymentRoutingLinks {
	if o == nil {
		return GetPaymentRoutingLinks{}
	}
	return o.Links
}

// GetPaymentSequenceType - **Only relevant for recurring payments.**
//
// Indicate which part of a recurring sequence this payment is for.
//
// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
// on their account in the future.
//
// If set to `recurring`, the customer's card is charged automatically.
//
// Defaults to `oneoff`, which is a regular non-recurring payment.
//
// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
// are set up correctly for recurring payments.
type GetPaymentSequenceType string

const (
	GetPaymentSequenceTypeOneoff    GetPaymentSequenceType = "oneoff"
	GetPaymentSequenceTypeFirst     GetPaymentSequenceType = "first"
	GetPaymentSequenceTypeRecurring GetPaymentSequenceType = "recurring"
)

func (e GetPaymentSequenceType) ToPointer() *GetPaymentSequenceType {
	return &e
}
func (e *GetPaymentSequenceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oneoff":
		fallthrough
	case "first":
		fallthrough
	case "recurring":
		*e = GetPaymentSequenceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentSequenceType: %v", v)
	}
}

// GetPaymentStatusEnum - The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
// statuses occur at what point.
type GetPaymentStatusEnum string

const (
	GetPaymentStatusEnumOpen       GetPaymentStatusEnum = "open"
	GetPaymentStatusEnumPending    GetPaymentStatusEnum = "pending"
	GetPaymentStatusEnumAuthorized GetPaymentStatusEnum = "authorized"
	GetPaymentStatusEnumPaid       GetPaymentStatusEnum = "paid"
	GetPaymentStatusEnumCanceled   GetPaymentStatusEnum = "canceled"
	GetPaymentStatusEnumExpired    GetPaymentStatusEnum = "expired"
	GetPaymentStatusEnumFailed     GetPaymentStatusEnum = "failed"
)

func (e GetPaymentStatusEnum) ToPointer() *GetPaymentStatusEnum {
	return &e
}
func (e *GetPaymentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "pending":
		fallthrough
	case "authorized":
		fallthrough
	case "paid":
		fallthrough
	case "canceled":
		fallthrough
	case "expired":
		fallthrough
	case "failed":
		*e = GetPaymentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentStatusEnum: %v", v)
	}
}

// GetPaymentCode - A machine-readable code that indicates the reason for the payment's status.
type GetPaymentCode string

const (
	GetPaymentCodeApprovedOrCompletedSuccessfully             GetPaymentCode = "approved_or_completed_successfully"
	GetPaymentCodeReferToCardIssuer                           GetPaymentCode = "refer_to_card_issuer"
	GetPaymentCodeInvalidMerchant                             GetPaymentCode = "invalid_merchant"
	GetPaymentCodeCaptureCard                                 GetPaymentCode = "capture_card"
	GetPaymentCodeDoNotHonor                                  GetPaymentCode = "do_not_honor"
	GetPaymentCodeError                                       GetPaymentCode = "error"
	GetPaymentCodePartialApproval                             GetPaymentCode = "partial_approval"
	GetPaymentCodeInvalidTransaction                          GetPaymentCode = "invalid_transaction"
	GetPaymentCodeInvalidAmount                               GetPaymentCode = "invalid_amount"
	GetPaymentCodeInvalidIssuer                               GetPaymentCode = "invalid_issuer"
	GetPaymentCodeLostCard                                    GetPaymentCode = "lost_card"
	GetPaymentCodeStolenCard                                  GetPaymentCode = "stolen_card"
	GetPaymentCodeInsufficientFunds                           GetPaymentCode = "insufficient_funds"
	GetPaymentCodeExpiredCard                                 GetPaymentCode = "expired_card"
	GetPaymentCodeInvalidPin                                  GetPaymentCode = "invalid_pin"
	GetPaymentCodeTransactionNotPermittedToCardholder         GetPaymentCode = "transaction_not_permitted_to_cardholder"
	GetPaymentCodeTransactionNotAllowedAtTerminal             GetPaymentCode = "transaction_not_allowed_at_terminal"
	GetPaymentCodeExceedsWithdrawalAmountLimit                GetPaymentCode = "exceeds_withdrawal_amount_limit"
	GetPaymentCodeRestrictedCard                              GetPaymentCode = "restricted_card"
	GetPaymentCodeSecurityViolation                           GetPaymentCode = "security_violation"
	GetPaymentCodeExceedsWithdrawalCountLimit                 GetPaymentCode = "exceeds_withdrawal_count_limit"
	GetPaymentCodeAllowableNumberOfPinTriesExceeded           GetPaymentCode = "allowable_number_of_pin_tries_exceeded"
	GetPaymentCodeNoReasonToDecline                           GetPaymentCode = "no_reason_to_decline"
	GetPaymentCodeCannotVerifyPin                             GetPaymentCode = "cannot_verify_pin"
	GetPaymentCodeIssuerUnavailable                           GetPaymentCode = "issuer_unavailable"
	GetPaymentCodeUnableToRouteTransaction                    GetPaymentCode = "unable_to_route_transaction"
	GetPaymentCodeDuplicateTransaction                        GetPaymentCode = "duplicate_transaction"
	GetPaymentCodeSystemMalfunction                           GetPaymentCode = "system_malfunction"
	GetPaymentCodeHonorWithID                                 GetPaymentCode = "honor_with_id"
	GetPaymentCodeInvalidCardNumber                           GetPaymentCode = "invalid_card_number"
	GetPaymentCodeFormatError                                 GetPaymentCode = "format_error"
	GetPaymentCodeContactCardIssuer                           GetPaymentCode = "contact_card_issuer"
	GetPaymentCodePinNotChanged                               GetPaymentCode = "pin_not_changed"
	GetPaymentCodeInvalidNonexistentToAccountSpecified        GetPaymentCode = "invalid_nonexistent_to_account_specified"
	GetPaymentCodeInvalidNonexistentFromAccountSpecified      GetPaymentCode = "invalid_nonexistent_from_account_specified"
	GetPaymentCodeInvalidNonexistentAccountSpecified          GetPaymentCode = "invalid_nonexistent_account_specified"
	GetPaymentCodeLifecycleRelated                            GetPaymentCode = "lifecycle_related"
	GetPaymentCodeDomesticDebitTransactionNotAllowed          GetPaymentCode = "domestic_debit_transaction_not_allowed"
	GetPaymentCodePolicyRelated                               GetPaymentCode = "policy_related"
	GetPaymentCodeFraudSecurityRelated                        GetPaymentCode = "fraud_security_related"
	GetPaymentCodeInvalidAuthorizationLifeCycle               GetPaymentCode = "invalid_authorization_life_cycle"
	GetPaymentCodePurchaseAmountOnlyNoCashBackAllowed         GetPaymentCode = "purchase_amount_only_no_cash_back_allowed"
	GetPaymentCodeCryptographicFailure                        GetPaymentCode = "cryptographic_failure"
	GetPaymentCodeUnacceptablePin                             GetPaymentCode = "unacceptable_pin"
	GetPaymentCodeReferToCardIssuerSpecialCondition           GetPaymentCode = "refer_to_card_issuer_special_condition"
	GetPaymentCodePickUpCardSpecialCondition                  GetPaymentCode = "pick_up_card_special_condition"
	GetPaymentCodeVipApproval                                 GetPaymentCode = "vip_approval"
	GetPaymentCodeInvalidAccountNumber                        GetPaymentCode = "invalid_account_number"
	GetPaymentCodeReEnterTransaction                          GetPaymentCode = "re_enter_transaction"
	GetPaymentCodeNoActionTaken                               GetPaymentCode = "no_action_taken"
	GetPaymentCodeUnableToLocateRecord                        GetPaymentCode = "unable_to_locate_record"
	GetPaymentCodeFileTemporarilyUnavailable                  GetPaymentCode = "file_temporarily_unavailable"
	GetPaymentCodeNoCreditAccount                             GetPaymentCode = "no_credit_account"
	GetPaymentCodeClosedAccount                               GetPaymentCode = "closed_account"
	GetPaymentCodeNoCheckingAccount                           GetPaymentCode = "no_checking_account"
	GetPaymentCodeNoSavingsAccount                            GetPaymentCode = "no_savings_account"
	GetPaymentCodeSuspectedFraud                              GetPaymentCode = "suspected_fraud"
	GetPaymentCodeTransactionDoesNotFulfillAmlRequirement     GetPaymentCode = "transaction_does_not_fulfill_aml_requirement"
	GetPaymentCodePinDataRequired                             GetPaymentCode = "pin_data_required"
	GetPaymentCodeUnableToLocatePreviousMessage               GetPaymentCode = "unable_to_locate_previous_message"
	GetPaymentCodePreviousMessageLocatedInconsistentData      GetPaymentCode = "previous_message_located_inconsistent_data"
	GetPaymentCodeBlockedFirstUsed                            GetPaymentCode = "blocked_first_used"
	GetPaymentCodeTransactionReversed                         GetPaymentCode = "transaction_reversed"
	GetPaymentCodeCreditIssuerUnavailable                     GetPaymentCode = "credit_issuer_unavailable"
	GetPaymentCodePinCryptographicErrorFound                  GetPaymentCode = "pin_cryptographic_error_found"
	GetPaymentCodeNegativeOnlineCamResult                     GetPaymentCode = "negative_online_cam_result"
	GetPaymentCodeViolationOfLaw                              GetPaymentCode = "violation_of_law"
	GetPaymentCodeForceStip                                   GetPaymentCode = "force_stip"
	GetPaymentCodeCashServiceNotAvailable                     GetPaymentCode = "cash_service_not_available"
	GetPaymentCodeCashbackRequestExceedsIssuerLimit           GetPaymentCode = "cashback_request_exceeds_issuer_limit"
	GetPaymentCodeDeclineForCvv2Failure                       GetPaymentCode = "decline_for_cvv2_failure"
	GetPaymentCodeTransactionAmountExceedsPreAuthorizedAmount GetPaymentCode = "transaction_amount_exceeds_pre_authorized_amount"
	GetPaymentCodeInvalidBillerInformation                    GetPaymentCode = "invalid_biller_information"
	GetPaymentCodePinChangeUnblockRequestDeclined             GetPaymentCode = "pin_change_unblock_request_declined"
	GetPaymentCodeUnsafePin                                   GetPaymentCode = "unsafe_pin"
	GetPaymentCodeCardAuthenticationFailed                    GetPaymentCode = "card_authentication_failed"
	GetPaymentCodeStopPaymentOrder                            GetPaymentCode = "stop_payment_order"
	GetPaymentCodeRevocationOfAuthorization                   GetPaymentCode = "revocation_of_authorization"
	GetPaymentCodeRevocationOfAllAuthorizations               GetPaymentCode = "revocation_of_all_authorizations"
	GetPaymentCodeForwardToIssuerXa                           GetPaymentCode = "forward_to_issuer_xa"
	GetPaymentCodeForwardToIssuerXd                           GetPaymentCode = "forward_to_issuer_xd"
	GetPaymentCodeUnableToGoOnline                            GetPaymentCode = "unable_to_go_online"
	GetPaymentCodeAdditionalCustomerAuthenticationRequired    GetPaymentCode = "additional_customer_authentication_required"
	GetPaymentCodeMerchantIDNotFound                          GetPaymentCode = "merchant_id_not_found"
	GetPaymentCodeMerchantAccountClosed                       GetPaymentCode = "merchant_account_closed"
	GetPaymentCodeTerminalIDNotFound                          GetPaymentCode = "terminal_id_not_found"
	GetPaymentCodeTerminalClosed                              GetPaymentCode = "terminal_closed"
	GetPaymentCodeInvalidCategoryCode                         GetPaymentCode = "invalid_category_code"
	GetPaymentCodeInvalidCurrency                             GetPaymentCode = "invalid_currency"
	GetPaymentCodeMissingCvv2Cvc2                             GetPaymentCode = "missing_cvv2_cvc2"
	GetPaymentCodeCvv2NotAllowed                              GetPaymentCode = "cvv2_not_allowed"
	GetPaymentCodeMerchantNotRegisteredVbv                    GetPaymentCode = "merchant_not_registered_vbv"
	GetPaymentCodeMerchantNotRegisteredForAmex                GetPaymentCode = "merchant_not_registered_for_amex"
	GetPaymentCodeTransactionNotPermittedAtTerminal           GetPaymentCode = "transaction_not_permitted_at_terminal"
	GetPaymentCodeAgreementTerminalNotRelated                 GetPaymentCode = "agreement_terminal_not_related"
	GetPaymentCodeInvalidProcessorID                          GetPaymentCode = "invalid_processor_id"
	GetPaymentCodeInvalidMerchantData                         GetPaymentCode = "invalid_merchant_data"
	GetPaymentCodeSubMerchantAccountClosed                    GetPaymentCode = "sub_merchant_account_closed"
	GetPaymentCodeTerminalBusy                                GetPaymentCode = "terminal_busy"
	GetPaymentCodeTerminalUnreachable                         GetPaymentCode = "terminal_unreachable"
	GetPaymentCodeServiceFailed                               GetPaymentCode = "service_failed"
	GetPaymentCodeInvalidOperation                            GetPaymentCode = "invalid_operation"
	GetPaymentCodeAuthorizationError                          GetPaymentCode = "authorization_error"
	GetPaymentCodeLoginFailedWithoutReason                    GetPaymentCode = "login_failed_without_reason"
	GetPaymentCodeInvalidRetailer                             GetPaymentCode = "invalid_retailer"
	GetPaymentCodeCardDoesNotExist                            GetPaymentCode = "card_does_not_exist"
	GetPaymentCodeCardIsBlocked                               GetPaymentCode = "card_is_blocked"
	GetPaymentCodeInvalidCardID                               GetPaymentCode = "invalid_card_id"
	GetPaymentCodeCardIsTransferred                           GetPaymentCode = "card_is_transferred"
	GetPaymentCodeCardIsNotActive                             GetPaymentCode = "card_is_not_active"
	GetPaymentCodeIncorrectPurchaseValue                      GetPaymentCode = "incorrect_purchase_value"
	GetPaymentCodeCardNotAvailable                            GetPaymentCode = "card_not_available"
	GetPaymentCodeWrongCurrency                               GetPaymentCode = "wrong_currency"
	GetPaymentCodeLoginFailedUnknownUser                      GetPaymentCode = "login_failed_unknown_user"
	GetPaymentCodeLoginFailedInvalidPassword                  GetPaymentCode = "login_failed_invalid_password"
	GetPaymentCodeInvalidEanCode                              GetPaymentCode = "invalid_ean_code"
)

func (e GetPaymentCode) ToPointer() *GetPaymentCode {
	return &e
}
func (e *GetPaymentCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved_or_completed_successfully":
		fallthrough
	case "refer_to_card_issuer":
		fallthrough
	case "invalid_merchant":
		fallthrough
	case "capture_card":
		fallthrough
	case "do_not_honor":
		fallthrough
	case "error":
		fallthrough
	case "partial_approval":
		fallthrough
	case "invalid_transaction":
		fallthrough
	case "invalid_amount":
		fallthrough
	case "invalid_issuer":
		fallthrough
	case "lost_card":
		fallthrough
	case "stolen_card":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "expired_card":
		fallthrough
	case "invalid_pin":
		fallthrough
	case "transaction_not_permitted_to_cardholder":
		fallthrough
	case "transaction_not_allowed_at_terminal":
		fallthrough
	case "exceeds_withdrawal_amount_limit":
		fallthrough
	case "restricted_card":
		fallthrough
	case "security_violation":
		fallthrough
	case "exceeds_withdrawal_count_limit":
		fallthrough
	case "allowable_number_of_pin_tries_exceeded":
		fallthrough
	case "no_reason_to_decline":
		fallthrough
	case "cannot_verify_pin":
		fallthrough
	case "issuer_unavailable":
		fallthrough
	case "unable_to_route_transaction":
		fallthrough
	case "duplicate_transaction":
		fallthrough
	case "system_malfunction":
		fallthrough
	case "honor_with_id":
		fallthrough
	case "invalid_card_number":
		fallthrough
	case "format_error":
		fallthrough
	case "contact_card_issuer":
		fallthrough
	case "pin_not_changed":
		fallthrough
	case "invalid_nonexistent_to_account_specified":
		fallthrough
	case "invalid_nonexistent_from_account_specified":
		fallthrough
	case "invalid_nonexistent_account_specified":
		fallthrough
	case "lifecycle_related":
		fallthrough
	case "domestic_debit_transaction_not_allowed":
		fallthrough
	case "policy_related":
		fallthrough
	case "fraud_security_related":
		fallthrough
	case "invalid_authorization_life_cycle":
		fallthrough
	case "purchase_amount_only_no_cash_back_allowed":
		fallthrough
	case "cryptographic_failure":
		fallthrough
	case "unacceptable_pin":
		fallthrough
	case "refer_to_card_issuer_special_condition":
		fallthrough
	case "pick_up_card_special_condition":
		fallthrough
	case "vip_approval":
		fallthrough
	case "invalid_account_number":
		fallthrough
	case "re_enter_transaction":
		fallthrough
	case "no_action_taken":
		fallthrough
	case "unable_to_locate_record":
		fallthrough
	case "file_temporarily_unavailable":
		fallthrough
	case "no_credit_account":
		fallthrough
	case "closed_account":
		fallthrough
	case "no_checking_account":
		fallthrough
	case "no_savings_account":
		fallthrough
	case "suspected_fraud":
		fallthrough
	case "transaction_does_not_fulfill_aml_requirement":
		fallthrough
	case "pin_data_required":
		fallthrough
	case "unable_to_locate_previous_message":
		fallthrough
	case "previous_message_located_inconsistent_data":
		fallthrough
	case "blocked_first_used":
		fallthrough
	case "transaction_reversed":
		fallthrough
	case "credit_issuer_unavailable":
		fallthrough
	case "pin_cryptographic_error_found":
		fallthrough
	case "negative_online_cam_result":
		fallthrough
	case "violation_of_law":
		fallthrough
	case "force_stip":
		fallthrough
	case "cash_service_not_available":
		fallthrough
	case "cashback_request_exceeds_issuer_limit":
		fallthrough
	case "decline_for_cvv2_failure":
		fallthrough
	case "transaction_amount_exceeds_pre_authorized_amount":
		fallthrough
	case "invalid_biller_information":
		fallthrough
	case "pin_change_unblock_request_declined":
		fallthrough
	case "unsafe_pin":
		fallthrough
	case "card_authentication_failed":
		fallthrough
	case "stop_payment_order":
		fallthrough
	case "revocation_of_authorization":
		fallthrough
	case "revocation_of_all_authorizations":
		fallthrough
	case "forward_to_issuer_xa":
		fallthrough
	case "forward_to_issuer_xd":
		fallthrough
	case "unable_to_go_online":
		fallthrough
	case "additional_customer_authentication_required":
		fallthrough
	case "merchant_id_not_found":
		fallthrough
	case "merchant_account_closed":
		fallthrough
	case "terminal_id_not_found":
		fallthrough
	case "terminal_closed":
		fallthrough
	case "invalid_category_code":
		fallthrough
	case "invalid_currency":
		fallthrough
	case "missing_cvv2_cvc2":
		fallthrough
	case "cvv2_not_allowed":
		fallthrough
	case "merchant_not_registered_vbv":
		fallthrough
	case "merchant_not_registered_for_amex":
		fallthrough
	case "transaction_not_permitted_at_terminal":
		fallthrough
	case "agreement_terminal_not_related":
		fallthrough
	case "invalid_processor_id":
		fallthrough
	case "invalid_merchant_data":
		fallthrough
	case "sub_merchant_account_closed":
		fallthrough
	case "terminal_busy":
		fallthrough
	case "terminal_unreachable":
		fallthrough
	case "service_failed":
		fallthrough
	case "invalid_operation":
		fallthrough
	case "authorization_error":
		fallthrough
	case "login_failed_without_reason":
		fallthrough
	case "invalid_retailer":
		fallthrough
	case "card_does_not_exist":
		fallthrough
	case "card_is_blocked":
		fallthrough
	case "invalid_card_id":
		fallthrough
	case "card_is_transferred":
		fallthrough
	case "card_is_not_active":
		fallthrough
	case "incorrect_purchase_value":
		fallthrough
	case "card_not_available":
		fallthrough
	case "wrong_currency":
		fallthrough
	case "login_failed_unknown_user":
		fallthrough
	case "login_failed_invalid_password":
		fallthrough
	case "invalid_ean_code":
		*e = GetPaymentCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentCode: %v", v)
	}
}

// GetPaymentStatusReason - This object offers details about the status of a payment. Currently it is only available for point-of-sale
// payments.
//
// You can find more information about the possible values of this object on
// [this page](status-reasons).**
type GetPaymentStatusReason struct {
	Code GetPaymentCode `json:"code"`
	// A description of the status reason, localized according to the payment `locale`.
	Message string `json:"message"`
}

func (o *GetPaymentStatusReason) GetCode() GetPaymentCode {
	if o == nil {
		return GetPaymentCode("")
	}
	return o.Code
}

func (o *GetPaymentStatusReason) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

// GetPaymentCardAudition - The card's target audience, if known.
type GetPaymentCardAudition string

const (
	GetPaymentCardAuditionConsumer GetPaymentCardAudition = "consumer"
	GetPaymentCardAuditionBusiness GetPaymentCardAudition = "business"
)

func (e GetPaymentCardAudition) ToPointer() *GetPaymentCardAudition {
	return &e
}
func (e *GetPaymentCardAudition) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "business":
		*e = GetPaymentCardAudition(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentCardAudition: %v", v)
	}
}

// GetPaymentCardLabel - The card's label, if known.
type GetPaymentCardLabel string

const (
	GetPaymentCardLabelAmericanExpress GetPaymentCardLabel = "American Express"
	GetPaymentCardLabelCartaSi         GetPaymentCardLabel = "Carta Si"
	GetPaymentCardLabelCarteBleue      GetPaymentCardLabel = "Carte Bleue"
	GetPaymentCardLabelDankort         GetPaymentCardLabel = "Dankort"
	GetPaymentCardLabelDinersClub      GetPaymentCardLabel = "Diners Club"
	GetPaymentCardLabelDiscover        GetPaymentCardLabel = "Discover"
	GetPaymentCardLabelJcb             GetPaymentCardLabel = "JCB"
	GetPaymentCardLabelLaser           GetPaymentCardLabel = "Laser"
	GetPaymentCardLabelMaestro         GetPaymentCardLabel = "Maestro"
	GetPaymentCardLabelMastercard      GetPaymentCardLabel = "Mastercard"
	GetPaymentCardLabelUnionpay        GetPaymentCardLabel = "Unionpay"
	GetPaymentCardLabelVisa            GetPaymentCardLabel = "Visa"
	GetPaymentCardLabelVpay            GetPaymentCardLabel = "Vpay"
)

func (e GetPaymentCardLabel) ToPointer() *GetPaymentCardLabel {
	return &e
}
func (e *GetPaymentCardLabel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "American Express":
		fallthrough
	case "Carta Si":
		fallthrough
	case "Carte Bleue":
		fallthrough
	case "Dankort":
		fallthrough
	case "Diners Club":
		fallthrough
	case "Discover":
		fallthrough
	case "JCB":
		fallthrough
	case "Laser":
		fallthrough
	case "Maestro":
		fallthrough
	case "Mastercard":
		fallthrough
	case "Unionpay":
		fallthrough
	case "Visa":
		fallthrough
	case "Vpay":
		*e = GetPaymentCardLabel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentCardLabel: %v", v)
	}
}

// GetPaymentCardFunding - The card type.
type GetPaymentCardFunding string

const (
	GetPaymentCardFundingDebit         GetPaymentCardFunding = "debit"
	GetPaymentCardFundingCredit        GetPaymentCardFunding = "credit"
	GetPaymentCardFundingPrepaid       GetPaymentCardFunding = "prepaid"
	GetPaymentCardFundingDeferredDebit GetPaymentCardFunding = "deferred-debit"
)

func (e GetPaymentCardFunding) ToPointer() *GetPaymentCardFunding {
	return &e
}
func (e *GetPaymentCardFunding) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debit":
		fallthrough
	case "credit":
		fallthrough
	case "prepaid":
		fallthrough
	case "deferred-debit":
		*e = GetPaymentCardFunding(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentCardFunding: %v", v)
	}
}

// GetPaymentCardSecurity - The level of security applied during card processing.
type GetPaymentCardSecurity string

const (
	GetPaymentCardSecurityNormal       GetPaymentCardSecurity = "normal"
	GetPaymentCardSecurityThreedsecure GetPaymentCardSecurity = "3dsecure"
)

func (e GetPaymentCardSecurity) ToPointer() *GetPaymentCardSecurity {
	return &e
}
func (e *GetPaymentCardSecurity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "normal":
		fallthrough
	case "3dsecure":
		*e = GetPaymentCardSecurity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentCardSecurity: %v", v)
	}
}

// GetPaymentFeeRegion - The applicable card fee region.
type GetPaymentFeeRegion string

const (
	GetPaymentFeeRegionAmericanExpress  GetPaymentFeeRegion = "american-express"
	GetPaymentFeeRegionAmexIntraEea     GetPaymentFeeRegion = "amex-intra-eea"
	GetPaymentFeeRegionCarteBancaire    GetPaymentFeeRegion = "carte-bancaire"
	GetPaymentFeeRegionIntraEu          GetPaymentFeeRegion = "intra-eu"
	GetPaymentFeeRegionIntraEuCorporate GetPaymentFeeRegion = "intra-eu-corporate"
	GetPaymentFeeRegionDomestic         GetPaymentFeeRegion = "domestic"
	GetPaymentFeeRegionMaestro          GetPaymentFeeRegion = "maestro"
	GetPaymentFeeRegionOther            GetPaymentFeeRegion = "other"
	GetPaymentFeeRegionInter            GetPaymentFeeRegion = "inter"
	GetPaymentFeeRegionIntraEea         GetPaymentFeeRegion = "intra_eea"
)

func (e GetPaymentFeeRegion) ToPointer() *GetPaymentFeeRegion {
	return &e
}
func (e *GetPaymentFeeRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "american-express":
		fallthrough
	case "amex-intra-eea":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "intra-eu":
		fallthrough
	case "intra-eu-corporate":
		fallthrough
	case "domestic":
		fallthrough
	case "maestro":
		fallthrough
	case "other":
		fallthrough
	case "inter":
		fallthrough
	case "intra_eea":
		*e = GetPaymentFeeRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentFeeRegion: %v", v)
	}
}

// GetPaymentFailureReason - A failure code to help understand why the payment failed.
type GetPaymentFailureReason string

const (
	GetPaymentFailureReasonAuthenticationAbandoned      GetPaymentFailureReason = "authentication_abandoned"
	GetPaymentFailureReasonAuthenticationFailed         GetPaymentFailureReason = "authentication_failed"
	GetPaymentFailureReasonAuthenticationRequired       GetPaymentFailureReason = "authentication_required"
	GetPaymentFailureReasonAuthenticationUnavailableAcs GetPaymentFailureReason = "authentication_unavailable_acs"
	GetPaymentFailureReasonCardDeclined                 GetPaymentFailureReason = "card_declined"
	GetPaymentFailureReasonCardExpired                  GetPaymentFailureReason = "card_expired"
	GetPaymentFailureReasonInactiveCard                 GetPaymentFailureReason = "inactive_card"
	GetPaymentFailureReasonInsufficientFunds            GetPaymentFailureReason = "insufficient_funds"
	GetPaymentFailureReasonInvalidCvv                   GetPaymentFailureReason = "invalid_cvv"
	GetPaymentFailureReasonInvalidCardHolderName        GetPaymentFailureReason = "invalid_card_holder_name"
	GetPaymentFailureReasonInvalidCardNumber            GetPaymentFailureReason = "invalid_card_number"
	GetPaymentFailureReasonInvalidCardType              GetPaymentFailureReason = "invalid_card_type"
	GetPaymentFailureReasonPossibleFraud                GetPaymentFailureReason = "possible_fraud"
	GetPaymentFailureReasonRefusedByIssuer              GetPaymentFailureReason = "refused_by_issuer"
	GetPaymentFailureReasonUnknownReason                GetPaymentFailureReason = "unknown_reason"
)

func (e GetPaymentFailureReason) ToPointer() *GetPaymentFailureReason {
	return &e
}
func (e *GetPaymentFailureReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "authentication_abandoned":
		fallthrough
	case "authentication_failed":
		fallthrough
	case "authentication_required":
		fallthrough
	case "authentication_unavailable_acs":
		fallthrough
	case "card_declined":
		fallthrough
	case "card_expired":
		fallthrough
	case "inactive_card":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "invalid_cvv":
		fallthrough
	case "invalid_card_holder_name":
		fallthrough
	case "invalid_card_number":
		fallthrough
	case "invalid_card_type":
		fallthrough
	case "possible_fraud":
		fallthrough
	case "refused_by_issuer":
		fallthrough
	case "unknown_reason":
		*e = GetPaymentFailureReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentFailureReason: %v", v)
	}
}

// GetPaymentWallet - The wallet used when creating the payment.
type GetPaymentWallet string

const (
	GetPaymentWalletApplepay GetPaymentWallet = "applepay"
)

func (e GetPaymentWallet) ToPointer() *GetPaymentWallet {
	return &e
}
func (e *GetPaymentWallet) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "applepay":
		*e = GetPaymentWallet(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentWallet: %v", v)
	}
}

// GetPaymentSellerProtection - Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
// payments, and if the information is made available by PayPal.
type GetPaymentSellerProtection string

const (
	GetPaymentSellerProtectionEligible                          GetPaymentSellerProtection = "Eligible"
	GetPaymentSellerProtectionIneligible                        GetPaymentSellerProtection = "Ineligible"
	GetPaymentSellerProtectionPartiallyEligibleInrOnly          GetPaymentSellerProtection = "Partially Eligible - INR Only"
	GetPaymentSellerProtectionPartiallyEligibleUnauthOnly       GetPaymentSellerProtection = "Partially Eligible - Unauth Only"
	GetPaymentSellerProtectionPartiallyEligible                 GetPaymentSellerProtection = "Partially Eligible"
	GetPaymentSellerProtectionNone                              GetPaymentSellerProtection = "None"
	GetPaymentSellerProtectionActive                            GetPaymentSellerProtection = "Active"
	GetPaymentSellerProtectionFraudControlUnauthPremiumEligible GetPaymentSellerProtection = "Fraud Control - Unauth Premium Eligible"
)

func (e GetPaymentSellerProtection) ToPointer() *GetPaymentSellerProtection {
	return &e
}
func (e *GetPaymentSellerProtection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Eligible":
		fallthrough
	case "Ineligible":
		fallthrough
	case "Partially Eligible - INR Only":
		fallthrough
	case "Partially Eligible - Unauth Only":
		fallthrough
	case "Partially Eligible":
		fallthrough
	case "None":
		fallthrough
	case "Active":
		fallthrough
	case "Fraud Control - Unauth Premium Eligible":
		*e = GetPaymentSellerProtection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentSellerProtection: %v", v)
	}
}

// GetPaymentPaypalFee - An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
// PayPal will not charge a fee for this transaction.
type GetPaymentPaypalFee struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentPaypalFee) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentPaypalFee) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentCardReadMethod - The method by which the card was read by the terminal.
type GetPaymentCardReadMethod string

const (
	GetPaymentCardReadMethodChip                   GetPaymentCardReadMethod = "chip"
	GetPaymentCardReadMethodMagneticStripe         GetPaymentCardReadMethod = "magnetic-stripe"
	GetPaymentCardReadMethodNearFieldCommunication GetPaymentCardReadMethod = "near-field-communication"
	GetPaymentCardReadMethodContactless            GetPaymentCardReadMethod = "contactless"
	GetPaymentCardReadMethodMoto                   GetPaymentCardReadMethod = "moto"
)

func (e GetPaymentCardReadMethod) ToPointer() *GetPaymentCardReadMethod {
	return &e
}
func (e *GetPaymentCardReadMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "chip":
		fallthrough
	case "magnetic-stripe":
		fallthrough
	case "near-field-communication":
		fallthrough
	case "contactless":
		fallthrough
	case "moto":
		*e = GetPaymentCardReadMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentCardReadMethod: %v", v)
	}
}

// GetPaymentCardVerificationMethod - The method used to verify the cardholder's identity.
type GetPaymentCardVerificationMethod string

const (
	GetPaymentCardVerificationMethodNoCvmRequired         GetPaymentCardVerificationMethod = "no-cvm-required"
	GetPaymentCardVerificationMethodOnlinePin             GetPaymentCardVerificationMethod = "online-pin"
	GetPaymentCardVerificationMethodOfflinePin            GetPaymentCardVerificationMethod = "offline-pin"
	GetPaymentCardVerificationMethodConsumerDevice        GetPaymentCardVerificationMethod = "consumer-device"
	GetPaymentCardVerificationMethodSignature             GetPaymentCardVerificationMethod = "signature"
	GetPaymentCardVerificationMethodSignatureAndOnlinePin GetPaymentCardVerificationMethod = "signature-and-online-pin"
	GetPaymentCardVerificationMethodOnlinePinAndSignature GetPaymentCardVerificationMethod = "online-pin-and-signature"
	GetPaymentCardVerificationMethodNone                  GetPaymentCardVerificationMethod = "none"
	GetPaymentCardVerificationMethodFailed                GetPaymentCardVerificationMethod = "failed"
)

func (e GetPaymentCardVerificationMethod) ToPointer() *GetPaymentCardVerificationMethod {
	return &e
}
func (e *GetPaymentCardVerificationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "no-cvm-required":
		fallthrough
	case "online-pin":
		fallthrough
	case "offline-pin":
		fallthrough
	case "consumer-device":
		fallthrough
	case "signature":
		fallthrough
	case "signature-and-online-pin":
		fallthrough
	case "online-pin-and-signature":
		fallthrough
	case "none":
		fallthrough
	case "failed":
		*e = GetPaymentCardVerificationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentCardVerificationMethod: %v", v)
	}
}

// GetPaymentReceipt - The Point of sale receipt object.
type GetPaymentReceipt struct {
	// A unique code provided by the cardholderâ€™s bank to confirm that the transaction was successfully approved.
	AuthorizationCode *string `json:"authorizationCode,omitempty"`
	// The unique number that identifies a specific payment application on a chip card.
	ApplicationIdentifier *string `json:"applicationIdentifier,omitempty"`
	// The method by which the card was read by the terminal.
	CardReadMethod *GetPaymentCardReadMethod `json:"cardReadMethod,omitempty"`
	// The method used to verify the cardholder's identity.
	CardVerificationMethod *GetPaymentCardVerificationMethod `json:"cardVerificationMethod,omitempty"`
}

func (o *GetPaymentReceipt) GetAuthorizationCode() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizationCode
}

func (o *GetPaymentReceipt) GetApplicationIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationIdentifier
}

func (o *GetPaymentReceipt) GetCardReadMethod() *GetPaymentCardReadMethod {
	if o == nil {
		return nil
	}
	return o.CardReadMethod
}

func (o *GetPaymentReceipt) GetCardVerificationMethod() *GetPaymentCardVerificationMethod {
	if o == nil {
		return nil
	}
	return o.CardVerificationMethod
}

// GetPaymentQrCode - Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
// the QR code details will be available in this object.
//
// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
// Bancontact QR payments can be completed by the customer using the Bancontact app.
type GetPaymentQrCode struct {
	// The height of the QR code image in pixels.
	Height *int64 `json:"height,omitempty"`
	// The width of the QR code image in pixels.
	Width *int64 `json:"width,omitempty"`
	// The URL to the QR code image. The image is a PNG file, and can be displayed directly in the browser or
	// downloaded.
	Src *string `json:"src,omitempty"`
}

func (o *GetPaymentQrCode) GetHeight() *int64 {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *GetPaymentQrCode) GetWidth() *int64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *GetPaymentQrCode) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

// GetPaymentRemainderAmount - An amount object for the amount that remained after all gift cards or vouchers were applied.
type GetPaymentRemainderAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentRemainderAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentRemainderAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentDetails - An object containing payment details collected during the payment process. For example, details may include the
// customer's card or bank details and a payment reference. For the full list of details, please refer to the
// [method-specific parameters](extra-payment-parameters) guide.
type GetPaymentDetails struct {
	// The customer's name, if made available by the payment method. For card payments, refer to details.cardHolder.
	ConsumerName *string `json:"consumerName,omitempty"`
	// The customer's account reference.
	//
	// For banking-based payment methods â€” such as iDEAL â€” this is normally either an IBAN or a domestic bank account
	// number.
	//
	// For PayPal, the account reference is an email address.
	//
	// For card and Bancontact payments, refer to details.cardNumber.
	ConsumerAccount *string `json:"consumerAccount,omitempty"`
	// The BIC of the customer's bank account, if applicable.
	ConsumerBic *string `json:"consumerBic,omitempty"`
	// For wallet payment methods â€” such as Apple Pay and PayPal â€” the shipping address is often already known by the
	// wallet provider. In these cases the shipping address may be available as a payment detail.
	ShippingAddress map[string]any `json:"shippingAddress,omitempty"`
	// For bancontact, it will be the customer's masked card number. For cards, it will be the last 4-digit of the
	// PAN. For Point-of-sale, it will be the the last 4 digits of the customer's masked card number.
	CardNumber *string `json:"cardNumber,omitempty"`
	// The name of the bank that the customer will need to make the bank transfer payment towards.
	BankName *string `json:"bankName,omitempty"`
	// The bank account number the customer will need to make the bank transfer payment towards.
	BankAccount *string `json:"bankAccount,omitempty"`
	// The BIC of the bank the customer will need to make the bank transfer payment towards.
	BankBic *string `json:"bankBic,omitempty"`
	// The Mollie-generated reference the customer needs to use when transfering the amount. Do not apply any
	// formatting here; show it to the customer as-is.
	TransferReference *string `json:"transferReference,omitempty"`
	// A unique fingerprint for a specific card. Can be used to identify returning customers.
	//
	// In the case of Point-of-sale payments, it's a unique identifier assigned to a cardholder's payment account,
	// linking multiple transactions from wallets and physical card to a single account, also across payment methods
	// or when the card is reissued.
	CardFingerprint *string `json:"cardFingerprint,omitempty"`
	// The customer's name as shown on their card.
	CardHolder *string `json:"cardHolder,omitempty"`
	// The card's target audience, if known.
	CardAudition *GetPaymentCardAudition `json:"cardAudition,omitempty"`
	// The card's label, if known.
	CardLabel *GetPaymentCardLabel `json:"cardLabel,omitempty"`
	// The ISO 3166-1 alpha-2 country code of the country the card was issued in.
	CardCountryCode *string `json:"cardCountryCode,omitempty"`
	// The expiry date (MM/YY) of the card as displayed on the card.
	CardExpiryDate *string `json:"cardExpiryDate,omitempty"`
	// The card type.
	CardFunding *GetPaymentCardFunding `json:"cardFunding,omitempty"`
	// The level of security applied during card processing.
	CardSecurity *GetPaymentCardSecurity `json:"cardSecurity,omitempty"`
	// The applicable card fee region.
	FeeRegion *GetPaymentFeeRegion `json:"feeRegion,omitempty"`
	// The first 6 and last 4 digits of the card number.
	CardMaskedNumber *string `json:"cardMaskedNumber,omitempty"`
	// The outcome of authentication attempted on transactions enforced by 3DS (ie valid only for oneoff and first).
	Card3dsEci *string `json:"card3dsEci,omitempty"`
	// The first 6 digit of the card bank identification number.
	CardBin *string `json:"cardBin,omitempty"`
	// The issuer of the Card.
	CardIssuer *string `json:"cardIssuer,omitempty"`
	// A failure code to help understand why the payment failed.
	FailureReason *GetPaymentFailureReason `json:"failureReason,omitempty"`
	// A human-friendly failure message that can be shown to the customer. The message is translated in accordance
	// with the payment's locale setting.
	FailureMessage *string `json:"failureMessage,omitempty"`
	// The wallet used when creating the payment.
	Wallet *GetPaymentWallet `json:"wallet,omitempty"`
	// PayPal's reference for the payment.
	PaypalReference *string `json:"paypalReference,omitempty"`
	// ID of the customer's PayPal account.
	PaypalPayerID *string `json:"paypalPayerId,omitempty"`
	// Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
	// payments, and if the information is made available by PayPal.
	SellerProtection *GetPaymentSellerProtection `json:"sellerProtection,omitempty"`
	// An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
	// PayPal will not charge a fee for this transaction.
	PaypalFee *GetPaymentPaypalFee `json:"paypalFee,omitempty"`
	// The paysafecard customer reference either provided via the API or otherwise auto-generated by Mollie.
	CustomerReference *string `json:"customerReference,omitempty"`
	// The ID of the terminal device where the payment took place on.
	TerminalID *string `json:"terminalId,omitempty"`
	// The first 6 digits & last 4 digits of the customer's masked card number.
	MaskedNumber *string `json:"maskedNumber,omitempty"`
	// The Point of sale receipt object.
	Receipt *GetPaymentReceipt `json:"receipt,omitempty"`
	// The creditor identifier indicates who is authorized to execute the payment. In this case, it is a
	// reference to Mollie.
	CreditorIdentifier *string `json:"creditorIdentifier,omitempty"`
	// Estimated date the payment is debited from the customer's bank account, in YYYY-MM-DD format.
	DueDate *types.Date `json:"dueDate,omitempty"`
	// Date the payment has been signed by the customer, in YYYY-MM-DD format. Only available if the payment
	// has been signed.
	SignatureDate *types.Date `json:"signatureDate,omitempty"`
	// The official reason why this payment has failed. A detailed description of each reason is available on the
	// website of the European Payments Council.
	BankReasonCode *string `json:"bankReasonCode,omitempty"`
	// A human-friendly description of the failure reason.
	BankReason *string `json:"bankReason,omitempty"`
	// The end-to-end identifier you provided in the batch file.
	EndToEndIdentifier *string `json:"endToEndIdentifier,omitempty"`
	// The mandate reference you provided in the batch file.
	MandateReference *string `json:"mandateReference,omitempty"`
	// The batch reference you provided in the batch file.
	BatchReference *string `json:"batchReference,omitempty"`
	// The file reference you provided in the batch file.
	FileReference *string `json:"fileReference,omitempty"`
	// Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
	// the QR code details will be available in this object.
	//
	// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
	// Bancontact QR payments can be completed by the customer using the Bancontact app.
	QrCode *GetPaymentQrCode `json:"qrCode,omitempty"`
	// For payments with gift cards: the masked gift card number of the first gift card applied to the payment.
	VoucherNumber *string `json:"voucherNumber,omitempty"`
	// An array of detail objects for each gift card that was used on this payment, if any.
	Giftcards []map[string]any `json:"giftcards,omitempty"`
	// For payments with vouchers: the brand name of the first voucher applied.
	Issuer *string `json:"issuer,omitempty"`
	// An array of detail objects for each voucher that was used on this payment, if any.
	Vouchers []map[string]any `json:"vouchers,omitempty"`
	// An amount object for the amount that remained after all gift cards or vouchers were applied.
	RemainderAmount *GetPaymentRemainderAmount `json:"remainderAmount,omitempty"`
	// The payment method used to pay the remainder amount, after all gift cards or vouchers were applied.
	RemainderMethod *string `json:"remainderMethod,omitempty"`
	// Optional include. The full payment method details of the remainder payment.
	RemainderDetails map[string]any `json:"remainderDetails,omitempty"`
}

func (g GetPaymentDetails) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetPaymentDetails) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetPaymentDetails) GetConsumerName() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerName
}

func (o *GetPaymentDetails) GetConsumerAccount() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerAccount
}

func (o *GetPaymentDetails) GetConsumerBic() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerBic
}

func (o *GetPaymentDetails) GetShippingAddress() map[string]any {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *GetPaymentDetails) GetCardNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardNumber
}

func (o *GetPaymentDetails) GetBankName() *string {
	if o == nil {
		return nil
	}
	return o.BankName
}

func (o *GetPaymentDetails) GetBankAccount() *string {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *GetPaymentDetails) GetBankBic() *string {
	if o == nil {
		return nil
	}
	return o.BankBic
}

func (o *GetPaymentDetails) GetTransferReference() *string {
	if o == nil {
		return nil
	}
	return o.TransferReference
}

func (o *GetPaymentDetails) GetCardFingerprint() *string {
	if o == nil {
		return nil
	}
	return o.CardFingerprint
}

func (o *GetPaymentDetails) GetCardHolder() *string {
	if o == nil {
		return nil
	}
	return o.CardHolder
}

func (o *GetPaymentDetails) GetCardAudition() *GetPaymentCardAudition {
	if o == nil {
		return nil
	}
	return o.CardAudition
}

func (o *GetPaymentDetails) GetCardLabel() *GetPaymentCardLabel {
	if o == nil {
		return nil
	}
	return o.CardLabel
}

func (o *GetPaymentDetails) GetCardCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CardCountryCode
}

func (o *GetPaymentDetails) GetCardExpiryDate() *string {
	if o == nil {
		return nil
	}
	return o.CardExpiryDate
}

func (o *GetPaymentDetails) GetCardFunding() *GetPaymentCardFunding {
	if o == nil {
		return nil
	}
	return o.CardFunding
}

func (o *GetPaymentDetails) GetCardSecurity() *GetPaymentCardSecurity {
	if o == nil {
		return nil
	}
	return o.CardSecurity
}

func (o *GetPaymentDetails) GetFeeRegion() *GetPaymentFeeRegion {
	if o == nil {
		return nil
	}
	return o.FeeRegion
}

func (o *GetPaymentDetails) GetCardMaskedNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardMaskedNumber
}

func (o *GetPaymentDetails) GetCard3dsEci() *string {
	if o == nil {
		return nil
	}
	return o.Card3dsEci
}

func (o *GetPaymentDetails) GetCardBin() *string {
	if o == nil {
		return nil
	}
	return o.CardBin
}

func (o *GetPaymentDetails) GetCardIssuer() *string {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *GetPaymentDetails) GetFailureReason() *GetPaymentFailureReason {
	if o == nil {
		return nil
	}
	return o.FailureReason
}

func (o *GetPaymentDetails) GetFailureMessage() *string {
	if o == nil {
		return nil
	}
	return o.FailureMessage
}

func (o *GetPaymentDetails) GetWallet() *GetPaymentWallet {
	if o == nil {
		return nil
	}
	return o.Wallet
}

func (o *GetPaymentDetails) GetPaypalReference() *string {
	if o == nil {
		return nil
	}
	return o.PaypalReference
}

func (o *GetPaymentDetails) GetPaypalPayerID() *string {
	if o == nil {
		return nil
	}
	return o.PaypalPayerID
}

func (o *GetPaymentDetails) GetSellerProtection() *GetPaymentSellerProtection {
	if o == nil {
		return nil
	}
	return o.SellerProtection
}

func (o *GetPaymentDetails) GetPaypalFee() *GetPaymentPaypalFee {
	if o == nil {
		return nil
	}
	return o.PaypalFee
}

func (o *GetPaymentDetails) GetCustomerReference() *string {
	if o == nil {
		return nil
	}
	return o.CustomerReference
}

func (o *GetPaymentDetails) GetTerminalID() *string {
	if o == nil {
		return nil
	}
	return o.TerminalID
}

func (o *GetPaymentDetails) GetMaskedNumber() *string {
	if o == nil {
		return nil
	}
	return o.MaskedNumber
}

func (o *GetPaymentDetails) GetReceipt() *GetPaymentReceipt {
	if o == nil {
		return nil
	}
	return o.Receipt
}

func (o *GetPaymentDetails) GetCreditorIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.CreditorIdentifier
}

func (o *GetPaymentDetails) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *GetPaymentDetails) GetSignatureDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.SignatureDate
}

func (o *GetPaymentDetails) GetBankReasonCode() *string {
	if o == nil {
		return nil
	}
	return o.BankReasonCode
}

func (o *GetPaymentDetails) GetBankReason() *string {
	if o == nil {
		return nil
	}
	return o.BankReason
}

func (o *GetPaymentDetails) GetEndToEndIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.EndToEndIdentifier
}

func (o *GetPaymentDetails) GetMandateReference() *string {
	if o == nil {
		return nil
	}
	return o.MandateReference
}

func (o *GetPaymentDetails) GetBatchReference() *string {
	if o == nil {
		return nil
	}
	return o.BatchReference
}

func (o *GetPaymentDetails) GetFileReference() *string {
	if o == nil {
		return nil
	}
	return o.FileReference
}

func (o *GetPaymentDetails) GetQrCode() *GetPaymentQrCode {
	if o == nil {
		return nil
	}
	return o.QrCode
}

func (o *GetPaymentDetails) GetVoucherNumber() *string {
	if o == nil {
		return nil
	}
	return o.VoucherNumber
}

func (o *GetPaymentDetails) GetGiftcards() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Giftcards
}

func (o *GetPaymentDetails) GetIssuer() *string {
	if o == nil {
		return nil
	}
	return o.Issuer
}

func (o *GetPaymentDetails) GetVouchers() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Vouchers
}

func (o *GetPaymentDetails) GetRemainderAmount() *GetPaymentRemainderAmount {
	if o == nil {
		return nil
	}
	return o.RemainderAmount
}

func (o *GetPaymentDetails) GetRemainderMethod() *string {
	if o == nil {
		return nil
	}
	return o.RemainderMethod
}

func (o *GetPaymentDetails) GetRemainderDetails() map[string]any {
	if o == nil {
		return nil
	}
	return o.RemainderDetails
}

// GetPaymentSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetPaymentSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentCheckout - The URL your customer should visit to make the payment. This is where you should redirect the customer to.
type GetPaymentCheckout struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentCheckout) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentCheckout) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentMobileAppCheckout - The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
type GetPaymentMobileAppCheckout struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentMobileAppCheckout) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentMobileAppCheckout) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentChangePaymentState - For test mode payments in certain scenarios, a hosted interface is available to help you test different
// payment states.
//
// Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
// payments are executed without any user interaction.
//
// Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
// chargeback for the test payment.
type GetPaymentChangePaymentState struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentChangePaymentState) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentChangePaymentState) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentDashboard - Direct link to the payment in the Mollie Dashboard.
type GetPaymentDashboard struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentDashboard) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentDashboard) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentRefunds - The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
type GetPaymentRefunds struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentRefunds) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentRefunds) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentChargebacks - The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
// payment.
type GetPaymentChargebacks struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentChargebacks) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentChargebacks) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentCaptures - The API resource URL of the [captures](list-payment-captures) that belong to this payment.
type GetPaymentCaptures struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentCaptures) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentCaptures) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentSettlement - The API resource URL of the [settlement](get-settlement) this payment has been settled with.
// Not present if not yet settled.
type GetPaymentSettlement struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentSettlement) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentSettlement) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentCustomer - The API resource URL of the [customer](get-customer).
type GetPaymentCustomer struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentCustomer) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentCustomer) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentMandate - The API resource URL of the [mandate](get-mandate).
type GetPaymentMandate struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentMandate) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentMandate) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentSubscription - The API resource URL of the [subscription](get-subscription).
type GetPaymentSubscription struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentSubscription) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentSubscription) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentOrder - The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
// order.
type GetPaymentOrder struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentOrder) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentOrder) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentTerminal - The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
// point-of-sale payments.
type GetPaymentTerminal struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentTerminal) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentTerminal) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetPaymentDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinksStatus - Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
// successful).
type GetPaymentLinksStatus struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinksStatus) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinksStatus) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentPayOnline - Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
// bank transfer.
type GetPaymentPayOnline struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentPayOnline) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentPayOnline) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetPaymentLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self GetPaymentSelf `json:"self"`
	// The URL your customer should visit to make the payment. This is where you should redirect the customer to.
	Checkout *GetPaymentCheckout `json:"checkout,omitempty"`
	// The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
	MobileAppCheckout *GetPaymentMobileAppCheckout `json:"mobileAppCheckout,omitempty"`
	// For test mode payments in certain scenarios, a hosted interface is available to help you test different
	// payment states.
	//
	// Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
	// payments are executed without any user interaction.
	//
	// Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
	// chargeback for the test payment.
	ChangePaymentState *GetPaymentChangePaymentState `json:"changePaymentState,omitempty"`
	// Direct link to the payment in the Mollie Dashboard.
	Dashboard GetPaymentDashboard `json:"dashboard"`
	// The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
	Refunds *GetPaymentRefunds `json:"refunds,omitempty"`
	// The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
	// payment.
	Chargebacks *GetPaymentChargebacks `json:"chargebacks,omitempty"`
	// The API resource URL of the [captures](list-payment-captures) that belong to this payment.
	Captures *GetPaymentCaptures `json:"captures,omitempty"`
	// The API resource URL of the [settlement](get-settlement) this payment has been settled with.
	// Not present if not yet settled.
	Settlement *GetPaymentSettlement `json:"settlement,omitempty"`
	// The API resource URL of the [customer](get-customer).
	Customer *GetPaymentCustomer `json:"customer,omitempty"`
	// The API resource URL of the [mandate](get-mandate).
	Mandate *GetPaymentMandate `json:"mandate,omitempty"`
	// The API resource URL of the [subscription](get-subscription).
	Subscription *GetPaymentSubscription `json:"subscription,omitempty"`
	// The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
	// order.
	Order *GetPaymentOrder `json:"order,omitempty"`
	// The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
	// point-of-sale payments.
	Terminal *GetPaymentTerminal `json:"terminal,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *GetPaymentDocumentation `json:"documentation,omitempty"`
	// Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
	// successful).
	Status *GetPaymentLinksStatus `json:"status,omitempty"`
	// Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
	// bank transfer.
	PayOnline *GetPaymentPayOnline `json:"payOnline,omitempty"`
}

func (o *GetPaymentLinks) GetSelf() GetPaymentSelf {
	if o == nil {
		return GetPaymentSelf{}
	}
	return o.Self
}

func (o *GetPaymentLinks) GetCheckout() *GetPaymentCheckout {
	if o == nil {
		return nil
	}
	return o.Checkout
}

func (o *GetPaymentLinks) GetMobileAppCheckout() *GetPaymentMobileAppCheckout {
	if o == nil {
		return nil
	}
	return o.MobileAppCheckout
}

func (o *GetPaymentLinks) GetChangePaymentState() *GetPaymentChangePaymentState {
	if o == nil {
		return nil
	}
	return o.ChangePaymentState
}

func (o *GetPaymentLinks) GetDashboard() GetPaymentDashboard {
	if o == nil {
		return GetPaymentDashboard{}
	}
	return o.Dashboard
}

func (o *GetPaymentLinks) GetRefunds() *GetPaymentRefunds {
	if o == nil {
		return nil
	}
	return o.Refunds
}

func (o *GetPaymentLinks) GetChargebacks() *GetPaymentChargebacks {
	if o == nil {
		return nil
	}
	return o.Chargebacks
}

func (o *GetPaymentLinks) GetCaptures() *GetPaymentCaptures {
	if o == nil {
		return nil
	}
	return o.Captures
}

func (o *GetPaymentLinks) GetSettlement() *GetPaymentSettlement {
	if o == nil {
		return nil
	}
	return o.Settlement
}

func (o *GetPaymentLinks) GetCustomer() *GetPaymentCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *GetPaymentLinks) GetMandate() *GetPaymentMandate {
	if o == nil {
		return nil
	}
	return o.Mandate
}

func (o *GetPaymentLinks) GetSubscription() *GetPaymentSubscription {
	if o == nil {
		return nil
	}
	return o.Subscription
}

func (o *GetPaymentLinks) GetOrder() *GetPaymentOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *GetPaymentLinks) GetTerminal() *GetPaymentTerminal {
	if o == nil {
		return nil
	}
	return o.Terminal
}

func (o *GetPaymentLinks) GetDocumentation() *GetPaymentDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

func (o *GetPaymentLinks) GetStatus() *GetPaymentLinksStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetPaymentLinks) GetPayOnline() *GetPaymentPayOnline {
	if o == nil {
		return nil
	}
	return o.PayOnline
}

// GetPaymentResponseBody - The payment object.
type GetPaymentResponseBody struct {
	// Indicates the response contains a payment object. Will always contain the string `payment` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this payment. Mollie assigns this identifier at payment creation time. Mollie
	// will always refer to the payment by this ID. Example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode GetPaymentMode `json:"mode"`
	// The description of the payment. This will be shown to your customer on their card or bank statement when possible.
	// We truncate the description automatically according to the limits of the used payment method. The description is
	// also visible in any exports you generate.
	//
	// We recommend you use a unique identifier so that you can always link the payment to the order in your back office.
	// This is particularly useful for bookkeeping.
	//
	// The maximum length of the description field differs per payment method, with the absolute maximum being 255
	// characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
	Description string `json:"description"`
	// The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge â‚¬1000.00.
	//
	// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
	// retrieved using the Get method endpoint.
	//
	// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
	// tip amount.
	Amount GetPaymentAmount `json:"amount"`
	// The total amount that is already refunded. Only available when refunds are available for this payment. For some
	// payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
	// costs for a return shipment to the customer.
	AmountRefunded *GetPaymentAmountRefunded `json:"amountRefunded,omitempty"`
	// The remaining amount that can be refunded. Only available when refunds are available for this payment.
	AmountRemaining *GetPaymentAmountRemaining `json:"amountRemaining,omitempty"`
	// The total amount that is already captured for this payment. Only available when this payment supports captures.
	AmountCaptured *GetPaymentAmountCaptured `json:"amountCaptured,omitempty"`
	// The total amount that was charged back for this payment. Only available when the total charged back amount is not
	// zero.
	AmountChargedBack *GetPaymentAmountChargedBack `json:"amountChargedBack,omitempty"`
	// This optional field will contain the approximate amount that will be settled to your account, converted to the
	// currency your account is settled in.
	//
	// Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
	// settled by Mollie the `settlementAmount` is omitted from the response.
	//
	// Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
	// using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
	SettlementAmount *GetPaymentSettlementAmount `json:"settlementAmount,omitempty"`
	// The URL your customer will be redirected to after the payment process.
	//
	// It could make sense for the redirectUrl to contain a unique identifier â€“ like your order ID â€“ so you can show the
	// right page referencing the order when your customer returns.
	//
	// The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for
	// Apple Pay payments with an `applePayPaymentToken`.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not
	// provided, the customer will be redirected to the `redirectUrl` instead â€” see above.
	//
	// Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is
	// therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle
	// payment cancellations.
	CancelURL *string `json:"cancelUrl,omitempty"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines []GetPaymentLine `json:"lines,omitempty"`
	// The customer's billing address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	//
	// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
	BillingAddress *GetPaymentBillingAddress `json:"billingAddress,omitempty"`
	// The customer's shipping address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	ShippingAddress *GetPaymentShippingAddress `json:"shippingAddress,omitempty"`
	// Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
	// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
	// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
	// locale, but our hosted payment pages currently only support the specified languages.
	//
	// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
	// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
	// customer use a local bank account greatly increases the conversion and speed of payment.
	Locale *GetPaymentLocale `json:"locale,omitempty"`
	// This optional field contains your customer's ISO 3166-1 alpha-2 country code, detected by us during checkout. This
	// field is omitted if the country code was not detected.
	CountryCode *string `json:"countryCode,omitempty"`
	// The payment method used for this transaction. If a specific method was selected during payment initialization,
	// this field reflects that choice.
	Method *GetPaymentMethod `json:"method,omitempty"`
	// For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT
	// rates you have used for the order to ensure your customer's country matches the VAT country.
	//
	// Use this parameter to restrict the payment methods available to your customer to those from a single country.
	//
	// If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
	//
	// The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
	RestrictPaymentMethodsToCountry *string `json:"restrictPaymentMethodsToCountry,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *GetPaymentMetadata `json:"metadata,omitempty"`
	// Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
	// and capture at a later time.
	//
	// This field needs to be set to `manual` for method `riverty`.
	CaptureMode *GetPaymentCaptureMode `json:"captureMode,omitempty"`
	// **Only relevant if you wish to manage authorization and capturing separately.**
	//
	// Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a
	// later point either be 'captured' or canceled.
	//
	// By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a
	// capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For
	// example `8 hours` or `2 days`.
	//
	// To schedule an automatic capture, the `captureMode` must be set to `automatic`.
	//
	// The maximum delay is 7 days (168 hours).
	//
	// Possible values: `... hours` `... days`
	CaptureDelay *string `json:"captureDelay,omitempty"`
	// Indicates the date before which the payment needs to be captured, in ISO 8601 format. From this date onwards we
	// can no longer guarantee a successful capture. The parameter is omitted if the payment is not authorized (yet).
	CaptureBefore *string `json:"captureBefore,omitempty"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	//
	// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
	// `routing` parameter.
	ApplicationFee *GetPaymentApplicationFee `json:"applicationFee,omitempty"`
	// *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
	//
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you create payments on your own account that you want to split between yourself and one or more connected
	// merchants, you can use this `routing` parameter to route the payment accordingly.
	//
	// The `routing` parameter should contain an array of objects, with each object describing the destination for a
	// specific portion of the payment.
	//
	// It is not necessary to indicate in the array which portion goes to yourself. After all portions of the total
	// payment amount have been routed, the amount left will be routed to the current organization automatically.
	//
	// If instead you use OAuth to create payments on a connected merchant's account, refer to the `applicationFee`
	// parameter.
	Routing []GetPaymentRouting `json:"routing,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// Indicate which part of a recurring sequence this payment is for.
	//
	// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
	// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
	// on their account in the future.
	//
	// If set to `recurring`, the customer's card is charged automatically.
	//
	// Defaults to `oneoff`, which is a regular non-recurring payment.
	//
	// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
	// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
	// are set up correctly for recurring payments.
	SequenceType *GetPaymentSequenceType `json:"sequenceType"`
	// If the payment was automatically created via a subscription, the ID of the [subscription](get-subscription) will
	// be added to the response.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// When creating recurring payments, the ID of a specific [mandate](get-mandate) can be supplied to indicate which of
	// the customer's accounts should be credited.
	MandateID *string `json:"mandateId,omitempty"`
	// The ID of the [customer](get-customer) the payment is being created for. This is used primarily for recurring
	// payments, but can also be used on regular payments to enable single-click payments.
	//
	// If `sequenceType` is set to `recurring`, this field is required.
	CustomerID *string `json:"customerId,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// When using an API Key, the `profileId` can be omitted since it is linked to the key. However, for OAuth and
	// Organization tokens, the `profileId` is required.
	//
	// For more information, see [Authentication](authentication).
	ProfileID string `json:"profileId"`
	// The identifier referring to the [settlement](get-settlement) this payment was settled with.
	SettlementID *string `json:"settlementId,omitempty"`
	// If the payment was created for an [order](get-order), the ID of that order will be part of the response.
	OrderID *string `json:"orderId,omitempty"`
	// The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
	// statuses occur at what point.
	Status GetPaymentStatusEnum `json:"status"`
	// This object offers details about the status of a payment. Currently it is only available for point-of-sale
	// payments.
	//
	// You can find more information about the possible values of this object on
	// [this page](status-reasons).**
	StatusReason *GetPaymentStatusReason `json:"statusReason,omitempty"`
	// Whether the payment can be canceled. This parameter is omitted if the payment reaches a final state.
	IsCancelable *bool `json:"isCancelable,omitempty"`
	// An object containing payment details collected during the payment process. For example, details may include the
	// customer's card or bank details and a payment reference. For the full list of details, please refer to the
	// [method-specific parameters](extra-payment-parameters) guide.
	Details *GetPaymentDetails `json:"details,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The date and time the payment became authorized, in ISO 8601 format. This parameter is omitted if the payment is
	// not authorized (yet).
	AuthorizedAt *string `json:"authorizedAt,omitempty"`
	// The date and time the payment became paid, in ISO 8601 format. This parameter is omitted if the payment is not
	// completed (yet).
	PaidAt *string `json:"paidAt,omitempty"`
	// The date and time the payment was canceled, in ISO 8601 format. This parameter is omitted if the payment is not
	// canceled (yet).
	CanceledAt *string `json:"canceledAt,omitempty"`
	// The date and time the payment will expire, in ISO 8601 format. This parameter is omitted if the payment can no
	// longer expire.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The date and time the payment was expired, in ISO 8601 format. This parameter is omitted if the payment did not
	// expire (yet).
	ExpiredAt *string `json:"expiredAt,omitempty"`
	// The date and time the payment failed, in ISO 8601 format. This parameter is omitted if the payment did not fail
	// (yet).
	FailedAt *string `json:"failedAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links GetPaymentLinks `json:"_links"`
}

func (o *GetPaymentResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *GetPaymentResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetPaymentResponseBody) GetMode() GetPaymentMode {
	if o == nil {
		return GetPaymentMode("")
	}
	return o.Mode
}

func (o *GetPaymentResponseBody) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *GetPaymentResponseBody) GetAmount() GetPaymentAmount {
	if o == nil {
		return GetPaymentAmount{}
	}
	return o.Amount
}

func (o *GetPaymentResponseBody) GetAmountRefunded() *GetPaymentAmountRefunded {
	if o == nil {
		return nil
	}
	return o.AmountRefunded
}

func (o *GetPaymentResponseBody) GetAmountRemaining() *GetPaymentAmountRemaining {
	if o == nil {
		return nil
	}
	return o.AmountRemaining
}

func (o *GetPaymentResponseBody) GetAmountCaptured() *GetPaymentAmountCaptured {
	if o == nil {
		return nil
	}
	return o.AmountCaptured
}

func (o *GetPaymentResponseBody) GetAmountChargedBack() *GetPaymentAmountChargedBack {
	if o == nil {
		return nil
	}
	return o.AmountChargedBack
}

func (o *GetPaymentResponseBody) GetSettlementAmount() *GetPaymentSettlementAmount {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *GetPaymentResponseBody) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *GetPaymentResponseBody) GetCancelURL() *string {
	if o == nil {
		return nil
	}
	return o.CancelURL
}

func (o *GetPaymentResponseBody) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *GetPaymentResponseBody) GetLines() []GetPaymentLine {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *GetPaymentResponseBody) GetBillingAddress() *GetPaymentBillingAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *GetPaymentResponseBody) GetShippingAddress() *GetPaymentShippingAddress {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *GetPaymentResponseBody) GetLocale() *GetPaymentLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *GetPaymentResponseBody) GetCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CountryCode
}

func (o *GetPaymentResponseBody) GetMethod() *GetPaymentMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *GetPaymentResponseBody) GetRestrictPaymentMethodsToCountry() *string {
	if o == nil {
		return nil
	}
	return o.RestrictPaymentMethodsToCountry
}

func (o *GetPaymentResponseBody) GetMetadata() *GetPaymentMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *GetPaymentResponseBody) GetCaptureMode() *GetPaymentCaptureMode {
	if o == nil {
		return nil
	}
	return o.CaptureMode
}

func (o *GetPaymentResponseBody) GetCaptureDelay() *string {
	if o == nil {
		return nil
	}
	return o.CaptureDelay
}

func (o *GetPaymentResponseBody) GetCaptureBefore() *string {
	if o == nil {
		return nil
	}
	return o.CaptureBefore
}

func (o *GetPaymentResponseBody) GetApplicationFee() *GetPaymentApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *GetPaymentResponseBody) GetRouting() []GetPaymentRouting {
	if o == nil {
		return nil
	}
	return o.Routing
}

func (o *GetPaymentResponseBody) GetSequenceType() *GetPaymentSequenceType {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *GetPaymentResponseBody) GetSubscriptionID() *string {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

func (o *GetPaymentResponseBody) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *GetPaymentResponseBody) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *GetPaymentResponseBody) GetProfileID() string {
	if o == nil {
		return ""
	}
	return o.ProfileID
}

func (o *GetPaymentResponseBody) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *GetPaymentResponseBody) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *GetPaymentResponseBody) GetStatus() GetPaymentStatusEnum {
	if o == nil {
		return GetPaymentStatusEnum("")
	}
	return o.Status
}

func (o *GetPaymentResponseBody) GetStatusReason() *GetPaymentStatusReason {
	if o == nil {
		return nil
	}
	return o.StatusReason
}

func (o *GetPaymentResponseBody) GetIsCancelable() *bool {
	if o == nil {
		return nil
	}
	return o.IsCancelable
}

func (o *GetPaymentResponseBody) GetDetails() *GetPaymentDetails {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *GetPaymentResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GetPaymentResponseBody) GetAuthorizedAt() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizedAt
}

func (o *GetPaymentResponseBody) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *GetPaymentResponseBody) GetCanceledAt() *string {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetPaymentResponseBody) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *GetPaymentResponseBody) GetExpiredAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredAt
}

func (o *GetPaymentResponseBody) GetFailedAt() *string {
	if o == nil {
		return nil
	}
	return o.FailedAt
}

func (o *GetPaymentResponseBody) GetLinks() GetPaymentLinks {
	if o == nil {
		return GetPaymentLinks{}
	}
	return o.Links
}

type GetPaymentResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The payment object.
	Object *GetPaymentResponseBody
}

func (o *GetPaymentResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetPaymentResponse) GetObject() *GetPaymentResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
