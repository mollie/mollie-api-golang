// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
)

// ListSettlementRefundsEmbed - This endpoint allows embedding related API items by appending the following values via the `embed` query string
// parameter.
type ListSettlementRefundsEmbed string

const (
	ListSettlementRefundsEmbedPayment ListSettlementRefundsEmbed = "payment"
)

func (e ListSettlementRefundsEmbed) ToPointer() *ListSettlementRefundsEmbed {
	return &e
}
func (e *ListSettlementRefundsEmbed) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		*e = ListSettlementRefundsEmbed(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementRefundsEmbed: %v", v)
	}
}

type ListSettlementRefundsRequest struct {
	// Provide the ID of the related settlement.
	SettlementID string `pathParam:"style=simple,explode=false,name=settlementId"`
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
	// result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// This endpoint allows embedding related API items by appending the following values via the `embed` query string
	// parameter.
	Embed *ListSettlementRefundsEmbed `queryParam:"style=form,explode=true,name=embed"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *ListSettlementRefundsRequest) GetSettlementID() string {
	if o == nil {
		return ""
	}
	return o.SettlementID
}

func (o *ListSettlementRefundsRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListSettlementRefundsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListSettlementRefundsRequest) GetEmbed() *ListSettlementRefundsEmbed {
	if o == nil {
		return nil
	}
	return o.Embed
}

func (o *ListSettlementRefundsRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// ListSettlementRefundsNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type ListSettlementRefundsNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListSettlementRefundsNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementRefundsNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListSettlementRefundsNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListSettlementRefundsNotFoundDocumentation `json:"documentation"`
}

func (o *ListSettlementRefundsNotFoundLinks) GetDocumentation() ListSettlementRefundsNotFoundDocumentation {
	if o == nil {
		return ListSettlementRefundsNotFoundDocumentation{}
	}
	return o.Documentation
}

// ListSettlementRefundsBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type ListSettlementRefundsBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListSettlementRefundsBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementRefundsBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListSettlementRefundsBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListSettlementRefundsBadRequestDocumentation `json:"documentation"`
}

func (o *ListSettlementRefundsBadRequestLinks) GetDocumentation() ListSettlementRefundsBadRequestDocumentation {
	if o == nil {
		return ListSettlementRefundsBadRequestDocumentation{}
	}
	return o.Documentation
}

// ListSettlementRefundsMode - Whether this entity was created in live mode or in test mode.
type ListSettlementRefundsMode string

const (
	ListSettlementRefundsModeLive ListSettlementRefundsMode = "live"
	ListSettlementRefundsModeTest ListSettlementRefundsMode = "test"
)

func (e ListSettlementRefundsMode) ToPointer() *ListSettlementRefundsMode {
	return &e
}
func (e *ListSettlementRefundsMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = ListSettlementRefundsMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementRefundsMode: %v", v)
	}
}

// ListSettlementRefundsAmount - The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
// amount.
type ListSettlementRefundsAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementRefundsAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementRefundsAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementRefundsSettlementAmount - This optional field will contain the approximate amount that will be deducted from your account balance, converted
// to the currency your account is settled in.
//
// The amount is a **negative** amount.
//
// If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
// zero.
//
// Since the field contains an estimated amount during refund processing, it may change over time. For example, while
// the refund is queued the settlement amount is likely not yet available.
//
// To retrieve accurate settlement amounts we recommend using the
// [List balance transactions endpoint](list-balance-transactions) instead.
type ListSettlementRefundsSettlementAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementRefundsSettlementAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementRefundsSettlementAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type ListSettlementRefundsMetadataType string

const (
	ListSettlementRefundsMetadataTypeStr        ListSettlementRefundsMetadataType = "str"
	ListSettlementRefundsMetadataTypeMapOfAny   ListSettlementRefundsMetadataType = "mapOfAny"
	ListSettlementRefundsMetadataTypeArrayOfStr ListSettlementRefundsMetadataType = "arrayOfStr"
)

// ListSettlementRefundsMetadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type ListSettlementRefundsMetadata struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type ListSettlementRefundsMetadataType
}

func CreateListSettlementRefundsMetadataStr(str string) ListSettlementRefundsMetadata {
	typ := ListSettlementRefundsMetadataTypeStr

	return ListSettlementRefundsMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateListSettlementRefundsMetadataMapOfAny(mapOfAny map[string]any) ListSettlementRefundsMetadata {
	typ := ListSettlementRefundsMetadataTypeMapOfAny

	return ListSettlementRefundsMetadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateListSettlementRefundsMetadataArrayOfStr(arrayOfStr []string) ListSettlementRefundsMetadata {
	typ := ListSettlementRefundsMetadataTypeArrayOfStr

	return ListSettlementRefundsMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ListSettlementRefundsMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = ListSettlementRefundsMetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ListSettlementRefundsMetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ListSettlementRefundsMetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListSettlementRefundsMetadata", string(data))
}

func (u ListSettlementRefundsMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ListSettlementRefundsMetadata: all fields are null")
}

// ListSettlementRefundsStatus - Refunds may take some time to get confirmed.
type ListSettlementRefundsStatus string

const (
	ListSettlementRefundsStatusQueued     ListSettlementRefundsStatus = "queued"
	ListSettlementRefundsStatusPending    ListSettlementRefundsStatus = "pending"
	ListSettlementRefundsStatusProcessing ListSettlementRefundsStatus = "processing"
	ListSettlementRefundsStatusRefunded   ListSettlementRefundsStatus = "refunded"
	ListSettlementRefundsStatusFailed     ListSettlementRefundsStatus = "failed"
	ListSettlementRefundsStatusCanceled   ListSettlementRefundsStatus = "canceled"
)

func (e ListSettlementRefundsStatus) ToPointer() *ListSettlementRefundsStatus {
	return &e
}
func (e *ListSettlementRefundsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "queued":
		fallthrough
	case "pending":
		fallthrough
	case "processing":
		fallthrough
	case "refunded":
		fallthrough
	case "failed":
		fallthrough
	case "canceled":
		*e = ListSettlementRefundsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementRefundsStatus: %v", v)
	}
}

// ListSettlementRefundsType - Specifies the reference type
type ListSettlementRefundsType string

const (
	ListSettlementRefundsTypeAcquirerReference ListSettlementRefundsType = "acquirer-reference"
)

func (e ListSettlementRefundsType) ToPointer() *ListSettlementRefundsType {
	return &e
}
func (e *ListSettlementRefundsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "acquirer-reference":
		*e = ListSettlementRefundsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementRefundsType: %v", v)
	}
}

type ListSettlementRefundsExternalReference struct {
	// Specifies the reference type
	Type *ListSettlementRefundsType `json:"type,omitempty"`
	// Unique reference from the payment provider
	ID *string `json:"id,omitempty"`
}

func (o *ListSettlementRefundsExternalReference) GetType() *ListSettlementRefundsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListSettlementRefundsExternalReference) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ListSettlementRefundsRoutingReversalAmount - The amount that will be pulled back.
type ListSettlementRefundsRoutingReversalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementRefundsRoutingReversalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementRefundsRoutingReversalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementRefundsSource - Where the funds will be pulled back from.
type ListSettlementRefundsSource struct {
	// Required for source type `organization`. The ID of the connected organization the funds should be pulled
	// back from.
	OrganizationID *string `json:"organizationId,omitempty"`
}

func (o *ListSettlementRefundsSource) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

type ListSettlementRefundsRoutingReversal struct {
	// The amount that will be pulled back.
	Amount *ListSettlementRefundsRoutingReversalAmount `json:"amount,omitempty"`
	// Where the funds will be pulled back from.
	Source *ListSettlementRefundsSource `json:"source,omitempty"`
}

func (o *ListSettlementRefundsRoutingReversal) GetAmount() *ListSettlementRefundsRoutingReversalAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListSettlementRefundsRoutingReversal) GetSource() *ListSettlementRefundsSource {
	if o == nil {
		return nil
	}
	return o.Source
}

// ListSettlementRefundsRefundSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListSettlementRefundsRefundSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementRefundsRefundSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementRefundsRefundSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementRefundsPayment - The API resource URL of the [payment](get-payment) that this refund belongs to.
type ListSettlementRefundsPayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementRefundsPayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementRefundsPayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementRefundsSettlement - The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
// yet settled.
type ListSettlementRefundsSettlement struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSettlementRefundsSettlement) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSettlementRefundsSettlement) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSettlementRefundsRefundDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListSettlementRefundsRefundDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementRefundsRefundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementRefundsRefundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementRefundsRefundLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type ListSettlementRefundsRefundLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self ListSettlementRefundsRefundSelf `json:"self"`
	// The API resource URL of the [payment](get-payment) that this refund belongs to.
	Payment ListSettlementRefundsPayment `json:"payment"`
	// The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
	// yet settled.
	Settlement *ListSettlementRefundsSettlement `json:"settlement,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListSettlementRefundsRefundDocumentation `json:"documentation"`
}

func (o *ListSettlementRefundsRefundLinks) GetSelf() ListSettlementRefundsRefundSelf {
	if o == nil {
		return ListSettlementRefundsRefundSelf{}
	}
	return o.Self
}

func (o *ListSettlementRefundsRefundLinks) GetPayment() ListSettlementRefundsPayment {
	if o == nil {
		return ListSettlementRefundsPayment{}
	}
	return o.Payment
}

func (o *ListSettlementRefundsRefundLinks) GetSettlement() *ListSettlementRefundsSettlement {
	if o == nil {
		return nil
	}
	return o.Settlement
}

func (o *ListSettlementRefundsRefundLinks) GetDocumentation() ListSettlementRefundsRefundDocumentation {
	if o == nil {
		return ListSettlementRefundsRefundDocumentation{}
	}
	return o.Documentation
}

type ListSettlementRefundsRefund struct {
	// Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie
	// will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
	ID *string `json:"id,omitempty"`
	// Whether this entity was created in live mode or in test mode.
	Mode *ListSettlementRefundsMode `json:"mode,omitempty"`
	// The description of the refund that may be shown to your customer, depending on the payment method used.
	Description *string `json:"description,omitempty"`
	// The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
	// amount.
	Amount *ListSettlementRefundsAmount `json:"amount,omitempty"`
	// This optional field will contain the approximate amount that will be deducted from your account balance, converted
	// to the currency your account is settled in.
	//
	// The amount is a **negative** amount.
	//
	// If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
	// zero.
	//
	// Since the field contains an estimated amount during refund processing, it may change over time. For example, while
	// the refund is queued the settlement amount is likely not yet available.
	//
	// To retrieve accurate settlement amounts we recommend using the
	// [List balance transactions endpoint](list-balance-transactions) instead.
	SettlementAmount *ListSettlementRefundsSettlementAmount `json:"settlementAmount,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *ListSettlementRefundsMetadata `json:"metadata,omitempty"`
	// The unique identifier of the payment this refund was created for.
	// The full payment object can be retrieved via the payment URL in the `_links` object.
	PaymentID *string `json:"paymentId,omitempty"`
	// The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
	SettlementID *string `json:"settlementId,omitempty"`
	// Refunds may take some time to get confirmed.
	Status *ListSettlementRefundsStatus `json:"status,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt         *string                                 `json:"createdAt,omitempty"`
	ExternalReference *ListSettlementRefundsExternalReference `json:"externalReference,omitempty"`
	// *This feature is only available to marketplace operators.*
	//
	// When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
	//
	// If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
	// needs to be reversed from which merchant(s).
	//
	// If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
	RoutingReversals []ListSettlementRefundsRoutingReversal `json:"routingReversals,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *ListSettlementRefundsRefundLinks `json:"_links,omitempty"`
}

func (o *ListSettlementRefundsRefund) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *ListSettlementRefundsRefund) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ListSettlementRefundsRefund) GetMode() *ListSettlementRefundsMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *ListSettlementRefundsRefund) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListSettlementRefundsRefund) GetAmount() *ListSettlementRefundsAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListSettlementRefundsRefund) GetSettlementAmount() *ListSettlementRefundsSettlementAmount {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *ListSettlementRefundsRefund) GetMetadata() *ListSettlementRefundsMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ListSettlementRefundsRefund) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ListSettlementRefundsRefund) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *ListSettlementRefundsRefund) GetStatus() *ListSettlementRefundsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListSettlementRefundsRefund) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ListSettlementRefundsRefund) GetExternalReference() *ListSettlementRefundsExternalReference {
	if o == nil {
		return nil
	}
	return o.ExternalReference
}

func (o *ListSettlementRefundsRefund) GetRoutingReversals() []ListSettlementRefundsRoutingReversal {
	if o == nil {
		return nil
	}
	return o.RoutingReversals
}

func (o *ListSettlementRefundsRefund) GetLinks() *ListSettlementRefundsRefundLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type ListSettlementRefundsEmbedded struct {
	// An array of refund objects.
	Refunds []ListSettlementRefundsRefund `json:"refunds,omitempty"`
}

func (o *ListSettlementRefundsEmbedded) GetRefunds() []ListSettlementRefundsRefund {
	if o == nil {
		return nil
	}
	return o.Refunds
}

// ListSettlementRefundsSelf - The URL to the current set of items.
type ListSettlementRefundsSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementRefundsSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementRefundsSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementRefundsPrevious - The previous set of items, if available.
type ListSettlementRefundsPrevious struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSettlementRefundsPrevious) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSettlementRefundsPrevious) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSettlementRefundsNext - The next set of items, if available.
type ListSettlementRefundsNext struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSettlementRefundsNext) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSettlementRefundsNext) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSettlementRefundsDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListSettlementRefundsDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementRefundsDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementRefundsDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementRefundsLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
type ListSettlementRefundsLinks struct {
	// The URL to the current set of items.
	Self ListSettlementRefundsSelf `json:"self"`
	// The previous set of items, if available.
	Previous *ListSettlementRefundsPrevious `json:"previous"`
	// The next set of items, if available.
	Next *ListSettlementRefundsNext `json:"next"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListSettlementRefundsDocumentation `json:"documentation"`
}

func (o *ListSettlementRefundsLinks) GetSelf() ListSettlementRefundsSelf {
	if o == nil {
		return ListSettlementRefundsSelf{}
	}
	return o.Self
}

func (o *ListSettlementRefundsLinks) GetPrevious() *ListSettlementRefundsPrevious {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *ListSettlementRefundsLinks) GetNext() *ListSettlementRefundsNext {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListSettlementRefundsLinks) GetDocumentation() ListSettlementRefundsDocumentation {
	if o == nil {
		return ListSettlementRefundsDocumentation{}
	}
	return o.Documentation
}

// ListSettlementRefundsResponseBody - A list of refund objects. For a complete reference of the refund object, refer to the
// [Get refund endpoint](get-refund) documentation.
type ListSettlementRefundsResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    *int64                         `json:"count,omitempty"`
	Embedded *ListSettlementRefundsEmbedded `json:"_embedded,omitempty"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links *ListSettlementRefundsLinks `json:"_links,omitempty"`
}

func (o *ListSettlementRefundsResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ListSettlementRefundsResponseBody) GetEmbedded() *ListSettlementRefundsEmbedded {
	if o == nil {
		return nil
	}
	return o.Embedded
}

func (o *ListSettlementRefundsResponseBody) GetLinks() *ListSettlementRefundsLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type ListSettlementRefundsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of refund objects. For a complete reference of the refund object, refer to the
	// [Get refund endpoint](get-refund) documentation.
	Object *ListSettlementRefundsResponseBody
}

func (o *ListSettlementRefundsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListSettlementRefundsResponse) GetObject() *ListSettlementRefundsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
