// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type ListSettlementCapturesGlobals struct {
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (l *ListSettlementCapturesGlobals) GetTestmode() *bool {
	if l == nil {
		return nil
	}
	return l.Testmode
}

type ListSettlementCapturesRequest struct {
	// Provide the ID of the related settlement.
	SettlementID string `pathParam:"style=simple,explode=false,name=settlementId"`
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
	// result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// This endpoint allows embedding related API items by appending the following values via the `embed` query string
	// parameter.
	Embed *string `queryParam:"style=form,explode=true,name=embed"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
	// A unique key to ensure idempotent requests. This key should be a UUID v4 string.
	IdempotencyKey *string `header:"style=simple,explode=false,name=idempotency-key"`
}

func (l *ListSettlementCapturesRequest) GetSettlementID() string {
	if l == nil {
		return ""
	}
	return l.SettlementID
}

func (l *ListSettlementCapturesRequest) GetFrom() *string {
	if l == nil {
		return nil
	}
	return l.From
}

func (l *ListSettlementCapturesRequest) GetLimit() *int64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListSettlementCapturesRequest) GetEmbed() *string {
	if l == nil {
		return nil
	}
	return l.Embed
}

func (l *ListSettlementCapturesRequest) GetTestmode() *bool {
	if l == nil {
		return nil
	}
	return l.Testmode
}

func (l *ListSettlementCapturesRequest) GetIdempotencyKey() *string {
	if l == nil {
		return nil
	}
	return l.IdempotencyKey
}

type ListSettlementCapturesEmbedded struct {
	// An array of capture objects.
	Captures []components.CaptureResponse `json:"captures"`
}

func (l *ListSettlementCapturesEmbedded) GetCaptures() []components.CaptureResponse {
	if l == nil {
		return []components.CaptureResponse{}
	}
	return l.Captures
}

// ListSettlementCapturesResponseBody - A list of capture objects.
type ListSettlementCapturesResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    int64                          `json:"count"`
	Embedded ListSettlementCapturesEmbedded `json:"_embedded"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links components.ListLinks `json:"_links"`
}

func (l *ListSettlementCapturesResponseBody) GetCount() int64 {
	if l == nil {
		return 0
	}
	return l.Count
}

func (l *ListSettlementCapturesResponseBody) GetEmbedded() ListSettlementCapturesEmbedded {
	if l == nil {
		return ListSettlementCapturesEmbedded{}
	}
	return l.Embedded
}

func (l *ListSettlementCapturesResponseBody) GetLinks() components.ListLinks {
	if l == nil {
		return components.ListLinks{}
	}
	return l.Links
}

type ListSettlementCapturesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of capture objects.
	Object *ListSettlementCapturesResponseBody
}

func (l *ListSettlementCapturesResponse) GetHTTPMeta() components.HTTPMetadata {
	if l == nil {
		return components.HTTPMetadata{}
	}
	return l.HTTPMeta
}

func (l *ListSettlementCapturesResponse) GetObject() *ListSettlementCapturesResponseBody {
	if l == nil {
		return nil
	}
	return l.Object
}
