// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
)

// ListSettlementCapturesEmbed - This endpoint allows you to embed additional resources via the
// `embed` query string parameter.
type ListSettlementCapturesEmbed string

const (
	ListSettlementCapturesEmbedPayment ListSettlementCapturesEmbed = "payment"
)

func (e ListSettlementCapturesEmbed) ToPointer() *ListSettlementCapturesEmbed {
	return &e
}
func (e *ListSettlementCapturesEmbed) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		*e = ListSettlementCapturesEmbed(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementCapturesEmbed: %v", v)
	}
}

type ListSettlementCapturesRequest struct {
	// Provide the ID of the related settlement.
	SettlementID string `pathParam:"style=simple,explode=false,name=settlementId"`
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
	// result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// This endpoint allows you to embed additional resources via the
	// `embed` query string parameter.
	Embed *ListSettlementCapturesEmbed `queryParam:"style=form,explode=true,name=embed"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *ListSettlementCapturesRequest) GetSettlementID() string {
	if o == nil {
		return ""
	}
	return o.SettlementID
}

func (o *ListSettlementCapturesRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListSettlementCapturesRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListSettlementCapturesRequest) GetEmbed() *ListSettlementCapturesEmbed {
	if o == nil {
		return nil
	}
	return o.Embed
}

func (o *ListSettlementCapturesRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// ListSettlementCapturesNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type ListSettlementCapturesNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListSettlementCapturesNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementCapturesNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListSettlementCapturesNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListSettlementCapturesNotFoundDocumentation `json:"documentation"`
}

func (o *ListSettlementCapturesNotFoundLinks) GetDocumentation() ListSettlementCapturesNotFoundDocumentation {
	if o == nil {
		return ListSettlementCapturesNotFoundDocumentation{}
	}
	return o.Documentation
}

// ListSettlementCapturesBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type ListSettlementCapturesBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListSettlementCapturesBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementCapturesBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListSettlementCapturesBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListSettlementCapturesBadRequestDocumentation `json:"documentation"`
}

func (o *ListSettlementCapturesBadRequestLinks) GetDocumentation() ListSettlementCapturesBadRequestDocumentation {
	if o == nil {
		return ListSettlementCapturesBadRequestDocumentation{}
	}
	return o.Documentation
}

// ListSettlementCapturesMode - Whether this entity was created in live mode or in test mode.
type ListSettlementCapturesMode string

const (
	ListSettlementCapturesModeLive ListSettlementCapturesMode = "live"
	ListSettlementCapturesModeTest ListSettlementCapturesMode = "test"
)

func (e ListSettlementCapturesMode) ToPointer() *ListSettlementCapturesMode {
	return &e
}
func (e *ListSettlementCapturesMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = ListSettlementCapturesMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementCapturesMode: %v", v)
	}
}

// ListSettlementCapturesAmount - The amount captured. If no amount is provided, the full authorized amount is captured.
type ListSettlementCapturesAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementCapturesAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementCapturesAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementCapturesSettlementAmount - This optional field will contain the approximate amount that will be settled to your account, converted to the
// currency your account is settled in.
//
// Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
// accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
// instead.
type ListSettlementCapturesSettlementAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementCapturesSettlementAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementCapturesSettlementAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementCapturesStatus - The capture's status.
type ListSettlementCapturesStatus string

const (
	ListSettlementCapturesStatusPending   ListSettlementCapturesStatus = "pending"
	ListSettlementCapturesStatusSucceeded ListSettlementCapturesStatus = "succeeded"
	ListSettlementCapturesStatusFailed    ListSettlementCapturesStatus = "failed"
)

func (e ListSettlementCapturesStatus) ToPointer() *ListSettlementCapturesStatus {
	return &e
}
func (e *ListSettlementCapturesStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "succeeded":
		fallthrough
	case "failed":
		*e = ListSettlementCapturesStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementCapturesStatus: %v", v)
	}
}

type ListSettlementCapturesMetadataType string

const (
	ListSettlementCapturesMetadataTypeStr        ListSettlementCapturesMetadataType = "str"
	ListSettlementCapturesMetadataTypeMapOfAny   ListSettlementCapturesMetadataType = "mapOfAny"
	ListSettlementCapturesMetadataTypeArrayOfStr ListSettlementCapturesMetadataType = "arrayOfStr"
)

// ListSettlementCapturesMetadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type ListSettlementCapturesMetadata struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type ListSettlementCapturesMetadataType
}

func CreateListSettlementCapturesMetadataStr(str string) ListSettlementCapturesMetadata {
	typ := ListSettlementCapturesMetadataTypeStr

	return ListSettlementCapturesMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateListSettlementCapturesMetadataMapOfAny(mapOfAny map[string]any) ListSettlementCapturesMetadata {
	typ := ListSettlementCapturesMetadataTypeMapOfAny

	return ListSettlementCapturesMetadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateListSettlementCapturesMetadataArrayOfStr(arrayOfStr []string) ListSettlementCapturesMetadata {
	typ := ListSettlementCapturesMetadataTypeArrayOfStr

	return ListSettlementCapturesMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ListSettlementCapturesMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = ListSettlementCapturesMetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ListSettlementCapturesMetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ListSettlementCapturesMetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListSettlementCapturesMetadata", string(data))
}

func (u ListSettlementCapturesMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ListSettlementCapturesMetadata: all fields are null")
}

// ListSettlementCapturesCaptureSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListSettlementCapturesCaptureSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementCapturesCaptureSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementCapturesCaptureSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementCapturesPayment - The API resource URL of the [payment](get-payment) that this capture belongs to.
type ListSettlementCapturesPayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementCapturesPayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementCapturesPayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementCapturesSettlement - The API resource URL of the [settlement](get-settlement) this capture has been settled with. Not present if
// not yet settled.
type ListSettlementCapturesSettlement struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSettlementCapturesSettlement) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSettlementCapturesSettlement) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSettlementCapturesShipment - The API resource URL of the [shipment](get-shipment) this capture is associated with. Not present if
// it isn't associated with a shipment.
type ListSettlementCapturesShipment struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSettlementCapturesShipment) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSettlementCapturesShipment) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSettlementCapturesCaptureDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListSettlementCapturesCaptureDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementCapturesCaptureDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementCapturesCaptureDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementCapturesCaptureLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type ListSettlementCapturesCaptureLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self ListSettlementCapturesCaptureSelf `json:"self"`
	// The API resource URL of the [payment](get-payment) that this capture belongs to.
	Payment ListSettlementCapturesPayment `json:"payment"`
	// The API resource URL of the [settlement](get-settlement) this capture has been settled with. Not present if
	// not yet settled.
	Settlement *ListSettlementCapturesSettlement `json:"settlement,omitempty"`
	// The API resource URL of the [shipment](get-shipment) this capture is associated with. Not present if
	// it isn't associated with a shipment.
	Shipment *ListSettlementCapturesShipment `json:"shipment,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListSettlementCapturesCaptureDocumentation `json:"documentation"`
}

func (o *ListSettlementCapturesCaptureLinks) GetSelf() ListSettlementCapturesCaptureSelf {
	if o == nil {
		return ListSettlementCapturesCaptureSelf{}
	}
	return o.Self
}

func (o *ListSettlementCapturesCaptureLinks) GetPayment() ListSettlementCapturesPayment {
	if o == nil {
		return ListSettlementCapturesPayment{}
	}
	return o.Payment
}

func (o *ListSettlementCapturesCaptureLinks) GetSettlement() *ListSettlementCapturesSettlement {
	if o == nil {
		return nil
	}
	return o.Settlement
}

func (o *ListSettlementCapturesCaptureLinks) GetShipment() *ListSettlementCapturesShipment {
	if o == nil {
		return nil
	}
	return o.Shipment
}

func (o *ListSettlementCapturesCaptureLinks) GetDocumentation() ListSettlementCapturesCaptureDocumentation {
	if o == nil {
		return ListSettlementCapturesCaptureDocumentation{}
	}
	return o.Documentation
}

type ListSettlementCapturesCapture struct {
	// Indicates the response contains a capture object. Will always contain the string `capture` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this capture. Example: `cpt_mNepDkEtco6ah3QNPUGYH`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode ListSettlementCapturesMode `json:"mode"`
	// The description of the capture.
	Description *string `json:"description,omitempty"`
	// The amount captured. If no amount is provided, the full authorized amount is captured.
	Amount *ListSettlementCapturesAmount `json:"amount"`
	// This optional field will contain the approximate amount that will be settled to your account, converted to the
	// currency your account is settled in.
	//
	// Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
	// accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
	// instead.
	SettlementAmount *ListSettlementCapturesSettlementAmount `json:"settlementAmount,omitempty"`
	// The capture's status.
	Status ListSettlementCapturesStatus `json:"status"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *ListSettlementCapturesMetadata `json:"metadata,omitempty"`
	// The unique identifier of the payment this capture was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
	// The full payment object can be retrieved via the payment URL in the `_links` object.
	PaymentID string `json:"paymentId"`
	// The unique identifier of the shipment that triggered the creation of this capture, if applicable. For example:
	// `shp_gNapNy9qQTUFZYnCrCF7J`.
	ShipmentID *string `json:"shipmentId,omitempty"`
	// The identifier referring to the settlement this capture was settled with. For example, `stl_BkEjN2eBb`. This field
	// is omitted if the capture is not settled (yet).
	SettlementID *string `json:"settlementId,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links ListSettlementCapturesCaptureLinks `json:"_links"`
}

func (o *ListSettlementCapturesCapture) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *ListSettlementCapturesCapture) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListSettlementCapturesCapture) GetMode() ListSettlementCapturesMode {
	if o == nil {
		return ListSettlementCapturesMode("")
	}
	return o.Mode
}

func (o *ListSettlementCapturesCapture) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListSettlementCapturesCapture) GetAmount() *ListSettlementCapturesAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListSettlementCapturesCapture) GetSettlementAmount() *ListSettlementCapturesSettlementAmount {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *ListSettlementCapturesCapture) GetStatus() ListSettlementCapturesStatus {
	if o == nil {
		return ListSettlementCapturesStatus("")
	}
	return o.Status
}

func (o *ListSettlementCapturesCapture) GetMetadata() *ListSettlementCapturesMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ListSettlementCapturesCapture) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *ListSettlementCapturesCapture) GetShipmentID() *string {
	if o == nil {
		return nil
	}
	return o.ShipmentID
}

func (o *ListSettlementCapturesCapture) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *ListSettlementCapturesCapture) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListSettlementCapturesCapture) GetLinks() ListSettlementCapturesCaptureLinks {
	if o == nil {
		return ListSettlementCapturesCaptureLinks{}
	}
	return o.Links
}

type ListSettlementCapturesEmbedded struct {
	// An array of capture objects.
	Captures []ListSettlementCapturesCapture `json:"captures,omitempty"`
}

func (o *ListSettlementCapturesEmbedded) GetCaptures() []ListSettlementCapturesCapture {
	if o == nil {
		return nil
	}
	return o.Captures
}

// ListSettlementCapturesSelf - The URL to the current set of items.
type ListSettlementCapturesSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementCapturesSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementCapturesSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementCapturesPrevious - The previous set of items, if available.
type ListSettlementCapturesPrevious struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSettlementCapturesPrevious) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSettlementCapturesPrevious) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSettlementCapturesNext - The next set of items, if available.
type ListSettlementCapturesNext struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSettlementCapturesNext) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSettlementCapturesNext) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSettlementCapturesDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListSettlementCapturesDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementCapturesDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementCapturesDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementCapturesLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
type ListSettlementCapturesLinks struct {
	// The URL to the current set of items.
	Self ListSettlementCapturesSelf `json:"self"`
	// The previous set of items, if available.
	Previous *ListSettlementCapturesPrevious `json:"previous"`
	// The next set of items, if available.
	Next *ListSettlementCapturesNext `json:"next"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListSettlementCapturesDocumentation `json:"documentation"`
}

func (o *ListSettlementCapturesLinks) GetSelf() ListSettlementCapturesSelf {
	if o == nil {
		return ListSettlementCapturesSelf{}
	}
	return o.Self
}

func (o *ListSettlementCapturesLinks) GetPrevious() *ListSettlementCapturesPrevious {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *ListSettlementCapturesLinks) GetNext() *ListSettlementCapturesNext {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListSettlementCapturesLinks) GetDocumentation() ListSettlementCapturesDocumentation {
	if o == nil {
		return ListSettlementCapturesDocumentation{}
	}
	return o.Documentation
}

// ListSettlementCapturesResponseBody - A list of capture objects.
type ListSettlementCapturesResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    *int64                          `json:"count,omitempty"`
	Embedded *ListSettlementCapturesEmbedded `json:"_embedded,omitempty"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links *ListSettlementCapturesLinks `json:"_links,omitempty"`
}

func (o *ListSettlementCapturesResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ListSettlementCapturesResponseBody) GetEmbedded() *ListSettlementCapturesEmbedded {
	if o == nil {
		return nil
	}
	return o.Embedded
}

func (o *ListSettlementCapturesResponseBody) GetLinks() *ListSettlementCapturesLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type ListSettlementCapturesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of capture objects.
	Object *ListSettlementCapturesResponseBody
}

func (o *ListSettlementCapturesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListSettlementCapturesResponse) GetObject() *ListSettlementCapturesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
