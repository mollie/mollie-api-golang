// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
)

// ListAllRefundsSort - Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
// newest to oldest.
type ListAllRefundsSort string

const (
	ListAllRefundsSortAsc  ListAllRefundsSort = "asc"
	ListAllRefundsSortDesc ListAllRefundsSort = "desc"
)

func (e ListAllRefundsSort) ToPointer() *ListAllRefundsSort {
	return &e
}
func (e *ListAllRefundsSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = ListAllRefundsSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAllRefundsSort: %v", v)
	}
}

// ListAllRefundsEmbed - This endpoint allows embedding related API items by appending the following values via the `embed` query string
// parameter.
type ListAllRefundsEmbed string

const (
	ListAllRefundsEmbedPayment ListAllRefundsEmbed = "payment"
)

func (e ListAllRefundsEmbed) ToPointer() *ListAllRefundsEmbed {
	return &e
}
func (e *ListAllRefundsEmbed) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		*e = ListAllRefundsEmbed(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAllRefundsEmbed: %v", v)
	}
}

type ListAllRefundsRequest struct {
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
	// result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
	// newest to oldest.
	Sort *ListAllRefundsSort `queryParam:"style=form,explode=true,name=sort"`
	// This endpoint allows embedding related API items by appending the following values via the `embed` query string
	// parameter.
	Embed *ListAllRefundsEmbed `queryParam:"style=form,explode=true,name=embed"`
	// The identifier referring to the [profile](get-profile) you wish to
	// retrieve the resources for.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
	// organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
	ProfileID *string `queryParam:"style=form,explode=true,name=profileId"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *ListAllRefundsRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListAllRefundsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListAllRefundsRequest) GetSort() *ListAllRefundsSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListAllRefundsRequest) GetEmbed() *ListAllRefundsEmbed {
	if o == nil {
		return nil
	}
	return o.Embed
}

func (o *ListAllRefundsRequest) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *ListAllRefundsRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// ListAllRefundsBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type ListAllRefundsBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListAllRefundsBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListAllRefundsBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListAllRefundsBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListAllRefundsBadRequestDocumentation `json:"documentation"`
}

func (o *ListAllRefundsBadRequestLinks) GetDocumentation() ListAllRefundsBadRequestDocumentation {
	if o == nil {
		return ListAllRefundsBadRequestDocumentation{}
	}
	return o.Documentation
}

// ListAllRefundsMode - Whether this entity was created in live mode or in test mode.
type ListAllRefundsMode string

const (
	ListAllRefundsModeLive ListAllRefundsMode = "live"
	ListAllRefundsModeTest ListAllRefundsMode = "test"
)

func (e ListAllRefundsMode) ToPointer() *ListAllRefundsMode {
	return &e
}

// ListAllRefundsAmount - The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
// amount.
type ListAllRefundsAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListAllRefundsAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListAllRefundsAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListAllRefundsSettlementAmount - This optional field will contain the approximate amount that will be deducted from your account balance, converted
// to the currency your account is settled in.
//
// The amount is a **negative** amount.
//
// If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
// zero.
//
// Since the field contains an estimated amount during refund processing, it may change over time. For example, while
// the refund is queued the settlement amount is likely not yet available.
//
// To retrieve accurate settlement amounts we recommend using the
// [List balance transactions endpoint](list-balance-transactions) instead.
type ListAllRefundsSettlementAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListAllRefundsSettlementAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListAllRefundsSettlementAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type ListAllRefundsMetadataType string

const (
	ListAllRefundsMetadataTypeStr        ListAllRefundsMetadataType = "str"
	ListAllRefundsMetadataTypeMapOfAny   ListAllRefundsMetadataType = "mapOfAny"
	ListAllRefundsMetadataTypeArrayOfStr ListAllRefundsMetadataType = "arrayOfStr"
)

// ListAllRefundsMetadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type ListAllRefundsMetadata struct {
	Str        *string        `queryParam:"inline"`
	MapOfAny   map[string]any `queryParam:"inline"`
	ArrayOfStr []string       `queryParam:"inline"`

	Type ListAllRefundsMetadataType
}

func CreateListAllRefundsMetadataStr(str string) ListAllRefundsMetadata {
	typ := ListAllRefundsMetadataTypeStr

	return ListAllRefundsMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateListAllRefundsMetadataMapOfAny(mapOfAny map[string]any) ListAllRefundsMetadata {
	typ := ListAllRefundsMetadataTypeMapOfAny

	return ListAllRefundsMetadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateListAllRefundsMetadataArrayOfStr(arrayOfStr []string) ListAllRefundsMetadata {
	typ := ListAllRefundsMetadataTypeArrayOfStr

	return ListAllRefundsMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ListAllRefundsMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = ListAllRefundsMetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ListAllRefundsMetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ListAllRefundsMetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListAllRefundsMetadata", string(data))
}

func (u ListAllRefundsMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ListAllRefundsMetadata: all fields are null")
}

// ListAllRefundsStatus - Refunds may take some time to get confirmed.
type ListAllRefundsStatus string

const (
	ListAllRefundsStatusQueued     ListAllRefundsStatus = "queued"
	ListAllRefundsStatusPending    ListAllRefundsStatus = "pending"
	ListAllRefundsStatusProcessing ListAllRefundsStatus = "processing"
	ListAllRefundsStatusRefunded   ListAllRefundsStatus = "refunded"
	ListAllRefundsStatusFailed     ListAllRefundsStatus = "failed"
	ListAllRefundsStatusCanceled   ListAllRefundsStatus = "canceled"
)

func (e ListAllRefundsStatus) ToPointer() *ListAllRefundsStatus {
	return &e
}

// ListAllRefundsType - Specifies the reference type
type ListAllRefundsType string

const (
	ListAllRefundsTypeAcquirerReference ListAllRefundsType = "acquirer-reference"
)

func (e ListAllRefundsType) ToPointer() *ListAllRefundsType {
	return &e
}

type ListAllRefundsExternalReference struct {
	// Specifies the reference type
	Type *ListAllRefundsType `json:"type,omitempty"`
	// Unique reference from the payment provider
	ID *string `json:"id,omitempty"`
}

func (o *ListAllRefundsExternalReference) GetType() *ListAllRefundsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListAllRefundsExternalReference) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ListAllRefundsRoutingReversalAmount - The amount that will be pulled back.
type ListAllRefundsRoutingReversalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListAllRefundsRoutingReversalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListAllRefundsRoutingReversalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListAllRefundsSource - Where the funds will be pulled back from.
type ListAllRefundsSource struct {
	// Required for source type `organization`. The ID of the connected organization the funds should be pulled
	// back from.
	OrganizationID *string `json:"organizationId,omitempty"`
}

func (o *ListAllRefundsSource) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

type ListAllRefundsRoutingReversal struct {
	// The amount that will be pulled back.
	Amount *ListAllRefundsRoutingReversalAmount `json:"amount,omitempty"`
	// Where the funds will be pulled back from.
	Source *ListAllRefundsSource `json:"source,omitempty"`
}

func (o *ListAllRefundsRoutingReversal) GetAmount() *ListAllRefundsRoutingReversalAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListAllRefundsRoutingReversal) GetSource() *ListAllRefundsSource {
	if o == nil {
		return nil
	}
	return o.Source
}

// ListAllRefundsRefundSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListAllRefundsRefundSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListAllRefundsRefundSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListAllRefundsRefundSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListAllRefundsPayment - The API resource URL of the [payment](get-payment) that this refund belongs to.
type ListAllRefundsPayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListAllRefundsPayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListAllRefundsPayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListAllRefundsSettlement - The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
// yet settled.
type ListAllRefundsSettlement struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListAllRefundsSettlement) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListAllRefundsSettlement) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListAllRefundsRefundDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListAllRefundsRefundDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListAllRefundsRefundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListAllRefundsRefundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListAllRefundsRefundLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type ListAllRefundsRefundLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self ListAllRefundsRefundSelf `json:"self"`
	// The API resource URL of the [payment](get-payment) that this refund belongs to.
	Payment ListAllRefundsPayment `json:"payment"`
	// The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
	// yet settled.
	Settlement *ListAllRefundsSettlement `json:"settlement,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListAllRefundsRefundDocumentation `json:"documentation"`
}

func (o *ListAllRefundsRefundLinks) GetSelf() ListAllRefundsRefundSelf {
	if o == nil {
		return ListAllRefundsRefundSelf{}
	}
	return o.Self
}

func (o *ListAllRefundsRefundLinks) GetPayment() ListAllRefundsPayment {
	if o == nil {
		return ListAllRefundsPayment{}
	}
	return o.Payment
}

func (o *ListAllRefundsRefundLinks) GetSettlement() *ListAllRefundsSettlement {
	if o == nil {
		return nil
	}
	return o.Settlement
}

func (o *ListAllRefundsRefundLinks) GetDocumentation() ListAllRefundsRefundDocumentation {
	if o == nil {
		return ListAllRefundsRefundDocumentation{}
	}
	return o.Documentation
}

type ListAllRefundsRefund struct {
	// Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie
	// will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
	ID *string `json:"id,omitempty"`
	// Whether this entity was created in live mode or in test mode.
	Mode *ListAllRefundsMode `json:"mode,omitempty"`
	// The description of the refund that may be shown to your customer, depending on the payment method used.
	Description *string `json:"description,omitempty"`
	// The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
	// amount.
	Amount *ListAllRefundsAmount `json:"amount,omitempty"`
	// This optional field will contain the approximate amount that will be deducted from your account balance, converted
	// to the currency your account is settled in.
	//
	// The amount is a **negative** amount.
	//
	// If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
	// zero.
	//
	// Since the field contains an estimated amount during refund processing, it may change over time. For example, while
	// the refund is queued the settlement amount is likely not yet available.
	//
	// To retrieve accurate settlement amounts we recommend using the
	// [List balance transactions endpoint](list-balance-transactions) instead.
	SettlementAmount *ListAllRefundsSettlementAmount `json:"settlementAmount,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *ListAllRefundsMetadata `json:"metadata,omitempty"`
	// The unique identifier of the payment this refund was created for.
	// The full payment object can be retrieved via the payment URL in the `_links` object.
	PaymentID *string `json:"paymentId,omitempty"`
	// The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
	SettlementID *string `json:"settlementId,omitempty"`
	// Refunds may take some time to get confirmed.
	Status *ListAllRefundsStatus `json:"status,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt         *string                          `json:"createdAt,omitempty"`
	ExternalReference *ListAllRefundsExternalReference `json:"externalReference,omitempty"`
	// *This feature is only available to marketplace operators.*
	//
	// When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
	//
	// If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
	// needs to be reversed from which merchant(s).
	//
	// If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
	RoutingReversals []ListAllRefundsRoutingReversal `json:"routingReversals,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *ListAllRefundsRefundLinks `json:"_links,omitempty"`
}

func (o *ListAllRefundsRefund) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *ListAllRefundsRefund) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ListAllRefundsRefund) GetMode() *ListAllRefundsMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *ListAllRefundsRefund) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListAllRefundsRefund) GetAmount() *ListAllRefundsAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListAllRefundsRefund) GetSettlementAmount() *ListAllRefundsSettlementAmount {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *ListAllRefundsRefund) GetMetadata() *ListAllRefundsMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ListAllRefundsRefund) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ListAllRefundsRefund) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *ListAllRefundsRefund) GetStatus() *ListAllRefundsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListAllRefundsRefund) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ListAllRefundsRefund) GetExternalReference() *ListAllRefundsExternalReference {
	if o == nil {
		return nil
	}
	return o.ExternalReference
}

func (o *ListAllRefundsRefund) GetRoutingReversals() []ListAllRefundsRoutingReversal {
	if o == nil {
		return nil
	}
	return o.RoutingReversals
}

func (o *ListAllRefundsRefund) GetLinks() *ListAllRefundsRefundLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type ListAllRefundsEmbedded struct {
	// An array of refund objects.
	Refunds []ListAllRefundsRefund `json:"refunds,omitempty"`
}

func (o *ListAllRefundsEmbedded) GetRefunds() []ListAllRefundsRefund {
	if o == nil {
		return nil
	}
	return o.Refunds
}

// ListAllRefundsSelf - The URL to the current set of items.
type ListAllRefundsSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListAllRefundsSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListAllRefundsSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListAllRefundsPrevious - The previous set of items, if available.
type ListAllRefundsPrevious struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListAllRefundsPrevious) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListAllRefundsPrevious) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListAllRefundsNext - The next set of items, if available.
type ListAllRefundsNext struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListAllRefundsNext) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListAllRefundsNext) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListAllRefundsDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListAllRefundsDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListAllRefundsDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListAllRefundsDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListAllRefundsLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
type ListAllRefundsLinks struct {
	// The URL to the current set of items.
	Self ListAllRefundsSelf `json:"self"`
	// The previous set of items, if available.
	Previous *ListAllRefundsPrevious `json:"previous"`
	// The next set of items, if available.
	Next *ListAllRefundsNext `json:"next"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListAllRefundsDocumentation `json:"documentation"`
}

func (o *ListAllRefundsLinks) GetSelf() ListAllRefundsSelf {
	if o == nil {
		return ListAllRefundsSelf{}
	}
	return o.Self
}

func (o *ListAllRefundsLinks) GetPrevious() *ListAllRefundsPrevious {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *ListAllRefundsLinks) GetNext() *ListAllRefundsNext {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListAllRefundsLinks) GetDocumentation() ListAllRefundsDocumentation {
	if o == nil {
		return ListAllRefundsDocumentation{}
	}
	return o.Documentation
}

// ListAllRefundsResponseBody - A list of refund objects
type ListAllRefundsResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    *int64                  `json:"count,omitempty"`
	Embedded *ListAllRefundsEmbedded `json:"_embedded,omitempty"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links *ListAllRefundsLinks `json:"_links,omitempty"`
}

func (o *ListAllRefundsResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ListAllRefundsResponseBody) GetEmbedded() *ListAllRefundsEmbedded {
	if o == nil {
		return nil
	}
	return o.Embedded
}

func (o *ListAllRefundsResponseBody) GetLinks() *ListAllRefundsLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type ListAllRefundsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of refund objects
	Object *ListAllRefundsResponseBody
}

func (o *ListAllRefundsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListAllRefundsResponse) GetObject() *ListAllRefundsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
