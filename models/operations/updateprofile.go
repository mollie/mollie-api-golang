// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// Mode - Updating a profile from `test` mode to `live` mode will trigger a verification process, where we review
// the profile before it can start accepting payments.
type Mode string

const (
	ModeLive Mode = "live"
	ModeTest Mode = "test"
)

func (e Mode) ToPointer() *Mode {
	return &e
}
func (e *Mode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = Mode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mode: %v", v)
	}
}

type UpdateProfileRequestBody struct {
	// The profile's name, this will usually reflect the trade name or brand name of the profile's website or
	// application.
	Name *string `json:"name,omitempty"`
	// The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs
	// are allowed.
	Website *string `json:"website,omitempty"`
	// The email address associated with the profile's trade name or brand.
	Email *string `json:"email,omitempty"`
	// The phone number associated with the profile's trade name or brand.
	Phone *string `json:"phone,omitempty"`
	// The products or services offered by the profile's website or application.
	Description *string `json:"description,omitempty"`
	// A list of countries where you expect that the majority of the profile's customers reside,
	// in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	CountriesOfActivity []string `json:"countriesOfActivity,omitempty"`
	// The industry associated with the profile's trade name or brand. Please refer to the
	// [business category list](common-data-types) for all possible options.
	BusinessCategory *string `json:"businessCategory,omitempty"`
	// Updating a profile from `test` mode to `live` mode will trigger a verification process, where we review
	// the profile before it can start accepting payments.
	Mode *Mode `json:"mode,omitempty"`
}

func (u *UpdateProfileRequestBody) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateProfileRequestBody) GetWebsite() *string {
	if u == nil {
		return nil
	}
	return u.Website
}

func (u *UpdateProfileRequestBody) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UpdateProfileRequestBody) GetPhone() *string {
	if u == nil {
		return nil
	}
	return u.Phone
}

func (u *UpdateProfileRequestBody) GetDescription() *string {
	if u == nil {
		return nil
	}
	return u.Description
}

func (u *UpdateProfileRequestBody) GetCountriesOfActivity() []string {
	if u == nil {
		return nil
	}
	return u.CountriesOfActivity
}

func (u *UpdateProfileRequestBody) GetBusinessCategory() *string {
	if u == nil {
		return nil
	}
	return u.BusinessCategory
}

func (u *UpdateProfileRequestBody) GetMode() *Mode {
	if u == nil {
		return nil
	}
	return u.Mode
}

type UpdateProfileRequest struct {
	// Provide the ID of the item you want to perform this operation on.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// A unique key to ensure idempotent requests. This key should be a UUID v4 string.
	IdempotencyKey *string                  `header:"style=simple,explode=false,name=idempotency-key"`
	RequestBody    UpdateProfileRequestBody `request:"mediaType=application/json"`
}

func (u *UpdateProfileRequest) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

func (u *UpdateProfileRequest) GetIdempotencyKey() *string {
	if u == nil {
		return nil
	}
	return u.IdempotencyKey
}

func (u *UpdateProfileRequest) GetRequestBody() UpdateProfileRequestBody {
	if u == nil {
		return UpdateProfileRequestBody{}
	}
	return u.RequestBody
}

type UpdateProfileResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The updated profile object.
	EntityProfileResponse *components.EntityProfileResponse
}

func (u *UpdateProfileResponse) GetHTTPMeta() components.HTTPMetadata {
	if u == nil {
		return components.HTTPMetadata{}
	}
	return u.HTTPMeta
}

func (u *UpdateProfileResponse) GetEntityProfileResponse() *components.EntityProfileResponse {
	if u == nil {
		return nil
	}
	return u.EntityProfileResponse
}
