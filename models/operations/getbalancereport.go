// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// QueryParamGrouping - You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped
// by status (e.g. `pending`, `available`), then by transaction type, and then by other sub-groupings where
// available (e.g. payment method).
//
// With the `transaction-categories` format, transactions are grouped by
// transaction type, then by status, and then again by other sub-groupings where available.
type QueryParamGrouping string

const (
	QueryParamGroupingStatusBalances        QueryParamGrouping = "status-balances"
	QueryParamGroupingTransactionCategories QueryParamGrouping = "transaction-categories"
)

func (e QueryParamGrouping) ToPointer() *QueryParamGrouping {
	return &e
}
func (e *QueryParamGrouping) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "status-balances":
		fallthrough
	case "transaction-categories":
		*e = QueryParamGrouping(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamGrouping: %v", v)
	}
}

type GetBalanceReportRequest struct {
	// Provide the ID of the related balance.
	BalanceID string `pathParam:"style=simple,explode=false,name=balanceId"`
	// The start date of the report, in `YYYY-MM-DD` format. The from date is
	// 'inclusive', and in Central European Time. This means a report with for example `from=2024-01-01` will
	// include transactions from 2024-01-01 0:00:00 CET and onwards.
	From string `queryParam:"style=form,explode=true,name=from"`
	// The end date of the report, in `YYYY-MM-DD` format. The until date is 'exclusive', and in Central European Time.
	// This means a report with for example `until=2024-02-01` will include transactions up until
	// 2024-01-31 23:59:59 CET.
	Until string `queryParam:"style=form,explode=true,name=until"`
	// You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped
	// by status (e.g. `pending`, `available`), then by transaction type, and then by other sub-groupings where
	// available (e.g. payment method).
	//
	// With the `transaction-categories` format, transactions are grouped by
	// transaction type, then by status, and then again by other sub-groupings where available.
	Grouping *QueryParamGrouping `queryParam:"style=form,explode=true,name=grouping"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *GetBalanceReportRequest) GetBalanceID() string {
	if o == nil {
		return ""
	}
	return o.BalanceID
}

func (o *GetBalanceReportRequest) GetFrom() string {
	if o == nil {
		return ""
	}
	return o.From
}

func (o *GetBalanceReportRequest) GetUntil() string {
	if o == nil {
		return ""
	}
	return o.Until
}

func (o *GetBalanceReportRequest) GetGrouping() *QueryParamGrouping {
	if o == nil {
		return nil
	}
	return o.Grouping
}

func (o *GetBalanceReportRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// GetBalanceReportUnprocessableEntityDocumentation - The URL to the generic Mollie API error handling guide.
type GetBalanceReportUnprocessableEntityDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetBalanceReportUnprocessableEntityDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetBalanceReportUnprocessableEntityDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetBalanceReportUnprocessableEntityLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetBalanceReportUnprocessableEntityDocumentation `json:"documentation"`
}

func (o *GetBalanceReportUnprocessableEntityLinks) GetDocumentation() GetBalanceReportUnprocessableEntityDocumentation {
	if o == nil {
		return GetBalanceReportUnprocessableEntityDocumentation{}
	}
	return o.Documentation
}

// GetBalanceReportNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type GetBalanceReportNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetBalanceReportNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetBalanceReportNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetBalanceReportNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetBalanceReportNotFoundDocumentation `json:"documentation"`
}

func (o *GetBalanceReportNotFoundLinks) GetDocumentation() GetBalanceReportNotFoundDocumentation {
	if o == nil {
		return GetBalanceReportNotFoundDocumentation{}
	}
	return o.Documentation
}

// GroupingResponse - You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped by
// status (e.g. `pending`, `available`), then by direction of movement (e.g. moved from pending to available), then
// by transaction type, and then by other sub-groupings where available (e.g. payment method).
//
// With the `transaction-categories` format, transactions are grouped by transaction type, then by direction of
// movement, and then again by other sub-groupings where available.
//
// Both reporting formats will always contain opening and closing amounts that correspond to the start and end dates
// of the report.
type GroupingResponse string

const (
	GroupingResponseStatusBalances        GroupingResponse = "status-balances"
	GroupingResponseTransactionCategories GroupingResponse = "transaction-categories"
)

func (e GroupingResponse) ToPointer() *GroupingResponse {
	return &e
}
func (e *GroupingResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "status-balances":
		fallthrough
	case "transaction-categories":
		*e = GroupingResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupingResponse: %v", v)
	}
}

// PendingBalanceOpenAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type PendingBalanceOpenAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *PendingBalanceOpenAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *PendingBalanceOpenAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// PendingBalanceOpenSubTotalMethod1 - Payment type of the transactions
type PendingBalanceOpenSubTotalMethod1 string

const (
	PendingBalanceOpenSubTotalMethod1Alma              PendingBalanceOpenSubTotalMethod1 = "alma"
	PendingBalanceOpenSubTotalMethod1Bacs              PendingBalanceOpenSubTotalMethod1 = "bacs"
	PendingBalanceOpenSubTotalMethod1Applepay          PendingBalanceOpenSubTotalMethod1 = "applepay"
	PendingBalanceOpenSubTotalMethod1Bancomatpay       PendingBalanceOpenSubTotalMethod1 = "bancomatpay"
	PendingBalanceOpenSubTotalMethod1Bancontact        PendingBalanceOpenSubTotalMethod1 = "bancontact"
	PendingBalanceOpenSubTotalMethod1Banktransfer      PendingBalanceOpenSubTotalMethod1 = "banktransfer"
	PendingBalanceOpenSubTotalMethod1Belfius           PendingBalanceOpenSubTotalMethod1 = "belfius"
	PendingBalanceOpenSubTotalMethod1Billie            PendingBalanceOpenSubTotalMethod1 = "billie"
	PendingBalanceOpenSubTotalMethod1Bizum             PendingBalanceOpenSubTotalMethod1 = "bizum"
	PendingBalanceOpenSubTotalMethod1Bitcoin           PendingBalanceOpenSubTotalMethod1 = "bitcoin"
	PendingBalanceOpenSubTotalMethod1Blik              PendingBalanceOpenSubTotalMethod1 = "blik"
	PendingBalanceOpenSubTotalMethod1Creditcard        PendingBalanceOpenSubTotalMethod1 = "creditcard"
	PendingBalanceOpenSubTotalMethod1Directdebit       PendingBalanceOpenSubTotalMethod1 = "directdebit"
	PendingBalanceOpenSubTotalMethod1Eps               PendingBalanceOpenSubTotalMethod1 = "eps"
	PendingBalanceOpenSubTotalMethod1Giftcard          PendingBalanceOpenSubTotalMethod1 = "giftcard"
	PendingBalanceOpenSubTotalMethod1Giropay           PendingBalanceOpenSubTotalMethod1 = "giropay"
	PendingBalanceOpenSubTotalMethod1Googlepay         PendingBalanceOpenSubTotalMethod1 = "googlepay"
	PendingBalanceOpenSubTotalMethod1Ideal             PendingBalanceOpenSubTotalMethod1 = "ideal"
	PendingBalanceOpenSubTotalMethod1In3               PendingBalanceOpenSubTotalMethod1 = "in3"
	PendingBalanceOpenSubTotalMethod1Inghomepay        PendingBalanceOpenSubTotalMethod1 = "inghomepay"
	PendingBalanceOpenSubTotalMethod1Kbc               PendingBalanceOpenSubTotalMethod1 = "kbc"
	PendingBalanceOpenSubTotalMethod1Klarnapaylater    PendingBalanceOpenSubTotalMethod1 = "klarnapaylater"
	PendingBalanceOpenSubTotalMethod1Klarnapaynow      PendingBalanceOpenSubTotalMethod1 = "klarnapaynow"
	PendingBalanceOpenSubTotalMethod1Klarnasliceit     PendingBalanceOpenSubTotalMethod1 = "klarnasliceit"
	PendingBalanceOpenSubTotalMethod1Klarna            PendingBalanceOpenSubTotalMethod1 = "klarna"
	PendingBalanceOpenSubTotalMethod1Mbway             PendingBalanceOpenSubTotalMethod1 = "mbway"
	PendingBalanceOpenSubTotalMethod1Multibanco        PendingBalanceOpenSubTotalMethod1 = "multibanco"
	PendingBalanceOpenSubTotalMethod1Mybank            PendingBalanceOpenSubTotalMethod1 = "mybank"
	PendingBalanceOpenSubTotalMethod1Paybybank         PendingBalanceOpenSubTotalMethod1 = "paybybank"
	PendingBalanceOpenSubTotalMethod1Payconiq          PendingBalanceOpenSubTotalMethod1 = "payconiq"
	PendingBalanceOpenSubTotalMethod1Paypal            PendingBalanceOpenSubTotalMethod1 = "paypal"
	PendingBalanceOpenSubTotalMethod1Paysafecard       PendingBalanceOpenSubTotalMethod1 = "paysafecard"
	PendingBalanceOpenSubTotalMethod1Przelewy24        PendingBalanceOpenSubTotalMethod1 = "przelewy24"
	PendingBalanceOpenSubTotalMethod1Riverty           PendingBalanceOpenSubTotalMethod1 = "riverty"
	PendingBalanceOpenSubTotalMethod1Satispay          PendingBalanceOpenSubTotalMethod1 = "satispay"
	PendingBalanceOpenSubTotalMethod1Podiumcadeaukaart PendingBalanceOpenSubTotalMethod1 = "podiumcadeaukaart"
	PendingBalanceOpenSubTotalMethod1Pointofsale       PendingBalanceOpenSubTotalMethod1 = "pointofsale"
	PendingBalanceOpenSubTotalMethod1Sofort            PendingBalanceOpenSubTotalMethod1 = "sofort"
	PendingBalanceOpenSubTotalMethod1Swish             PendingBalanceOpenSubTotalMethod1 = "swish"
	PendingBalanceOpenSubTotalMethod1Trustly           PendingBalanceOpenSubTotalMethod1 = "trustly"
	PendingBalanceOpenSubTotalMethod1Twint             PendingBalanceOpenSubTotalMethod1 = "twint"
	PendingBalanceOpenSubTotalMethod1Voucher           PendingBalanceOpenSubTotalMethod1 = "voucher"
)

func (e PendingBalanceOpenSubTotalMethod1) ToPointer() *PendingBalanceOpenSubTotalMethod1 {
	return &e
}
func (e *PendingBalanceOpenSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = PendingBalanceOpenSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceOpenSubTotalMethod1: %v", v)
	}
}

// PendingBalanceOpenSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type PendingBalanceOpenSubTotalCardIssuer1 string

const (
	PendingBalanceOpenSubTotalCardIssuer1Amex          PendingBalanceOpenSubTotalCardIssuer1 = "amex"
	PendingBalanceOpenSubTotalCardIssuer1Maestro       PendingBalanceOpenSubTotalCardIssuer1 = "maestro"
	PendingBalanceOpenSubTotalCardIssuer1CarteBancaire PendingBalanceOpenSubTotalCardIssuer1 = "carte-bancaire"
	PendingBalanceOpenSubTotalCardIssuer1Other         PendingBalanceOpenSubTotalCardIssuer1 = "other"
)

func (e PendingBalanceOpenSubTotalCardIssuer1) ToPointer() *PendingBalanceOpenSubTotalCardIssuer1 {
	return &e
}
func (e *PendingBalanceOpenSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = PendingBalanceOpenSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceOpenSubTotalCardIssuer1: %v", v)
	}
}

// PendingBalanceOpenSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type PendingBalanceOpenSubTotalCardAudience1 string

const (
	PendingBalanceOpenSubTotalCardAudience1Corporate PendingBalanceOpenSubTotalCardAudience1 = "corporate"
	PendingBalanceOpenSubTotalCardAudience1Other     PendingBalanceOpenSubTotalCardAudience1 = "other"
)

func (e PendingBalanceOpenSubTotalCardAudience1) ToPointer() *PendingBalanceOpenSubTotalCardAudience1 {
	return &e
}
func (e *PendingBalanceOpenSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = PendingBalanceOpenSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceOpenSubTotalCardAudience1: %v", v)
	}
}

// PendingBalanceOpenSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type PendingBalanceOpenSubTotalCardRegion1 string

const (
	PendingBalanceOpenSubTotalCardRegion1IntraEea PendingBalanceOpenSubTotalCardRegion1 = "intra-eea"
	PendingBalanceOpenSubTotalCardRegion1IntraEu  PendingBalanceOpenSubTotalCardRegion1 = "intra-eu"
	PendingBalanceOpenSubTotalCardRegion1Domestic PendingBalanceOpenSubTotalCardRegion1 = "domestic"
	PendingBalanceOpenSubTotalCardRegion1Other    PendingBalanceOpenSubTotalCardRegion1 = "other"
)

func (e PendingBalanceOpenSubTotalCardRegion1) ToPointer() *PendingBalanceOpenSubTotalCardRegion1 {
	return &e
}
func (e *PendingBalanceOpenSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = PendingBalanceOpenSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceOpenSubTotalCardRegion1: %v", v)
	}
}

// PendingBalanceOpenSubTotalFeeType1 - Present when the transaction represents a fee.
type PendingBalanceOpenSubTotalFeeType1 string

const (
	PendingBalanceOpenSubTotalFeeType1PaymentFee                                        PendingBalanceOpenSubTotalFeeType1 = "payment-fee"
	PendingBalanceOpenSubTotalFeeType1DirectDebitFailureFee                             PendingBalanceOpenSubTotalFeeType1 = "direct-debit-failure-fee"
	PendingBalanceOpenSubTotalFeeType1UnauthorizedDirectDebitFee                        PendingBalanceOpenSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	PendingBalanceOpenSubTotalFeeType1BankChargedDirectDebitFailureFee                  PendingBalanceOpenSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	PendingBalanceOpenSubTotalFeeType1PartnerCommission                                 PendingBalanceOpenSubTotalFeeType1 = "partner-commission"
	PendingBalanceOpenSubTotalFeeType1ApplicationFee                                    PendingBalanceOpenSubTotalFeeType1 = "application-fee"
	PendingBalanceOpenSubTotalFeeType1CaptureFee                                        PendingBalanceOpenSubTotalFeeType1 = "capture-fee"
	PendingBalanceOpenSubTotalFeeType1RefundFee                                         PendingBalanceOpenSubTotalFeeType1 = "refund-fee"
	PendingBalanceOpenSubTotalFeeType1ChargebackFee                                     PendingBalanceOpenSubTotalFeeType1 = "chargeback-fee"
	PendingBalanceOpenSubTotalFeeType1PaymentNotificationFee                            PendingBalanceOpenSubTotalFeeType1 = "payment-notification-fee"
	PendingBalanceOpenSubTotalFeeType1TransferNotificationFee                           PendingBalanceOpenSubTotalFeeType1 = "transfer-notification-fee"
	PendingBalanceOpenSubTotalFeeType1PayoutFee                                         PendingBalanceOpenSubTotalFeeType1 = "payout-fee"
	PendingBalanceOpenSubTotalFeeType1FeeDiscount                                       PendingBalanceOpenSubTotalFeeType1 = "fee-discount"
	PendingBalanceOpenSubTotalFeeType1FeeReimbursement                                  PendingBalanceOpenSubTotalFeeType1 = "fee-reimbursement"
	PendingBalanceOpenSubTotalFeeType1PlatformVolumeFee                                 PendingBalanceOpenSubTotalFeeType1 = "platform-volume-fee"
	PendingBalanceOpenSubTotalFeeType1PlatformConnectedOrganizationsFee                 PendingBalanceOpenSubTotalFeeType1 = "platform-connected-organizations-fee"
	PendingBalanceOpenSubTotalFeeType1BalanceChargeFee                                  PendingBalanceOpenSubTotalFeeType1 = "balance-charge-fee"
	PendingBalanceOpenSubTotalFeeType1ThreedsAuthenticationAttemptFee                   PendingBalanceOpenSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	PendingBalanceOpenSubTotalFeeType1TerminalMonthlyFee                                PendingBalanceOpenSubTotalFeeType1 = "terminal-monthly-fee"
	PendingBalanceOpenSubTotalFeeType1AcceptanceRiskFee                                 PendingBalanceOpenSubTotalFeeType1 = "acceptance-risk-fee"
	PendingBalanceOpenSubTotalFeeType1TopUpFee                                          PendingBalanceOpenSubTotalFeeType1 = "top-up-fee"
	PendingBalanceOpenSubTotalFeeType1PaymentGatewayFee                                 PendingBalanceOpenSubTotalFeeType1 = "payment-gateway-fee"
	PendingBalanceOpenSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   PendingBalanceOpenSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	PendingBalanceOpenSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee PendingBalanceOpenSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	PendingBalanceOpenSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             PendingBalanceOpenSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	PendingBalanceOpenSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           PendingBalanceOpenSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	PendingBalanceOpenSubTotalFeeType1MinimumInvoiceAmountFee                           PendingBalanceOpenSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e PendingBalanceOpenSubTotalFeeType1) ToPointer() *PendingBalanceOpenSubTotalFeeType1 {
	return &e
}
func (e *PendingBalanceOpenSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = PendingBalanceOpenSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceOpenSubTotalFeeType1: %v", v)
	}
}

// PendingBalanceOpenSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type PendingBalanceOpenSubTotalPrepaymentPartType1 string

const (
	PendingBalanceOpenSubTotalPrepaymentPartType1Fee                     PendingBalanceOpenSubTotalPrepaymentPartType1 = "fee"
	PendingBalanceOpenSubTotalPrepaymentPartType1FeeReimbursement        PendingBalanceOpenSubTotalPrepaymentPartType1 = "fee-reimbursement"
	PendingBalanceOpenSubTotalPrepaymentPartType1FeeDiscount             PendingBalanceOpenSubTotalPrepaymentPartType1 = "fee-discount"
	PendingBalanceOpenSubTotalPrepaymentPartType1FeeVat                  PendingBalanceOpenSubTotalPrepaymentPartType1 = "fee-vat"
	PendingBalanceOpenSubTotalPrepaymentPartType1FeeRoundingCompensation PendingBalanceOpenSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e PendingBalanceOpenSubTotalPrepaymentPartType1) ToPointer() *PendingBalanceOpenSubTotalPrepaymentPartType1 {
	return &e
}
func (e *PendingBalanceOpenSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = PendingBalanceOpenSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceOpenSubTotalPrepaymentPartType1: %v", v)
	}
}

// PendingBalanceOpenSubTotalTransactionType1 - Represents the transaction type
type PendingBalanceOpenSubTotalTransactionType1 string

const (
	PendingBalanceOpenSubTotalTransactionType1Payment                           PendingBalanceOpenSubTotalTransactionType1 = "payment"
	PendingBalanceOpenSubTotalTransactionType1SplitPayment                      PendingBalanceOpenSubTotalTransactionType1 = "split-payment"
	PendingBalanceOpenSubTotalTransactionType1FailedPayment                     PendingBalanceOpenSubTotalTransactionType1 = "failed-payment"
	PendingBalanceOpenSubTotalTransactionType1FailedPlatformSplitPayment        PendingBalanceOpenSubTotalTransactionType1 = "failed-platform-split-payment"
	PendingBalanceOpenSubTotalTransactionType1FailedSplitPaymentCompensation    PendingBalanceOpenSubTotalTransactionType1 = "failed-split-payment-compensation"
	PendingBalanceOpenSubTotalTransactionType1Capture                           PendingBalanceOpenSubTotalTransactionType1 = "capture"
	PendingBalanceOpenSubTotalTransactionType1SplitTransaction                  PendingBalanceOpenSubTotalTransactionType1 = "split-transaction"
	PendingBalanceOpenSubTotalTransactionType1Refund                            PendingBalanceOpenSubTotalTransactionType1 = "refund"
	PendingBalanceOpenSubTotalTransactionType1PlatformPaymentRefund             PendingBalanceOpenSubTotalTransactionType1 = "platform-payment-refund"
	PendingBalanceOpenSubTotalTransactionType1ReturnedPlatformPaymentRefund     PendingBalanceOpenSubTotalTransactionType1 = "returned-platform-payment-refund"
	PendingBalanceOpenSubTotalTransactionType1RefundCompensation                PendingBalanceOpenSubTotalTransactionType1 = "refund-compensation"
	PendingBalanceOpenSubTotalTransactionType1ReturnedRefundCompensation        PendingBalanceOpenSubTotalTransactionType1 = "returned-refund-compensation"
	PendingBalanceOpenSubTotalTransactionType1ReturnedRefund                    PendingBalanceOpenSubTotalTransactionType1 = "returned-refund"
	PendingBalanceOpenSubTotalTransactionType1Chargeback                        PendingBalanceOpenSubTotalTransactionType1 = "chargeback"
	PendingBalanceOpenSubTotalTransactionType1ChargebackReversal                PendingBalanceOpenSubTotalTransactionType1 = "chargeback-reversal"
	PendingBalanceOpenSubTotalTransactionType1ChargebackCompensation            PendingBalanceOpenSubTotalTransactionType1 = "chargeback-compensation"
	PendingBalanceOpenSubTotalTransactionType1ReversedChargebackCompensation    PendingBalanceOpenSubTotalTransactionType1 = "reversed-chargeback-compensation"
	PendingBalanceOpenSubTotalTransactionType1PlatformPaymentChargeback         PendingBalanceOpenSubTotalTransactionType1 = "platform-payment-chargeback"
	PendingBalanceOpenSubTotalTransactionType1ReversedPlatformPaymentChargeback PendingBalanceOpenSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	PendingBalanceOpenSubTotalTransactionType1FeePrepayment                     PendingBalanceOpenSubTotalTransactionType1 = "fee-prepayment"
	PendingBalanceOpenSubTotalTransactionType1OutgoingTransfer                  PendingBalanceOpenSubTotalTransactionType1 = "outgoing-transfer"
	PendingBalanceOpenSubTotalTransactionType1IncomingTransfer                  PendingBalanceOpenSubTotalTransactionType1 = "incoming-transfer"
	PendingBalanceOpenSubTotalTransactionType1CanceledTransfer                  PendingBalanceOpenSubTotalTransactionType1 = "canceled-transfer"
	PendingBalanceOpenSubTotalTransactionType1ReturnedTransfer                  PendingBalanceOpenSubTotalTransactionType1 = "returned-transfer"
	PendingBalanceOpenSubTotalTransactionType1BalanceReserve                    PendingBalanceOpenSubTotalTransactionType1 = "balance-reserve"
	PendingBalanceOpenSubTotalTransactionType1BalanceReserveReturn              PendingBalanceOpenSubTotalTransactionType1 = "balance-reserve-return"
	PendingBalanceOpenSubTotalTransactionType1InvoiceRoundingCompensation       PendingBalanceOpenSubTotalTransactionType1 = "invoice-rounding-compensation"
	PendingBalanceOpenSubTotalTransactionType1RollingReserveHold                PendingBalanceOpenSubTotalTransactionType1 = "rolling-reserve-hold"
	PendingBalanceOpenSubTotalTransactionType1RollingReserveRelease             PendingBalanceOpenSubTotalTransactionType1 = "rolling-reserve-release"
	PendingBalanceOpenSubTotalTransactionType1BalanceCorrection                 PendingBalanceOpenSubTotalTransactionType1 = "balance-correction"
	PendingBalanceOpenSubTotalTransactionType1Repayment                         PendingBalanceOpenSubTotalTransactionType1 = "repayment"
	PendingBalanceOpenSubTotalTransactionType1Loan                              PendingBalanceOpenSubTotalTransactionType1 = "loan"
	PendingBalanceOpenSubTotalTransactionType1BalanceTopup                      PendingBalanceOpenSubTotalTransactionType1 = "balance-topup"
	PendingBalanceOpenSubTotalTransactionType1CashCollateralIssuance            PendingBalanceOpenSubTotalTransactionType1 = "cash-collateral-issuance';"
	PendingBalanceOpenSubTotalTransactionType1CashCollateralRelease             PendingBalanceOpenSubTotalTransactionType1 = "cash-collateral-release"
	PendingBalanceOpenSubTotalTransactionType1PendingRollingReserve             PendingBalanceOpenSubTotalTransactionType1 = "pending-rolling-reserve"
	PendingBalanceOpenSubTotalTransactionType1ToBeReleasedRollingReserve        PendingBalanceOpenSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	PendingBalanceOpenSubTotalTransactionType1HeldRollingReserve                PendingBalanceOpenSubTotalTransactionType1 = "held-rolling-reserve"
	PendingBalanceOpenSubTotalTransactionType1ReleasedRollingReserve            PendingBalanceOpenSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e PendingBalanceOpenSubTotalTransactionType1) ToPointer() *PendingBalanceOpenSubTotalTransactionType1 {
	return &e
}
func (e *PendingBalanceOpenSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = PendingBalanceOpenSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceOpenSubTotalTransactionType1: %v", v)
	}
}

type PendingBalanceOpenSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *PendingBalanceOpenSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *PendingBalanceOpenSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *PendingBalanceOpenSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *PendingBalanceOpenSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *PendingBalanceOpenSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *PendingBalanceOpenSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *PendingBalanceOpenSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *PendingBalanceOpenSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *PendingBalanceOpenSubTotal1) GetMethod() *PendingBalanceOpenSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PendingBalanceOpenSubTotal1) GetCardIssuer() *PendingBalanceOpenSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *PendingBalanceOpenSubTotal1) GetCardAudience() *PendingBalanceOpenSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *PendingBalanceOpenSubTotal1) GetCardRegion() *PendingBalanceOpenSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *PendingBalanceOpenSubTotal1) GetFeeType() *PendingBalanceOpenSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *PendingBalanceOpenSubTotal1) GetPrepaymentPartType() *PendingBalanceOpenSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *PendingBalanceOpenSubTotal1) GetTransactionType() *PendingBalanceOpenSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// PendingBalanceOpenSubtotalMethod2 - Payment type of the transactions
type PendingBalanceOpenSubtotalMethod2 string

const (
	PendingBalanceOpenSubtotalMethod2Alma              PendingBalanceOpenSubtotalMethod2 = "alma"
	PendingBalanceOpenSubtotalMethod2Bacs              PendingBalanceOpenSubtotalMethod2 = "bacs"
	PendingBalanceOpenSubtotalMethod2Applepay          PendingBalanceOpenSubtotalMethod2 = "applepay"
	PendingBalanceOpenSubtotalMethod2Bancomatpay       PendingBalanceOpenSubtotalMethod2 = "bancomatpay"
	PendingBalanceOpenSubtotalMethod2Bancontact        PendingBalanceOpenSubtotalMethod2 = "bancontact"
	PendingBalanceOpenSubtotalMethod2Banktransfer      PendingBalanceOpenSubtotalMethod2 = "banktransfer"
	PendingBalanceOpenSubtotalMethod2Belfius           PendingBalanceOpenSubtotalMethod2 = "belfius"
	PendingBalanceOpenSubtotalMethod2Billie            PendingBalanceOpenSubtotalMethod2 = "billie"
	PendingBalanceOpenSubtotalMethod2Bizum             PendingBalanceOpenSubtotalMethod2 = "bizum"
	PendingBalanceOpenSubtotalMethod2Bitcoin           PendingBalanceOpenSubtotalMethod2 = "bitcoin"
	PendingBalanceOpenSubtotalMethod2Blik              PendingBalanceOpenSubtotalMethod2 = "blik"
	PendingBalanceOpenSubtotalMethod2Creditcard        PendingBalanceOpenSubtotalMethod2 = "creditcard"
	PendingBalanceOpenSubtotalMethod2Directdebit       PendingBalanceOpenSubtotalMethod2 = "directdebit"
	PendingBalanceOpenSubtotalMethod2Eps               PendingBalanceOpenSubtotalMethod2 = "eps"
	PendingBalanceOpenSubtotalMethod2Giftcard          PendingBalanceOpenSubtotalMethod2 = "giftcard"
	PendingBalanceOpenSubtotalMethod2Giropay           PendingBalanceOpenSubtotalMethod2 = "giropay"
	PendingBalanceOpenSubtotalMethod2Googlepay         PendingBalanceOpenSubtotalMethod2 = "googlepay"
	PendingBalanceOpenSubtotalMethod2Ideal             PendingBalanceOpenSubtotalMethod2 = "ideal"
	PendingBalanceOpenSubtotalMethod2In3               PendingBalanceOpenSubtotalMethod2 = "in3"
	PendingBalanceOpenSubtotalMethod2Inghomepay        PendingBalanceOpenSubtotalMethod2 = "inghomepay"
	PendingBalanceOpenSubtotalMethod2Kbc               PendingBalanceOpenSubtotalMethod2 = "kbc"
	PendingBalanceOpenSubtotalMethod2Klarnapaylater    PendingBalanceOpenSubtotalMethod2 = "klarnapaylater"
	PendingBalanceOpenSubtotalMethod2Klarnapaynow      PendingBalanceOpenSubtotalMethod2 = "klarnapaynow"
	PendingBalanceOpenSubtotalMethod2Klarnasliceit     PendingBalanceOpenSubtotalMethod2 = "klarnasliceit"
	PendingBalanceOpenSubtotalMethod2Klarna            PendingBalanceOpenSubtotalMethod2 = "klarna"
	PendingBalanceOpenSubtotalMethod2Mbway             PendingBalanceOpenSubtotalMethod2 = "mbway"
	PendingBalanceOpenSubtotalMethod2Multibanco        PendingBalanceOpenSubtotalMethod2 = "multibanco"
	PendingBalanceOpenSubtotalMethod2Mybank            PendingBalanceOpenSubtotalMethod2 = "mybank"
	PendingBalanceOpenSubtotalMethod2Paybybank         PendingBalanceOpenSubtotalMethod2 = "paybybank"
	PendingBalanceOpenSubtotalMethod2Payconiq          PendingBalanceOpenSubtotalMethod2 = "payconiq"
	PendingBalanceOpenSubtotalMethod2Paypal            PendingBalanceOpenSubtotalMethod2 = "paypal"
	PendingBalanceOpenSubtotalMethod2Paysafecard       PendingBalanceOpenSubtotalMethod2 = "paysafecard"
	PendingBalanceOpenSubtotalMethod2Przelewy24        PendingBalanceOpenSubtotalMethod2 = "przelewy24"
	PendingBalanceOpenSubtotalMethod2Riverty           PendingBalanceOpenSubtotalMethod2 = "riverty"
	PendingBalanceOpenSubtotalMethod2Satispay          PendingBalanceOpenSubtotalMethod2 = "satispay"
	PendingBalanceOpenSubtotalMethod2Podiumcadeaukaart PendingBalanceOpenSubtotalMethod2 = "podiumcadeaukaart"
	PendingBalanceOpenSubtotalMethod2Pointofsale       PendingBalanceOpenSubtotalMethod2 = "pointofsale"
	PendingBalanceOpenSubtotalMethod2Sofort            PendingBalanceOpenSubtotalMethod2 = "sofort"
	PendingBalanceOpenSubtotalMethod2Swish             PendingBalanceOpenSubtotalMethod2 = "swish"
	PendingBalanceOpenSubtotalMethod2Trustly           PendingBalanceOpenSubtotalMethod2 = "trustly"
	PendingBalanceOpenSubtotalMethod2Twint             PendingBalanceOpenSubtotalMethod2 = "twint"
	PendingBalanceOpenSubtotalMethod2Voucher           PendingBalanceOpenSubtotalMethod2 = "voucher"
)

func (e PendingBalanceOpenSubtotalMethod2) ToPointer() *PendingBalanceOpenSubtotalMethod2 {
	return &e
}
func (e *PendingBalanceOpenSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = PendingBalanceOpenSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceOpenSubtotalMethod2: %v", v)
	}
}

// PendingBalanceOpenSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type PendingBalanceOpenSubtotalCardIssuer2 string

const (
	PendingBalanceOpenSubtotalCardIssuer2Amex          PendingBalanceOpenSubtotalCardIssuer2 = "amex"
	PendingBalanceOpenSubtotalCardIssuer2Maestro       PendingBalanceOpenSubtotalCardIssuer2 = "maestro"
	PendingBalanceOpenSubtotalCardIssuer2CarteBancaire PendingBalanceOpenSubtotalCardIssuer2 = "carte-bancaire"
	PendingBalanceOpenSubtotalCardIssuer2Other         PendingBalanceOpenSubtotalCardIssuer2 = "other"
)

func (e PendingBalanceOpenSubtotalCardIssuer2) ToPointer() *PendingBalanceOpenSubtotalCardIssuer2 {
	return &e
}
func (e *PendingBalanceOpenSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = PendingBalanceOpenSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceOpenSubtotalCardIssuer2: %v", v)
	}
}

// PendingBalanceOpenSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type PendingBalanceOpenSubtotalCardAudience2 string

const (
	PendingBalanceOpenSubtotalCardAudience2Corporate PendingBalanceOpenSubtotalCardAudience2 = "corporate"
	PendingBalanceOpenSubtotalCardAudience2Other     PendingBalanceOpenSubtotalCardAudience2 = "other"
)

func (e PendingBalanceOpenSubtotalCardAudience2) ToPointer() *PendingBalanceOpenSubtotalCardAudience2 {
	return &e
}
func (e *PendingBalanceOpenSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = PendingBalanceOpenSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceOpenSubtotalCardAudience2: %v", v)
	}
}

// PendingBalanceOpenSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type PendingBalanceOpenSubtotalCardRegion2 string

const (
	PendingBalanceOpenSubtotalCardRegion2IntraEea PendingBalanceOpenSubtotalCardRegion2 = "intra-eea"
	PendingBalanceOpenSubtotalCardRegion2IntraEu  PendingBalanceOpenSubtotalCardRegion2 = "intra-eu"
	PendingBalanceOpenSubtotalCardRegion2Domestic PendingBalanceOpenSubtotalCardRegion2 = "domestic"
	PendingBalanceOpenSubtotalCardRegion2Other    PendingBalanceOpenSubtotalCardRegion2 = "other"
)

func (e PendingBalanceOpenSubtotalCardRegion2) ToPointer() *PendingBalanceOpenSubtotalCardRegion2 {
	return &e
}
func (e *PendingBalanceOpenSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = PendingBalanceOpenSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceOpenSubtotalCardRegion2: %v", v)
	}
}

// PendingBalanceOpenSubtotalFeeType2 - Present when the transaction represents a fee.
type PendingBalanceOpenSubtotalFeeType2 string

const (
	PendingBalanceOpenSubtotalFeeType2PaymentFee                                        PendingBalanceOpenSubtotalFeeType2 = "payment-fee"
	PendingBalanceOpenSubtotalFeeType2DirectDebitFailureFee                             PendingBalanceOpenSubtotalFeeType2 = "direct-debit-failure-fee"
	PendingBalanceOpenSubtotalFeeType2UnauthorizedDirectDebitFee                        PendingBalanceOpenSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	PendingBalanceOpenSubtotalFeeType2BankChargedDirectDebitFailureFee                  PendingBalanceOpenSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	PendingBalanceOpenSubtotalFeeType2PartnerCommission                                 PendingBalanceOpenSubtotalFeeType2 = "partner-commission"
	PendingBalanceOpenSubtotalFeeType2ApplicationFee                                    PendingBalanceOpenSubtotalFeeType2 = "application-fee"
	PendingBalanceOpenSubtotalFeeType2CaptureFee                                        PendingBalanceOpenSubtotalFeeType2 = "capture-fee"
	PendingBalanceOpenSubtotalFeeType2RefundFee                                         PendingBalanceOpenSubtotalFeeType2 = "refund-fee"
	PendingBalanceOpenSubtotalFeeType2ChargebackFee                                     PendingBalanceOpenSubtotalFeeType2 = "chargeback-fee"
	PendingBalanceOpenSubtotalFeeType2PaymentNotificationFee                            PendingBalanceOpenSubtotalFeeType2 = "payment-notification-fee"
	PendingBalanceOpenSubtotalFeeType2TransferNotificationFee                           PendingBalanceOpenSubtotalFeeType2 = "transfer-notification-fee"
	PendingBalanceOpenSubtotalFeeType2PayoutFee                                         PendingBalanceOpenSubtotalFeeType2 = "payout-fee"
	PendingBalanceOpenSubtotalFeeType2FeeDiscount                                       PendingBalanceOpenSubtotalFeeType2 = "fee-discount"
	PendingBalanceOpenSubtotalFeeType2FeeReimbursement                                  PendingBalanceOpenSubtotalFeeType2 = "fee-reimbursement"
	PendingBalanceOpenSubtotalFeeType2PlatformVolumeFee                                 PendingBalanceOpenSubtotalFeeType2 = "platform-volume-fee"
	PendingBalanceOpenSubtotalFeeType2PlatformConnectedOrganizationsFee                 PendingBalanceOpenSubtotalFeeType2 = "platform-connected-organizations-fee"
	PendingBalanceOpenSubtotalFeeType2BalanceChargeFee                                  PendingBalanceOpenSubtotalFeeType2 = "balance-charge-fee"
	PendingBalanceOpenSubtotalFeeType2ThreedsAuthenticationAttemptFee                   PendingBalanceOpenSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	PendingBalanceOpenSubtotalFeeType2TerminalMonthlyFee                                PendingBalanceOpenSubtotalFeeType2 = "terminal-monthly-fee"
	PendingBalanceOpenSubtotalFeeType2AcceptanceRiskFee                                 PendingBalanceOpenSubtotalFeeType2 = "acceptance-risk-fee"
	PendingBalanceOpenSubtotalFeeType2TopUpFee                                          PendingBalanceOpenSubtotalFeeType2 = "top-up-fee"
	PendingBalanceOpenSubtotalFeeType2PaymentGatewayFee                                 PendingBalanceOpenSubtotalFeeType2 = "payment-gateway-fee"
	PendingBalanceOpenSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   PendingBalanceOpenSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	PendingBalanceOpenSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee PendingBalanceOpenSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	PendingBalanceOpenSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             PendingBalanceOpenSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	PendingBalanceOpenSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           PendingBalanceOpenSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	PendingBalanceOpenSubtotalFeeType2MinimumInvoiceAmountFee                           PendingBalanceOpenSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e PendingBalanceOpenSubtotalFeeType2) ToPointer() *PendingBalanceOpenSubtotalFeeType2 {
	return &e
}
func (e *PendingBalanceOpenSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = PendingBalanceOpenSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceOpenSubtotalFeeType2: %v", v)
	}
}

// PendingBalanceOpenSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type PendingBalanceOpenSubtotalPrepaymentPartType2 string

const (
	PendingBalanceOpenSubtotalPrepaymentPartType2Fee                     PendingBalanceOpenSubtotalPrepaymentPartType2 = "fee"
	PendingBalanceOpenSubtotalPrepaymentPartType2FeeReimbursement        PendingBalanceOpenSubtotalPrepaymentPartType2 = "fee-reimbursement"
	PendingBalanceOpenSubtotalPrepaymentPartType2FeeDiscount             PendingBalanceOpenSubtotalPrepaymentPartType2 = "fee-discount"
	PendingBalanceOpenSubtotalPrepaymentPartType2FeeVat                  PendingBalanceOpenSubtotalPrepaymentPartType2 = "fee-vat"
	PendingBalanceOpenSubtotalPrepaymentPartType2FeeRoundingCompensation PendingBalanceOpenSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e PendingBalanceOpenSubtotalPrepaymentPartType2) ToPointer() *PendingBalanceOpenSubtotalPrepaymentPartType2 {
	return &e
}
func (e *PendingBalanceOpenSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = PendingBalanceOpenSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceOpenSubtotalPrepaymentPartType2: %v", v)
	}
}

// PendingBalanceOpenSubtotalTransactionType2 - Represents the transaction type
type PendingBalanceOpenSubtotalTransactionType2 string

const (
	PendingBalanceOpenSubtotalTransactionType2Payment                           PendingBalanceOpenSubtotalTransactionType2 = "payment"
	PendingBalanceOpenSubtotalTransactionType2SplitPayment                      PendingBalanceOpenSubtotalTransactionType2 = "split-payment"
	PendingBalanceOpenSubtotalTransactionType2FailedPayment                     PendingBalanceOpenSubtotalTransactionType2 = "failed-payment"
	PendingBalanceOpenSubtotalTransactionType2FailedPlatformSplitPayment        PendingBalanceOpenSubtotalTransactionType2 = "failed-platform-split-payment"
	PendingBalanceOpenSubtotalTransactionType2FailedSplitPaymentCompensation    PendingBalanceOpenSubtotalTransactionType2 = "failed-split-payment-compensation"
	PendingBalanceOpenSubtotalTransactionType2Capture                           PendingBalanceOpenSubtotalTransactionType2 = "capture"
	PendingBalanceOpenSubtotalTransactionType2SplitTransaction                  PendingBalanceOpenSubtotalTransactionType2 = "split-transaction"
	PendingBalanceOpenSubtotalTransactionType2Refund                            PendingBalanceOpenSubtotalTransactionType2 = "refund"
	PendingBalanceOpenSubtotalTransactionType2PlatformPaymentRefund             PendingBalanceOpenSubtotalTransactionType2 = "platform-payment-refund"
	PendingBalanceOpenSubtotalTransactionType2ReturnedPlatformPaymentRefund     PendingBalanceOpenSubtotalTransactionType2 = "returned-platform-payment-refund"
	PendingBalanceOpenSubtotalTransactionType2RefundCompensation                PendingBalanceOpenSubtotalTransactionType2 = "refund-compensation"
	PendingBalanceOpenSubtotalTransactionType2ReturnedRefundCompensation        PendingBalanceOpenSubtotalTransactionType2 = "returned-refund-compensation"
	PendingBalanceOpenSubtotalTransactionType2ReturnedRefund                    PendingBalanceOpenSubtotalTransactionType2 = "returned-refund"
	PendingBalanceOpenSubtotalTransactionType2Chargeback                        PendingBalanceOpenSubtotalTransactionType2 = "chargeback"
	PendingBalanceOpenSubtotalTransactionType2ChargebackReversal                PendingBalanceOpenSubtotalTransactionType2 = "chargeback-reversal"
	PendingBalanceOpenSubtotalTransactionType2ChargebackCompensation            PendingBalanceOpenSubtotalTransactionType2 = "chargeback-compensation"
	PendingBalanceOpenSubtotalTransactionType2ReversedChargebackCompensation    PendingBalanceOpenSubtotalTransactionType2 = "reversed-chargeback-compensation"
	PendingBalanceOpenSubtotalTransactionType2PlatformPaymentChargeback         PendingBalanceOpenSubtotalTransactionType2 = "platform-payment-chargeback"
	PendingBalanceOpenSubtotalTransactionType2ReversedPlatformPaymentChargeback PendingBalanceOpenSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	PendingBalanceOpenSubtotalTransactionType2FeePrepayment                     PendingBalanceOpenSubtotalTransactionType2 = "fee-prepayment"
	PendingBalanceOpenSubtotalTransactionType2OutgoingTransfer                  PendingBalanceOpenSubtotalTransactionType2 = "outgoing-transfer"
	PendingBalanceOpenSubtotalTransactionType2IncomingTransfer                  PendingBalanceOpenSubtotalTransactionType2 = "incoming-transfer"
	PendingBalanceOpenSubtotalTransactionType2CanceledTransfer                  PendingBalanceOpenSubtotalTransactionType2 = "canceled-transfer"
	PendingBalanceOpenSubtotalTransactionType2ReturnedTransfer                  PendingBalanceOpenSubtotalTransactionType2 = "returned-transfer"
	PendingBalanceOpenSubtotalTransactionType2BalanceReserve                    PendingBalanceOpenSubtotalTransactionType2 = "balance-reserve"
	PendingBalanceOpenSubtotalTransactionType2BalanceReserveReturn              PendingBalanceOpenSubtotalTransactionType2 = "balance-reserve-return"
	PendingBalanceOpenSubtotalTransactionType2InvoiceRoundingCompensation       PendingBalanceOpenSubtotalTransactionType2 = "invoice-rounding-compensation"
	PendingBalanceOpenSubtotalTransactionType2RollingReserveHold                PendingBalanceOpenSubtotalTransactionType2 = "rolling-reserve-hold"
	PendingBalanceOpenSubtotalTransactionType2RollingReserveRelease             PendingBalanceOpenSubtotalTransactionType2 = "rolling-reserve-release"
	PendingBalanceOpenSubtotalTransactionType2BalanceCorrection                 PendingBalanceOpenSubtotalTransactionType2 = "balance-correction"
	PendingBalanceOpenSubtotalTransactionType2Repayment                         PendingBalanceOpenSubtotalTransactionType2 = "repayment"
	PendingBalanceOpenSubtotalTransactionType2Loan                              PendingBalanceOpenSubtotalTransactionType2 = "loan"
	PendingBalanceOpenSubtotalTransactionType2BalanceTopup                      PendingBalanceOpenSubtotalTransactionType2 = "balance-topup"
	PendingBalanceOpenSubtotalTransactionType2CashCollateralIssuance            PendingBalanceOpenSubtotalTransactionType2 = "cash-collateral-issuance';"
	PendingBalanceOpenSubtotalTransactionType2CashCollateralRelease             PendingBalanceOpenSubtotalTransactionType2 = "cash-collateral-release"
	PendingBalanceOpenSubtotalTransactionType2PendingRollingReserve             PendingBalanceOpenSubtotalTransactionType2 = "pending-rolling-reserve"
	PendingBalanceOpenSubtotalTransactionType2ToBeReleasedRollingReserve        PendingBalanceOpenSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	PendingBalanceOpenSubtotalTransactionType2HeldRollingReserve                PendingBalanceOpenSubtotalTransactionType2 = "held-rolling-reserve"
	PendingBalanceOpenSubtotalTransactionType2ReleasedRollingReserve            PendingBalanceOpenSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e PendingBalanceOpenSubtotalTransactionType2) ToPointer() *PendingBalanceOpenSubtotalTransactionType2 {
	return &e
}
func (e *PendingBalanceOpenSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = PendingBalanceOpenSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceOpenSubtotalTransactionType2: %v", v)
	}
}

type PendingBalanceOpenSubtotal2 struct {
	SubTotals []PendingBalanceOpenSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *PendingBalanceOpenSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *PendingBalanceOpenSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *PendingBalanceOpenSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *PendingBalanceOpenSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *PendingBalanceOpenSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *PendingBalanceOpenSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *PendingBalanceOpenSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *PendingBalanceOpenSubtotal2) GetSubTotals() []PendingBalanceOpenSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *PendingBalanceOpenSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *PendingBalanceOpenSubtotal2) GetMethod() *PendingBalanceOpenSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PendingBalanceOpenSubtotal2) GetCardIssuer() *PendingBalanceOpenSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *PendingBalanceOpenSubtotal2) GetCardAudience() *PendingBalanceOpenSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *PendingBalanceOpenSubtotal2) GetCardRegion() *PendingBalanceOpenSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *PendingBalanceOpenSubtotal2) GetFeeType() *PendingBalanceOpenSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *PendingBalanceOpenSubtotal2) GetPrepaymentPartType() *PendingBalanceOpenSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *PendingBalanceOpenSubtotal2) GetTransactionType() *PendingBalanceOpenSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type PendingBalanceOpen struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *PendingBalanceOpenAmount     `json:"amount,omitempty"`
	Subtotals []PendingBalanceOpenSubtotal2 `json:"subtotals,omitempty"`
}

func (o *PendingBalanceOpen) GetAmount() *PendingBalanceOpenAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *PendingBalanceOpen) GetSubtotals() []PendingBalanceOpenSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// PendingBalanceCloseAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type PendingBalanceCloseAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *PendingBalanceCloseAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *PendingBalanceCloseAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// PendingBalanceCloseSubTotalMethod1 - Payment type of the transactions
type PendingBalanceCloseSubTotalMethod1 string

const (
	PendingBalanceCloseSubTotalMethod1Alma              PendingBalanceCloseSubTotalMethod1 = "alma"
	PendingBalanceCloseSubTotalMethod1Bacs              PendingBalanceCloseSubTotalMethod1 = "bacs"
	PendingBalanceCloseSubTotalMethod1Applepay          PendingBalanceCloseSubTotalMethod1 = "applepay"
	PendingBalanceCloseSubTotalMethod1Bancomatpay       PendingBalanceCloseSubTotalMethod1 = "bancomatpay"
	PendingBalanceCloseSubTotalMethod1Bancontact        PendingBalanceCloseSubTotalMethod1 = "bancontact"
	PendingBalanceCloseSubTotalMethod1Banktransfer      PendingBalanceCloseSubTotalMethod1 = "banktransfer"
	PendingBalanceCloseSubTotalMethod1Belfius           PendingBalanceCloseSubTotalMethod1 = "belfius"
	PendingBalanceCloseSubTotalMethod1Billie            PendingBalanceCloseSubTotalMethod1 = "billie"
	PendingBalanceCloseSubTotalMethod1Bizum             PendingBalanceCloseSubTotalMethod1 = "bizum"
	PendingBalanceCloseSubTotalMethod1Bitcoin           PendingBalanceCloseSubTotalMethod1 = "bitcoin"
	PendingBalanceCloseSubTotalMethod1Blik              PendingBalanceCloseSubTotalMethod1 = "blik"
	PendingBalanceCloseSubTotalMethod1Creditcard        PendingBalanceCloseSubTotalMethod1 = "creditcard"
	PendingBalanceCloseSubTotalMethod1Directdebit       PendingBalanceCloseSubTotalMethod1 = "directdebit"
	PendingBalanceCloseSubTotalMethod1Eps               PendingBalanceCloseSubTotalMethod1 = "eps"
	PendingBalanceCloseSubTotalMethod1Giftcard          PendingBalanceCloseSubTotalMethod1 = "giftcard"
	PendingBalanceCloseSubTotalMethod1Giropay           PendingBalanceCloseSubTotalMethod1 = "giropay"
	PendingBalanceCloseSubTotalMethod1Googlepay         PendingBalanceCloseSubTotalMethod1 = "googlepay"
	PendingBalanceCloseSubTotalMethod1Ideal             PendingBalanceCloseSubTotalMethod1 = "ideal"
	PendingBalanceCloseSubTotalMethod1In3               PendingBalanceCloseSubTotalMethod1 = "in3"
	PendingBalanceCloseSubTotalMethod1Inghomepay        PendingBalanceCloseSubTotalMethod1 = "inghomepay"
	PendingBalanceCloseSubTotalMethod1Kbc               PendingBalanceCloseSubTotalMethod1 = "kbc"
	PendingBalanceCloseSubTotalMethod1Klarnapaylater    PendingBalanceCloseSubTotalMethod1 = "klarnapaylater"
	PendingBalanceCloseSubTotalMethod1Klarnapaynow      PendingBalanceCloseSubTotalMethod1 = "klarnapaynow"
	PendingBalanceCloseSubTotalMethod1Klarnasliceit     PendingBalanceCloseSubTotalMethod1 = "klarnasliceit"
	PendingBalanceCloseSubTotalMethod1Klarna            PendingBalanceCloseSubTotalMethod1 = "klarna"
	PendingBalanceCloseSubTotalMethod1Mbway             PendingBalanceCloseSubTotalMethod1 = "mbway"
	PendingBalanceCloseSubTotalMethod1Multibanco        PendingBalanceCloseSubTotalMethod1 = "multibanco"
	PendingBalanceCloseSubTotalMethod1Mybank            PendingBalanceCloseSubTotalMethod1 = "mybank"
	PendingBalanceCloseSubTotalMethod1Paybybank         PendingBalanceCloseSubTotalMethod1 = "paybybank"
	PendingBalanceCloseSubTotalMethod1Payconiq          PendingBalanceCloseSubTotalMethod1 = "payconiq"
	PendingBalanceCloseSubTotalMethod1Paypal            PendingBalanceCloseSubTotalMethod1 = "paypal"
	PendingBalanceCloseSubTotalMethod1Paysafecard       PendingBalanceCloseSubTotalMethod1 = "paysafecard"
	PendingBalanceCloseSubTotalMethod1Przelewy24        PendingBalanceCloseSubTotalMethod1 = "przelewy24"
	PendingBalanceCloseSubTotalMethod1Riverty           PendingBalanceCloseSubTotalMethod1 = "riverty"
	PendingBalanceCloseSubTotalMethod1Satispay          PendingBalanceCloseSubTotalMethod1 = "satispay"
	PendingBalanceCloseSubTotalMethod1Podiumcadeaukaart PendingBalanceCloseSubTotalMethod1 = "podiumcadeaukaart"
	PendingBalanceCloseSubTotalMethod1Pointofsale       PendingBalanceCloseSubTotalMethod1 = "pointofsale"
	PendingBalanceCloseSubTotalMethod1Sofort            PendingBalanceCloseSubTotalMethod1 = "sofort"
	PendingBalanceCloseSubTotalMethod1Swish             PendingBalanceCloseSubTotalMethod1 = "swish"
	PendingBalanceCloseSubTotalMethod1Trustly           PendingBalanceCloseSubTotalMethod1 = "trustly"
	PendingBalanceCloseSubTotalMethod1Twint             PendingBalanceCloseSubTotalMethod1 = "twint"
	PendingBalanceCloseSubTotalMethod1Voucher           PendingBalanceCloseSubTotalMethod1 = "voucher"
)

func (e PendingBalanceCloseSubTotalMethod1) ToPointer() *PendingBalanceCloseSubTotalMethod1 {
	return &e
}
func (e *PendingBalanceCloseSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = PendingBalanceCloseSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceCloseSubTotalMethod1: %v", v)
	}
}

// PendingBalanceCloseSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type PendingBalanceCloseSubTotalCardIssuer1 string

const (
	PendingBalanceCloseSubTotalCardIssuer1Amex          PendingBalanceCloseSubTotalCardIssuer1 = "amex"
	PendingBalanceCloseSubTotalCardIssuer1Maestro       PendingBalanceCloseSubTotalCardIssuer1 = "maestro"
	PendingBalanceCloseSubTotalCardIssuer1CarteBancaire PendingBalanceCloseSubTotalCardIssuer1 = "carte-bancaire"
	PendingBalanceCloseSubTotalCardIssuer1Other         PendingBalanceCloseSubTotalCardIssuer1 = "other"
)

func (e PendingBalanceCloseSubTotalCardIssuer1) ToPointer() *PendingBalanceCloseSubTotalCardIssuer1 {
	return &e
}
func (e *PendingBalanceCloseSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = PendingBalanceCloseSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceCloseSubTotalCardIssuer1: %v", v)
	}
}

// PendingBalanceCloseSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type PendingBalanceCloseSubTotalCardAudience1 string

const (
	PendingBalanceCloseSubTotalCardAudience1Corporate PendingBalanceCloseSubTotalCardAudience1 = "corporate"
	PendingBalanceCloseSubTotalCardAudience1Other     PendingBalanceCloseSubTotalCardAudience1 = "other"
)

func (e PendingBalanceCloseSubTotalCardAudience1) ToPointer() *PendingBalanceCloseSubTotalCardAudience1 {
	return &e
}
func (e *PendingBalanceCloseSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = PendingBalanceCloseSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceCloseSubTotalCardAudience1: %v", v)
	}
}

// PendingBalanceCloseSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type PendingBalanceCloseSubTotalCardRegion1 string

const (
	PendingBalanceCloseSubTotalCardRegion1IntraEea PendingBalanceCloseSubTotalCardRegion1 = "intra-eea"
	PendingBalanceCloseSubTotalCardRegion1IntraEu  PendingBalanceCloseSubTotalCardRegion1 = "intra-eu"
	PendingBalanceCloseSubTotalCardRegion1Domestic PendingBalanceCloseSubTotalCardRegion1 = "domestic"
	PendingBalanceCloseSubTotalCardRegion1Other    PendingBalanceCloseSubTotalCardRegion1 = "other"
)

func (e PendingBalanceCloseSubTotalCardRegion1) ToPointer() *PendingBalanceCloseSubTotalCardRegion1 {
	return &e
}
func (e *PendingBalanceCloseSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = PendingBalanceCloseSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceCloseSubTotalCardRegion1: %v", v)
	}
}

// PendingBalanceCloseSubTotalFeeType1 - Present when the transaction represents a fee.
type PendingBalanceCloseSubTotalFeeType1 string

const (
	PendingBalanceCloseSubTotalFeeType1PaymentFee                                        PendingBalanceCloseSubTotalFeeType1 = "payment-fee"
	PendingBalanceCloseSubTotalFeeType1DirectDebitFailureFee                             PendingBalanceCloseSubTotalFeeType1 = "direct-debit-failure-fee"
	PendingBalanceCloseSubTotalFeeType1UnauthorizedDirectDebitFee                        PendingBalanceCloseSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	PendingBalanceCloseSubTotalFeeType1BankChargedDirectDebitFailureFee                  PendingBalanceCloseSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	PendingBalanceCloseSubTotalFeeType1PartnerCommission                                 PendingBalanceCloseSubTotalFeeType1 = "partner-commission"
	PendingBalanceCloseSubTotalFeeType1ApplicationFee                                    PendingBalanceCloseSubTotalFeeType1 = "application-fee"
	PendingBalanceCloseSubTotalFeeType1CaptureFee                                        PendingBalanceCloseSubTotalFeeType1 = "capture-fee"
	PendingBalanceCloseSubTotalFeeType1RefundFee                                         PendingBalanceCloseSubTotalFeeType1 = "refund-fee"
	PendingBalanceCloseSubTotalFeeType1ChargebackFee                                     PendingBalanceCloseSubTotalFeeType1 = "chargeback-fee"
	PendingBalanceCloseSubTotalFeeType1PaymentNotificationFee                            PendingBalanceCloseSubTotalFeeType1 = "payment-notification-fee"
	PendingBalanceCloseSubTotalFeeType1TransferNotificationFee                           PendingBalanceCloseSubTotalFeeType1 = "transfer-notification-fee"
	PendingBalanceCloseSubTotalFeeType1PayoutFee                                         PendingBalanceCloseSubTotalFeeType1 = "payout-fee"
	PendingBalanceCloseSubTotalFeeType1FeeDiscount                                       PendingBalanceCloseSubTotalFeeType1 = "fee-discount"
	PendingBalanceCloseSubTotalFeeType1FeeReimbursement                                  PendingBalanceCloseSubTotalFeeType1 = "fee-reimbursement"
	PendingBalanceCloseSubTotalFeeType1PlatformVolumeFee                                 PendingBalanceCloseSubTotalFeeType1 = "platform-volume-fee"
	PendingBalanceCloseSubTotalFeeType1PlatformConnectedOrganizationsFee                 PendingBalanceCloseSubTotalFeeType1 = "platform-connected-organizations-fee"
	PendingBalanceCloseSubTotalFeeType1BalanceChargeFee                                  PendingBalanceCloseSubTotalFeeType1 = "balance-charge-fee"
	PendingBalanceCloseSubTotalFeeType1ThreedsAuthenticationAttemptFee                   PendingBalanceCloseSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	PendingBalanceCloseSubTotalFeeType1TerminalMonthlyFee                                PendingBalanceCloseSubTotalFeeType1 = "terminal-monthly-fee"
	PendingBalanceCloseSubTotalFeeType1AcceptanceRiskFee                                 PendingBalanceCloseSubTotalFeeType1 = "acceptance-risk-fee"
	PendingBalanceCloseSubTotalFeeType1TopUpFee                                          PendingBalanceCloseSubTotalFeeType1 = "top-up-fee"
	PendingBalanceCloseSubTotalFeeType1PaymentGatewayFee                                 PendingBalanceCloseSubTotalFeeType1 = "payment-gateway-fee"
	PendingBalanceCloseSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   PendingBalanceCloseSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	PendingBalanceCloseSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee PendingBalanceCloseSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	PendingBalanceCloseSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             PendingBalanceCloseSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	PendingBalanceCloseSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           PendingBalanceCloseSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	PendingBalanceCloseSubTotalFeeType1MinimumInvoiceAmountFee                           PendingBalanceCloseSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e PendingBalanceCloseSubTotalFeeType1) ToPointer() *PendingBalanceCloseSubTotalFeeType1 {
	return &e
}
func (e *PendingBalanceCloseSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = PendingBalanceCloseSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceCloseSubTotalFeeType1: %v", v)
	}
}

// PendingBalanceCloseSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type PendingBalanceCloseSubTotalPrepaymentPartType1 string

const (
	PendingBalanceCloseSubTotalPrepaymentPartType1Fee                     PendingBalanceCloseSubTotalPrepaymentPartType1 = "fee"
	PendingBalanceCloseSubTotalPrepaymentPartType1FeeReimbursement        PendingBalanceCloseSubTotalPrepaymentPartType1 = "fee-reimbursement"
	PendingBalanceCloseSubTotalPrepaymentPartType1FeeDiscount             PendingBalanceCloseSubTotalPrepaymentPartType1 = "fee-discount"
	PendingBalanceCloseSubTotalPrepaymentPartType1FeeVat                  PendingBalanceCloseSubTotalPrepaymentPartType1 = "fee-vat"
	PendingBalanceCloseSubTotalPrepaymentPartType1FeeRoundingCompensation PendingBalanceCloseSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e PendingBalanceCloseSubTotalPrepaymentPartType1) ToPointer() *PendingBalanceCloseSubTotalPrepaymentPartType1 {
	return &e
}
func (e *PendingBalanceCloseSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = PendingBalanceCloseSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceCloseSubTotalPrepaymentPartType1: %v", v)
	}
}

// PendingBalanceCloseSubTotalTransactionType1 - Represents the transaction type
type PendingBalanceCloseSubTotalTransactionType1 string

const (
	PendingBalanceCloseSubTotalTransactionType1Payment                           PendingBalanceCloseSubTotalTransactionType1 = "payment"
	PendingBalanceCloseSubTotalTransactionType1SplitPayment                      PendingBalanceCloseSubTotalTransactionType1 = "split-payment"
	PendingBalanceCloseSubTotalTransactionType1FailedPayment                     PendingBalanceCloseSubTotalTransactionType1 = "failed-payment"
	PendingBalanceCloseSubTotalTransactionType1FailedPlatformSplitPayment        PendingBalanceCloseSubTotalTransactionType1 = "failed-platform-split-payment"
	PendingBalanceCloseSubTotalTransactionType1FailedSplitPaymentCompensation    PendingBalanceCloseSubTotalTransactionType1 = "failed-split-payment-compensation"
	PendingBalanceCloseSubTotalTransactionType1Capture                           PendingBalanceCloseSubTotalTransactionType1 = "capture"
	PendingBalanceCloseSubTotalTransactionType1SplitTransaction                  PendingBalanceCloseSubTotalTransactionType1 = "split-transaction"
	PendingBalanceCloseSubTotalTransactionType1Refund                            PendingBalanceCloseSubTotalTransactionType1 = "refund"
	PendingBalanceCloseSubTotalTransactionType1PlatformPaymentRefund             PendingBalanceCloseSubTotalTransactionType1 = "platform-payment-refund"
	PendingBalanceCloseSubTotalTransactionType1ReturnedPlatformPaymentRefund     PendingBalanceCloseSubTotalTransactionType1 = "returned-platform-payment-refund"
	PendingBalanceCloseSubTotalTransactionType1RefundCompensation                PendingBalanceCloseSubTotalTransactionType1 = "refund-compensation"
	PendingBalanceCloseSubTotalTransactionType1ReturnedRefundCompensation        PendingBalanceCloseSubTotalTransactionType1 = "returned-refund-compensation"
	PendingBalanceCloseSubTotalTransactionType1ReturnedRefund                    PendingBalanceCloseSubTotalTransactionType1 = "returned-refund"
	PendingBalanceCloseSubTotalTransactionType1Chargeback                        PendingBalanceCloseSubTotalTransactionType1 = "chargeback"
	PendingBalanceCloseSubTotalTransactionType1ChargebackReversal                PendingBalanceCloseSubTotalTransactionType1 = "chargeback-reversal"
	PendingBalanceCloseSubTotalTransactionType1ChargebackCompensation            PendingBalanceCloseSubTotalTransactionType1 = "chargeback-compensation"
	PendingBalanceCloseSubTotalTransactionType1ReversedChargebackCompensation    PendingBalanceCloseSubTotalTransactionType1 = "reversed-chargeback-compensation"
	PendingBalanceCloseSubTotalTransactionType1PlatformPaymentChargeback         PendingBalanceCloseSubTotalTransactionType1 = "platform-payment-chargeback"
	PendingBalanceCloseSubTotalTransactionType1ReversedPlatformPaymentChargeback PendingBalanceCloseSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	PendingBalanceCloseSubTotalTransactionType1FeePrepayment                     PendingBalanceCloseSubTotalTransactionType1 = "fee-prepayment"
	PendingBalanceCloseSubTotalTransactionType1OutgoingTransfer                  PendingBalanceCloseSubTotalTransactionType1 = "outgoing-transfer"
	PendingBalanceCloseSubTotalTransactionType1IncomingTransfer                  PendingBalanceCloseSubTotalTransactionType1 = "incoming-transfer"
	PendingBalanceCloseSubTotalTransactionType1CanceledTransfer                  PendingBalanceCloseSubTotalTransactionType1 = "canceled-transfer"
	PendingBalanceCloseSubTotalTransactionType1ReturnedTransfer                  PendingBalanceCloseSubTotalTransactionType1 = "returned-transfer"
	PendingBalanceCloseSubTotalTransactionType1BalanceReserve                    PendingBalanceCloseSubTotalTransactionType1 = "balance-reserve"
	PendingBalanceCloseSubTotalTransactionType1BalanceReserveReturn              PendingBalanceCloseSubTotalTransactionType1 = "balance-reserve-return"
	PendingBalanceCloseSubTotalTransactionType1InvoiceRoundingCompensation       PendingBalanceCloseSubTotalTransactionType1 = "invoice-rounding-compensation"
	PendingBalanceCloseSubTotalTransactionType1RollingReserveHold                PendingBalanceCloseSubTotalTransactionType1 = "rolling-reserve-hold"
	PendingBalanceCloseSubTotalTransactionType1RollingReserveRelease             PendingBalanceCloseSubTotalTransactionType1 = "rolling-reserve-release"
	PendingBalanceCloseSubTotalTransactionType1BalanceCorrection                 PendingBalanceCloseSubTotalTransactionType1 = "balance-correction"
	PendingBalanceCloseSubTotalTransactionType1Repayment                         PendingBalanceCloseSubTotalTransactionType1 = "repayment"
	PendingBalanceCloseSubTotalTransactionType1Loan                              PendingBalanceCloseSubTotalTransactionType1 = "loan"
	PendingBalanceCloseSubTotalTransactionType1BalanceTopup                      PendingBalanceCloseSubTotalTransactionType1 = "balance-topup"
	PendingBalanceCloseSubTotalTransactionType1CashCollateralIssuance            PendingBalanceCloseSubTotalTransactionType1 = "cash-collateral-issuance';"
	PendingBalanceCloseSubTotalTransactionType1CashCollateralRelease             PendingBalanceCloseSubTotalTransactionType1 = "cash-collateral-release"
	PendingBalanceCloseSubTotalTransactionType1PendingRollingReserve             PendingBalanceCloseSubTotalTransactionType1 = "pending-rolling-reserve"
	PendingBalanceCloseSubTotalTransactionType1ToBeReleasedRollingReserve        PendingBalanceCloseSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	PendingBalanceCloseSubTotalTransactionType1HeldRollingReserve                PendingBalanceCloseSubTotalTransactionType1 = "held-rolling-reserve"
	PendingBalanceCloseSubTotalTransactionType1ReleasedRollingReserve            PendingBalanceCloseSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e PendingBalanceCloseSubTotalTransactionType1) ToPointer() *PendingBalanceCloseSubTotalTransactionType1 {
	return &e
}
func (e *PendingBalanceCloseSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = PendingBalanceCloseSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceCloseSubTotalTransactionType1: %v", v)
	}
}

type PendingBalanceCloseSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *PendingBalanceCloseSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *PendingBalanceCloseSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *PendingBalanceCloseSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *PendingBalanceCloseSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *PendingBalanceCloseSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *PendingBalanceCloseSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *PendingBalanceCloseSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *PendingBalanceCloseSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *PendingBalanceCloseSubTotal1) GetMethod() *PendingBalanceCloseSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PendingBalanceCloseSubTotal1) GetCardIssuer() *PendingBalanceCloseSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *PendingBalanceCloseSubTotal1) GetCardAudience() *PendingBalanceCloseSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *PendingBalanceCloseSubTotal1) GetCardRegion() *PendingBalanceCloseSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *PendingBalanceCloseSubTotal1) GetFeeType() *PendingBalanceCloseSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *PendingBalanceCloseSubTotal1) GetPrepaymentPartType() *PendingBalanceCloseSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *PendingBalanceCloseSubTotal1) GetTransactionType() *PendingBalanceCloseSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// PendingBalanceCloseSubtotalMethod2 - Payment type of the transactions
type PendingBalanceCloseSubtotalMethod2 string

const (
	PendingBalanceCloseSubtotalMethod2Alma              PendingBalanceCloseSubtotalMethod2 = "alma"
	PendingBalanceCloseSubtotalMethod2Bacs              PendingBalanceCloseSubtotalMethod2 = "bacs"
	PendingBalanceCloseSubtotalMethod2Applepay          PendingBalanceCloseSubtotalMethod2 = "applepay"
	PendingBalanceCloseSubtotalMethod2Bancomatpay       PendingBalanceCloseSubtotalMethod2 = "bancomatpay"
	PendingBalanceCloseSubtotalMethod2Bancontact        PendingBalanceCloseSubtotalMethod2 = "bancontact"
	PendingBalanceCloseSubtotalMethod2Banktransfer      PendingBalanceCloseSubtotalMethod2 = "banktransfer"
	PendingBalanceCloseSubtotalMethod2Belfius           PendingBalanceCloseSubtotalMethod2 = "belfius"
	PendingBalanceCloseSubtotalMethod2Billie            PendingBalanceCloseSubtotalMethod2 = "billie"
	PendingBalanceCloseSubtotalMethod2Bizum             PendingBalanceCloseSubtotalMethod2 = "bizum"
	PendingBalanceCloseSubtotalMethod2Bitcoin           PendingBalanceCloseSubtotalMethod2 = "bitcoin"
	PendingBalanceCloseSubtotalMethod2Blik              PendingBalanceCloseSubtotalMethod2 = "blik"
	PendingBalanceCloseSubtotalMethod2Creditcard        PendingBalanceCloseSubtotalMethod2 = "creditcard"
	PendingBalanceCloseSubtotalMethod2Directdebit       PendingBalanceCloseSubtotalMethod2 = "directdebit"
	PendingBalanceCloseSubtotalMethod2Eps               PendingBalanceCloseSubtotalMethod2 = "eps"
	PendingBalanceCloseSubtotalMethod2Giftcard          PendingBalanceCloseSubtotalMethod2 = "giftcard"
	PendingBalanceCloseSubtotalMethod2Giropay           PendingBalanceCloseSubtotalMethod2 = "giropay"
	PendingBalanceCloseSubtotalMethod2Googlepay         PendingBalanceCloseSubtotalMethod2 = "googlepay"
	PendingBalanceCloseSubtotalMethod2Ideal             PendingBalanceCloseSubtotalMethod2 = "ideal"
	PendingBalanceCloseSubtotalMethod2In3               PendingBalanceCloseSubtotalMethod2 = "in3"
	PendingBalanceCloseSubtotalMethod2Inghomepay        PendingBalanceCloseSubtotalMethod2 = "inghomepay"
	PendingBalanceCloseSubtotalMethod2Kbc               PendingBalanceCloseSubtotalMethod2 = "kbc"
	PendingBalanceCloseSubtotalMethod2Klarnapaylater    PendingBalanceCloseSubtotalMethod2 = "klarnapaylater"
	PendingBalanceCloseSubtotalMethod2Klarnapaynow      PendingBalanceCloseSubtotalMethod2 = "klarnapaynow"
	PendingBalanceCloseSubtotalMethod2Klarnasliceit     PendingBalanceCloseSubtotalMethod2 = "klarnasliceit"
	PendingBalanceCloseSubtotalMethod2Klarna            PendingBalanceCloseSubtotalMethod2 = "klarna"
	PendingBalanceCloseSubtotalMethod2Mbway             PendingBalanceCloseSubtotalMethod2 = "mbway"
	PendingBalanceCloseSubtotalMethod2Multibanco        PendingBalanceCloseSubtotalMethod2 = "multibanco"
	PendingBalanceCloseSubtotalMethod2Mybank            PendingBalanceCloseSubtotalMethod2 = "mybank"
	PendingBalanceCloseSubtotalMethod2Paybybank         PendingBalanceCloseSubtotalMethod2 = "paybybank"
	PendingBalanceCloseSubtotalMethod2Payconiq          PendingBalanceCloseSubtotalMethod2 = "payconiq"
	PendingBalanceCloseSubtotalMethod2Paypal            PendingBalanceCloseSubtotalMethod2 = "paypal"
	PendingBalanceCloseSubtotalMethod2Paysafecard       PendingBalanceCloseSubtotalMethod2 = "paysafecard"
	PendingBalanceCloseSubtotalMethod2Przelewy24        PendingBalanceCloseSubtotalMethod2 = "przelewy24"
	PendingBalanceCloseSubtotalMethod2Riverty           PendingBalanceCloseSubtotalMethod2 = "riverty"
	PendingBalanceCloseSubtotalMethod2Satispay          PendingBalanceCloseSubtotalMethod2 = "satispay"
	PendingBalanceCloseSubtotalMethod2Podiumcadeaukaart PendingBalanceCloseSubtotalMethod2 = "podiumcadeaukaart"
	PendingBalanceCloseSubtotalMethod2Pointofsale       PendingBalanceCloseSubtotalMethod2 = "pointofsale"
	PendingBalanceCloseSubtotalMethod2Sofort            PendingBalanceCloseSubtotalMethod2 = "sofort"
	PendingBalanceCloseSubtotalMethod2Swish             PendingBalanceCloseSubtotalMethod2 = "swish"
	PendingBalanceCloseSubtotalMethod2Trustly           PendingBalanceCloseSubtotalMethod2 = "trustly"
	PendingBalanceCloseSubtotalMethod2Twint             PendingBalanceCloseSubtotalMethod2 = "twint"
	PendingBalanceCloseSubtotalMethod2Voucher           PendingBalanceCloseSubtotalMethod2 = "voucher"
)

func (e PendingBalanceCloseSubtotalMethod2) ToPointer() *PendingBalanceCloseSubtotalMethod2 {
	return &e
}
func (e *PendingBalanceCloseSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = PendingBalanceCloseSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceCloseSubtotalMethod2: %v", v)
	}
}

// PendingBalanceCloseSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type PendingBalanceCloseSubtotalCardIssuer2 string

const (
	PendingBalanceCloseSubtotalCardIssuer2Amex          PendingBalanceCloseSubtotalCardIssuer2 = "amex"
	PendingBalanceCloseSubtotalCardIssuer2Maestro       PendingBalanceCloseSubtotalCardIssuer2 = "maestro"
	PendingBalanceCloseSubtotalCardIssuer2CarteBancaire PendingBalanceCloseSubtotalCardIssuer2 = "carte-bancaire"
	PendingBalanceCloseSubtotalCardIssuer2Other         PendingBalanceCloseSubtotalCardIssuer2 = "other"
)

func (e PendingBalanceCloseSubtotalCardIssuer2) ToPointer() *PendingBalanceCloseSubtotalCardIssuer2 {
	return &e
}
func (e *PendingBalanceCloseSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = PendingBalanceCloseSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceCloseSubtotalCardIssuer2: %v", v)
	}
}

// PendingBalanceCloseSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type PendingBalanceCloseSubtotalCardAudience2 string

const (
	PendingBalanceCloseSubtotalCardAudience2Corporate PendingBalanceCloseSubtotalCardAudience2 = "corporate"
	PendingBalanceCloseSubtotalCardAudience2Other     PendingBalanceCloseSubtotalCardAudience2 = "other"
)

func (e PendingBalanceCloseSubtotalCardAudience2) ToPointer() *PendingBalanceCloseSubtotalCardAudience2 {
	return &e
}
func (e *PendingBalanceCloseSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = PendingBalanceCloseSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceCloseSubtotalCardAudience2: %v", v)
	}
}

// PendingBalanceCloseSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type PendingBalanceCloseSubtotalCardRegion2 string

const (
	PendingBalanceCloseSubtotalCardRegion2IntraEea PendingBalanceCloseSubtotalCardRegion2 = "intra-eea"
	PendingBalanceCloseSubtotalCardRegion2IntraEu  PendingBalanceCloseSubtotalCardRegion2 = "intra-eu"
	PendingBalanceCloseSubtotalCardRegion2Domestic PendingBalanceCloseSubtotalCardRegion2 = "domestic"
	PendingBalanceCloseSubtotalCardRegion2Other    PendingBalanceCloseSubtotalCardRegion2 = "other"
)

func (e PendingBalanceCloseSubtotalCardRegion2) ToPointer() *PendingBalanceCloseSubtotalCardRegion2 {
	return &e
}
func (e *PendingBalanceCloseSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = PendingBalanceCloseSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceCloseSubtotalCardRegion2: %v", v)
	}
}

// PendingBalanceCloseSubtotalFeeType2 - Present when the transaction represents a fee.
type PendingBalanceCloseSubtotalFeeType2 string

const (
	PendingBalanceCloseSubtotalFeeType2PaymentFee                                        PendingBalanceCloseSubtotalFeeType2 = "payment-fee"
	PendingBalanceCloseSubtotalFeeType2DirectDebitFailureFee                             PendingBalanceCloseSubtotalFeeType2 = "direct-debit-failure-fee"
	PendingBalanceCloseSubtotalFeeType2UnauthorizedDirectDebitFee                        PendingBalanceCloseSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	PendingBalanceCloseSubtotalFeeType2BankChargedDirectDebitFailureFee                  PendingBalanceCloseSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	PendingBalanceCloseSubtotalFeeType2PartnerCommission                                 PendingBalanceCloseSubtotalFeeType2 = "partner-commission"
	PendingBalanceCloseSubtotalFeeType2ApplicationFee                                    PendingBalanceCloseSubtotalFeeType2 = "application-fee"
	PendingBalanceCloseSubtotalFeeType2CaptureFee                                        PendingBalanceCloseSubtotalFeeType2 = "capture-fee"
	PendingBalanceCloseSubtotalFeeType2RefundFee                                         PendingBalanceCloseSubtotalFeeType2 = "refund-fee"
	PendingBalanceCloseSubtotalFeeType2ChargebackFee                                     PendingBalanceCloseSubtotalFeeType2 = "chargeback-fee"
	PendingBalanceCloseSubtotalFeeType2PaymentNotificationFee                            PendingBalanceCloseSubtotalFeeType2 = "payment-notification-fee"
	PendingBalanceCloseSubtotalFeeType2TransferNotificationFee                           PendingBalanceCloseSubtotalFeeType2 = "transfer-notification-fee"
	PendingBalanceCloseSubtotalFeeType2PayoutFee                                         PendingBalanceCloseSubtotalFeeType2 = "payout-fee"
	PendingBalanceCloseSubtotalFeeType2FeeDiscount                                       PendingBalanceCloseSubtotalFeeType2 = "fee-discount"
	PendingBalanceCloseSubtotalFeeType2FeeReimbursement                                  PendingBalanceCloseSubtotalFeeType2 = "fee-reimbursement"
	PendingBalanceCloseSubtotalFeeType2PlatformVolumeFee                                 PendingBalanceCloseSubtotalFeeType2 = "platform-volume-fee"
	PendingBalanceCloseSubtotalFeeType2PlatformConnectedOrganizationsFee                 PendingBalanceCloseSubtotalFeeType2 = "platform-connected-organizations-fee"
	PendingBalanceCloseSubtotalFeeType2BalanceChargeFee                                  PendingBalanceCloseSubtotalFeeType2 = "balance-charge-fee"
	PendingBalanceCloseSubtotalFeeType2ThreedsAuthenticationAttemptFee                   PendingBalanceCloseSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	PendingBalanceCloseSubtotalFeeType2TerminalMonthlyFee                                PendingBalanceCloseSubtotalFeeType2 = "terminal-monthly-fee"
	PendingBalanceCloseSubtotalFeeType2AcceptanceRiskFee                                 PendingBalanceCloseSubtotalFeeType2 = "acceptance-risk-fee"
	PendingBalanceCloseSubtotalFeeType2TopUpFee                                          PendingBalanceCloseSubtotalFeeType2 = "top-up-fee"
	PendingBalanceCloseSubtotalFeeType2PaymentGatewayFee                                 PendingBalanceCloseSubtotalFeeType2 = "payment-gateway-fee"
	PendingBalanceCloseSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   PendingBalanceCloseSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	PendingBalanceCloseSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee PendingBalanceCloseSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	PendingBalanceCloseSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             PendingBalanceCloseSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	PendingBalanceCloseSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           PendingBalanceCloseSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	PendingBalanceCloseSubtotalFeeType2MinimumInvoiceAmountFee                           PendingBalanceCloseSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e PendingBalanceCloseSubtotalFeeType2) ToPointer() *PendingBalanceCloseSubtotalFeeType2 {
	return &e
}
func (e *PendingBalanceCloseSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = PendingBalanceCloseSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceCloseSubtotalFeeType2: %v", v)
	}
}

// PendingBalanceCloseSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type PendingBalanceCloseSubtotalPrepaymentPartType2 string

const (
	PendingBalanceCloseSubtotalPrepaymentPartType2Fee                     PendingBalanceCloseSubtotalPrepaymentPartType2 = "fee"
	PendingBalanceCloseSubtotalPrepaymentPartType2FeeReimbursement        PendingBalanceCloseSubtotalPrepaymentPartType2 = "fee-reimbursement"
	PendingBalanceCloseSubtotalPrepaymentPartType2FeeDiscount             PendingBalanceCloseSubtotalPrepaymentPartType2 = "fee-discount"
	PendingBalanceCloseSubtotalPrepaymentPartType2FeeVat                  PendingBalanceCloseSubtotalPrepaymentPartType2 = "fee-vat"
	PendingBalanceCloseSubtotalPrepaymentPartType2FeeRoundingCompensation PendingBalanceCloseSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e PendingBalanceCloseSubtotalPrepaymentPartType2) ToPointer() *PendingBalanceCloseSubtotalPrepaymentPartType2 {
	return &e
}
func (e *PendingBalanceCloseSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = PendingBalanceCloseSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceCloseSubtotalPrepaymentPartType2: %v", v)
	}
}

// PendingBalanceCloseSubtotalTransactionType2 - Represents the transaction type
type PendingBalanceCloseSubtotalTransactionType2 string

const (
	PendingBalanceCloseSubtotalTransactionType2Payment                           PendingBalanceCloseSubtotalTransactionType2 = "payment"
	PendingBalanceCloseSubtotalTransactionType2SplitPayment                      PendingBalanceCloseSubtotalTransactionType2 = "split-payment"
	PendingBalanceCloseSubtotalTransactionType2FailedPayment                     PendingBalanceCloseSubtotalTransactionType2 = "failed-payment"
	PendingBalanceCloseSubtotalTransactionType2FailedPlatformSplitPayment        PendingBalanceCloseSubtotalTransactionType2 = "failed-platform-split-payment"
	PendingBalanceCloseSubtotalTransactionType2FailedSplitPaymentCompensation    PendingBalanceCloseSubtotalTransactionType2 = "failed-split-payment-compensation"
	PendingBalanceCloseSubtotalTransactionType2Capture                           PendingBalanceCloseSubtotalTransactionType2 = "capture"
	PendingBalanceCloseSubtotalTransactionType2SplitTransaction                  PendingBalanceCloseSubtotalTransactionType2 = "split-transaction"
	PendingBalanceCloseSubtotalTransactionType2Refund                            PendingBalanceCloseSubtotalTransactionType2 = "refund"
	PendingBalanceCloseSubtotalTransactionType2PlatformPaymentRefund             PendingBalanceCloseSubtotalTransactionType2 = "platform-payment-refund"
	PendingBalanceCloseSubtotalTransactionType2ReturnedPlatformPaymentRefund     PendingBalanceCloseSubtotalTransactionType2 = "returned-platform-payment-refund"
	PendingBalanceCloseSubtotalTransactionType2RefundCompensation                PendingBalanceCloseSubtotalTransactionType2 = "refund-compensation"
	PendingBalanceCloseSubtotalTransactionType2ReturnedRefundCompensation        PendingBalanceCloseSubtotalTransactionType2 = "returned-refund-compensation"
	PendingBalanceCloseSubtotalTransactionType2ReturnedRefund                    PendingBalanceCloseSubtotalTransactionType2 = "returned-refund"
	PendingBalanceCloseSubtotalTransactionType2Chargeback                        PendingBalanceCloseSubtotalTransactionType2 = "chargeback"
	PendingBalanceCloseSubtotalTransactionType2ChargebackReversal                PendingBalanceCloseSubtotalTransactionType2 = "chargeback-reversal"
	PendingBalanceCloseSubtotalTransactionType2ChargebackCompensation            PendingBalanceCloseSubtotalTransactionType2 = "chargeback-compensation"
	PendingBalanceCloseSubtotalTransactionType2ReversedChargebackCompensation    PendingBalanceCloseSubtotalTransactionType2 = "reversed-chargeback-compensation"
	PendingBalanceCloseSubtotalTransactionType2PlatformPaymentChargeback         PendingBalanceCloseSubtotalTransactionType2 = "platform-payment-chargeback"
	PendingBalanceCloseSubtotalTransactionType2ReversedPlatformPaymentChargeback PendingBalanceCloseSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	PendingBalanceCloseSubtotalTransactionType2FeePrepayment                     PendingBalanceCloseSubtotalTransactionType2 = "fee-prepayment"
	PendingBalanceCloseSubtotalTransactionType2OutgoingTransfer                  PendingBalanceCloseSubtotalTransactionType2 = "outgoing-transfer"
	PendingBalanceCloseSubtotalTransactionType2IncomingTransfer                  PendingBalanceCloseSubtotalTransactionType2 = "incoming-transfer"
	PendingBalanceCloseSubtotalTransactionType2CanceledTransfer                  PendingBalanceCloseSubtotalTransactionType2 = "canceled-transfer"
	PendingBalanceCloseSubtotalTransactionType2ReturnedTransfer                  PendingBalanceCloseSubtotalTransactionType2 = "returned-transfer"
	PendingBalanceCloseSubtotalTransactionType2BalanceReserve                    PendingBalanceCloseSubtotalTransactionType2 = "balance-reserve"
	PendingBalanceCloseSubtotalTransactionType2BalanceReserveReturn              PendingBalanceCloseSubtotalTransactionType2 = "balance-reserve-return"
	PendingBalanceCloseSubtotalTransactionType2InvoiceRoundingCompensation       PendingBalanceCloseSubtotalTransactionType2 = "invoice-rounding-compensation"
	PendingBalanceCloseSubtotalTransactionType2RollingReserveHold                PendingBalanceCloseSubtotalTransactionType2 = "rolling-reserve-hold"
	PendingBalanceCloseSubtotalTransactionType2RollingReserveRelease             PendingBalanceCloseSubtotalTransactionType2 = "rolling-reserve-release"
	PendingBalanceCloseSubtotalTransactionType2BalanceCorrection                 PendingBalanceCloseSubtotalTransactionType2 = "balance-correction"
	PendingBalanceCloseSubtotalTransactionType2Repayment                         PendingBalanceCloseSubtotalTransactionType2 = "repayment"
	PendingBalanceCloseSubtotalTransactionType2Loan                              PendingBalanceCloseSubtotalTransactionType2 = "loan"
	PendingBalanceCloseSubtotalTransactionType2BalanceTopup                      PendingBalanceCloseSubtotalTransactionType2 = "balance-topup"
	PendingBalanceCloseSubtotalTransactionType2CashCollateralIssuance            PendingBalanceCloseSubtotalTransactionType2 = "cash-collateral-issuance';"
	PendingBalanceCloseSubtotalTransactionType2CashCollateralRelease             PendingBalanceCloseSubtotalTransactionType2 = "cash-collateral-release"
	PendingBalanceCloseSubtotalTransactionType2PendingRollingReserve             PendingBalanceCloseSubtotalTransactionType2 = "pending-rolling-reserve"
	PendingBalanceCloseSubtotalTransactionType2ToBeReleasedRollingReserve        PendingBalanceCloseSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	PendingBalanceCloseSubtotalTransactionType2HeldRollingReserve                PendingBalanceCloseSubtotalTransactionType2 = "held-rolling-reserve"
	PendingBalanceCloseSubtotalTransactionType2ReleasedRollingReserve            PendingBalanceCloseSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e PendingBalanceCloseSubtotalTransactionType2) ToPointer() *PendingBalanceCloseSubtotalTransactionType2 {
	return &e
}
func (e *PendingBalanceCloseSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = PendingBalanceCloseSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceCloseSubtotalTransactionType2: %v", v)
	}
}

type PendingBalanceCloseSubtotal2 struct {
	SubTotals []PendingBalanceCloseSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *PendingBalanceCloseSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *PendingBalanceCloseSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *PendingBalanceCloseSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *PendingBalanceCloseSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *PendingBalanceCloseSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *PendingBalanceCloseSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *PendingBalanceCloseSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *PendingBalanceCloseSubtotal2) GetSubTotals() []PendingBalanceCloseSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *PendingBalanceCloseSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *PendingBalanceCloseSubtotal2) GetMethod() *PendingBalanceCloseSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PendingBalanceCloseSubtotal2) GetCardIssuer() *PendingBalanceCloseSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *PendingBalanceCloseSubtotal2) GetCardAudience() *PendingBalanceCloseSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *PendingBalanceCloseSubtotal2) GetCardRegion() *PendingBalanceCloseSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *PendingBalanceCloseSubtotal2) GetFeeType() *PendingBalanceCloseSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *PendingBalanceCloseSubtotal2) GetPrepaymentPartType() *PendingBalanceCloseSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *PendingBalanceCloseSubtotal2) GetTransactionType() *PendingBalanceCloseSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type PendingBalanceClose struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *PendingBalanceCloseAmount     `json:"amount,omitempty"`
	Subtotals []PendingBalanceCloseSubtotal2 `json:"subtotals,omitempty"`
}

func (o *PendingBalanceClose) GetAmount() *PendingBalanceCloseAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *PendingBalanceClose) GetSubtotals() []PendingBalanceCloseSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// PendingBalancePendingAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type PendingBalancePendingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *PendingBalancePendingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *PendingBalancePendingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// PendingBalancePendingSubTotalMethod1 - Payment type of the transactions
type PendingBalancePendingSubTotalMethod1 string

const (
	PendingBalancePendingSubTotalMethod1Alma              PendingBalancePendingSubTotalMethod1 = "alma"
	PendingBalancePendingSubTotalMethod1Bacs              PendingBalancePendingSubTotalMethod1 = "bacs"
	PendingBalancePendingSubTotalMethod1Applepay          PendingBalancePendingSubTotalMethod1 = "applepay"
	PendingBalancePendingSubTotalMethod1Bancomatpay       PendingBalancePendingSubTotalMethod1 = "bancomatpay"
	PendingBalancePendingSubTotalMethod1Bancontact        PendingBalancePendingSubTotalMethod1 = "bancontact"
	PendingBalancePendingSubTotalMethod1Banktransfer      PendingBalancePendingSubTotalMethod1 = "banktransfer"
	PendingBalancePendingSubTotalMethod1Belfius           PendingBalancePendingSubTotalMethod1 = "belfius"
	PendingBalancePendingSubTotalMethod1Billie            PendingBalancePendingSubTotalMethod1 = "billie"
	PendingBalancePendingSubTotalMethod1Bizum             PendingBalancePendingSubTotalMethod1 = "bizum"
	PendingBalancePendingSubTotalMethod1Bitcoin           PendingBalancePendingSubTotalMethod1 = "bitcoin"
	PendingBalancePendingSubTotalMethod1Blik              PendingBalancePendingSubTotalMethod1 = "blik"
	PendingBalancePendingSubTotalMethod1Creditcard        PendingBalancePendingSubTotalMethod1 = "creditcard"
	PendingBalancePendingSubTotalMethod1Directdebit       PendingBalancePendingSubTotalMethod1 = "directdebit"
	PendingBalancePendingSubTotalMethod1Eps               PendingBalancePendingSubTotalMethod1 = "eps"
	PendingBalancePendingSubTotalMethod1Giftcard          PendingBalancePendingSubTotalMethod1 = "giftcard"
	PendingBalancePendingSubTotalMethod1Giropay           PendingBalancePendingSubTotalMethod1 = "giropay"
	PendingBalancePendingSubTotalMethod1Googlepay         PendingBalancePendingSubTotalMethod1 = "googlepay"
	PendingBalancePendingSubTotalMethod1Ideal             PendingBalancePendingSubTotalMethod1 = "ideal"
	PendingBalancePendingSubTotalMethod1In3               PendingBalancePendingSubTotalMethod1 = "in3"
	PendingBalancePendingSubTotalMethod1Inghomepay        PendingBalancePendingSubTotalMethod1 = "inghomepay"
	PendingBalancePendingSubTotalMethod1Kbc               PendingBalancePendingSubTotalMethod1 = "kbc"
	PendingBalancePendingSubTotalMethod1Klarnapaylater    PendingBalancePendingSubTotalMethod1 = "klarnapaylater"
	PendingBalancePendingSubTotalMethod1Klarnapaynow      PendingBalancePendingSubTotalMethod1 = "klarnapaynow"
	PendingBalancePendingSubTotalMethod1Klarnasliceit     PendingBalancePendingSubTotalMethod1 = "klarnasliceit"
	PendingBalancePendingSubTotalMethod1Klarna            PendingBalancePendingSubTotalMethod1 = "klarna"
	PendingBalancePendingSubTotalMethod1Mbway             PendingBalancePendingSubTotalMethod1 = "mbway"
	PendingBalancePendingSubTotalMethod1Multibanco        PendingBalancePendingSubTotalMethod1 = "multibanco"
	PendingBalancePendingSubTotalMethod1Mybank            PendingBalancePendingSubTotalMethod1 = "mybank"
	PendingBalancePendingSubTotalMethod1Paybybank         PendingBalancePendingSubTotalMethod1 = "paybybank"
	PendingBalancePendingSubTotalMethod1Payconiq          PendingBalancePendingSubTotalMethod1 = "payconiq"
	PendingBalancePendingSubTotalMethod1Paypal            PendingBalancePendingSubTotalMethod1 = "paypal"
	PendingBalancePendingSubTotalMethod1Paysafecard       PendingBalancePendingSubTotalMethod1 = "paysafecard"
	PendingBalancePendingSubTotalMethod1Przelewy24        PendingBalancePendingSubTotalMethod1 = "przelewy24"
	PendingBalancePendingSubTotalMethod1Riverty           PendingBalancePendingSubTotalMethod1 = "riverty"
	PendingBalancePendingSubTotalMethod1Satispay          PendingBalancePendingSubTotalMethod1 = "satispay"
	PendingBalancePendingSubTotalMethod1Podiumcadeaukaart PendingBalancePendingSubTotalMethod1 = "podiumcadeaukaart"
	PendingBalancePendingSubTotalMethod1Pointofsale       PendingBalancePendingSubTotalMethod1 = "pointofsale"
	PendingBalancePendingSubTotalMethod1Sofort            PendingBalancePendingSubTotalMethod1 = "sofort"
	PendingBalancePendingSubTotalMethod1Swish             PendingBalancePendingSubTotalMethod1 = "swish"
	PendingBalancePendingSubTotalMethod1Trustly           PendingBalancePendingSubTotalMethod1 = "trustly"
	PendingBalancePendingSubTotalMethod1Twint             PendingBalancePendingSubTotalMethod1 = "twint"
	PendingBalancePendingSubTotalMethod1Voucher           PendingBalancePendingSubTotalMethod1 = "voucher"
)

func (e PendingBalancePendingSubTotalMethod1) ToPointer() *PendingBalancePendingSubTotalMethod1 {
	return &e
}
func (e *PendingBalancePendingSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = PendingBalancePendingSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalancePendingSubTotalMethod1: %v", v)
	}
}

// PendingBalancePendingSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type PendingBalancePendingSubTotalCardIssuer1 string

const (
	PendingBalancePendingSubTotalCardIssuer1Amex          PendingBalancePendingSubTotalCardIssuer1 = "amex"
	PendingBalancePendingSubTotalCardIssuer1Maestro       PendingBalancePendingSubTotalCardIssuer1 = "maestro"
	PendingBalancePendingSubTotalCardIssuer1CarteBancaire PendingBalancePendingSubTotalCardIssuer1 = "carte-bancaire"
	PendingBalancePendingSubTotalCardIssuer1Other         PendingBalancePendingSubTotalCardIssuer1 = "other"
)

func (e PendingBalancePendingSubTotalCardIssuer1) ToPointer() *PendingBalancePendingSubTotalCardIssuer1 {
	return &e
}
func (e *PendingBalancePendingSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = PendingBalancePendingSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalancePendingSubTotalCardIssuer1: %v", v)
	}
}

// PendingBalancePendingSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type PendingBalancePendingSubTotalCardAudience1 string

const (
	PendingBalancePendingSubTotalCardAudience1Corporate PendingBalancePendingSubTotalCardAudience1 = "corporate"
	PendingBalancePendingSubTotalCardAudience1Other     PendingBalancePendingSubTotalCardAudience1 = "other"
)

func (e PendingBalancePendingSubTotalCardAudience1) ToPointer() *PendingBalancePendingSubTotalCardAudience1 {
	return &e
}
func (e *PendingBalancePendingSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = PendingBalancePendingSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalancePendingSubTotalCardAudience1: %v", v)
	}
}

// PendingBalancePendingSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type PendingBalancePendingSubTotalCardRegion1 string

const (
	PendingBalancePendingSubTotalCardRegion1IntraEea PendingBalancePendingSubTotalCardRegion1 = "intra-eea"
	PendingBalancePendingSubTotalCardRegion1IntraEu  PendingBalancePendingSubTotalCardRegion1 = "intra-eu"
	PendingBalancePendingSubTotalCardRegion1Domestic PendingBalancePendingSubTotalCardRegion1 = "domestic"
	PendingBalancePendingSubTotalCardRegion1Other    PendingBalancePendingSubTotalCardRegion1 = "other"
)

func (e PendingBalancePendingSubTotalCardRegion1) ToPointer() *PendingBalancePendingSubTotalCardRegion1 {
	return &e
}
func (e *PendingBalancePendingSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = PendingBalancePendingSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalancePendingSubTotalCardRegion1: %v", v)
	}
}

// PendingBalancePendingSubTotalFeeType1 - Present when the transaction represents a fee.
type PendingBalancePendingSubTotalFeeType1 string

const (
	PendingBalancePendingSubTotalFeeType1PaymentFee                                        PendingBalancePendingSubTotalFeeType1 = "payment-fee"
	PendingBalancePendingSubTotalFeeType1DirectDebitFailureFee                             PendingBalancePendingSubTotalFeeType1 = "direct-debit-failure-fee"
	PendingBalancePendingSubTotalFeeType1UnauthorizedDirectDebitFee                        PendingBalancePendingSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	PendingBalancePendingSubTotalFeeType1BankChargedDirectDebitFailureFee                  PendingBalancePendingSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	PendingBalancePendingSubTotalFeeType1PartnerCommission                                 PendingBalancePendingSubTotalFeeType1 = "partner-commission"
	PendingBalancePendingSubTotalFeeType1ApplicationFee                                    PendingBalancePendingSubTotalFeeType1 = "application-fee"
	PendingBalancePendingSubTotalFeeType1CaptureFee                                        PendingBalancePendingSubTotalFeeType1 = "capture-fee"
	PendingBalancePendingSubTotalFeeType1RefundFee                                         PendingBalancePendingSubTotalFeeType1 = "refund-fee"
	PendingBalancePendingSubTotalFeeType1ChargebackFee                                     PendingBalancePendingSubTotalFeeType1 = "chargeback-fee"
	PendingBalancePendingSubTotalFeeType1PaymentNotificationFee                            PendingBalancePendingSubTotalFeeType1 = "payment-notification-fee"
	PendingBalancePendingSubTotalFeeType1TransferNotificationFee                           PendingBalancePendingSubTotalFeeType1 = "transfer-notification-fee"
	PendingBalancePendingSubTotalFeeType1PayoutFee                                         PendingBalancePendingSubTotalFeeType1 = "payout-fee"
	PendingBalancePendingSubTotalFeeType1FeeDiscount                                       PendingBalancePendingSubTotalFeeType1 = "fee-discount"
	PendingBalancePendingSubTotalFeeType1FeeReimbursement                                  PendingBalancePendingSubTotalFeeType1 = "fee-reimbursement"
	PendingBalancePendingSubTotalFeeType1PlatformVolumeFee                                 PendingBalancePendingSubTotalFeeType1 = "platform-volume-fee"
	PendingBalancePendingSubTotalFeeType1PlatformConnectedOrganizationsFee                 PendingBalancePendingSubTotalFeeType1 = "platform-connected-organizations-fee"
	PendingBalancePendingSubTotalFeeType1BalanceChargeFee                                  PendingBalancePendingSubTotalFeeType1 = "balance-charge-fee"
	PendingBalancePendingSubTotalFeeType1ThreedsAuthenticationAttemptFee                   PendingBalancePendingSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	PendingBalancePendingSubTotalFeeType1TerminalMonthlyFee                                PendingBalancePendingSubTotalFeeType1 = "terminal-monthly-fee"
	PendingBalancePendingSubTotalFeeType1AcceptanceRiskFee                                 PendingBalancePendingSubTotalFeeType1 = "acceptance-risk-fee"
	PendingBalancePendingSubTotalFeeType1TopUpFee                                          PendingBalancePendingSubTotalFeeType1 = "top-up-fee"
	PendingBalancePendingSubTotalFeeType1PaymentGatewayFee                                 PendingBalancePendingSubTotalFeeType1 = "payment-gateway-fee"
	PendingBalancePendingSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   PendingBalancePendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	PendingBalancePendingSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee PendingBalancePendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	PendingBalancePendingSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             PendingBalancePendingSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	PendingBalancePendingSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           PendingBalancePendingSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	PendingBalancePendingSubTotalFeeType1MinimumInvoiceAmountFee                           PendingBalancePendingSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e PendingBalancePendingSubTotalFeeType1) ToPointer() *PendingBalancePendingSubTotalFeeType1 {
	return &e
}
func (e *PendingBalancePendingSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = PendingBalancePendingSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalancePendingSubTotalFeeType1: %v", v)
	}
}

// PendingBalancePendingSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type PendingBalancePendingSubTotalPrepaymentPartType1 string

const (
	PendingBalancePendingSubTotalPrepaymentPartType1Fee                     PendingBalancePendingSubTotalPrepaymentPartType1 = "fee"
	PendingBalancePendingSubTotalPrepaymentPartType1FeeReimbursement        PendingBalancePendingSubTotalPrepaymentPartType1 = "fee-reimbursement"
	PendingBalancePendingSubTotalPrepaymentPartType1FeeDiscount             PendingBalancePendingSubTotalPrepaymentPartType1 = "fee-discount"
	PendingBalancePendingSubTotalPrepaymentPartType1FeeVat                  PendingBalancePendingSubTotalPrepaymentPartType1 = "fee-vat"
	PendingBalancePendingSubTotalPrepaymentPartType1FeeRoundingCompensation PendingBalancePendingSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e PendingBalancePendingSubTotalPrepaymentPartType1) ToPointer() *PendingBalancePendingSubTotalPrepaymentPartType1 {
	return &e
}
func (e *PendingBalancePendingSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = PendingBalancePendingSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalancePendingSubTotalPrepaymentPartType1: %v", v)
	}
}

// PendingBalancePendingSubTotalTransactionType1 - Represents the transaction type
type PendingBalancePendingSubTotalTransactionType1 string

const (
	PendingBalancePendingSubTotalTransactionType1Payment                           PendingBalancePendingSubTotalTransactionType1 = "payment"
	PendingBalancePendingSubTotalTransactionType1SplitPayment                      PendingBalancePendingSubTotalTransactionType1 = "split-payment"
	PendingBalancePendingSubTotalTransactionType1FailedPayment                     PendingBalancePendingSubTotalTransactionType1 = "failed-payment"
	PendingBalancePendingSubTotalTransactionType1FailedPlatformSplitPayment        PendingBalancePendingSubTotalTransactionType1 = "failed-platform-split-payment"
	PendingBalancePendingSubTotalTransactionType1FailedSplitPaymentCompensation    PendingBalancePendingSubTotalTransactionType1 = "failed-split-payment-compensation"
	PendingBalancePendingSubTotalTransactionType1Capture                           PendingBalancePendingSubTotalTransactionType1 = "capture"
	PendingBalancePendingSubTotalTransactionType1SplitTransaction                  PendingBalancePendingSubTotalTransactionType1 = "split-transaction"
	PendingBalancePendingSubTotalTransactionType1Refund                            PendingBalancePendingSubTotalTransactionType1 = "refund"
	PendingBalancePendingSubTotalTransactionType1PlatformPaymentRefund             PendingBalancePendingSubTotalTransactionType1 = "platform-payment-refund"
	PendingBalancePendingSubTotalTransactionType1ReturnedPlatformPaymentRefund     PendingBalancePendingSubTotalTransactionType1 = "returned-platform-payment-refund"
	PendingBalancePendingSubTotalTransactionType1RefundCompensation                PendingBalancePendingSubTotalTransactionType1 = "refund-compensation"
	PendingBalancePendingSubTotalTransactionType1ReturnedRefundCompensation        PendingBalancePendingSubTotalTransactionType1 = "returned-refund-compensation"
	PendingBalancePendingSubTotalTransactionType1ReturnedRefund                    PendingBalancePendingSubTotalTransactionType1 = "returned-refund"
	PendingBalancePendingSubTotalTransactionType1Chargeback                        PendingBalancePendingSubTotalTransactionType1 = "chargeback"
	PendingBalancePendingSubTotalTransactionType1ChargebackReversal                PendingBalancePendingSubTotalTransactionType1 = "chargeback-reversal"
	PendingBalancePendingSubTotalTransactionType1ChargebackCompensation            PendingBalancePendingSubTotalTransactionType1 = "chargeback-compensation"
	PendingBalancePendingSubTotalTransactionType1ReversedChargebackCompensation    PendingBalancePendingSubTotalTransactionType1 = "reversed-chargeback-compensation"
	PendingBalancePendingSubTotalTransactionType1PlatformPaymentChargeback         PendingBalancePendingSubTotalTransactionType1 = "platform-payment-chargeback"
	PendingBalancePendingSubTotalTransactionType1ReversedPlatformPaymentChargeback PendingBalancePendingSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	PendingBalancePendingSubTotalTransactionType1FeePrepayment                     PendingBalancePendingSubTotalTransactionType1 = "fee-prepayment"
	PendingBalancePendingSubTotalTransactionType1OutgoingTransfer                  PendingBalancePendingSubTotalTransactionType1 = "outgoing-transfer"
	PendingBalancePendingSubTotalTransactionType1IncomingTransfer                  PendingBalancePendingSubTotalTransactionType1 = "incoming-transfer"
	PendingBalancePendingSubTotalTransactionType1CanceledTransfer                  PendingBalancePendingSubTotalTransactionType1 = "canceled-transfer"
	PendingBalancePendingSubTotalTransactionType1ReturnedTransfer                  PendingBalancePendingSubTotalTransactionType1 = "returned-transfer"
	PendingBalancePendingSubTotalTransactionType1BalanceReserve                    PendingBalancePendingSubTotalTransactionType1 = "balance-reserve"
	PendingBalancePendingSubTotalTransactionType1BalanceReserveReturn              PendingBalancePendingSubTotalTransactionType1 = "balance-reserve-return"
	PendingBalancePendingSubTotalTransactionType1InvoiceRoundingCompensation       PendingBalancePendingSubTotalTransactionType1 = "invoice-rounding-compensation"
	PendingBalancePendingSubTotalTransactionType1RollingReserveHold                PendingBalancePendingSubTotalTransactionType1 = "rolling-reserve-hold"
	PendingBalancePendingSubTotalTransactionType1RollingReserveRelease             PendingBalancePendingSubTotalTransactionType1 = "rolling-reserve-release"
	PendingBalancePendingSubTotalTransactionType1BalanceCorrection                 PendingBalancePendingSubTotalTransactionType1 = "balance-correction"
	PendingBalancePendingSubTotalTransactionType1Repayment                         PendingBalancePendingSubTotalTransactionType1 = "repayment"
	PendingBalancePendingSubTotalTransactionType1Loan                              PendingBalancePendingSubTotalTransactionType1 = "loan"
	PendingBalancePendingSubTotalTransactionType1BalanceTopup                      PendingBalancePendingSubTotalTransactionType1 = "balance-topup"
	PendingBalancePendingSubTotalTransactionType1CashCollateralIssuance            PendingBalancePendingSubTotalTransactionType1 = "cash-collateral-issuance';"
	PendingBalancePendingSubTotalTransactionType1CashCollateralRelease             PendingBalancePendingSubTotalTransactionType1 = "cash-collateral-release"
	PendingBalancePendingSubTotalTransactionType1PendingRollingReserve             PendingBalancePendingSubTotalTransactionType1 = "pending-rolling-reserve"
	PendingBalancePendingSubTotalTransactionType1ToBeReleasedRollingReserve        PendingBalancePendingSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	PendingBalancePendingSubTotalTransactionType1HeldRollingReserve                PendingBalancePendingSubTotalTransactionType1 = "held-rolling-reserve"
	PendingBalancePendingSubTotalTransactionType1ReleasedRollingReserve            PendingBalancePendingSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e PendingBalancePendingSubTotalTransactionType1) ToPointer() *PendingBalancePendingSubTotalTransactionType1 {
	return &e
}
func (e *PendingBalancePendingSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = PendingBalancePendingSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalancePendingSubTotalTransactionType1: %v", v)
	}
}

type PendingBalancePendingSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *PendingBalancePendingSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *PendingBalancePendingSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *PendingBalancePendingSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *PendingBalancePendingSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *PendingBalancePendingSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *PendingBalancePendingSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *PendingBalancePendingSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *PendingBalancePendingSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *PendingBalancePendingSubTotal1) GetMethod() *PendingBalancePendingSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PendingBalancePendingSubTotal1) GetCardIssuer() *PendingBalancePendingSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *PendingBalancePendingSubTotal1) GetCardAudience() *PendingBalancePendingSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *PendingBalancePendingSubTotal1) GetCardRegion() *PendingBalancePendingSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *PendingBalancePendingSubTotal1) GetFeeType() *PendingBalancePendingSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *PendingBalancePendingSubTotal1) GetPrepaymentPartType() *PendingBalancePendingSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *PendingBalancePendingSubTotal1) GetTransactionType() *PendingBalancePendingSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// PendingBalancePendingSubtotalMethod2 - Payment type of the transactions
type PendingBalancePendingSubtotalMethod2 string

const (
	PendingBalancePendingSubtotalMethod2Alma              PendingBalancePendingSubtotalMethod2 = "alma"
	PendingBalancePendingSubtotalMethod2Bacs              PendingBalancePendingSubtotalMethod2 = "bacs"
	PendingBalancePendingSubtotalMethod2Applepay          PendingBalancePendingSubtotalMethod2 = "applepay"
	PendingBalancePendingSubtotalMethod2Bancomatpay       PendingBalancePendingSubtotalMethod2 = "bancomatpay"
	PendingBalancePendingSubtotalMethod2Bancontact        PendingBalancePendingSubtotalMethod2 = "bancontact"
	PendingBalancePendingSubtotalMethod2Banktransfer      PendingBalancePendingSubtotalMethod2 = "banktransfer"
	PendingBalancePendingSubtotalMethod2Belfius           PendingBalancePendingSubtotalMethod2 = "belfius"
	PendingBalancePendingSubtotalMethod2Billie            PendingBalancePendingSubtotalMethod2 = "billie"
	PendingBalancePendingSubtotalMethod2Bizum             PendingBalancePendingSubtotalMethod2 = "bizum"
	PendingBalancePendingSubtotalMethod2Bitcoin           PendingBalancePendingSubtotalMethod2 = "bitcoin"
	PendingBalancePendingSubtotalMethod2Blik              PendingBalancePendingSubtotalMethod2 = "blik"
	PendingBalancePendingSubtotalMethod2Creditcard        PendingBalancePendingSubtotalMethod2 = "creditcard"
	PendingBalancePendingSubtotalMethod2Directdebit       PendingBalancePendingSubtotalMethod2 = "directdebit"
	PendingBalancePendingSubtotalMethod2Eps               PendingBalancePendingSubtotalMethod2 = "eps"
	PendingBalancePendingSubtotalMethod2Giftcard          PendingBalancePendingSubtotalMethod2 = "giftcard"
	PendingBalancePendingSubtotalMethod2Giropay           PendingBalancePendingSubtotalMethod2 = "giropay"
	PendingBalancePendingSubtotalMethod2Googlepay         PendingBalancePendingSubtotalMethod2 = "googlepay"
	PendingBalancePendingSubtotalMethod2Ideal             PendingBalancePendingSubtotalMethod2 = "ideal"
	PendingBalancePendingSubtotalMethod2In3               PendingBalancePendingSubtotalMethod2 = "in3"
	PendingBalancePendingSubtotalMethod2Inghomepay        PendingBalancePendingSubtotalMethod2 = "inghomepay"
	PendingBalancePendingSubtotalMethod2Kbc               PendingBalancePendingSubtotalMethod2 = "kbc"
	PendingBalancePendingSubtotalMethod2Klarnapaylater    PendingBalancePendingSubtotalMethod2 = "klarnapaylater"
	PendingBalancePendingSubtotalMethod2Klarnapaynow      PendingBalancePendingSubtotalMethod2 = "klarnapaynow"
	PendingBalancePendingSubtotalMethod2Klarnasliceit     PendingBalancePendingSubtotalMethod2 = "klarnasliceit"
	PendingBalancePendingSubtotalMethod2Klarna            PendingBalancePendingSubtotalMethod2 = "klarna"
	PendingBalancePendingSubtotalMethod2Mbway             PendingBalancePendingSubtotalMethod2 = "mbway"
	PendingBalancePendingSubtotalMethod2Multibanco        PendingBalancePendingSubtotalMethod2 = "multibanco"
	PendingBalancePendingSubtotalMethod2Mybank            PendingBalancePendingSubtotalMethod2 = "mybank"
	PendingBalancePendingSubtotalMethod2Paybybank         PendingBalancePendingSubtotalMethod2 = "paybybank"
	PendingBalancePendingSubtotalMethod2Payconiq          PendingBalancePendingSubtotalMethod2 = "payconiq"
	PendingBalancePendingSubtotalMethod2Paypal            PendingBalancePendingSubtotalMethod2 = "paypal"
	PendingBalancePendingSubtotalMethod2Paysafecard       PendingBalancePendingSubtotalMethod2 = "paysafecard"
	PendingBalancePendingSubtotalMethod2Przelewy24        PendingBalancePendingSubtotalMethod2 = "przelewy24"
	PendingBalancePendingSubtotalMethod2Riverty           PendingBalancePendingSubtotalMethod2 = "riverty"
	PendingBalancePendingSubtotalMethod2Satispay          PendingBalancePendingSubtotalMethod2 = "satispay"
	PendingBalancePendingSubtotalMethod2Podiumcadeaukaart PendingBalancePendingSubtotalMethod2 = "podiumcadeaukaart"
	PendingBalancePendingSubtotalMethod2Pointofsale       PendingBalancePendingSubtotalMethod2 = "pointofsale"
	PendingBalancePendingSubtotalMethod2Sofort            PendingBalancePendingSubtotalMethod2 = "sofort"
	PendingBalancePendingSubtotalMethod2Swish             PendingBalancePendingSubtotalMethod2 = "swish"
	PendingBalancePendingSubtotalMethod2Trustly           PendingBalancePendingSubtotalMethod2 = "trustly"
	PendingBalancePendingSubtotalMethod2Twint             PendingBalancePendingSubtotalMethod2 = "twint"
	PendingBalancePendingSubtotalMethod2Voucher           PendingBalancePendingSubtotalMethod2 = "voucher"
)

func (e PendingBalancePendingSubtotalMethod2) ToPointer() *PendingBalancePendingSubtotalMethod2 {
	return &e
}
func (e *PendingBalancePendingSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = PendingBalancePendingSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalancePendingSubtotalMethod2: %v", v)
	}
}

// PendingBalancePendingSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type PendingBalancePendingSubtotalCardIssuer2 string

const (
	PendingBalancePendingSubtotalCardIssuer2Amex          PendingBalancePendingSubtotalCardIssuer2 = "amex"
	PendingBalancePendingSubtotalCardIssuer2Maestro       PendingBalancePendingSubtotalCardIssuer2 = "maestro"
	PendingBalancePendingSubtotalCardIssuer2CarteBancaire PendingBalancePendingSubtotalCardIssuer2 = "carte-bancaire"
	PendingBalancePendingSubtotalCardIssuer2Other         PendingBalancePendingSubtotalCardIssuer2 = "other"
)

func (e PendingBalancePendingSubtotalCardIssuer2) ToPointer() *PendingBalancePendingSubtotalCardIssuer2 {
	return &e
}
func (e *PendingBalancePendingSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = PendingBalancePendingSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalancePendingSubtotalCardIssuer2: %v", v)
	}
}

// PendingBalancePendingSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type PendingBalancePendingSubtotalCardAudience2 string

const (
	PendingBalancePendingSubtotalCardAudience2Corporate PendingBalancePendingSubtotalCardAudience2 = "corporate"
	PendingBalancePendingSubtotalCardAudience2Other     PendingBalancePendingSubtotalCardAudience2 = "other"
)

func (e PendingBalancePendingSubtotalCardAudience2) ToPointer() *PendingBalancePendingSubtotalCardAudience2 {
	return &e
}
func (e *PendingBalancePendingSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = PendingBalancePendingSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalancePendingSubtotalCardAudience2: %v", v)
	}
}

// PendingBalancePendingSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type PendingBalancePendingSubtotalCardRegion2 string

const (
	PendingBalancePendingSubtotalCardRegion2IntraEea PendingBalancePendingSubtotalCardRegion2 = "intra-eea"
	PendingBalancePendingSubtotalCardRegion2IntraEu  PendingBalancePendingSubtotalCardRegion2 = "intra-eu"
	PendingBalancePendingSubtotalCardRegion2Domestic PendingBalancePendingSubtotalCardRegion2 = "domestic"
	PendingBalancePendingSubtotalCardRegion2Other    PendingBalancePendingSubtotalCardRegion2 = "other"
)

func (e PendingBalancePendingSubtotalCardRegion2) ToPointer() *PendingBalancePendingSubtotalCardRegion2 {
	return &e
}
func (e *PendingBalancePendingSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = PendingBalancePendingSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalancePendingSubtotalCardRegion2: %v", v)
	}
}

// PendingBalancePendingSubtotalFeeType2 - Present when the transaction represents a fee.
type PendingBalancePendingSubtotalFeeType2 string

const (
	PendingBalancePendingSubtotalFeeType2PaymentFee                                        PendingBalancePendingSubtotalFeeType2 = "payment-fee"
	PendingBalancePendingSubtotalFeeType2DirectDebitFailureFee                             PendingBalancePendingSubtotalFeeType2 = "direct-debit-failure-fee"
	PendingBalancePendingSubtotalFeeType2UnauthorizedDirectDebitFee                        PendingBalancePendingSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	PendingBalancePendingSubtotalFeeType2BankChargedDirectDebitFailureFee                  PendingBalancePendingSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	PendingBalancePendingSubtotalFeeType2PartnerCommission                                 PendingBalancePendingSubtotalFeeType2 = "partner-commission"
	PendingBalancePendingSubtotalFeeType2ApplicationFee                                    PendingBalancePendingSubtotalFeeType2 = "application-fee"
	PendingBalancePendingSubtotalFeeType2CaptureFee                                        PendingBalancePendingSubtotalFeeType2 = "capture-fee"
	PendingBalancePendingSubtotalFeeType2RefundFee                                         PendingBalancePendingSubtotalFeeType2 = "refund-fee"
	PendingBalancePendingSubtotalFeeType2ChargebackFee                                     PendingBalancePendingSubtotalFeeType2 = "chargeback-fee"
	PendingBalancePendingSubtotalFeeType2PaymentNotificationFee                            PendingBalancePendingSubtotalFeeType2 = "payment-notification-fee"
	PendingBalancePendingSubtotalFeeType2TransferNotificationFee                           PendingBalancePendingSubtotalFeeType2 = "transfer-notification-fee"
	PendingBalancePendingSubtotalFeeType2PayoutFee                                         PendingBalancePendingSubtotalFeeType2 = "payout-fee"
	PendingBalancePendingSubtotalFeeType2FeeDiscount                                       PendingBalancePendingSubtotalFeeType2 = "fee-discount"
	PendingBalancePendingSubtotalFeeType2FeeReimbursement                                  PendingBalancePendingSubtotalFeeType2 = "fee-reimbursement"
	PendingBalancePendingSubtotalFeeType2PlatformVolumeFee                                 PendingBalancePendingSubtotalFeeType2 = "platform-volume-fee"
	PendingBalancePendingSubtotalFeeType2PlatformConnectedOrganizationsFee                 PendingBalancePendingSubtotalFeeType2 = "platform-connected-organizations-fee"
	PendingBalancePendingSubtotalFeeType2BalanceChargeFee                                  PendingBalancePendingSubtotalFeeType2 = "balance-charge-fee"
	PendingBalancePendingSubtotalFeeType2ThreedsAuthenticationAttemptFee                   PendingBalancePendingSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	PendingBalancePendingSubtotalFeeType2TerminalMonthlyFee                                PendingBalancePendingSubtotalFeeType2 = "terminal-monthly-fee"
	PendingBalancePendingSubtotalFeeType2AcceptanceRiskFee                                 PendingBalancePendingSubtotalFeeType2 = "acceptance-risk-fee"
	PendingBalancePendingSubtotalFeeType2TopUpFee                                          PendingBalancePendingSubtotalFeeType2 = "top-up-fee"
	PendingBalancePendingSubtotalFeeType2PaymentGatewayFee                                 PendingBalancePendingSubtotalFeeType2 = "payment-gateway-fee"
	PendingBalancePendingSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   PendingBalancePendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	PendingBalancePendingSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee PendingBalancePendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	PendingBalancePendingSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             PendingBalancePendingSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	PendingBalancePendingSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           PendingBalancePendingSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	PendingBalancePendingSubtotalFeeType2MinimumInvoiceAmountFee                           PendingBalancePendingSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e PendingBalancePendingSubtotalFeeType2) ToPointer() *PendingBalancePendingSubtotalFeeType2 {
	return &e
}
func (e *PendingBalancePendingSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = PendingBalancePendingSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalancePendingSubtotalFeeType2: %v", v)
	}
}

// PendingBalancePendingSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type PendingBalancePendingSubtotalPrepaymentPartType2 string

const (
	PendingBalancePendingSubtotalPrepaymentPartType2Fee                     PendingBalancePendingSubtotalPrepaymentPartType2 = "fee"
	PendingBalancePendingSubtotalPrepaymentPartType2FeeReimbursement        PendingBalancePendingSubtotalPrepaymentPartType2 = "fee-reimbursement"
	PendingBalancePendingSubtotalPrepaymentPartType2FeeDiscount             PendingBalancePendingSubtotalPrepaymentPartType2 = "fee-discount"
	PendingBalancePendingSubtotalPrepaymentPartType2FeeVat                  PendingBalancePendingSubtotalPrepaymentPartType2 = "fee-vat"
	PendingBalancePendingSubtotalPrepaymentPartType2FeeRoundingCompensation PendingBalancePendingSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e PendingBalancePendingSubtotalPrepaymentPartType2) ToPointer() *PendingBalancePendingSubtotalPrepaymentPartType2 {
	return &e
}
func (e *PendingBalancePendingSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = PendingBalancePendingSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalancePendingSubtotalPrepaymentPartType2: %v", v)
	}
}

// PendingBalancePendingSubtotalTransactionType2 - Represents the transaction type
type PendingBalancePendingSubtotalTransactionType2 string

const (
	PendingBalancePendingSubtotalTransactionType2Payment                           PendingBalancePendingSubtotalTransactionType2 = "payment"
	PendingBalancePendingSubtotalTransactionType2SplitPayment                      PendingBalancePendingSubtotalTransactionType2 = "split-payment"
	PendingBalancePendingSubtotalTransactionType2FailedPayment                     PendingBalancePendingSubtotalTransactionType2 = "failed-payment"
	PendingBalancePendingSubtotalTransactionType2FailedPlatformSplitPayment        PendingBalancePendingSubtotalTransactionType2 = "failed-platform-split-payment"
	PendingBalancePendingSubtotalTransactionType2FailedSplitPaymentCompensation    PendingBalancePendingSubtotalTransactionType2 = "failed-split-payment-compensation"
	PendingBalancePendingSubtotalTransactionType2Capture                           PendingBalancePendingSubtotalTransactionType2 = "capture"
	PendingBalancePendingSubtotalTransactionType2SplitTransaction                  PendingBalancePendingSubtotalTransactionType2 = "split-transaction"
	PendingBalancePendingSubtotalTransactionType2Refund                            PendingBalancePendingSubtotalTransactionType2 = "refund"
	PendingBalancePendingSubtotalTransactionType2PlatformPaymentRefund             PendingBalancePendingSubtotalTransactionType2 = "platform-payment-refund"
	PendingBalancePendingSubtotalTransactionType2ReturnedPlatformPaymentRefund     PendingBalancePendingSubtotalTransactionType2 = "returned-platform-payment-refund"
	PendingBalancePendingSubtotalTransactionType2RefundCompensation                PendingBalancePendingSubtotalTransactionType2 = "refund-compensation"
	PendingBalancePendingSubtotalTransactionType2ReturnedRefundCompensation        PendingBalancePendingSubtotalTransactionType2 = "returned-refund-compensation"
	PendingBalancePendingSubtotalTransactionType2ReturnedRefund                    PendingBalancePendingSubtotalTransactionType2 = "returned-refund"
	PendingBalancePendingSubtotalTransactionType2Chargeback                        PendingBalancePendingSubtotalTransactionType2 = "chargeback"
	PendingBalancePendingSubtotalTransactionType2ChargebackReversal                PendingBalancePendingSubtotalTransactionType2 = "chargeback-reversal"
	PendingBalancePendingSubtotalTransactionType2ChargebackCompensation            PendingBalancePendingSubtotalTransactionType2 = "chargeback-compensation"
	PendingBalancePendingSubtotalTransactionType2ReversedChargebackCompensation    PendingBalancePendingSubtotalTransactionType2 = "reversed-chargeback-compensation"
	PendingBalancePendingSubtotalTransactionType2PlatformPaymentChargeback         PendingBalancePendingSubtotalTransactionType2 = "platform-payment-chargeback"
	PendingBalancePendingSubtotalTransactionType2ReversedPlatformPaymentChargeback PendingBalancePendingSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	PendingBalancePendingSubtotalTransactionType2FeePrepayment                     PendingBalancePendingSubtotalTransactionType2 = "fee-prepayment"
	PendingBalancePendingSubtotalTransactionType2OutgoingTransfer                  PendingBalancePendingSubtotalTransactionType2 = "outgoing-transfer"
	PendingBalancePendingSubtotalTransactionType2IncomingTransfer                  PendingBalancePendingSubtotalTransactionType2 = "incoming-transfer"
	PendingBalancePendingSubtotalTransactionType2CanceledTransfer                  PendingBalancePendingSubtotalTransactionType2 = "canceled-transfer"
	PendingBalancePendingSubtotalTransactionType2ReturnedTransfer                  PendingBalancePendingSubtotalTransactionType2 = "returned-transfer"
	PendingBalancePendingSubtotalTransactionType2BalanceReserve                    PendingBalancePendingSubtotalTransactionType2 = "balance-reserve"
	PendingBalancePendingSubtotalTransactionType2BalanceReserveReturn              PendingBalancePendingSubtotalTransactionType2 = "balance-reserve-return"
	PendingBalancePendingSubtotalTransactionType2InvoiceRoundingCompensation       PendingBalancePendingSubtotalTransactionType2 = "invoice-rounding-compensation"
	PendingBalancePendingSubtotalTransactionType2RollingReserveHold                PendingBalancePendingSubtotalTransactionType2 = "rolling-reserve-hold"
	PendingBalancePendingSubtotalTransactionType2RollingReserveRelease             PendingBalancePendingSubtotalTransactionType2 = "rolling-reserve-release"
	PendingBalancePendingSubtotalTransactionType2BalanceCorrection                 PendingBalancePendingSubtotalTransactionType2 = "balance-correction"
	PendingBalancePendingSubtotalTransactionType2Repayment                         PendingBalancePendingSubtotalTransactionType2 = "repayment"
	PendingBalancePendingSubtotalTransactionType2Loan                              PendingBalancePendingSubtotalTransactionType2 = "loan"
	PendingBalancePendingSubtotalTransactionType2BalanceTopup                      PendingBalancePendingSubtotalTransactionType2 = "balance-topup"
	PendingBalancePendingSubtotalTransactionType2CashCollateralIssuance            PendingBalancePendingSubtotalTransactionType2 = "cash-collateral-issuance';"
	PendingBalancePendingSubtotalTransactionType2CashCollateralRelease             PendingBalancePendingSubtotalTransactionType2 = "cash-collateral-release"
	PendingBalancePendingSubtotalTransactionType2PendingRollingReserve             PendingBalancePendingSubtotalTransactionType2 = "pending-rolling-reserve"
	PendingBalancePendingSubtotalTransactionType2ToBeReleasedRollingReserve        PendingBalancePendingSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	PendingBalancePendingSubtotalTransactionType2HeldRollingReserve                PendingBalancePendingSubtotalTransactionType2 = "held-rolling-reserve"
	PendingBalancePendingSubtotalTransactionType2ReleasedRollingReserve            PendingBalancePendingSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e PendingBalancePendingSubtotalTransactionType2) ToPointer() *PendingBalancePendingSubtotalTransactionType2 {
	return &e
}
func (e *PendingBalancePendingSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = PendingBalancePendingSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalancePendingSubtotalTransactionType2: %v", v)
	}
}

type PendingBalancePendingSubtotal2 struct {
	SubTotals []PendingBalancePendingSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *PendingBalancePendingSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *PendingBalancePendingSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *PendingBalancePendingSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *PendingBalancePendingSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *PendingBalancePendingSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *PendingBalancePendingSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *PendingBalancePendingSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *PendingBalancePendingSubtotal2) GetSubTotals() []PendingBalancePendingSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *PendingBalancePendingSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *PendingBalancePendingSubtotal2) GetMethod() *PendingBalancePendingSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PendingBalancePendingSubtotal2) GetCardIssuer() *PendingBalancePendingSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *PendingBalancePendingSubtotal2) GetCardAudience() *PendingBalancePendingSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *PendingBalancePendingSubtotal2) GetCardRegion() *PendingBalancePendingSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *PendingBalancePendingSubtotal2) GetFeeType() *PendingBalancePendingSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *PendingBalancePendingSubtotal2) GetPrepaymentPartType() *PendingBalancePendingSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *PendingBalancePendingSubtotal2) GetTransactionType() *PendingBalancePendingSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type PendingBalancePending struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *PendingBalancePendingAmount     `json:"amount,omitempty"`
	Subtotals []PendingBalancePendingSubtotal2 `json:"subtotals,omitempty"`
}

func (o *PendingBalancePending) GetAmount() *PendingBalancePendingAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *PendingBalancePending) GetSubtotals() []PendingBalancePendingSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// PendingBalanceMovedToAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type PendingBalanceMovedToAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *PendingBalanceMovedToAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *PendingBalanceMovedToAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// PendingBalanceMovedToAvailableSubTotalMethod1 - Payment type of the transactions
type PendingBalanceMovedToAvailableSubTotalMethod1 string

const (
	PendingBalanceMovedToAvailableSubTotalMethod1Alma              PendingBalanceMovedToAvailableSubTotalMethod1 = "alma"
	PendingBalanceMovedToAvailableSubTotalMethod1Bacs              PendingBalanceMovedToAvailableSubTotalMethod1 = "bacs"
	PendingBalanceMovedToAvailableSubTotalMethod1Applepay          PendingBalanceMovedToAvailableSubTotalMethod1 = "applepay"
	PendingBalanceMovedToAvailableSubTotalMethod1Bancomatpay       PendingBalanceMovedToAvailableSubTotalMethod1 = "bancomatpay"
	PendingBalanceMovedToAvailableSubTotalMethod1Bancontact        PendingBalanceMovedToAvailableSubTotalMethod1 = "bancontact"
	PendingBalanceMovedToAvailableSubTotalMethod1Banktransfer      PendingBalanceMovedToAvailableSubTotalMethod1 = "banktransfer"
	PendingBalanceMovedToAvailableSubTotalMethod1Belfius           PendingBalanceMovedToAvailableSubTotalMethod1 = "belfius"
	PendingBalanceMovedToAvailableSubTotalMethod1Billie            PendingBalanceMovedToAvailableSubTotalMethod1 = "billie"
	PendingBalanceMovedToAvailableSubTotalMethod1Bizum             PendingBalanceMovedToAvailableSubTotalMethod1 = "bizum"
	PendingBalanceMovedToAvailableSubTotalMethod1Bitcoin           PendingBalanceMovedToAvailableSubTotalMethod1 = "bitcoin"
	PendingBalanceMovedToAvailableSubTotalMethod1Blik              PendingBalanceMovedToAvailableSubTotalMethod1 = "blik"
	PendingBalanceMovedToAvailableSubTotalMethod1Creditcard        PendingBalanceMovedToAvailableSubTotalMethod1 = "creditcard"
	PendingBalanceMovedToAvailableSubTotalMethod1Directdebit       PendingBalanceMovedToAvailableSubTotalMethod1 = "directdebit"
	PendingBalanceMovedToAvailableSubTotalMethod1Eps               PendingBalanceMovedToAvailableSubTotalMethod1 = "eps"
	PendingBalanceMovedToAvailableSubTotalMethod1Giftcard          PendingBalanceMovedToAvailableSubTotalMethod1 = "giftcard"
	PendingBalanceMovedToAvailableSubTotalMethod1Giropay           PendingBalanceMovedToAvailableSubTotalMethod1 = "giropay"
	PendingBalanceMovedToAvailableSubTotalMethod1Googlepay         PendingBalanceMovedToAvailableSubTotalMethod1 = "googlepay"
	PendingBalanceMovedToAvailableSubTotalMethod1Ideal             PendingBalanceMovedToAvailableSubTotalMethod1 = "ideal"
	PendingBalanceMovedToAvailableSubTotalMethod1In3               PendingBalanceMovedToAvailableSubTotalMethod1 = "in3"
	PendingBalanceMovedToAvailableSubTotalMethod1Inghomepay        PendingBalanceMovedToAvailableSubTotalMethod1 = "inghomepay"
	PendingBalanceMovedToAvailableSubTotalMethod1Kbc               PendingBalanceMovedToAvailableSubTotalMethod1 = "kbc"
	PendingBalanceMovedToAvailableSubTotalMethod1Klarnapaylater    PendingBalanceMovedToAvailableSubTotalMethod1 = "klarnapaylater"
	PendingBalanceMovedToAvailableSubTotalMethod1Klarnapaynow      PendingBalanceMovedToAvailableSubTotalMethod1 = "klarnapaynow"
	PendingBalanceMovedToAvailableSubTotalMethod1Klarnasliceit     PendingBalanceMovedToAvailableSubTotalMethod1 = "klarnasliceit"
	PendingBalanceMovedToAvailableSubTotalMethod1Klarna            PendingBalanceMovedToAvailableSubTotalMethod1 = "klarna"
	PendingBalanceMovedToAvailableSubTotalMethod1Mbway             PendingBalanceMovedToAvailableSubTotalMethod1 = "mbway"
	PendingBalanceMovedToAvailableSubTotalMethod1Multibanco        PendingBalanceMovedToAvailableSubTotalMethod1 = "multibanco"
	PendingBalanceMovedToAvailableSubTotalMethod1Mybank            PendingBalanceMovedToAvailableSubTotalMethod1 = "mybank"
	PendingBalanceMovedToAvailableSubTotalMethod1Paybybank         PendingBalanceMovedToAvailableSubTotalMethod1 = "paybybank"
	PendingBalanceMovedToAvailableSubTotalMethod1Payconiq          PendingBalanceMovedToAvailableSubTotalMethod1 = "payconiq"
	PendingBalanceMovedToAvailableSubTotalMethod1Paypal            PendingBalanceMovedToAvailableSubTotalMethod1 = "paypal"
	PendingBalanceMovedToAvailableSubTotalMethod1Paysafecard       PendingBalanceMovedToAvailableSubTotalMethod1 = "paysafecard"
	PendingBalanceMovedToAvailableSubTotalMethod1Przelewy24        PendingBalanceMovedToAvailableSubTotalMethod1 = "przelewy24"
	PendingBalanceMovedToAvailableSubTotalMethod1Riverty           PendingBalanceMovedToAvailableSubTotalMethod1 = "riverty"
	PendingBalanceMovedToAvailableSubTotalMethod1Satispay          PendingBalanceMovedToAvailableSubTotalMethod1 = "satispay"
	PendingBalanceMovedToAvailableSubTotalMethod1Podiumcadeaukaart PendingBalanceMovedToAvailableSubTotalMethod1 = "podiumcadeaukaart"
	PendingBalanceMovedToAvailableSubTotalMethod1Pointofsale       PendingBalanceMovedToAvailableSubTotalMethod1 = "pointofsale"
	PendingBalanceMovedToAvailableSubTotalMethod1Sofort            PendingBalanceMovedToAvailableSubTotalMethod1 = "sofort"
	PendingBalanceMovedToAvailableSubTotalMethod1Swish             PendingBalanceMovedToAvailableSubTotalMethod1 = "swish"
	PendingBalanceMovedToAvailableSubTotalMethod1Trustly           PendingBalanceMovedToAvailableSubTotalMethod1 = "trustly"
	PendingBalanceMovedToAvailableSubTotalMethod1Twint             PendingBalanceMovedToAvailableSubTotalMethod1 = "twint"
	PendingBalanceMovedToAvailableSubTotalMethod1Voucher           PendingBalanceMovedToAvailableSubTotalMethod1 = "voucher"
)

func (e PendingBalanceMovedToAvailableSubTotalMethod1) ToPointer() *PendingBalanceMovedToAvailableSubTotalMethod1 {
	return &e
}
func (e *PendingBalanceMovedToAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = PendingBalanceMovedToAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceMovedToAvailableSubTotalMethod1: %v", v)
	}
}

// PendingBalanceMovedToAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type PendingBalanceMovedToAvailableSubTotalCardIssuer1 string

const (
	PendingBalanceMovedToAvailableSubTotalCardIssuer1Amex          PendingBalanceMovedToAvailableSubTotalCardIssuer1 = "amex"
	PendingBalanceMovedToAvailableSubTotalCardIssuer1Maestro       PendingBalanceMovedToAvailableSubTotalCardIssuer1 = "maestro"
	PendingBalanceMovedToAvailableSubTotalCardIssuer1CarteBancaire PendingBalanceMovedToAvailableSubTotalCardIssuer1 = "carte-bancaire"
	PendingBalanceMovedToAvailableSubTotalCardIssuer1Other         PendingBalanceMovedToAvailableSubTotalCardIssuer1 = "other"
)

func (e PendingBalanceMovedToAvailableSubTotalCardIssuer1) ToPointer() *PendingBalanceMovedToAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *PendingBalanceMovedToAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = PendingBalanceMovedToAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceMovedToAvailableSubTotalCardIssuer1: %v", v)
	}
}

// PendingBalanceMovedToAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type PendingBalanceMovedToAvailableSubTotalCardAudience1 string

const (
	PendingBalanceMovedToAvailableSubTotalCardAudience1Corporate PendingBalanceMovedToAvailableSubTotalCardAudience1 = "corporate"
	PendingBalanceMovedToAvailableSubTotalCardAudience1Other     PendingBalanceMovedToAvailableSubTotalCardAudience1 = "other"
)

func (e PendingBalanceMovedToAvailableSubTotalCardAudience1) ToPointer() *PendingBalanceMovedToAvailableSubTotalCardAudience1 {
	return &e
}
func (e *PendingBalanceMovedToAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = PendingBalanceMovedToAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceMovedToAvailableSubTotalCardAudience1: %v", v)
	}
}

// PendingBalanceMovedToAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type PendingBalanceMovedToAvailableSubTotalCardRegion1 string

const (
	PendingBalanceMovedToAvailableSubTotalCardRegion1IntraEea PendingBalanceMovedToAvailableSubTotalCardRegion1 = "intra-eea"
	PendingBalanceMovedToAvailableSubTotalCardRegion1IntraEu  PendingBalanceMovedToAvailableSubTotalCardRegion1 = "intra-eu"
	PendingBalanceMovedToAvailableSubTotalCardRegion1Domestic PendingBalanceMovedToAvailableSubTotalCardRegion1 = "domestic"
	PendingBalanceMovedToAvailableSubTotalCardRegion1Other    PendingBalanceMovedToAvailableSubTotalCardRegion1 = "other"
)

func (e PendingBalanceMovedToAvailableSubTotalCardRegion1) ToPointer() *PendingBalanceMovedToAvailableSubTotalCardRegion1 {
	return &e
}
func (e *PendingBalanceMovedToAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = PendingBalanceMovedToAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceMovedToAvailableSubTotalCardRegion1: %v", v)
	}
}

// PendingBalanceMovedToAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type PendingBalanceMovedToAvailableSubTotalFeeType1 string

const (
	PendingBalanceMovedToAvailableSubTotalFeeType1PaymentFee                                        PendingBalanceMovedToAvailableSubTotalFeeType1 = "payment-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1DirectDebitFailureFee                             PendingBalanceMovedToAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        PendingBalanceMovedToAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  PendingBalanceMovedToAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1PartnerCommission                                 PendingBalanceMovedToAvailableSubTotalFeeType1 = "partner-commission"
	PendingBalanceMovedToAvailableSubTotalFeeType1ApplicationFee                                    PendingBalanceMovedToAvailableSubTotalFeeType1 = "application-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1CaptureFee                                        PendingBalanceMovedToAvailableSubTotalFeeType1 = "capture-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1RefundFee                                         PendingBalanceMovedToAvailableSubTotalFeeType1 = "refund-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1ChargebackFee                                     PendingBalanceMovedToAvailableSubTotalFeeType1 = "chargeback-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1PaymentNotificationFee                            PendingBalanceMovedToAvailableSubTotalFeeType1 = "payment-notification-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1TransferNotificationFee                           PendingBalanceMovedToAvailableSubTotalFeeType1 = "transfer-notification-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1PayoutFee                                         PendingBalanceMovedToAvailableSubTotalFeeType1 = "payout-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1FeeDiscount                                       PendingBalanceMovedToAvailableSubTotalFeeType1 = "fee-discount"
	PendingBalanceMovedToAvailableSubTotalFeeType1FeeReimbursement                                  PendingBalanceMovedToAvailableSubTotalFeeType1 = "fee-reimbursement"
	PendingBalanceMovedToAvailableSubTotalFeeType1PlatformVolumeFee                                 PendingBalanceMovedToAvailableSubTotalFeeType1 = "platform-volume-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 PendingBalanceMovedToAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1BalanceChargeFee                                  PendingBalanceMovedToAvailableSubTotalFeeType1 = "balance-charge-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   PendingBalanceMovedToAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1TerminalMonthlyFee                                PendingBalanceMovedToAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1AcceptanceRiskFee                                 PendingBalanceMovedToAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1TopUpFee                                          PendingBalanceMovedToAvailableSubTotalFeeType1 = "top-up-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1PaymentGatewayFee                                 PendingBalanceMovedToAvailableSubTotalFeeType1 = "payment-gateway-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   PendingBalanceMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee PendingBalanceMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             PendingBalanceMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           PendingBalanceMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	PendingBalanceMovedToAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           PendingBalanceMovedToAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e PendingBalanceMovedToAvailableSubTotalFeeType1) ToPointer() *PendingBalanceMovedToAvailableSubTotalFeeType1 {
	return &e
}
func (e *PendingBalanceMovedToAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = PendingBalanceMovedToAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceMovedToAvailableSubTotalFeeType1: %v", v)
	}
}

// PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1 string

const (
	PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1Fee                     PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1 = "fee"
	PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1FeeReimbursement        PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1FeeDiscount             PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1FeeVat                  PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1) ToPointer() *PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// PendingBalanceMovedToAvailableSubTotalTransactionType1 - Represents the transaction type
type PendingBalanceMovedToAvailableSubTotalTransactionType1 string

const (
	PendingBalanceMovedToAvailableSubTotalTransactionType1Payment                           PendingBalanceMovedToAvailableSubTotalTransactionType1 = "payment"
	PendingBalanceMovedToAvailableSubTotalTransactionType1SplitPayment                      PendingBalanceMovedToAvailableSubTotalTransactionType1 = "split-payment"
	PendingBalanceMovedToAvailableSubTotalTransactionType1FailedPayment                     PendingBalanceMovedToAvailableSubTotalTransactionType1 = "failed-payment"
	PendingBalanceMovedToAvailableSubTotalTransactionType1FailedPlatformSplitPayment        PendingBalanceMovedToAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	PendingBalanceMovedToAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    PendingBalanceMovedToAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	PendingBalanceMovedToAvailableSubTotalTransactionType1Capture                           PendingBalanceMovedToAvailableSubTotalTransactionType1 = "capture"
	PendingBalanceMovedToAvailableSubTotalTransactionType1SplitTransaction                  PendingBalanceMovedToAvailableSubTotalTransactionType1 = "split-transaction"
	PendingBalanceMovedToAvailableSubTotalTransactionType1Refund                            PendingBalanceMovedToAvailableSubTotalTransactionType1 = "refund"
	PendingBalanceMovedToAvailableSubTotalTransactionType1PlatformPaymentRefund             PendingBalanceMovedToAvailableSubTotalTransactionType1 = "platform-payment-refund"
	PendingBalanceMovedToAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     PendingBalanceMovedToAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	PendingBalanceMovedToAvailableSubTotalTransactionType1RefundCompensation                PendingBalanceMovedToAvailableSubTotalTransactionType1 = "refund-compensation"
	PendingBalanceMovedToAvailableSubTotalTransactionType1ReturnedRefundCompensation        PendingBalanceMovedToAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	PendingBalanceMovedToAvailableSubTotalTransactionType1ReturnedRefund                    PendingBalanceMovedToAvailableSubTotalTransactionType1 = "returned-refund"
	PendingBalanceMovedToAvailableSubTotalTransactionType1Chargeback                        PendingBalanceMovedToAvailableSubTotalTransactionType1 = "chargeback"
	PendingBalanceMovedToAvailableSubTotalTransactionType1ChargebackReversal                PendingBalanceMovedToAvailableSubTotalTransactionType1 = "chargeback-reversal"
	PendingBalanceMovedToAvailableSubTotalTransactionType1ChargebackCompensation            PendingBalanceMovedToAvailableSubTotalTransactionType1 = "chargeback-compensation"
	PendingBalanceMovedToAvailableSubTotalTransactionType1ReversedChargebackCompensation    PendingBalanceMovedToAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	PendingBalanceMovedToAvailableSubTotalTransactionType1PlatformPaymentChargeback         PendingBalanceMovedToAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	PendingBalanceMovedToAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback PendingBalanceMovedToAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	PendingBalanceMovedToAvailableSubTotalTransactionType1FeePrepayment                     PendingBalanceMovedToAvailableSubTotalTransactionType1 = "fee-prepayment"
	PendingBalanceMovedToAvailableSubTotalTransactionType1OutgoingTransfer                  PendingBalanceMovedToAvailableSubTotalTransactionType1 = "outgoing-transfer"
	PendingBalanceMovedToAvailableSubTotalTransactionType1IncomingTransfer                  PendingBalanceMovedToAvailableSubTotalTransactionType1 = "incoming-transfer"
	PendingBalanceMovedToAvailableSubTotalTransactionType1CanceledTransfer                  PendingBalanceMovedToAvailableSubTotalTransactionType1 = "canceled-transfer"
	PendingBalanceMovedToAvailableSubTotalTransactionType1ReturnedTransfer                  PendingBalanceMovedToAvailableSubTotalTransactionType1 = "returned-transfer"
	PendingBalanceMovedToAvailableSubTotalTransactionType1BalanceReserve                    PendingBalanceMovedToAvailableSubTotalTransactionType1 = "balance-reserve"
	PendingBalanceMovedToAvailableSubTotalTransactionType1BalanceReserveReturn              PendingBalanceMovedToAvailableSubTotalTransactionType1 = "balance-reserve-return"
	PendingBalanceMovedToAvailableSubTotalTransactionType1InvoiceRoundingCompensation       PendingBalanceMovedToAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	PendingBalanceMovedToAvailableSubTotalTransactionType1RollingReserveHold                PendingBalanceMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	PendingBalanceMovedToAvailableSubTotalTransactionType1RollingReserveRelease             PendingBalanceMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	PendingBalanceMovedToAvailableSubTotalTransactionType1BalanceCorrection                 PendingBalanceMovedToAvailableSubTotalTransactionType1 = "balance-correction"
	PendingBalanceMovedToAvailableSubTotalTransactionType1Repayment                         PendingBalanceMovedToAvailableSubTotalTransactionType1 = "repayment"
	PendingBalanceMovedToAvailableSubTotalTransactionType1Loan                              PendingBalanceMovedToAvailableSubTotalTransactionType1 = "loan"
	PendingBalanceMovedToAvailableSubTotalTransactionType1BalanceTopup                      PendingBalanceMovedToAvailableSubTotalTransactionType1 = "balance-topup"
	PendingBalanceMovedToAvailableSubTotalTransactionType1CashCollateralIssuance            PendingBalanceMovedToAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	PendingBalanceMovedToAvailableSubTotalTransactionType1CashCollateralRelease             PendingBalanceMovedToAvailableSubTotalTransactionType1 = "cash-collateral-release"
	PendingBalanceMovedToAvailableSubTotalTransactionType1PendingRollingReserve             PendingBalanceMovedToAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	PendingBalanceMovedToAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        PendingBalanceMovedToAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	PendingBalanceMovedToAvailableSubTotalTransactionType1HeldRollingReserve                PendingBalanceMovedToAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	PendingBalanceMovedToAvailableSubTotalTransactionType1ReleasedRollingReserve            PendingBalanceMovedToAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e PendingBalanceMovedToAvailableSubTotalTransactionType1) ToPointer() *PendingBalanceMovedToAvailableSubTotalTransactionType1 {
	return &e
}
func (e *PendingBalanceMovedToAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = PendingBalanceMovedToAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceMovedToAvailableSubTotalTransactionType1: %v", v)
	}
}

type PendingBalanceMovedToAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *PendingBalanceMovedToAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *PendingBalanceMovedToAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *PendingBalanceMovedToAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *PendingBalanceMovedToAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *PendingBalanceMovedToAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *PendingBalanceMovedToAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *PendingBalanceMovedToAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *PendingBalanceMovedToAvailableSubTotal1) GetMethod() *PendingBalanceMovedToAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PendingBalanceMovedToAvailableSubTotal1) GetCardIssuer() *PendingBalanceMovedToAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *PendingBalanceMovedToAvailableSubTotal1) GetCardAudience() *PendingBalanceMovedToAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *PendingBalanceMovedToAvailableSubTotal1) GetCardRegion() *PendingBalanceMovedToAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *PendingBalanceMovedToAvailableSubTotal1) GetFeeType() *PendingBalanceMovedToAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *PendingBalanceMovedToAvailableSubTotal1) GetPrepaymentPartType() *PendingBalanceMovedToAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *PendingBalanceMovedToAvailableSubTotal1) GetTransactionType() *PendingBalanceMovedToAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// PendingBalanceMovedToAvailableSubtotalMethod2 - Payment type of the transactions
type PendingBalanceMovedToAvailableSubtotalMethod2 string

const (
	PendingBalanceMovedToAvailableSubtotalMethod2Alma              PendingBalanceMovedToAvailableSubtotalMethod2 = "alma"
	PendingBalanceMovedToAvailableSubtotalMethod2Bacs              PendingBalanceMovedToAvailableSubtotalMethod2 = "bacs"
	PendingBalanceMovedToAvailableSubtotalMethod2Applepay          PendingBalanceMovedToAvailableSubtotalMethod2 = "applepay"
	PendingBalanceMovedToAvailableSubtotalMethod2Bancomatpay       PendingBalanceMovedToAvailableSubtotalMethod2 = "bancomatpay"
	PendingBalanceMovedToAvailableSubtotalMethod2Bancontact        PendingBalanceMovedToAvailableSubtotalMethod2 = "bancontact"
	PendingBalanceMovedToAvailableSubtotalMethod2Banktransfer      PendingBalanceMovedToAvailableSubtotalMethod2 = "banktransfer"
	PendingBalanceMovedToAvailableSubtotalMethod2Belfius           PendingBalanceMovedToAvailableSubtotalMethod2 = "belfius"
	PendingBalanceMovedToAvailableSubtotalMethod2Billie            PendingBalanceMovedToAvailableSubtotalMethod2 = "billie"
	PendingBalanceMovedToAvailableSubtotalMethod2Bizum             PendingBalanceMovedToAvailableSubtotalMethod2 = "bizum"
	PendingBalanceMovedToAvailableSubtotalMethod2Bitcoin           PendingBalanceMovedToAvailableSubtotalMethod2 = "bitcoin"
	PendingBalanceMovedToAvailableSubtotalMethod2Blik              PendingBalanceMovedToAvailableSubtotalMethod2 = "blik"
	PendingBalanceMovedToAvailableSubtotalMethod2Creditcard        PendingBalanceMovedToAvailableSubtotalMethod2 = "creditcard"
	PendingBalanceMovedToAvailableSubtotalMethod2Directdebit       PendingBalanceMovedToAvailableSubtotalMethod2 = "directdebit"
	PendingBalanceMovedToAvailableSubtotalMethod2Eps               PendingBalanceMovedToAvailableSubtotalMethod2 = "eps"
	PendingBalanceMovedToAvailableSubtotalMethod2Giftcard          PendingBalanceMovedToAvailableSubtotalMethod2 = "giftcard"
	PendingBalanceMovedToAvailableSubtotalMethod2Giropay           PendingBalanceMovedToAvailableSubtotalMethod2 = "giropay"
	PendingBalanceMovedToAvailableSubtotalMethod2Googlepay         PendingBalanceMovedToAvailableSubtotalMethod2 = "googlepay"
	PendingBalanceMovedToAvailableSubtotalMethod2Ideal             PendingBalanceMovedToAvailableSubtotalMethod2 = "ideal"
	PendingBalanceMovedToAvailableSubtotalMethod2In3               PendingBalanceMovedToAvailableSubtotalMethod2 = "in3"
	PendingBalanceMovedToAvailableSubtotalMethod2Inghomepay        PendingBalanceMovedToAvailableSubtotalMethod2 = "inghomepay"
	PendingBalanceMovedToAvailableSubtotalMethod2Kbc               PendingBalanceMovedToAvailableSubtotalMethod2 = "kbc"
	PendingBalanceMovedToAvailableSubtotalMethod2Klarnapaylater    PendingBalanceMovedToAvailableSubtotalMethod2 = "klarnapaylater"
	PendingBalanceMovedToAvailableSubtotalMethod2Klarnapaynow      PendingBalanceMovedToAvailableSubtotalMethod2 = "klarnapaynow"
	PendingBalanceMovedToAvailableSubtotalMethod2Klarnasliceit     PendingBalanceMovedToAvailableSubtotalMethod2 = "klarnasliceit"
	PendingBalanceMovedToAvailableSubtotalMethod2Klarna            PendingBalanceMovedToAvailableSubtotalMethod2 = "klarna"
	PendingBalanceMovedToAvailableSubtotalMethod2Mbway             PendingBalanceMovedToAvailableSubtotalMethod2 = "mbway"
	PendingBalanceMovedToAvailableSubtotalMethod2Multibanco        PendingBalanceMovedToAvailableSubtotalMethod2 = "multibanco"
	PendingBalanceMovedToAvailableSubtotalMethod2Mybank            PendingBalanceMovedToAvailableSubtotalMethod2 = "mybank"
	PendingBalanceMovedToAvailableSubtotalMethod2Paybybank         PendingBalanceMovedToAvailableSubtotalMethod2 = "paybybank"
	PendingBalanceMovedToAvailableSubtotalMethod2Payconiq          PendingBalanceMovedToAvailableSubtotalMethod2 = "payconiq"
	PendingBalanceMovedToAvailableSubtotalMethod2Paypal            PendingBalanceMovedToAvailableSubtotalMethod2 = "paypal"
	PendingBalanceMovedToAvailableSubtotalMethod2Paysafecard       PendingBalanceMovedToAvailableSubtotalMethod2 = "paysafecard"
	PendingBalanceMovedToAvailableSubtotalMethod2Przelewy24        PendingBalanceMovedToAvailableSubtotalMethod2 = "przelewy24"
	PendingBalanceMovedToAvailableSubtotalMethod2Riverty           PendingBalanceMovedToAvailableSubtotalMethod2 = "riverty"
	PendingBalanceMovedToAvailableSubtotalMethod2Satispay          PendingBalanceMovedToAvailableSubtotalMethod2 = "satispay"
	PendingBalanceMovedToAvailableSubtotalMethod2Podiumcadeaukaart PendingBalanceMovedToAvailableSubtotalMethod2 = "podiumcadeaukaart"
	PendingBalanceMovedToAvailableSubtotalMethod2Pointofsale       PendingBalanceMovedToAvailableSubtotalMethod2 = "pointofsale"
	PendingBalanceMovedToAvailableSubtotalMethod2Sofort            PendingBalanceMovedToAvailableSubtotalMethod2 = "sofort"
	PendingBalanceMovedToAvailableSubtotalMethod2Swish             PendingBalanceMovedToAvailableSubtotalMethod2 = "swish"
	PendingBalanceMovedToAvailableSubtotalMethod2Trustly           PendingBalanceMovedToAvailableSubtotalMethod2 = "trustly"
	PendingBalanceMovedToAvailableSubtotalMethod2Twint             PendingBalanceMovedToAvailableSubtotalMethod2 = "twint"
	PendingBalanceMovedToAvailableSubtotalMethod2Voucher           PendingBalanceMovedToAvailableSubtotalMethod2 = "voucher"
)

func (e PendingBalanceMovedToAvailableSubtotalMethod2) ToPointer() *PendingBalanceMovedToAvailableSubtotalMethod2 {
	return &e
}
func (e *PendingBalanceMovedToAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = PendingBalanceMovedToAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceMovedToAvailableSubtotalMethod2: %v", v)
	}
}

// PendingBalanceMovedToAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type PendingBalanceMovedToAvailableSubtotalCardIssuer2 string

const (
	PendingBalanceMovedToAvailableSubtotalCardIssuer2Amex          PendingBalanceMovedToAvailableSubtotalCardIssuer2 = "amex"
	PendingBalanceMovedToAvailableSubtotalCardIssuer2Maestro       PendingBalanceMovedToAvailableSubtotalCardIssuer2 = "maestro"
	PendingBalanceMovedToAvailableSubtotalCardIssuer2CarteBancaire PendingBalanceMovedToAvailableSubtotalCardIssuer2 = "carte-bancaire"
	PendingBalanceMovedToAvailableSubtotalCardIssuer2Other         PendingBalanceMovedToAvailableSubtotalCardIssuer2 = "other"
)

func (e PendingBalanceMovedToAvailableSubtotalCardIssuer2) ToPointer() *PendingBalanceMovedToAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *PendingBalanceMovedToAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = PendingBalanceMovedToAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceMovedToAvailableSubtotalCardIssuer2: %v", v)
	}
}

// PendingBalanceMovedToAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type PendingBalanceMovedToAvailableSubtotalCardAudience2 string

const (
	PendingBalanceMovedToAvailableSubtotalCardAudience2Corporate PendingBalanceMovedToAvailableSubtotalCardAudience2 = "corporate"
	PendingBalanceMovedToAvailableSubtotalCardAudience2Other     PendingBalanceMovedToAvailableSubtotalCardAudience2 = "other"
)

func (e PendingBalanceMovedToAvailableSubtotalCardAudience2) ToPointer() *PendingBalanceMovedToAvailableSubtotalCardAudience2 {
	return &e
}
func (e *PendingBalanceMovedToAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = PendingBalanceMovedToAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceMovedToAvailableSubtotalCardAudience2: %v", v)
	}
}

// PendingBalanceMovedToAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type PendingBalanceMovedToAvailableSubtotalCardRegion2 string

const (
	PendingBalanceMovedToAvailableSubtotalCardRegion2IntraEea PendingBalanceMovedToAvailableSubtotalCardRegion2 = "intra-eea"
	PendingBalanceMovedToAvailableSubtotalCardRegion2IntraEu  PendingBalanceMovedToAvailableSubtotalCardRegion2 = "intra-eu"
	PendingBalanceMovedToAvailableSubtotalCardRegion2Domestic PendingBalanceMovedToAvailableSubtotalCardRegion2 = "domestic"
	PendingBalanceMovedToAvailableSubtotalCardRegion2Other    PendingBalanceMovedToAvailableSubtotalCardRegion2 = "other"
)

func (e PendingBalanceMovedToAvailableSubtotalCardRegion2) ToPointer() *PendingBalanceMovedToAvailableSubtotalCardRegion2 {
	return &e
}
func (e *PendingBalanceMovedToAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = PendingBalanceMovedToAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceMovedToAvailableSubtotalCardRegion2: %v", v)
	}
}

// PendingBalanceMovedToAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type PendingBalanceMovedToAvailableSubtotalFeeType2 string

const (
	PendingBalanceMovedToAvailableSubtotalFeeType2PaymentFee                                        PendingBalanceMovedToAvailableSubtotalFeeType2 = "payment-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2DirectDebitFailureFee                             PendingBalanceMovedToAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        PendingBalanceMovedToAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  PendingBalanceMovedToAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2PartnerCommission                                 PendingBalanceMovedToAvailableSubtotalFeeType2 = "partner-commission"
	PendingBalanceMovedToAvailableSubtotalFeeType2ApplicationFee                                    PendingBalanceMovedToAvailableSubtotalFeeType2 = "application-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2CaptureFee                                        PendingBalanceMovedToAvailableSubtotalFeeType2 = "capture-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2RefundFee                                         PendingBalanceMovedToAvailableSubtotalFeeType2 = "refund-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2ChargebackFee                                     PendingBalanceMovedToAvailableSubtotalFeeType2 = "chargeback-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2PaymentNotificationFee                            PendingBalanceMovedToAvailableSubtotalFeeType2 = "payment-notification-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2TransferNotificationFee                           PendingBalanceMovedToAvailableSubtotalFeeType2 = "transfer-notification-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2PayoutFee                                         PendingBalanceMovedToAvailableSubtotalFeeType2 = "payout-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2FeeDiscount                                       PendingBalanceMovedToAvailableSubtotalFeeType2 = "fee-discount"
	PendingBalanceMovedToAvailableSubtotalFeeType2FeeReimbursement                                  PendingBalanceMovedToAvailableSubtotalFeeType2 = "fee-reimbursement"
	PendingBalanceMovedToAvailableSubtotalFeeType2PlatformVolumeFee                                 PendingBalanceMovedToAvailableSubtotalFeeType2 = "platform-volume-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 PendingBalanceMovedToAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2BalanceChargeFee                                  PendingBalanceMovedToAvailableSubtotalFeeType2 = "balance-charge-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   PendingBalanceMovedToAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2TerminalMonthlyFee                                PendingBalanceMovedToAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2AcceptanceRiskFee                                 PendingBalanceMovedToAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2TopUpFee                                          PendingBalanceMovedToAvailableSubtotalFeeType2 = "top-up-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2PaymentGatewayFee                                 PendingBalanceMovedToAvailableSubtotalFeeType2 = "payment-gateway-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   PendingBalanceMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee PendingBalanceMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             PendingBalanceMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           PendingBalanceMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	PendingBalanceMovedToAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           PendingBalanceMovedToAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e PendingBalanceMovedToAvailableSubtotalFeeType2) ToPointer() *PendingBalanceMovedToAvailableSubtotalFeeType2 {
	return &e
}
func (e *PendingBalanceMovedToAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = PendingBalanceMovedToAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceMovedToAvailableSubtotalFeeType2: %v", v)
	}
}

// PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2 string

const (
	PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2Fee                     PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2 = "fee"
	PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2FeeReimbursement        PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2FeeDiscount             PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2FeeVat                  PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2) ToPointer() *PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// PendingBalanceMovedToAvailableSubtotalTransactionType2 - Represents the transaction type
type PendingBalanceMovedToAvailableSubtotalTransactionType2 string

const (
	PendingBalanceMovedToAvailableSubtotalTransactionType2Payment                           PendingBalanceMovedToAvailableSubtotalTransactionType2 = "payment"
	PendingBalanceMovedToAvailableSubtotalTransactionType2SplitPayment                      PendingBalanceMovedToAvailableSubtotalTransactionType2 = "split-payment"
	PendingBalanceMovedToAvailableSubtotalTransactionType2FailedPayment                     PendingBalanceMovedToAvailableSubtotalTransactionType2 = "failed-payment"
	PendingBalanceMovedToAvailableSubtotalTransactionType2FailedPlatformSplitPayment        PendingBalanceMovedToAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	PendingBalanceMovedToAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    PendingBalanceMovedToAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	PendingBalanceMovedToAvailableSubtotalTransactionType2Capture                           PendingBalanceMovedToAvailableSubtotalTransactionType2 = "capture"
	PendingBalanceMovedToAvailableSubtotalTransactionType2SplitTransaction                  PendingBalanceMovedToAvailableSubtotalTransactionType2 = "split-transaction"
	PendingBalanceMovedToAvailableSubtotalTransactionType2Refund                            PendingBalanceMovedToAvailableSubtotalTransactionType2 = "refund"
	PendingBalanceMovedToAvailableSubtotalTransactionType2PlatformPaymentRefund             PendingBalanceMovedToAvailableSubtotalTransactionType2 = "platform-payment-refund"
	PendingBalanceMovedToAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     PendingBalanceMovedToAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	PendingBalanceMovedToAvailableSubtotalTransactionType2RefundCompensation                PendingBalanceMovedToAvailableSubtotalTransactionType2 = "refund-compensation"
	PendingBalanceMovedToAvailableSubtotalTransactionType2ReturnedRefundCompensation        PendingBalanceMovedToAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	PendingBalanceMovedToAvailableSubtotalTransactionType2ReturnedRefund                    PendingBalanceMovedToAvailableSubtotalTransactionType2 = "returned-refund"
	PendingBalanceMovedToAvailableSubtotalTransactionType2Chargeback                        PendingBalanceMovedToAvailableSubtotalTransactionType2 = "chargeback"
	PendingBalanceMovedToAvailableSubtotalTransactionType2ChargebackReversal                PendingBalanceMovedToAvailableSubtotalTransactionType2 = "chargeback-reversal"
	PendingBalanceMovedToAvailableSubtotalTransactionType2ChargebackCompensation            PendingBalanceMovedToAvailableSubtotalTransactionType2 = "chargeback-compensation"
	PendingBalanceMovedToAvailableSubtotalTransactionType2ReversedChargebackCompensation    PendingBalanceMovedToAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	PendingBalanceMovedToAvailableSubtotalTransactionType2PlatformPaymentChargeback         PendingBalanceMovedToAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	PendingBalanceMovedToAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback PendingBalanceMovedToAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	PendingBalanceMovedToAvailableSubtotalTransactionType2FeePrepayment                     PendingBalanceMovedToAvailableSubtotalTransactionType2 = "fee-prepayment"
	PendingBalanceMovedToAvailableSubtotalTransactionType2OutgoingTransfer                  PendingBalanceMovedToAvailableSubtotalTransactionType2 = "outgoing-transfer"
	PendingBalanceMovedToAvailableSubtotalTransactionType2IncomingTransfer                  PendingBalanceMovedToAvailableSubtotalTransactionType2 = "incoming-transfer"
	PendingBalanceMovedToAvailableSubtotalTransactionType2CanceledTransfer                  PendingBalanceMovedToAvailableSubtotalTransactionType2 = "canceled-transfer"
	PendingBalanceMovedToAvailableSubtotalTransactionType2ReturnedTransfer                  PendingBalanceMovedToAvailableSubtotalTransactionType2 = "returned-transfer"
	PendingBalanceMovedToAvailableSubtotalTransactionType2BalanceReserve                    PendingBalanceMovedToAvailableSubtotalTransactionType2 = "balance-reserve"
	PendingBalanceMovedToAvailableSubtotalTransactionType2BalanceReserveReturn              PendingBalanceMovedToAvailableSubtotalTransactionType2 = "balance-reserve-return"
	PendingBalanceMovedToAvailableSubtotalTransactionType2InvoiceRoundingCompensation       PendingBalanceMovedToAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	PendingBalanceMovedToAvailableSubtotalTransactionType2RollingReserveHold                PendingBalanceMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	PendingBalanceMovedToAvailableSubtotalTransactionType2RollingReserveRelease             PendingBalanceMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	PendingBalanceMovedToAvailableSubtotalTransactionType2BalanceCorrection                 PendingBalanceMovedToAvailableSubtotalTransactionType2 = "balance-correction"
	PendingBalanceMovedToAvailableSubtotalTransactionType2Repayment                         PendingBalanceMovedToAvailableSubtotalTransactionType2 = "repayment"
	PendingBalanceMovedToAvailableSubtotalTransactionType2Loan                              PendingBalanceMovedToAvailableSubtotalTransactionType2 = "loan"
	PendingBalanceMovedToAvailableSubtotalTransactionType2BalanceTopup                      PendingBalanceMovedToAvailableSubtotalTransactionType2 = "balance-topup"
	PendingBalanceMovedToAvailableSubtotalTransactionType2CashCollateralIssuance            PendingBalanceMovedToAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	PendingBalanceMovedToAvailableSubtotalTransactionType2CashCollateralRelease             PendingBalanceMovedToAvailableSubtotalTransactionType2 = "cash-collateral-release"
	PendingBalanceMovedToAvailableSubtotalTransactionType2PendingRollingReserve             PendingBalanceMovedToAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	PendingBalanceMovedToAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        PendingBalanceMovedToAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	PendingBalanceMovedToAvailableSubtotalTransactionType2HeldRollingReserve                PendingBalanceMovedToAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	PendingBalanceMovedToAvailableSubtotalTransactionType2ReleasedRollingReserve            PendingBalanceMovedToAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e PendingBalanceMovedToAvailableSubtotalTransactionType2) ToPointer() *PendingBalanceMovedToAvailableSubtotalTransactionType2 {
	return &e
}
func (e *PendingBalanceMovedToAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = PendingBalanceMovedToAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingBalanceMovedToAvailableSubtotalTransactionType2: %v", v)
	}
}

type PendingBalanceMovedToAvailableSubtotal2 struct {
	SubTotals []PendingBalanceMovedToAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *PendingBalanceMovedToAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *PendingBalanceMovedToAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *PendingBalanceMovedToAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *PendingBalanceMovedToAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *PendingBalanceMovedToAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *PendingBalanceMovedToAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *PendingBalanceMovedToAvailableSubtotal2) GetSubTotals() []PendingBalanceMovedToAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *PendingBalanceMovedToAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *PendingBalanceMovedToAvailableSubtotal2) GetMethod() *PendingBalanceMovedToAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PendingBalanceMovedToAvailableSubtotal2) GetCardIssuer() *PendingBalanceMovedToAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *PendingBalanceMovedToAvailableSubtotal2) GetCardAudience() *PendingBalanceMovedToAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *PendingBalanceMovedToAvailableSubtotal2) GetCardRegion() *PendingBalanceMovedToAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *PendingBalanceMovedToAvailableSubtotal2) GetFeeType() *PendingBalanceMovedToAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *PendingBalanceMovedToAvailableSubtotal2) GetPrepaymentPartType() *PendingBalanceMovedToAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *PendingBalanceMovedToAvailableSubtotal2) GetTransactionType() *PendingBalanceMovedToAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type PendingBalanceMovedToAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *PendingBalanceMovedToAvailableAmount     `json:"amount,omitempty"`
	Subtotals []PendingBalanceMovedToAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *PendingBalanceMovedToAvailable) GetAmount() *PendingBalanceMovedToAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *PendingBalanceMovedToAvailable) GetSubtotals() []PendingBalanceMovedToAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// PendingBalance - The pending balance. Only available if grouping is `status-balances`.
type PendingBalance struct {
	Open             *PendingBalanceOpen             `json:"open,omitempty"`
	Close            *PendingBalanceClose            `json:"close,omitempty"`
	Pending          *PendingBalancePending          `json:"pending,omitempty"`
	MovedToAvailable *PendingBalanceMovedToAvailable `json:"movedToAvailable,omitempty"`
}

func (o *PendingBalance) GetOpen() *PendingBalanceOpen {
	if o == nil {
		return nil
	}
	return o.Open
}

func (o *PendingBalance) GetClose() *PendingBalanceClose {
	if o == nil {
		return nil
	}
	return o.Close
}

func (o *PendingBalance) GetPending() *PendingBalancePending {
	if o == nil {
		return nil
	}
	return o.Pending
}

func (o *PendingBalance) GetMovedToAvailable() *PendingBalanceMovedToAvailable {
	if o == nil {
		return nil
	}
	return o.MovedToAvailable
}

// AvailableBalanceOpenAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type AvailableBalanceOpenAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *AvailableBalanceOpenAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *AvailableBalanceOpenAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// AvailableBalanceOpenSubTotalMethod1 - Payment type of the transactions
type AvailableBalanceOpenSubTotalMethod1 string

const (
	AvailableBalanceOpenSubTotalMethod1Alma              AvailableBalanceOpenSubTotalMethod1 = "alma"
	AvailableBalanceOpenSubTotalMethod1Bacs              AvailableBalanceOpenSubTotalMethod1 = "bacs"
	AvailableBalanceOpenSubTotalMethod1Applepay          AvailableBalanceOpenSubTotalMethod1 = "applepay"
	AvailableBalanceOpenSubTotalMethod1Bancomatpay       AvailableBalanceOpenSubTotalMethod1 = "bancomatpay"
	AvailableBalanceOpenSubTotalMethod1Bancontact        AvailableBalanceOpenSubTotalMethod1 = "bancontact"
	AvailableBalanceOpenSubTotalMethod1Banktransfer      AvailableBalanceOpenSubTotalMethod1 = "banktransfer"
	AvailableBalanceOpenSubTotalMethod1Belfius           AvailableBalanceOpenSubTotalMethod1 = "belfius"
	AvailableBalanceOpenSubTotalMethod1Billie            AvailableBalanceOpenSubTotalMethod1 = "billie"
	AvailableBalanceOpenSubTotalMethod1Bizum             AvailableBalanceOpenSubTotalMethod1 = "bizum"
	AvailableBalanceOpenSubTotalMethod1Bitcoin           AvailableBalanceOpenSubTotalMethod1 = "bitcoin"
	AvailableBalanceOpenSubTotalMethod1Blik              AvailableBalanceOpenSubTotalMethod1 = "blik"
	AvailableBalanceOpenSubTotalMethod1Creditcard        AvailableBalanceOpenSubTotalMethod1 = "creditcard"
	AvailableBalanceOpenSubTotalMethod1Directdebit       AvailableBalanceOpenSubTotalMethod1 = "directdebit"
	AvailableBalanceOpenSubTotalMethod1Eps               AvailableBalanceOpenSubTotalMethod1 = "eps"
	AvailableBalanceOpenSubTotalMethod1Giftcard          AvailableBalanceOpenSubTotalMethod1 = "giftcard"
	AvailableBalanceOpenSubTotalMethod1Giropay           AvailableBalanceOpenSubTotalMethod1 = "giropay"
	AvailableBalanceOpenSubTotalMethod1Googlepay         AvailableBalanceOpenSubTotalMethod1 = "googlepay"
	AvailableBalanceOpenSubTotalMethod1Ideal             AvailableBalanceOpenSubTotalMethod1 = "ideal"
	AvailableBalanceOpenSubTotalMethod1In3               AvailableBalanceOpenSubTotalMethod1 = "in3"
	AvailableBalanceOpenSubTotalMethod1Inghomepay        AvailableBalanceOpenSubTotalMethod1 = "inghomepay"
	AvailableBalanceOpenSubTotalMethod1Kbc               AvailableBalanceOpenSubTotalMethod1 = "kbc"
	AvailableBalanceOpenSubTotalMethod1Klarnapaylater    AvailableBalanceOpenSubTotalMethod1 = "klarnapaylater"
	AvailableBalanceOpenSubTotalMethod1Klarnapaynow      AvailableBalanceOpenSubTotalMethod1 = "klarnapaynow"
	AvailableBalanceOpenSubTotalMethod1Klarnasliceit     AvailableBalanceOpenSubTotalMethod1 = "klarnasliceit"
	AvailableBalanceOpenSubTotalMethod1Klarna            AvailableBalanceOpenSubTotalMethod1 = "klarna"
	AvailableBalanceOpenSubTotalMethod1Mbway             AvailableBalanceOpenSubTotalMethod1 = "mbway"
	AvailableBalanceOpenSubTotalMethod1Multibanco        AvailableBalanceOpenSubTotalMethod1 = "multibanco"
	AvailableBalanceOpenSubTotalMethod1Mybank            AvailableBalanceOpenSubTotalMethod1 = "mybank"
	AvailableBalanceOpenSubTotalMethod1Paybybank         AvailableBalanceOpenSubTotalMethod1 = "paybybank"
	AvailableBalanceOpenSubTotalMethod1Payconiq          AvailableBalanceOpenSubTotalMethod1 = "payconiq"
	AvailableBalanceOpenSubTotalMethod1Paypal            AvailableBalanceOpenSubTotalMethod1 = "paypal"
	AvailableBalanceOpenSubTotalMethod1Paysafecard       AvailableBalanceOpenSubTotalMethod1 = "paysafecard"
	AvailableBalanceOpenSubTotalMethod1Przelewy24        AvailableBalanceOpenSubTotalMethod1 = "przelewy24"
	AvailableBalanceOpenSubTotalMethod1Riverty           AvailableBalanceOpenSubTotalMethod1 = "riverty"
	AvailableBalanceOpenSubTotalMethod1Satispay          AvailableBalanceOpenSubTotalMethod1 = "satispay"
	AvailableBalanceOpenSubTotalMethod1Podiumcadeaukaart AvailableBalanceOpenSubTotalMethod1 = "podiumcadeaukaart"
	AvailableBalanceOpenSubTotalMethod1Pointofsale       AvailableBalanceOpenSubTotalMethod1 = "pointofsale"
	AvailableBalanceOpenSubTotalMethod1Sofort            AvailableBalanceOpenSubTotalMethod1 = "sofort"
	AvailableBalanceOpenSubTotalMethod1Swish             AvailableBalanceOpenSubTotalMethod1 = "swish"
	AvailableBalanceOpenSubTotalMethod1Trustly           AvailableBalanceOpenSubTotalMethod1 = "trustly"
	AvailableBalanceOpenSubTotalMethod1Twint             AvailableBalanceOpenSubTotalMethod1 = "twint"
	AvailableBalanceOpenSubTotalMethod1Voucher           AvailableBalanceOpenSubTotalMethod1 = "voucher"
)

func (e AvailableBalanceOpenSubTotalMethod1) ToPointer() *AvailableBalanceOpenSubTotalMethod1 {
	return &e
}
func (e *AvailableBalanceOpenSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = AvailableBalanceOpenSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceOpenSubTotalMethod1: %v", v)
	}
}

// AvailableBalanceOpenSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type AvailableBalanceOpenSubTotalCardIssuer1 string

const (
	AvailableBalanceOpenSubTotalCardIssuer1Amex          AvailableBalanceOpenSubTotalCardIssuer1 = "amex"
	AvailableBalanceOpenSubTotalCardIssuer1Maestro       AvailableBalanceOpenSubTotalCardIssuer1 = "maestro"
	AvailableBalanceOpenSubTotalCardIssuer1CarteBancaire AvailableBalanceOpenSubTotalCardIssuer1 = "carte-bancaire"
	AvailableBalanceOpenSubTotalCardIssuer1Other         AvailableBalanceOpenSubTotalCardIssuer1 = "other"
)

func (e AvailableBalanceOpenSubTotalCardIssuer1) ToPointer() *AvailableBalanceOpenSubTotalCardIssuer1 {
	return &e
}
func (e *AvailableBalanceOpenSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = AvailableBalanceOpenSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceOpenSubTotalCardIssuer1: %v", v)
	}
}

// AvailableBalanceOpenSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type AvailableBalanceOpenSubTotalCardAudience1 string

const (
	AvailableBalanceOpenSubTotalCardAudience1Corporate AvailableBalanceOpenSubTotalCardAudience1 = "corporate"
	AvailableBalanceOpenSubTotalCardAudience1Other     AvailableBalanceOpenSubTotalCardAudience1 = "other"
)

func (e AvailableBalanceOpenSubTotalCardAudience1) ToPointer() *AvailableBalanceOpenSubTotalCardAudience1 {
	return &e
}
func (e *AvailableBalanceOpenSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = AvailableBalanceOpenSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceOpenSubTotalCardAudience1: %v", v)
	}
}

// AvailableBalanceOpenSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type AvailableBalanceOpenSubTotalCardRegion1 string

const (
	AvailableBalanceOpenSubTotalCardRegion1IntraEea AvailableBalanceOpenSubTotalCardRegion1 = "intra-eea"
	AvailableBalanceOpenSubTotalCardRegion1IntraEu  AvailableBalanceOpenSubTotalCardRegion1 = "intra-eu"
	AvailableBalanceOpenSubTotalCardRegion1Domestic AvailableBalanceOpenSubTotalCardRegion1 = "domestic"
	AvailableBalanceOpenSubTotalCardRegion1Other    AvailableBalanceOpenSubTotalCardRegion1 = "other"
)

func (e AvailableBalanceOpenSubTotalCardRegion1) ToPointer() *AvailableBalanceOpenSubTotalCardRegion1 {
	return &e
}
func (e *AvailableBalanceOpenSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = AvailableBalanceOpenSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceOpenSubTotalCardRegion1: %v", v)
	}
}

// AvailableBalanceOpenSubTotalFeeType1 - Present when the transaction represents a fee.
type AvailableBalanceOpenSubTotalFeeType1 string

const (
	AvailableBalanceOpenSubTotalFeeType1PaymentFee                                        AvailableBalanceOpenSubTotalFeeType1 = "payment-fee"
	AvailableBalanceOpenSubTotalFeeType1DirectDebitFailureFee                             AvailableBalanceOpenSubTotalFeeType1 = "direct-debit-failure-fee"
	AvailableBalanceOpenSubTotalFeeType1UnauthorizedDirectDebitFee                        AvailableBalanceOpenSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	AvailableBalanceOpenSubTotalFeeType1BankChargedDirectDebitFailureFee                  AvailableBalanceOpenSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	AvailableBalanceOpenSubTotalFeeType1PartnerCommission                                 AvailableBalanceOpenSubTotalFeeType1 = "partner-commission"
	AvailableBalanceOpenSubTotalFeeType1ApplicationFee                                    AvailableBalanceOpenSubTotalFeeType1 = "application-fee"
	AvailableBalanceOpenSubTotalFeeType1CaptureFee                                        AvailableBalanceOpenSubTotalFeeType1 = "capture-fee"
	AvailableBalanceOpenSubTotalFeeType1RefundFee                                         AvailableBalanceOpenSubTotalFeeType1 = "refund-fee"
	AvailableBalanceOpenSubTotalFeeType1ChargebackFee                                     AvailableBalanceOpenSubTotalFeeType1 = "chargeback-fee"
	AvailableBalanceOpenSubTotalFeeType1PaymentNotificationFee                            AvailableBalanceOpenSubTotalFeeType1 = "payment-notification-fee"
	AvailableBalanceOpenSubTotalFeeType1TransferNotificationFee                           AvailableBalanceOpenSubTotalFeeType1 = "transfer-notification-fee"
	AvailableBalanceOpenSubTotalFeeType1PayoutFee                                         AvailableBalanceOpenSubTotalFeeType1 = "payout-fee"
	AvailableBalanceOpenSubTotalFeeType1FeeDiscount                                       AvailableBalanceOpenSubTotalFeeType1 = "fee-discount"
	AvailableBalanceOpenSubTotalFeeType1FeeReimbursement                                  AvailableBalanceOpenSubTotalFeeType1 = "fee-reimbursement"
	AvailableBalanceOpenSubTotalFeeType1PlatformVolumeFee                                 AvailableBalanceOpenSubTotalFeeType1 = "platform-volume-fee"
	AvailableBalanceOpenSubTotalFeeType1PlatformConnectedOrganizationsFee                 AvailableBalanceOpenSubTotalFeeType1 = "platform-connected-organizations-fee"
	AvailableBalanceOpenSubTotalFeeType1BalanceChargeFee                                  AvailableBalanceOpenSubTotalFeeType1 = "balance-charge-fee"
	AvailableBalanceOpenSubTotalFeeType1ThreedsAuthenticationAttemptFee                   AvailableBalanceOpenSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	AvailableBalanceOpenSubTotalFeeType1TerminalMonthlyFee                                AvailableBalanceOpenSubTotalFeeType1 = "terminal-monthly-fee"
	AvailableBalanceOpenSubTotalFeeType1AcceptanceRiskFee                                 AvailableBalanceOpenSubTotalFeeType1 = "acceptance-risk-fee"
	AvailableBalanceOpenSubTotalFeeType1TopUpFee                                          AvailableBalanceOpenSubTotalFeeType1 = "top-up-fee"
	AvailableBalanceOpenSubTotalFeeType1PaymentGatewayFee                                 AvailableBalanceOpenSubTotalFeeType1 = "payment-gateway-fee"
	AvailableBalanceOpenSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   AvailableBalanceOpenSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	AvailableBalanceOpenSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee AvailableBalanceOpenSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	AvailableBalanceOpenSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             AvailableBalanceOpenSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	AvailableBalanceOpenSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           AvailableBalanceOpenSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	AvailableBalanceOpenSubTotalFeeType1MinimumInvoiceAmountFee                           AvailableBalanceOpenSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e AvailableBalanceOpenSubTotalFeeType1) ToPointer() *AvailableBalanceOpenSubTotalFeeType1 {
	return &e
}
func (e *AvailableBalanceOpenSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = AvailableBalanceOpenSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceOpenSubTotalFeeType1: %v", v)
	}
}

// AvailableBalanceOpenSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type AvailableBalanceOpenSubTotalPrepaymentPartType1 string

const (
	AvailableBalanceOpenSubTotalPrepaymentPartType1Fee                     AvailableBalanceOpenSubTotalPrepaymentPartType1 = "fee"
	AvailableBalanceOpenSubTotalPrepaymentPartType1FeeReimbursement        AvailableBalanceOpenSubTotalPrepaymentPartType1 = "fee-reimbursement"
	AvailableBalanceOpenSubTotalPrepaymentPartType1FeeDiscount             AvailableBalanceOpenSubTotalPrepaymentPartType1 = "fee-discount"
	AvailableBalanceOpenSubTotalPrepaymentPartType1FeeVat                  AvailableBalanceOpenSubTotalPrepaymentPartType1 = "fee-vat"
	AvailableBalanceOpenSubTotalPrepaymentPartType1FeeRoundingCompensation AvailableBalanceOpenSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e AvailableBalanceOpenSubTotalPrepaymentPartType1) ToPointer() *AvailableBalanceOpenSubTotalPrepaymentPartType1 {
	return &e
}
func (e *AvailableBalanceOpenSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = AvailableBalanceOpenSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceOpenSubTotalPrepaymentPartType1: %v", v)
	}
}

// AvailableBalanceOpenSubTotalTransactionType1 - Represents the transaction type
type AvailableBalanceOpenSubTotalTransactionType1 string

const (
	AvailableBalanceOpenSubTotalTransactionType1Payment                           AvailableBalanceOpenSubTotalTransactionType1 = "payment"
	AvailableBalanceOpenSubTotalTransactionType1SplitPayment                      AvailableBalanceOpenSubTotalTransactionType1 = "split-payment"
	AvailableBalanceOpenSubTotalTransactionType1FailedPayment                     AvailableBalanceOpenSubTotalTransactionType1 = "failed-payment"
	AvailableBalanceOpenSubTotalTransactionType1FailedPlatformSplitPayment        AvailableBalanceOpenSubTotalTransactionType1 = "failed-platform-split-payment"
	AvailableBalanceOpenSubTotalTransactionType1FailedSplitPaymentCompensation    AvailableBalanceOpenSubTotalTransactionType1 = "failed-split-payment-compensation"
	AvailableBalanceOpenSubTotalTransactionType1Capture                           AvailableBalanceOpenSubTotalTransactionType1 = "capture"
	AvailableBalanceOpenSubTotalTransactionType1SplitTransaction                  AvailableBalanceOpenSubTotalTransactionType1 = "split-transaction"
	AvailableBalanceOpenSubTotalTransactionType1Refund                            AvailableBalanceOpenSubTotalTransactionType1 = "refund"
	AvailableBalanceOpenSubTotalTransactionType1PlatformPaymentRefund             AvailableBalanceOpenSubTotalTransactionType1 = "platform-payment-refund"
	AvailableBalanceOpenSubTotalTransactionType1ReturnedPlatformPaymentRefund     AvailableBalanceOpenSubTotalTransactionType1 = "returned-platform-payment-refund"
	AvailableBalanceOpenSubTotalTransactionType1RefundCompensation                AvailableBalanceOpenSubTotalTransactionType1 = "refund-compensation"
	AvailableBalanceOpenSubTotalTransactionType1ReturnedRefundCompensation        AvailableBalanceOpenSubTotalTransactionType1 = "returned-refund-compensation"
	AvailableBalanceOpenSubTotalTransactionType1ReturnedRefund                    AvailableBalanceOpenSubTotalTransactionType1 = "returned-refund"
	AvailableBalanceOpenSubTotalTransactionType1Chargeback                        AvailableBalanceOpenSubTotalTransactionType1 = "chargeback"
	AvailableBalanceOpenSubTotalTransactionType1ChargebackReversal                AvailableBalanceOpenSubTotalTransactionType1 = "chargeback-reversal"
	AvailableBalanceOpenSubTotalTransactionType1ChargebackCompensation            AvailableBalanceOpenSubTotalTransactionType1 = "chargeback-compensation"
	AvailableBalanceOpenSubTotalTransactionType1ReversedChargebackCompensation    AvailableBalanceOpenSubTotalTransactionType1 = "reversed-chargeback-compensation"
	AvailableBalanceOpenSubTotalTransactionType1PlatformPaymentChargeback         AvailableBalanceOpenSubTotalTransactionType1 = "platform-payment-chargeback"
	AvailableBalanceOpenSubTotalTransactionType1ReversedPlatformPaymentChargeback AvailableBalanceOpenSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	AvailableBalanceOpenSubTotalTransactionType1FeePrepayment                     AvailableBalanceOpenSubTotalTransactionType1 = "fee-prepayment"
	AvailableBalanceOpenSubTotalTransactionType1OutgoingTransfer                  AvailableBalanceOpenSubTotalTransactionType1 = "outgoing-transfer"
	AvailableBalanceOpenSubTotalTransactionType1IncomingTransfer                  AvailableBalanceOpenSubTotalTransactionType1 = "incoming-transfer"
	AvailableBalanceOpenSubTotalTransactionType1CanceledTransfer                  AvailableBalanceOpenSubTotalTransactionType1 = "canceled-transfer"
	AvailableBalanceOpenSubTotalTransactionType1ReturnedTransfer                  AvailableBalanceOpenSubTotalTransactionType1 = "returned-transfer"
	AvailableBalanceOpenSubTotalTransactionType1BalanceReserve                    AvailableBalanceOpenSubTotalTransactionType1 = "balance-reserve"
	AvailableBalanceOpenSubTotalTransactionType1BalanceReserveReturn              AvailableBalanceOpenSubTotalTransactionType1 = "balance-reserve-return"
	AvailableBalanceOpenSubTotalTransactionType1InvoiceRoundingCompensation       AvailableBalanceOpenSubTotalTransactionType1 = "invoice-rounding-compensation"
	AvailableBalanceOpenSubTotalTransactionType1RollingReserveHold                AvailableBalanceOpenSubTotalTransactionType1 = "rolling-reserve-hold"
	AvailableBalanceOpenSubTotalTransactionType1RollingReserveRelease             AvailableBalanceOpenSubTotalTransactionType1 = "rolling-reserve-release"
	AvailableBalanceOpenSubTotalTransactionType1BalanceCorrection                 AvailableBalanceOpenSubTotalTransactionType1 = "balance-correction"
	AvailableBalanceOpenSubTotalTransactionType1Repayment                         AvailableBalanceOpenSubTotalTransactionType1 = "repayment"
	AvailableBalanceOpenSubTotalTransactionType1Loan                              AvailableBalanceOpenSubTotalTransactionType1 = "loan"
	AvailableBalanceOpenSubTotalTransactionType1BalanceTopup                      AvailableBalanceOpenSubTotalTransactionType1 = "balance-topup"
	AvailableBalanceOpenSubTotalTransactionType1CashCollateralIssuance            AvailableBalanceOpenSubTotalTransactionType1 = "cash-collateral-issuance';"
	AvailableBalanceOpenSubTotalTransactionType1CashCollateralRelease             AvailableBalanceOpenSubTotalTransactionType1 = "cash-collateral-release"
	AvailableBalanceOpenSubTotalTransactionType1PendingRollingReserve             AvailableBalanceOpenSubTotalTransactionType1 = "pending-rolling-reserve"
	AvailableBalanceOpenSubTotalTransactionType1ToBeReleasedRollingReserve        AvailableBalanceOpenSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	AvailableBalanceOpenSubTotalTransactionType1HeldRollingReserve                AvailableBalanceOpenSubTotalTransactionType1 = "held-rolling-reserve"
	AvailableBalanceOpenSubTotalTransactionType1ReleasedRollingReserve            AvailableBalanceOpenSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e AvailableBalanceOpenSubTotalTransactionType1) ToPointer() *AvailableBalanceOpenSubTotalTransactionType1 {
	return &e
}
func (e *AvailableBalanceOpenSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = AvailableBalanceOpenSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceOpenSubTotalTransactionType1: %v", v)
	}
}

type AvailableBalanceOpenSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *AvailableBalanceOpenSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *AvailableBalanceOpenSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *AvailableBalanceOpenSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *AvailableBalanceOpenSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *AvailableBalanceOpenSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *AvailableBalanceOpenSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *AvailableBalanceOpenSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *AvailableBalanceOpenSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *AvailableBalanceOpenSubTotal1) GetMethod() *AvailableBalanceOpenSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *AvailableBalanceOpenSubTotal1) GetCardIssuer() *AvailableBalanceOpenSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *AvailableBalanceOpenSubTotal1) GetCardAudience() *AvailableBalanceOpenSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *AvailableBalanceOpenSubTotal1) GetCardRegion() *AvailableBalanceOpenSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *AvailableBalanceOpenSubTotal1) GetFeeType() *AvailableBalanceOpenSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *AvailableBalanceOpenSubTotal1) GetPrepaymentPartType() *AvailableBalanceOpenSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *AvailableBalanceOpenSubTotal1) GetTransactionType() *AvailableBalanceOpenSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// AvailableBalanceOpenSubtotalMethod2 - Payment type of the transactions
type AvailableBalanceOpenSubtotalMethod2 string

const (
	AvailableBalanceOpenSubtotalMethod2Alma              AvailableBalanceOpenSubtotalMethod2 = "alma"
	AvailableBalanceOpenSubtotalMethod2Bacs              AvailableBalanceOpenSubtotalMethod2 = "bacs"
	AvailableBalanceOpenSubtotalMethod2Applepay          AvailableBalanceOpenSubtotalMethod2 = "applepay"
	AvailableBalanceOpenSubtotalMethod2Bancomatpay       AvailableBalanceOpenSubtotalMethod2 = "bancomatpay"
	AvailableBalanceOpenSubtotalMethod2Bancontact        AvailableBalanceOpenSubtotalMethod2 = "bancontact"
	AvailableBalanceOpenSubtotalMethod2Banktransfer      AvailableBalanceOpenSubtotalMethod2 = "banktransfer"
	AvailableBalanceOpenSubtotalMethod2Belfius           AvailableBalanceOpenSubtotalMethod2 = "belfius"
	AvailableBalanceOpenSubtotalMethod2Billie            AvailableBalanceOpenSubtotalMethod2 = "billie"
	AvailableBalanceOpenSubtotalMethod2Bizum             AvailableBalanceOpenSubtotalMethod2 = "bizum"
	AvailableBalanceOpenSubtotalMethod2Bitcoin           AvailableBalanceOpenSubtotalMethod2 = "bitcoin"
	AvailableBalanceOpenSubtotalMethod2Blik              AvailableBalanceOpenSubtotalMethod2 = "blik"
	AvailableBalanceOpenSubtotalMethod2Creditcard        AvailableBalanceOpenSubtotalMethod2 = "creditcard"
	AvailableBalanceOpenSubtotalMethod2Directdebit       AvailableBalanceOpenSubtotalMethod2 = "directdebit"
	AvailableBalanceOpenSubtotalMethod2Eps               AvailableBalanceOpenSubtotalMethod2 = "eps"
	AvailableBalanceOpenSubtotalMethod2Giftcard          AvailableBalanceOpenSubtotalMethod2 = "giftcard"
	AvailableBalanceOpenSubtotalMethod2Giropay           AvailableBalanceOpenSubtotalMethod2 = "giropay"
	AvailableBalanceOpenSubtotalMethod2Googlepay         AvailableBalanceOpenSubtotalMethod2 = "googlepay"
	AvailableBalanceOpenSubtotalMethod2Ideal             AvailableBalanceOpenSubtotalMethod2 = "ideal"
	AvailableBalanceOpenSubtotalMethod2In3               AvailableBalanceOpenSubtotalMethod2 = "in3"
	AvailableBalanceOpenSubtotalMethod2Inghomepay        AvailableBalanceOpenSubtotalMethod2 = "inghomepay"
	AvailableBalanceOpenSubtotalMethod2Kbc               AvailableBalanceOpenSubtotalMethod2 = "kbc"
	AvailableBalanceOpenSubtotalMethod2Klarnapaylater    AvailableBalanceOpenSubtotalMethod2 = "klarnapaylater"
	AvailableBalanceOpenSubtotalMethod2Klarnapaynow      AvailableBalanceOpenSubtotalMethod2 = "klarnapaynow"
	AvailableBalanceOpenSubtotalMethod2Klarnasliceit     AvailableBalanceOpenSubtotalMethod2 = "klarnasliceit"
	AvailableBalanceOpenSubtotalMethod2Klarna            AvailableBalanceOpenSubtotalMethod2 = "klarna"
	AvailableBalanceOpenSubtotalMethod2Mbway             AvailableBalanceOpenSubtotalMethod2 = "mbway"
	AvailableBalanceOpenSubtotalMethod2Multibanco        AvailableBalanceOpenSubtotalMethod2 = "multibanco"
	AvailableBalanceOpenSubtotalMethod2Mybank            AvailableBalanceOpenSubtotalMethod2 = "mybank"
	AvailableBalanceOpenSubtotalMethod2Paybybank         AvailableBalanceOpenSubtotalMethod2 = "paybybank"
	AvailableBalanceOpenSubtotalMethod2Payconiq          AvailableBalanceOpenSubtotalMethod2 = "payconiq"
	AvailableBalanceOpenSubtotalMethod2Paypal            AvailableBalanceOpenSubtotalMethod2 = "paypal"
	AvailableBalanceOpenSubtotalMethod2Paysafecard       AvailableBalanceOpenSubtotalMethod2 = "paysafecard"
	AvailableBalanceOpenSubtotalMethod2Przelewy24        AvailableBalanceOpenSubtotalMethod2 = "przelewy24"
	AvailableBalanceOpenSubtotalMethod2Riverty           AvailableBalanceOpenSubtotalMethod2 = "riverty"
	AvailableBalanceOpenSubtotalMethod2Satispay          AvailableBalanceOpenSubtotalMethod2 = "satispay"
	AvailableBalanceOpenSubtotalMethod2Podiumcadeaukaart AvailableBalanceOpenSubtotalMethod2 = "podiumcadeaukaart"
	AvailableBalanceOpenSubtotalMethod2Pointofsale       AvailableBalanceOpenSubtotalMethod2 = "pointofsale"
	AvailableBalanceOpenSubtotalMethod2Sofort            AvailableBalanceOpenSubtotalMethod2 = "sofort"
	AvailableBalanceOpenSubtotalMethod2Swish             AvailableBalanceOpenSubtotalMethod2 = "swish"
	AvailableBalanceOpenSubtotalMethod2Trustly           AvailableBalanceOpenSubtotalMethod2 = "trustly"
	AvailableBalanceOpenSubtotalMethod2Twint             AvailableBalanceOpenSubtotalMethod2 = "twint"
	AvailableBalanceOpenSubtotalMethod2Voucher           AvailableBalanceOpenSubtotalMethod2 = "voucher"
)

func (e AvailableBalanceOpenSubtotalMethod2) ToPointer() *AvailableBalanceOpenSubtotalMethod2 {
	return &e
}
func (e *AvailableBalanceOpenSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = AvailableBalanceOpenSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceOpenSubtotalMethod2: %v", v)
	}
}

// AvailableBalanceOpenSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type AvailableBalanceOpenSubtotalCardIssuer2 string

const (
	AvailableBalanceOpenSubtotalCardIssuer2Amex          AvailableBalanceOpenSubtotalCardIssuer2 = "amex"
	AvailableBalanceOpenSubtotalCardIssuer2Maestro       AvailableBalanceOpenSubtotalCardIssuer2 = "maestro"
	AvailableBalanceOpenSubtotalCardIssuer2CarteBancaire AvailableBalanceOpenSubtotalCardIssuer2 = "carte-bancaire"
	AvailableBalanceOpenSubtotalCardIssuer2Other         AvailableBalanceOpenSubtotalCardIssuer2 = "other"
)

func (e AvailableBalanceOpenSubtotalCardIssuer2) ToPointer() *AvailableBalanceOpenSubtotalCardIssuer2 {
	return &e
}
func (e *AvailableBalanceOpenSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = AvailableBalanceOpenSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceOpenSubtotalCardIssuer2: %v", v)
	}
}

// AvailableBalanceOpenSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type AvailableBalanceOpenSubtotalCardAudience2 string

const (
	AvailableBalanceOpenSubtotalCardAudience2Corporate AvailableBalanceOpenSubtotalCardAudience2 = "corporate"
	AvailableBalanceOpenSubtotalCardAudience2Other     AvailableBalanceOpenSubtotalCardAudience2 = "other"
)

func (e AvailableBalanceOpenSubtotalCardAudience2) ToPointer() *AvailableBalanceOpenSubtotalCardAudience2 {
	return &e
}
func (e *AvailableBalanceOpenSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = AvailableBalanceOpenSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceOpenSubtotalCardAudience2: %v", v)
	}
}

// AvailableBalanceOpenSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type AvailableBalanceOpenSubtotalCardRegion2 string

const (
	AvailableBalanceOpenSubtotalCardRegion2IntraEea AvailableBalanceOpenSubtotalCardRegion2 = "intra-eea"
	AvailableBalanceOpenSubtotalCardRegion2IntraEu  AvailableBalanceOpenSubtotalCardRegion2 = "intra-eu"
	AvailableBalanceOpenSubtotalCardRegion2Domestic AvailableBalanceOpenSubtotalCardRegion2 = "domestic"
	AvailableBalanceOpenSubtotalCardRegion2Other    AvailableBalanceOpenSubtotalCardRegion2 = "other"
)

func (e AvailableBalanceOpenSubtotalCardRegion2) ToPointer() *AvailableBalanceOpenSubtotalCardRegion2 {
	return &e
}
func (e *AvailableBalanceOpenSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = AvailableBalanceOpenSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceOpenSubtotalCardRegion2: %v", v)
	}
}

// AvailableBalanceOpenSubtotalFeeType2 - Present when the transaction represents a fee.
type AvailableBalanceOpenSubtotalFeeType2 string

const (
	AvailableBalanceOpenSubtotalFeeType2PaymentFee                                        AvailableBalanceOpenSubtotalFeeType2 = "payment-fee"
	AvailableBalanceOpenSubtotalFeeType2DirectDebitFailureFee                             AvailableBalanceOpenSubtotalFeeType2 = "direct-debit-failure-fee"
	AvailableBalanceOpenSubtotalFeeType2UnauthorizedDirectDebitFee                        AvailableBalanceOpenSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	AvailableBalanceOpenSubtotalFeeType2BankChargedDirectDebitFailureFee                  AvailableBalanceOpenSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	AvailableBalanceOpenSubtotalFeeType2PartnerCommission                                 AvailableBalanceOpenSubtotalFeeType2 = "partner-commission"
	AvailableBalanceOpenSubtotalFeeType2ApplicationFee                                    AvailableBalanceOpenSubtotalFeeType2 = "application-fee"
	AvailableBalanceOpenSubtotalFeeType2CaptureFee                                        AvailableBalanceOpenSubtotalFeeType2 = "capture-fee"
	AvailableBalanceOpenSubtotalFeeType2RefundFee                                         AvailableBalanceOpenSubtotalFeeType2 = "refund-fee"
	AvailableBalanceOpenSubtotalFeeType2ChargebackFee                                     AvailableBalanceOpenSubtotalFeeType2 = "chargeback-fee"
	AvailableBalanceOpenSubtotalFeeType2PaymentNotificationFee                            AvailableBalanceOpenSubtotalFeeType2 = "payment-notification-fee"
	AvailableBalanceOpenSubtotalFeeType2TransferNotificationFee                           AvailableBalanceOpenSubtotalFeeType2 = "transfer-notification-fee"
	AvailableBalanceOpenSubtotalFeeType2PayoutFee                                         AvailableBalanceOpenSubtotalFeeType2 = "payout-fee"
	AvailableBalanceOpenSubtotalFeeType2FeeDiscount                                       AvailableBalanceOpenSubtotalFeeType2 = "fee-discount"
	AvailableBalanceOpenSubtotalFeeType2FeeReimbursement                                  AvailableBalanceOpenSubtotalFeeType2 = "fee-reimbursement"
	AvailableBalanceOpenSubtotalFeeType2PlatformVolumeFee                                 AvailableBalanceOpenSubtotalFeeType2 = "platform-volume-fee"
	AvailableBalanceOpenSubtotalFeeType2PlatformConnectedOrganizationsFee                 AvailableBalanceOpenSubtotalFeeType2 = "platform-connected-organizations-fee"
	AvailableBalanceOpenSubtotalFeeType2BalanceChargeFee                                  AvailableBalanceOpenSubtotalFeeType2 = "balance-charge-fee"
	AvailableBalanceOpenSubtotalFeeType2ThreedsAuthenticationAttemptFee                   AvailableBalanceOpenSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	AvailableBalanceOpenSubtotalFeeType2TerminalMonthlyFee                                AvailableBalanceOpenSubtotalFeeType2 = "terminal-monthly-fee"
	AvailableBalanceOpenSubtotalFeeType2AcceptanceRiskFee                                 AvailableBalanceOpenSubtotalFeeType2 = "acceptance-risk-fee"
	AvailableBalanceOpenSubtotalFeeType2TopUpFee                                          AvailableBalanceOpenSubtotalFeeType2 = "top-up-fee"
	AvailableBalanceOpenSubtotalFeeType2PaymentGatewayFee                                 AvailableBalanceOpenSubtotalFeeType2 = "payment-gateway-fee"
	AvailableBalanceOpenSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   AvailableBalanceOpenSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	AvailableBalanceOpenSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee AvailableBalanceOpenSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	AvailableBalanceOpenSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             AvailableBalanceOpenSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	AvailableBalanceOpenSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           AvailableBalanceOpenSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	AvailableBalanceOpenSubtotalFeeType2MinimumInvoiceAmountFee                           AvailableBalanceOpenSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e AvailableBalanceOpenSubtotalFeeType2) ToPointer() *AvailableBalanceOpenSubtotalFeeType2 {
	return &e
}
func (e *AvailableBalanceOpenSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = AvailableBalanceOpenSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceOpenSubtotalFeeType2: %v", v)
	}
}

// AvailableBalanceOpenSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type AvailableBalanceOpenSubtotalPrepaymentPartType2 string

const (
	AvailableBalanceOpenSubtotalPrepaymentPartType2Fee                     AvailableBalanceOpenSubtotalPrepaymentPartType2 = "fee"
	AvailableBalanceOpenSubtotalPrepaymentPartType2FeeReimbursement        AvailableBalanceOpenSubtotalPrepaymentPartType2 = "fee-reimbursement"
	AvailableBalanceOpenSubtotalPrepaymentPartType2FeeDiscount             AvailableBalanceOpenSubtotalPrepaymentPartType2 = "fee-discount"
	AvailableBalanceOpenSubtotalPrepaymentPartType2FeeVat                  AvailableBalanceOpenSubtotalPrepaymentPartType2 = "fee-vat"
	AvailableBalanceOpenSubtotalPrepaymentPartType2FeeRoundingCompensation AvailableBalanceOpenSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e AvailableBalanceOpenSubtotalPrepaymentPartType2) ToPointer() *AvailableBalanceOpenSubtotalPrepaymentPartType2 {
	return &e
}
func (e *AvailableBalanceOpenSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = AvailableBalanceOpenSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceOpenSubtotalPrepaymentPartType2: %v", v)
	}
}

// AvailableBalanceOpenSubtotalTransactionType2 - Represents the transaction type
type AvailableBalanceOpenSubtotalTransactionType2 string

const (
	AvailableBalanceOpenSubtotalTransactionType2Payment                           AvailableBalanceOpenSubtotalTransactionType2 = "payment"
	AvailableBalanceOpenSubtotalTransactionType2SplitPayment                      AvailableBalanceOpenSubtotalTransactionType2 = "split-payment"
	AvailableBalanceOpenSubtotalTransactionType2FailedPayment                     AvailableBalanceOpenSubtotalTransactionType2 = "failed-payment"
	AvailableBalanceOpenSubtotalTransactionType2FailedPlatformSplitPayment        AvailableBalanceOpenSubtotalTransactionType2 = "failed-platform-split-payment"
	AvailableBalanceOpenSubtotalTransactionType2FailedSplitPaymentCompensation    AvailableBalanceOpenSubtotalTransactionType2 = "failed-split-payment-compensation"
	AvailableBalanceOpenSubtotalTransactionType2Capture                           AvailableBalanceOpenSubtotalTransactionType2 = "capture"
	AvailableBalanceOpenSubtotalTransactionType2SplitTransaction                  AvailableBalanceOpenSubtotalTransactionType2 = "split-transaction"
	AvailableBalanceOpenSubtotalTransactionType2Refund                            AvailableBalanceOpenSubtotalTransactionType2 = "refund"
	AvailableBalanceOpenSubtotalTransactionType2PlatformPaymentRefund             AvailableBalanceOpenSubtotalTransactionType2 = "platform-payment-refund"
	AvailableBalanceOpenSubtotalTransactionType2ReturnedPlatformPaymentRefund     AvailableBalanceOpenSubtotalTransactionType2 = "returned-platform-payment-refund"
	AvailableBalanceOpenSubtotalTransactionType2RefundCompensation                AvailableBalanceOpenSubtotalTransactionType2 = "refund-compensation"
	AvailableBalanceOpenSubtotalTransactionType2ReturnedRefundCompensation        AvailableBalanceOpenSubtotalTransactionType2 = "returned-refund-compensation"
	AvailableBalanceOpenSubtotalTransactionType2ReturnedRefund                    AvailableBalanceOpenSubtotalTransactionType2 = "returned-refund"
	AvailableBalanceOpenSubtotalTransactionType2Chargeback                        AvailableBalanceOpenSubtotalTransactionType2 = "chargeback"
	AvailableBalanceOpenSubtotalTransactionType2ChargebackReversal                AvailableBalanceOpenSubtotalTransactionType2 = "chargeback-reversal"
	AvailableBalanceOpenSubtotalTransactionType2ChargebackCompensation            AvailableBalanceOpenSubtotalTransactionType2 = "chargeback-compensation"
	AvailableBalanceOpenSubtotalTransactionType2ReversedChargebackCompensation    AvailableBalanceOpenSubtotalTransactionType2 = "reversed-chargeback-compensation"
	AvailableBalanceOpenSubtotalTransactionType2PlatformPaymentChargeback         AvailableBalanceOpenSubtotalTransactionType2 = "platform-payment-chargeback"
	AvailableBalanceOpenSubtotalTransactionType2ReversedPlatformPaymentChargeback AvailableBalanceOpenSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	AvailableBalanceOpenSubtotalTransactionType2FeePrepayment                     AvailableBalanceOpenSubtotalTransactionType2 = "fee-prepayment"
	AvailableBalanceOpenSubtotalTransactionType2OutgoingTransfer                  AvailableBalanceOpenSubtotalTransactionType2 = "outgoing-transfer"
	AvailableBalanceOpenSubtotalTransactionType2IncomingTransfer                  AvailableBalanceOpenSubtotalTransactionType2 = "incoming-transfer"
	AvailableBalanceOpenSubtotalTransactionType2CanceledTransfer                  AvailableBalanceOpenSubtotalTransactionType2 = "canceled-transfer"
	AvailableBalanceOpenSubtotalTransactionType2ReturnedTransfer                  AvailableBalanceOpenSubtotalTransactionType2 = "returned-transfer"
	AvailableBalanceOpenSubtotalTransactionType2BalanceReserve                    AvailableBalanceOpenSubtotalTransactionType2 = "balance-reserve"
	AvailableBalanceOpenSubtotalTransactionType2BalanceReserveReturn              AvailableBalanceOpenSubtotalTransactionType2 = "balance-reserve-return"
	AvailableBalanceOpenSubtotalTransactionType2InvoiceRoundingCompensation       AvailableBalanceOpenSubtotalTransactionType2 = "invoice-rounding-compensation"
	AvailableBalanceOpenSubtotalTransactionType2RollingReserveHold                AvailableBalanceOpenSubtotalTransactionType2 = "rolling-reserve-hold"
	AvailableBalanceOpenSubtotalTransactionType2RollingReserveRelease             AvailableBalanceOpenSubtotalTransactionType2 = "rolling-reserve-release"
	AvailableBalanceOpenSubtotalTransactionType2BalanceCorrection                 AvailableBalanceOpenSubtotalTransactionType2 = "balance-correction"
	AvailableBalanceOpenSubtotalTransactionType2Repayment                         AvailableBalanceOpenSubtotalTransactionType2 = "repayment"
	AvailableBalanceOpenSubtotalTransactionType2Loan                              AvailableBalanceOpenSubtotalTransactionType2 = "loan"
	AvailableBalanceOpenSubtotalTransactionType2BalanceTopup                      AvailableBalanceOpenSubtotalTransactionType2 = "balance-topup"
	AvailableBalanceOpenSubtotalTransactionType2CashCollateralIssuance            AvailableBalanceOpenSubtotalTransactionType2 = "cash-collateral-issuance';"
	AvailableBalanceOpenSubtotalTransactionType2CashCollateralRelease             AvailableBalanceOpenSubtotalTransactionType2 = "cash-collateral-release"
	AvailableBalanceOpenSubtotalTransactionType2PendingRollingReserve             AvailableBalanceOpenSubtotalTransactionType2 = "pending-rolling-reserve"
	AvailableBalanceOpenSubtotalTransactionType2ToBeReleasedRollingReserve        AvailableBalanceOpenSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	AvailableBalanceOpenSubtotalTransactionType2HeldRollingReserve                AvailableBalanceOpenSubtotalTransactionType2 = "held-rolling-reserve"
	AvailableBalanceOpenSubtotalTransactionType2ReleasedRollingReserve            AvailableBalanceOpenSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e AvailableBalanceOpenSubtotalTransactionType2) ToPointer() *AvailableBalanceOpenSubtotalTransactionType2 {
	return &e
}
func (e *AvailableBalanceOpenSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = AvailableBalanceOpenSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceOpenSubtotalTransactionType2: %v", v)
	}
}

type AvailableBalanceOpenSubtotal2 struct {
	SubTotals []AvailableBalanceOpenSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *AvailableBalanceOpenSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *AvailableBalanceOpenSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *AvailableBalanceOpenSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *AvailableBalanceOpenSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *AvailableBalanceOpenSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *AvailableBalanceOpenSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *AvailableBalanceOpenSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *AvailableBalanceOpenSubtotal2) GetSubTotals() []AvailableBalanceOpenSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *AvailableBalanceOpenSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *AvailableBalanceOpenSubtotal2) GetMethod() *AvailableBalanceOpenSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *AvailableBalanceOpenSubtotal2) GetCardIssuer() *AvailableBalanceOpenSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *AvailableBalanceOpenSubtotal2) GetCardAudience() *AvailableBalanceOpenSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *AvailableBalanceOpenSubtotal2) GetCardRegion() *AvailableBalanceOpenSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *AvailableBalanceOpenSubtotal2) GetFeeType() *AvailableBalanceOpenSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *AvailableBalanceOpenSubtotal2) GetPrepaymentPartType() *AvailableBalanceOpenSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *AvailableBalanceOpenSubtotal2) GetTransactionType() *AvailableBalanceOpenSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type AvailableBalanceOpen struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *AvailableBalanceOpenAmount     `json:"amount,omitempty"`
	Subtotals []AvailableBalanceOpenSubtotal2 `json:"subtotals,omitempty"`
}

func (o *AvailableBalanceOpen) GetAmount() *AvailableBalanceOpenAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *AvailableBalanceOpen) GetSubtotals() []AvailableBalanceOpenSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// MovedFromPendingAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type MovedFromPendingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *MovedFromPendingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *MovedFromPendingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// MovedFromPendingSubTotalMethod1 - Payment type of the transactions
type MovedFromPendingSubTotalMethod1 string

const (
	MovedFromPendingSubTotalMethod1Alma              MovedFromPendingSubTotalMethod1 = "alma"
	MovedFromPendingSubTotalMethod1Bacs              MovedFromPendingSubTotalMethod1 = "bacs"
	MovedFromPendingSubTotalMethod1Applepay          MovedFromPendingSubTotalMethod1 = "applepay"
	MovedFromPendingSubTotalMethod1Bancomatpay       MovedFromPendingSubTotalMethod1 = "bancomatpay"
	MovedFromPendingSubTotalMethod1Bancontact        MovedFromPendingSubTotalMethod1 = "bancontact"
	MovedFromPendingSubTotalMethod1Banktransfer      MovedFromPendingSubTotalMethod1 = "banktransfer"
	MovedFromPendingSubTotalMethod1Belfius           MovedFromPendingSubTotalMethod1 = "belfius"
	MovedFromPendingSubTotalMethod1Billie            MovedFromPendingSubTotalMethod1 = "billie"
	MovedFromPendingSubTotalMethod1Bizum             MovedFromPendingSubTotalMethod1 = "bizum"
	MovedFromPendingSubTotalMethod1Bitcoin           MovedFromPendingSubTotalMethod1 = "bitcoin"
	MovedFromPendingSubTotalMethod1Blik              MovedFromPendingSubTotalMethod1 = "blik"
	MovedFromPendingSubTotalMethod1Creditcard        MovedFromPendingSubTotalMethod1 = "creditcard"
	MovedFromPendingSubTotalMethod1Directdebit       MovedFromPendingSubTotalMethod1 = "directdebit"
	MovedFromPendingSubTotalMethod1Eps               MovedFromPendingSubTotalMethod1 = "eps"
	MovedFromPendingSubTotalMethod1Giftcard          MovedFromPendingSubTotalMethod1 = "giftcard"
	MovedFromPendingSubTotalMethod1Giropay           MovedFromPendingSubTotalMethod1 = "giropay"
	MovedFromPendingSubTotalMethod1Googlepay         MovedFromPendingSubTotalMethod1 = "googlepay"
	MovedFromPendingSubTotalMethod1Ideal             MovedFromPendingSubTotalMethod1 = "ideal"
	MovedFromPendingSubTotalMethod1In3               MovedFromPendingSubTotalMethod1 = "in3"
	MovedFromPendingSubTotalMethod1Inghomepay        MovedFromPendingSubTotalMethod1 = "inghomepay"
	MovedFromPendingSubTotalMethod1Kbc               MovedFromPendingSubTotalMethod1 = "kbc"
	MovedFromPendingSubTotalMethod1Klarnapaylater    MovedFromPendingSubTotalMethod1 = "klarnapaylater"
	MovedFromPendingSubTotalMethod1Klarnapaynow      MovedFromPendingSubTotalMethod1 = "klarnapaynow"
	MovedFromPendingSubTotalMethod1Klarnasliceit     MovedFromPendingSubTotalMethod1 = "klarnasliceit"
	MovedFromPendingSubTotalMethod1Klarna            MovedFromPendingSubTotalMethod1 = "klarna"
	MovedFromPendingSubTotalMethod1Mbway             MovedFromPendingSubTotalMethod1 = "mbway"
	MovedFromPendingSubTotalMethod1Multibanco        MovedFromPendingSubTotalMethod1 = "multibanco"
	MovedFromPendingSubTotalMethod1Mybank            MovedFromPendingSubTotalMethod1 = "mybank"
	MovedFromPendingSubTotalMethod1Paybybank         MovedFromPendingSubTotalMethod1 = "paybybank"
	MovedFromPendingSubTotalMethod1Payconiq          MovedFromPendingSubTotalMethod1 = "payconiq"
	MovedFromPendingSubTotalMethod1Paypal            MovedFromPendingSubTotalMethod1 = "paypal"
	MovedFromPendingSubTotalMethod1Paysafecard       MovedFromPendingSubTotalMethod1 = "paysafecard"
	MovedFromPendingSubTotalMethod1Przelewy24        MovedFromPendingSubTotalMethod1 = "przelewy24"
	MovedFromPendingSubTotalMethod1Riverty           MovedFromPendingSubTotalMethod1 = "riverty"
	MovedFromPendingSubTotalMethod1Satispay          MovedFromPendingSubTotalMethod1 = "satispay"
	MovedFromPendingSubTotalMethod1Podiumcadeaukaart MovedFromPendingSubTotalMethod1 = "podiumcadeaukaart"
	MovedFromPendingSubTotalMethod1Pointofsale       MovedFromPendingSubTotalMethod1 = "pointofsale"
	MovedFromPendingSubTotalMethod1Sofort            MovedFromPendingSubTotalMethod1 = "sofort"
	MovedFromPendingSubTotalMethod1Swish             MovedFromPendingSubTotalMethod1 = "swish"
	MovedFromPendingSubTotalMethod1Trustly           MovedFromPendingSubTotalMethod1 = "trustly"
	MovedFromPendingSubTotalMethod1Twint             MovedFromPendingSubTotalMethod1 = "twint"
	MovedFromPendingSubTotalMethod1Voucher           MovedFromPendingSubTotalMethod1 = "voucher"
)

func (e MovedFromPendingSubTotalMethod1) ToPointer() *MovedFromPendingSubTotalMethod1 {
	return &e
}
func (e *MovedFromPendingSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = MovedFromPendingSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MovedFromPendingSubTotalMethod1: %v", v)
	}
}

// MovedFromPendingSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type MovedFromPendingSubTotalCardIssuer1 string

const (
	MovedFromPendingSubTotalCardIssuer1Amex          MovedFromPendingSubTotalCardIssuer1 = "amex"
	MovedFromPendingSubTotalCardIssuer1Maestro       MovedFromPendingSubTotalCardIssuer1 = "maestro"
	MovedFromPendingSubTotalCardIssuer1CarteBancaire MovedFromPendingSubTotalCardIssuer1 = "carte-bancaire"
	MovedFromPendingSubTotalCardIssuer1Other         MovedFromPendingSubTotalCardIssuer1 = "other"
)

func (e MovedFromPendingSubTotalCardIssuer1) ToPointer() *MovedFromPendingSubTotalCardIssuer1 {
	return &e
}
func (e *MovedFromPendingSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = MovedFromPendingSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MovedFromPendingSubTotalCardIssuer1: %v", v)
	}
}

// MovedFromPendingSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type MovedFromPendingSubTotalCardAudience1 string

const (
	MovedFromPendingSubTotalCardAudience1Corporate MovedFromPendingSubTotalCardAudience1 = "corporate"
	MovedFromPendingSubTotalCardAudience1Other     MovedFromPendingSubTotalCardAudience1 = "other"
)

func (e MovedFromPendingSubTotalCardAudience1) ToPointer() *MovedFromPendingSubTotalCardAudience1 {
	return &e
}
func (e *MovedFromPendingSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = MovedFromPendingSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MovedFromPendingSubTotalCardAudience1: %v", v)
	}
}

// MovedFromPendingSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type MovedFromPendingSubTotalCardRegion1 string

const (
	MovedFromPendingSubTotalCardRegion1IntraEea MovedFromPendingSubTotalCardRegion1 = "intra-eea"
	MovedFromPendingSubTotalCardRegion1IntraEu  MovedFromPendingSubTotalCardRegion1 = "intra-eu"
	MovedFromPendingSubTotalCardRegion1Domestic MovedFromPendingSubTotalCardRegion1 = "domestic"
	MovedFromPendingSubTotalCardRegion1Other    MovedFromPendingSubTotalCardRegion1 = "other"
)

func (e MovedFromPendingSubTotalCardRegion1) ToPointer() *MovedFromPendingSubTotalCardRegion1 {
	return &e
}
func (e *MovedFromPendingSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = MovedFromPendingSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MovedFromPendingSubTotalCardRegion1: %v", v)
	}
}

// MovedFromPendingSubTotalFeeType1 - Present when the transaction represents a fee.
type MovedFromPendingSubTotalFeeType1 string

const (
	MovedFromPendingSubTotalFeeType1PaymentFee                                        MovedFromPendingSubTotalFeeType1 = "payment-fee"
	MovedFromPendingSubTotalFeeType1DirectDebitFailureFee                             MovedFromPendingSubTotalFeeType1 = "direct-debit-failure-fee"
	MovedFromPendingSubTotalFeeType1UnauthorizedDirectDebitFee                        MovedFromPendingSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	MovedFromPendingSubTotalFeeType1BankChargedDirectDebitFailureFee                  MovedFromPendingSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	MovedFromPendingSubTotalFeeType1PartnerCommission                                 MovedFromPendingSubTotalFeeType1 = "partner-commission"
	MovedFromPendingSubTotalFeeType1ApplicationFee                                    MovedFromPendingSubTotalFeeType1 = "application-fee"
	MovedFromPendingSubTotalFeeType1CaptureFee                                        MovedFromPendingSubTotalFeeType1 = "capture-fee"
	MovedFromPendingSubTotalFeeType1RefundFee                                         MovedFromPendingSubTotalFeeType1 = "refund-fee"
	MovedFromPendingSubTotalFeeType1ChargebackFee                                     MovedFromPendingSubTotalFeeType1 = "chargeback-fee"
	MovedFromPendingSubTotalFeeType1PaymentNotificationFee                            MovedFromPendingSubTotalFeeType1 = "payment-notification-fee"
	MovedFromPendingSubTotalFeeType1TransferNotificationFee                           MovedFromPendingSubTotalFeeType1 = "transfer-notification-fee"
	MovedFromPendingSubTotalFeeType1PayoutFee                                         MovedFromPendingSubTotalFeeType1 = "payout-fee"
	MovedFromPendingSubTotalFeeType1FeeDiscount                                       MovedFromPendingSubTotalFeeType1 = "fee-discount"
	MovedFromPendingSubTotalFeeType1FeeReimbursement                                  MovedFromPendingSubTotalFeeType1 = "fee-reimbursement"
	MovedFromPendingSubTotalFeeType1PlatformVolumeFee                                 MovedFromPendingSubTotalFeeType1 = "platform-volume-fee"
	MovedFromPendingSubTotalFeeType1PlatformConnectedOrganizationsFee                 MovedFromPendingSubTotalFeeType1 = "platform-connected-organizations-fee"
	MovedFromPendingSubTotalFeeType1BalanceChargeFee                                  MovedFromPendingSubTotalFeeType1 = "balance-charge-fee"
	MovedFromPendingSubTotalFeeType1ThreedsAuthenticationAttemptFee                   MovedFromPendingSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	MovedFromPendingSubTotalFeeType1TerminalMonthlyFee                                MovedFromPendingSubTotalFeeType1 = "terminal-monthly-fee"
	MovedFromPendingSubTotalFeeType1AcceptanceRiskFee                                 MovedFromPendingSubTotalFeeType1 = "acceptance-risk-fee"
	MovedFromPendingSubTotalFeeType1TopUpFee                                          MovedFromPendingSubTotalFeeType1 = "top-up-fee"
	MovedFromPendingSubTotalFeeType1PaymentGatewayFee                                 MovedFromPendingSubTotalFeeType1 = "payment-gateway-fee"
	MovedFromPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   MovedFromPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	MovedFromPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee MovedFromPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	MovedFromPendingSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             MovedFromPendingSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	MovedFromPendingSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           MovedFromPendingSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	MovedFromPendingSubTotalFeeType1MinimumInvoiceAmountFee                           MovedFromPendingSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e MovedFromPendingSubTotalFeeType1) ToPointer() *MovedFromPendingSubTotalFeeType1 {
	return &e
}
func (e *MovedFromPendingSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = MovedFromPendingSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MovedFromPendingSubTotalFeeType1: %v", v)
	}
}

// MovedFromPendingSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type MovedFromPendingSubTotalPrepaymentPartType1 string

const (
	MovedFromPendingSubTotalPrepaymentPartType1Fee                     MovedFromPendingSubTotalPrepaymentPartType1 = "fee"
	MovedFromPendingSubTotalPrepaymentPartType1FeeReimbursement        MovedFromPendingSubTotalPrepaymentPartType1 = "fee-reimbursement"
	MovedFromPendingSubTotalPrepaymentPartType1FeeDiscount             MovedFromPendingSubTotalPrepaymentPartType1 = "fee-discount"
	MovedFromPendingSubTotalPrepaymentPartType1FeeVat                  MovedFromPendingSubTotalPrepaymentPartType1 = "fee-vat"
	MovedFromPendingSubTotalPrepaymentPartType1FeeRoundingCompensation MovedFromPendingSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e MovedFromPendingSubTotalPrepaymentPartType1) ToPointer() *MovedFromPendingSubTotalPrepaymentPartType1 {
	return &e
}
func (e *MovedFromPendingSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = MovedFromPendingSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MovedFromPendingSubTotalPrepaymentPartType1: %v", v)
	}
}

// MovedFromPendingSubTotalTransactionType1 - Represents the transaction type
type MovedFromPendingSubTotalTransactionType1 string

const (
	MovedFromPendingSubTotalTransactionType1Payment                           MovedFromPendingSubTotalTransactionType1 = "payment"
	MovedFromPendingSubTotalTransactionType1SplitPayment                      MovedFromPendingSubTotalTransactionType1 = "split-payment"
	MovedFromPendingSubTotalTransactionType1FailedPayment                     MovedFromPendingSubTotalTransactionType1 = "failed-payment"
	MovedFromPendingSubTotalTransactionType1FailedPlatformSplitPayment        MovedFromPendingSubTotalTransactionType1 = "failed-platform-split-payment"
	MovedFromPendingSubTotalTransactionType1FailedSplitPaymentCompensation    MovedFromPendingSubTotalTransactionType1 = "failed-split-payment-compensation"
	MovedFromPendingSubTotalTransactionType1Capture                           MovedFromPendingSubTotalTransactionType1 = "capture"
	MovedFromPendingSubTotalTransactionType1SplitTransaction                  MovedFromPendingSubTotalTransactionType1 = "split-transaction"
	MovedFromPendingSubTotalTransactionType1Refund                            MovedFromPendingSubTotalTransactionType1 = "refund"
	MovedFromPendingSubTotalTransactionType1PlatformPaymentRefund             MovedFromPendingSubTotalTransactionType1 = "platform-payment-refund"
	MovedFromPendingSubTotalTransactionType1ReturnedPlatformPaymentRefund     MovedFromPendingSubTotalTransactionType1 = "returned-platform-payment-refund"
	MovedFromPendingSubTotalTransactionType1RefundCompensation                MovedFromPendingSubTotalTransactionType1 = "refund-compensation"
	MovedFromPendingSubTotalTransactionType1ReturnedRefundCompensation        MovedFromPendingSubTotalTransactionType1 = "returned-refund-compensation"
	MovedFromPendingSubTotalTransactionType1ReturnedRefund                    MovedFromPendingSubTotalTransactionType1 = "returned-refund"
	MovedFromPendingSubTotalTransactionType1Chargeback                        MovedFromPendingSubTotalTransactionType1 = "chargeback"
	MovedFromPendingSubTotalTransactionType1ChargebackReversal                MovedFromPendingSubTotalTransactionType1 = "chargeback-reversal"
	MovedFromPendingSubTotalTransactionType1ChargebackCompensation            MovedFromPendingSubTotalTransactionType1 = "chargeback-compensation"
	MovedFromPendingSubTotalTransactionType1ReversedChargebackCompensation    MovedFromPendingSubTotalTransactionType1 = "reversed-chargeback-compensation"
	MovedFromPendingSubTotalTransactionType1PlatformPaymentChargeback         MovedFromPendingSubTotalTransactionType1 = "platform-payment-chargeback"
	MovedFromPendingSubTotalTransactionType1ReversedPlatformPaymentChargeback MovedFromPendingSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	MovedFromPendingSubTotalTransactionType1FeePrepayment                     MovedFromPendingSubTotalTransactionType1 = "fee-prepayment"
	MovedFromPendingSubTotalTransactionType1OutgoingTransfer                  MovedFromPendingSubTotalTransactionType1 = "outgoing-transfer"
	MovedFromPendingSubTotalTransactionType1IncomingTransfer                  MovedFromPendingSubTotalTransactionType1 = "incoming-transfer"
	MovedFromPendingSubTotalTransactionType1CanceledTransfer                  MovedFromPendingSubTotalTransactionType1 = "canceled-transfer"
	MovedFromPendingSubTotalTransactionType1ReturnedTransfer                  MovedFromPendingSubTotalTransactionType1 = "returned-transfer"
	MovedFromPendingSubTotalTransactionType1BalanceReserve                    MovedFromPendingSubTotalTransactionType1 = "balance-reserve"
	MovedFromPendingSubTotalTransactionType1BalanceReserveReturn              MovedFromPendingSubTotalTransactionType1 = "balance-reserve-return"
	MovedFromPendingSubTotalTransactionType1InvoiceRoundingCompensation       MovedFromPendingSubTotalTransactionType1 = "invoice-rounding-compensation"
	MovedFromPendingSubTotalTransactionType1RollingReserveHold                MovedFromPendingSubTotalTransactionType1 = "rolling-reserve-hold"
	MovedFromPendingSubTotalTransactionType1RollingReserveRelease             MovedFromPendingSubTotalTransactionType1 = "rolling-reserve-release"
	MovedFromPendingSubTotalTransactionType1BalanceCorrection                 MovedFromPendingSubTotalTransactionType1 = "balance-correction"
	MovedFromPendingSubTotalTransactionType1Repayment                         MovedFromPendingSubTotalTransactionType1 = "repayment"
	MovedFromPendingSubTotalTransactionType1Loan                              MovedFromPendingSubTotalTransactionType1 = "loan"
	MovedFromPendingSubTotalTransactionType1BalanceTopup                      MovedFromPendingSubTotalTransactionType1 = "balance-topup"
	MovedFromPendingSubTotalTransactionType1CashCollateralIssuance            MovedFromPendingSubTotalTransactionType1 = "cash-collateral-issuance';"
	MovedFromPendingSubTotalTransactionType1CashCollateralRelease             MovedFromPendingSubTotalTransactionType1 = "cash-collateral-release"
	MovedFromPendingSubTotalTransactionType1PendingRollingReserve             MovedFromPendingSubTotalTransactionType1 = "pending-rolling-reserve"
	MovedFromPendingSubTotalTransactionType1ToBeReleasedRollingReserve        MovedFromPendingSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	MovedFromPendingSubTotalTransactionType1HeldRollingReserve                MovedFromPendingSubTotalTransactionType1 = "held-rolling-reserve"
	MovedFromPendingSubTotalTransactionType1ReleasedRollingReserve            MovedFromPendingSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e MovedFromPendingSubTotalTransactionType1) ToPointer() *MovedFromPendingSubTotalTransactionType1 {
	return &e
}
func (e *MovedFromPendingSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = MovedFromPendingSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MovedFromPendingSubTotalTransactionType1: %v", v)
	}
}

type MovedFromPendingSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *MovedFromPendingSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *MovedFromPendingSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *MovedFromPendingSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *MovedFromPendingSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *MovedFromPendingSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *MovedFromPendingSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *MovedFromPendingSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *MovedFromPendingSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *MovedFromPendingSubTotal1) GetMethod() *MovedFromPendingSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *MovedFromPendingSubTotal1) GetCardIssuer() *MovedFromPendingSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *MovedFromPendingSubTotal1) GetCardAudience() *MovedFromPendingSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *MovedFromPendingSubTotal1) GetCardRegion() *MovedFromPendingSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *MovedFromPendingSubTotal1) GetFeeType() *MovedFromPendingSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *MovedFromPendingSubTotal1) GetPrepaymentPartType() *MovedFromPendingSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *MovedFromPendingSubTotal1) GetTransactionType() *MovedFromPendingSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// MovedFromPendingSubtotalMethod2 - Payment type of the transactions
type MovedFromPendingSubtotalMethod2 string

const (
	MovedFromPendingSubtotalMethod2Alma              MovedFromPendingSubtotalMethod2 = "alma"
	MovedFromPendingSubtotalMethod2Bacs              MovedFromPendingSubtotalMethod2 = "bacs"
	MovedFromPendingSubtotalMethod2Applepay          MovedFromPendingSubtotalMethod2 = "applepay"
	MovedFromPendingSubtotalMethod2Bancomatpay       MovedFromPendingSubtotalMethod2 = "bancomatpay"
	MovedFromPendingSubtotalMethod2Bancontact        MovedFromPendingSubtotalMethod2 = "bancontact"
	MovedFromPendingSubtotalMethod2Banktransfer      MovedFromPendingSubtotalMethod2 = "banktransfer"
	MovedFromPendingSubtotalMethod2Belfius           MovedFromPendingSubtotalMethod2 = "belfius"
	MovedFromPendingSubtotalMethod2Billie            MovedFromPendingSubtotalMethod2 = "billie"
	MovedFromPendingSubtotalMethod2Bizum             MovedFromPendingSubtotalMethod2 = "bizum"
	MovedFromPendingSubtotalMethod2Bitcoin           MovedFromPendingSubtotalMethod2 = "bitcoin"
	MovedFromPendingSubtotalMethod2Blik              MovedFromPendingSubtotalMethod2 = "blik"
	MovedFromPendingSubtotalMethod2Creditcard        MovedFromPendingSubtotalMethod2 = "creditcard"
	MovedFromPendingSubtotalMethod2Directdebit       MovedFromPendingSubtotalMethod2 = "directdebit"
	MovedFromPendingSubtotalMethod2Eps               MovedFromPendingSubtotalMethod2 = "eps"
	MovedFromPendingSubtotalMethod2Giftcard          MovedFromPendingSubtotalMethod2 = "giftcard"
	MovedFromPendingSubtotalMethod2Giropay           MovedFromPendingSubtotalMethod2 = "giropay"
	MovedFromPendingSubtotalMethod2Googlepay         MovedFromPendingSubtotalMethod2 = "googlepay"
	MovedFromPendingSubtotalMethod2Ideal             MovedFromPendingSubtotalMethod2 = "ideal"
	MovedFromPendingSubtotalMethod2In3               MovedFromPendingSubtotalMethod2 = "in3"
	MovedFromPendingSubtotalMethod2Inghomepay        MovedFromPendingSubtotalMethod2 = "inghomepay"
	MovedFromPendingSubtotalMethod2Kbc               MovedFromPendingSubtotalMethod2 = "kbc"
	MovedFromPendingSubtotalMethod2Klarnapaylater    MovedFromPendingSubtotalMethod2 = "klarnapaylater"
	MovedFromPendingSubtotalMethod2Klarnapaynow      MovedFromPendingSubtotalMethod2 = "klarnapaynow"
	MovedFromPendingSubtotalMethod2Klarnasliceit     MovedFromPendingSubtotalMethod2 = "klarnasliceit"
	MovedFromPendingSubtotalMethod2Klarna            MovedFromPendingSubtotalMethod2 = "klarna"
	MovedFromPendingSubtotalMethod2Mbway             MovedFromPendingSubtotalMethod2 = "mbway"
	MovedFromPendingSubtotalMethod2Multibanco        MovedFromPendingSubtotalMethod2 = "multibanco"
	MovedFromPendingSubtotalMethod2Mybank            MovedFromPendingSubtotalMethod2 = "mybank"
	MovedFromPendingSubtotalMethod2Paybybank         MovedFromPendingSubtotalMethod2 = "paybybank"
	MovedFromPendingSubtotalMethod2Payconiq          MovedFromPendingSubtotalMethod2 = "payconiq"
	MovedFromPendingSubtotalMethod2Paypal            MovedFromPendingSubtotalMethod2 = "paypal"
	MovedFromPendingSubtotalMethod2Paysafecard       MovedFromPendingSubtotalMethod2 = "paysafecard"
	MovedFromPendingSubtotalMethod2Przelewy24        MovedFromPendingSubtotalMethod2 = "przelewy24"
	MovedFromPendingSubtotalMethod2Riverty           MovedFromPendingSubtotalMethod2 = "riverty"
	MovedFromPendingSubtotalMethod2Satispay          MovedFromPendingSubtotalMethod2 = "satispay"
	MovedFromPendingSubtotalMethod2Podiumcadeaukaart MovedFromPendingSubtotalMethod2 = "podiumcadeaukaart"
	MovedFromPendingSubtotalMethod2Pointofsale       MovedFromPendingSubtotalMethod2 = "pointofsale"
	MovedFromPendingSubtotalMethod2Sofort            MovedFromPendingSubtotalMethod2 = "sofort"
	MovedFromPendingSubtotalMethod2Swish             MovedFromPendingSubtotalMethod2 = "swish"
	MovedFromPendingSubtotalMethod2Trustly           MovedFromPendingSubtotalMethod2 = "trustly"
	MovedFromPendingSubtotalMethod2Twint             MovedFromPendingSubtotalMethod2 = "twint"
	MovedFromPendingSubtotalMethod2Voucher           MovedFromPendingSubtotalMethod2 = "voucher"
)

func (e MovedFromPendingSubtotalMethod2) ToPointer() *MovedFromPendingSubtotalMethod2 {
	return &e
}
func (e *MovedFromPendingSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = MovedFromPendingSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MovedFromPendingSubtotalMethod2: %v", v)
	}
}

// MovedFromPendingSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type MovedFromPendingSubtotalCardIssuer2 string

const (
	MovedFromPendingSubtotalCardIssuer2Amex          MovedFromPendingSubtotalCardIssuer2 = "amex"
	MovedFromPendingSubtotalCardIssuer2Maestro       MovedFromPendingSubtotalCardIssuer2 = "maestro"
	MovedFromPendingSubtotalCardIssuer2CarteBancaire MovedFromPendingSubtotalCardIssuer2 = "carte-bancaire"
	MovedFromPendingSubtotalCardIssuer2Other         MovedFromPendingSubtotalCardIssuer2 = "other"
)

func (e MovedFromPendingSubtotalCardIssuer2) ToPointer() *MovedFromPendingSubtotalCardIssuer2 {
	return &e
}
func (e *MovedFromPendingSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = MovedFromPendingSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MovedFromPendingSubtotalCardIssuer2: %v", v)
	}
}

// MovedFromPendingSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type MovedFromPendingSubtotalCardAudience2 string

const (
	MovedFromPendingSubtotalCardAudience2Corporate MovedFromPendingSubtotalCardAudience2 = "corporate"
	MovedFromPendingSubtotalCardAudience2Other     MovedFromPendingSubtotalCardAudience2 = "other"
)

func (e MovedFromPendingSubtotalCardAudience2) ToPointer() *MovedFromPendingSubtotalCardAudience2 {
	return &e
}
func (e *MovedFromPendingSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = MovedFromPendingSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MovedFromPendingSubtotalCardAudience2: %v", v)
	}
}

// MovedFromPendingSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type MovedFromPendingSubtotalCardRegion2 string

const (
	MovedFromPendingSubtotalCardRegion2IntraEea MovedFromPendingSubtotalCardRegion2 = "intra-eea"
	MovedFromPendingSubtotalCardRegion2IntraEu  MovedFromPendingSubtotalCardRegion2 = "intra-eu"
	MovedFromPendingSubtotalCardRegion2Domestic MovedFromPendingSubtotalCardRegion2 = "domestic"
	MovedFromPendingSubtotalCardRegion2Other    MovedFromPendingSubtotalCardRegion2 = "other"
)

func (e MovedFromPendingSubtotalCardRegion2) ToPointer() *MovedFromPendingSubtotalCardRegion2 {
	return &e
}
func (e *MovedFromPendingSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = MovedFromPendingSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MovedFromPendingSubtotalCardRegion2: %v", v)
	}
}

// MovedFromPendingSubtotalFeeType2 - Present when the transaction represents a fee.
type MovedFromPendingSubtotalFeeType2 string

const (
	MovedFromPendingSubtotalFeeType2PaymentFee                                        MovedFromPendingSubtotalFeeType2 = "payment-fee"
	MovedFromPendingSubtotalFeeType2DirectDebitFailureFee                             MovedFromPendingSubtotalFeeType2 = "direct-debit-failure-fee"
	MovedFromPendingSubtotalFeeType2UnauthorizedDirectDebitFee                        MovedFromPendingSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	MovedFromPendingSubtotalFeeType2BankChargedDirectDebitFailureFee                  MovedFromPendingSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	MovedFromPendingSubtotalFeeType2PartnerCommission                                 MovedFromPendingSubtotalFeeType2 = "partner-commission"
	MovedFromPendingSubtotalFeeType2ApplicationFee                                    MovedFromPendingSubtotalFeeType2 = "application-fee"
	MovedFromPendingSubtotalFeeType2CaptureFee                                        MovedFromPendingSubtotalFeeType2 = "capture-fee"
	MovedFromPendingSubtotalFeeType2RefundFee                                         MovedFromPendingSubtotalFeeType2 = "refund-fee"
	MovedFromPendingSubtotalFeeType2ChargebackFee                                     MovedFromPendingSubtotalFeeType2 = "chargeback-fee"
	MovedFromPendingSubtotalFeeType2PaymentNotificationFee                            MovedFromPendingSubtotalFeeType2 = "payment-notification-fee"
	MovedFromPendingSubtotalFeeType2TransferNotificationFee                           MovedFromPendingSubtotalFeeType2 = "transfer-notification-fee"
	MovedFromPendingSubtotalFeeType2PayoutFee                                         MovedFromPendingSubtotalFeeType2 = "payout-fee"
	MovedFromPendingSubtotalFeeType2FeeDiscount                                       MovedFromPendingSubtotalFeeType2 = "fee-discount"
	MovedFromPendingSubtotalFeeType2FeeReimbursement                                  MovedFromPendingSubtotalFeeType2 = "fee-reimbursement"
	MovedFromPendingSubtotalFeeType2PlatformVolumeFee                                 MovedFromPendingSubtotalFeeType2 = "platform-volume-fee"
	MovedFromPendingSubtotalFeeType2PlatformConnectedOrganizationsFee                 MovedFromPendingSubtotalFeeType2 = "platform-connected-organizations-fee"
	MovedFromPendingSubtotalFeeType2BalanceChargeFee                                  MovedFromPendingSubtotalFeeType2 = "balance-charge-fee"
	MovedFromPendingSubtotalFeeType2ThreedsAuthenticationAttemptFee                   MovedFromPendingSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	MovedFromPendingSubtotalFeeType2TerminalMonthlyFee                                MovedFromPendingSubtotalFeeType2 = "terminal-monthly-fee"
	MovedFromPendingSubtotalFeeType2AcceptanceRiskFee                                 MovedFromPendingSubtotalFeeType2 = "acceptance-risk-fee"
	MovedFromPendingSubtotalFeeType2TopUpFee                                          MovedFromPendingSubtotalFeeType2 = "top-up-fee"
	MovedFromPendingSubtotalFeeType2PaymentGatewayFee                                 MovedFromPendingSubtotalFeeType2 = "payment-gateway-fee"
	MovedFromPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   MovedFromPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	MovedFromPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee MovedFromPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	MovedFromPendingSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             MovedFromPendingSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	MovedFromPendingSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           MovedFromPendingSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	MovedFromPendingSubtotalFeeType2MinimumInvoiceAmountFee                           MovedFromPendingSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e MovedFromPendingSubtotalFeeType2) ToPointer() *MovedFromPendingSubtotalFeeType2 {
	return &e
}
func (e *MovedFromPendingSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = MovedFromPendingSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MovedFromPendingSubtotalFeeType2: %v", v)
	}
}

// MovedFromPendingSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type MovedFromPendingSubtotalPrepaymentPartType2 string

const (
	MovedFromPendingSubtotalPrepaymentPartType2Fee                     MovedFromPendingSubtotalPrepaymentPartType2 = "fee"
	MovedFromPendingSubtotalPrepaymentPartType2FeeReimbursement        MovedFromPendingSubtotalPrepaymentPartType2 = "fee-reimbursement"
	MovedFromPendingSubtotalPrepaymentPartType2FeeDiscount             MovedFromPendingSubtotalPrepaymentPartType2 = "fee-discount"
	MovedFromPendingSubtotalPrepaymentPartType2FeeVat                  MovedFromPendingSubtotalPrepaymentPartType2 = "fee-vat"
	MovedFromPendingSubtotalPrepaymentPartType2FeeRoundingCompensation MovedFromPendingSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e MovedFromPendingSubtotalPrepaymentPartType2) ToPointer() *MovedFromPendingSubtotalPrepaymentPartType2 {
	return &e
}
func (e *MovedFromPendingSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = MovedFromPendingSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MovedFromPendingSubtotalPrepaymentPartType2: %v", v)
	}
}

// MovedFromPendingSubtotalTransactionType2 - Represents the transaction type
type MovedFromPendingSubtotalTransactionType2 string

const (
	MovedFromPendingSubtotalTransactionType2Payment                           MovedFromPendingSubtotalTransactionType2 = "payment"
	MovedFromPendingSubtotalTransactionType2SplitPayment                      MovedFromPendingSubtotalTransactionType2 = "split-payment"
	MovedFromPendingSubtotalTransactionType2FailedPayment                     MovedFromPendingSubtotalTransactionType2 = "failed-payment"
	MovedFromPendingSubtotalTransactionType2FailedPlatformSplitPayment        MovedFromPendingSubtotalTransactionType2 = "failed-platform-split-payment"
	MovedFromPendingSubtotalTransactionType2FailedSplitPaymentCompensation    MovedFromPendingSubtotalTransactionType2 = "failed-split-payment-compensation"
	MovedFromPendingSubtotalTransactionType2Capture                           MovedFromPendingSubtotalTransactionType2 = "capture"
	MovedFromPendingSubtotalTransactionType2SplitTransaction                  MovedFromPendingSubtotalTransactionType2 = "split-transaction"
	MovedFromPendingSubtotalTransactionType2Refund                            MovedFromPendingSubtotalTransactionType2 = "refund"
	MovedFromPendingSubtotalTransactionType2PlatformPaymentRefund             MovedFromPendingSubtotalTransactionType2 = "platform-payment-refund"
	MovedFromPendingSubtotalTransactionType2ReturnedPlatformPaymentRefund     MovedFromPendingSubtotalTransactionType2 = "returned-platform-payment-refund"
	MovedFromPendingSubtotalTransactionType2RefundCompensation                MovedFromPendingSubtotalTransactionType2 = "refund-compensation"
	MovedFromPendingSubtotalTransactionType2ReturnedRefundCompensation        MovedFromPendingSubtotalTransactionType2 = "returned-refund-compensation"
	MovedFromPendingSubtotalTransactionType2ReturnedRefund                    MovedFromPendingSubtotalTransactionType2 = "returned-refund"
	MovedFromPendingSubtotalTransactionType2Chargeback                        MovedFromPendingSubtotalTransactionType2 = "chargeback"
	MovedFromPendingSubtotalTransactionType2ChargebackReversal                MovedFromPendingSubtotalTransactionType2 = "chargeback-reversal"
	MovedFromPendingSubtotalTransactionType2ChargebackCompensation            MovedFromPendingSubtotalTransactionType2 = "chargeback-compensation"
	MovedFromPendingSubtotalTransactionType2ReversedChargebackCompensation    MovedFromPendingSubtotalTransactionType2 = "reversed-chargeback-compensation"
	MovedFromPendingSubtotalTransactionType2PlatformPaymentChargeback         MovedFromPendingSubtotalTransactionType2 = "platform-payment-chargeback"
	MovedFromPendingSubtotalTransactionType2ReversedPlatformPaymentChargeback MovedFromPendingSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	MovedFromPendingSubtotalTransactionType2FeePrepayment                     MovedFromPendingSubtotalTransactionType2 = "fee-prepayment"
	MovedFromPendingSubtotalTransactionType2OutgoingTransfer                  MovedFromPendingSubtotalTransactionType2 = "outgoing-transfer"
	MovedFromPendingSubtotalTransactionType2IncomingTransfer                  MovedFromPendingSubtotalTransactionType2 = "incoming-transfer"
	MovedFromPendingSubtotalTransactionType2CanceledTransfer                  MovedFromPendingSubtotalTransactionType2 = "canceled-transfer"
	MovedFromPendingSubtotalTransactionType2ReturnedTransfer                  MovedFromPendingSubtotalTransactionType2 = "returned-transfer"
	MovedFromPendingSubtotalTransactionType2BalanceReserve                    MovedFromPendingSubtotalTransactionType2 = "balance-reserve"
	MovedFromPendingSubtotalTransactionType2BalanceReserveReturn              MovedFromPendingSubtotalTransactionType2 = "balance-reserve-return"
	MovedFromPendingSubtotalTransactionType2InvoiceRoundingCompensation       MovedFromPendingSubtotalTransactionType2 = "invoice-rounding-compensation"
	MovedFromPendingSubtotalTransactionType2RollingReserveHold                MovedFromPendingSubtotalTransactionType2 = "rolling-reserve-hold"
	MovedFromPendingSubtotalTransactionType2RollingReserveRelease             MovedFromPendingSubtotalTransactionType2 = "rolling-reserve-release"
	MovedFromPendingSubtotalTransactionType2BalanceCorrection                 MovedFromPendingSubtotalTransactionType2 = "balance-correction"
	MovedFromPendingSubtotalTransactionType2Repayment                         MovedFromPendingSubtotalTransactionType2 = "repayment"
	MovedFromPendingSubtotalTransactionType2Loan                              MovedFromPendingSubtotalTransactionType2 = "loan"
	MovedFromPendingSubtotalTransactionType2BalanceTopup                      MovedFromPendingSubtotalTransactionType2 = "balance-topup"
	MovedFromPendingSubtotalTransactionType2CashCollateralIssuance            MovedFromPendingSubtotalTransactionType2 = "cash-collateral-issuance';"
	MovedFromPendingSubtotalTransactionType2CashCollateralRelease             MovedFromPendingSubtotalTransactionType2 = "cash-collateral-release"
	MovedFromPendingSubtotalTransactionType2PendingRollingReserve             MovedFromPendingSubtotalTransactionType2 = "pending-rolling-reserve"
	MovedFromPendingSubtotalTransactionType2ToBeReleasedRollingReserve        MovedFromPendingSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	MovedFromPendingSubtotalTransactionType2HeldRollingReserve                MovedFromPendingSubtotalTransactionType2 = "held-rolling-reserve"
	MovedFromPendingSubtotalTransactionType2ReleasedRollingReserve            MovedFromPendingSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e MovedFromPendingSubtotalTransactionType2) ToPointer() *MovedFromPendingSubtotalTransactionType2 {
	return &e
}
func (e *MovedFromPendingSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = MovedFromPendingSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MovedFromPendingSubtotalTransactionType2: %v", v)
	}
}

type MovedFromPendingSubtotal2 struct {
	SubTotals []MovedFromPendingSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *MovedFromPendingSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *MovedFromPendingSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *MovedFromPendingSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *MovedFromPendingSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *MovedFromPendingSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *MovedFromPendingSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *MovedFromPendingSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *MovedFromPendingSubtotal2) GetSubTotals() []MovedFromPendingSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *MovedFromPendingSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *MovedFromPendingSubtotal2) GetMethod() *MovedFromPendingSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *MovedFromPendingSubtotal2) GetCardIssuer() *MovedFromPendingSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *MovedFromPendingSubtotal2) GetCardAudience() *MovedFromPendingSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *MovedFromPendingSubtotal2) GetCardRegion() *MovedFromPendingSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *MovedFromPendingSubtotal2) GetFeeType() *MovedFromPendingSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *MovedFromPendingSubtotal2) GetPrepaymentPartType() *MovedFromPendingSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *MovedFromPendingSubtotal2) GetTransactionType() *MovedFromPendingSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type MovedFromPending struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *MovedFromPendingAmount     `json:"amount,omitempty"`
	Subtotals []MovedFromPendingSubtotal2 `json:"subtotals,omitempty"`
}

func (o *MovedFromPending) GetAmount() *MovedFromPendingAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *MovedFromPending) GetSubtotals() []MovedFromPendingSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// AvailableBalanceImmediatelyAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type AvailableBalanceImmediatelyAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *AvailableBalanceImmediatelyAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *AvailableBalanceImmediatelyAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// AvailableBalanceImmediatelyAvailableSubTotalMethod1 - Payment type of the transactions
type AvailableBalanceImmediatelyAvailableSubTotalMethod1 string

const (
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Alma              AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "alma"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Bacs              AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "bacs"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Applepay          AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "applepay"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Bancomatpay       AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "bancomatpay"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Bancontact        AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "bancontact"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Banktransfer      AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "banktransfer"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Belfius           AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "belfius"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Billie            AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "billie"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Bizum             AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "bizum"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Bitcoin           AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "bitcoin"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Blik              AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "blik"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Creditcard        AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "creditcard"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Directdebit       AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "directdebit"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Eps               AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "eps"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Giftcard          AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "giftcard"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Giropay           AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "giropay"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Googlepay         AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "googlepay"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Ideal             AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "ideal"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1In3               AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "in3"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Inghomepay        AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "inghomepay"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Kbc               AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "kbc"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Klarnapaylater    AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "klarnapaylater"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Klarnapaynow      AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "klarnapaynow"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Klarnasliceit     AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "klarnasliceit"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Klarna            AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "klarna"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Mbway             AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "mbway"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Multibanco        AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "multibanco"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Mybank            AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "mybank"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Paybybank         AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "paybybank"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Payconiq          AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "payconiq"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Paypal            AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "paypal"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Paysafecard       AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "paysafecard"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Przelewy24        AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "przelewy24"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Riverty           AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "riverty"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Satispay          AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "satispay"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Podiumcadeaukaart AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "podiumcadeaukaart"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Pointofsale       AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "pointofsale"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Sofort            AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "sofort"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Swish             AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "swish"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Trustly           AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "trustly"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Twint             AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "twint"
	AvailableBalanceImmediatelyAvailableSubTotalMethod1Voucher           AvailableBalanceImmediatelyAvailableSubTotalMethod1 = "voucher"
)

func (e AvailableBalanceImmediatelyAvailableSubTotalMethod1) ToPointer() *AvailableBalanceImmediatelyAvailableSubTotalMethod1 {
	return &e
}
func (e *AvailableBalanceImmediatelyAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = AvailableBalanceImmediatelyAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceImmediatelyAvailableSubTotalMethod1: %v", v)
	}
}

// AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1 string

const (
	AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1Amex          AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1 = "amex"
	AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1Maestro       AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1 = "maestro"
	AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1CarteBancaire AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1 = "carte-bancaire"
	AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1Other         AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1 = "other"
)

func (e AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1) ToPointer() *AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1: %v", v)
	}
}

// AvailableBalanceImmediatelyAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type AvailableBalanceImmediatelyAvailableSubTotalCardAudience1 string

const (
	AvailableBalanceImmediatelyAvailableSubTotalCardAudience1Corporate AvailableBalanceImmediatelyAvailableSubTotalCardAudience1 = "corporate"
	AvailableBalanceImmediatelyAvailableSubTotalCardAudience1Other     AvailableBalanceImmediatelyAvailableSubTotalCardAudience1 = "other"
)

func (e AvailableBalanceImmediatelyAvailableSubTotalCardAudience1) ToPointer() *AvailableBalanceImmediatelyAvailableSubTotalCardAudience1 {
	return &e
}
func (e *AvailableBalanceImmediatelyAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = AvailableBalanceImmediatelyAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceImmediatelyAvailableSubTotalCardAudience1: %v", v)
	}
}

// AvailableBalanceImmediatelyAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type AvailableBalanceImmediatelyAvailableSubTotalCardRegion1 string

const (
	AvailableBalanceImmediatelyAvailableSubTotalCardRegion1IntraEea AvailableBalanceImmediatelyAvailableSubTotalCardRegion1 = "intra-eea"
	AvailableBalanceImmediatelyAvailableSubTotalCardRegion1IntraEu  AvailableBalanceImmediatelyAvailableSubTotalCardRegion1 = "intra-eu"
	AvailableBalanceImmediatelyAvailableSubTotalCardRegion1Domestic AvailableBalanceImmediatelyAvailableSubTotalCardRegion1 = "domestic"
	AvailableBalanceImmediatelyAvailableSubTotalCardRegion1Other    AvailableBalanceImmediatelyAvailableSubTotalCardRegion1 = "other"
)

func (e AvailableBalanceImmediatelyAvailableSubTotalCardRegion1) ToPointer() *AvailableBalanceImmediatelyAvailableSubTotalCardRegion1 {
	return &e
}
func (e *AvailableBalanceImmediatelyAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = AvailableBalanceImmediatelyAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceImmediatelyAvailableSubTotalCardRegion1: %v", v)
	}
}

// AvailableBalanceImmediatelyAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type AvailableBalanceImmediatelyAvailableSubTotalFeeType1 string

const (
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1PaymentFee                                        AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "payment-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1DirectDebitFailureFee                             AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1PartnerCommission                                 AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "partner-commission"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1ApplicationFee                                    AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "application-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1CaptureFee                                        AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "capture-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1RefundFee                                         AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "refund-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1ChargebackFee                                     AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "chargeback-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1PaymentNotificationFee                            AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "payment-notification-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1TransferNotificationFee                           AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "transfer-notification-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1PayoutFee                                         AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "payout-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1FeeDiscount                                       AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "fee-discount"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1FeeReimbursement                                  AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "fee-reimbursement"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1PlatformVolumeFee                                 AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "platform-volume-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1BalanceChargeFee                                  AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "balance-charge-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1TerminalMonthlyFee                                AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1AcceptanceRiskFee                                 AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1TopUpFee                                          AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "top-up-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1PaymentGatewayFee                                 AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "payment-gateway-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	AvailableBalanceImmediatelyAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           AvailableBalanceImmediatelyAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e AvailableBalanceImmediatelyAvailableSubTotalFeeType1) ToPointer() *AvailableBalanceImmediatelyAvailableSubTotalFeeType1 {
	return &e
}
func (e *AvailableBalanceImmediatelyAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = AvailableBalanceImmediatelyAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceImmediatelyAvailableSubTotalFeeType1: %v", v)
	}
}

// AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1 string

const (
	AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1Fee                     AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee"
	AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1FeeReimbursement        AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1FeeDiscount             AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1FeeVat                  AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1) ToPointer() *AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 - Represents the transaction type
type AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 string

const (
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1Payment                           AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "payment"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1SplitPayment                      AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "split-payment"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1FailedPayment                     AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "failed-payment"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1FailedPlatformSplitPayment        AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1Capture                           AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "capture"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1SplitTransaction                  AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "split-transaction"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1Refund                            AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "refund"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1PlatformPaymentRefund             AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-refund"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1RefundCompensation                AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "refund-compensation"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1ReturnedRefundCompensation        AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1ReturnedRefund                    AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "returned-refund"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1Chargeback                        AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "chargeback"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1ChargebackReversal                AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "chargeback-reversal"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1ChargebackCompensation            AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "chargeback-compensation"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1ReversedChargebackCompensation    AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1PlatformPaymentChargeback         AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1FeePrepayment                     AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "fee-prepayment"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1OutgoingTransfer                  AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "outgoing-transfer"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1IncomingTransfer                  AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "incoming-transfer"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1CanceledTransfer                  AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "canceled-transfer"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1ReturnedTransfer                  AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "returned-transfer"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1BalanceReserve                    AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1BalanceReserveReturn              AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve-return"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1InvoiceRoundingCompensation       AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1RollingReserveHold                AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1RollingReserveRelease             AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1BalanceCorrection                 AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "balance-correction"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1Repayment                         AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "repayment"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1Loan                              AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "loan"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1BalanceTopup                      AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "balance-topup"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1CashCollateralIssuance            AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1CashCollateralRelease             AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-release"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1PendingRollingReserve             AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1HeldRollingReserve                AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	AvailableBalanceImmediatelyAvailableSubTotalTransactionType1ReleasedRollingReserve            AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e AvailableBalanceImmediatelyAvailableSubTotalTransactionType1) ToPointer() *AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 {
	return &e
}
func (e *AvailableBalanceImmediatelyAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = AvailableBalanceImmediatelyAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceImmediatelyAvailableSubTotalTransactionType1: %v", v)
	}
}

type AvailableBalanceImmediatelyAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *AvailableBalanceImmediatelyAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *AvailableBalanceImmediatelyAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *AvailableBalanceImmediatelyAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *AvailableBalanceImmediatelyAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *AvailableBalanceImmediatelyAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *AvailableBalanceImmediatelyAvailableSubTotal1) GetMethod() *AvailableBalanceImmediatelyAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *AvailableBalanceImmediatelyAvailableSubTotal1) GetCardIssuer() *AvailableBalanceImmediatelyAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *AvailableBalanceImmediatelyAvailableSubTotal1) GetCardAudience() *AvailableBalanceImmediatelyAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *AvailableBalanceImmediatelyAvailableSubTotal1) GetCardRegion() *AvailableBalanceImmediatelyAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *AvailableBalanceImmediatelyAvailableSubTotal1) GetFeeType() *AvailableBalanceImmediatelyAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *AvailableBalanceImmediatelyAvailableSubTotal1) GetPrepaymentPartType() *AvailableBalanceImmediatelyAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *AvailableBalanceImmediatelyAvailableSubTotal1) GetTransactionType() *AvailableBalanceImmediatelyAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// AvailableBalanceImmediatelyAvailableSubtotalMethod2 - Payment type of the transactions
type AvailableBalanceImmediatelyAvailableSubtotalMethod2 string

const (
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Alma              AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "alma"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Bacs              AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "bacs"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Applepay          AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "applepay"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Bancomatpay       AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "bancomatpay"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Bancontact        AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "bancontact"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Banktransfer      AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "banktransfer"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Belfius           AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "belfius"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Billie            AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "billie"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Bizum             AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "bizum"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Bitcoin           AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "bitcoin"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Blik              AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "blik"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Creditcard        AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "creditcard"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Directdebit       AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "directdebit"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Eps               AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "eps"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Giftcard          AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "giftcard"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Giropay           AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "giropay"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Googlepay         AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "googlepay"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Ideal             AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "ideal"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2In3               AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "in3"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Inghomepay        AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "inghomepay"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Kbc               AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "kbc"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Klarnapaylater    AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "klarnapaylater"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Klarnapaynow      AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "klarnapaynow"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Klarnasliceit     AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "klarnasliceit"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Klarna            AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "klarna"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Mbway             AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "mbway"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Multibanco        AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "multibanco"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Mybank            AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "mybank"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Paybybank         AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "paybybank"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Payconiq          AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "payconiq"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Paypal            AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "paypal"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Paysafecard       AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "paysafecard"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Przelewy24        AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "przelewy24"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Riverty           AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "riverty"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Satispay          AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "satispay"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Podiumcadeaukaart AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "podiumcadeaukaart"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Pointofsale       AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "pointofsale"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Sofort            AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "sofort"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Swish             AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "swish"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Trustly           AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "trustly"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Twint             AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "twint"
	AvailableBalanceImmediatelyAvailableSubtotalMethod2Voucher           AvailableBalanceImmediatelyAvailableSubtotalMethod2 = "voucher"
)

func (e AvailableBalanceImmediatelyAvailableSubtotalMethod2) ToPointer() *AvailableBalanceImmediatelyAvailableSubtotalMethod2 {
	return &e
}
func (e *AvailableBalanceImmediatelyAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = AvailableBalanceImmediatelyAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceImmediatelyAvailableSubtotalMethod2: %v", v)
	}
}

// AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2 string

const (
	AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2Amex          AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2 = "amex"
	AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2Maestro       AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2 = "maestro"
	AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2CarteBancaire AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2 = "carte-bancaire"
	AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2Other         AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2 = "other"
)

func (e AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2) ToPointer() *AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2: %v", v)
	}
}

// AvailableBalanceImmediatelyAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type AvailableBalanceImmediatelyAvailableSubtotalCardAudience2 string

const (
	AvailableBalanceImmediatelyAvailableSubtotalCardAudience2Corporate AvailableBalanceImmediatelyAvailableSubtotalCardAudience2 = "corporate"
	AvailableBalanceImmediatelyAvailableSubtotalCardAudience2Other     AvailableBalanceImmediatelyAvailableSubtotalCardAudience2 = "other"
)

func (e AvailableBalanceImmediatelyAvailableSubtotalCardAudience2) ToPointer() *AvailableBalanceImmediatelyAvailableSubtotalCardAudience2 {
	return &e
}
func (e *AvailableBalanceImmediatelyAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = AvailableBalanceImmediatelyAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceImmediatelyAvailableSubtotalCardAudience2: %v", v)
	}
}

// AvailableBalanceImmediatelyAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type AvailableBalanceImmediatelyAvailableSubtotalCardRegion2 string

const (
	AvailableBalanceImmediatelyAvailableSubtotalCardRegion2IntraEea AvailableBalanceImmediatelyAvailableSubtotalCardRegion2 = "intra-eea"
	AvailableBalanceImmediatelyAvailableSubtotalCardRegion2IntraEu  AvailableBalanceImmediatelyAvailableSubtotalCardRegion2 = "intra-eu"
	AvailableBalanceImmediatelyAvailableSubtotalCardRegion2Domestic AvailableBalanceImmediatelyAvailableSubtotalCardRegion2 = "domestic"
	AvailableBalanceImmediatelyAvailableSubtotalCardRegion2Other    AvailableBalanceImmediatelyAvailableSubtotalCardRegion2 = "other"
)

func (e AvailableBalanceImmediatelyAvailableSubtotalCardRegion2) ToPointer() *AvailableBalanceImmediatelyAvailableSubtotalCardRegion2 {
	return &e
}
func (e *AvailableBalanceImmediatelyAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = AvailableBalanceImmediatelyAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceImmediatelyAvailableSubtotalCardRegion2: %v", v)
	}
}

// AvailableBalanceImmediatelyAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type AvailableBalanceImmediatelyAvailableSubtotalFeeType2 string

const (
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2PaymentFee                                        AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "payment-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2DirectDebitFailureFee                             AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2PartnerCommission                                 AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "partner-commission"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2ApplicationFee                                    AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "application-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2CaptureFee                                        AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "capture-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2RefundFee                                         AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "refund-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2ChargebackFee                                     AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "chargeback-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2PaymentNotificationFee                            AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "payment-notification-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2TransferNotificationFee                           AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "transfer-notification-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2PayoutFee                                         AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "payout-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2FeeDiscount                                       AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "fee-discount"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2FeeReimbursement                                  AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "fee-reimbursement"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2PlatformVolumeFee                                 AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "platform-volume-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2BalanceChargeFee                                  AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "balance-charge-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2TerminalMonthlyFee                                AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2AcceptanceRiskFee                                 AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2TopUpFee                                          AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "top-up-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2PaymentGatewayFee                                 AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "payment-gateway-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	AvailableBalanceImmediatelyAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           AvailableBalanceImmediatelyAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e AvailableBalanceImmediatelyAvailableSubtotalFeeType2) ToPointer() *AvailableBalanceImmediatelyAvailableSubtotalFeeType2 {
	return &e
}
func (e *AvailableBalanceImmediatelyAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = AvailableBalanceImmediatelyAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceImmediatelyAvailableSubtotalFeeType2: %v", v)
	}
}

// AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2 string

const (
	AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2Fee                     AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee"
	AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2FeeReimbursement        AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2FeeDiscount             AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2FeeVat                  AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2) ToPointer() *AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 - Represents the transaction type
type AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 string

const (
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2Payment                           AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "payment"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2SplitPayment                      AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "split-payment"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2FailedPayment                     AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "failed-payment"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2FailedPlatformSplitPayment        AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2Capture                           AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "capture"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2SplitTransaction                  AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "split-transaction"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2Refund                            AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "refund"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2PlatformPaymentRefund             AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-refund"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2RefundCompensation                AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "refund-compensation"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2ReturnedRefundCompensation        AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2ReturnedRefund                    AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "returned-refund"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2Chargeback                        AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "chargeback"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2ChargebackReversal                AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "chargeback-reversal"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2ChargebackCompensation            AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "chargeback-compensation"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2ReversedChargebackCompensation    AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2PlatformPaymentChargeback         AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2FeePrepayment                     AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "fee-prepayment"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2OutgoingTransfer                  AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "outgoing-transfer"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2IncomingTransfer                  AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "incoming-transfer"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2CanceledTransfer                  AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "canceled-transfer"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2ReturnedTransfer                  AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "returned-transfer"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2BalanceReserve                    AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2BalanceReserveReturn              AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve-return"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2InvoiceRoundingCompensation       AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2RollingReserveHold                AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2RollingReserveRelease             AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2BalanceCorrection                 AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "balance-correction"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2Repayment                         AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "repayment"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2Loan                              AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "loan"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2BalanceTopup                      AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "balance-topup"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2CashCollateralIssuance            AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2CashCollateralRelease             AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-release"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2PendingRollingReserve             AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2HeldRollingReserve                AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	AvailableBalanceImmediatelyAvailableSubtotalTransactionType2ReleasedRollingReserve            AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e AvailableBalanceImmediatelyAvailableSubtotalTransactionType2) ToPointer() *AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 {
	return &e
}
func (e *AvailableBalanceImmediatelyAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = AvailableBalanceImmediatelyAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceImmediatelyAvailableSubtotalTransactionType2: %v", v)
	}
}

type AvailableBalanceImmediatelyAvailableSubtotal2 struct {
	SubTotals []AvailableBalanceImmediatelyAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *AvailableBalanceImmediatelyAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *AvailableBalanceImmediatelyAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *AvailableBalanceImmediatelyAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *AvailableBalanceImmediatelyAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *AvailableBalanceImmediatelyAvailableSubtotal2) GetSubTotals() []AvailableBalanceImmediatelyAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *AvailableBalanceImmediatelyAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *AvailableBalanceImmediatelyAvailableSubtotal2) GetMethod() *AvailableBalanceImmediatelyAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *AvailableBalanceImmediatelyAvailableSubtotal2) GetCardIssuer() *AvailableBalanceImmediatelyAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *AvailableBalanceImmediatelyAvailableSubtotal2) GetCardAudience() *AvailableBalanceImmediatelyAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *AvailableBalanceImmediatelyAvailableSubtotal2) GetCardRegion() *AvailableBalanceImmediatelyAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *AvailableBalanceImmediatelyAvailableSubtotal2) GetFeeType() *AvailableBalanceImmediatelyAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *AvailableBalanceImmediatelyAvailableSubtotal2) GetPrepaymentPartType() *AvailableBalanceImmediatelyAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *AvailableBalanceImmediatelyAvailableSubtotal2) GetTransactionType() *AvailableBalanceImmediatelyAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type AvailableBalanceImmediatelyAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *AvailableBalanceImmediatelyAvailableAmount     `json:"amount,omitempty"`
	Subtotals []AvailableBalanceImmediatelyAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *AvailableBalanceImmediatelyAvailable) GetAmount() *AvailableBalanceImmediatelyAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *AvailableBalanceImmediatelyAvailable) GetSubtotals() []AvailableBalanceImmediatelyAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// AvailableBalanceCloseAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type AvailableBalanceCloseAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *AvailableBalanceCloseAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *AvailableBalanceCloseAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// AvailableBalanceCloseSubTotalMethod1 - Payment type of the transactions
type AvailableBalanceCloseSubTotalMethod1 string

const (
	AvailableBalanceCloseSubTotalMethod1Alma              AvailableBalanceCloseSubTotalMethod1 = "alma"
	AvailableBalanceCloseSubTotalMethod1Bacs              AvailableBalanceCloseSubTotalMethod1 = "bacs"
	AvailableBalanceCloseSubTotalMethod1Applepay          AvailableBalanceCloseSubTotalMethod1 = "applepay"
	AvailableBalanceCloseSubTotalMethod1Bancomatpay       AvailableBalanceCloseSubTotalMethod1 = "bancomatpay"
	AvailableBalanceCloseSubTotalMethod1Bancontact        AvailableBalanceCloseSubTotalMethod1 = "bancontact"
	AvailableBalanceCloseSubTotalMethod1Banktransfer      AvailableBalanceCloseSubTotalMethod1 = "banktransfer"
	AvailableBalanceCloseSubTotalMethod1Belfius           AvailableBalanceCloseSubTotalMethod1 = "belfius"
	AvailableBalanceCloseSubTotalMethod1Billie            AvailableBalanceCloseSubTotalMethod1 = "billie"
	AvailableBalanceCloseSubTotalMethod1Bizum             AvailableBalanceCloseSubTotalMethod1 = "bizum"
	AvailableBalanceCloseSubTotalMethod1Bitcoin           AvailableBalanceCloseSubTotalMethod1 = "bitcoin"
	AvailableBalanceCloseSubTotalMethod1Blik              AvailableBalanceCloseSubTotalMethod1 = "blik"
	AvailableBalanceCloseSubTotalMethod1Creditcard        AvailableBalanceCloseSubTotalMethod1 = "creditcard"
	AvailableBalanceCloseSubTotalMethod1Directdebit       AvailableBalanceCloseSubTotalMethod1 = "directdebit"
	AvailableBalanceCloseSubTotalMethod1Eps               AvailableBalanceCloseSubTotalMethod1 = "eps"
	AvailableBalanceCloseSubTotalMethod1Giftcard          AvailableBalanceCloseSubTotalMethod1 = "giftcard"
	AvailableBalanceCloseSubTotalMethod1Giropay           AvailableBalanceCloseSubTotalMethod1 = "giropay"
	AvailableBalanceCloseSubTotalMethod1Googlepay         AvailableBalanceCloseSubTotalMethod1 = "googlepay"
	AvailableBalanceCloseSubTotalMethod1Ideal             AvailableBalanceCloseSubTotalMethod1 = "ideal"
	AvailableBalanceCloseSubTotalMethod1In3               AvailableBalanceCloseSubTotalMethod1 = "in3"
	AvailableBalanceCloseSubTotalMethod1Inghomepay        AvailableBalanceCloseSubTotalMethod1 = "inghomepay"
	AvailableBalanceCloseSubTotalMethod1Kbc               AvailableBalanceCloseSubTotalMethod1 = "kbc"
	AvailableBalanceCloseSubTotalMethod1Klarnapaylater    AvailableBalanceCloseSubTotalMethod1 = "klarnapaylater"
	AvailableBalanceCloseSubTotalMethod1Klarnapaynow      AvailableBalanceCloseSubTotalMethod1 = "klarnapaynow"
	AvailableBalanceCloseSubTotalMethod1Klarnasliceit     AvailableBalanceCloseSubTotalMethod1 = "klarnasliceit"
	AvailableBalanceCloseSubTotalMethod1Klarna            AvailableBalanceCloseSubTotalMethod1 = "klarna"
	AvailableBalanceCloseSubTotalMethod1Mbway             AvailableBalanceCloseSubTotalMethod1 = "mbway"
	AvailableBalanceCloseSubTotalMethod1Multibanco        AvailableBalanceCloseSubTotalMethod1 = "multibanco"
	AvailableBalanceCloseSubTotalMethod1Mybank            AvailableBalanceCloseSubTotalMethod1 = "mybank"
	AvailableBalanceCloseSubTotalMethod1Paybybank         AvailableBalanceCloseSubTotalMethod1 = "paybybank"
	AvailableBalanceCloseSubTotalMethod1Payconiq          AvailableBalanceCloseSubTotalMethod1 = "payconiq"
	AvailableBalanceCloseSubTotalMethod1Paypal            AvailableBalanceCloseSubTotalMethod1 = "paypal"
	AvailableBalanceCloseSubTotalMethod1Paysafecard       AvailableBalanceCloseSubTotalMethod1 = "paysafecard"
	AvailableBalanceCloseSubTotalMethod1Przelewy24        AvailableBalanceCloseSubTotalMethod1 = "przelewy24"
	AvailableBalanceCloseSubTotalMethod1Riverty           AvailableBalanceCloseSubTotalMethod1 = "riverty"
	AvailableBalanceCloseSubTotalMethod1Satispay          AvailableBalanceCloseSubTotalMethod1 = "satispay"
	AvailableBalanceCloseSubTotalMethod1Podiumcadeaukaart AvailableBalanceCloseSubTotalMethod1 = "podiumcadeaukaart"
	AvailableBalanceCloseSubTotalMethod1Pointofsale       AvailableBalanceCloseSubTotalMethod1 = "pointofsale"
	AvailableBalanceCloseSubTotalMethod1Sofort            AvailableBalanceCloseSubTotalMethod1 = "sofort"
	AvailableBalanceCloseSubTotalMethod1Swish             AvailableBalanceCloseSubTotalMethod1 = "swish"
	AvailableBalanceCloseSubTotalMethod1Trustly           AvailableBalanceCloseSubTotalMethod1 = "trustly"
	AvailableBalanceCloseSubTotalMethod1Twint             AvailableBalanceCloseSubTotalMethod1 = "twint"
	AvailableBalanceCloseSubTotalMethod1Voucher           AvailableBalanceCloseSubTotalMethod1 = "voucher"
)

func (e AvailableBalanceCloseSubTotalMethod1) ToPointer() *AvailableBalanceCloseSubTotalMethod1 {
	return &e
}
func (e *AvailableBalanceCloseSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = AvailableBalanceCloseSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceCloseSubTotalMethod1: %v", v)
	}
}

// AvailableBalanceCloseSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type AvailableBalanceCloseSubTotalCardIssuer1 string

const (
	AvailableBalanceCloseSubTotalCardIssuer1Amex          AvailableBalanceCloseSubTotalCardIssuer1 = "amex"
	AvailableBalanceCloseSubTotalCardIssuer1Maestro       AvailableBalanceCloseSubTotalCardIssuer1 = "maestro"
	AvailableBalanceCloseSubTotalCardIssuer1CarteBancaire AvailableBalanceCloseSubTotalCardIssuer1 = "carte-bancaire"
	AvailableBalanceCloseSubTotalCardIssuer1Other         AvailableBalanceCloseSubTotalCardIssuer1 = "other"
)

func (e AvailableBalanceCloseSubTotalCardIssuer1) ToPointer() *AvailableBalanceCloseSubTotalCardIssuer1 {
	return &e
}
func (e *AvailableBalanceCloseSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = AvailableBalanceCloseSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceCloseSubTotalCardIssuer1: %v", v)
	}
}

// AvailableBalanceCloseSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type AvailableBalanceCloseSubTotalCardAudience1 string

const (
	AvailableBalanceCloseSubTotalCardAudience1Corporate AvailableBalanceCloseSubTotalCardAudience1 = "corporate"
	AvailableBalanceCloseSubTotalCardAudience1Other     AvailableBalanceCloseSubTotalCardAudience1 = "other"
)

func (e AvailableBalanceCloseSubTotalCardAudience1) ToPointer() *AvailableBalanceCloseSubTotalCardAudience1 {
	return &e
}
func (e *AvailableBalanceCloseSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = AvailableBalanceCloseSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceCloseSubTotalCardAudience1: %v", v)
	}
}

// AvailableBalanceCloseSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type AvailableBalanceCloseSubTotalCardRegion1 string

const (
	AvailableBalanceCloseSubTotalCardRegion1IntraEea AvailableBalanceCloseSubTotalCardRegion1 = "intra-eea"
	AvailableBalanceCloseSubTotalCardRegion1IntraEu  AvailableBalanceCloseSubTotalCardRegion1 = "intra-eu"
	AvailableBalanceCloseSubTotalCardRegion1Domestic AvailableBalanceCloseSubTotalCardRegion1 = "domestic"
	AvailableBalanceCloseSubTotalCardRegion1Other    AvailableBalanceCloseSubTotalCardRegion1 = "other"
)

func (e AvailableBalanceCloseSubTotalCardRegion1) ToPointer() *AvailableBalanceCloseSubTotalCardRegion1 {
	return &e
}
func (e *AvailableBalanceCloseSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = AvailableBalanceCloseSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceCloseSubTotalCardRegion1: %v", v)
	}
}

// AvailableBalanceCloseSubTotalFeeType1 - Present when the transaction represents a fee.
type AvailableBalanceCloseSubTotalFeeType1 string

const (
	AvailableBalanceCloseSubTotalFeeType1PaymentFee                                        AvailableBalanceCloseSubTotalFeeType1 = "payment-fee"
	AvailableBalanceCloseSubTotalFeeType1DirectDebitFailureFee                             AvailableBalanceCloseSubTotalFeeType1 = "direct-debit-failure-fee"
	AvailableBalanceCloseSubTotalFeeType1UnauthorizedDirectDebitFee                        AvailableBalanceCloseSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	AvailableBalanceCloseSubTotalFeeType1BankChargedDirectDebitFailureFee                  AvailableBalanceCloseSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	AvailableBalanceCloseSubTotalFeeType1PartnerCommission                                 AvailableBalanceCloseSubTotalFeeType1 = "partner-commission"
	AvailableBalanceCloseSubTotalFeeType1ApplicationFee                                    AvailableBalanceCloseSubTotalFeeType1 = "application-fee"
	AvailableBalanceCloseSubTotalFeeType1CaptureFee                                        AvailableBalanceCloseSubTotalFeeType1 = "capture-fee"
	AvailableBalanceCloseSubTotalFeeType1RefundFee                                         AvailableBalanceCloseSubTotalFeeType1 = "refund-fee"
	AvailableBalanceCloseSubTotalFeeType1ChargebackFee                                     AvailableBalanceCloseSubTotalFeeType1 = "chargeback-fee"
	AvailableBalanceCloseSubTotalFeeType1PaymentNotificationFee                            AvailableBalanceCloseSubTotalFeeType1 = "payment-notification-fee"
	AvailableBalanceCloseSubTotalFeeType1TransferNotificationFee                           AvailableBalanceCloseSubTotalFeeType1 = "transfer-notification-fee"
	AvailableBalanceCloseSubTotalFeeType1PayoutFee                                         AvailableBalanceCloseSubTotalFeeType1 = "payout-fee"
	AvailableBalanceCloseSubTotalFeeType1FeeDiscount                                       AvailableBalanceCloseSubTotalFeeType1 = "fee-discount"
	AvailableBalanceCloseSubTotalFeeType1FeeReimbursement                                  AvailableBalanceCloseSubTotalFeeType1 = "fee-reimbursement"
	AvailableBalanceCloseSubTotalFeeType1PlatformVolumeFee                                 AvailableBalanceCloseSubTotalFeeType1 = "platform-volume-fee"
	AvailableBalanceCloseSubTotalFeeType1PlatformConnectedOrganizationsFee                 AvailableBalanceCloseSubTotalFeeType1 = "platform-connected-organizations-fee"
	AvailableBalanceCloseSubTotalFeeType1BalanceChargeFee                                  AvailableBalanceCloseSubTotalFeeType1 = "balance-charge-fee"
	AvailableBalanceCloseSubTotalFeeType1ThreedsAuthenticationAttemptFee                   AvailableBalanceCloseSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	AvailableBalanceCloseSubTotalFeeType1TerminalMonthlyFee                                AvailableBalanceCloseSubTotalFeeType1 = "terminal-monthly-fee"
	AvailableBalanceCloseSubTotalFeeType1AcceptanceRiskFee                                 AvailableBalanceCloseSubTotalFeeType1 = "acceptance-risk-fee"
	AvailableBalanceCloseSubTotalFeeType1TopUpFee                                          AvailableBalanceCloseSubTotalFeeType1 = "top-up-fee"
	AvailableBalanceCloseSubTotalFeeType1PaymentGatewayFee                                 AvailableBalanceCloseSubTotalFeeType1 = "payment-gateway-fee"
	AvailableBalanceCloseSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   AvailableBalanceCloseSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	AvailableBalanceCloseSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee AvailableBalanceCloseSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	AvailableBalanceCloseSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             AvailableBalanceCloseSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	AvailableBalanceCloseSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           AvailableBalanceCloseSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	AvailableBalanceCloseSubTotalFeeType1MinimumInvoiceAmountFee                           AvailableBalanceCloseSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e AvailableBalanceCloseSubTotalFeeType1) ToPointer() *AvailableBalanceCloseSubTotalFeeType1 {
	return &e
}
func (e *AvailableBalanceCloseSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = AvailableBalanceCloseSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceCloseSubTotalFeeType1: %v", v)
	}
}

// AvailableBalanceCloseSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type AvailableBalanceCloseSubTotalPrepaymentPartType1 string

const (
	AvailableBalanceCloseSubTotalPrepaymentPartType1Fee                     AvailableBalanceCloseSubTotalPrepaymentPartType1 = "fee"
	AvailableBalanceCloseSubTotalPrepaymentPartType1FeeReimbursement        AvailableBalanceCloseSubTotalPrepaymentPartType1 = "fee-reimbursement"
	AvailableBalanceCloseSubTotalPrepaymentPartType1FeeDiscount             AvailableBalanceCloseSubTotalPrepaymentPartType1 = "fee-discount"
	AvailableBalanceCloseSubTotalPrepaymentPartType1FeeVat                  AvailableBalanceCloseSubTotalPrepaymentPartType1 = "fee-vat"
	AvailableBalanceCloseSubTotalPrepaymentPartType1FeeRoundingCompensation AvailableBalanceCloseSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e AvailableBalanceCloseSubTotalPrepaymentPartType1) ToPointer() *AvailableBalanceCloseSubTotalPrepaymentPartType1 {
	return &e
}
func (e *AvailableBalanceCloseSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = AvailableBalanceCloseSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceCloseSubTotalPrepaymentPartType1: %v", v)
	}
}

// AvailableBalanceCloseSubTotalTransactionType1 - Represents the transaction type
type AvailableBalanceCloseSubTotalTransactionType1 string

const (
	AvailableBalanceCloseSubTotalTransactionType1Payment                           AvailableBalanceCloseSubTotalTransactionType1 = "payment"
	AvailableBalanceCloseSubTotalTransactionType1SplitPayment                      AvailableBalanceCloseSubTotalTransactionType1 = "split-payment"
	AvailableBalanceCloseSubTotalTransactionType1FailedPayment                     AvailableBalanceCloseSubTotalTransactionType1 = "failed-payment"
	AvailableBalanceCloseSubTotalTransactionType1FailedPlatformSplitPayment        AvailableBalanceCloseSubTotalTransactionType1 = "failed-platform-split-payment"
	AvailableBalanceCloseSubTotalTransactionType1FailedSplitPaymentCompensation    AvailableBalanceCloseSubTotalTransactionType1 = "failed-split-payment-compensation"
	AvailableBalanceCloseSubTotalTransactionType1Capture                           AvailableBalanceCloseSubTotalTransactionType1 = "capture"
	AvailableBalanceCloseSubTotalTransactionType1SplitTransaction                  AvailableBalanceCloseSubTotalTransactionType1 = "split-transaction"
	AvailableBalanceCloseSubTotalTransactionType1Refund                            AvailableBalanceCloseSubTotalTransactionType1 = "refund"
	AvailableBalanceCloseSubTotalTransactionType1PlatformPaymentRefund             AvailableBalanceCloseSubTotalTransactionType1 = "platform-payment-refund"
	AvailableBalanceCloseSubTotalTransactionType1ReturnedPlatformPaymentRefund     AvailableBalanceCloseSubTotalTransactionType1 = "returned-platform-payment-refund"
	AvailableBalanceCloseSubTotalTransactionType1RefundCompensation                AvailableBalanceCloseSubTotalTransactionType1 = "refund-compensation"
	AvailableBalanceCloseSubTotalTransactionType1ReturnedRefundCompensation        AvailableBalanceCloseSubTotalTransactionType1 = "returned-refund-compensation"
	AvailableBalanceCloseSubTotalTransactionType1ReturnedRefund                    AvailableBalanceCloseSubTotalTransactionType1 = "returned-refund"
	AvailableBalanceCloseSubTotalTransactionType1Chargeback                        AvailableBalanceCloseSubTotalTransactionType1 = "chargeback"
	AvailableBalanceCloseSubTotalTransactionType1ChargebackReversal                AvailableBalanceCloseSubTotalTransactionType1 = "chargeback-reversal"
	AvailableBalanceCloseSubTotalTransactionType1ChargebackCompensation            AvailableBalanceCloseSubTotalTransactionType1 = "chargeback-compensation"
	AvailableBalanceCloseSubTotalTransactionType1ReversedChargebackCompensation    AvailableBalanceCloseSubTotalTransactionType1 = "reversed-chargeback-compensation"
	AvailableBalanceCloseSubTotalTransactionType1PlatformPaymentChargeback         AvailableBalanceCloseSubTotalTransactionType1 = "platform-payment-chargeback"
	AvailableBalanceCloseSubTotalTransactionType1ReversedPlatformPaymentChargeback AvailableBalanceCloseSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	AvailableBalanceCloseSubTotalTransactionType1FeePrepayment                     AvailableBalanceCloseSubTotalTransactionType1 = "fee-prepayment"
	AvailableBalanceCloseSubTotalTransactionType1OutgoingTransfer                  AvailableBalanceCloseSubTotalTransactionType1 = "outgoing-transfer"
	AvailableBalanceCloseSubTotalTransactionType1IncomingTransfer                  AvailableBalanceCloseSubTotalTransactionType1 = "incoming-transfer"
	AvailableBalanceCloseSubTotalTransactionType1CanceledTransfer                  AvailableBalanceCloseSubTotalTransactionType1 = "canceled-transfer"
	AvailableBalanceCloseSubTotalTransactionType1ReturnedTransfer                  AvailableBalanceCloseSubTotalTransactionType1 = "returned-transfer"
	AvailableBalanceCloseSubTotalTransactionType1BalanceReserve                    AvailableBalanceCloseSubTotalTransactionType1 = "balance-reserve"
	AvailableBalanceCloseSubTotalTransactionType1BalanceReserveReturn              AvailableBalanceCloseSubTotalTransactionType1 = "balance-reserve-return"
	AvailableBalanceCloseSubTotalTransactionType1InvoiceRoundingCompensation       AvailableBalanceCloseSubTotalTransactionType1 = "invoice-rounding-compensation"
	AvailableBalanceCloseSubTotalTransactionType1RollingReserveHold                AvailableBalanceCloseSubTotalTransactionType1 = "rolling-reserve-hold"
	AvailableBalanceCloseSubTotalTransactionType1RollingReserveRelease             AvailableBalanceCloseSubTotalTransactionType1 = "rolling-reserve-release"
	AvailableBalanceCloseSubTotalTransactionType1BalanceCorrection                 AvailableBalanceCloseSubTotalTransactionType1 = "balance-correction"
	AvailableBalanceCloseSubTotalTransactionType1Repayment                         AvailableBalanceCloseSubTotalTransactionType1 = "repayment"
	AvailableBalanceCloseSubTotalTransactionType1Loan                              AvailableBalanceCloseSubTotalTransactionType1 = "loan"
	AvailableBalanceCloseSubTotalTransactionType1BalanceTopup                      AvailableBalanceCloseSubTotalTransactionType1 = "balance-topup"
	AvailableBalanceCloseSubTotalTransactionType1CashCollateralIssuance            AvailableBalanceCloseSubTotalTransactionType1 = "cash-collateral-issuance';"
	AvailableBalanceCloseSubTotalTransactionType1CashCollateralRelease             AvailableBalanceCloseSubTotalTransactionType1 = "cash-collateral-release"
	AvailableBalanceCloseSubTotalTransactionType1PendingRollingReserve             AvailableBalanceCloseSubTotalTransactionType1 = "pending-rolling-reserve"
	AvailableBalanceCloseSubTotalTransactionType1ToBeReleasedRollingReserve        AvailableBalanceCloseSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	AvailableBalanceCloseSubTotalTransactionType1HeldRollingReserve                AvailableBalanceCloseSubTotalTransactionType1 = "held-rolling-reserve"
	AvailableBalanceCloseSubTotalTransactionType1ReleasedRollingReserve            AvailableBalanceCloseSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e AvailableBalanceCloseSubTotalTransactionType1) ToPointer() *AvailableBalanceCloseSubTotalTransactionType1 {
	return &e
}
func (e *AvailableBalanceCloseSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = AvailableBalanceCloseSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceCloseSubTotalTransactionType1: %v", v)
	}
}

type AvailableBalanceCloseSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *AvailableBalanceCloseSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *AvailableBalanceCloseSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *AvailableBalanceCloseSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *AvailableBalanceCloseSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *AvailableBalanceCloseSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *AvailableBalanceCloseSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *AvailableBalanceCloseSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *AvailableBalanceCloseSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *AvailableBalanceCloseSubTotal1) GetMethod() *AvailableBalanceCloseSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *AvailableBalanceCloseSubTotal1) GetCardIssuer() *AvailableBalanceCloseSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *AvailableBalanceCloseSubTotal1) GetCardAudience() *AvailableBalanceCloseSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *AvailableBalanceCloseSubTotal1) GetCardRegion() *AvailableBalanceCloseSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *AvailableBalanceCloseSubTotal1) GetFeeType() *AvailableBalanceCloseSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *AvailableBalanceCloseSubTotal1) GetPrepaymentPartType() *AvailableBalanceCloseSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *AvailableBalanceCloseSubTotal1) GetTransactionType() *AvailableBalanceCloseSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// AvailableBalanceCloseSubtotalMethod2 - Payment type of the transactions
type AvailableBalanceCloseSubtotalMethod2 string

const (
	AvailableBalanceCloseSubtotalMethod2Alma              AvailableBalanceCloseSubtotalMethod2 = "alma"
	AvailableBalanceCloseSubtotalMethod2Bacs              AvailableBalanceCloseSubtotalMethod2 = "bacs"
	AvailableBalanceCloseSubtotalMethod2Applepay          AvailableBalanceCloseSubtotalMethod2 = "applepay"
	AvailableBalanceCloseSubtotalMethod2Bancomatpay       AvailableBalanceCloseSubtotalMethod2 = "bancomatpay"
	AvailableBalanceCloseSubtotalMethod2Bancontact        AvailableBalanceCloseSubtotalMethod2 = "bancontact"
	AvailableBalanceCloseSubtotalMethod2Banktransfer      AvailableBalanceCloseSubtotalMethod2 = "banktransfer"
	AvailableBalanceCloseSubtotalMethod2Belfius           AvailableBalanceCloseSubtotalMethod2 = "belfius"
	AvailableBalanceCloseSubtotalMethod2Billie            AvailableBalanceCloseSubtotalMethod2 = "billie"
	AvailableBalanceCloseSubtotalMethod2Bizum             AvailableBalanceCloseSubtotalMethod2 = "bizum"
	AvailableBalanceCloseSubtotalMethod2Bitcoin           AvailableBalanceCloseSubtotalMethod2 = "bitcoin"
	AvailableBalanceCloseSubtotalMethod2Blik              AvailableBalanceCloseSubtotalMethod2 = "blik"
	AvailableBalanceCloseSubtotalMethod2Creditcard        AvailableBalanceCloseSubtotalMethod2 = "creditcard"
	AvailableBalanceCloseSubtotalMethod2Directdebit       AvailableBalanceCloseSubtotalMethod2 = "directdebit"
	AvailableBalanceCloseSubtotalMethod2Eps               AvailableBalanceCloseSubtotalMethod2 = "eps"
	AvailableBalanceCloseSubtotalMethod2Giftcard          AvailableBalanceCloseSubtotalMethod2 = "giftcard"
	AvailableBalanceCloseSubtotalMethod2Giropay           AvailableBalanceCloseSubtotalMethod2 = "giropay"
	AvailableBalanceCloseSubtotalMethod2Googlepay         AvailableBalanceCloseSubtotalMethod2 = "googlepay"
	AvailableBalanceCloseSubtotalMethod2Ideal             AvailableBalanceCloseSubtotalMethod2 = "ideal"
	AvailableBalanceCloseSubtotalMethod2In3               AvailableBalanceCloseSubtotalMethod2 = "in3"
	AvailableBalanceCloseSubtotalMethod2Inghomepay        AvailableBalanceCloseSubtotalMethod2 = "inghomepay"
	AvailableBalanceCloseSubtotalMethod2Kbc               AvailableBalanceCloseSubtotalMethod2 = "kbc"
	AvailableBalanceCloseSubtotalMethod2Klarnapaylater    AvailableBalanceCloseSubtotalMethod2 = "klarnapaylater"
	AvailableBalanceCloseSubtotalMethod2Klarnapaynow      AvailableBalanceCloseSubtotalMethod2 = "klarnapaynow"
	AvailableBalanceCloseSubtotalMethod2Klarnasliceit     AvailableBalanceCloseSubtotalMethod2 = "klarnasliceit"
	AvailableBalanceCloseSubtotalMethod2Klarna            AvailableBalanceCloseSubtotalMethod2 = "klarna"
	AvailableBalanceCloseSubtotalMethod2Mbway             AvailableBalanceCloseSubtotalMethod2 = "mbway"
	AvailableBalanceCloseSubtotalMethod2Multibanco        AvailableBalanceCloseSubtotalMethod2 = "multibanco"
	AvailableBalanceCloseSubtotalMethod2Mybank            AvailableBalanceCloseSubtotalMethod2 = "mybank"
	AvailableBalanceCloseSubtotalMethod2Paybybank         AvailableBalanceCloseSubtotalMethod2 = "paybybank"
	AvailableBalanceCloseSubtotalMethod2Payconiq          AvailableBalanceCloseSubtotalMethod2 = "payconiq"
	AvailableBalanceCloseSubtotalMethod2Paypal            AvailableBalanceCloseSubtotalMethod2 = "paypal"
	AvailableBalanceCloseSubtotalMethod2Paysafecard       AvailableBalanceCloseSubtotalMethod2 = "paysafecard"
	AvailableBalanceCloseSubtotalMethod2Przelewy24        AvailableBalanceCloseSubtotalMethod2 = "przelewy24"
	AvailableBalanceCloseSubtotalMethod2Riverty           AvailableBalanceCloseSubtotalMethod2 = "riverty"
	AvailableBalanceCloseSubtotalMethod2Satispay          AvailableBalanceCloseSubtotalMethod2 = "satispay"
	AvailableBalanceCloseSubtotalMethod2Podiumcadeaukaart AvailableBalanceCloseSubtotalMethod2 = "podiumcadeaukaart"
	AvailableBalanceCloseSubtotalMethod2Pointofsale       AvailableBalanceCloseSubtotalMethod2 = "pointofsale"
	AvailableBalanceCloseSubtotalMethod2Sofort            AvailableBalanceCloseSubtotalMethod2 = "sofort"
	AvailableBalanceCloseSubtotalMethod2Swish             AvailableBalanceCloseSubtotalMethod2 = "swish"
	AvailableBalanceCloseSubtotalMethod2Trustly           AvailableBalanceCloseSubtotalMethod2 = "trustly"
	AvailableBalanceCloseSubtotalMethod2Twint             AvailableBalanceCloseSubtotalMethod2 = "twint"
	AvailableBalanceCloseSubtotalMethod2Voucher           AvailableBalanceCloseSubtotalMethod2 = "voucher"
)

func (e AvailableBalanceCloseSubtotalMethod2) ToPointer() *AvailableBalanceCloseSubtotalMethod2 {
	return &e
}
func (e *AvailableBalanceCloseSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = AvailableBalanceCloseSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceCloseSubtotalMethod2: %v", v)
	}
}

// AvailableBalanceCloseSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type AvailableBalanceCloseSubtotalCardIssuer2 string

const (
	AvailableBalanceCloseSubtotalCardIssuer2Amex          AvailableBalanceCloseSubtotalCardIssuer2 = "amex"
	AvailableBalanceCloseSubtotalCardIssuer2Maestro       AvailableBalanceCloseSubtotalCardIssuer2 = "maestro"
	AvailableBalanceCloseSubtotalCardIssuer2CarteBancaire AvailableBalanceCloseSubtotalCardIssuer2 = "carte-bancaire"
	AvailableBalanceCloseSubtotalCardIssuer2Other         AvailableBalanceCloseSubtotalCardIssuer2 = "other"
)

func (e AvailableBalanceCloseSubtotalCardIssuer2) ToPointer() *AvailableBalanceCloseSubtotalCardIssuer2 {
	return &e
}
func (e *AvailableBalanceCloseSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = AvailableBalanceCloseSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceCloseSubtotalCardIssuer2: %v", v)
	}
}

// AvailableBalanceCloseSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type AvailableBalanceCloseSubtotalCardAudience2 string

const (
	AvailableBalanceCloseSubtotalCardAudience2Corporate AvailableBalanceCloseSubtotalCardAudience2 = "corporate"
	AvailableBalanceCloseSubtotalCardAudience2Other     AvailableBalanceCloseSubtotalCardAudience2 = "other"
)

func (e AvailableBalanceCloseSubtotalCardAudience2) ToPointer() *AvailableBalanceCloseSubtotalCardAudience2 {
	return &e
}
func (e *AvailableBalanceCloseSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = AvailableBalanceCloseSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceCloseSubtotalCardAudience2: %v", v)
	}
}

// AvailableBalanceCloseSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type AvailableBalanceCloseSubtotalCardRegion2 string

const (
	AvailableBalanceCloseSubtotalCardRegion2IntraEea AvailableBalanceCloseSubtotalCardRegion2 = "intra-eea"
	AvailableBalanceCloseSubtotalCardRegion2IntraEu  AvailableBalanceCloseSubtotalCardRegion2 = "intra-eu"
	AvailableBalanceCloseSubtotalCardRegion2Domestic AvailableBalanceCloseSubtotalCardRegion2 = "domestic"
	AvailableBalanceCloseSubtotalCardRegion2Other    AvailableBalanceCloseSubtotalCardRegion2 = "other"
)

func (e AvailableBalanceCloseSubtotalCardRegion2) ToPointer() *AvailableBalanceCloseSubtotalCardRegion2 {
	return &e
}
func (e *AvailableBalanceCloseSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = AvailableBalanceCloseSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceCloseSubtotalCardRegion2: %v", v)
	}
}

// AvailableBalanceCloseSubtotalFeeType2 - Present when the transaction represents a fee.
type AvailableBalanceCloseSubtotalFeeType2 string

const (
	AvailableBalanceCloseSubtotalFeeType2PaymentFee                                        AvailableBalanceCloseSubtotalFeeType2 = "payment-fee"
	AvailableBalanceCloseSubtotalFeeType2DirectDebitFailureFee                             AvailableBalanceCloseSubtotalFeeType2 = "direct-debit-failure-fee"
	AvailableBalanceCloseSubtotalFeeType2UnauthorizedDirectDebitFee                        AvailableBalanceCloseSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	AvailableBalanceCloseSubtotalFeeType2BankChargedDirectDebitFailureFee                  AvailableBalanceCloseSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	AvailableBalanceCloseSubtotalFeeType2PartnerCommission                                 AvailableBalanceCloseSubtotalFeeType2 = "partner-commission"
	AvailableBalanceCloseSubtotalFeeType2ApplicationFee                                    AvailableBalanceCloseSubtotalFeeType2 = "application-fee"
	AvailableBalanceCloseSubtotalFeeType2CaptureFee                                        AvailableBalanceCloseSubtotalFeeType2 = "capture-fee"
	AvailableBalanceCloseSubtotalFeeType2RefundFee                                         AvailableBalanceCloseSubtotalFeeType2 = "refund-fee"
	AvailableBalanceCloseSubtotalFeeType2ChargebackFee                                     AvailableBalanceCloseSubtotalFeeType2 = "chargeback-fee"
	AvailableBalanceCloseSubtotalFeeType2PaymentNotificationFee                            AvailableBalanceCloseSubtotalFeeType2 = "payment-notification-fee"
	AvailableBalanceCloseSubtotalFeeType2TransferNotificationFee                           AvailableBalanceCloseSubtotalFeeType2 = "transfer-notification-fee"
	AvailableBalanceCloseSubtotalFeeType2PayoutFee                                         AvailableBalanceCloseSubtotalFeeType2 = "payout-fee"
	AvailableBalanceCloseSubtotalFeeType2FeeDiscount                                       AvailableBalanceCloseSubtotalFeeType2 = "fee-discount"
	AvailableBalanceCloseSubtotalFeeType2FeeReimbursement                                  AvailableBalanceCloseSubtotalFeeType2 = "fee-reimbursement"
	AvailableBalanceCloseSubtotalFeeType2PlatformVolumeFee                                 AvailableBalanceCloseSubtotalFeeType2 = "platform-volume-fee"
	AvailableBalanceCloseSubtotalFeeType2PlatformConnectedOrganizationsFee                 AvailableBalanceCloseSubtotalFeeType2 = "platform-connected-organizations-fee"
	AvailableBalanceCloseSubtotalFeeType2BalanceChargeFee                                  AvailableBalanceCloseSubtotalFeeType2 = "balance-charge-fee"
	AvailableBalanceCloseSubtotalFeeType2ThreedsAuthenticationAttemptFee                   AvailableBalanceCloseSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	AvailableBalanceCloseSubtotalFeeType2TerminalMonthlyFee                                AvailableBalanceCloseSubtotalFeeType2 = "terminal-monthly-fee"
	AvailableBalanceCloseSubtotalFeeType2AcceptanceRiskFee                                 AvailableBalanceCloseSubtotalFeeType2 = "acceptance-risk-fee"
	AvailableBalanceCloseSubtotalFeeType2TopUpFee                                          AvailableBalanceCloseSubtotalFeeType2 = "top-up-fee"
	AvailableBalanceCloseSubtotalFeeType2PaymentGatewayFee                                 AvailableBalanceCloseSubtotalFeeType2 = "payment-gateway-fee"
	AvailableBalanceCloseSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   AvailableBalanceCloseSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	AvailableBalanceCloseSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee AvailableBalanceCloseSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	AvailableBalanceCloseSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             AvailableBalanceCloseSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	AvailableBalanceCloseSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           AvailableBalanceCloseSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	AvailableBalanceCloseSubtotalFeeType2MinimumInvoiceAmountFee                           AvailableBalanceCloseSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e AvailableBalanceCloseSubtotalFeeType2) ToPointer() *AvailableBalanceCloseSubtotalFeeType2 {
	return &e
}
func (e *AvailableBalanceCloseSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = AvailableBalanceCloseSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceCloseSubtotalFeeType2: %v", v)
	}
}

// AvailableBalanceCloseSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type AvailableBalanceCloseSubtotalPrepaymentPartType2 string

const (
	AvailableBalanceCloseSubtotalPrepaymentPartType2Fee                     AvailableBalanceCloseSubtotalPrepaymentPartType2 = "fee"
	AvailableBalanceCloseSubtotalPrepaymentPartType2FeeReimbursement        AvailableBalanceCloseSubtotalPrepaymentPartType2 = "fee-reimbursement"
	AvailableBalanceCloseSubtotalPrepaymentPartType2FeeDiscount             AvailableBalanceCloseSubtotalPrepaymentPartType2 = "fee-discount"
	AvailableBalanceCloseSubtotalPrepaymentPartType2FeeVat                  AvailableBalanceCloseSubtotalPrepaymentPartType2 = "fee-vat"
	AvailableBalanceCloseSubtotalPrepaymentPartType2FeeRoundingCompensation AvailableBalanceCloseSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e AvailableBalanceCloseSubtotalPrepaymentPartType2) ToPointer() *AvailableBalanceCloseSubtotalPrepaymentPartType2 {
	return &e
}
func (e *AvailableBalanceCloseSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = AvailableBalanceCloseSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceCloseSubtotalPrepaymentPartType2: %v", v)
	}
}

// AvailableBalanceCloseSubtotalTransactionType2 - Represents the transaction type
type AvailableBalanceCloseSubtotalTransactionType2 string

const (
	AvailableBalanceCloseSubtotalTransactionType2Payment                           AvailableBalanceCloseSubtotalTransactionType2 = "payment"
	AvailableBalanceCloseSubtotalTransactionType2SplitPayment                      AvailableBalanceCloseSubtotalTransactionType2 = "split-payment"
	AvailableBalanceCloseSubtotalTransactionType2FailedPayment                     AvailableBalanceCloseSubtotalTransactionType2 = "failed-payment"
	AvailableBalanceCloseSubtotalTransactionType2FailedPlatformSplitPayment        AvailableBalanceCloseSubtotalTransactionType2 = "failed-platform-split-payment"
	AvailableBalanceCloseSubtotalTransactionType2FailedSplitPaymentCompensation    AvailableBalanceCloseSubtotalTransactionType2 = "failed-split-payment-compensation"
	AvailableBalanceCloseSubtotalTransactionType2Capture                           AvailableBalanceCloseSubtotalTransactionType2 = "capture"
	AvailableBalanceCloseSubtotalTransactionType2SplitTransaction                  AvailableBalanceCloseSubtotalTransactionType2 = "split-transaction"
	AvailableBalanceCloseSubtotalTransactionType2Refund                            AvailableBalanceCloseSubtotalTransactionType2 = "refund"
	AvailableBalanceCloseSubtotalTransactionType2PlatformPaymentRefund             AvailableBalanceCloseSubtotalTransactionType2 = "platform-payment-refund"
	AvailableBalanceCloseSubtotalTransactionType2ReturnedPlatformPaymentRefund     AvailableBalanceCloseSubtotalTransactionType2 = "returned-platform-payment-refund"
	AvailableBalanceCloseSubtotalTransactionType2RefundCompensation                AvailableBalanceCloseSubtotalTransactionType2 = "refund-compensation"
	AvailableBalanceCloseSubtotalTransactionType2ReturnedRefundCompensation        AvailableBalanceCloseSubtotalTransactionType2 = "returned-refund-compensation"
	AvailableBalanceCloseSubtotalTransactionType2ReturnedRefund                    AvailableBalanceCloseSubtotalTransactionType2 = "returned-refund"
	AvailableBalanceCloseSubtotalTransactionType2Chargeback                        AvailableBalanceCloseSubtotalTransactionType2 = "chargeback"
	AvailableBalanceCloseSubtotalTransactionType2ChargebackReversal                AvailableBalanceCloseSubtotalTransactionType2 = "chargeback-reversal"
	AvailableBalanceCloseSubtotalTransactionType2ChargebackCompensation            AvailableBalanceCloseSubtotalTransactionType2 = "chargeback-compensation"
	AvailableBalanceCloseSubtotalTransactionType2ReversedChargebackCompensation    AvailableBalanceCloseSubtotalTransactionType2 = "reversed-chargeback-compensation"
	AvailableBalanceCloseSubtotalTransactionType2PlatformPaymentChargeback         AvailableBalanceCloseSubtotalTransactionType2 = "platform-payment-chargeback"
	AvailableBalanceCloseSubtotalTransactionType2ReversedPlatformPaymentChargeback AvailableBalanceCloseSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	AvailableBalanceCloseSubtotalTransactionType2FeePrepayment                     AvailableBalanceCloseSubtotalTransactionType2 = "fee-prepayment"
	AvailableBalanceCloseSubtotalTransactionType2OutgoingTransfer                  AvailableBalanceCloseSubtotalTransactionType2 = "outgoing-transfer"
	AvailableBalanceCloseSubtotalTransactionType2IncomingTransfer                  AvailableBalanceCloseSubtotalTransactionType2 = "incoming-transfer"
	AvailableBalanceCloseSubtotalTransactionType2CanceledTransfer                  AvailableBalanceCloseSubtotalTransactionType2 = "canceled-transfer"
	AvailableBalanceCloseSubtotalTransactionType2ReturnedTransfer                  AvailableBalanceCloseSubtotalTransactionType2 = "returned-transfer"
	AvailableBalanceCloseSubtotalTransactionType2BalanceReserve                    AvailableBalanceCloseSubtotalTransactionType2 = "balance-reserve"
	AvailableBalanceCloseSubtotalTransactionType2BalanceReserveReturn              AvailableBalanceCloseSubtotalTransactionType2 = "balance-reserve-return"
	AvailableBalanceCloseSubtotalTransactionType2InvoiceRoundingCompensation       AvailableBalanceCloseSubtotalTransactionType2 = "invoice-rounding-compensation"
	AvailableBalanceCloseSubtotalTransactionType2RollingReserveHold                AvailableBalanceCloseSubtotalTransactionType2 = "rolling-reserve-hold"
	AvailableBalanceCloseSubtotalTransactionType2RollingReserveRelease             AvailableBalanceCloseSubtotalTransactionType2 = "rolling-reserve-release"
	AvailableBalanceCloseSubtotalTransactionType2BalanceCorrection                 AvailableBalanceCloseSubtotalTransactionType2 = "balance-correction"
	AvailableBalanceCloseSubtotalTransactionType2Repayment                         AvailableBalanceCloseSubtotalTransactionType2 = "repayment"
	AvailableBalanceCloseSubtotalTransactionType2Loan                              AvailableBalanceCloseSubtotalTransactionType2 = "loan"
	AvailableBalanceCloseSubtotalTransactionType2BalanceTopup                      AvailableBalanceCloseSubtotalTransactionType2 = "balance-topup"
	AvailableBalanceCloseSubtotalTransactionType2CashCollateralIssuance            AvailableBalanceCloseSubtotalTransactionType2 = "cash-collateral-issuance';"
	AvailableBalanceCloseSubtotalTransactionType2CashCollateralRelease             AvailableBalanceCloseSubtotalTransactionType2 = "cash-collateral-release"
	AvailableBalanceCloseSubtotalTransactionType2PendingRollingReserve             AvailableBalanceCloseSubtotalTransactionType2 = "pending-rolling-reserve"
	AvailableBalanceCloseSubtotalTransactionType2ToBeReleasedRollingReserve        AvailableBalanceCloseSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	AvailableBalanceCloseSubtotalTransactionType2HeldRollingReserve                AvailableBalanceCloseSubtotalTransactionType2 = "held-rolling-reserve"
	AvailableBalanceCloseSubtotalTransactionType2ReleasedRollingReserve            AvailableBalanceCloseSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e AvailableBalanceCloseSubtotalTransactionType2) ToPointer() *AvailableBalanceCloseSubtotalTransactionType2 {
	return &e
}
func (e *AvailableBalanceCloseSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = AvailableBalanceCloseSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableBalanceCloseSubtotalTransactionType2: %v", v)
	}
}

type AvailableBalanceCloseSubtotal2 struct {
	SubTotals []AvailableBalanceCloseSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *AvailableBalanceCloseSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *AvailableBalanceCloseSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *AvailableBalanceCloseSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *AvailableBalanceCloseSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *AvailableBalanceCloseSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *AvailableBalanceCloseSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *AvailableBalanceCloseSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *AvailableBalanceCloseSubtotal2) GetSubTotals() []AvailableBalanceCloseSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *AvailableBalanceCloseSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *AvailableBalanceCloseSubtotal2) GetMethod() *AvailableBalanceCloseSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *AvailableBalanceCloseSubtotal2) GetCardIssuer() *AvailableBalanceCloseSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *AvailableBalanceCloseSubtotal2) GetCardAudience() *AvailableBalanceCloseSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *AvailableBalanceCloseSubtotal2) GetCardRegion() *AvailableBalanceCloseSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *AvailableBalanceCloseSubtotal2) GetFeeType() *AvailableBalanceCloseSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *AvailableBalanceCloseSubtotal2) GetPrepaymentPartType() *AvailableBalanceCloseSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *AvailableBalanceCloseSubtotal2) GetTransactionType() *AvailableBalanceCloseSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type AvailableBalanceClose struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *AvailableBalanceCloseAmount     `json:"amount,omitempty"`
	Subtotals []AvailableBalanceCloseSubtotal2 `json:"subtotals,omitempty"`
}

func (o *AvailableBalanceClose) GetAmount() *AvailableBalanceCloseAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *AvailableBalanceClose) GetSubtotals() []AvailableBalanceCloseSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// AvailableBalance - The available balance. Only available if grouping is `status-balances`.
type AvailableBalance struct {
	Open                 *AvailableBalanceOpen                 `json:"open,omitempty"`
	MovedFromPending     *MovedFromPending                     `json:"movedFromPending,omitempty"`
	ImmediatelyAvailable *AvailableBalanceImmediatelyAvailable `json:"immediatelyAvailable,omitempty"`
	Close                *AvailableBalanceClose                `json:"close,omitempty"`
}

func (o *AvailableBalance) GetOpen() *AvailableBalanceOpen {
	if o == nil {
		return nil
	}
	return o.Open
}

func (o *AvailableBalance) GetMovedFromPending() *MovedFromPending {
	if o == nil {
		return nil
	}
	return o.MovedFromPending
}

func (o *AvailableBalance) GetImmediatelyAvailable() *AvailableBalanceImmediatelyAvailable {
	if o == nil {
		return nil
	}
	return o.ImmediatelyAvailable
}

func (o *AvailableBalance) GetClose() *AvailableBalanceClose {
	if o == nil {
		return nil
	}
	return o.Close
}

// OpenPendingAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type OpenPendingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *OpenPendingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *OpenPendingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// OpenPendingSubTotalMethod1 - Payment type of the transactions
type OpenPendingSubTotalMethod1 string

const (
	OpenPendingSubTotalMethod1Alma              OpenPendingSubTotalMethod1 = "alma"
	OpenPendingSubTotalMethod1Bacs              OpenPendingSubTotalMethod1 = "bacs"
	OpenPendingSubTotalMethod1Applepay          OpenPendingSubTotalMethod1 = "applepay"
	OpenPendingSubTotalMethod1Bancomatpay       OpenPendingSubTotalMethod1 = "bancomatpay"
	OpenPendingSubTotalMethod1Bancontact        OpenPendingSubTotalMethod1 = "bancontact"
	OpenPendingSubTotalMethod1Banktransfer      OpenPendingSubTotalMethod1 = "banktransfer"
	OpenPendingSubTotalMethod1Belfius           OpenPendingSubTotalMethod1 = "belfius"
	OpenPendingSubTotalMethod1Billie            OpenPendingSubTotalMethod1 = "billie"
	OpenPendingSubTotalMethod1Bizum             OpenPendingSubTotalMethod1 = "bizum"
	OpenPendingSubTotalMethod1Bitcoin           OpenPendingSubTotalMethod1 = "bitcoin"
	OpenPendingSubTotalMethod1Blik              OpenPendingSubTotalMethod1 = "blik"
	OpenPendingSubTotalMethod1Creditcard        OpenPendingSubTotalMethod1 = "creditcard"
	OpenPendingSubTotalMethod1Directdebit       OpenPendingSubTotalMethod1 = "directdebit"
	OpenPendingSubTotalMethod1Eps               OpenPendingSubTotalMethod1 = "eps"
	OpenPendingSubTotalMethod1Giftcard          OpenPendingSubTotalMethod1 = "giftcard"
	OpenPendingSubTotalMethod1Giropay           OpenPendingSubTotalMethod1 = "giropay"
	OpenPendingSubTotalMethod1Googlepay         OpenPendingSubTotalMethod1 = "googlepay"
	OpenPendingSubTotalMethod1Ideal             OpenPendingSubTotalMethod1 = "ideal"
	OpenPendingSubTotalMethod1In3               OpenPendingSubTotalMethod1 = "in3"
	OpenPendingSubTotalMethod1Inghomepay        OpenPendingSubTotalMethod1 = "inghomepay"
	OpenPendingSubTotalMethod1Kbc               OpenPendingSubTotalMethod1 = "kbc"
	OpenPendingSubTotalMethod1Klarnapaylater    OpenPendingSubTotalMethod1 = "klarnapaylater"
	OpenPendingSubTotalMethod1Klarnapaynow      OpenPendingSubTotalMethod1 = "klarnapaynow"
	OpenPendingSubTotalMethod1Klarnasliceit     OpenPendingSubTotalMethod1 = "klarnasliceit"
	OpenPendingSubTotalMethod1Klarna            OpenPendingSubTotalMethod1 = "klarna"
	OpenPendingSubTotalMethod1Mbway             OpenPendingSubTotalMethod1 = "mbway"
	OpenPendingSubTotalMethod1Multibanco        OpenPendingSubTotalMethod1 = "multibanco"
	OpenPendingSubTotalMethod1Mybank            OpenPendingSubTotalMethod1 = "mybank"
	OpenPendingSubTotalMethod1Paybybank         OpenPendingSubTotalMethod1 = "paybybank"
	OpenPendingSubTotalMethod1Payconiq          OpenPendingSubTotalMethod1 = "payconiq"
	OpenPendingSubTotalMethod1Paypal            OpenPendingSubTotalMethod1 = "paypal"
	OpenPendingSubTotalMethod1Paysafecard       OpenPendingSubTotalMethod1 = "paysafecard"
	OpenPendingSubTotalMethod1Przelewy24        OpenPendingSubTotalMethod1 = "przelewy24"
	OpenPendingSubTotalMethod1Riverty           OpenPendingSubTotalMethod1 = "riverty"
	OpenPendingSubTotalMethod1Satispay          OpenPendingSubTotalMethod1 = "satispay"
	OpenPendingSubTotalMethod1Podiumcadeaukaart OpenPendingSubTotalMethod1 = "podiumcadeaukaart"
	OpenPendingSubTotalMethod1Pointofsale       OpenPendingSubTotalMethod1 = "pointofsale"
	OpenPendingSubTotalMethod1Sofort            OpenPendingSubTotalMethod1 = "sofort"
	OpenPendingSubTotalMethod1Swish             OpenPendingSubTotalMethod1 = "swish"
	OpenPendingSubTotalMethod1Trustly           OpenPendingSubTotalMethod1 = "trustly"
	OpenPendingSubTotalMethod1Twint             OpenPendingSubTotalMethod1 = "twint"
	OpenPendingSubTotalMethod1Voucher           OpenPendingSubTotalMethod1 = "voucher"
)

func (e OpenPendingSubTotalMethod1) ToPointer() *OpenPendingSubTotalMethod1 {
	return &e
}
func (e *OpenPendingSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = OpenPendingSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenPendingSubTotalMethod1: %v", v)
	}
}

// OpenPendingSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type OpenPendingSubTotalCardIssuer1 string

const (
	OpenPendingSubTotalCardIssuer1Amex          OpenPendingSubTotalCardIssuer1 = "amex"
	OpenPendingSubTotalCardIssuer1Maestro       OpenPendingSubTotalCardIssuer1 = "maestro"
	OpenPendingSubTotalCardIssuer1CarteBancaire OpenPendingSubTotalCardIssuer1 = "carte-bancaire"
	OpenPendingSubTotalCardIssuer1Other         OpenPendingSubTotalCardIssuer1 = "other"
)

func (e OpenPendingSubTotalCardIssuer1) ToPointer() *OpenPendingSubTotalCardIssuer1 {
	return &e
}
func (e *OpenPendingSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = OpenPendingSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenPendingSubTotalCardIssuer1: %v", v)
	}
}

// OpenPendingSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type OpenPendingSubTotalCardAudience1 string

const (
	OpenPendingSubTotalCardAudience1Corporate OpenPendingSubTotalCardAudience1 = "corporate"
	OpenPendingSubTotalCardAudience1Other     OpenPendingSubTotalCardAudience1 = "other"
)

func (e OpenPendingSubTotalCardAudience1) ToPointer() *OpenPendingSubTotalCardAudience1 {
	return &e
}
func (e *OpenPendingSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = OpenPendingSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenPendingSubTotalCardAudience1: %v", v)
	}
}

// OpenPendingSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type OpenPendingSubTotalCardRegion1 string

const (
	OpenPendingSubTotalCardRegion1IntraEea OpenPendingSubTotalCardRegion1 = "intra-eea"
	OpenPendingSubTotalCardRegion1IntraEu  OpenPendingSubTotalCardRegion1 = "intra-eu"
	OpenPendingSubTotalCardRegion1Domestic OpenPendingSubTotalCardRegion1 = "domestic"
	OpenPendingSubTotalCardRegion1Other    OpenPendingSubTotalCardRegion1 = "other"
)

func (e OpenPendingSubTotalCardRegion1) ToPointer() *OpenPendingSubTotalCardRegion1 {
	return &e
}
func (e *OpenPendingSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = OpenPendingSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenPendingSubTotalCardRegion1: %v", v)
	}
}

// OpenPendingSubTotalFeeType1 - Present when the transaction represents a fee.
type OpenPendingSubTotalFeeType1 string

const (
	OpenPendingSubTotalFeeType1PaymentFee                                        OpenPendingSubTotalFeeType1 = "payment-fee"
	OpenPendingSubTotalFeeType1DirectDebitFailureFee                             OpenPendingSubTotalFeeType1 = "direct-debit-failure-fee"
	OpenPendingSubTotalFeeType1UnauthorizedDirectDebitFee                        OpenPendingSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	OpenPendingSubTotalFeeType1BankChargedDirectDebitFailureFee                  OpenPendingSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	OpenPendingSubTotalFeeType1PartnerCommission                                 OpenPendingSubTotalFeeType1 = "partner-commission"
	OpenPendingSubTotalFeeType1ApplicationFee                                    OpenPendingSubTotalFeeType1 = "application-fee"
	OpenPendingSubTotalFeeType1CaptureFee                                        OpenPendingSubTotalFeeType1 = "capture-fee"
	OpenPendingSubTotalFeeType1RefundFee                                         OpenPendingSubTotalFeeType1 = "refund-fee"
	OpenPendingSubTotalFeeType1ChargebackFee                                     OpenPendingSubTotalFeeType1 = "chargeback-fee"
	OpenPendingSubTotalFeeType1PaymentNotificationFee                            OpenPendingSubTotalFeeType1 = "payment-notification-fee"
	OpenPendingSubTotalFeeType1TransferNotificationFee                           OpenPendingSubTotalFeeType1 = "transfer-notification-fee"
	OpenPendingSubTotalFeeType1PayoutFee                                         OpenPendingSubTotalFeeType1 = "payout-fee"
	OpenPendingSubTotalFeeType1FeeDiscount                                       OpenPendingSubTotalFeeType1 = "fee-discount"
	OpenPendingSubTotalFeeType1FeeReimbursement                                  OpenPendingSubTotalFeeType1 = "fee-reimbursement"
	OpenPendingSubTotalFeeType1PlatformVolumeFee                                 OpenPendingSubTotalFeeType1 = "platform-volume-fee"
	OpenPendingSubTotalFeeType1PlatformConnectedOrganizationsFee                 OpenPendingSubTotalFeeType1 = "platform-connected-organizations-fee"
	OpenPendingSubTotalFeeType1BalanceChargeFee                                  OpenPendingSubTotalFeeType1 = "balance-charge-fee"
	OpenPendingSubTotalFeeType1ThreedsAuthenticationAttemptFee                   OpenPendingSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	OpenPendingSubTotalFeeType1TerminalMonthlyFee                                OpenPendingSubTotalFeeType1 = "terminal-monthly-fee"
	OpenPendingSubTotalFeeType1AcceptanceRiskFee                                 OpenPendingSubTotalFeeType1 = "acceptance-risk-fee"
	OpenPendingSubTotalFeeType1TopUpFee                                          OpenPendingSubTotalFeeType1 = "top-up-fee"
	OpenPendingSubTotalFeeType1PaymentGatewayFee                                 OpenPendingSubTotalFeeType1 = "payment-gateway-fee"
	OpenPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   OpenPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	OpenPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee OpenPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	OpenPendingSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             OpenPendingSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	OpenPendingSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           OpenPendingSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	OpenPendingSubTotalFeeType1MinimumInvoiceAmountFee                           OpenPendingSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e OpenPendingSubTotalFeeType1) ToPointer() *OpenPendingSubTotalFeeType1 {
	return &e
}
func (e *OpenPendingSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = OpenPendingSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenPendingSubTotalFeeType1: %v", v)
	}
}

// OpenPendingSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type OpenPendingSubTotalPrepaymentPartType1 string

const (
	OpenPendingSubTotalPrepaymentPartType1Fee                     OpenPendingSubTotalPrepaymentPartType1 = "fee"
	OpenPendingSubTotalPrepaymentPartType1FeeReimbursement        OpenPendingSubTotalPrepaymentPartType1 = "fee-reimbursement"
	OpenPendingSubTotalPrepaymentPartType1FeeDiscount             OpenPendingSubTotalPrepaymentPartType1 = "fee-discount"
	OpenPendingSubTotalPrepaymentPartType1FeeVat                  OpenPendingSubTotalPrepaymentPartType1 = "fee-vat"
	OpenPendingSubTotalPrepaymentPartType1FeeRoundingCompensation OpenPendingSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e OpenPendingSubTotalPrepaymentPartType1) ToPointer() *OpenPendingSubTotalPrepaymentPartType1 {
	return &e
}
func (e *OpenPendingSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = OpenPendingSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenPendingSubTotalPrepaymentPartType1: %v", v)
	}
}

// OpenPendingSubTotalTransactionType1 - Represents the transaction type
type OpenPendingSubTotalTransactionType1 string

const (
	OpenPendingSubTotalTransactionType1Payment                           OpenPendingSubTotalTransactionType1 = "payment"
	OpenPendingSubTotalTransactionType1SplitPayment                      OpenPendingSubTotalTransactionType1 = "split-payment"
	OpenPendingSubTotalTransactionType1FailedPayment                     OpenPendingSubTotalTransactionType1 = "failed-payment"
	OpenPendingSubTotalTransactionType1FailedPlatformSplitPayment        OpenPendingSubTotalTransactionType1 = "failed-platform-split-payment"
	OpenPendingSubTotalTransactionType1FailedSplitPaymentCompensation    OpenPendingSubTotalTransactionType1 = "failed-split-payment-compensation"
	OpenPendingSubTotalTransactionType1Capture                           OpenPendingSubTotalTransactionType1 = "capture"
	OpenPendingSubTotalTransactionType1SplitTransaction                  OpenPendingSubTotalTransactionType1 = "split-transaction"
	OpenPendingSubTotalTransactionType1Refund                            OpenPendingSubTotalTransactionType1 = "refund"
	OpenPendingSubTotalTransactionType1PlatformPaymentRefund             OpenPendingSubTotalTransactionType1 = "platform-payment-refund"
	OpenPendingSubTotalTransactionType1ReturnedPlatformPaymentRefund     OpenPendingSubTotalTransactionType1 = "returned-platform-payment-refund"
	OpenPendingSubTotalTransactionType1RefundCompensation                OpenPendingSubTotalTransactionType1 = "refund-compensation"
	OpenPendingSubTotalTransactionType1ReturnedRefundCompensation        OpenPendingSubTotalTransactionType1 = "returned-refund-compensation"
	OpenPendingSubTotalTransactionType1ReturnedRefund                    OpenPendingSubTotalTransactionType1 = "returned-refund"
	OpenPendingSubTotalTransactionType1Chargeback                        OpenPendingSubTotalTransactionType1 = "chargeback"
	OpenPendingSubTotalTransactionType1ChargebackReversal                OpenPendingSubTotalTransactionType1 = "chargeback-reversal"
	OpenPendingSubTotalTransactionType1ChargebackCompensation            OpenPendingSubTotalTransactionType1 = "chargeback-compensation"
	OpenPendingSubTotalTransactionType1ReversedChargebackCompensation    OpenPendingSubTotalTransactionType1 = "reversed-chargeback-compensation"
	OpenPendingSubTotalTransactionType1PlatformPaymentChargeback         OpenPendingSubTotalTransactionType1 = "platform-payment-chargeback"
	OpenPendingSubTotalTransactionType1ReversedPlatformPaymentChargeback OpenPendingSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	OpenPendingSubTotalTransactionType1FeePrepayment                     OpenPendingSubTotalTransactionType1 = "fee-prepayment"
	OpenPendingSubTotalTransactionType1OutgoingTransfer                  OpenPendingSubTotalTransactionType1 = "outgoing-transfer"
	OpenPendingSubTotalTransactionType1IncomingTransfer                  OpenPendingSubTotalTransactionType1 = "incoming-transfer"
	OpenPendingSubTotalTransactionType1CanceledTransfer                  OpenPendingSubTotalTransactionType1 = "canceled-transfer"
	OpenPendingSubTotalTransactionType1ReturnedTransfer                  OpenPendingSubTotalTransactionType1 = "returned-transfer"
	OpenPendingSubTotalTransactionType1BalanceReserve                    OpenPendingSubTotalTransactionType1 = "balance-reserve"
	OpenPendingSubTotalTransactionType1BalanceReserveReturn              OpenPendingSubTotalTransactionType1 = "balance-reserve-return"
	OpenPendingSubTotalTransactionType1InvoiceRoundingCompensation       OpenPendingSubTotalTransactionType1 = "invoice-rounding-compensation"
	OpenPendingSubTotalTransactionType1RollingReserveHold                OpenPendingSubTotalTransactionType1 = "rolling-reserve-hold"
	OpenPendingSubTotalTransactionType1RollingReserveRelease             OpenPendingSubTotalTransactionType1 = "rolling-reserve-release"
	OpenPendingSubTotalTransactionType1BalanceCorrection                 OpenPendingSubTotalTransactionType1 = "balance-correction"
	OpenPendingSubTotalTransactionType1Repayment                         OpenPendingSubTotalTransactionType1 = "repayment"
	OpenPendingSubTotalTransactionType1Loan                              OpenPendingSubTotalTransactionType1 = "loan"
	OpenPendingSubTotalTransactionType1BalanceTopup                      OpenPendingSubTotalTransactionType1 = "balance-topup"
	OpenPendingSubTotalTransactionType1CashCollateralIssuance            OpenPendingSubTotalTransactionType1 = "cash-collateral-issuance';"
	OpenPendingSubTotalTransactionType1CashCollateralRelease             OpenPendingSubTotalTransactionType1 = "cash-collateral-release"
	OpenPendingSubTotalTransactionType1PendingRollingReserve             OpenPendingSubTotalTransactionType1 = "pending-rolling-reserve"
	OpenPendingSubTotalTransactionType1ToBeReleasedRollingReserve        OpenPendingSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	OpenPendingSubTotalTransactionType1HeldRollingReserve                OpenPendingSubTotalTransactionType1 = "held-rolling-reserve"
	OpenPendingSubTotalTransactionType1ReleasedRollingReserve            OpenPendingSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e OpenPendingSubTotalTransactionType1) ToPointer() *OpenPendingSubTotalTransactionType1 {
	return &e
}
func (e *OpenPendingSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = OpenPendingSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenPendingSubTotalTransactionType1: %v", v)
	}
}

type OpenPendingSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *OpenPendingSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *OpenPendingSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *OpenPendingSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *OpenPendingSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *OpenPendingSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *OpenPendingSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *OpenPendingSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *OpenPendingSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *OpenPendingSubTotal1) GetMethod() *OpenPendingSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *OpenPendingSubTotal1) GetCardIssuer() *OpenPendingSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *OpenPendingSubTotal1) GetCardAudience() *OpenPendingSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *OpenPendingSubTotal1) GetCardRegion() *OpenPendingSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *OpenPendingSubTotal1) GetFeeType() *OpenPendingSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *OpenPendingSubTotal1) GetPrepaymentPartType() *OpenPendingSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *OpenPendingSubTotal1) GetTransactionType() *OpenPendingSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// OpenPendingSubtotalMethod2 - Payment type of the transactions
type OpenPendingSubtotalMethod2 string

const (
	OpenPendingSubtotalMethod2Alma              OpenPendingSubtotalMethod2 = "alma"
	OpenPendingSubtotalMethod2Bacs              OpenPendingSubtotalMethod2 = "bacs"
	OpenPendingSubtotalMethod2Applepay          OpenPendingSubtotalMethod2 = "applepay"
	OpenPendingSubtotalMethod2Bancomatpay       OpenPendingSubtotalMethod2 = "bancomatpay"
	OpenPendingSubtotalMethod2Bancontact        OpenPendingSubtotalMethod2 = "bancontact"
	OpenPendingSubtotalMethod2Banktransfer      OpenPendingSubtotalMethod2 = "banktransfer"
	OpenPendingSubtotalMethod2Belfius           OpenPendingSubtotalMethod2 = "belfius"
	OpenPendingSubtotalMethod2Billie            OpenPendingSubtotalMethod2 = "billie"
	OpenPendingSubtotalMethod2Bizum             OpenPendingSubtotalMethod2 = "bizum"
	OpenPendingSubtotalMethod2Bitcoin           OpenPendingSubtotalMethod2 = "bitcoin"
	OpenPendingSubtotalMethod2Blik              OpenPendingSubtotalMethod2 = "blik"
	OpenPendingSubtotalMethod2Creditcard        OpenPendingSubtotalMethod2 = "creditcard"
	OpenPendingSubtotalMethod2Directdebit       OpenPendingSubtotalMethod2 = "directdebit"
	OpenPendingSubtotalMethod2Eps               OpenPendingSubtotalMethod2 = "eps"
	OpenPendingSubtotalMethod2Giftcard          OpenPendingSubtotalMethod2 = "giftcard"
	OpenPendingSubtotalMethod2Giropay           OpenPendingSubtotalMethod2 = "giropay"
	OpenPendingSubtotalMethod2Googlepay         OpenPendingSubtotalMethod2 = "googlepay"
	OpenPendingSubtotalMethod2Ideal             OpenPendingSubtotalMethod2 = "ideal"
	OpenPendingSubtotalMethod2In3               OpenPendingSubtotalMethod2 = "in3"
	OpenPendingSubtotalMethod2Inghomepay        OpenPendingSubtotalMethod2 = "inghomepay"
	OpenPendingSubtotalMethod2Kbc               OpenPendingSubtotalMethod2 = "kbc"
	OpenPendingSubtotalMethod2Klarnapaylater    OpenPendingSubtotalMethod2 = "klarnapaylater"
	OpenPendingSubtotalMethod2Klarnapaynow      OpenPendingSubtotalMethod2 = "klarnapaynow"
	OpenPendingSubtotalMethod2Klarnasliceit     OpenPendingSubtotalMethod2 = "klarnasliceit"
	OpenPendingSubtotalMethod2Klarna            OpenPendingSubtotalMethod2 = "klarna"
	OpenPendingSubtotalMethod2Mbway             OpenPendingSubtotalMethod2 = "mbway"
	OpenPendingSubtotalMethod2Multibanco        OpenPendingSubtotalMethod2 = "multibanco"
	OpenPendingSubtotalMethod2Mybank            OpenPendingSubtotalMethod2 = "mybank"
	OpenPendingSubtotalMethod2Paybybank         OpenPendingSubtotalMethod2 = "paybybank"
	OpenPendingSubtotalMethod2Payconiq          OpenPendingSubtotalMethod2 = "payconiq"
	OpenPendingSubtotalMethod2Paypal            OpenPendingSubtotalMethod2 = "paypal"
	OpenPendingSubtotalMethod2Paysafecard       OpenPendingSubtotalMethod2 = "paysafecard"
	OpenPendingSubtotalMethod2Przelewy24        OpenPendingSubtotalMethod2 = "przelewy24"
	OpenPendingSubtotalMethod2Riverty           OpenPendingSubtotalMethod2 = "riverty"
	OpenPendingSubtotalMethod2Satispay          OpenPendingSubtotalMethod2 = "satispay"
	OpenPendingSubtotalMethod2Podiumcadeaukaart OpenPendingSubtotalMethod2 = "podiumcadeaukaart"
	OpenPendingSubtotalMethod2Pointofsale       OpenPendingSubtotalMethod2 = "pointofsale"
	OpenPendingSubtotalMethod2Sofort            OpenPendingSubtotalMethod2 = "sofort"
	OpenPendingSubtotalMethod2Swish             OpenPendingSubtotalMethod2 = "swish"
	OpenPendingSubtotalMethod2Trustly           OpenPendingSubtotalMethod2 = "trustly"
	OpenPendingSubtotalMethod2Twint             OpenPendingSubtotalMethod2 = "twint"
	OpenPendingSubtotalMethod2Voucher           OpenPendingSubtotalMethod2 = "voucher"
)

func (e OpenPendingSubtotalMethod2) ToPointer() *OpenPendingSubtotalMethod2 {
	return &e
}
func (e *OpenPendingSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = OpenPendingSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenPendingSubtotalMethod2: %v", v)
	}
}

// OpenPendingSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type OpenPendingSubtotalCardIssuer2 string

const (
	OpenPendingSubtotalCardIssuer2Amex          OpenPendingSubtotalCardIssuer2 = "amex"
	OpenPendingSubtotalCardIssuer2Maestro       OpenPendingSubtotalCardIssuer2 = "maestro"
	OpenPendingSubtotalCardIssuer2CarteBancaire OpenPendingSubtotalCardIssuer2 = "carte-bancaire"
	OpenPendingSubtotalCardIssuer2Other         OpenPendingSubtotalCardIssuer2 = "other"
)

func (e OpenPendingSubtotalCardIssuer2) ToPointer() *OpenPendingSubtotalCardIssuer2 {
	return &e
}
func (e *OpenPendingSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = OpenPendingSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenPendingSubtotalCardIssuer2: %v", v)
	}
}

// OpenPendingSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type OpenPendingSubtotalCardAudience2 string

const (
	OpenPendingSubtotalCardAudience2Corporate OpenPendingSubtotalCardAudience2 = "corporate"
	OpenPendingSubtotalCardAudience2Other     OpenPendingSubtotalCardAudience2 = "other"
)

func (e OpenPendingSubtotalCardAudience2) ToPointer() *OpenPendingSubtotalCardAudience2 {
	return &e
}
func (e *OpenPendingSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = OpenPendingSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenPendingSubtotalCardAudience2: %v", v)
	}
}

// OpenPendingSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type OpenPendingSubtotalCardRegion2 string

const (
	OpenPendingSubtotalCardRegion2IntraEea OpenPendingSubtotalCardRegion2 = "intra-eea"
	OpenPendingSubtotalCardRegion2IntraEu  OpenPendingSubtotalCardRegion2 = "intra-eu"
	OpenPendingSubtotalCardRegion2Domestic OpenPendingSubtotalCardRegion2 = "domestic"
	OpenPendingSubtotalCardRegion2Other    OpenPendingSubtotalCardRegion2 = "other"
)

func (e OpenPendingSubtotalCardRegion2) ToPointer() *OpenPendingSubtotalCardRegion2 {
	return &e
}
func (e *OpenPendingSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = OpenPendingSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenPendingSubtotalCardRegion2: %v", v)
	}
}

// OpenPendingSubtotalFeeType2 - Present when the transaction represents a fee.
type OpenPendingSubtotalFeeType2 string

const (
	OpenPendingSubtotalFeeType2PaymentFee                                        OpenPendingSubtotalFeeType2 = "payment-fee"
	OpenPendingSubtotalFeeType2DirectDebitFailureFee                             OpenPendingSubtotalFeeType2 = "direct-debit-failure-fee"
	OpenPendingSubtotalFeeType2UnauthorizedDirectDebitFee                        OpenPendingSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	OpenPendingSubtotalFeeType2BankChargedDirectDebitFailureFee                  OpenPendingSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	OpenPendingSubtotalFeeType2PartnerCommission                                 OpenPendingSubtotalFeeType2 = "partner-commission"
	OpenPendingSubtotalFeeType2ApplicationFee                                    OpenPendingSubtotalFeeType2 = "application-fee"
	OpenPendingSubtotalFeeType2CaptureFee                                        OpenPendingSubtotalFeeType2 = "capture-fee"
	OpenPendingSubtotalFeeType2RefundFee                                         OpenPendingSubtotalFeeType2 = "refund-fee"
	OpenPendingSubtotalFeeType2ChargebackFee                                     OpenPendingSubtotalFeeType2 = "chargeback-fee"
	OpenPendingSubtotalFeeType2PaymentNotificationFee                            OpenPendingSubtotalFeeType2 = "payment-notification-fee"
	OpenPendingSubtotalFeeType2TransferNotificationFee                           OpenPendingSubtotalFeeType2 = "transfer-notification-fee"
	OpenPendingSubtotalFeeType2PayoutFee                                         OpenPendingSubtotalFeeType2 = "payout-fee"
	OpenPendingSubtotalFeeType2FeeDiscount                                       OpenPendingSubtotalFeeType2 = "fee-discount"
	OpenPendingSubtotalFeeType2FeeReimbursement                                  OpenPendingSubtotalFeeType2 = "fee-reimbursement"
	OpenPendingSubtotalFeeType2PlatformVolumeFee                                 OpenPendingSubtotalFeeType2 = "platform-volume-fee"
	OpenPendingSubtotalFeeType2PlatformConnectedOrganizationsFee                 OpenPendingSubtotalFeeType2 = "platform-connected-organizations-fee"
	OpenPendingSubtotalFeeType2BalanceChargeFee                                  OpenPendingSubtotalFeeType2 = "balance-charge-fee"
	OpenPendingSubtotalFeeType2ThreedsAuthenticationAttemptFee                   OpenPendingSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	OpenPendingSubtotalFeeType2TerminalMonthlyFee                                OpenPendingSubtotalFeeType2 = "terminal-monthly-fee"
	OpenPendingSubtotalFeeType2AcceptanceRiskFee                                 OpenPendingSubtotalFeeType2 = "acceptance-risk-fee"
	OpenPendingSubtotalFeeType2TopUpFee                                          OpenPendingSubtotalFeeType2 = "top-up-fee"
	OpenPendingSubtotalFeeType2PaymentGatewayFee                                 OpenPendingSubtotalFeeType2 = "payment-gateway-fee"
	OpenPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   OpenPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	OpenPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee OpenPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	OpenPendingSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             OpenPendingSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	OpenPendingSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           OpenPendingSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	OpenPendingSubtotalFeeType2MinimumInvoiceAmountFee                           OpenPendingSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e OpenPendingSubtotalFeeType2) ToPointer() *OpenPendingSubtotalFeeType2 {
	return &e
}
func (e *OpenPendingSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = OpenPendingSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenPendingSubtotalFeeType2: %v", v)
	}
}

// OpenPendingSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type OpenPendingSubtotalPrepaymentPartType2 string

const (
	OpenPendingSubtotalPrepaymentPartType2Fee                     OpenPendingSubtotalPrepaymentPartType2 = "fee"
	OpenPendingSubtotalPrepaymentPartType2FeeReimbursement        OpenPendingSubtotalPrepaymentPartType2 = "fee-reimbursement"
	OpenPendingSubtotalPrepaymentPartType2FeeDiscount             OpenPendingSubtotalPrepaymentPartType2 = "fee-discount"
	OpenPendingSubtotalPrepaymentPartType2FeeVat                  OpenPendingSubtotalPrepaymentPartType2 = "fee-vat"
	OpenPendingSubtotalPrepaymentPartType2FeeRoundingCompensation OpenPendingSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e OpenPendingSubtotalPrepaymentPartType2) ToPointer() *OpenPendingSubtotalPrepaymentPartType2 {
	return &e
}
func (e *OpenPendingSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = OpenPendingSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenPendingSubtotalPrepaymentPartType2: %v", v)
	}
}

// OpenPendingSubtotalTransactionType2 - Represents the transaction type
type OpenPendingSubtotalTransactionType2 string

const (
	OpenPendingSubtotalTransactionType2Payment                           OpenPendingSubtotalTransactionType2 = "payment"
	OpenPendingSubtotalTransactionType2SplitPayment                      OpenPendingSubtotalTransactionType2 = "split-payment"
	OpenPendingSubtotalTransactionType2FailedPayment                     OpenPendingSubtotalTransactionType2 = "failed-payment"
	OpenPendingSubtotalTransactionType2FailedPlatformSplitPayment        OpenPendingSubtotalTransactionType2 = "failed-platform-split-payment"
	OpenPendingSubtotalTransactionType2FailedSplitPaymentCompensation    OpenPendingSubtotalTransactionType2 = "failed-split-payment-compensation"
	OpenPendingSubtotalTransactionType2Capture                           OpenPendingSubtotalTransactionType2 = "capture"
	OpenPendingSubtotalTransactionType2SplitTransaction                  OpenPendingSubtotalTransactionType2 = "split-transaction"
	OpenPendingSubtotalTransactionType2Refund                            OpenPendingSubtotalTransactionType2 = "refund"
	OpenPendingSubtotalTransactionType2PlatformPaymentRefund             OpenPendingSubtotalTransactionType2 = "platform-payment-refund"
	OpenPendingSubtotalTransactionType2ReturnedPlatformPaymentRefund     OpenPendingSubtotalTransactionType2 = "returned-platform-payment-refund"
	OpenPendingSubtotalTransactionType2RefundCompensation                OpenPendingSubtotalTransactionType2 = "refund-compensation"
	OpenPendingSubtotalTransactionType2ReturnedRefundCompensation        OpenPendingSubtotalTransactionType2 = "returned-refund-compensation"
	OpenPendingSubtotalTransactionType2ReturnedRefund                    OpenPendingSubtotalTransactionType2 = "returned-refund"
	OpenPendingSubtotalTransactionType2Chargeback                        OpenPendingSubtotalTransactionType2 = "chargeback"
	OpenPendingSubtotalTransactionType2ChargebackReversal                OpenPendingSubtotalTransactionType2 = "chargeback-reversal"
	OpenPendingSubtotalTransactionType2ChargebackCompensation            OpenPendingSubtotalTransactionType2 = "chargeback-compensation"
	OpenPendingSubtotalTransactionType2ReversedChargebackCompensation    OpenPendingSubtotalTransactionType2 = "reversed-chargeback-compensation"
	OpenPendingSubtotalTransactionType2PlatformPaymentChargeback         OpenPendingSubtotalTransactionType2 = "platform-payment-chargeback"
	OpenPendingSubtotalTransactionType2ReversedPlatformPaymentChargeback OpenPendingSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	OpenPendingSubtotalTransactionType2FeePrepayment                     OpenPendingSubtotalTransactionType2 = "fee-prepayment"
	OpenPendingSubtotalTransactionType2OutgoingTransfer                  OpenPendingSubtotalTransactionType2 = "outgoing-transfer"
	OpenPendingSubtotalTransactionType2IncomingTransfer                  OpenPendingSubtotalTransactionType2 = "incoming-transfer"
	OpenPendingSubtotalTransactionType2CanceledTransfer                  OpenPendingSubtotalTransactionType2 = "canceled-transfer"
	OpenPendingSubtotalTransactionType2ReturnedTransfer                  OpenPendingSubtotalTransactionType2 = "returned-transfer"
	OpenPendingSubtotalTransactionType2BalanceReserve                    OpenPendingSubtotalTransactionType2 = "balance-reserve"
	OpenPendingSubtotalTransactionType2BalanceReserveReturn              OpenPendingSubtotalTransactionType2 = "balance-reserve-return"
	OpenPendingSubtotalTransactionType2InvoiceRoundingCompensation       OpenPendingSubtotalTransactionType2 = "invoice-rounding-compensation"
	OpenPendingSubtotalTransactionType2RollingReserveHold                OpenPendingSubtotalTransactionType2 = "rolling-reserve-hold"
	OpenPendingSubtotalTransactionType2RollingReserveRelease             OpenPendingSubtotalTransactionType2 = "rolling-reserve-release"
	OpenPendingSubtotalTransactionType2BalanceCorrection                 OpenPendingSubtotalTransactionType2 = "balance-correction"
	OpenPendingSubtotalTransactionType2Repayment                         OpenPendingSubtotalTransactionType2 = "repayment"
	OpenPendingSubtotalTransactionType2Loan                              OpenPendingSubtotalTransactionType2 = "loan"
	OpenPendingSubtotalTransactionType2BalanceTopup                      OpenPendingSubtotalTransactionType2 = "balance-topup"
	OpenPendingSubtotalTransactionType2CashCollateralIssuance            OpenPendingSubtotalTransactionType2 = "cash-collateral-issuance';"
	OpenPendingSubtotalTransactionType2CashCollateralRelease             OpenPendingSubtotalTransactionType2 = "cash-collateral-release"
	OpenPendingSubtotalTransactionType2PendingRollingReserve             OpenPendingSubtotalTransactionType2 = "pending-rolling-reserve"
	OpenPendingSubtotalTransactionType2ToBeReleasedRollingReserve        OpenPendingSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	OpenPendingSubtotalTransactionType2HeldRollingReserve                OpenPendingSubtotalTransactionType2 = "held-rolling-reserve"
	OpenPendingSubtotalTransactionType2ReleasedRollingReserve            OpenPendingSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e OpenPendingSubtotalTransactionType2) ToPointer() *OpenPendingSubtotalTransactionType2 {
	return &e
}
func (e *OpenPendingSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = OpenPendingSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenPendingSubtotalTransactionType2: %v", v)
	}
}

type OpenPendingSubtotal2 struct {
	SubTotals []OpenPendingSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *OpenPendingSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *OpenPendingSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *OpenPendingSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *OpenPendingSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *OpenPendingSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *OpenPendingSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *OpenPendingSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *OpenPendingSubtotal2) GetSubTotals() []OpenPendingSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *OpenPendingSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *OpenPendingSubtotal2) GetMethod() *OpenPendingSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *OpenPendingSubtotal2) GetCardIssuer() *OpenPendingSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *OpenPendingSubtotal2) GetCardAudience() *OpenPendingSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *OpenPendingSubtotal2) GetCardRegion() *OpenPendingSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *OpenPendingSubtotal2) GetFeeType() *OpenPendingSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *OpenPendingSubtotal2) GetPrepaymentPartType() *OpenPendingSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *OpenPendingSubtotal2) GetTransactionType() *OpenPendingSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type OpenPending struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *OpenPendingAmount     `json:"amount,omitempty"`
	Subtotals []OpenPendingSubtotal2 `json:"subtotals,omitempty"`
}

func (o *OpenPending) GetAmount() *OpenPendingAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *OpenPending) GetSubtotals() []OpenPendingSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// OpenAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type OpenAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *OpenAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *OpenAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// OpenAvailableSubTotalMethod1 - Payment type of the transactions
type OpenAvailableSubTotalMethod1 string

const (
	OpenAvailableSubTotalMethod1Alma              OpenAvailableSubTotalMethod1 = "alma"
	OpenAvailableSubTotalMethod1Bacs              OpenAvailableSubTotalMethod1 = "bacs"
	OpenAvailableSubTotalMethod1Applepay          OpenAvailableSubTotalMethod1 = "applepay"
	OpenAvailableSubTotalMethod1Bancomatpay       OpenAvailableSubTotalMethod1 = "bancomatpay"
	OpenAvailableSubTotalMethod1Bancontact        OpenAvailableSubTotalMethod1 = "bancontact"
	OpenAvailableSubTotalMethod1Banktransfer      OpenAvailableSubTotalMethod1 = "banktransfer"
	OpenAvailableSubTotalMethod1Belfius           OpenAvailableSubTotalMethod1 = "belfius"
	OpenAvailableSubTotalMethod1Billie            OpenAvailableSubTotalMethod1 = "billie"
	OpenAvailableSubTotalMethod1Bizum             OpenAvailableSubTotalMethod1 = "bizum"
	OpenAvailableSubTotalMethod1Bitcoin           OpenAvailableSubTotalMethod1 = "bitcoin"
	OpenAvailableSubTotalMethod1Blik              OpenAvailableSubTotalMethod1 = "blik"
	OpenAvailableSubTotalMethod1Creditcard        OpenAvailableSubTotalMethod1 = "creditcard"
	OpenAvailableSubTotalMethod1Directdebit       OpenAvailableSubTotalMethod1 = "directdebit"
	OpenAvailableSubTotalMethod1Eps               OpenAvailableSubTotalMethod1 = "eps"
	OpenAvailableSubTotalMethod1Giftcard          OpenAvailableSubTotalMethod1 = "giftcard"
	OpenAvailableSubTotalMethod1Giropay           OpenAvailableSubTotalMethod1 = "giropay"
	OpenAvailableSubTotalMethod1Googlepay         OpenAvailableSubTotalMethod1 = "googlepay"
	OpenAvailableSubTotalMethod1Ideal             OpenAvailableSubTotalMethod1 = "ideal"
	OpenAvailableSubTotalMethod1In3               OpenAvailableSubTotalMethod1 = "in3"
	OpenAvailableSubTotalMethod1Inghomepay        OpenAvailableSubTotalMethod1 = "inghomepay"
	OpenAvailableSubTotalMethod1Kbc               OpenAvailableSubTotalMethod1 = "kbc"
	OpenAvailableSubTotalMethod1Klarnapaylater    OpenAvailableSubTotalMethod1 = "klarnapaylater"
	OpenAvailableSubTotalMethod1Klarnapaynow      OpenAvailableSubTotalMethod1 = "klarnapaynow"
	OpenAvailableSubTotalMethod1Klarnasliceit     OpenAvailableSubTotalMethod1 = "klarnasliceit"
	OpenAvailableSubTotalMethod1Klarna            OpenAvailableSubTotalMethod1 = "klarna"
	OpenAvailableSubTotalMethod1Mbway             OpenAvailableSubTotalMethod1 = "mbway"
	OpenAvailableSubTotalMethod1Multibanco        OpenAvailableSubTotalMethod1 = "multibanco"
	OpenAvailableSubTotalMethod1Mybank            OpenAvailableSubTotalMethod1 = "mybank"
	OpenAvailableSubTotalMethod1Paybybank         OpenAvailableSubTotalMethod1 = "paybybank"
	OpenAvailableSubTotalMethod1Payconiq          OpenAvailableSubTotalMethod1 = "payconiq"
	OpenAvailableSubTotalMethod1Paypal            OpenAvailableSubTotalMethod1 = "paypal"
	OpenAvailableSubTotalMethod1Paysafecard       OpenAvailableSubTotalMethod1 = "paysafecard"
	OpenAvailableSubTotalMethod1Przelewy24        OpenAvailableSubTotalMethod1 = "przelewy24"
	OpenAvailableSubTotalMethod1Riverty           OpenAvailableSubTotalMethod1 = "riverty"
	OpenAvailableSubTotalMethod1Satispay          OpenAvailableSubTotalMethod1 = "satispay"
	OpenAvailableSubTotalMethod1Podiumcadeaukaart OpenAvailableSubTotalMethod1 = "podiumcadeaukaart"
	OpenAvailableSubTotalMethod1Pointofsale       OpenAvailableSubTotalMethod1 = "pointofsale"
	OpenAvailableSubTotalMethod1Sofort            OpenAvailableSubTotalMethod1 = "sofort"
	OpenAvailableSubTotalMethod1Swish             OpenAvailableSubTotalMethod1 = "swish"
	OpenAvailableSubTotalMethod1Trustly           OpenAvailableSubTotalMethod1 = "trustly"
	OpenAvailableSubTotalMethod1Twint             OpenAvailableSubTotalMethod1 = "twint"
	OpenAvailableSubTotalMethod1Voucher           OpenAvailableSubTotalMethod1 = "voucher"
)

func (e OpenAvailableSubTotalMethod1) ToPointer() *OpenAvailableSubTotalMethod1 {
	return &e
}
func (e *OpenAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = OpenAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenAvailableSubTotalMethod1: %v", v)
	}
}

// OpenAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type OpenAvailableSubTotalCardIssuer1 string

const (
	OpenAvailableSubTotalCardIssuer1Amex          OpenAvailableSubTotalCardIssuer1 = "amex"
	OpenAvailableSubTotalCardIssuer1Maestro       OpenAvailableSubTotalCardIssuer1 = "maestro"
	OpenAvailableSubTotalCardIssuer1CarteBancaire OpenAvailableSubTotalCardIssuer1 = "carte-bancaire"
	OpenAvailableSubTotalCardIssuer1Other         OpenAvailableSubTotalCardIssuer1 = "other"
)

func (e OpenAvailableSubTotalCardIssuer1) ToPointer() *OpenAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *OpenAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = OpenAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenAvailableSubTotalCardIssuer1: %v", v)
	}
}

// OpenAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type OpenAvailableSubTotalCardAudience1 string

const (
	OpenAvailableSubTotalCardAudience1Corporate OpenAvailableSubTotalCardAudience1 = "corporate"
	OpenAvailableSubTotalCardAudience1Other     OpenAvailableSubTotalCardAudience1 = "other"
)

func (e OpenAvailableSubTotalCardAudience1) ToPointer() *OpenAvailableSubTotalCardAudience1 {
	return &e
}
func (e *OpenAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = OpenAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenAvailableSubTotalCardAudience1: %v", v)
	}
}

// OpenAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type OpenAvailableSubTotalCardRegion1 string

const (
	OpenAvailableSubTotalCardRegion1IntraEea OpenAvailableSubTotalCardRegion1 = "intra-eea"
	OpenAvailableSubTotalCardRegion1IntraEu  OpenAvailableSubTotalCardRegion1 = "intra-eu"
	OpenAvailableSubTotalCardRegion1Domestic OpenAvailableSubTotalCardRegion1 = "domestic"
	OpenAvailableSubTotalCardRegion1Other    OpenAvailableSubTotalCardRegion1 = "other"
)

func (e OpenAvailableSubTotalCardRegion1) ToPointer() *OpenAvailableSubTotalCardRegion1 {
	return &e
}
func (e *OpenAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = OpenAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenAvailableSubTotalCardRegion1: %v", v)
	}
}

// OpenAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type OpenAvailableSubTotalFeeType1 string

const (
	OpenAvailableSubTotalFeeType1PaymentFee                                        OpenAvailableSubTotalFeeType1 = "payment-fee"
	OpenAvailableSubTotalFeeType1DirectDebitFailureFee                             OpenAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	OpenAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        OpenAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	OpenAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  OpenAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	OpenAvailableSubTotalFeeType1PartnerCommission                                 OpenAvailableSubTotalFeeType1 = "partner-commission"
	OpenAvailableSubTotalFeeType1ApplicationFee                                    OpenAvailableSubTotalFeeType1 = "application-fee"
	OpenAvailableSubTotalFeeType1CaptureFee                                        OpenAvailableSubTotalFeeType1 = "capture-fee"
	OpenAvailableSubTotalFeeType1RefundFee                                         OpenAvailableSubTotalFeeType1 = "refund-fee"
	OpenAvailableSubTotalFeeType1ChargebackFee                                     OpenAvailableSubTotalFeeType1 = "chargeback-fee"
	OpenAvailableSubTotalFeeType1PaymentNotificationFee                            OpenAvailableSubTotalFeeType1 = "payment-notification-fee"
	OpenAvailableSubTotalFeeType1TransferNotificationFee                           OpenAvailableSubTotalFeeType1 = "transfer-notification-fee"
	OpenAvailableSubTotalFeeType1PayoutFee                                         OpenAvailableSubTotalFeeType1 = "payout-fee"
	OpenAvailableSubTotalFeeType1FeeDiscount                                       OpenAvailableSubTotalFeeType1 = "fee-discount"
	OpenAvailableSubTotalFeeType1FeeReimbursement                                  OpenAvailableSubTotalFeeType1 = "fee-reimbursement"
	OpenAvailableSubTotalFeeType1PlatformVolumeFee                                 OpenAvailableSubTotalFeeType1 = "platform-volume-fee"
	OpenAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 OpenAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	OpenAvailableSubTotalFeeType1BalanceChargeFee                                  OpenAvailableSubTotalFeeType1 = "balance-charge-fee"
	OpenAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   OpenAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	OpenAvailableSubTotalFeeType1TerminalMonthlyFee                                OpenAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	OpenAvailableSubTotalFeeType1AcceptanceRiskFee                                 OpenAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	OpenAvailableSubTotalFeeType1TopUpFee                                          OpenAvailableSubTotalFeeType1 = "top-up-fee"
	OpenAvailableSubTotalFeeType1PaymentGatewayFee                                 OpenAvailableSubTotalFeeType1 = "payment-gateway-fee"
	OpenAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   OpenAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	OpenAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee OpenAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	OpenAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             OpenAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	OpenAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           OpenAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	OpenAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           OpenAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e OpenAvailableSubTotalFeeType1) ToPointer() *OpenAvailableSubTotalFeeType1 {
	return &e
}
func (e *OpenAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = OpenAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenAvailableSubTotalFeeType1: %v", v)
	}
}

// OpenAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type OpenAvailableSubTotalPrepaymentPartType1 string

const (
	OpenAvailableSubTotalPrepaymentPartType1Fee                     OpenAvailableSubTotalPrepaymentPartType1 = "fee"
	OpenAvailableSubTotalPrepaymentPartType1FeeReimbursement        OpenAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	OpenAvailableSubTotalPrepaymentPartType1FeeDiscount             OpenAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	OpenAvailableSubTotalPrepaymentPartType1FeeVat                  OpenAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	OpenAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation OpenAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e OpenAvailableSubTotalPrepaymentPartType1) ToPointer() *OpenAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *OpenAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = OpenAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// OpenAvailableSubTotalTransactionType1 - Represents the transaction type
type OpenAvailableSubTotalTransactionType1 string

const (
	OpenAvailableSubTotalTransactionType1Payment                           OpenAvailableSubTotalTransactionType1 = "payment"
	OpenAvailableSubTotalTransactionType1SplitPayment                      OpenAvailableSubTotalTransactionType1 = "split-payment"
	OpenAvailableSubTotalTransactionType1FailedPayment                     OpenAvailableSubTotalTransactionType1 = "failed-payment"
	OpenAvailableSubTotalTransactionType1FailedPlatformSplitPayment        OpenAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	OpenAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    OpenAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	OpenAvailableSubTotalTransactionType1Capture                           OpenAvailableSubTotalTransactionType1 = "capture"
	OpenAvailableSubTotalTransactionType1SplitTransaction                  OpenAvailableSubTotalTransactionType1 = "split-transaction"
	OpenAvailableSubTotalTransactionType1Refund                            OpenAvailableSubTotalTransactionType1 = "refund"
	OpenAvailableSubTotalTransactionType1PlatformPaymentRefund             OpenAvailableSubTotalTransactionType1 = "platform-payment-refund"
	OpenAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     OpenAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	OpenAvailableSubTotalTransactionType1RefundCompensation                OpenAvailableSubTotalTransactionType1 = "refund-compensation"
	OpenAvailableSubTotalTransactionType1ReturnedRefundCompensation        OpenAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	OpenAvailableSubTotalTransactionType1ReturnedRefund                    OpenAvailableSubTotalTransactionType1 = "returned-refund"
	OpenAvailableSubTotalTransactionType1Chargeback                        OpenAvailableSubTotalTransactionType1 = "chargeback"
	OpenAvailableSubTotalTransactionType1ChargebackReversal                OpenAvailableSubTotalTransactionType1 = "chargeback-reversal"
	OpenAvailableSubTotalTransactionType1ChargebackCompensation            OpenAvailableSubTotalTransactionType1 = "chargeback-compensation"
	OpenAvailableSubTotalTransactionType1ReversedChargebackCompensation    OpenAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	OpenAvailableSubTotalTransactionType1PlatformPaymentChargeback         OpenAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	OpenAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback OpenAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	OpenAvailableSubTotalTransactionType1FeePrepayment                     OpenAvailableSubTotalTransactionType1 = "fee-prepayment"
	OpenAvailableSubTotalTransactionType1OutgoingTransfer                  OpenAvailableSubTotalTransactionType1 = "outgoing-transfer"
	OpenAvailableSubTotalTransactionType1IncomingTransfer                  OpenAvailableSubTotalTransactionType1 = "incoming-transfer"
	OpenAvailableSubTotalTransactionType1CanceledTransfer                  OpenAvailableSubTotalTransactionType1 = "canceled-transfer"
	OpenAvailableSubTotalTransactionType1ReturnedTransfer                  OpenAvailableSubTotalTransactionType1 = "returned-transfer"
	OpenAvailableSubTotalTransactionType1BalanceReserve                    OpenAvailableSubTotalTransactionType1 = "balance-reserve"
	OpenAvailableSubTotalTransactionType1BalanceReserveReturn              OpenAvailableSubTotalTransactionType1 = "balance-reserve-return"
	OpenAvailableSubTotalTransactionType1InvoiceRoundingCompensation       OpenAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	OpenAvailableSubTotalTransactionType1RollingReserveHold                OpenAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	OpenAvailableSubTotalTransactionType1RollingReserveRelease             OpenAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	OpenAvailableSubTotalTransactionType1BalanceCorrection                 OpenAvailableSubTotalTransactionType1 = "balance-correction"
	OpenAvailableSubTotalTransactionType1Repayment                         OpenAvailableSubTotalTransactionType1 = "repayment"
	OpenAvailableSubTotalTransactionType1Loan                              OpenAvailableSubTotalTransactionType1 = "loan"
	OpenAvailableSubTotalTransactionType1BalanceTopup                      OpenAvailableSubTotalTransactionType1 = "balance-topup"
	OpenAvailableSubTotalTransactionType1CashCollateralIssuance            OpenAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	OpenAvailableSubTotalTransactionType1CashCollateralRelease             OpenAvailableSubTotalTransactionType1 = "cash-collateral-release"
	OpenAvailableSubTotalTransactionType1PendingRollingReserve             OpenAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	OpenAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        OpenAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	OpenAvailableSubTotalTransactionType1HeldRollingReserve                OpenAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	OpenAvailableSubTotalTransactionType1ReleasedRollingReserve            OpenAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e OpenAvailableSubTotalTransactionType1) ToPointer() *OpenAvailableSubTotalTransactionType1 {
	return &e
}
func (e *OpenAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = OpenAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenAvailableSubTotalTransactionType1: %v", v)
	}
}

type OpenAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *OpenAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *OpenAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *OpenAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *OpenAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *OpenAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *OpenAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *OpenAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *OpenAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *OpenAvailableSubTotal1) GetMethod() *OpenAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *OpenAvailableSubTotal1) GetCardIssuer() *OpenAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *OpenAvailableSubTotal1) GetCardAudience() *OpenAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *OpenAvailableSubTotal1) GetCardRegion() *OpenAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *OpenAvailableSubTotal1) GetFeeType() *OpenAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *OpenAvailableSubTotal1) GetPrepaymentPartType() *OpenAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *OpenAvailableSubTotal1) GetTransactionType() *OpenAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// OpenAvailableSubtotalMethod2 - Payment type of the transactions
type OpenAvailableSubtotalMethod2 string

const (
	OpenAvailableSubtotalMethod2Alma              OpenAvailableSubtotalMethod2 = "alma"
	OpenAvailableSubtotalMethod2Bacs              OpenAvailableSubtotalMethod2 = "bacs"
	OpenAvailableSubtotalMethod2Applepay          OpenAvailableSubtotalMethod2 = "applepay"
	OpenAvailableSubtotalMethod2Bancomatpay       OpenAvailableSubtotalMethod2 = "bancomatpay"
	OpenAvailableSubtotalMethod2Bancontact        OpenAvailableSubtotalMethod2 = "bancontact"
	OpenAvailableSubtotalMethod2Banktransfer      OpenAvailableSubtotalMethod2 = "banktransfer"
	OpenAvailableSubtotalMethod2Belfius           OpenAvailableSubtotalMethod2 = "belfius"
	OpenAvailableSubtotalMethod2Billie            OpenAvailableSubtotalMethod2 = "billie"
	OpenAvailableSubtotalMethod2Bizum             OpenAvailableSubtotalMethod2 = "bizum"
	OpenAvailableSubtotalMethod2Bitcoin           OpenAvailableSubtotalMethod2 = "bitcoin"
	OpenAvailableSubtotalMethod2Blik              OpenAvailableSubtotalMethod2 = "blik"
	OpenAvailableSubtotalMethod2Creditcard        OpenAvailableSubtotalMethod2 = "creditcard"
	OpenAvailableSubtotalMethod2Directdebit       OpenAvailableSubtotalMethod2 = "directdebit"
	OpenAvailableSubtotalMethod2Eps               OpenAvailableSubtotalMethod2 = "eps"
	OpenAvailableSubtotalMethod2Giftcard          OpenAvailableSubtotalMethod2 = "giftcard"
	OpenAvailableSubtotalMethod2Giropay           OpenAvailableSubtotalMethod2 = "giropay"
	OpenAvailableSubtotalMethod2Googlepay         OpenAvailableSubtotalMethod2 = "googlepay"
	OpenAvailableSubtotalMethod2Ideal             OpenAvailableSubtotalMethod2 = "ideal"
	OpenAvailableSubtotalMethod2In3               OpenAvailableSubtotalMethod2 = "in3"
	OpenAvailableSubtotalMethod2Inghomepay        OpenAvailableSubtotalMethod2 = "inghomepay"
	OpenAvailableSubtotalMethod2Kbc               OpenAvailableSubtotalMethod2 = "kbc"
	OpenAvailableSubtotalMethod2Klarnapaylater    OpenAvailableSubtotalMethod2 = "klarnapaylater"
	OpenAvailableSubtotalMethod2Klarnapaynow      OpenAvailableSubtotalMethod2 = "klarnapaynow"
	OpenAvailableSubtotalMethod2Klarnasliceit     OpenAvailableSubtotalMethod2 = "klarnasliceit"
	OpenAvailableSubtotalMethod2Klarna            OpenAvailableSubtotalMethod2 = "klarna"
	OpenAvailableSubtotalMethod2Mbway             OpenAvailableSubtotalMethod2 = "mbway"
	OpenAvailableSubtotalMethod2Multibanco        OpenAvailableSubtotalMethod2 = "multibanco"
	OpenAvailableSubtotalMethod2Mybank            OpenAvailableSubtotalMethod2 = "mybank"
	OpenAvailableSubtotalMethod2Paybybank         OpenAvailableSubtotalMethod2 = "paybybank"
	OpenAvailableSubtotalMethod2Payconiq          OpenAvailableSubtotalMethod2 = "payconiq"
	OpenAvailableSubtotalMethod2Paypal            OpenAvailableSubtotalMethod2 = "paypal"
	OpenAvailableSubtotalMethod2Paysafecard       OpenAvailableSubtotalMethod2 = "paysafecard"
	OpenAvailableSubtotalMethod2Przelewy24        OpenAvailableSubtotalMethod2 = "przelewy24"
	OpenAvailableSubtotalMethod2Riverty           OpenAvailableSubtotalMethod2 = "riverty"
	OpenAvailableSubtotalMethod2Satispay          OpenAvailableSubtotalMethod2 = "satispay"
	OpenAvailableSubtotalMethod2Podiumcadeaukaart OpenAvailableSubtotalMethod2 = "podiumcadeaukaart"
	OpenAvailableSubtotalMethod2Pointofsale       OpenAvailableSubtotalMethod2 = "pointofsale"
	OpenAvailableSubtotalMethod2Sofort            OpenAvailableSubtotalMethod2 = "sofort"
	OpenAvailableSubtotalMethod2Swish             OpenAvailableSubtotalMethod2 = "swish"
	OpenAvailableSubtotalMethod2Trustly           OpenAvailableSubtotalMethod2 = "trustly"
	OpenAvailableSubtotalMethod2Twint             OpenAvailableSubtotalMethod2 = "twint"
	OpenAvailableSubtotalMethod2Voucher           OpenAvailableSubtotalMethod2 = "voucher"
)

func (e OpenAvailableSubtotalMethod2) ToPointer() *OpenAvailableSubtotalMethod2 {
	return &e
}
func (e *OpenAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = OpenAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenAvailableSubtotalMethod2: %v", v)
	}
}

// OpenAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type OpenAvailableSubtotalCardIssuer2 string

const (
	OpenAvailableSubtotalCardIssuer2Amex          OpenAvailableSubtotalCardIssuer2 = "amex"
	OpenAvailableSubtotalCardIssuer2Maestro       OpenAvailableSubtotalCardIssuer2 = "maestro"
	OpenAvailableSubtotalCardIssuer2CarteBancaire OpenAvailableSubtotalCardIssuer2 = "carte-bancaire"
	OpenAvailableSubtotalCardIssuer2Other         OpenAvailableSubtotalCardIssuer2 = "other"
)

func (e OpenAvailableSubtotalCardIssuer2) ToPointer() *OpenAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *OpenAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = OpenAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenAvailableSubtotalCardIssuer2: %v", v)
	}
}

// OpenAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type OpenAvailableSubtotalCardAudience2 string

const (
	OpenAvailableSubtotalCardAudience2Corporate OpenAvailableSubtotalCardAudience2 = "corporate"
	OpenAvailableSubtotalCardAudience2Other     OpenAvailableSubtotalCardAudience2 = "other"
)

func (e OpenAvailableSubtotalCardAudience2) ToPointer() *OpenAvailableSubtotalCardAudience2 {
	return &e
}
func (e *OpenAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = OpenAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenAvailableSubtotalCardAudience2: %v", v)
	}
}

// OpenAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type OpenAvailableSubtotalCardRegion2 string

const (
	OpenAvailableSubtotalCardRegion2IntraEea OpenAvailableSubtotalCardRegion2 = "intra-eea"
	OpenAvailableSubtotalCardRegion2IntraEu  OpenAvailableSubtotalCardRegion2 = "intra-eu"
	OpenAvailableSubtotalCardRegion2Domestic OpenAvailableSubtotalCardRegion2 = "domestic"
	OpenAvailableSubtotalCardRegion2Other    OpenAvailableSubtotalCardRegion2 = "other"
)

func (e OpenAvailableSubtotalCardRegion2) ToPointer() *OpenAvailableSubtotalCardRegion2 {
	return &e
}
func (e *OpenAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = OpenAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenAvailableSubtotalCardRegion2: %v", v)
	}
}

// OpenAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type OpenAvailableSubtotalFeeType2 string

const (
	OpenAvailableSubtotalFeeType2PaymentFee                                        OpenAvailableSubtotalFeeType2 = "payment-fee"
	OpenAvailableSubtotalFeeType2DirectDebitFailureFee                             OpenAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	OpenAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        OpenAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	OpenAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  OpenAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	OpenAvailableSubtotalFeeType2PartnerCommission                                 OpenAvailableSubtotalFeeType2 = "partner-commission"
	OpenAvailableSubtotalFeeType2ApplicationFee                                    OpenAvailableSubtotalFeeType2 = "application-fee"
	OpenAvailableSubtotalFeeType2CaptureFee                                        OpenAvailableSubtotalFeeType2 = "capture-fee"
	OpenAvailableSubtotalFeeType2RefundFee                                         OpenAvailableSubtotalFeeType2 = "refund-fee"
	OpenAvailableSubtotalFeeType2ChargebackFee                                     OpenAvailableSubtotalFeeType2 = "chargeback-fee"
	OpenAvailableSubtotalFeeType2PaymentNotificationFee                            OpenAvailableSubtotalFeeType2 = "payment-notification-fee"
	OpenAvailableSubtotalFeeType2TransferNotificationFee                           OpenAvailableSubtotalFeeType2 = "transfer-notification-fee"
	OpenAvailableSubtotalFeeType2PayoutFee                                         OpenAvailableSubtotalFeeType2 = "payout-fee"
	OpenAvailableSubtotalFeeType2FeeDiscount                                       OpenAvailableSubtotalFeeType2 = "fee-discount"
	OpenAvailableSubtotalFeeType2FeeReimbursement                                  OpenAvailableSubtotalFeeType2 = "fee-reimbursement"
	OpenAvailableSubtotalFeeType2PlatformVolumeFee                                 OpenAvailableSubtotalFeeType2 = "platform-volume-fee"
	OpenAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 OpenAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	OpenAvailableSubtotalFeeType2BalanceChargeFee                                  OpenAvailableSubtotalFeeType2 = "balance-charge-fee"
	OpenAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   OpenAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	OpenAvailableSubtotalFeeType2TerminalMonthlyFee                                OpenAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	OpenAvailableSubtotalFeeType2AcceptanceRiskFee                                 OpenAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	OpenAvailableSubtotalFeeType2TopUpFee                                          OpenAvailableSubtotalFeeType2 = "top-up-fee"
	OpenAvailableSubtotalFeeType2PaymentGatewayFee                                 OpenAvailableSubtotalFeeType2 = "payment-gateway-fee"
	OpenAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   OpenAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	OpenAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee OpenAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	OpenAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             OpenAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	OpenAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           OpenAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	OpenAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           OpenAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e OpenAvailableSubtotalFeeType2) ToPointer() *OpenAvailableSubtotalFeeType2 {
	return &e
}
func (e *OpenAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = OpenAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenAvailableSubtotalFeeType2: %v", v)
	}
}

// OpenAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type OpenAvailableSubtotalPrepaymentPartType2 string

const (
	OpenAvailableSubtotalPrepaymentPartType2Fee                     OpenAvailableSubtotalPrepaymentPartType2 = "fee"
	OpenAvailableSubtotalPrepaymentPartType2FeeReimbursement        OpenAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	OpenAvailableSubtotalPrepaymentPartType2FeeDiscount             OpenAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	OpenAvailableSubtotalPrepaymentPartType2FeeVat                  OpenAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	OpenAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation OpenAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e OpenAvailableSubtotalPrepaymentPartType2) ToPointer() *OpenAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *OpenAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = OpenAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// OpenAvailableSubtotalTransactionType2 - Represents the transaction type
type OpenAvailableSubtotalTransactionType2 string

const (
	OpenAvailableSubtotalTransactionType2Payment                           OpenAvailableSubtotalTransactionType2 = "payment"
	OpenAvailableSubtotalTransactionType2SplitPayment                      OpenAvailableSubtotalTransactionType2 = "split-payment"
	OpenAvailableSubtotalTransactionType2FailedPayment                     OpenAvailableSubtotalTransactionType2 = "failed-payment"
	OpenAvailableSubtotalTransactionType2FailedPlatformSplitPayment        OpenAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	OpenAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    OpenAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	OpenAvailableSubtotalTransactionType2Capture                           OpenAvailableSubtotalTransactionType2 = "capture"
	OpenAvailableSubtotalTransactionType2SplitTransaction                  OpenAvailableSubtotalTransactionType2 = "split-transaction"
	OpenAvailableSubtotalTransactionType2Refund                            OpenAvailableSubtotalTransactionType2 = "refund"
	OpenAvailableSubtotalTransactionType2PlatformPaymentRefund             OpenAvailableSubtotalTransactionType2 = "platform-payment-refund"
	OpenAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     OpenAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	OpenAvailableSubtotalTransactionType2RefundCompensation                OpenAvailableSubtotalTransactionType2 = "refund-compensation"
	OpenAvailableSubtotalTransactionType2ReturnedRefundCompensation        OpenAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	OpenAvailableSubtotalTransactionType2ReturnedRefund                    OpenAvailableSubtotalTransactionType2 = "returned-refund"
	OpenAvailableSubtotalTransactionType2Chargeback                        OpenAvailableSubtotalTransactionType2 = "chargeback"
	OpenAvailableSubtotalTransactionType2ChargebackReversal                OpenAvailableSubtotalTransactionType2 = "chargeback-reversal"
	OpenAvailableSubtotalTransactionType2ChargebackCompensation            OpenAvailableSubtotalTransactionType2 = "chargeback-compensation"
	OpenAvailableSubtotalTransactionType2ReversedChargebackCompensation    OpenAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	OpenAvailableSubtotalTransactionType2PlatformPaymentChargeback         OpenAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	OpenAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback OpenAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	OpenAvailableSubtotalTransactionType2FeePrepayment                     OpenAvailableSubtotalTransactionType2 = "fee-prepayment"
	OpenAvailableSubtotalTransactionType2OutgoingTransfer                  OpenAvailableSubtotalTransactionType2 = "outgoing-transfer"
	OpenAvailableSubtotalTransactionType2IncomingTransfer                  OpenAvailableSubtotalTransactionType2 = "incoming-transfer"
	OpenAvailableSubtotalTransactionType2CanceledTransfer                  OpenAvailableSubtotalTransactionType2 = "canceled-transfer"
	OpenAvailableSubtotalTransactionType2ReturnedTransfer                  OpenAvailableSubtotalTransactionType2 = "returned-transfer"
	OpenAvailableSubtotalTransactionType2BalanceReserve                    OpenAvailableSubtotalTransactionType2 = "balance-reserve"
	OpenAvailableSubtotalTransactionType2BalanceReserveReturn              OpenAvailableSubtotalTransactionType2 = "balance-reserve-return"
	OpenAvailableSubtotalTransactionType2InvoiceRoundingCompensation       OpenAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	OpenAvailableSubtotalTransactionType2RollingReserveHold                OpenAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	OpenAvailableSubtotalTransactionType2RollingReserveRelease             OpenAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	OpenAvailableSubtotalTransactionType2BalanceCorrection                 OpenAvailableSubtotalTransactionType2 = "balance-correction"
	OpenAvailableSubtotalTransactionType2Repayment                         OpenAvailableSubtotalTransactionType2 = "repayment"
	OpenAvailableSubtotalTransactionType2Loan                              OpenAvailableSubtotalTransactionType2 = "loan"
	OpenAvailableSubtotalTransactionType2BalanceTopup                      OpenAvailableSubtotalTransactionType2 = "balance-topup"
	OpenAvailableSubtotalTransactionType2CashCollateralIssuance            OpenAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	OpenAvailableSubtotalTransactionType2CashCollateralRelease             OpenAvailableSubtotalTransactionType2 = "cash-collateral-release"
	OpenAvailableSubtotalTransactionType2PendingRollingReserve             OpenAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	OpenAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        OpenAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	OpenAvailableSubtotalTransactionType2HeldRollingReserve                OpenAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	OpenAvailableSubtotalTransactionType2ReleasedRollingReserve            OpenAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e OpenAvailableSubtotalTransactionType2) ToPointer() *OpenAvailableSubtotalTransactionType2 {
	return &e
}
func (e *OpenAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = OpenAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpenAvailableSubtotalTransactionType2: %v", v)
	}
}

type OpenAvailableSubtotal2 struct {
	SubTotals []OpenAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *OpenAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *OpenAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *OpenAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *OpenAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *OpenAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *OpenAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *OpenAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *OpenAvailableSubtotal2) GetSubTotals() []OpenAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *OpenAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *OpenAvailableSubtotal2) GetMethod() *OpenAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *OpenAvailableSubtotal2) GetCardIssuer() *OpenAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *OpenAvailableSubtotal2) GetCardAudience() *OpenAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *OpenAvailableSubtotal2) GetCardRegion() *OpenAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *OpenAvailableSubtotal2) GetFeeType() *OpenAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *OpenAvailableSubtotal2) GetPrepaymentPartType() *OpenAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *OpenAvailableSubtotal2) GetTransactionType() *OpenAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type OpenAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *OpenAvailableAmount     `json:"amount,omitempty"`
	Subtotals []OpenAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *OpenAvailable) GetAmount() *OpenAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *OpenAvailable) GetSubtotals() []OpenAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// Open - Only available on `transaction-categories` grouping.
type Open struct {
	Pending   *OpenPending   `json:"pending,omitempty"`
	Available *OpenAvailable `json:"available,omitempty"`
}

func (o *Open) GetPending() *OpenPending {
	if o == nil {
		return nil
	}
	return o.Pending
}

func (o *Open) GetAvailable() *OpenAvailable {
	if o == nil {
		return nil
	}
	return o.Available
}

// ClosePendingAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type ClosePendingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ClosePendingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ClosePendingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ClosePendingSubTotalMethod1 - Payment type of the transactions
type ClosePendingSubTotalMethod1 string

const (
	ClosePendingSubTotalMethod1Alma              ClosePendingSubTotalMethod1 = "alma"
	ClosePendingSubTotalMethod1Bacs              ClosePendingSubTotalMethod1 = "bacs"
	ClosePendingSubTotalMethod1Applepay          ClosePendingSubTotalMethod1 = "applepay"
	ClosePendingSubTotalMethod1Bancomatpay       ClosePendingSubTotalMethod1 = "bancomatpay"
	ClosePendingSubTotalMethod1Bancontact        ClosePendingSubTotalMethod1 = "bancontact"
	ClosePendingSubTotalMethod1Banktransfer      ClosePendingSubTotalMethod1 = "banktransfer"
	ClosePendingSubTotalMethod1Belfius           ClosePendingSubTotalMethod1 = "belfius"
	ClosePendingSubTotalMethod1Billie            ClosePendingSubTotalMethod1 = "billie"
	ClosePendingSubTotalMethod1Bizum             ClosePendingSubTotalMethod1 = "bizum"
	ClosePendingSubTotalMethod1Bitcoin           ClosePendingSubTotalMethod1 = "bitcoin"
	ClosePendingSubTotalMethod1Blik              ClosePendingSubTotalMethod1 = "blik"
	ClosePendingSubTotalMethod1Creditcard        ClosePendingSubTotalMethod1 = "creditcard"
	ClosePendingSubTotalMethod1Directdebit       ClosePendingSubTotalMethod1 = "directdebit"
	ClosePendingSubTotalMethod1Eps               ClosePendingSubTotalMethod1 = "eps"
	ClosePendingSubTotalMethod1Giftcard          ClosePendingSubTotalMethod1 = "giftcard"
	ClosePendingSubTotalMethod1Giropay           ClosePendingSubTotalMethod1 = "giropay"
	ClosePendingSubTotalMethod1Googlepay         ClosePendingSubTotalMethod1 = "googlepay"
	ClosePendingSubTotalMethod1Ideal             ClosePendingSubTotalMethod1 = "ideal"
	ClosePendingSubTotalMethod1In3               ClosePendingSubTotalMethod1 = "in3"
	ClosePendingSubTotalMethod1Inghomepay        ClosePendingSubTotalMethod1 = "inghomepay"
	ClosePendingSubTotalMethod1Kbc               ClosePendingSubTotalMethod1 = "kbc"
	ClosePendingSubTotalMethod1Klarnapaylater    ClosePendingSubTotalMethod1 = "klarnapaylater"
	ClosePendingSubTotalMethod1Klarnapaynow      ClosePendingSubTotalMethod1 = "klarnapaynow"
	ClosePendingSubTotalMethod1Klarnasliceit     ClosePendingSubTotalMethod1 = "klarnasliceit"
	ClosePendingSubTotalMethod1Klarna            ClosePendingSubTotalMethod1 = "klarna"
	ClosePendingSubTotalMethod1Mbway             ClosePendingSubTotalMethod1 = "mbway"
	ClosePendingSubTotalMethod1Multibanco        ClosePendingSubTotalMethod1 = "multibanco"
	ClosePendingSubTotalMethod1Mybank            ClosePendingSubTotalMethod1 = "mybank"
	ClosePendingSubTotalMethod1Paybybank         ClosePendingSubTotalMethod1 = "paybybank"
	ClosePendingSubTotalMethod1Payconiq          ClosePendingSubTotalMethod1 = "payconiq"
	ClosePendingSubTotalMethod1Paypal            ClosePendingSubTotalMethod1 = "paypal"
	ClosePendingSubTotalMethod1Paysafecard       ClosePendingSubTotalMethod1 = "paysafecard"
	ClosePendingSubTotalMethod1Przelewy24        ClosePendingSubTotalMethod1 = "przelewy24"
	ClosePendingSubTotalMethod1Riverty           ClosePendingSubTotalMethod1 = "riverty"
	ClosePendingSubTotalMethod1Satispay          ClosePendingSubTotalMethod1 = "satispay"
	ClosePendingSubTotalMethod1Podiumcadeaukaart ClosePendingSubTotalMethod1 = "podiumcadeaukaart"
	ClosePendingSubTotalMethod1Pointofsale       ClosePendingSubTotalMethod1 = "pointofsale"
	ClosePendingSubTotalMethod1Sofort            ClosePendingSubTotalMethod1 = "sofort"
	ClosePendingSubTotalMethod1Swish             ClosePendingSubTotalMethod1 = "swish"
	ClosePendingSubTotalMethod1Trustly           ClosePendingSubTotalMethod1 = "trustly"
	ClosePendingSubTotalMethod1Twint             ClosePendingSubTotalMethod1 = "twint"
	ClosePendingSubTotalMethod1Voucher           ClosePendingSubTotalMethod1 = "voucher"
)

func (e ClosePendingSubTotalMethod1) ToPointer() *ClosePendingSubTotalMethod1 {
	return &e
}
func (e *ClosePendingSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = ClosePendingSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClosePendingSubTotalMethod1: %v", v)
	}
}

// ClosePendingSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type ClosePendingSubTotalCardIssuer1 string

const (
	ClosePendingSubTotalCardIssuer1Amex          ClosePendingSubTotalCardIssuer1 = "amex"
	ClosePendingSubTotalCardIssuer1Maestro       ClosePendingSubTotalCardIssuer1 = "maestro"
	ClosePendingSubTotalCardIssuer1CarteBancaire ClosePendingSubTotalCardIssuer1 = "carte-bancaire"
	ClosePendingSubTotalCardIssuer1Other         ClosePendingSubTotalCardIssuer1 = "other"
)

func (e ClosePendingSubTotalCardIssuer1) ToPointer() *ClosePendingSubTotalCardIssuer1 {
	return &e
}
func (e *ClosePendingSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = ClosePendingSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClosePendingSubTotalCardIssuer1: %v", v)
	}
}

// ClosePendingSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type ClosePendingSubTotalCardAudience1 string

const (
	ClosePendingSubTotalCardAudience1Corporate ClosePendingSubTotalCardAudience1 = "corporate"
	ClosePendingSubTotalCardAudience1Other     ClosePendingSubTotalCardAudience1 = "other"
)

func (e ClosePendingSubTotalCardAudience1) ToPointer() *ClosePendingSubTotalCardAudience1 {
	return &e
}
func (e *ClosePendingSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = ClosePendingSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClosePendingSubTotalCardAudience1: %v", v)
	}
}

// ClosePendingSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type ClosePendingSubTotalCardRegion1 string

const (
	ClosePendingSubTotalCardRegion1IntraEea ClosePendingSubTotalCardRegion1 = "intra-eea"
	ClosePendingSubTotalCardRegion1IntraEu  ClosePendingSubTotalCardRegion1 = "intra-eu"
	ClosePendingSubTotalCardRegion1Domestic ClosePendingSubTotalCardRegion1 = "domestic"
	ClosePendingSubTotalCardRegion1Other    ClosePendingSubTotalCardRegion1 = "other"
)

func (e ClosePendingSubTotalCardRegion1) ToPointer() *ClosePendingSubTotalCardRegion1 {
	return &e
}
func (e *ClosePendingSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = ClosePendingSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClosePendingSubTotalCardRegion1: %v", v)
	}
}

// ClosePendingSubTotalFeeType1 - Present when the transaction represents a fee.
type ClosePendingSubTotalFeeType1 string

const (
	ClosePendingSubTotalFeeType1PaymentFee                                        ClosePendingSubTotalFeeType1 = "payment-fee"
	ClosePendingSubTotalFeeType1DirectDebitFailureFee                             ClosePendingSubTotalFeeType1 = "direct-debit-failure-fee"
	ClosePendingSubTotalFeeType1UnauthorizedDirectDebitFee                        ClosePendingSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	ClosePendingSubTotalFeeType1BankChargedDirectDebitFailureFee                  ClosePendingSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	ClosePendingSubTotalFeeType1PartnerCommission                                 ClosePendingSubTotalFeeType1 = "partner-commission"
	ClosePendingSubTotalFeeType1ApplicationFee                                    ClosePendingSubTotalFeeType1 = "application-fee"
	ClosePendingSubTotalFeeType1CaptureFee                                        ClosePendingSubTotalFeeType1 = "capture-fee"
	ClosePendingSubTotalFeeType1RefundFee                                         ClosePendingSubTotalFeeType1 = "refund-fee"
	ClosePendingSubTotalFeeType1ChargebackFee                                     ClosePendingSubTotalFeeType1 = "chargeback-fee"
	ClosePendingSubTotalFeeType1PaymentNotificationFee                            ClosePendingSubTotalFeeType1 = "payment-notification-fee"
	ClosePendingSubTotalFeeType1TransferNotificationFee                           ClosePendingSubTotalFeeType1 = "transfer-notification-fee"
	ClosePendingSubTotalFeeType1PayoutFee                                         ClosePendingSubTotalFeeType1 = "payout-fee"
	ClosePendingSubTotalFeeType1FeeDiscount                                       ClosePendingSubTotalFeeType1 = "fee-discount"
	ClosePendingSubTotalFeeType1FeeReimbursement                                  ClosePendingSubTotalFeeType1 = "fee-reimbursement"
	ClosePendingSubTotalFeeType1PlatformVolumeFee                                 ClosePendingSubTotalFeeType1 = "platform-volume-fee"
	ClosePendingSubTotalFeeType1PlatformConnectedOrganizationsFee                 ClosePendingSubTotalFeeType1 = "platform-connected-organizations-fee"
	ClosePendingSubTotalFeeType1BalanceChargeFee                                  ClosePendingSubTotalFeeType1 = "balance-charge-fee"
	ClosePendingSubTotalFeeType1ThreedsAuthenticationAttemptFee                   ClosePendingSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	ClosePendingSubTotalFeeType1TerminalMonthlyFee                                ClosePendingSubTotalFeeType1 = "terminal-monthly-fee"
	ClosePendingSubTotalFeeType1AcceptanceRiskFee                                 ClosePendingSubTotalFeeType1 = "acceptance-risk-fee"
	ClosePendingSubTotalFeeType1TopUpFee                                          ClosePendingSubTotalFeeType1 = "top-up-fee"
	ClosePendingSubTotalFeeType1PaymentGatewayFee                                 ClosePendingSubTotalFeeType1 = "payment-gateway-fee"
	ClosePendingSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   ClosePendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	ClosePendingSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee ClosePendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	ClosePendingSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             ClosePendingSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	ClosePendingSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           ClosePendingSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	ClosePendingSubTotalFeeType1MinimumInvoiceAmountFee                           ClosePendingSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e ClosePendingSubTotalFeeType1) ToPointer() *ClosePendingSubTotalFeeType1 {
	return &e
}
func (e *ClosePendingSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = ClosePendingSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClosePendingSubTotalFeeType1: %v", v)
	}
}

// ClosePendingSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type ClosePendingSubTotalPrepaymentPartType1 string

const (
	ClosePendingSubTotalPrepaymentPartType1Fee                     ClosePendingSubTotalPrepaymentPartType1 = "fee"
	ClosePendingSubTotalPrepaymentPartType1FeeReimbursement        ClosePendingSubTotalPrepaymentPartType1 = "fee-reimbursement"
	ClosePendingSubTotalPrepaymentPartType1FeeDiscount             ClosePendingSubTotalPrepaymentPartType1 = "fee-discount"
	ClosePendingSubTotalPrepaymentPartType1FeeVat                  ClosePendingSubTotalPrepaymentPartType1 = "fee-vat"
	ClosePendingSubTotalPrepaymentPartType1FeeRoundingCompensation ClosePendingSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e ClosePendingSubTotalPrepaymentPartType1) ToPointer() *ClosePendingSubTotalPrepaymentPartType1 {
	return &e
}
func (e *ClosePendingSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = ClosePendingSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClosePendingSubTotalPrepaymentPartType1: %v", v)
	}
}

// ClosePendingSubTotalTransactionType1 - Represents the transaction type
type ClosePendingSubTotalTransactionType1 string

const (
	ClosePendingSubTotalTransactionType1Payment                           ClosePendingSubTotalTransactionType1 = "payment"
	ClosePendingSubTotalTransactionType1SplitPayment                      ClosePendingSubTotalTransactionType1 = "split-payment"
	ClosePendingSubTotalTransactionType1FailedPayment                     ClosePendingSubTotalTransactionType1 = "failed-payment"
	ClosePendingSubTotalTransactionType1FailedPlatformSplitPayment        ClosePendingSubTotalTransactionType1 = "failed-platform-split-payment"
	ClosePendingSubTotalTransactionType1FailedSplitPaymentCompensation    ClosePendingSubTotalTransactionType1 = "failed-split-payment-compensation"
	ClosePendingSubTotalTransactionType1Capture                           ClosePendingSubTotalTransactionType1 = "capture"
	ClosePendingSubTotalTransactionType1SplitTransaction                  ClosePendingSubTotalTransactionType1 = "split-transaction"
	ClosePendingSubTotalTransactionType1Refund                            ClosePendingSubTotalTransactionType1 = "refund"
	ClosePendingSubTotalTransactionType1PlatformPaymentRefund             ClosePendingSubTotalTransactionType1 = "platform-payment-refund"
	ClosePendingSubTotalTransactionType1ReturnedPlatformPaymentRefund     ClosePendingSubTotalTransactionType1 = "returned-platform-payment-refund"
	ClosePendingSubTotalTransactionType1RefundCompensation                ClosePendingSubTotalTransactionType1 = "refund-compensation"
	ClosePendingSubTotalTransactionType1ReturnedRefundCompensation        ClosePendingSubTotalTransactionType1 = "returned-refund-compensation"
	ClosePendingSubTotalTransactionType1ReturnedRefund                    ClosePendingSubTotalTransactionType1 = "returned-refund"
	ClosePendingSubTotalTransactionType1Chargeback                        ClosePendingSubTotalTransactionType1 = "chargeback"
	ClosePendingSubTotalTransactionType1ChargebackReversal                ClosePendingSubTotalTransactionType1 = "chargeback-reversal"
	ClosePendingSubTotalTransactionType1ChargebackCompensation            ClosePendingSubTotalTransactionType1 = "chargeback-compensation"
	ClosePendingSubTotalTransactionType1ReversedChargebackCompensation    ClosePendingSubTotalTransactionType1 = "reversed-chargeback-compensation"
	ClosePendingSubTotalTransactionType1PlatformPaymentChargeback         ClosePendingSubTotalTransactionType1 = "platform-payment-chargeback"
	ClosePendingSubTotalTransactionType1ReversedPlatformPaymentChargeback ClosePendingSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	ClosePendingSubTotalTransactionType1FeePrepayment                     ClosePendingSubTotalTransactionType1 = "fee-prepayment"
	ClosePendingSubTotalTransactionType1OutgoingTransfer                  ClosePendingSubTotalTransactionType1 = "outgoing-transfer"
	ClosePendingSubTotalTransactionType1IncomingTransfer                  ClosePendingSubTotalTransactionType1 = "incoming-transfer"
	ClosePendingSubTotalTransactionType1CanceledTransfer                  ClosePendingSubTotalTransactionType1 = "canceled-transfer"
	ClosePendingSubTotalTransactionType1ReturnedTransfer                  ClosePendingSubTotalTransactionType1 = "returned-transfer"
	ClosePendingSubTotalTransactionType1BalanceReserve                    ClosePendingSubTotalTransactionType1 = "balance-reserve"
	ClosePendingSubTotalTransactionType1BalanceReserveReturn              ClosePendingSubTotalTransactionType1 = "balance-reserve-return"
	ClosePendingSubTotalTransactionType1InvoiceRoundingCompensation       ClosePendingSubTotalTransactionType1 = "invoice-rounding-compensation"
	ClosePendingSubTotalTransactionType1RollingReserveHold                ClosePendingSubTotalTransactionType1 = "rolling-reserve-hold"
	ClosePendingSubTotalTransactionType1RollingReserveRelease             ClosePendingSubTotalTransactionType1 = "rolling-reserve-release"
	ClosePendingSubTotalTransactionType1BalanceCorrection                 ClosePendingSubTotalTransactionType1 = "balance-correction"
	ClosePendingSubTotalTransactionType1Repayment                         ClosePendingSubTotalTransactionType1 = "repayment"
	ClosePendingSubTotalTransactionType1Loan                              ClosePendingSubTotalTransactionType1 = "loan"
	ClosePendingSubTotalTransactionType1BalanceTopup                      ClosePendingSubTotalTransactionType1 = "balance-topup"
	ClosePendingSubTotalTransactionType1CashCollateralIssuance            ClosePendingSubTotalTransactionType1 = "cash-collateral-issuance';"
	ClosePendingSubTotalTransactionType1CashCollateralRelease             ClosePendingSubTotalTransactionType1 = "cash-collateral-release"
	ClosePendingSubTotalTransactionType1PendingRollingReserve             ClosePendingSubTotalTransactionType1 = "pending-rolling-reserve"
	ClosePendingSubTotalTransactionType1ToBeReleasedRollingReserve        ClosePendingSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	ClosePendingSubTotalTransactionType1HeldRollingReserve                ClosePendingSubTotalTransactionType1 = "held-rolling-reserve"
	ClosePendingSubTotalTransactionType1ReleasedRollingReserve            ClosePendingSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e ClosePendingSubTotalTransactionType1) ToPointer() *ClosePendingSubTotalTransactionType1 {
	return &e
}
func (e *ClosePendingSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = ClosePendingSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClosePendingSubTotalTransactionType1: %v", v)
	}
}

type ClosePendingSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *ClosePendingSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *ClosePendingSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *ClosePendingSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *ClosePendingSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *ClosePendingSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *ClosePendingSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *ClosePendingSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *ClosePendingSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ClosePendingSubTotal1) GetMethod() *ClosePendingSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *ClosePendingSubTotal1) GetCardIssuer() *ClosePendingSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *ClosePendingSubTotal1) GetCardAudience() *ClosePendingSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *ClosePendingSubTotal1) GetCardRegion() *ClosePendingSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *ClosePendingSubTotal1) GetFeeType() *ClosePendingSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *ClosePendingSubTotal1) GetPrepaymentPartType() *ClosePendingSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *ClosePendingSubTotal1) GetTransactionType() *ClosePendingSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// ClosePendingSubtotalMethod2 - Payment type of the transactions
type ClosePendingSubtotalMethod2 string

const (
	ClosePendingSubtotalMethod2Alma              ClosePendingSubtotalMethod2 = "alma"
	ClosePendingSubtotalMethod2Bacs              ClosePendingSubtotalMethod2 = "bacs"
	ClosePendingSubtotalMethod2Applepay          ClosePendingSubtotalMethod2 = "applepay"
	ClosePendingSubtotalMethod2Bancomatpay       ClosePendingSubtotalMethod2 = "bancomatpay"
	ClosePendingSubtotalMethod2Bancontact        ClosePendingSubtotalMethod2 = "bancontact"
	ClosePendingSubtotalMethod2Banktransfer      ClosePendingSubtotalMethod2 = "banktransfer"
	ClosePendingSubtotalMethod2Belfius           ClosePendingSubtotalMethod2 = "belfius"
	ClosePendingSubtotalMethod2Billie            ClosePendingSubtotalMethod2 = "billie"
	ClosePendingSubtotalMethod2Bizum             ClosePendingSubtotalMethod2 = "bizum"
	ClosePendingSubtotalMethod2Bitcoin           ClosePendingSubtotalMethod2 = "bitcoin"
	ClosePendingSubtotalMethod2Blik              ClosePendingSubtotalMethod2 = "blik"
	ClosePendingSubtotalMethod2Creditcard        ClosePendingSubtotalMethod2 = "creditcard"
	ClosePendingSubtotalMethod2Directdebit       ClosePendingSubtotalMethod2 = "directdebit"
	ClosePendingSubtotalMethod2Eps               ClosePendingSubtotalMethod2 = "eps"
	ClosePendingSubtotalMethod2Giftcard          ClosePendingSubtotalMethod2 = "giftcard"
	ClosePendingSubtotalMethod2Giropay           ClosePendingSubtotalMethod2 = "giropay"
	ClosePendingSubtotalMethod2Googlepay         ClosePendingSubtotalMethod2 = "googlepay"
	ClosePendingSubtotalMethod2Ideal             ClosePendingSubtotalMethod2 = "ideal"
	ClosePendingSubtotalMethod2In3               ClosePendingSubtotalMethod2 = "in3"
	ClosePendingSubtotalMethod2Inghomepay        ClosePendingSubtotalMethod2 = "inghomepay"
	ClosePendingSubtotalMethod2Kbc               ClosePendingSubtotalMethod2 = "kbc"
	ClosePendingSubtotalMethod2Klarnapaylater    ClosePendingSubtotalMethod2 = "klarnapaylater"
	ClosePendingSubtotalMethod2Klarnapaynow      ClosePendingSubtotalMethod2 = "klarnapaynow"
	ClosePendingSubtotalMethod2Klarnasliceit     ClosePendingSubtotalMethod2 = "klarnasliceit"
	ClosePendingSubtotalMethod2Klarna            ClosePendingSubtotalMethod2 = "klarna"
	ClosePendingSubtotalMethod2Mbway             ClosePendingSubtotalMethod2 = "mbway"
	ClosePendingSubtotalMethod2Multibanco        ClosePendingSubtotalMethod2 = "multibanco"
	ClosePendingSubtotalMethod2Mybank            ClosePendingSubtotalMethod2 = "mybank"
	ClosePendingSubtotalMethod2Paybybank         ClosePendingSubtotalMethod2 = "paybybank"
	ClosePendingSubtotalMethod2Payconiq          ClosePendingSubtotalMethod2 = "payconiq"
	ClosePendingSubtotalMethod2Paypal            ClosePendingSubtotalMethod2 = "paypal"
	ClosePendingSubtotalMethod2Paysafecard       ClosePendingSubtotalMethod2 = "paysafecard"
	ClosePendingSubtotalMethod2Przelewy24        ClosePendingSubtotalMethod2 = "przelewy24"
	ClosePendingSubtotalMethod2Riverty           ClosePendingSubtotalMethod2 = "riverty"
	ClosePendingSubtotalMethod2Satispay          ClosePendingSubtotalMethod2 = "satispay"
	ClosePendingSubtotalMethod2Podiumcadeaukaart ClosePendingSubtotalMethod2 = "podiumcadeaukaart"
	ClosePendingSubtotalMethod2Pointofsale       ClosePendingSubtotalMethod2 = "pointofsale"
	ClosePendingSubtotalMethod2Sofort            ClosePendingSubtotalMethod2 = "sofort"
	ClosePendingSubtotalMethod2Swish             ClosePendingSubtotalMethod2 = "swish"
	ClosePendingSubtotalMethod2Trustly           ClosePendingSubtotalMethod2 = "trustly"
	ClosePendingSubtotalMethod2Twint             ClosePendingSubtotalMethod2 = "twint"
	ClosePendingSubtotalMethod2Voucher           ClosePendingSubtotalMethod2 = "voucher"
)

func (e ClosePendingSubtotalMethod2) ToPointer() *ClosePendingSubtotalMethod2 {
	return &e
}
func (e *ClosePendingSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = ClosePendingSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClosePendingSubtotalMethod2: %v", v)
	}
}

// ClosePendingSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type ClosePendingSubtotalCardIssuer2 string

const (
	ClosePendingSubtotalCardIssuer2Amex          ClosePendingSubtotalCardIssuer2 = "amex"
	ClosePendingSubtotalCardIssuer2Maestro       ClosePendingSubtotalCardIssuer2 = "maestro"
	ClosePendingSubtotalCardIssuer2CarteBancaire ClosePendingSubtotalCardIssuer2 = "carte-bancaire"
	ClosePendingSubtotalCardIssuer2Other         ClosePendingSubtotalCardIssuer2 = "other"
)

func (e ClosePendingSubtotalCardIssuer2) ToPointer() *ClosePendingSubtotalCardIssuer2 {
	return &e
}
func (e *ClosePendingSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = ClosePendingSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClosePendingSubtotalCardIssuer2: %v", v)
	}
}

// ClosePendingSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type ClosePendingSubtotalCardAudience2 string

const (
	ClosePendingSubtotalCardAudience2Corporate ClosePendingSubtotalCardAudience2 = "corporate"
	ClosePendingSubtotalCardAudience2Other     ClosePendingSubtotalCardAudience2 = "other"
)

func (e ClosePendingSubtotalCardAudience2) ToPointer() *ClosePendingSubtotalCardAudience2 {
	return &e
}
func (e *ClosePendingSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = ClosePendingSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClosePendingSubtotalCardAudience2: %v", v)
	}
}

// ClosePendingSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type ClosePendingSubtotalCardRegion2 string

const (
	ClosePendingSubtotalCardRegion2IntraEea ClosePendingSubtotalCardRegion2 = "intra-eea"
	ClosePendingSubtotalCardRegion2IntraEu  ClosePendingSubtotalCardRegion2 = "intra-eu"
	ClosePendingSubtotalCardRegion2Domestic ClosePendingSubtotalCardRegion2 = "domestic"
	ClosePendingSubtotalCardRegion2Other    ClosePendingSubtotalCardRegion2 = "other"
)

func (e ClosePendingSubtotalCardRegion2) ToPointer() *ClosePendingSubtotalCardRegion2 {
	return &e
}
func (e *ClosePendingSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = ClosePendingSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClosePendingSubtotalCardRegion2: %v", v)
	}
}

// ClosePendingSubtotalFeeType2 - Present when the transaction represents a fee.
type ClosePendingSubtotalFeeType2 string

const (
	ClosePendingSubtotalFeeType2PaymentFee                                        ClosePendingSubtotalFeeType2 = "payment-fee"
	ClosePendingSubtotalFeeType2DirectDebitFailureFee                             ClosePendingSubtotalFeeType2 = "direct-debit-failure-fee"
	ClosePendingSubtotalFeeType2UnauthorizedDirectDebitFee                        ClosePendingSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	ClosePendingSubtotalFeeType2BankChargedDirectDebitFailureFee                  ClosePendingSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	ClosePendingSubtotalFeeType2PartnerCommission                                 ClosePendingSubtotalFeeType2 = "partner-commission"
	ClosePendingSubtotalFeeType2ApplicationFee                                    ClosePendingSubtotalFeeType2 = "application-fee"
	ClosePendingSubtotalFeeType2CaptureFee                                        ClosePendingSubtotalFeeType2 = "capture-fee"
	ClosePendingSubtotalFeeType2RefundFee                                         ClosePendingSubtotalFeeType2 = "refund-fee"
	ClosePendingSubtotalFeeType2ChargebackFee                                     ClosePendingSubtotalFeeType2 = "chargeback-fee"
	ClosePendingSubtotalFeeType2PaymentNotificationFee                            ClosePendingSubtotalFeeType2 = "payment-notification-fee"
	ClosePendingSubtotalFeeType2TransferNotificationFee                           ClosePendingSubtotalFeeType2 = "transfer-notification-fee"
	ClosePendingSubtotalFeeType2PayoutFee                                         ClosePendingSubtotalFeeType2 = "payout-fee"
	ClosePendingSubtotalFeeType2FeeDiscount                                       ClosePendingSubtotalFeeType2 = "fee-discount"
	ClosePendingSubtotalFeeType2FeeReimbursement                                  ClosePendingSubtotalFeeType2 = "fee-reimbursement"
	ClosePendingSubtotalFeeType2PlatformVolumeFee                                 ClosePendingSubtotalFeeType2 = "platform-volume-fee"
	ClosePendingSubtotalFeeType2PlatformConnectedOrganizationsFee                 ClosePendingSubtotalFeeType2 = "platform-connected-organizations-fee"
	ClosePendingSubtotalFeeType2BalanceChargeFee                                  ClosePendingSubtotalFeeType2 = "balance-charge-fee"
	ClosePendingSubtotalFeeType2ThreedsAuthenticationAttemptFee                   ClosePendingSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	ClosePendingSubtotalFeeType2TerminalMonthlyFee                                ClosePendingSubtotalFeeType2 = "terminal-monthly-fee"
	ClosePendingSubtotalFeeType2AcceptanceRiskFee                                 ClosePendingSubtotalFeeType2 = "acceptance-risk-fee"
	ClosePendingSubtotalFeeType2TopUpFee                                          ClosePendingSubtotalFeeType2 = "top-up-fee"
	ClosePendingSubtotalFeeType2PaymentGatewayFee                                 ClosePendingSubtotalFeeType2 = "payment-gateway-fee"
	ClosePendingSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   ClosePendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	ClosePendingSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee ClosePendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	ClosePendingSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             ClosePendingSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	ClosePendingSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           ClosePendingSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	ClosePendingSubtotalFeeType2MinimumInvoiceAmountFee                           ClosePendingSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e ClosePendingSubtotalFeeType2) ToPointer() *ClosePendingSubtotalFeeType2 {
	return &e
}
func (e *ClosePendingSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = ClosePendingSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClosePendingSubtotalFeeType2: %v", v)
	}
}

// ClosePendingSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type ClosePendingSubtotalPrepaymentPartType2 string

const (
	ClosePendingSubtotalPrepaymentPartType2Fee                     ClosePendingSubtotalPrepaymentPartType2 = "fee"
	ClosePendingSubtotalPrepaymentPartType2FeeReimbursement        ClosePendingSubtotalPrepaymentPartType2 = "fee-reimbursement"
	ClosePendingSubtotalPrepaymentPartType2FeeDiscount             ClosePendingSubtotalPrepaymentPartType2 = "fee-discount"
	ClosePendingSubtotalPrepaymentPartType2FeeVat                  ClosePendingSubtotalPrepaymentPartType2 = "fee-vat"
	ClosePendingSubtotalPrepaymentPartType2FeeRoundingCompensation ClosePendingSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e ClosePendingSubtotalPrepaymentPartType2) ToPointer() *ClosePendingSubtotalPrepaymentPartType2 {
	return &e
}
func (e *ClosePendingSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = ClosePendingSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClosePendingSubtotalPrepaymentPartType2: %v", v)
	}
}

// ClosePendingSubtotalTransactionType2 - Represents the transaction type
type ClosePendingSubtotalTransactionType2 string

const (
	ClosePendingSubtotalTransactionType2Payment                           ClosePendingSubtotalTransactionType2 = "payment"
	ClosePendingSubtotalTransactionType2SplitPayment                      ClosePendingSubtotalTransactionType2 = "split-payment"
	ClosePendingSubtotalTransactionType2FailedPayment                     ClosePendingSubtotalTransactionType2 = "failed-payment"
	ClosePendingSubtotalTransactionType2FailedPlatformSplitPayment        ClosePendingSubtotalTransactionType2 = "failed-platform-split-payment"
	ClosePendingSubtotalTransactionType2FailedSplitPaymentCompensation    ClosePendingSubtotalTransactionType2 = "failed-split-payment-compensation"
	ClosePendingSubtotalTransactionType2Capture                           ClosePendingSubtotalTransactionType2 = "capture"
	ClosePendingSubtotalTransactionType2SplitTransaction                  ClosePendingSubtotalTransactionType2 = "split-transaction"
	ClosePendingSubtotalTransactionType2Refund                            ClosePendingSubtotalTransactionType2 = "refund"
	ClosePendingSubtotalTransactionType2PlatformPaymentRefund             ClosePendingSubtotalTransactionType2 = "platform-payment-refund"
	ClosePendingSubtotalTransactionType2ReturnedPlatformPaymentRefund     ClosePendingSubtotalTransactionType2 = "returned-platform-payment-refund"
	ClosePendingSubtotalTransactionType2RefundCompensation                ClosePendingSubtotalTransactionType2 = "refund-compensation"
	ClosePendingSubtotalTransactionType2ReturnedRefundCompensation        ClosePendingSubtotalTransactionType2 = "returned-refund-compensation"
	ClosePendingSubtotalTransactionType2ReturnedRefund                    ClosePendingSubtotalTransactionType2 = "returned-refund"
	ClosePendingSubtotalTransactionType2Chargeback                        ClosePendingSubtotalTransactionType2 = "chargeback"
	ClosePendingSubtotalTransactionType2ChargebackReversal                ClosePendingSubtotalTransactionType2 = "chargeback-reversal"
	ClosePendingSubtotalTransactionType2ChargebackCompensation            ClosePendingSubtotalTransactionType2 = "chargeback-compensation"
	ClosePendingSubtotalTransactionType2ReversedChargebackCompensation    ClosePendingSubtotalTransactionType2 = "reversed-chargeback-compensation"
	ClosePendingSubtotalTransactionType2PlatformPaymentChargeback         ClosePendingSubtotalTransactionType2 = "platform-payment-chargeback"
	ClosePendingSubtotalTransactionType2ReversedPlatformPaymentChargeback ClosePendingSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	ClosePendingSubtotalTransactionType2FeePrepayment                     ClosePendingSubtotalTransactionType2 = "fee-prepayment"
	ClosePendingSubtotalTransactionType2OutgoingTransfer                  ClosePendingSubtotalTransactionType2 = "outgoing-transfer"
	ClosePendingSubtotalTransactionType2IncomingTransfer                  ClosePendingSubtotalTransactionType2 = "incoming-transfer"
	ClosePendingSubtotalTransactionType2CanceledTransfer                  ClosePendingSubtotalTransactionType2 = "canceled-transfer"
	ClosePendingSubtotalTransactionType2ReturnedTransfer                  ClosePendingSubtotalTransactionType2 = "returned-transfer"
	ClosePendingSubtotalTransactionType2BalanceReserve                    ClosePendingSubtotalTransactionType2 = "balance-reserve"
	ClosePendingSubtotalTransactionType2BalanceReserveReturn              ClosePendingSubtotalTransactionType2 = "balance-reserve-return"
	ClosePendingSubtotalTransactionType2InvoiceRoundingCompensation       ClosePendingSubtotalTransactionType2 = "invoice-rounding-compensation"
	ClosePendingSubtotalTransactionType2RollingReserveHold                ClosePendingSubtotalTransactionType2 = "rolling-reserve-hold"
	ClosePendingSubtotalTransactionType2RollingReserveRelease             ClosePendingSubtotalTransactionType2 = "rolling-reserve-release"
	ClosePendingSubtotalTransactionType2BalanceCorrection                 ClosePendingSubtotalTransactionType2 = "balance-correction"
	ClosePendingSubtotalTransactionType2Repayment                         ClosePendingSubtotalTransactionType2 = "repayment"
	ClosePendingSubtotalTransactionType2Loan                              ClosePendingSubtotalTransactionType2 = "loan"
	ClosePendingSubtotalTransactionType2BalanceTopup                      ClosePendingSubtotalTransactionType2 = "balance-topup"
	ClosePendingSubtotalTransactionType2CashCollateralIssuance            ClosePendingSubtotalTransactionType2 = "cash-collateral-issuance';"
	ClosePendingSubtotalTransactionType2CashCollateralRelease             ClosePendingSubtotalTransactionType2 = "cash-collateral-release"
	ClosePendingSubtotalTransactionType2PendingRollingReserve             ClosePendingSubtotalTransactionType2 = "pending-rolling-reserve"
	ClosePendingSubtotalTransactionType2ToBeReleasedRollingReserve        ClosePendingSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	ClosePendingSubtotalTransactionType2HeldRollingReserve                ClosePendingSubtotalTransactionType2 = "held-rolling-reserve"
	ClosePendingSubtotalTransactionType2ReleasedRollingReserve            ClosePendingSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e ClosePendingSubtotalTransactionType2) ToPointer() *ClosePendingSubtotalTransactionType2 {
	return &e
}
func (e *ClosePendingSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = ClosePendingSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClosePendingSubtotalTransactionType2: %v", v)
	}
}

type ClosePendingSubtotal2 struct {
	SubTotals []ClosePendingSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *ClosePendingSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *ClosePendingSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *ClosePendingSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *ClosePendingSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *ClosePendingSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *ClosePendingSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *ClosePendingSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *ClosePendingSubtotal2) GetSubTotals() []ClosePendingSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *ClosePendingSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ClosePendingSubtotal2) GetMethod() *ClosePendingSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *ClosePendingSubtotal2) GetCardIssuer() *ClosePendingSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *ClosePendingSubtotal2) GetCardAudience() *ClosePendingSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *ClosePendingSubtotal2) GetCardRegion() *ClosePendingSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *ClosePendingSubtotal2) GetFeeType() *ClosePendingSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *ClosePendingSubtotal2) GetPrepaymentPartType() *ClosePendingSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *ClosePendingSubtotal2) GetTransactionType() *ClosePendingSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type ClosePending struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *ClosePendingAmount     `json:"amount,omitempty"`
	Subtotals []ClosePendingSubtotal2 `json:"subtotals,omitempty"`
}

func (o *ClosePending) GetAmount() *ClosePendingAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ClosePending) GetSubtotals() []ClosePendingSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// CloseAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type CloseAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CloseAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CloseAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CloseAvailableSubTotalMethod1 - Payment type of the transactions
type CloseAvailableSubTotalMethod1 string

const (
	CloseAvailableSubTotalMethod1Alma              CloseAvailableSubTotalMethod1 = "alma"
	CloseAvailableSubTotalMethod1Bacs              CloseAvailableSubTotalMethod1 = "bacs"
	CloseAvailableSubTotalMethod1Applepay          CloseAvailableSubTotalMethod1 = "applepay"
	CloseAvailableSubTotalMethod1Bancomatpay       CloseAvailableSubTotalMethod1 = "bancomatpay"
	CloseAvailableSubTotalMethod1Bancontact        CloseAvailableSubTotalMethod1 = "bancontact"
	CloseAvailableSubTotalMethod1Banktransfer      CloseAvailableSubTotalMethod1 = "banktransfer"
	CloseAvailableSubTotalMethod1Belfius           CloseAvailableSubTotalMethod1 = "belfius"
	CloseAvailableSubTotalMethod1Billie            CloseAvailableSubTotalMethod1 = "billie"
	CloseAvailableSubTotalMethod1Bizum             CloseAvailableSubTotalMethod1 = "bizum"
	CloseAvailableSubTotalMethod1Bitcoin           CloseAvailableSubTotalMethod1 = "bitcoin"
	CloseAvailableSubTotalMethod1Blik              CloseAvailableSubTotalMethod1 = "blik"
	CloseAvailableSubTotalMethod1Creditcard        CloseAvailableSubTotalMethod1 = "creditcard"
	CloseAvailableSubTotalMethod1Directdebit       CloseAvailableSubTotalMethod1 = "directdebit"
	CloseAvailableSubTotalMethod1Eps               CloseAvailableSubTotalMethod1 = "eps"
	CloseAvailableSubTotalMethod1Giftcard          CloseAvailableSubTotalMethod1 = "giftcard"
	CloseAvailableSubTotalMethod1Giropay           CloseAvailableSubTotalMethod1 = "giropay"
	CloseAvailableSubTotalMethod1Googlepay         CloseAvailableSubTotalMethod1 = "googlepay"
	CloseAvailableSubTotalMethod1Ideal             CloseAvailableSubTotalMethod1 = "ideal"
	CloseAvailableSubTotalMethod1In3               CloseAvailableSubTotalMethod1 = "in3"
	CloseAvailableSubTotalMethod1Inghomepay        CloseAvailableSubTotalMethod1 = "inghomepay"
	CloseAvailableSubTotalMethod1Kbc               CloseAvailableSubTotalMethod1 = "kbc"
	CloseAvailableSubTotalMethod1Klarnapaylater    CloseAvailableSubTotalMethod1 = "klarnapaylater"
	CloseAvailableSubTotalMethod1Klarnapaynow      CloseAvailableSubTotalMethod1 = "klarnapaynow"
	CloseAvailableSubTotalMethod1Klarnasliceit     CloseAvailableSubTotalMethod1 = "klarnasliceit"
	CloseAvailableSubTotalMethod1Klarna            CloseAvailableSubTotalMethod1 = "klarna"
	CloseAvailableSubTotalMethod1Mbway             CloseAvailableSubTotalMethod1 = "mbway"
	CloseAvailableSubTotalMethod1Multibanco        CloseAvailableSubTotalMethod1 = "multibanco"
	CloseAvailableSubTotalMethod1Mybank            CloseAvailableSubTotalMethod1 = "mybank"
	CloseAvailableSubTotalMethod1Paybybank         CloseAvailableSubTotalMethod1 = "paybybank"
	CloseAvailableSubTotalMethod1Payconiq          CloseAvailableSubTotalMethod1 = "payconiq"
	CloseAvailableSubTotalMethod1Paypal            CloseAvailableSubTotalMethod1 = "paypal"
	CloseAvailableSubTotalMethod1Paysafecard       CloseAvailableSubTotalMethod1 = "paysafecard"
	CloseAvailableSubTotalMethod1Przelewy24        CloseAvailableSubTotalMethod1 = "przelewy24"
	CloseAvailableSubTotalMethod1Riverty           CloseAvailableSubTotalMethod1 = "riverty"
	CloseAvailableSubTotalMethod1Satispay          CloseAvailableSubTotalMethod1 = "satispay"
	CloseAvailableSubTotalMethod1Podiumcadeaukaart CloseAvailableSubTotalMethod1 = "podiumcadeaukaart"
	CloseAvailableSubTotalMethod1Pointofsale       CloseAvailableSubTotalMethod1 = "pointofsale"
	CloseAvailableSubTotalMethod1Sofort            CloseAvailableSubTotalMethod1 = "sofort"
	CloseAvailableSubTotalMethod1Swish             CloseAvailableSubTotalMethod1 = "swish"
	CloseAvailableSubTotalMethod1Trustly           CloseAvailableSubTotalMethod1 = "trustly"
	CloseAvailableSubTotalMethod1Twint             CloseAvailableSubTotalMethod1 = "twint"
	CloseAvailableSubTotalMethod1Voucher           CloseAvailableSubTotalMethod1 = "voucher"
)

func (e CloseAvailableSubTotalMethod1) ToPointer() *CloseAvailableSubTotalMethod1 {
	return &e
}
func (e *CloseAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = CloseAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloseAvailableSubTotalMethod1: %v", v)
	}
}

// CloseAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type CloseAvailableSubTotalCardIssuer1 string

const (
	CloseAvailableSubTotalCardIssuer1Amex          CloseAvailableSubTotalCardIssuer1 = "amex"
	CloseAvailableSubTotalCardIssuer1Maestro       CloseAvailableSubTotalCardIssuer1 = "maestro"
	CloseAvailableSubTotalCardIssuer1CarteBancaire CloseAvailableSubTotalCardIssuer1 = "carte-bancaire"
	CloseAvailableSubTotalCardIssuer1Other         CloseAvailableSubTotalCardIssuer1 = "other"
)

func (e CloseAvailableSubTotalCardIssuer1) ToPointer() *CloseAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *CloseAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = CloseAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloseAvailableSubTotalCardIssuer1: %v", v)
	}
}

// CloseAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type CloseAvailableSubTotalCardAudience1 string

const (
	CloseAvailableSubTotalCardAudience1Corporate CloseAvailableSubTotalCardAudience1 = "corporate"
	CloseAvailableSubTotalCardAudience1Other     CloseAvailableSubTotalCardAudience1 = "other"
)

func (e CloseAvailableSubTotalCardAudience1) ToPointer() *CloseAvailableSubTotalCardAudience1 {
	return &e
}
func (e *CloseAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = CloseAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloseAvailableSubTotalCardAudience1: %v", v)
	}
}

// CloseAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type CloseAvailableSubTotalCardRegion1 string

const (
	CloseAvailableSubTotalCardRegion1IntraEea CloseAvailableSubTotalCardRegion1 = "intra-eea"
	CloseAvailableSubTotalCardRegion1IntraEu  CloseAvailableSubTotalCardRegion1 = "intra-eu"
	CloseAvailableSubTotalCardRegion1Domestic CloseAvailableSubTotalCardRegion1 = "domestic"
	CloseAvailableSubTotalCardRegion1Other    CloseAvailableSubTotalCardRegion1 = "other"
)

func (e CloseAvailableSubTotalCardRegion1) ToPointer() *CloseAvailableSubTotalCardRegion1 {
	return &e
}
func (e *CloseAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = CloseAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloseAvailableSubTotalCardRegion1: %v", v)
	}
}

// CloseAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type CloseAvailableSubTotalFeeType1 string

const (
	CloseAvailableSubTotalFeeType1PaymentFee                                        CloseAvailableSubTotalFeeType1 = "payment-fee"
	CloseAvailableSubTotalFeeType1DirectDebitFailureFee                             CloseAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	CloseAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        CloseAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	CloseAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  CloseAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	CloseAvailableSubTotalFeeType1PartnerCommission                                 CloseAvailableSubTotalFeeType1 = "partner-commission"
	CloseAvailableSubTotalFeeType1ApplicationFee                                    CloseAvailableSubTotalFeeType1 = "application-fee"
	CloseAvailableSubTotalFeeType1CaptureFee                                        CloseAvailableSubTotalFeeType1 = "capture-fee"
	CloseAvailableSubTotalFeeType1RefundFee                                         CloseAvailableSubTotalFeeType1 = "refund-fee"
	CloseAvailableSubTotalFeeType1ChargebackFee                                     CloseAvailableSubTotalFeeType1 = "chargeback-fee"
	CloseAvailableSubTotalFeeType1PaymentNotificationFee                            CloseAvailableSubTotalFeeType1 = "payment-notification-fee"
	CloseAvailableSubTotalFeeType1TransferNotificationFee                           CloseAvailableSubTotalFeeType1 = "transfer-notification-fee"
	CloseAvailableSubTotalFeeType1PayoutFee                                         CloseAvailableSubTotalFeeType1 = "payout-fee"
	CloseAvailableSubTotalFeeType1FeeDiscount                                       CloseAvailableSubTotalFeeType1 = "fee-discount"
	CloseAvailableSubTotalFeeType1FeeReimbursement                                  CloseAvailableSubTotalFeeType1 = "fee-reimbursement"
	CloseAvailableSubTotalFeeType1PlatformVolumeFee                                 CloseAvailableSubTotalFeeType1 = "platform-volume-fee"
	CloseAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 CloseAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	CloseAvailableSubTotalFeeType1BalanceChargeFee                                  CloseAvailableSubTotalFeeType1 = "balance-charge-fee"
	CloseAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   CloseAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	CloseAvailableSubTotalFeeType1TerminalMonthlyFee                                CloseAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	CloseAvailableSubTotalFeeType1AcceptanceRiskFee                                 CloseAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	CloseAvailableSubTotalFeeType1TopUpFee                                          CloseAvailableSubTotalFeeType1 = "top-up-fee"
	CloseAvailableSubTotalFeeType1PaymentGatewayFee                                 CloseAvailableSubTotalFeeType1 = "payment-gateway-fee"
	CloseAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   CloseAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	CloseAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee CloseAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	CloseAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             CloseAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	CloseAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           CloseAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	CloseAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           CloseAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e CloseAvailableSubTotalFeeType1) ToPointer() *CloseAvailableSubTotalFeeType1 {
	return &e
}
func (e *CloseAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = CloseAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloseAvailableSubTotalFeeType1: %v", v)
	}
}

// CloseAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type CloseAvailableSubTotalPrepaymentPartType1 string

const (
	CloseAvailableSubTotalPrepaymentPartType1Fee                     CloseAvailableSubTotalPrepaymentPartType1 = "fee"
	CloseAvailableSubTotalPrepaymentPartType1FeeReimbursement        CloseAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	CloseAvailableSubTotalPrepaymentPartType1FeeDiscount             CloseAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	CloseAvailableSubTotalPrepaymentPartType1FeeVat                  CloseAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	CloseAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation CloseAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e CloseAvailableSubTotalPrepaymentPartType1) ToPointer() *CloseAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *CloseAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = CloseAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloseAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// CloseAvailableSubTotalTransactionType1 - Represents the transaction type
type CloseAvailableSubTotalTransactionType1 string

const (
	CloseAvailableSubTotalTransactionType1Payment                           CloseAvailableSubTotalTransactionType1 = "payment"
	CloseAvailableSubTotalTransactionType1SplitPayment                      CloseAvailableSubTotalTransactionType1 = "split-payment"
	CloseAvailableSubTotalTransactionType1FailedPayment                     CloseAvailableSubTotalTransactionType1 = "failed-payment"
	CloseAvailableSubTotalTransactionType1FailedPlatformSplitPayment        CloseAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	CloseAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    CloseAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	CloseAvailableSubTotalTransactionType1Capture                           CloseAvailableSubTotalTransactionType1 = "capture"
	CloseAvailableSubTotalTransactionType1SplitTransaction                  CloseAvailableSubTotalTransactionType1 = "split-transaction"
	CloseAvailableSubTotalTransactionType1Refund                            CloseAvailableSubTotalTransactionType1 = "refund"
	CloseAvailableSubTotalTransactionType1PlatformPaymentRefund             CloseAvailableSubTotalTransactionType1 = "platform-payment-refund"
	CloseAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     CloseAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	CloseAvailableSubTotalTransactionType1RefundCompensation                CloseAvailableSubTotalTransactionType1 = "refund-compensation"
	CloseAvailableSubTotalTransactionType1ReturnedRefundCompensation        CloseAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	CloseAvailableSubTotalTransactionType1ReturnedRefund                    CloseAvailableSubTotalTransactionType1 = "returned-refund"
	CloseAvailableSubTotalTransactionType1Chargeback                        CloseAvailableSubTotalTransactionType1 = "chargeback"
	CloseAvailableSubTotalTransactionType1ChargebackReversal                CloseAvailableSubTotalTransactionType1 = "chargeback-reversal"
	CloseAvailableSubTotalTransactionType1ChargebackCompensation            CloseAvailableSubTotalTransactionType1 = "chargeback-compensation"
	CloseAvailableSubTotalTransactionType1ReversedChargebackCompensation    CloseAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	CloseAvailableSubTotalTransactionType1PlatformPaymentChargeback         CloseAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	CloseAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback CloseAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	CloseAvailableSubTotalTransactionType1FeePrepayment                     CloseAvailableSubTotalTransactionType1 = "fee-prepayment"
	CloseAvailableSubTotalTransactionType1OutgoingTransfer                  CloseAvailableSubTotalTransactionType1 = "outgoing-transfer"
	CloseAvailableSubTotalTransactionType1IncomingTransfer                  CloseAvailableSubTotalTransactionType1 = "incoming-transfer"
	CloseAvailableSubTotalTransactionType1CanceledTransfer                  CloseAvailableSubTotalTransactionType1 = "canceled-transfer"
	CloseAvailableSubTotalTransactionType1ReturnedTransfer                  CloseAvailableSubTotalTransactionType1 = "returned-transfer"
	CloseAvailableSubTotalTransactionType1BalanceReserve                    CloseAvailableSubTotalTransactionType1 = "balance-reserve"
	CloseAvailableSubTotalTransactionType1BalanceReserveReturn              CloseAvailableSubTotalTransactionType1 = "balance-reserve-return"
	CloseAvailableSubTotalTransactionType1InvoiceRoundingCompensation       CloseAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	CloseAvailableSubTotalTransactionType1RollingReserveHold                CloseAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	CloseAvailableSubTotalTransactionType1RollingReserveRelease             CloseAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	CloseAvailableSubTotalTransactionType1BalanceCorrection                 CloseAvailableSubTotalTransactionType1 = "balance-correction"
	CloseAvailableSubTotalTransactionType1Repayment                         CloseAvailableSubTotalTransactionType1 = "repayment"
	CloseAvailableSubTotalTransactionType1Loan                              CloseAvailableSubTotalTransactionType1 = "loan"
	CloseAvailableSubTotalTransactionType1BalanceTopup                      CloseAvailableSubTotalTransactionType1 = "balance-topup"
	CloseAvailableSubTotalTransactionType1CashCollateralIssuance            CloseAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	CloseAvailableSubTotalTransactionType1CashCollateralRelease             CloseAvailableSubTotalTransactionType1 = "cash-collateral-release"
	CloseAvailableSubTotalTransactionType1PendingRollingReserve             CloseAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	CloseAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        CloseAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	CloseAvailableSubTotalTransactionType1HeldRollingReserve                CloseAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	CloseAvailableSubTotalTransactionType1ReleasedRollingReserve            CloseAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e CloseAvailableSubTotalTransactionType1) ToPointer() *CloseAvailableSubTotalTransactionType1 {
	return &e
}
func (e *CloseAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = CloseAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloseAvailableSubTotalTransactionType1: %v", v)
	}
}

type CloseAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *CloseAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *CloseAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *CloseAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *CloseAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *CloseAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *CloseAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *CloseAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *CloseAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *CloseAvailableSubTotal1) GetMethod() *CloseAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CloseAvailableSubTotal1) GetCardIssuer() *CloseAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *CloseAvailableSubTotal1) GetCardAudience() *CloseAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *CloseAvailableSubTotal1) GetCardRegion() *CloseAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *CloseAvailableSubTotal1) GetFeeType() *CloseAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *CloseAvailableSubTotal1) GetPrepaymentPartType() *CloseAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *CloseAvailableSubTotal1) GetTransactionType() *CloseAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// CloseAvailableSubtotalMethod2 - Payment type of the transactions
type CloseAvailableSubtotalMethod2 string

const (
	CloseAvailableSubtotalMethod2Alma              CloseAvailableSubtotalMethod2 = "alma"
	CloseAvailableSubtotalMethod2Bacs              CloseAvailableSubtotalMethod2 = "bacs"
	CloseAvailableSubtotalMethod2Applepay          CloseAvailableSubtotalMethod2 = "applepay"
	CloseAvailableSubtotalMethod2Bancomatpay       CloseAvailableSubtotalMethod2 = "bancomatpay"
	CloseAvailableSubtotalMethod2Bancontact        CloseAvailableSubtotalMethod2 = "bancontact"
	CloseAvailableSubtotalMethod2Banktransfer      CloseAvailableSubtotalMethod2 = "banktransfer"
	CloseAvailableSubtotalMethod2Belfius           CloseAvailableSubtotalMethod2 = "belfius"
	CloseAvailableSubtotalMethod2Billie            CloseAvailableSubtotalMethod2 = "billie"
	CloseAvailableSubtotalMethod2Bizum             CloseAvailableSubtotalMethod2 = "bizum"
	CloseAvailableSubtotalMethod2Bitcoin           CloseAvailableSubtotalMethod2 = "bitcoin"
	CloseAvailableSubtotalMethod2Blik              CloseAvailableSubtotalMethod2 = "blik"
	CloseAvailableSubtotalMethod2Creditcard        CloseAvailableSubtotalMethod2 = "creditcard"
	CloseAvailableSubtotalMethod2Directdebit       CloseAvailableSubtotalMethod2 = "directdebit"
	CloseAvailableSubtotalMethod2Eps               CloseAvailableSubtotalMethod2 = "eps"
	CloseAvailableSubtotalMethod2Giftcard          CloseAvailableSubtotalMethod2 = "giftcard"
	CloseAvailableSubtotalMethod2Giropay           CloseAvailableSubtotalMethod2 = "giropay"
	CloseAvailableSubtotalMethod2Googlepay         CloseAvailableSubtotalMethod2 = "googlepay"
	CloseAvailableSubtotalMethod2Ideal             CloseAvailableSubtotalMethod2 = "ideal"
	CloseAvailableSubtotalMethod2In3               CloseAvailableSubtotalMethod2 = "in3"
	CloseAvailableSubtotalMethod2Inghomepay        CloseAvailableSubtotalMethod2 = "inghomepay"
	CloseAvailableSubtotalMethod2Kbc               CloseAvailableSubtotalMethod2 = "kbc"
	CloseAvailableSubtotalMethod2Klarnapaylater    CloseAvailableSubtotalMethod2 = "klarnapaylater"
	CloseAvailableSubtotalMethod2Klarnapaynow      CloseAvailableSubtotalMethod2 = "klarnapaynow"
	CloseAvailableSubtotalMethod2Klarnasliceit     CloseAvailableSubtotalMethod2 = "klarnasliceit"
	CloseAvailableSubtotalMethod2Klarna            CloseAvailableSubtotalMethod2 = "klarna"
	CloseAvailableSubtotalMethod2Mbway             CloseAvailableSubtotalMethod2 = "mbway"
	CloseAvailableSubtotalMethod2Multibanco        CloseAvailableSubtotalMethod2 = "multibanco"
	CloseAvailableSubtotalMethod2Mybank            CloseAvailableSubtotalMethod2 = "mybank"
	CloseAvailableSubtotalMethod2Paybybank         CloseAvailableSubtotalMethod2 = "paybybank"
	CloseAvailableSubtotalMethod2Payconiq          CloseAvailableSubtotalMethod2 = "payconiq"
	CloseAvailableSubtotalMethod2Paypal            CloseAvailableSubtotalMethod2 = "paypal"
	CloseAvailableSubtotalMethod2Paysafecard       CloseAvailableSubtotalMethod2 = "paysafecard"
	CloseAvailableSubtotalMethod2Przelewy24        CloseAvailableSubtotalMethod2 = "przelewy24"
	CloseAvailableSubtotalMethod2Riverty           CloseAvailableSubtotalMethod2 = "riverty"
	CloseAvailableSubtotalMethod2Satispay          CloseAvailableSubtotalMethod2 = "satispay"
	CloseAvailableSubtotalMethod2Podiumcadeaukaart CloseAvailableSubtotalMethod2 = "podiumcadeaukaart"
	CloseAvailableSubtotalMethod2Pointofsale       CloseAvailableSubtotalMethod2 = "pointofsale"
	CloseAvailableSubtotalMethod2Sofort            CloseAvailableSubtotalMethod2 = "sofort"
	CloseAvailableSubtotalMethod2Swish             CloseAvailableSubtotalMethod2 = "swish"
	CloseAvailableSubtotalMethod2Trustly           CloseAvailableSubtotalMethod2 = "trustly"
	CloseAvailableSubtotalMethod2Twint             CloseAvailableSubtotalMethod2 = "twint"
	CloseAvailableSubtotalMethod2Voucher           CloseAvailableSubtotalMethod2 = "voucher"
)

func (e CloseAvailableSubtotalMethod2) ToPointer() *CloseAvailableSubtotalMethod2 {
	return &e
}
func (e *CloseAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = CloseAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloseAvailableSubtotalMethod2: %v", v)
	}
}

// CloseAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type CloseAvailableSubtotalCardIssuer2 string

const (
	CloseAvailableSubtotalCardIssuer2Amex          CloseAvailableSubtotalCardIssuer2 = "amex"
	CloseAvailableSubtotalCardIssuer2Maestro       CloseAvailableSubtotalCardIssuer2 = "maestro"
	CloseAvailableSubtotalCardIssuer2CarteBancaire CloseAvailableSubtotalCardIssuer2 = "carte-bancaire"
	CloseAvailableSubtotalCardIssuer2Other         CloseAvailableSubtotalCardIssuer2 = "other"
)

func (e CloseAvailableSubtotalCardIssuer2) ToPointer() *CloseAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *CloseAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = CloseAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloseAvailableSubtotalCardIssuer2: %v", v)
	}
}

// CloseAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type CloseAvailableSubtotalCardAudience2 string

const (
	CloseAvailableSubtotalCardAudience2Corporate CloseAvailableSubtotalCardAudience2 = "corporate"
	CloseAvailableSubtotalCardAudience2Other     CloseAvailableSubtotalCardAudience2 = "other"
)

func (e CloseAvailableSubtotalCardAudience2) ToPointer() *CloseAvailableSubtotalCardAudience2 {
	return &e
}
func (e *CloseAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = CloseAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloseAvailableSubtotalCardAudience2: %v", v)
	}
}

// CloseAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type CloseAvailableSubtotalCardRegion2 string

const (
	CloseAvailableSubtotalCardRegion2IntraEea CloseAvailableSubtotalCardRegion2 = "intra-eea"
	CloseAvailableSubtotalCardRegion2IntraEu  CloseAvailableSubtotalCardRegion2 = "intra-eu"
	CloseAvailableSubtotalCardRegion2Domestic CloseAvailableSubtotalCardRegion2 = "domestic"
	CloseAvailableSubtotalCardRegion2Other    CloseAvailableSubtotalCardRegion2 = "other"
)

func (e CloseAvailableSubtotalCardRegion2) ToPointer() *CloseAvailableSubtotalCardRegion2 {
	return &e
}
func (e *CloseAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = CloseAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloseAvailableSubtotalCardRegion2: %v", v)
	}
}

// CloseAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type CloseAvailableSubtotalFeeType2 string

const (
	CloseAvailableSubtotalFeeType2PaymentFee                                        CloseAvailableSubtotalFeeType2 = "payment-fee"
	CloseAvailableSubtotalFeeType2DirectDebitFailureFee                             CloseAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	CloseAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        CloseAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	CloseAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  CloseAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	CloseAvailableSubtotalFeeType2PartnerCommission                                 CloseAvailableSubtotalFeeType2 = "partner-commission"
	CloseAvailableSubtotalFeeType2ApplicationFee                                    CloseAvailableSubtotalFeeType2 = "application-fee"
	CloseAvailableSubtotalFeeType2CaptureFee                                        CloseAvailableSubtotalFeeType2 = "capture-fee"
	CloseAvailableSubtotalFeeType2RefundFee                                         CloseAvailableSubtotalFeeType2 = "refund-fee"
	CloseAvailableSubtotalFeeType2ChargebackFee                                     CloseAvailableSubtotalFeeType2 = "chargeback-fee"
	CloseAvailableSubtotalFeeType2PaymentNotificationFee                            CloseAvailableSubtotalFeeType2 = "payment-notification-fee"
	CloseAvailableSubtotalFeeType2TransferNotificationFee                           CloseAvailableSubtotalFeeType2 = "transfer-notification-fee"
	CloseAvailableSubtotalFeeType2PayoutFee                                         CloseAvailableSubtotalFeeType2 = "payout-fee"
	CloseAvailableSubtotalFeeType2FeeDiscount                                       CloseAvailableSubtotalFeeType2 = "fee-discount"
	CloseAvailableSubtotalFeeType2FeeReimbursement                                  CloseAvailableSubtotalFeeType2 = "fee-reimbursement"
	CloseAvailableSubtotalFeeType2PlatformVolumeFee                                 CloseAvailableSubtotalFeeType2 = "platform-volume-fee"
	CloseAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 CloseAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	CloseAvailableSubtotalFeeType2BalanceChargeFee                                  CloseAvailableSubtotalFeeType2 = "balance-charge-fee"
	CloseAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   CloseAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	CloseAvailableSubtotalFeeType2TerminalMonthlyFee                                CloseAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	CloseAvailableSubtotalFeeType2AcceptanceRiskFee                                 CloseAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	CloseAvailableSubtotalFeeType2TopUpFee                                          CloseAvailableSubtotalFeeType2 = "top-up-fee"
	CloseAvailableSubtotalFeeType2PaymentGatewayFee                                 CloseAvailableSubtotalFeeType2 = "payment-gateway-fee"
	CloseAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   CloseAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	CloseAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee CloseAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	CloseAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             CloseAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	CloseAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           CloseAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	CloseAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           CloseAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e CloseAvailableSubtotalFeeType2) ToPointer() *CloseAvailableSubtotalFeeType2 {
	return &e
}
func (e *CloseAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = CloseAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloseAvailableSubtotalFeeType2: %v", v)
	}
}

// CloseAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type CloseAvailableSubtotalPrepaymentPartType2 string

const (
	CloseAvailableSubtotalPrepaymentPartType2Fee                     CloseAvailableSubtotalPrepaymentPartType2 = "fee"
	CloseAvailableSubtotalPrepaymentPartType2FeeReimbursement        CloseAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	CloseAvailableSubtotalPrepaymentPartType2FeeDiscount             CloseAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	CloseAvailableSubtotalPrepaymentPartType2FeeVat                  CloseAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	CloseAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation CloseAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e CloseAvailableSubtotalPrepaymentPartType2) ToPointer() *CloseAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *CloseAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = CloseAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloseAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// CloseAvailableSubtotalTransactionType2 - Represents the transaction type
type CloseAvailableSubtotalTransactionType2 string

const (
	CloseAvailableSubtotalTransactionType2Payment                           CloseAvailableSubtotalTransactionType2 = "payment"
	CloseAvailableSubtotalTransactionType2SplitPayment                      CloseAvailableSubtotalTransactionType2 = "split-payment"
	CloseAvailableSubtotalTransactionType2FailedPayment                     CloseAvailableSubtotalTransactionType2 = "failed-payment"
	CloseAvailableSubtotalTransactionType2FailedPlatformSplitPayment        CloseAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	CloseAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    CloseAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	CloseAvailableSubtotalTransactionType2Capture                           CloseAvailableSubtotalTransactionType2 = "capture"
	CloseAvailableSubtotalTransactionType2SplitTransaction                  CloseAvailableSubtotalTransactionType2 = "split-transaction"
	CloseAvailableSubtotalTransactionType2Refund                            CloseAvailableSubtotalTransactionType2 = "refund"
	CloseAvailableSubtotalTransactionType2PlatformPaymentRefund             CloseAvailableSubtotalTransactionType2 = "platform-payment-refund"
	CloseAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     CloseAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	CloseAvailableSubtotalTransactionType2RefundCompensation                CloseAvailableSubtotalTransactionType2 = "refund-compensation"
	CloseAvailableSubtotalTransactionType2ReturnedRefundCompensation        CloseAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	CloseAvailableSubtotalTransactionType2ReturnedRefund                    CloseAvailableSubtotalTransactionType2 = "returned-refund"
	CloseAvailableSubtotalTransactionType2Chargeback                        CloseAvailableSubtotalTransactionType2 = "chargeback"
	CloseAvailableSubtotalTransactionType2ChargebackReversal                CloseAvailableSubtotalTransactionType2 = "chargeback-reversal"
	CloseAvailableSubtotalTransactionType2ChargebackCompensation            CloseAvailableSubtotalTransactionType2 = "chargeback-compensation"
	CloseAvailableSubtotalTransactionType2ReversedChargebackCompensation    CloseAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	CloseAvailableSubtotalTransactionType2PlatformPaymentChargeback         CloseAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	CloseAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback CloseAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	CloseAvailableSubtotalTransactionType2FeePrepayment                     CloseAvailableSubtotalTransactionType2 = "fee-prepayment"
	CloseAvailableSubtotalTransactionType2OutgoingTransfer                  CloseAvailableSubtotalTransactionType2 = "outgoing-transfer"
	CloseAvailableSubtotalTransactionType2IncomingTransfer                  CloseAvailableSubtotalTransactionType2 = "incoming-transfer"
	CloseAvailableSubtotalTransactionType2CanceledTransfer                  CloseAvailableSubtotalTransactionType2 = "canceled-transfer"
	CloseAvailableSubtotalTransactionType2ReturnedTransfer                  CloseAvailableSubtotalTransactionType2 = "returned-transfer"
	CloseAvailableSubtotalTransactionType2BalanceReserve                    CloseAvailableSubtotalTransactionType2 = "balance-reserve"
	CloseAvailableSubtotalTransactionType2BalanceReserveReturn              CloseAvailableSubtotalTransactionType2 = "balance-reserve-return"
	CloseAvailableSubtotalTransactionType2InvoiceRoundingCompensation       CloseAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	CloseAvailableSubtotalTransactionType2RollingReserveHold                CloseAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	CloseAvailableSubtotalTransactionType2RollingReserveRelease             CloseAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	CloseAvailableSubtotalTransactionType2BalanceCorrection                 CloseAvailableSubtotalTransactionType2 = "balance-correction"
	CloseAvailableSubtotalTransactionType2Repayment                         CloseAvailableSubtotalTransactionType2 = "repayment"
	CloseAvailableSubtotalTransactionType2Loan                              CloseAvailableSubtotalTransactionType2 = "loan"
	CloseAvailableSubtotalTransactionType2BalanceTopup                      CloseAvailableSubtotalTransactionType2 = "balance-topup"
	CloseAvailableSubtotalTransactionType2CashCollateralIssuance            CloseAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	CloseAvailableSubtotalTransactionType2CashCollateralRelease             CloseAvailableSubtotalTransactionType2 = "cash-collateral-release"
	CloseAvailableSubtotalTransactionType2PendingRollingReserve             CloseAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	CloseAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        CloseAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	CloseAvailableSubtotalTransactionType2HeldRollingReserve                CloseAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	CloseAvailableSubtotalTransactionType2ReleasedRollingReserve            CloseAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e CloseAvailableSubtotalTransactionType2) ToPointer() *CloseAvailableSubtotalTransactionType2 {
	return &e
}
func (e *CloseAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = CloseAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloseAvailableSubtotalTransactionType2: %v", v)
	}
}

type CloseAvailableSubtotal2 struct {
	SubTotals []CloseAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *CloseAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *CloseAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *CloseAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *CloseAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *CloseAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *CloseAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *CloseAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *CloseAvailableSubtotal2) GetSubTotals() []CloseAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *CloseAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *CloseAvailableSubtotal2) GetMethod() *CloseAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CloseAvailableSubtotal2) GetCardIssuer() *CloseAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *CloseAvailableSubtotal2) GetCardAudience() *CloseAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *CloseAvailableSubtotal2) GetCardRegion() *CloseAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *CloseAvailableSubtotal2) GetFeeType() *CloseAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *CloseAvailableSubtotal2) GetPrepaymentPartType() *CloseAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *CloseAvailableSubtotal2) GetTransactionType() *CloseAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type CloseAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *CloseAvailableAmount     `json:"amount,omitempty"`
	Subtotals []CloseAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *CloseAvailable) GetAmount() *CloseAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CloseAvailable) GetSubtotals() []CloseAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// Close - Only available on `transaction-categories` grouping.
type Close struct {
	Pending   *ClosePending   `json:"pending,omitempty"`
	Available *CloseAvailable `json:"available,omitempty"`
}

func (o *Close) GetPending() *ClosePending {
	if o == nil {
		return nil
	}
	return o.Pending
}

func (o *Close) GetAvailable() *CloseAvailable {
	if o == nil {
		return nil
	}
	return o.Available
}

// PaymentsPendingAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type PaymentsPendingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *PaymentsPendingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *PaymentsPendingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// PaymentsPendingSubTotalMethod1 - Payment type of the transactions
type PaymentsPendingSubTotalMethod1 string

const (
	PaymentsPendingSubTotalMethod1Alma              PaymentsPendingSubTotalMethod1 = "alma"
	PaymentsPendingSubTotalMethod1Bacs              PaymentsPendingSubTotalMethod1 = "bacs"
	PaymentsPendingSubTotalMethod1Applepay          PaymentsPendingSubTotalMethod1 = "applepay"
	PaymentsPendingSubTotalMethod1Bancomatpay       PaymentsPendingSubTotalMethod1 = "bancomatpay"
	PaymentsPendingSubTotalMethod1Bancontact        PaymentsPendingSubTotalMethod1 = "bancontact"
	PaymentsPendingSubTotalMethod1Banktransfer      PaymentsPendingSubTotalMethod1 = "banktransfer"
	PaymentsPendingSubTotalMethod1Belfius           PaymentsPendingSubTotalMethod1 = "belfius"
	PaymentsPendingSubTotalMethod1Billie            PaymentsPendingSubTotalMethod1 = "billie"
	PaymentsPendingSubTotalMethod1Bizum             PaymentsPendingSubTotalMethod1 = "bizum"
	PaymentsPendingSubTotalMethod1Bitcoin           PaymentsPendingSubTotalMethod1 = "bitcoin"
	PaymentsPendingSubTotalMethod1Blik              PaymentsPendingSubTotalMethod1 = "blik"
	PaymentsPendingSubTotalMethod1Creditcard        PaymentsPendingSubTotalMethod1 = "creditcard"
	PaymentsPendingSubTotalMethod1Directdebit       PaymentsPendingSubTotalMethod1 = "directdebit"
	PaymentsPendingSubTotalMethod1Eps               PaymentsPendingSubTotalMethod1 = "eps"
	PaymentsPendingSubTotalMethod1Giftcard          PaymentsPendingSubTotalMethod1 = "giftcard"
	PaymentsPendingSubTotalMethod1Giropay           PaymentsPendingSubTotalMethod1 = "giropay"
	PaymentsPendingSubTotalMethod1Googlepay         PaymentsPendingSubTotalMethod1 = "googlepay"
	PaymentsPendingSubTotalMethod1Ideal             PaymentsPendingSubTotalMethod1 = "ideal"
	PaymentsPendingSubTotalMethod1In3               PaymentsPendingSubTotalMethod1 = "in3"
	PaymentsPendingSubTotalMethod1Inghomepay        PaymentsPendingSubTotalMethod1 = "inghomepay"
	PaymentsPendingSubTotalMethod1Kbc               PaymentsPendingSubTotalMethod1 = "kbc"
	PaymentsPendingSubTotalMethod1Klarnapaylater    PaymentsPendingSubTotalMethod1 = "klarnapaylater"
	PaymentsPendingSubTotalMethod1Klarnapaynow      PaymentsPendingSubTotalMethod1 = "klarnapaynow"
	PaymentsPendingSubTotalMethod1Klarnasliceit     PaymentsPendingSubTotalMethod1 = "klarnasliceit"
	PaymentsPendingSubTotalMethod1Klarna            PaymentsPendingSubTotalMethod1 = "klarna"
	PaymentsPendingSubTotalMethod1Mbway             PaymentsPendingSubTotalMethod1 = "mbway"
	PaymentsPendingSubTotalMethod1Multibanco        PaymentsPendingSubTotalMethod1 = "multibanco"
	PaymentsPendingSubTotalMethod1Mybank            PaymentsPendingSubTotalMethod1 = "mybank"
	PaymentsPendingSubTotalMethod1Paybybank         PaymentsPendingSubTotalMethod1 = "paybybank"
	PaymentsPendingSubTotalMethod1Payconiq          PaymentsPendingSubTotalMethod1 = "payconiq"
	PaymentsPendingSubTotalMethod1Paypal            PaymentsPendingSubTotalMethod1 = "paypal"
	PaymentsPendingSubTotalMethod1Paysafecard       PaymentsPendingSubTotalMethod1 = "paysafecard"
	PaymentsPendingSubTotalMethod1Przelewy24        PaymentsPendingSubTotalMethod1 = "przelewy24"
	PaymentsPendingSubTotalMethod1Riverty           PaymentsPendingSubTotalMethod1 = "riverty"
	PaymentsPendingSubTotalMethod1Satispay          PaymentsPendingSubTotalMethod1 = "satispay"
	PaymentsPendingSubTotalMethod1Podiumcadeaukaart PaymentsPendingSubTotalMethod1 = "podiumcadeaukaart"
	PaymentsPendingSubTotalMethod1Pointofsale       PaymentsPendingSubTotalMethod1 = "pointofsale"
	PaymentsPendingSubTotalMethod1Sofort            PaymentsPendingSubTotalMethod1 = "sofort"
	PaymentsPendingSubTotalMethod1Swish             PaymentsPendingSubTotalMethod1 = "swish"
	PaymentsPendingSubTotalMethod1Trustly           PaymentsPendingSubTotalMethod1 = "trustly"
	PaymentsPendingSubTotalMethod1Twint             PaymentsPendingSubTotalMethod1 = "twint"
	PaymentsPendingSubTotalMethod1Voucher           PaymentsPendingSubTotalMethod1 = "voucher"
)

func (e PaymentsPendingSubTotalMethod1) ToPointer() *PaymentsPendingSubTotalMethod1 {
	return &e
}
func (e *PaymentsPendingSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = PaymentsPendingSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsPendingSubTotalMethod1: %v", v)
	}
}

// PaymentsPendingSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type PaymentsPendingSubTotalCardIssuer1 string

const (
	PaymentsPendingSubTotalCardIssuer1Amex          PaymentsPendingSubTotalCardIssuer1 = "amex"
	PaymentsPendingSubTotalCardIssuer1Maestro       PaymentsPendingSubTotalCardIssuer1 = "maestro"
	PaymentsPendingSubTotalCardIssuer1CarteBancaire PaymentsPendingSubTotalCardIssuer1 = "carte-bancaire"
	PaymentsPendingSubTotalCardIssuer1Other         PaymentsPendingSubTotalCardIssuer1 = "other"
)

func (e PaymentsPendingSubTotalCardIssuer1) ToPointer() *PaymentsPendingSubTotalCardIssuer1 {
	return &e
}
func (e *PaymentsPendingSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = PaymentsPendingSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsPendingSubTotalCardIssuer1: %v", v)
	}
}

// PaymentsPendingSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type PaymentsPendingSubTotalCardAudience1 string

const (
	PaymentsPendingSubTotalCardAudience1Corporate PaymentsPendingSubTotalCardAudience1 = "corporate"
	PaymentsPendingSubTotalCardAudience1Other     PaymentsPendingSubTotalCardAudience1 = "other"
)

func (e PaymentsPendingSubTotalCardAudience1) ToPointer() *PaymentsPendingSubTotalCardAudience1 {
	return &e
}
func (e *PaymentsPendingSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = PaymentsPendingSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsPendingSubTotalCardAudience1: %v", v)
	}
}

// PaymentsPendingSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type PaymentsPendingSubTotalCardRegion1 string

const (
	PaymentsPendingSubTotalCardRegion1IntraEea PaymentsPendingSubTotalCardRegion1 = "intra-eea"
	PaymentsPendingSubTotalCardRegion1IntraEu  PaymentsPendingSubTotalCardRegion1 = "intra-eu"
	PaymentsPendingSubTotalCardRegion1Domestic PaymentsPendingSubTotalCardRegion1 = "domestic"
	PaymentsPendingSubTotalCardRegion1Other    PaymentsPendingSubTotalCardRegion1 = "other"
)

func (e PaymentsPendingSubTotalCardRegion1) ToPointer() *PaymentsPendingSubTotalCardRegion1 {
	return &e
}
func (e *PaymentsPendingSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = PaymentsPendingSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsPendingSubTotalCardRegion1: %v", v)
	}
}

// PaymentsPendingSubTotalFeeType1 - Present when the transaction represents a fee.
type PaymentsPendingSubTotalFeeType1 string

const (
	PaymentsPendingSubTotalFeeType1PaymentFee                                        PaymentsPendingSubTotalFeeType1 = "payment-fee"
	PaymentsPendingSubTotalFeeType1DirectDebitFailureFee                             PaymentsPendingSubTotalFeeType1 = "direct-debit-failure-fee"
	PaymentsPendingSubTotalFeeType1UnauthorizedDirectDebitFee                        PaymentsPendingSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	PaymentsPendingSubTotalFeeType1BankChargedDirectDebitFailureFee                  PaymentsPendingSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	PaymentsPendingSubTotalFeeType1PartnerCommission                                 PaymentsPendingSubTotalFeeType1 = "partner-commission"
	PaymentsPendingSubTotalFeeType1ApplicationFee                                    PaymentsPendingSubTotalFeeType1 = "application-fee"
	PaymentsPendingSubTotalFeeType1CaptureFee                                        PaymentsPendingSubTotalFeeType1 = "capture-fee"
	PaymentsPendingSubTotalFeeType1RefundFee                                         PaymentsPendingSubTotalFeeType1 = "refund-fee"
	PaymentsPendingSubTotalFeeType1ChargebackFee                                     PaymentsPendingSubTotalFeeType1 = "chargeback-fee"
	PaymentsPendingSubTotalFeeType1PaymentNotificationFee                            PaymentsPendingSubTotalFeeType1 = "payment-notification-fee"
	PaymentsPendingSubTotalFeeType1TransferNotificationFee                           PaymentsPendingSubTotalFeeType1 = "transfer-notification-fee"
	PaymentsPendingSubTotalFeeType1PayoutFee                                         PaymentsPendingSubTotalFeeType1 = "payout-fee"
	PaymentsPendingSubTotalFeeType1FeeDiscount                                       PaymentsPendingSubTotalFeeType1 = "fee-discount"
	PaymentsPendingSubTotalFeeType1FeeReimbursement                                  PaymentsPendingSubTotalFeeType1 = "fee-reimbursement"
	PaymentsPendingSubTotalFeeType1PlatformVolumeFee                                 PaymentsPendingSubTotalFeeType1 = "platform-volume-fee"
	PaymentsPendingSubTotalFeeType1PlatformConnectedOrganizationsFee                 PaymentsPendingSubTotalFeeType1 = "platform-connected-organizations-fee"
	PaymentsPendingSubTotalFeeType1BalanceChargeFee                                  PaymentsPendingSubTotalFeeType1 = "balance-charge-fee"
	PaymentsPendingSubTotalFeeType1ThreedsAuthenticationAttemptFee                   PaymentsPendingSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	PaymentsPendingSubTotalFeeType1TerminalMonthlyFee                                PaymentsPendingSubTotalFeeType1 = "terminal-monthly-fee"
	PaymentsPendingSubTotalFeeType1AcceptanceRiskFee                                 PaymentsPendingSubTotalFeeType1 = "acceptance-risk-fee"
	PaymentsPendingSubTotalFeeType1TopUpFee                                          PaymentsPendingSubTotalFeeType1 = "top-up-fee"
	PaymentsPendingSubTotalFeeType1PaymentGatewayFee                                 PaymentsPendingSubTotalFeeType1 = "payment-gateway-fee"
	PaymentsPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   PaymentsPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	PaymentsPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee PaymentsPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	PaymentsPendingSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             PaymentsPendingSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	PaymentsPendingSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           PaymentsPendingSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	PaymentsPendingSubTotalFeeType1MinimumInvoiceAmountFee                           PaymentsPendingSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e PaymentsPendingSubTotalFeeType1) ToPointer() *PaymentsPendingSubTotalFeeType1 {
	return &e
}
func (e *PaymentsPendingSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = PaymentsPendingSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsPendingSubTotalFeeType1: %v", v)
	}
}

// PaymentsPendingSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type PaymentsPendingSubTotalPrepaymentPartType1 string

const (
	PaymentsPendingSubTotalPrepaymentPartType1Fee                     PaymentsPendingSubTotalPrepaymentPartType1 = "fee"
	PaymentsPendingSubTotalPrepaymentPartType1FeeReimbursement        PaymentsPendingSubTotalPrepaymentPartType1 = "fee-reimbursement"
	PaymentsPendingSubTotalPrepaymentPartType1FeeDiscount             PaymentsPendingSubTotalPrepaymentPartType1 = "fee-discount"
	PaymentsPendingSubTotalPrepaymentPartType1FeeVat                  PaymentsPendingSubTotalPrepaymentPartType1 = "fee-vat"
	PaymentsPendingSubTotalPrepaymentPartType1FeeRoundingCompensation PaymentsPendingSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e PaymentsPendingSubTotalPrepaymentPartType1) ToPointer() *PaymentsPendingSubTotalPrepaymentPartType1 {
	return &e
}
func (e *PaymentsPendingSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = PaymentsPendingSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsPendingSubTotalPrepaymentPartType1: %v", v)
	}
}

// PaymentsPendingSubTotalTransactionType1 - Represents the transaction type
type PaymentsPendingSubTotalTransactionType1 string

const (
	PaymentsPendingSubTotalTransactionType1Payment                           PaymentsPendingSubTotalTransactionType1 = "payment"
	PaymentsPendingSubTotalTransactionType1SplitPayment                      PaymentsPendingSubTotalTransactionType1 = "split-payment"
	PaymentsPendingSubTotalTransactionType1FailedPayment                     PaymentsPendingSubTotalTransactionType1 = "failed-payment"
	PaymentsPendingSubTotalTransactionType1FailedPlatformSplitPayment        PaymentsPendingSubTotalTransactionType1 = "failed-platform-split-payment"
	PaymentsPendingSubTotalTransactionType1FailedSplitPaymentCompensation    PaymentsPendingSubTotalTransactionType1 = "failed-split-payment-compensation"
	PaymentsPendingSubTotalTransactionType1Capture                           PaymentsPendingSubTotalTransactionType1 = "capture"
	PaymentsPendingSubTotalTransactionType1SplitTransaction                  PaymentsPendingSubTotalTransactionType1 = "split-transaction"
	PaymentsPendingSubTotalTransactionType1Refund                            PaymentsPendingSubTotalTransactionType1 = "refund"
	PaymentsPendingSubTotalTransactionType1PlatformPaymentRefund             PaymentsPendingSubTotalTransactionType1 = "platform-payment-refund"
	PaymentsPendingSubTotalTransactionType1ReturnedPlatformPaymentRefund     PaymentsPendingSubTotalTransactionType1 = "returned-platform-payment-refund"
	PaymentsPendingSubTotalTransactionType1RefundCompensation                PaymentsPendingSubTotalTransactionType1 = "refund-compensation"
	PaymentsPendingSubTotalTransactionType1ReturnedRefundCompensation        PaymentsPendingSubTotalTransactionType1 = "returned-refund-compensation"
	PaymentsPendingSubTotalTransactionType1ReturnedRefund                    PaymentsPendingSubTotalTransactionType1 = "returned-refund"
	PaymentsPendingSubTotalTransactionType1Chargeback                        PaymentsPendingSubTotalTransactionType1 = "chargeback"
	PaymentsPendingSubTotalTransactionType1ChargebackReversal                PaymentsPendingSubTotalTransactionType1 = "chargeback-reversal"
	PaymentsPendingSubTotalTransactionType1ChargebackCompensation            PaymentsPendingSubTotalTransactionType1 = "chargeback-compensation"
	PaymentsPendingSubTotalTransactionType1ReversedChargebackCompensation    PaymentsPendingSubTotalTransactionType1 = "reversed-chargeback-compensation"
	PaymentsPendingSubTotalTransactionType1PlatformPaymentChargeback         PaymentsPendingSubTotalTransactionType1 = "platform-payment-chargeback"
	PaymentsPendingSubTotalTransactionType1ReversedPlatformPaymentChargeback PaymentsPendingSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	PaymentsPendingSubTotalTransactionType1FeePrepayment                     PaymentsPendingSubTotalTransactionType1 = "fee-prepayment"
	PaymentsPendingSubTotalTransactionType1OutgoingTransfer                  PaymentsPendingSubTotalTransactionType1 = "outgoing-transfer"
	PaymentsPendingSubTotalTransactionType1IncomingTransfer                  PaymentsPendingSubTotalTransactionType1 = "incoming-transfer"
	PaymentsPendingSubTotalTransactionType1CanceledTransfer                  PaymentsPendingSubTotalTransactionType1 = "canceled-transfer"
	PaymentsPendingSubTotalTransactionType1ReturnedTransfer                  PaymentsPendingSubTotalTransactionType1 = "returned-transfer"
	PaymentsPendingSubTotalTransactionType1BalanceReserve                    PaymentsPendingSubTotalTransactionType1 = "balance-reserve"
	PaymentsPendingSubTotalTransactionType1BalanceReserveReturn              PaymentsPendingSubTotalTransactionType1 = "balance-reserve-return"
	PaymentsPendingSubTotalTransactionType1InvoiceRoundingCompensation       PaymentsPendingSubTotalTransactionType1 = "invoice-rounding-compensation"
	PaymentsPendingSubTotalTransactionType1RollingReserveHold                PaymentsPendingSubTotalTransactionType1 = "rolling-reserve-hold"
	PaymentsPendingSubTotalTransactionType1RollingReserveRelease             PaymentsPendingSubTotalTransactionType1 = "rolling-reserve-release"
	PaymentsPendingSubTotalTransactionType1BalanceCorrection                 PaymentsPendingSubTotalTransactionType1 = "balance-correction"
	PaymentsPendingSubTotalTransactionType1Repayment                         PaymentsPendingSubTotalTransactionType1 = "repayment"
	PaymentsPendingSubTotalTransactionType1Loan                              PaymentsPendingSubTotalTransactionType1 = "loan"
	PaymentsPendingSubTotalTransactionType1BalanceTopup                      PaymentsPendingSubTotalTransactionType1 = "balance-topup"
	PaymentsPendingSubTotalTransactionType1CashCollateralIssuance            PaymentsPendingSubTotalTransactionType1 = "cash-collateral-issuance';"
	PaymentsPendingSubTotalTransactionType1CashCollateralRelease             PaymentsPendingSubTotalTransactionType1 = "cash-collateral-release"
	PaymentsPendingSubTotalTransactionType1PendingRollingReserve             PaymentsPendingSubTotalTransactionType1 = "pending-rolling-reserve"
	PaymentsPendingSubTotalTransactionType1ToBeReleasedRollingReserve        PaymentsPendingSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	PaymentsPendingSubTotalTransactionType1HeldRollingReserve                PaymentsPendingSubTotalTransactionType1 = "held-rolling-reserve"
	PaymentsPendingSubTotalTransactionType1ReleasedRollingReserve            PaymentsPendingSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e PaymentsPendingSubTotalTransactionType1) ToPointer() *PaymentsPendingSubTotalTransactionType1 {
	return &e
}
func (e *PaymentsPendingSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = PaymentsPendingSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsPendingSubTotalTransactionType1: %v", v)
	}
}

type PaymentsPendingSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *PaymentsPendingSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *PaymentsPendingSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *PaymentsPendingSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *PaymentsPendingSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *PaymentsPendingSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *PaymentsPendingSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *PaymentsPendingSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *PaymentsPendingSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *PaymentsPendingSubTotal1) GetMethod() *PaymentsPendingSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PaymentsPendingSubTotal1) GetCardIssuer() *PaymentsPendingSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *PaymentsPendingSubTotal1) GetCardAudience() *PaymentsPendingSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *PaymentsPendingSubTotal1) GetCardRegion() *PaymentsPendingSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *PaymentsPendingSubTotal1) GetFeeType() *PaymentsPendingSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *PaymentsPendingSubTotal1) GetPrepaymentPartType() *PaymentsPendingSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *PaymentsPendingSubTotal1) GetTransactionType() *PaymentsPendingSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// PaymentsPendingSubtotalMethod2 - Payment type of the transactions
type PaymentsPendingSubtotalMethod2 string

const (
	PaymentsPendingSubtotalMethod2Alma              PaymentsPendingSubtotalMethod2 = "alma"
	PaymentsPendingSubtotalMethod2Bacs              PaymentsPendingSubtotalMethod2 = "bacs"
	PaymentsPendingSubtotalMethod2Applepay          PaymentsPendingSubtotalMethod2 = "applepay"
	PaymentsPendingSubtotalMethod2Bancomatpay       PaymentsPendingSubtotalMethod2 = "bancomatpay"
	PaymentsPendingSubtotalMethod2Bancontact        PaymentsPendingSubtotalMethod2 = "bancontact"
	PaymentsPendingSubtotalMethod2Banktransfer      PaymentsPendingSubtotalMethod2 = "banktransfer"
	PaymentsPendingSubtotalMethod2Belfius           PaymentsPendingSubtotalMethod2 = "belfius"
	PaymentsPendingSubtotalMethod2Billie            PaymentsPendingSubtotalMethod2 = "billie"
	PaymentsPendingSubtotalMethod2Bizum             PaymentsPendingSubtotalMethod2 = "bizum"
	PaymentsPendingSubtotalMethod2Bitcoin           PaymentsPendingSubtotalMethod2 = "bitcoin"
	PaymentsPendingSubtotalMethod2Blik              PaymentsPendingSubtotalMethod2 = "blik"
	PaymentsPendingSubtotalMethod2Creditcard        PaymentsPendingSubtotalMethod2 = "creditcard"
	PaymentsPendingSubtotalMethod2Directdebit       PaymentsPendingSubtotalMethod2 = "directdebit"
	PaymentsPendingSubtotalMethod2Eps               PaymentsPendingSubtotalMethod2 = "eps"
	PaymentsPendingSubtotalMethod2Giftcard          PaymentsPendingSubtotalMethod2 = "giftcard"
	PaymentsPendingSubtotalMethod2Giropay           PaymentsPendingSubtotalMethod2 = "giropay"
	PaymentsPendingSubtotalMethod2Googlepay         PaymentsPendingSubtotalMethod2 = "googlepay"
	PaymentsPendingSubtotalMethod2Ideal             PaymentsPendingSubtotalMethod2 = "ideal"
	PaymentsPendingSubtotalMethod2In3               PaymentsPendingSubtotalMethod2 = "in3"
	PaymentsPendingSubtotalMethod2Inghomepay        PaymentsPendingSubtotalMethod2 = "inghomepay"
	PaymentsPendingSubtotalMethod2Kbc               PaymentsPendingSubtotalMethod2 = "kbc"
	PaymentsPendingSubtotalMethod2Klarnapaylater    PaymentsPendingSubtotalMethod2 = "klarnapaylater"
	PaymentsPendingSubtotalMethod2Klarnapaynow      PaymentsPendingSubtotalMethod2 = "klarnapaynow"
	PaymentsPendingSubtotalMethod2Klarnasliceit     PaymentsPendingSubtotalMethod2 = "klarnasliceit"
	PaymentsPendingSubtotalMethod2Klarna            PaymentsPendingSubtotalMethod2 = "klarna"
	PaymentsPendingSubtotalMethod2Mbway             PaymentsPendingSubtotalMethod2 = "mbway"
	PaymentsPendingSubtotalMethod2Multibanco        PaymentsPendingSubtotalMethod2 = "multibanco"
	PaymentsPendingSubtotalMethod2Mybank            PaymentsPendingSubtotalMethod2 = "mybank"
	PaymentsPendingSubtotalMethod2Paybybank         PaymentsPendingSubtotalMethod2 = "paybybank"
	PaymentsPendingSubtotalMethod2Payconiq          PaymentsPendingSubtotalMethod2 = "payconiq"
	PaymentsPendingSubtotalMethod2Paypal            PaymentsPendingSubtotalMethod2 = "paypal"
	PaymentsPendingSubtotalMethod2Paysafecard       PaymentsPendingSubtotalMethod2 = "paysafecard"
	PaymentsPendingSubtotalMethod2Przelewy24        PaymentsPendingSubtotalMethod2 = "przelewy24"
	PaymentsPendingSubtotalMethod2Riverty           PaymentsPendingSubtotalMethod2 = "riverty"
	PaymentsPendingSubtotalMethod2Satispay          PaymentsPendingSubtotalMethod2 = "satispay"
	PaymentsPendingSubtotalMethod2Podiumcadeaukaart PaymentsPendingSubtotalMethod2 = "podiumcadeaukaart"
	PaymentsPendingSubtotalMethod2Pointofsale       PaymentsPendingSubtotalMethod2 = "pointofsale"
	PaymentsPendingSubtotalMethod2Sofort            PaymentsPendingSubtotalMethod2 = "sofort"
	PaymentsPendingSubtotalMethod2Swish             PaymentsPendingSubtotalMethod2 = "swish"
	PaymentsPendingSubtotalMethod2Trustly           PaymentsPendingSubtotalMethod2 = "trustly"
	PaymentsPendingSubtotalMethod2Twint             PaymentsPendingSubtotalMethod2 = "twint"
	PaymentsPendingSubtotalMethod2Voucher           PaymentsPendingSubtotalMethod2 = "voucher"
)

func (e PaymentsPendingSubtotalMethod2) ToPointer() *PaymentsPendingSubtotalMethod2 {
	return &e
}
func (e *PaymentsPendingSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = PaymentsPendingSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsPendingSubtotalMethod2: %v", v)
	}
}

// PaymentsPendingSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type PaymentsPendingSubtotalCardIssuer2 string

const (
	PaymentsPendingSubtotalCardIssuer2Amex          PaymentsPendingSubtotalCardIssuer2 = "amex"
	PaymentsPendingSubtotalCardIssuer2Maestro       PaymentsPendingSubtotalCardIssuer2 = "maestro"
	PaymentsPendingSubtotalCardIssuer2CarteBancaire PaymentsPendingSubtotalCardIssuer2 = "carte-bancaire"
	PaymentsPendingSubtotalCardIssuer2Other         PaymentsPendingSubtotalCardIssuer2 = "other"
)

func (e PaymentsPendingSubtotalCardIssuer2) ToPointer() *PaymentsPendingSubtotalCardIssuer2 {
	return &e
}
func (e *PaymentsPendingSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = PaymentsPendingSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsPendingSubtotalCardIssuer2: %v", v)
	}
}

// PaymentsPendingSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type PaymentsPendingSubtotalCardAudience2 string

const (
	PaymentsPendingSubtotalCardAudience2Corporate PaymentsPendingSubtotalCardAudience2 = "corporate"
	PaymentsPendingSubtotalCardAudience2Other     PaymentsPendingSubtotalCardAudience2 = "other"
)

func (e PaymentsPendingSubtotalCardAudience2) ToPointer() *PaymentsPendingSubtotalCardAudience2 {
	return &e
}
func (e *PaymentsPendingSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = PaymentsPendingSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsPendingSubtotalCardAudience2: %v", v)
	}
}

// PaymentsPendingSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type PaymentsPendingSubtotalCardRegion2 string

const (
	PaymentsPendingSubtotalCardRegion2IntraEea PaymentsPendingSubtotalCardRegion2 = "intra-eea"
	PaymentsPendingSubtotalCardRegion2IntraEu  PaymentsPendingSubtotalCardRegion2 = "intra-eu"
	PaymentsPendingSubtotalCardRegion2Domestic PaymentsPendingSubtotalCardRegion2 = "domestic"
	PaymentsPendingSubtotalCardRegion2Other    PaymentsPendingSubtotalCardRegion2 = "other"
)

func (e PaymentsPendingSubtotalCardRegion2) ToPointer() *PaymentsPendingSubtotalCardRegion2 {
	return &e
}
func (e *PaymentsPendingSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = PaymentsPendingSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsPendingSubtotalCardRegion2: %v", v)
	}
}

// PaymentsPendingSubtotalFeeType2 - Present when the transaction represents a fee.
type PaymentsPendingSubtotalFeeType2 string

const (
	PaymentsPendingSubtotalFeeType2PaymentFee                                        PaymentsPendingSubtotalFeeType2 = "payment-fee"
	PaymentsPendingSubtotalFeeType2DirectDebitFailureFee                             PaymentsPendingSubtotalFeeType2 = "direct-debit-failure-fee"
	PaymentsPendingSubtotalFeeType2UnauthorizedDirectDebitFee                        PaymentsPendingSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	PaymentsPendingSubtotalFeeType2BankChargedDirectDebitFailureFee                  PaymentsPendingSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	PaymentsPendingSubtotalFeeType2PartnerCommission                                 PaymentsPendingSubtotalFeeType2 = "partner-commission"
	PaymentsPendingSubtotalFeeType2ApplicationFee                                    PaymentsPendingSubtotalFeeType2 = "application-fee"
	PaymentsPendingSubtotalFeeType2CaptureFee                                        PaymentsPendingSubtotalFeeType2 = "capture-fee"
	PaymentsPendingSubtotalFeeType2RefundFee                                         PaymentsPendingSubtotalFeeType2 = "refund-fee"
	PaymentsPendingSubtotalFeeType2ChargebackFee                                     PaymentsPendingSubtotalFeeType2 = "chargeback-fee"
	PaymentsPendingSubtotalFeeType2PaymentNotificationFee                            PaymentsPendingSubtotalFeeType2 = "payment-notification-fee"
	PaymentsPendingSubtotalFeeType2TransferNotificationFee                           PaymentsPendingSubtotalFeeType2 = "transfer-notification-fee"
	PaymentsPendingSubtotalFeeType2PayoutFee                                         PaymentsPendingSubtotalFeeType2 = "payout-fee"
	PaymentsPendingSubtotalFeeType2FeeDiscount                                       PaymentsPendingSubtotalFeeType2 = "fee-discount"
	PaymentsPendingSubtotalFeeType2FeeReimbursement                                  PaymentsPendingSubtotalFeeType2 = "fee-reimbursement"
	PaymentsPendingSubtotalFeeType2PlatformVolumeFee                                 PaymentsPendingSubtotalFeeType2 = "platform-volume-fee"
	PaymentsPendingSubtotalFeeType2PlatformConnectedOrganizationsFee                 PaymentsPendingSubtotalFeeType2 = "platform-connected-organizations-fee"
	PaymentsPendingSubtotalFeeType2BalanceChargeFee                                  PaymentsPendingSubtotalFeeType2 = "balance-charge-fee"
	PaymentsPendingSubtotalFeeType2ThreedsAuthenticationAttemptFee                   PaymentsPendingSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	PaymentsPendingSubtotalFeeType2TerminalMonthlyFee                                PaymentsPendingSubtotalFeeType2 = "terminal-monthly-fee"
	PaymentsPendingSubtotalFeeType2AcceptanceRiskFee                                 PaymentsPendingSubtotalFeeType2 = "acceptance-risk-fee"
	PaymentsPendingSubtotalFeeType2TopUpFee                                          PaymentsPendingSubtotalFeeType2 = "top-up-fee"
	PaymentsPendingSubtotalFeeType2PaymentGatewayFee                                 PaymentsPendingSubtotalFeeType2 = "payment-gateway-fee"
	PaymentsPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   PaymentsPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	PaymentsPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee PaymentsPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	PaymentsPendingSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             PaymentsPendingSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	PaymentsPendingSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           PaymentsPendingSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	PaymentsPendingSubtotalFeeType2MinimumInvoiceAmountFee                           PaymentsPendingSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e PaymentsPendingSubtotalFeeType2) ToPointer() *PaymentsPendingSubtotalFeeType2 {
	return &e
}
func (e *PaymentsPendingSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = PaymentsPendingSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsPendingSubtotalFeeType2: %v", v)
	}
}

// PaymentsPendingSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type PaymentsPendingSubtotalPrepaymentPartType2 string

const (
	PaymentsPendingSubtotalPrepaymentPartType2Fee                     PaymentsPendingSubtotalPrepaymentPartType2 = "fee"
	PaymentsPendingSubtotalPrepaymentPartType2FeeReimbursement        PaymentsPendingSubtotalPrepaymentPartType2 = "fee-reimbursement"
	PaymentsPendingSubtotalPrepaymentPartType2FeeDiscount             PaymentsPendingSubtotalPrepaymentPartType2 = "fee-discount"
	PaymentsPendingSubtotalPrepaymentPartType2FeeVat                  PaymentsPendingSubtotalPrepaymentPartType2 = "fee-vat"
	PaymentsPendingSubtotalPrepaymentPartType2FeeRoundingCompensation PaymentsPendingSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e PaymentsPendingSubtotalPrepaymentPartType2) ToPointer() *PaymentsPendingSubtotalPrepaymentPartType2 {
	return &e
}
func (e *PaymentsPendingSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = PaymentsPendingSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsPendingSubtotalPrepaymentPartType2: %v", v)
	}
}

// PaymentsPendingSubtotalTransactionType2 - Represents the transaction type
type PaymentsPendingSubtotalTransactionType2 string

const (
	PaymentsPendingSubtotalTransactionType2Payment                           PaymentsPendingSubtotalTransactionType2 = "payment"
	PaymentsPendingSubtotalTransactionType2SplitPayment                      PaymentsPendingSubtotalTransactionType2 = "split-payment"
	PaymentsPendingSubtotalTransactionType2FailedPayment                     PaymentsPendingSubtotalTransactionType2 = "failed-payment"
	PaymentsPendingSubtotalTransactionType2FailedPlatformSplitPayment        PaymentsPendingSubtotalTransactionType2 = "failed-platform-split-payment"
	PaymentsPendingSubtotalTransactionType2FailedSplitPaymentCompensation    PaymentsPendingSubtotalTransactionType2 = "failed-split-payment-compensation"
	PaymentsPendingSubtotalTransactionType2Capture                           PaymentsPendingSubtotalTransactionType2 = "capture"
	PaymentsPendingSubtotalTransactionType2SplitTransaction                  PaymentsPendingSubtotalTransactionType2 = "split-transaction"
	PaymentsPendingSubtotalTransactionType2Refund                            PaymentsPendingSubtotalTransactionType2 = "refund"
	PaymentsPendingSubtotalTransactionType2PlatformPaymentRefund             PaymentsPendingSubtotalTransactionType2 = "platform-payment-refund"
	PaymentsPendingSubtotalTransactionType2ReturnedPlatformPaymentRefund     PaymentsPendingSubtotalTransactionType2 = "returned-platform-payment-refund"
	PaymentsPendingSubtotalTransactionType2RefundCompensation                PaymentsPendingSubtotalTransactionType2 = "refund-compensation"
	PaymentsPendingSubtotalTransactionType2ReturnedRefundCompensation        PaymentsPendingSubtotalTransactionType2 = "returned-refund-compensation"
	PaymentsPendingSubtotalTransactionType2ReturnedRefund                    PaymentsPendingSubtotalTransactionType2 = "returned-refund"
	PaymentsPendingSubtotalTransactionType2Chargeback                        PaymentsPendingSubtotalTransactionType2 = "chargeback"
	PaymentsPendingSubtotalTransactionType2ChargebackReversal                PaymentsPendingSubtotalTransactionType2 = "chargeback-reversal"
	PaymentsPendingSubtotalTransactionType2ChargebackCompensation            PaymentsPendingSubtotalTransactionType2 = "chargeback-compensation"
	PaymentsPendingSubtotalTransactionType2ReversedChargebackCompensation    PaymentsPendingSubtotalTransactionType2 = "reversed-chargeback-compensation"
	PaymentsPendingSubtotalTransactionType2PlatformPaymentChargeback         PaymentsPendingSubtotalTransactionType2 = "platform-payment-chargeback"
	PaymentsPendingSubtotalTransactionType2ReversedPlatformPaymentChargeback PaymentsPendingSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	PaymentsPendingSubtotalTransactionType2FeePrepayment                     PaymentsPendingSubtotalTransactionType2 = "fee-prepayment"
	PaymentsPendingSubtotalTransactionType2OutgoingTransfer                  PaymentsPendingSubtotalTransactionType2 = "outgoing-transfer"
	PaymentsPendingSubtotalTransactionType2IncomingTransfer                  PaymentsPendingSubtotalTransactionType2 = "incoming-transfer"
	PaymentsPendingSubtotalTransactionType2CanceledTransfer                  PaymentsPendingSubtotalTransactionType2 = "canceled-transfer"
	PaymentsPendingSubtotalTransactionType2ReturnedTransfer                  PaymentsPendingSubtotalTransactionType2 = "returned-transfer"
	PaymentsPendingSubtotalTransactionType2BalanceReserve                    PaymentsPendingSubtotalTransactionType2 = "balance-reserve"
	PaymentsPendingSubtotalTransactionType2BalanceReserveReturn              PaymentsPendingSubtotalTransactionType2 = "balance-reserve-return"
	PaymentsPendingSubtotalTransactionType2InvoiceRoundingCompensation       PaymentsPendingSubtotalTransactionType2 = "invoice-rounding-compensation"
	PaymentsPendingSubtotalTransactionType2RollingReserveHold                PaymentsPendingSubtotalTransactionType2 = "rolling-reserve-hold"
	PaymentsPendingSubtotalTransactionType2RollingReserveRelease             PaymentsPendingSubtotalTransactionType2 = "rolling-reserve-release"
	PaymentsPendingSubtotalTransactionType2BalanceCorrection                 PaymentsPendingSubtotalTransactionType2 = "balance-correction"
	PaymentsPendingSubtotalTransactionType2Repayment                         PaymentsPendingSubtotalTransactionType2 = "repayment"
	PaymentsPendingSubtotalTransactionType2Loan                              PaymentsPendingSubtotalTransactionType2 = "loan"
	PaymentsPendingSubtotalTransactionType2BalanceTopup                      PaymentsPendingSubtotalTransactionType2 = "balance-topup"
	PaymentsPendingSubtotalTransactionType2CashCollateralIssuance            PaymentsPendingSubtotalTransactionType2 = "cash-collateral-issuance';"
	PaymentsPendingSubtotalTransactionType2CashCollateralRelease             PaymentsPendingSubtotalTransactionType2 = "cash-collateral-release"
	PaymentsPendingSubtotalTransactionType2PendingRollingReserve             PaymentsPendingSubtotalTransactionType2 = "pending-rolling-reserve"
	PaymentsPendingSubtotalTransactionType2ToBeReleasedRollingReserve        PaymentsPendingSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	PaymentsPendingSubtotalTransactionType2HeldRollingReserve                PaymentsPendingSubtotalTransactionType2 = "held-rolling-reserve"
	PaymentsPendingSubtotalTransactionType2ReleasedRollingReserve            PaymentsPendingSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e PaymentsPendingSubtotalTransactionType2) ToPointer() *PaymentsPendingSubtotalTransactionType2 {
	return &e
}
func (e *PaymentsPendingSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = PaymentsPendingSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsPendingSubtotalTransactionType2: %v", v)
	}
}

type PaymentsPendingSubtotal2 struct {
	SubTotals []PaymentsPendingSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *PaymentsPendingSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *PaymentsPendingSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *PaymentsPendingSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *PaymentsPendingSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *PaymentsPendingSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *PaymentsPendingSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *PaymentsPendingSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *PaymentsPendingSubtotal2) GetSubTotals() []PaymentsPendingSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *PaymentsPendingSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *PaymentsPendingSubtotal2) GetMethod() *PaymentsPendingSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PaymentsPendingSubtotal2) GetCardIssuer() *PaymentsPendingSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *PaymentsPendingSubtotal2) GetCardAudience() *PaymentsPendingSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *PaymentsPendingSubtotal2) GetCardRegion() *PaymentsPendingSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *PaymentsPendingSubtotal2) GetFeeType() *PaymentsPendingSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *PaymentsPendingSubtotal2) GetPrepaymentPartType() *PaymentsPendingSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *PaymentsPendingSubtotal2) GetTransactionType() *PaymentsPendingSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type PaymentsPending struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *PaymentsPendingAmount     `json:"amount,omitempty"`
	Subtotals []PaymentsPendingSubtotal2 `json:"subtotals,omitempty"`
}

func (o *PaymentsPending) GetAmount() *PaymentsPendingAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *PaymentsPending) GetSubtotals() []PaymentsPendingSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// PaymentsMovedToAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type PaymentsMovedToAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *PaymentsMovedToAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *PaymentsMovedToAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// PaymentsMovedToAvailableSubTotalMethod1 - Payment type of the transactions
type PaymentsMovedToAvailableSubTotalMethod1 string

const (
	PaymentsMovedToAvailableSubTotalMethod1Alma              PaymentsMovedToAvailableSubTotalMethod1 = "alma"
	PaymentsMovedToAvailableSubTotalMethod1Bacs              PaymentsMovedToAvailableSubTotalMethod1 = "bacs"
	PaymentsMovedToAvailableSubTotalMethod1Applepay          PaymentsMovedToAvailableSubTotalMethod1 = "applepay"
	PaymentsMovedToAvailableSubTotalMethod1Bancomatpay       PaymentsMovedToAvailableSubTotalMethod1 = "bancomatpay"
	PaymentsMovedToAvailableSubTotalMethod1Bancontact        PaymentsMovedToAvailableSubTotalMethod1 = "bancontact"
	PaymentsMovedToAvailableSubTotalMethod1Banktransfer      PaymentsMovedToAvailableSubTotalMethod1 = "banktransfer"
	PaymentsMovedToAvailableSubTotalMethod1Belfius           PaymentsMovedToAvailableSubTotalMethod1 = "belfius"
	PaymentsMovedToAvailableSubTotalMethod1Billie            PaymentsMovedToAvailableSubTotalMethod1 = "billie"
	PaymentsMovedToAvailableSubTotalMethod1Bizum             PaymentsMovedToAvailableSubTotalMethod1 = "bizum"
	PaymentsMovedToAvailableSubTotalMethod1Bitcoin           PaymentsMovedToAvailableSubTotalMethod1 = "bitcoin"
	PaymentsMovedToAvailableSubTotalMethod1Blik              PaymentsMovedToAvailableSubTotalMethod1 = "blik"
	PaymentsMovedToAvailableSubTotalMethod1Creditcard        PaymentsMovedToAvailableSubTotalMethod1 = "creditcard"
	PaymentsMovedToAvailableSubTotalMethod1Directdebit       PaymentsMovedToAvailableSubTotalMethod1 = "directdebit"
	PaymentsMovedToAvailableSubTotalMethod1Eps               PaymentsMovedToAvailableSubTotalMethod1 = "eps"
	PaymentsMovedToAvailableSubTotalMethod1Giftcard          PaymentsMovedToAvailableSubTotalMethod1 = "giftcard"
	PaymentsMovedToAvailableSubTotalMethod1Giropay           PaymentsMovedToAvailableSubTotalMethod1 = "giropay"
	PaymentsMovedToAvailableSubTotalMethod1Googlepay         PaymentsMovedToAvailableSubTotalMethod1 = "googlepay"
	PaymentsMovedToAvailableSubTotalMethod1Ideal             PaymentsMovedToAvailableSubTotalMethod1 = "ideal"
	PaymentsMovedToAvailableSubTotalMethod1In3               PaymentsMovedToAvailableSubTotalMethod1 = "in3"
	PaymentsMovedToAvailableSubTotalMethod1Inghomepay        PaymentsMovedToAvailableSubTotalMethod1 = "inghomepay"
	PaymentsMovedToAvailableSubTotalMethod1Kbc               PaymentsMovedToAvailableSubTotalMethod1 = "kbc"
	PaymentsMovedToAvailableSubTotalMethod1Klarnapaylater    PaymentsMovedToAvailableSubTotalMethod1 = "klarnapaylater"
	PaymentsMovedToAvailableSubTotalMethod1Klarnapaynow      PaymentsMovedToAvailableSubTotalMethod1 = "klarnapaynow"
	PaymentsMovedToAvailableSubTotalMethod1Klarnasliceit     PaymentsMovedToAvailableSubTotalMethod1 = "klarnasliceit"
	PaymentsMovedToAvailableSubTotalMethod1Klarna            PaymentsMovedToAvailableSubTotalMethod1 = "klarna"
	PaymentsMovedToAvailableSubTotalMethod1Mbway             PaymentsMovedToAvailableSubTotalMethod1 = "mbway"
	PaymentsMovedToAvailableSubTotalMethod1Multibanco        PaymentsMovedToAvailableSubTotalMethod1 = "multibanco"
	PaymentsMovedToAvailableSubTotalMethod1Mybank            PaymentsMovedToAvailableSubTotalMethod1 = "mybank"
	PaymentsMovedToAvailableSubTotalMethod1Paybybank         PaymentsMovedToAvailableSubTotalMethod1 = "paybybank"
	PaymentsMovedToAvailableSubTotalMethod1Payconiq          PaymentsMovedToAvailableSubTotalMethod1 = "payconiq"
	PaymentsMovedToAvailableSubTotalMethod1Paypal            PaymentsMovedToAvailableSubTotalMethod1 = "paypal"
	PaymentsMovedToAvailableSubTotalMethod1Paysafecard       PaymentsMovedToAvailableSubTotalMethod1 = "paysafecard"
	PaymentsMovedToAvailableSubTotalMethod1Przelewy24        PaymentsMovedToAvailableSubTotalMethod1 = "przelewy24"
	PaymentsMovedToAvailableSubTotalMethod1Riverty           PaymentsMovedToAvailableSubTotalMethod1 = "riverty"
	PaymentsMovedToAvailableSubTotalMethod1Satispay          PaymentsMovedToAvailableSubTotalMethod1 = "satispay"
	PaymentsMovedToAvailableSubTotalMethod1Podiumcadeaukaart PaymentsMovedToAvailableSubTotalMethod1 = "podiumcadeaukaart"
	PaymentsMovedToAvailableSubTotalMethod1Pointofsale       PaymentsMovedToAvailableSubTotalMethod1 = "pointofsale"
	PaymentsMovedToAvailableSubTotalMethod1Sofort            PaymentsMovedToAvailableSubTotalMethod1 = "sofort"
	PaymentsMovedToAvailableSubTotalMethod1Swish             PaymentsMovedToAvailableSubTotalMethod1 = "swish"
	PaymentsMovedToAvailableSubTotalMethod1Trustly           PaymentsMovedToAvailableSubTotalMethod1 = "trustly"
	PaymentsMovedToAvailableSubTotalMethod1Twint             PaymentsMovedToAvailableSubTotalMethod1 = "twint"
	PaymentsMovedToAvailableSubTotalMethod1Voucher           PaymentsMovedToAvailableSubTotalMethod1 = "voucher"
)

func (e PaymentsMovedToAvailableSubTotalMethod1) ToPointer() *PaymentsMovedToAvailableSubTotalMethod1 {
	return &e
}
func (e *PaymentsMovedToAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = PaymentsMovedToAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsMovedToAvailableSubTotalMethod1: %v", v)
	}
}

// PaymentsMovedToAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type PaymentsMovedToAvailableSubTotalCardIssuer1 string

const (
	PaymentsMovedToAvailableSubTotalCardIssuer1Amex          PaymentsMovedToAvailableSubTotalCardIssuer1 = "amex"
	PaymentsMovedToAvailableSubTotalCardIssuer1Maestro       PaymentsMovedToAvailableSubTotalCardIssuer1 = "maestro"
	PaymentsMovedToAvailableSubTotalCardIssuer1CarteBancaire PaymentsMovedToAvailableSubTotalCardIssuer1 = "carte-bancaire"
	PaymentsMovedToAvailableSubTotalCardIssuer1Other         PaymentsMovedToAvailableSubTotalCardIssuer1 = "other"
)

func (e PaymentsMovedToAvailableSubTotalCardIssuer1) ToPointer() *PaymentsMovedToAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *PaymentsMovedToAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = PaymentsMovedToAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsMovedToAvailableSubTotalCardIssuer1: %v", v)
	}
}

// PaymentsMovedToAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type PaymentsMovedToAvailableSubTotalCardAudience1 string

const (
	PaymentsMovedToAvailableSubTotalCardAudience1Corporate PaymentsMovedToAvailableSubTotalCardAudience1 = "corporate"
	PaymentsMovedToAvailableSubTotalCardAudience1Other     PaymentsMovedToAvailableSubTotalCardAudience1 = "other"
)

func (e PaymentsMovedToAvailableSubTotalCardAudience1) ToPointer() *PaymentsMovedToAvailableSubTotalCardAudience1 {
	return &e
}
func (e *PaymentsMovedToAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = PaymentsMovedToAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsMovedToAvailableSubTotalCardAudience1: %v", v)
	}
}

// PaymentsMovedToAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type PaymentsMovedToAvailableSubTotalCardRegion1 string

const (
	PaymentsMovedToAvailableSubTotalCardRegion1IntraEea PaymentsMovedToAvailableSubTotalCardRegion1 = "intra-eea"
	PaymentsMovedToAvailableSubTotalCardRegion1IntraEu  PaymentsMovedToAvailableSubTotalCardRegion1 = "intra-eu"
	PaymentsMovedToAvailableSubTotalCardRegion1Domestic PaymentsMovedToAvailableSubTotalCardRegion1 = "domestic"
	PaymentsMovedToAvailableSubTotalCardRegion1Other    PaymentsMovedToAvailableSubTotalCardRegion1 = "other"
)

func (e PaymentsMovedToAvailableSubTotalCardRegion1) ToPointer() *PaymentsMovedToAvailableSubTotalCardRegion1 {
	return &e
}
func (e *PaymentsMovedToAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = PaymentsMovedToAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsMovedToAvailableSubTotalCardRegion1: %v", v)
	}
}

// PaymentsMovedToAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type PaymentsMovedToAvailableSubTotalFeeType1 string

const (
	PaymentsMovedToAvailableSubTotalFeeType1PaymentFee                                        PaymentsMovedToAvailableSubTotalFeeType1 = "payment-fee"
	PaymentsMovedToAvailableSubTotalFeeType1DirectDebitFailureFee                             PaymentsMovedToAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	PaymentsMovedToAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        PaymentsMovedToAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	PaymentsMovedToAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  PaymentsMovedToAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	PaymentsMovedToAvailableSubTotalFeeType1PartnerCommission                                 PaymentsMovedToAvailableSubTotalFeeType1 = "partner-commission"
	PaymentsMovedToAvailableSubTotalFeeType1ApplicationFee                                    PaymentsMovedToAvailableSubTotalFeeType1 = "application-fee"
	PaymentsMovedToAvailableSubTotalFeeType1CaptureFee                                        PaymentsMovedToAvailableSubTotalFeeType1 = "capture-fee"
	PaymentsMovedToAvailableSubTotalFeeType1RefundFee                                         PaymentsMovedToAvailableSubTotalFeeType1 = "refund-fee"
	PaymentsMovedToAvailableSubTotalFeeType1ChargebackFee                                     PaymentsMovedToAvailableSubTotalFeeType1 = "chargeback-fee"
	PaymentsMovedToAvailableSubTotalFeeType1PaymentNotificationFee                            PaymentsMovedToAvailableSubTotalFeeType1 = "payment-notification-fee"
	PaymentsMovedToAvailableSubTotalFeeType1TransferNotificationFee                           PaymentsMovedToAvailableSubTotalFeeType1 = "transfer-notification-fee"
	PaymentsMovedToAvailableSubTotalFeeType1PayoutFee                                         PaymentsMovedToAvailableSubTotalFeeType1 = "payout-fee"
	PaymentsMovedToAvailableSubTotalFeeType1FeeDiscount                                       PaymentsMovedToAvailableSubTotalFeeType1 = "fee-discount"
	PaymentsMovedToAvailableSubTotalFeeType1FeeReimbursement                                  PaymentsMovedToAvailableSubTotalFeeType1 = "fee-reimbursement"
	PaymentsMovedToAvailableSubTotalFeeType1PlatformVolumeFee                                 PaymentsMovedToAvailableSubTotalFeeType1 = "platform-volume-fee"
	PaymentsMovedToAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 PaymentsMovedToAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	PaymentsMovedToAvailableSubTotalFeeType1BalanceChargeFee                                  PaymentsMovedToAvailableSubTotalFeeType1 = "balance-charge-fee"
	PaymentsMovedToAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   PaymentsMovedToAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	PaymentsMovedToAvailableSubTotalFeeType1TerminalMonthlyFee                                PaymentsMovedToAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	PaymentsMovedToAvailableSubTotalFeeType1AcceptanceRiskFee                                 PaymentsMovedToAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	PaymentsMovedToAvailableSubTotalFeeType1TopUpFee                                          PaymentsMovedToAvailableSubTotalFeeType1 = "top-up-fee"
	PaymentsMovedToAvailableSubTotalFeeType1PaymentGatewayFee                                 PaymentsMovedToAvailableSubTotalFeeType1 = "payment-gateway-fee"
	PaymentsMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   PaymentsMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	PaymentsMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee PaymentsMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	PaymentsMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             PaymentsMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	PaymentsMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           PaymentsMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	PaymentsMovedToAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           PaymentsMovedToAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e PaymentsMovedToAvailableSubTotalFeeType1) ToPointer() *PaymentsMovedToAvailableSubTotalFeeType1 {
	return &e
}
func (e *PaymentsMovedToAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = PaymentsMovedToAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsMovedToAvailableSubTotalFeeType1: %v", v)
	}
}

// PaymentsMovedToAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type PaymentsMovedToAvailableSubTotalPrepaymentPartType1 string

const (
	PaymentsMovedToAvailableSubTotalPrepaymentPartType1Fee                     PaymentsMovedToAvailableSubTotalPrepaymentPartType1 = "fee"
	PaymentsMovedToAvailableSubTotalPrepaymentPartType1FeeReimbursement        PaymentsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	PaymentsMovedToAvailableSubTotalPrepaymentPartType1FeeDiscount             PaymentsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	PaymentsMovedToAvailableSubTotalPrepaymentPartType1FeeVat                  PaymentsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	PaymentsMovedToAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation PaymentsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e PaymentsMovedToAvailableSubTotalPrepaymentPartType1) ToPointer() *PaymentsMovedToAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *PaymentsMovedToAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = PaymentsMovedToAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsMovedToAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// PaymentsMovedToAvailableSubTotalTransactionType1 - Represents the transaction type
type PaymentsMovedToAvailableSubTotalTransactionType1 string

const (
	PaymentsMovedToAvailableSubTotalTransactionType1Payment                           PaymentsMovedToAvailableSubTotalTransactionType1 = "payment"
	PaymentsMovedToAvailableSubTotalTransactionType1SplitPayment                      PaymentsMovedToAvailableSubTotalTransactionType1 = "split-payment"
	PaymentsMovedToAvailableSubTotalTransactionType1FailedPayment                     PaymentsMovedToAvailableSubTotalTransactionType1 = "failed-payment"
	PaymentsMovedToAvailableSubTotalTransactionType1FailedPlatformSplitPayment        PaymentsMovedToAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	PaymentsMovedToAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    PaymentsMovedToAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	PaymentsMovedToAvailableSubTotalTransactionType1Capture                           PaymentsMovedToAvailableSubTotalTransactionType1 = "capture"
	PaymentsMovedToAvailableSubTotalTransactionType1SplitTransaction                  PaymentsMovedToAvailableSubTotalTransactionType1 = "split-transaction"
	PaymentsMovedToAvailableSubTotalTransactionType1Refund                            PaymentsMovedToAvailableSubTotalTransactionType1 = "refund"
	PaymentsMovedToAvailableSubTotalTransactionType1PlatformPaymentRefund             PaymentsMovedToAvailableSubTotalTransactionType1 = "platform-payment-refund"
	PaymentsMovedToAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     PaymentsMovedToAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	PaymentsMovedToAvailableSubTotalTransactionType1RefundCompensation                PaymentsMovedToAvailableSubTotalTransactionType1 = "refund-compensation"
	PaymentsMovedToAvailableSubTotalTransactionType1ReturnedRefundCompensation        PaymentsMovedToAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	PaymentsMovedToAvailableSubTotalTransactionType1ReturnedRefund                    PaymentsMovedToAvailableSubTotalTransactionType1 = "returned-refund"
	PaymentsMovedToAvailableSubTotalTransactionType1Chargeback                        PaymentsMovedToAvailableSubTotalTransactionType1 = "chargeback"
	PaymentsMovedToAvailableSubTotalTransactionType1ChargebackReversal                PaymentsMovedToAvailableSubTotalTransactionType1 = "chargeback-reversal"
	PaymentsMovedToAvailableSubTotalTransactionType1ChargebackCompensation            PaymentsMovedToAvailableSubTotalTransactionType1 = "chargeback-compensation"
	PaymentsMovedToAvailableSubTotalTransactionType1ReversedChargebackCompensation    PaymentsMovedToAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	PaymentsMovedToAvailableSubTotalTransactionType1PlatformPaymentChargeback         PaymentsMovedToAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	PaymentsMovedToAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback PaymentsMovedToAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	PaymentsMovedToAvailableSubTotalTransactionType1FeePrepayment                     PaymentsMovedToAvailableSubTotalTransactionType1 = "fee-prepayment"
	PaymentsMovedToAvailableSubTotalTransactionType1OutgoingTransfer                  PaymentsMovedToAvailableSubTotalTransactionType1 = "outgoing-transfer"
	PaymentsMovedToAvailableSubTotalTransactionType1IncomingTransfer                  PaymentsMovedToAvailableSubTotalTransactionType1 = "incoming-transfer"
	PaymentsMovedToAvailableSubTotalTransactionType1CanceledTransfer                  PaymentsMovedToAvailableSubTotalTransactionType1 = "canceled-transfer"
	PaymentsMovedToAvailableSubTotalTransactionType1ReturnedTransfer                  PaymentsMovedToAvailableSubTotalTransactionType1 = "returned-transfer"
	PaymentsMovedToAvailableSubTotalTransactionType1BalanceReserve                    PaymentsMovedToAvailableSubTotalTransactionType1 = "balance-reserve"
	PaymentsMovedToAvailableSubTotalTransactionType1BalanceReserveReturn              PaymentsMovedToAvailableSubTotalTransactionType1 = "balance-reserve-return"
	PaymentsMovedToAvailableSubTotalTransactionType1InvoiceRoundingCompensation       PaymentsMovedToAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	PaymentsMovedToAvailableSubTotalTransactionType1RollingReserveHold                PaymentsMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	PaymentsMovedToAvailableSubTotalTransactionType1RollingReserveRelease             PaymentsMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	PaymentsMovedToAvailableSubTotalTransactionType1BalanceCorrection                 PaymentsMovedToAvailableSubTotalTransactionType1 = "balance-correction"
	PaymentsMovedToAvailableSubTotalTransactionType1Repayment                         PaymentsMovedToAvailableSubTotalTransactionType1 = "repayment"
	PaymentsMovedToAvailableSubTotalTransactionType1Loan                              PaymentsMovedToAvailableSubTotalTransactionType1 = "loan"
	PaymentsMovedToAvailableSubTotalTransactionType1BalanceTopup                      PaymentsMovedToAvailableSubTotalTransactionType1 = "balance-topup"
	PaymentsMovedToAvailableSubTotalTransactionType1CashCollateralIssuance            PaymentsMovedToAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	PaymentsMovedToAvailableSubTotalTransactionType1CashCollateralRelease             PaymentsMovedToAvailableSubTotalTransactionType1 = "cash-collateral-release"
	PaymentsMovedToAvailableSubTotalTransactionType1PendingRollingReserve             PaymentsMovedToAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	PaymentsMovedToAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        PaymentsMovedToAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	PaymentsMovedToAvailableSubTotalTransactionType1HeldRollingReserve                PaymentsMovedToAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	PaymentsMovedToAvailableSubTotalTransactionType1ReleasedRollingReserve            PaymentsMovedToAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e PaymentsMovedToAvailableSubTotalTransactionType1) ToPointer() *PaymentsMovedToAvailableSubTotalTransactionType1 {
	return &e
}
func (e *PaymentsMovedToAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = PaymentsMovedToAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsMovedToAvailableSubTotalTransactionType1: %v", v)
	}
}

type PaymentsMovedToAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *PaymentsMovedToAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *PaymentsMovedToAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *PaymentsMovedToAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *PaymentsMovedToAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *PaymentsMovedToAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *PaymentsMovedToAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *PaymentsMovedToAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *PaymentsMovedToAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *PaymentsMovedToAvailableSubTotal1) GetMethod() *PaymentsMovedToAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PaymentsMovedToAvailableSubTotal1) GetCardIssuer() *PaymentsMovedToAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *PaymentsMovedToAvailableSubTotal1) GetCardAudience() *PaymentsMovedToAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *PaymentsMovedToAvailableSubTotal1) GetCardRegion() *PaymentsMovedToAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *PaymentsMovedToAvailableSubTotal1) GetFeeType() *PaymentsMovedToAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *PaymentsMovedToAvailableSubTotal1) GetPrepaymentPartType() *PaymentsMovedToAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *PaymentsMovedToAvailableSubTotal1) GetTransactionType() *PaymentsMovedToAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// PaymentsMovedToAvailableSubtotalMethod2 - Payment type of the transactions
type PaymentsMovedToAvailableSubtotalMethod2 string

const (
	PaymentsMovedToAvailableSubtotalMethod2Alma              PaymentsMovedToAvailableSubtotalMethod2 = "alma"
	PaymentsMovedToAvailableSubtotalMethod2Bacs              PaymentsMovedToAvailableSubtotalMethod2 = "bacs"
	PaymentsMovedToAvailableSubtotalMethod2Applepay          PaymentsMovedToAvailableSubtotalMethod2 = "applepay"
	PaymentsMovedToAvailableSubtotalMethod2Bancomatpay       PaymentsMovedToAvailableSubtotalMethod2 = "bancomatpay"
	PaymentsMovedToAvailableSubtotalMethod2Bancontact        PaymentsMovedToAvailableSubtotalMethod2 = "bancontact"
	PaymentsMovedToAvailableSubtotalMethod2Banktransfer      PaymentsMovedToAvailableSubtotalMethod2 = "banktransfer"
	PaymentsMovedToAvailableSubtotalMethod2Belfius           PaymentsMovedToAvailableSubtotalMethod2 = "belfius"
	PaymentsMovedToAvailableSubtotalMethod2Billie            PaymentsMovedToAvailableSubtotalMethod2 = "billie"
	PaymentsMovedToAvailableSubtotalMethod2Bizum             PaymentsMovedToAvailableSubtotalMethod2 = "bizum"
	PaymentsMovedToAvailableSubtotalMethod2Bitcoin           PaymentsMovedToAvailableSubtotalMethod2 = "bitcoin"
	PaymentsMovedToAvailableSubtotalMethod2Blik              PaymentsMovedToAvailableSubtotalMethod2 = "blik"
	PaymentsMovedToAvailableSubtotalMethod2Creditcard        PaymentsMovedToAvailableSubtotalMethod2 = "creditcard"
	PaymentsMovedToAvailableSubtotalMethod2Directdebit       PaymentsMovedToAvailableSubtotalMethod2 = "directdebit"
	PaymentsMovedToAvailableSubtotalMethod2Eps               PaymentsMovedToAvailableSubtotalMethod2 = "eps"
	PaymentsMovedToAvailableSubtotalMethod2Giftcard          PaymentsMovedToAvailableSubtotalMethod2 = "giftcard"
	PaymentsMovedToAvailableSubtotalMethod2Giropay           PaymentsMovedToAvailableSubtotalMethod2 = "giropay"
	PaymentsMovedToAvailableSubtotalMethod2Googlepay         PaymentsMovedToAvailableSubtotalMethod2 = "googlepay"
	PaymentsMovedToAvailableSubtotalMethod2Ideal             PaymentsMovedToAvailableSubtotalMethod2 = "ideal"
	PaymentsMovedToAvailableSubtotalMethod2In3               PaymentsMovedToAvailableSubtotalMethod2 = "in3"
	PaymentsMovedToAvailableSubtotalMethod2Inghomepay        PaymentsMovedToAvailableSubtotalMethod2 = "inghomepay"
	PaymentsMovedToAvailableSubtotalMethod2Kbc               PaymentsMovedToAvailableSubtotalMethod2 = "kbc"
	PaymentsMovedToAvailableSubtotalMethod2Klarnapaylater    PaymentsMovedToAvailableSubtotalMethod2 = "klarnapaylater"
	PaymentsMovedToAvailableSubtotalMethod2Klarnapaynow      PaymentsMovedToAvailableSubtotalMethod2 = "klarnapaynow"
	PaymentsMovedToAvailableSubtotalMethod2Klarnasliceit     PaymentsMovedToAvailableSubtotalMethod2 = "klarnasliceit"
	PaymentsMovedToAvailableSubtotalMethod2Klarna            PaymentsMovedToAvailableSubtotalMethod2 = "klarna"
	PaymentsMovedToAvailableSubtotalMethod2Mbway             PaymentsMovedToAvailableSubtotalMethod2 = "mbway"
	PaymentsMovedToAvailableSubtotalMethod2Multibanco        PaymentsMovedToAvailableSubtotalMethod2 = "multibanco"
	PaymentsMovedToAvailableSubtotalMethod2Mybank            PaymentsMovedToAvailableSubtotalMethod2 = "mybank"
	PaymentsMovedToAvailableSubtotalMethod2Paybybank         PaymentsMovedToAvailableSubtotalMethod2 = "paybybank"
	PaymentsMovedToAvailableSubtotalMethod2Payconiq          PaymentsMovedToAvailableSubtotalMethod2 = "payconiq"
	PaymentsMovedToAvailableSubtotalMethod2Paypal            PaymentsMovedToAvailableSubtotalMethod2 = "paypal"
	PaymentsMovedToAvailableSubtotalMethod2Paysafecard       PaymentsMovedToAvailableSubtotalMethod2 = "paysafecard"
	PaymentsMovedToAvailableSubtotalMethod2Przelewy24        PaymentsMovedToAvailableSubtotalMethod2 = "przelewy24"
	PaymentsMovedToAvailableSubtotalMethod2Riverty           PaymentsMovedToAvailableSubtotalMethod2 = "riverty"
	PaymentsMovedToAvailableSubtotalMethod2Satispay          PaymentsMovedToAvailableSubtotalMethod2 = "satispay"
	PaymentsMovedToAvailableSubtotalMethod2Podiumcadeaukaart PaymentsMovedToAvailableSubtotalMethod2 = "podiumcadeaukaart"
	PaymentsMovedToAvailableSubtotalMethod2Pointofsale       PaymentsMovedToAvailableSubtotalMethod2 = "pointofsale"
	PaymentsMovedToAvailableSubtotalMethod2Sofort            PaymentsMovedToAvailableSubtotalMethod2 = "sofort"
	PaymentsMovedToAvailableSubtotalMethod2Swish             PaymentsMovedToAvailableSubtotalMethod2 = "swish"
	PaymentsMovedToAvailableSubtotalMethod2Trustly           PaymentsMovedToAvailableSubtotalMethod2 = "trustly"
	PaymentsMovedToAvailableSubtotalMethod2Twint             PaymentsMovedToAvailableSubtotalMethod2 = "twint"
	PaymentsMovedToAvailableSubtotalMethod2Voucher           PaymentsMovedToAvailableSubtotalMethod2 = "voucher"
)

func (e PaymentsMovedToAvailableSubtotalMethod2) ToPointer() *PaymentsMovedToAvailableSubtotalMethod2 {
	return &e
}
func (e *PaymentsMovedToAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = PaymentsMovedToAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsMovedToAvailableSubtotalMethod2: %v", v)
	}
}

// PaymentsMovedToAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type PaymentsMovedToAvailableSubtotalCardIssuer2 string

const (
	PaymentsMovedToAvailableSubtotalCardIssuer2Amex          PaymentsMovedToAvailableSubtotalCardIssuer2 = "amex"
	PaymentsMovedToAvailableSubtotalCardIssuer2Maestro       PaymentsMovedToAvailableSubtotalCardIssuer2 = "maestro"
	PaymentsMovedToAvailableSubtotalCardIssuer2CarteBancaire PaymentsMovedToAvailableSubtotalCardIssuer2 = "carte-bancaire"
	PaymentsMovedToAvailableSubtotalCardIssuer2Other         PaymentsMovedToAvailableSubtotalCardIssuer2 = "other"
)

func (e PaymentsMovedToAvailableSubtotalCardIssuer2) ToPointer() *PaymentsMovedToAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *PaymentsMovedToAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = PaymentsMovedToAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsMovedToAvailableSubtotalCardIssuer2: %v", v)
	}
}

// PaymentsMovedToAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type PaymentsMovedToAvailableSubtotalCardAudience2 string

const (
	PaymentsMovedToAvailableSubtotalCardAudience2Corporate PaymentsMovedToAvailableSubtotalCardAudience2 = "corporate"
	PaymentsMovedToAvailableSubtotalCardAudience2Other     PaymentsMovedToAvailableSubtotalCardAudience2 = "other"
)

func (e PaymentsMovedToAvailableSubtotalCardAudience2) ToPointer() *PaymentsMovedToAvailableSubtotalCardAudience2 {
	return &e
}
func (e *PaymentsMovedToAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = PaymentsMovedToAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsMovedToAvailableSubtotalCardAudience2: %v", v)
	}
}

// PaymentsMovedToAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type PaymentsMovedToAvailableSubtotalCardRegion2 string

const (
	PaymentsMovedToAvailableSubtotalCardRegion2IntraEea PaymentsMovedToAvailableSubtotalCardRegion2 = "intra-eea"
	PaymentsMovedToAvailableSubtotalCardRegion2IntraEu  PaymentsMovedToAvailableSubtotalCardRegion2 = "intra-eu"
	PaymentsMovedToAvailableSubtotalCardRegion2Domestic PaymentsMovedToAvailableSubtotalCardRegion2 = "domestic"
	PaymentsMovedToAvailableSubtotalCardRegion2Other    PaymentsMovedToAvailableSubtotalCardRegion2 = "other"
)

func (e PaymentsMovedToAvailableSubtotalCardRegion2) ToPointer() *PaymentsMovedToAvailableSubtotalCardRegion2 {
	return &e
}
func (e *PaymentsMovedToAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = PaymentsMovedToAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsMovedToAvailableSubtotalCardRegion2: %v", v)
	}
}

// PaymentsMovedToAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type PaymentsMovedToAvailableSubtotalFeeType2 string

const (
	PaymentsMovedToAvailableSubtotalFeeType2PaymentFee                                        PaymentsMovedToAvailableSubtotalFeeType2 = "payment-fee"
	PaymentsMovedToAvailableSubtotalFeeType2DirectDebitFailureFee                             PaymentsMovedToAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	PaymentsMovedToAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        PaymentsMovedToAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	PaymentsMovedToAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  PaymentsMovedToAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	PaymentsMovedToAvailableSubtotalFeeType2PartnerCommission                                 PaymentsMovedToAvailableSubtotalFeeType2 = "partner-commission"
	PaymentsMovedToAvailableSubtotalFeeType2ApplicationFee                                    PaymentsMovedToAvailableSubtotalFeeType2 = "application-fee"
	PaymentsMovedToAvailableSubtotalFeeType2CaptureFee                                        PaymentsMovedToAvailableSubtotalFeeType2 = "capture-fee"
	PaymentsMovedToAvailableSubtotalFeeType2RefundFee                                         PaymentsMovedToAvailableSubtotalFeeType2 = "refund-fee"
	PaymentsMovedToAvailableSubtotalFeeType2ChargebackFee                                     PaymentsMovedToAvailableSubtotalFeeType2 = "chargeback-fee"
	PaymentsMovedToAvailableSubtotalFeeType2PaymentNotificationFee                            PaymentsMovedToAvailableSubtotalFeeType2 = "payment-notification-fee"
	PaymentsMovedToAvailableSubtotalFeeType2TransferNotificationFee                           PaymentsMovedToAvailableSubtotalFeeType2 = "transfer-notification-fee"
	PaymentsMovedToAvailableSubtotalFeeType2PayoutFee                                         PaymentsMovedToAvailableSubtotalFeeType2 = "payout-fee"
	PaymentsMovedToAvailableSubtotalFeeType2FeeDiscount                                       PaymentsMovedToAvailableSubtotalFeeType2 = "fee-discount"
	PaymentsMovedToAvailableSubtotalFeeType2FeeReimbursement                                  PaymentsMovedToAvailableSubtotalFeeType2 = "fee-reimbursement"
	PaymentsMovedToAvailableSubtotalFeeType2PlatformVolumeFee                                 PaymentsMovedToAvailableSubtotalFeeType2 = "platform-volume-fee"
	PaymentsMovedToAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 PaymentsMovedToAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	PaymentsMovedToAvailableSubtotalFeeType2BalanceChargeFee                                  PaymentsMovedToAvailableSubtotalFeeType2 = "balance-charge-fee"
	PaymentsMovedToAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   PaymentsMovedToAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	PaymentsMovedToAvailableSubtotalFeeType2TerminalMonthlyFee                                PaymentsMovedToAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	PaymentsMovedToAvailableSubtotalFeeType2AcceptanceRiskFee                                 PaymentsMovedToAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	PaymentsMovedToAvailableSubtotalFeeType2TopUpFee                                          PaymentsMovedToAvailableSubtotalFeeType2 = "top-up-fee"
	PaymentsMovedToAvailableSubtotalFeeType2PaymentGatewayFee                                 PaymentsMovedToAvailableSubtotalFeeType2 = "payment-gateway-fee"
	PaymentsMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   PaymentsMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	PaymentsMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee PaymentsMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	PaymentsMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             PaymentsMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	PaymentsMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           PaymentsMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	PaymentsMovedToAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           PaymentsMovedToAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e PaymentsMovedToAvailableSubtotalFeeType2) ToPointer() *PaymentsMovedToAvailableSubtotalFeeType2 {
	return &e
}
func (e *PaymentsMovedToAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = PaymentsMovedToAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsMovedToAvailableSubtotalFeeType2: %v", v)
	}
}

// PaymentsMovedToAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type PaymentsMovedToAvailableSubtotalPrepaymentPartType2 string

const (
	PaymentsMovedToAvailableSubtotalPrepaymentPartType2Fee                     PaymentsMovedToAvailableSubtotalPrepaymentPartType2 = "fee"
	PaymentsMovedToAvailableSubtotalPrepaymentPartType2FeeReimbursement        PaymentsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	PaymentsMovedToAvailableSubtotalPrepaymentPartType2FeeDiscount             PaymentsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	PaymentsMovedToAvailableSubtotalPrepaymentPartType2FeeVat                  PaymentsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	PaymentsMovedToAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation PaymentsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e PaymentsMovedToAvailableSubtotalPrepaymentPartType2) ToPointer() *PaymentsMovedToAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *PaymentsMovedToAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = PaymentsMovedToAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsMovedToAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// PaymentsMovedToAvailableSubtotalTransactionType2 - Represents the transaction type
type PaymentsMovedToAvailableSubtotalTransactionType2 string

const (
	PaymentsMovedToAvailableSubtotalTransactionType2Payment                           PaymentsMovedToAvailableSubtotalTransactionType2 = "payment"
	PaymentsMovedToAvailableSubtotalTransactionType2SplitPayment                      PaymentsMovedToAvailableSubtotalTransactionType2 = "split-payment"
	PaymentsMovedToAvailableSubtotalTransactionType2FailedPayment                     PaymentsMovedToAvailableSubtotalTransactionType2 = "failed-payment"
	PaymentsMovedToAvailableSubtotalTransactionType2FailedPlatformSplitPayment        PaymentsMovedToAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	PaymentsMovedToAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    PaymentsMovedToAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	PaymentsMovedToAvailableSubtotalTransactionType2Capture                           PaymentsMovedToAvailableSubtotalTransactionType2 = "capture"
	PaymentsMovedToAvailableSubtotalTransactionType2SplitTransaction                  PaymentsMovedToAvailableSubtotalTransactionType2 = "split-transaction"
	PaymentsMovedToAvailableSubtotalTransactionType2Refund                            PaymentsMovedToAvailableSubtotalTransactionType2 = "refund"
	PaymentsMovedToAvailableSubtotalTransactionType2PlatformPaymentRefund             PaymentsMovedToAvailableSubtotalTransactionType2 = "platform-payment-refund"
	PaymentsMovedToAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     PaymentsMovedToAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	PaymentsMovedToAvailableSubtotalTransactionType2RefundCompensation                PaymentsMovedToAvailableSubtotalTransactionType2 = "refund-compensation"
	PaymentsMovedToAvailableSubtotalTransactionType2ReturnedRefundCompensation        PaymentsMovedToAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	PaymentsMovedToAvailableSubtotalTransactionType2ReturnedRefund                    PaymentsMovedToAvailableSubtotalTransactionType2 = "returned-refund"
	PaymentsMovedToAvailableSubtotalTransactionType2Chargeback                        PaymentsMovedToAvailableSubtotalTransactionType2 = "chargeback"
	PaymentsMovedToAvailableSubtotalTransactionType2ChargebackReversal                PaymentsMovedToAvailableSubtotalTransactionType2 = "chargeback-reversal"
	PaymentsMovedToAvailableSubtotalTransactionType2ChargebackCompensation            PaymentsMovedToAvailableSubtotalTransactionType2 = "chargeback-compensation"
	PaymentsMovedToAvailableSubtotalTransactionType2ReversedChargebackCompensation    PaymentsMovedToAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	PaymentsMovedToAvailableSubtotalTransactionType2PlatformPaymentChargeback         PaymentsMovedToAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	PaymentsMovedToAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback PaymentsMovedToAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	PaymentsMovedToAvailableSubtotalTransactionType2FeePrepayment                     PaymentsMovedToAvailableSubtotalTransactionType2 = "fee-prepayment"
	PaymentsMovedToAvailableSubtotalTransactionType2OutgoingTransfer                  PaymentsMovedToAvailableSubtotalTransactionType2 = "outgoing-transfer"
	PaymentsMovedToAvailableSubtotalTransactionType2IncomingTransfer                  PaymentsMovedToAvailableSubtotalTransactionType2 = "incoming-transfer"
	PaymentsMovedToAvailableSubtotalTransactionType2CanceledTransfer                  PaymentsMovedToAvailableSubtotalTransactionType2 = "canceled-transfer"
	PaymentsMovedToAvailableSubtotalTransactionType2ReturnedTransfer                  PaymentsMovedToAvailableSubtotalTransactionType2 = "returned-transfer"
	PaymentsMovedToAvailableSubtotalTransactionType2BalanceReserve                    PaymentsMovedToAvailableSubtotalTransactionType2 = "balance-reserve"
	PaymentsMovedToAvailableSubtotalTransactionType2BalanceReserveReturn              PaymentsMovedToAvailableSubtotalTransactionType2 = "balance-reserve-return"
	PaymentsMovedToAvailableSubtotalTransactionType2InvoiceRoundingCompensation       PaymentsMovedToAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	PaymentsMovedToAvailableSubtotalTransactionType2RollingReserveHold                PaymentsMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	PaymentsMovedToAvailableSubtotalTransactionType2RollingReserveRelease             PaymentsMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	PaymentsMovedToAvailableSubtotalTransactionType2BalanceCorrection                 PaymentsMovedToAvailableSubtotalTransactionType2 = "balance-correction"
	PaymentsMovedToAvailableSubtotalTransactionType2Repayment                         PaymentsMovedToAvailableSubtotalTransactionType2 = "repayment"
	PaymentsMovedToAvailableSubtotalTransactionType2Loan                              PaymentsMovedToAvailableSubtotalTransactionType2 = "loan"
	PaymentsMovedToAvailableSubtotalTransactionType2BalanceTopup                      PaymentsMovedToAvailableSubtotalTransactionType2 = "balance-topup"
	PaymentsMovedToAvailableSubtotalTransactionType2CashCollateralIssuance            PaymentsMovedToAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	PaymentsMovedToAvailableSubtotalTransactionType2CashCollateralRelease             PaymentsMovedToAvailableSubtotalTransactionType2 = "cash-collateral-release"
	PaymentsMovedToAvailableSubtotalTransactionType2PendingRollingReserve             PaymentsMovedToAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	PaymentsMovedToAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        PaymentsMovedToAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	PaymentsMovedToAvailableSubtotalTransactionType2HeldRollingReserve                PaymentsMovedToAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	PaymentsMovedToAvailableSubtotalTransactionType2ReleasedRollingReserve            PaymentsMovedToAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e PaymentsMovedToAvailableSubtotalTransactionType2) ToPointer() *PaymentsMovedToAvailableSubtotalTransactionType2 {
	return &e
}
func (e *PaymentsMovedToAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = PaymentsMovedToAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsMovedToAvailableSubtotalTransactionType2: %v", v)
	}
}

type PaymentsMovedToAvailableSubtotal2 struct {
	SubTotals []PaymentsMovedToAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *PaymentsMovedToAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *PaymentsMovedToAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *PaymentsMovedToAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *PaymentsMovedToAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *PaymentsMovedToAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *PaymentsMovedToAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *PaymentsMovedToAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *PaymentsMovedToAvailableSubtotal2) GetSubTotals() []PaymentsMovedToAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *PaymentsMovedToAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *PaymentsMovedToAvailableSubtotal2) GetMethod() *PaymentsMovedToAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PaymentsMovedToAvailableSubtotal2) GetCardIssuer() *PaymentsMovedToAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *PaymentsMovedToAvailableSubtotal2) GetCardAudience() *PaymentsMovedToAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *PaymentsMovedToAvailableSubtotal2) GetCardRegion() *PaymentsMovedToAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *PaymentsMovedToAvailableSubtotal2) GetFeeType() *PaymentsMovedToAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *PaymentsMovedToAvailableSubtotal2) GetPrepaymentPartType() *PaymentsMovedToAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *PaymentsMovedToAvailableSubtotal2) GetTransactionType() *PaymentsMovedToAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type PaymentsMovedToAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *PaymentsMovedToAvailableAmount     `json:"amount,omitempty"`
	Subtotals []PaymentsMovedToAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *PaymentsMovedToAvailable) GetAmount() *PaymentsMovedToAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *PaymentsMovedToAvailable) GetSubtotals() []PaymentsMovedToAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// PaymentsImmediatelyAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type PaymentsImmediatelyAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *PaymentsImmediatelyAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *PaymentsImmediatelyAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// PaymentsImmediatelyAvailableSubTotalMethod1 - Payment type of the transactions
type PaymentsImmediatelyAvailableSubTotalMethod1 string

const (
	PaymentsImmediatelyAvailableSubTotalMethod1Alma              PaymentsImmediatelyAvailableSubTotalMethod1 = "alma"
	PaymentsImmediatelyAvailableSubTotalMethod1Bacs              PaymentsImmediatelyAvailableSubTotalMethod1 = "bacs"
	PaymentsImmediatelyAvailableSubTotalMethod1Applepay          PaymentsImmediatelyAvailableSubTotalMethod1 = "applepay"
	PaymentsImmediatelyAvailableSubTotalMethod1Bancomatpay       PaymentsImmediatelyAvailableSubTotalMethod1 = "bancomatpay"
	PaymentsImmediatelyAvailableSubTotalMethod1Bancontact        PaymentsImmediatelyAvailableSubTotalMethod1 = "bancontact"
	PaymentsImmediatelyAvailableSubTotalMethod1Banktransfer      PaymentsImmediatelyAvailableSubTotalMethod1 = "banktransfer"
	PaymentsImmediatelyAvailableSubTotalMethod1Belfius           PaymentsImmediatelyAvailableSubTotalMethod1 = "belfius"
	PaymentsImmediatelyAvailableSubTotalMethod1Billie            PaymentsImmediatelyAvailableSubTotalMethod1 = "billie"
	PaymentsImmediatelyAvailableSubTotalMethod1Bizum             PaymentsImmediatelyAvailableSubTotalMethod1 = "bizum"
	PaymentsImmediatelyAvailableSubTotalMethod1Bitcoin           PaymentsImmediatelyAvailableSubTotalMethod1 = "bitcoin"
	PaymentsImmediatelyAvailableSubTotalMethod1Blik              PaymentsImmediatelyAvailableSubTotalMethod1 = "blik"
	PaymentsImmediatelyAvailableSubTotalMethod1Creditcard        PaymentsImmediatelyAvailableSubTotalMethod1 = "creditcard"
	PaymentsImmediatelyAvailableSubTotalMethod1Directdebit       PaymentsImmediatelyAvailableSubTotalMethod1 = "directdebit"
	PaymentsImmediatelyAvailableSubTotalMethod1Eps               PaymentsImmediatelyAvailableSubTotalMethod1 = "eps"
	PaymentsImmediatelyAvailableSubTotalMethod1Giftcard          PaymentsImmediatelyAvailableSubTotalMethod1 = "giftcard"
	PaymentsImmediatelyAvailableSubTotalMethod1Giropay           PaymentsImmediatelyAvailableSubTotalMethod1 = "giropay"
	PaymentsImmediatelyAvailableSubTotalMethod1Googlepay         PaymentsImmediatelyAvailableSubTotalMethod1 = "googlepay"
	PaymentsImmediatelyAvailableSubTotalMethod1Ideal             PaymentsImmediatelyAvailableSubTotalMethod1 = "ideal"
	PaymentsImmediatelyAvailableSubTotalMethod1In3               PaymentsImmediatelyAvailableSubTotalMethod1 = "in3"
	PaymentsImmediatelyAvailableSubTotalMethod1Inghomepay        PaymentsImmediatelyAvailableSubTotalMethod1 = "inghomepay"
	PaymentsImmediatelyAvailableSubTotalMethod1Kbc               PaymentsImmediatelyAvailableSubTotalMethod1 = "kbc"
	PaymentsImmediatelyAvailableSubTotalMethod1Klarnapaylater    PaymentsImmediatelyAvailableSubTotalMethod1 = "klarnapaylater"
	PaymentsImmediatelyAvailableSubTotalMethod1Klarnapaynow      PaymentsImmediatelyAvailableSubTotalMethod1 = "klarnapaynow"
	PaymentsImmediatelyAvailableSubTotalMethod1Klarnasliceit     PaymentsImmediatelyAvailableSubTotalMethod1 = "klarnasliceit"
	PaymentsImmediatelyAvailableSubTotalMethod1Klarna            PaymentsImmediatelyAvailableSubTotalMethod1 = "klarna"
	PaymentsImmediatelyAvailableSubTotalMethod1Mbway             PaymentsImmediatelyAvailableSubTotalMethod1 = "mbway"
	PaymentsImmediatelyAvailableSubTotalMethod1Multibanco        PaymentsImmediatelyAvailableSubTotalMethod1 = "multibanco"
	PaymentsImmediatelyAvailableSubTotalMethod1Mybank            PaymentsImmediatelyAvailableSubTotalMethod1 = "mybank"
	PaymentsImmediatelyAvailableSubTotalMethod1Paybybank         PaymentsImmediatelyAvailableSubTotalMethod1 = "paybybank"
	PaymentsImmediatelyAvailableSubTotalMethod1Payconiq          PaymentsImmediatelyAvailableSubTotalMethod1 = "payconiq"
	PaymentsImmediatelyAvailableSubTotalMethod1Paypal            PaymentsImmediatelyAvailableSubTotalMethod1 = "paypal"
	PaymentsImmediatelyAvailableSubTotalMethod1Paysafecard       PaymentsImmediatelyAvailableSubTotalMethod1 = "paysafecard"
	PaymentsImmediatelyAvailableSubTotalMethod1Przelewy24        PaymentsImmediatelyAvailableSubTotalMethod1 = "przelewy24"
	PaymentsImmediatelyAvailableSubTotalMethod1Riverty           PaymentsImmediatelyAvailableSubTotalMethod1 = "riverty"
	PaymentsImmediatelyAvailableSubTotalMethod1Satispay          PaymentsImmediatelyAvailableSubTotalMethod1 = "satispay"
	PaymentsImmediatelyAvailableSubTotalMethod1Podiumcadeaukaart PaymentsImmediatelyAvailableSubTotalMethod1 = "podiumcadeaukaart"
	PaymentsImmediatelyAvailableSubTotalMethod1Pointofsale       PaymentsImmediatelyAvailableSubTotalMethod1 = "pointofsale"
	PaymentsImmediatelyAvailableSubTotalMethod1Sofort            PaymentsImmediatelyAvailableSubTotalMethod1 = "sofort"
	PaymentsImmediatelyAvailableSubTotalMethod1Swish             PaymentsImmediatelyAvailableSubTotalMethod1 = "swish"
	PaymentsImmediatelyAvailableSubTotalMethod1Trustly           PaymentsImmediatelyAvailableSubTotalMethod1 = "trustly"
	PaymentsImmediatelyAvailableSubTotalMethod1Twint             PaymentsImmediatelyAvailableSubTotalMethod1 = "twint"
	PaymentsImmediatelyAvailableSubTotalMethod1Voucher           PaymentsImmediatelyAvailableSubTotalMethod1 = "voucher"
)

func (e PaymentsImmediatelyAvailableSubTotalMethod1) ToPointer() *PaymentsImmediatelyAvailableSubTotalMethod1 {
	return &e
}
func (e *PaymentsImmediatelyAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = PaymentsImmediatelyAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsImmediatelyAvailableSubTotalMethod1: %v", v)
	}
}

// PaymentsImmediatelyAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type PaymentsImmediatelyAvailableSubTotalCardIssuer1 string

const (
	PaymentsImmediatelyAvailableSubTotalCardIssuer1Amex          PaymentsImmediatelyAvailableSubTotalCardIssuer1 = "amex"
	PaymentsImmediatelyAvailableSubTotalCardIssuer1Maestro       PaymentsImmediatelyAvailableSubTotalCardIssuer1 = "maestro"
	PaymentsImmediatelyAvailableSubTotalCardIssuer1CarteBancaire PaymentsImmediatelyAvailableSubTotalCardIssuer1 = "carte-bancaire"
	PaymentsImmediatelyAvailableSubTotalCardIssuer1Other         PaymentsImmediatelyAvailableSubTotalCardIssuer1 = "other"
)

func (e PaymentsImmediatelyAvailableSubTotalCardIssuer1) ToPointer() *PaymentsImmediatelyAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *PaymentsImmediatelyAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = PaymentsImmediatelyAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsImmediatelyAvailableSubTotalCardIssuer1: %v", v)
	}
}

// PaymentsImmediatelyAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type PaymentsImmediatelyAvailableSubTotalCardAudience1 string

const (
	PaymentsImmediatelyAvailableSubTotalCardAudience1Corporate PaymentsImmediatelyAvailableSubTotalCardAudience1 = "corporate"
	PaymentsImmediatelyAvailableSubTotalCardAudience1Other     PaymentsImmediatelyAvailableSubTotalCardAudience1 = "other"
)

func (e PaymentsImmediatelyAvailableSubTotalCardAudience1) ToPointer() *PaymentsImmediatelyAvailableSubTotalCardAudience1 {
	return &e
}
func (e *PaymentsImmediatelyAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = PaymentsImmediatelyAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsImmediatelyAvailableSubTotalCardAudience1: %v", v)
	}
}

// PaymentsImmediatelyAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type PaymentsImmediatelyAvailableSubTotalCardRegion1 string

const (
	PaymentsImmediatelyAvailableSubTotalCardRegion1IntraEea PaymentsImmediatelyAvailableSubTotalCardRegion1 = "intra-eea"
	PaymentsImmediatelyAvailableSubTotalCardRegion1IntraEu  PaymentsImmediatelyAvailableSubTotalCardRegion1 = "intra-eu"
	PaymentsImmediatelyAvailableSubTotalCardRegion1Domestic PaymentsImmediatelyAvailableSubTotalCardRegion1 = "domestic"
	PaymentsImmediatelyAvailableSubTotalCardRegion1Other    PaymentsImmediatelyAvailableSubTotalCardRegion1 = "other"
)

func (e PaymentsImmediatelyAvailableSubTotalCardRegion1) ToPointer() *PaymentsImmediatelyAvailableSubTotalCardRegion1 {
	return &e
}
func (e *PaymentsImmediatelyAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = PaymentsImmediatelyAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsImmediatelyAvailableSubTotalCardRegion1: %v", v)
	}
}

// PaymentsImmediatelyAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type PaymentsImmediatelyAvailableSubTotalFeeType1 string

const (
	PaymentsImmediatelyAvailableSubTotalFeeType1PaymentFee                                        PaymentsImmediatelyAvailableSubTotalFeeType1 = "payment-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1DirectDebitFailureFee                             PaymentsImmediatelyAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        PaymentsImmediatelyAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  PaymentsImmediatelyAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1PartnerCommission                                 PaymentsImmediatelyAvailableSubTotalFeeType1 = "partner-commission"
	PaymentsImmediatelyAvailableSubTotalFeeType1ApplicationFee                                    PaymentsImmediatelyAvailableSubTotalFeeType1 = "application-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1CaptureFee                                        PaymentsImmediatelyAvailableSubTotalFeeType1 = "capture-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1RefundFee                                         PaymentsImmediatelyAvailableSubTotalFeeType1 = "refund-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1ChargebackFee                                     PaymentsImmediatelyAvailableSubTotalFeeType1 = "chargeback-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1PaymentNotificationFee                            PaymentsImmediatelyAvailableSubTotalFeeType1 = "payment-notification-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1TransferNotificationFee                           PaymentsImmediatelyAvailableSubTotalFeeType1 = "transfer-notification-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1PayoutFee                                         PaymentsImmediatelyAvailableSubTotalFeeType1 = "payout-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1FeeDiscount                                       PaymentsImmediatelyAvailableSubTotalFeeType1 = "fee-discount"
	PaymentsImmediatelyAvailableSubTotalFeeType1FeeReimbursement                                  PaymentsImmediatelyAvailableSubTotalFeeType1 = "fee-reimbursement"
	PaymentsImmediatelyAvailableSubTotalFeeType1PlatformVolumeFee                                 PaymentsImmediatelyAvailableSubTotalFeeType1 = "platform-volume-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 PaymentsImmediatelyAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1BalanceChargeFee                                  PaymentsImmediatelyAvailableSubTotalFeeType1 = "balance-charge-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   PaymentsImmediatelyAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1TerminalMonthlyFee                                PaymentsImmediatelyAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1AcceptanceRiskFee                                 PaymentsImmediatelyAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1TopUpFee                                          PaymentsImmediatelyAvailableSubTotalFeeType1 = "top-up-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1PaymentGatewayFee                                 PaymentsImmediatelyAvailableSubTotalFeeType1 = "payment-gateway-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   PaymentsImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee PaymentsImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             PaymentsImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           PaymentsImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	PaymentsImmediatelyAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           PaymentsImmediatelyAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e PaymentsImmediatelyAvailableSubTotalFeeType1) ToPointer() *PaymentsImmediatelyAvailableSubTotalFeeType1 {
	return &e
}
func (e *PaymentsImmediatelyAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = PaymentsImmediatelyAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsImmediatelyAvailableSubTotalFeeType1: %v", v)
	}
}

// PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 string

const (
	PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1Fee                     PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee"
	PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1FeeReimbursement        PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1FeeDiscount             PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1FeeVat                  PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1) ToPointer() *PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// PaymentsImmediatelyAvailableSubTotalTransactionType1 - Represents the transaction type
type PaymentsImmediatelyAvailableSubTotalTransactionType1 string

const (
	PaymentsImmediatelyAvailableSubTotalTransactionType1Payment                           PaymentsImmediatelyAvailableSubTotalTransactionType1 = "payment"
	PaymentsImmediatelyAvailableSubTotalTransactionType1SplitPayment                      PaymentsImmediatelyAvailableSubTotalTransactionType1 = "split-payment"
	PaymentsImmediatelyAvailableSubTotalTransactionType1FailedPayment                     PaymentsImmediatelyAvailableSubTotalTransactionType1 = "failed-payment"
	PaymentsImmediatelyAvailableSubTotalTransactionType1FailedPlatformSplitPayment        PaymentsImmediatelyAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	PaymentsImmediatelyAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    PaymentsImmediatelyAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	PaymentsImmediatelyAvailableSubTotalTransactionType1Capture                           PaymentsImmediatelyAvailableSubTotalTransactionType1 = "capture"
	PaymentsImmediatelyAvailableSubTotalTransactionType1SplitTransaction                  PaymentsImmediatelyAvailableSubTotalTransactionType1 = "split-transaction"
	PaymentsImmediatelyAvailableSubTotalTransactionType1Refund                            PaymentsImmediatelyAvailableSubTotalTransactionType1 = "refund"
	PaymentsImmediatelyAvailableSubTotalTransactionType1PlatformPaymentRefund             PaymentsImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-refund"
	PaymentsImmediatelyAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     PaymentsImmediatelyAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	PaymentsImmediatelyAvailableSubTotalTransactionType1RefundCompensation                PaymentsImmediatelyAvailableSubTotalTransactionType1 = "refund-compensation"
	PaymentsImmediatelyAvailableSubTotalTransactionType1ReturnedRefundCompensation        PaymentsImmediatelyAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	PaymentsImmediatelyAvailableSubTotalTransactionType1ReturnedRefund                    PaymentsImmediatelyAvailableSubTotalTransactionType1 = "returned-refund"
	PaymentsImmediatelyAvailableSubTotalTransactionType1Chargeback                        PaymentsImmediatelyAvailableSubTotalTransactionType1 = "chargeback"
	PaymentsImmediatelyAvailableSubTotalTransactionType1ChargebackReversal                PaymentsImmediatelyAvailableSubTotalTransactionType1 = "chargeback-reversal"
	PaymentsImmediatelyAvailableSubTotalTransactionType1ChargebackCompensation            PaymentsImmediatelyAvailableSubTotalTransactionType1 = "chargeback-compensation"
	PaymentsImmediatelyAvailableSubTotalTransactionType1ReversedChargebackCompensation    PaymentsImmediatelyAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	PaymentsImmediatelyAvailableSubTotalTransactionType1PlatformPaymentChargeback         PaymentsImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	PaymentsImmediatelyAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback PaymentsImmediatelyAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	PaymentsImmediatelyAvailableSubTotalTransactionType1FeePrepayment                     PaymentsImmediatelyAvailableSubTotalTransactionType1 = "fee-prepayment"
	PaymentsImmediatelyAvailableSubTotalTransactionType1OutgoingTransfer                  PaymentsImmediatelyAvailableSubTotalTransactionType1 = "outgoing-transfer"
	PaymentsImmediatelyAvailableSubTotalTransactionType1IncomingTransfer                  PaymentsImmediatelyAvailableSubTotalTransactionType1 = "incoming-transfer"
	PaymentsImmediatelyAvailableSubTotalTransactionType1CanceledTransfer                  PaymentsImmediatelyAvailableSubTotalTransactionType1 = "canceled-transfer"
	PaymentsImmediatelyAvailableSubTotalTransactionType1ReturnedTransfer                  PaymentsImmediatelyAvailableSubTotalTransactionType1 = "returned-transfer"
	PaymentsImmediatelyAvailableSubTotalTransactionType1BalanceReserve                    PaymentsImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve"
	PaymentsImmediatelyAvailableSubTotalTransactionType1BalanceReserveReturn              PaymentsImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve-return"
	PaymentsImmediatelyAvailableSubTotalTransactionType1InvoiceRoundingCompensation       PaymentsImmediatelyAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	PaymentsImmediatelyAvailableSubTotalTransactionType1RollingReserveHold                PaymentsImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	PaymentsImmediatelyAvailableSubTotalTransactionType1RollingReserveRelease             PaymentsImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	PaymentsImmediatelyAvailableSubTotalTransactionType1BalanceCorrection                 PaymentsImmediatelyAvailableSubTotalTransactionType1 = "balance-correction"
	PaymentsImmediatelyAvailableSubTotalTransactionType1Repayment                         PaymentsImmediatelyAvailableSubTotalTransactionType1 = "repayment"
	PaymentsImmediatelyAvailableSubTotalTransactionType1Loan                              PaymentsImmediatelyAvailableSubTotalTransactionType1 = "loan"
	PaymentsImmediatelyAvailableSubTotalTransactionType1BalanceTopup                      PaymentsImmediatelyAvailableSubTotalTransactionType1 = "balance-topup"
	PaymentsImmediatelyAvailableSubTotalTransactionType1CashCollateralIssuance            PaymentsImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	PaymentsImmediatelyAvailableSubTotalTransactionType1CashCollateralRelease             PaymentsImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-release"
	PaymentsImmediatelyAvailableSubTotalTransactionType1PendingRollingReserve             PaymentsImmediatelyAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	PaymentsImmediatelyAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        PaymentsImmediatelyAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	PaymentsImmediatelyAvailableSubTotalTransactionType1HeldRollingReserve                PaymentsImmediatelyAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	PaymentsImmediatelyAvailableSubTotalTransactionType1ReleasedRollingReserve            PaymentsImmediatelyAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e PaymentsImmediatelyAvailableSubTotalTransactionType1) ToPointer() *PaymentsImmediatelyAvailableSubTotalTransactionType1 {
	return &e
}
func (e *PaymentsImmediatelyAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = PaymentsImmediatelyAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsImmediatelyAvailableSubTotalTransactionType1: %v", v)
	}
}

type PaymentsImmediatelyAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *PaymentsImmediatelyAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *PaymentsImmediatelyAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *PaymentsImmediatelyAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *PaymentsImmediatelyAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *PaymentsImmediatelyAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *PaymentsImmediatelyAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *PaymentsImmediatelyAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *PaymentsImmediatelyAvailableSubTotal1) GetMethod() *PaymentsImmediatelyAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PaymentsImmediatelyAvailableSubTotal1) GetCardIssuer() *PaymentsImmediatelyAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *PaymentsImmediatelyAvailableSubTotal1) GetCardAudience() *PaymentsImmediatelyAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *PaymentsImmediatelyAvailableSubTotal1) GetCardRegion() *PaymentsImmediatelyAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *PaymentsImmediatelyAvailableSubTotal1) GetFeeType() *PaymentsImmediatelyAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *PaymentsImmediatelyAvailableSubTotal1) GetPrepaymentPartType() *PaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *PaymentsImmediatelyAvailableSubTotal1) GetTransactionType() *PaymentsImmediatelyAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// PaymentsImmediatelyAvailableSubtotalMethod2 - Payment type of the transactions
type PaymentsImmediatelyAvailableSubtotalMethod2 string

const (
	PaymentsImmediatelyAvailableSubtotalMethod2Alma              PaymentsImmediatelyAvailableSubtotalMethod2 = "alma"
	PaymentsImmediatelyAvailableSubtotalMethod2Bacs              PaymentsImmediatelyAvailableSubtotalMethod2 = "bacs"
	PaymentsImmediatelyAvailableSubtotalMethod2Applepay          PaymentsImmediatelyAvailableSubtotalMethod2 = "applepay"
	PaymentsImmediatelyAvailableSubtotalMethod2Bancomatpay       PaymentsImmediatelyAvailableSubtotalMethod2 = "bancomatpay"
	PaymentsImmediatelyAvailableSubtotalMethod2Bancontact        PaymentsImmediatelyAvailableSubtotalMethod2 = "bancontact"
	PaymentsImmediatelyAvailableSubtotalMethod2Banktransfer      PaymentsImmediatelyAvailableSubtotalMethod2 = "banktransfer"
	PaymentsImmediatelyAvailableSubtotalMethod2Belfius           PaymentsImmediatelyAvailableSubtotalMethod2 = "belfius"
	PaymentsImmediatelyAvailableSubtotalMethod2Billie            PaymentsImmediatelyAvailableSubtotalMethod2 = "billie"
	PaymentsImmediatelyAvailableSubtotalMethod2Bizum             PaymentsImmediatelyAvailableSubtotalMethod2 = "bizum"
	PaymentsImmediatelyAvailableSubtotalMethod2Bitcoin           PaymentsImmediatelyAvailableSubtotalMethod2 = "bitcoin"
	PaymentsImmediatelyAvailableSubtotalMethod2Blik              PaymentsImmediatelyAvailableSubtotalMethod2 = "blik"
	PaymentsImmediatelyAvailableSubtotalMethod2Creditcard        PaymentsImmediatelyAvailableSubtotalMethod2 = "creditcard"
	PaymentsImmediatelyAvailableSubtotalMethod2Directdebit       PaymentsImmediatelyAvailableSubtotalMethod2 = "directdebit"
	PaymentsImmediatelyAvailableSubtotalMethod2Eps               PaymentsImmediatelyAvailableSubtotalMethod2 = "eps"
	PaymentsImmediatelyAvailableSubtotalMethod2Giftcard          PaymentsImmediatelyAvailableSubtotalMethod2 = "giftcard"
	PaymentsImmediatelyAvailableSubtotalMethod2Giropay           PaymentsImmediatelyAvailableSubtotalMethod2 = "giropay"
	PaymentsImmediatelyAvailableSubtotalMethod2Googlepay         PaymentsImmediatelyAvailableSubtotalMethod2 = "googlepay"
	PaymentsImmediatelyAvailableSubtotalMethod2Ideal             PaymentsImmediatelyAvailableSubtotalMethod2 = "ideal"
	PaymentsImmediatelyAvailableSubtotalMethod2In3               PaymentsImmediatelyAvailableSubtotalMethod2 = "in3"
	PaymentsImmediatelyAvailableSubtotalMethod2Inghomepay        PaymentsImmediatelyAvailableSubtotalMethod2 = "inghomepay"
	PaymentsImmediatelyAvailableSubtotalMethod2Kbc               PaymentsImmediatelyAvailableSubtotalMethod2 = "kbc"
	PaymentsImmediatelyAvailableSubtotalMethod2Klarnapaylater    PaymentsImmediatelyAvailableSubtotalMethod2 = "klarnapaylater"
	PaymentsImmediatelyAvailableSubtotalMethod2Klarnapaynow      PaymentsImmediatelyAvailableSubtotalMethod2 = "klarnapaynow"
	PaymentsImmediatelyAvailableSubtotalMethod2Klarnasliceit     PaymentsImmediatelyAvailableSubtotalMethod2 = "klarnasliceit"
	PaymentsImmediatelyAvailableSubtotalMethod2Klarna            PaymentsImmediatelyAvailableSubtotalMethod2 = "klarna"
	PaymentsImmediatelyAvailableSubtotalMethod2Mbway             PaymentsImmediatelyAvailableSubtotalMethod2 = "mbway"
	PaymentsImmediatelyAvailableSubtotalMethod2Multibanco        PaymentsImmediatelyAvailableSubtotalMethod2 = "multibanco"
	PaymentsImmediatelyAvailableSubtotalMethod2Mybank            PaymentsImmediatelyAvailableSubtotalMethod2 = "mybank"
	PaymentsImmediatelyAvailableSubtotalMethod2Paybybank         PaymentsImmediatelyAvailableSubtotalMethod2 = "paybybank"
	PaymentsImmediatelyAvailableSubtotalMethod2Payconiq          PaymentsImmediatelyAvailableSubtotalMethod2 = "payconiq"
	PaymentsImmediatelyAvailableSubtotalMethod2Paypal            PaymentsImmediatelyAvailableSubtotalMethod2 = "paypal"
	PaymentsImmediatelyAvailableSubtotalMethod2Paysafecard       PaymentsImmediatelyAvailableSubtotalMethod2 = "paysafecard"
	PaymentsImmediatelyAvailableSubtotalMethod2Przelewy24        PaymentsImmediatelyAvailableSubtotalMethod2 = "przelewy24"
	PaymentsImmediatelyAvailableSubtotalMethod2Riverty           PaymentsImmediatelyAvailableSubtotalMethod2 = "riverty"
	PaymentsImmediatelyAvailableSubtotalMethod2Satispay          PaymentsImmediatelyAvailableSubtotalMethod2 = "satispay"
	PaymentsImmediatelyAvailableSubtotalMethod2Podiumcadeaukaart PaymentsImmediatelyAvailableSubtotalMethod2 = "podiumcadeaukaart"
	PaymentsImmediatelyAvailableSubtotalMethod2Pointofsale       PaymentsImmediatelyAvailableSubtotalMethod2 = "pointofsale"
	PaymentsImmediatelyAvailableSubtotalMethod2Sofort            PaymentsImmediatelyAvailableSubtotalMethod2 = "sofort"
	PaymentsImmediatelyAvailableSubtotalMethod2Swish             PaymentsImmediatelyAvailableSubtotalMethod2 = "swish"
	PaymentsImmediatelyAvailableSubtotalMethod2Trustly           PaymentsImmediatelyAvailableSubtotalMethod2 = "trustly"
	PaymentsImmediatelyAvailableSubtotalMethod2Twint             PaymentsImmediatelyAvailableSubtotalMethod2 = "twint"
	PaymentsImmediatelyAvailableSubtotalMethod2Voucher           PaymentsImmediatelyAvailableSubtotalMethod2 = "voucher"
)

func (e PaymentsImmediatelyAvailableSubtotalMethod2) ToPointer() *PaymentsImmediatelyAvailableSubtotalMethod2 {
	return &e
}
func (e *PaymentsImmediatelyAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = PaymentsImmediatelyAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsImmediatelyAvailableSubtotalMethod2: %v", v)
	}
}

// PaymentsImmediatelyAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type PaymentsImmediatelyAvailableSubtotalCardIssuer2 string

const (
	PaymentsImmediatelyAvailableSubtotalCardIssuer2Amex          PaymentsImmediatelyAvailableSubtotalCardIssuer2 = "amex"
	PaymentsImmediatelyAvailableSubtotalCardIssuer2Maestro       PaymentsImmediatelyAvailableSubtotalCardIssuer2 = "maestro"
	PaymentsImmediatelyAvailableSubtotalCardIssuer2CarteBancaire PaymentsImmediatelyAvailableSubtotalCardIssuer2 = "carte-bancaire"
	PaymentsImmediatelyAvailableSubtotalCardIssuer2Other         PaymentsImmediatelyAvailableSubtotalCardIssuer2 = "other"
)

func (e PaymentsImmediatelyAvailableSubtotalCardIssuer2) ToPointer() *PaymentsImmediatelyAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *PaymentsImmediatelyAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = PaymentsImmediatelyAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsImmediatelyAvailableSubtotalCardIssuer2: %v", v)
	}
}

// PaymentsImmediatelyAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type PaymentsImmediatelyAvailableSubtotalCardAudience2 string

const (
	PaymentsImmediatelyAvailableSubtotalCardAudience2Corporate PaymentsImmediatelyAvailableSubtotalCardAudience2 = "corporate"
	PaymentsImmediatelyAvailableSubtotalCardAudience2Other     PaymentsImmediatelyAvailableSubtotalCardAudience2 = "other"
)

func (e PaymentsImmediatelyAvailableSubtotalCardAudience2) ToPointer() *PaymentsImmediatelyAvailableSubtotalCardAudience2 {
	return &e
}
func (e *PaymentsImmediatelyAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = PaymentsImmediatelyAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsImmediatelyAvailableSubtotalCardAudience2: %v", v)
	}
}

// PaymentsImmediatelyAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type PaymentsImmediatelyAvailableSubtotalCardRegion2 string

const (
	PaymentsImmediatelyAvailableSubtotalCardRegion2IntraEea PaymentsImmediatelyAvailableSubtotalCardRegion2 = "intra-eea"
	PaymentsImmediatelyAvailableSubtotalCardRegion2IntraEu  PaymentsImmediatelyAvailableSubtotalCardRegion2 = "intra-eu"
	PaymentsImmediatelyAvailableSubtotalCardRegion2Domestic PaymentsImmediatelyAvailableSubtotalCardRegion2 = "domestic"
	PaymentsImmediatelyAvailableSubtotalCardRegion2Other    PaymentsImmediatelyAvailableSubtotalCardRegion2 = "other"
)

func (e PaymentsImmediatelyAvailableSubtotalCardRegion2) ToPointer() *PaymentsImmediatelyAvailableSubtotalCardRegion2 {
	return &e
}
func (e *PaymentsImmediatelyAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = PaymentsImmediatelyAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsImmediatelyAvailableSubtotalCardRegion2: %v", v)
	}
}

// PaymentsImmediatelyAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type PaymentsImmediatelyAvailableSubtotalFeeType2 string

const (
	PaymentsImmediatelyAvailableSubtotalFeeType2PaymentFee                                        PaymentsImmediatelyAvailableSubtotalFeeType2 = "payment-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2DirectDebitFailureFee                             PaymentsImmediatelyAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        PaymentsImmediatelyAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  PaymentsImmediatelyAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2PartnerCommission                                 PaymentsImmediatelyAvailableSubtotalFeeType2 = "partner-commission"
	PaymentsImmediatelyAvailableSubtotalFeeType2ApplicationFee                                    PaymentsImmediatelyAvailableSubtotalFeeType2 = "application-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2CaptureFee                                        PaymentsImmediatelyAvailableSubtotalFeeType2 = "capture-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2RefundFee                                         PaymentsImmediatelyAvailableSubtotalFeeType2 = "refund-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2ChargebackFee                                     PaymentsImmediatelyAvailableSubtotalFeeType2 = "chargeback-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2PaymentNotificationFee                            PaymentsImmediatelyAvailableSubtotalFeeType2 = "payment-notification-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2TransferNotificationFee                           PaymentsImmediatelyAvailableSubtotalFeeType2 = "transfer-notification-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2PayoutFee                                         PaymentsImmediatelyAvailableSubtotalFeeType2 = "payout-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2FeeDiscount                                       PaymentsImmediatelyAvailableSubtotalFeeType2 = "fee-discount"
	PaymentsImmediatelyAvailableSubtotalFeeType2FeeReimbursement                                  PaymentsImmediatelyAvailableSubtotalFeeType2 = "fee-reimbursement"
	PaymentsImmediatelyAvailableSubtotalFeeType2PlatformVolumeFee                                 PaymentsImmediatelyAvailableSubtotalFeeType2 = "platform-volume-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 PaymentsImmediatelyAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2BalanceChargeFee                                  PaymentsImmediatelyAvailableSubtotalFeeType2 = "balance-charge-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   PaymentsImmediatelyAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2TerminalMonthlyFee                                PaymentsImmediatelyAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2AcceptanceRiskFee                                 PaymentsImmediatelyAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2TopUpFee                                          PaymentsImmediatelyAvailableSubtotalFeeType2 = "top-up-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2PaymentGatewayFee                                 PaymentsImmediatelyAvailableSubtotalFeeType2 = "payment-gateway-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   PaymentsImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee PaymentsImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             PaymentsImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           PaymentsImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	PaymentsImmediatelyAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           PaymentsImmediatelyAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e PaymentsImmediatelyAvailableSubtotalFeeType2) ToPointer() *PaymentsImmediatelyAvailableSubtotalFeeType2 {
	return &e
}
func (e *PaymentsImmediatelyAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = PaymentsImmediatelyAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsImmediatelyAvailableSubtotalFeeType2: %v", v)
	}
}

// PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 string

const (
	PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2Fee                     PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee"
	PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2FeeReimbursement        PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2FeeDiscount             PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2FeeVat                  PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2) ToPointer() *PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// PaymentsImmediatelyAvailableSubtotalTransactionType2 - Represents the transaction type
type PaymentsImmediatelyAvailableSubtotalTransactionType2 string

const (
	PaymentsImmediatelyAvailableSubtotalTransactionType2Payment                           PaymentsImmediatelyAvailableSubtotalTransactionType2 = "payment"
	PaymentsImmediatelyAvailableSubtotalTransactionType2SplitPayment                      PaymentsImmediatelyAvailableSubtotalTransactionType2 = "split-payment"
	PaymentsImmediatelyAvailableSubtotalTransactionType2FailedPayment                     PaymentsImmediatelyAvailableSubtotalTransactionType2 = "failed-payment"
	PaymentsImmediatelyAvailableSubtotalTransactionType2FailedPlatformSplitPayment        PaymentsImmediatelyAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	PaymentsImmediatelyAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    PaymentsImmediatelyAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	PaymentsImmediatelyAvailableSubtotalTransactionType2Capture                           PaymentsImmediatelyAvailableSubtotalTransactionType2 = "capture"
	PaymentsImmediatelyAvailableSubtotalTransactionType2SplitTransaction                  PaymentsImmediatelyAvailableSubtotalTransactionType2 = "split-transaction"
	PaymentsImmediatelyAvailableSubtotalTransactionType2Refund                            PaymentsImmediatelyAvailableSubtotalTransactionType2 = "refund"
	PaymentsImmediatelyAvailableSubtotalTransactionType2PlatformPaymentRefund             PaymentsImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-refund"
	PaymentsImmediatelyAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     PaymentsImmediatelyAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	PaymentsImmediatelyAvailableSubtotalTransactionType2RefundCompensation                PaymentsImmediatelyAvailableSubtotalTransactionType2 = "refund-compensation"
	PaymentsImmediatelyAvailableSubtotalTransactionType2ReturnedRefundCompensation        PaymentsImmediatelyAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	PaymentsImmediatelyAvailableSubtotalTransactionType2ReturnedRefund                    PaymentsImmediatelyAvailableSubtotalTransactionType2 = "returned-refund"
	PaymentsImmediatelyAvailableSubtotalTransactionType2Chargeback                        PaymentsImmediatelyAvailableSubtotalTransactionType2 = "chargeback"
	PaymentsImmediatelyAvailableSubtotalTransactionType2ChargebackReversal                PaymentsImmediatelyAvailableSubtotalTransactionType2 = "chargeback-reversal"
	PaymentsImmediatelyAvailableSubtotalTransactionType2ChargebackCompensation            PaymentsImmediatelyAvailableSubtotalTransactionType2 = "chargeback-compensation"
	PaymentsImmediatelyAvailableSubtotalTransactionType2ReversedChargebackCompensation    PaymentsImmediatelyAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	PaymentsImmediatelyAvailableSubtotalTransactionType2PlatformPaymentChargeback         PaymentsImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	PaymentsImmediatelyAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback PaymentsImmediatelyAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	PaymentsImmediatelyAvailableSubtotalTransactionType2FeePrepayment                     PaymentsImmediatelyAvailableSubtotalTransactionType2 = "fee-prepayment"
	PaymentsImmediatelyAvailableSubtotalTransactionType2OutgoingTransfer                  PaymentsImmediatelyAvailableSubtotalTransactionType2 = "outgoing-transfer"
	PaymentsImmediatelyAvailableSubtotalTransactionType2IncomingTransfer                  PaymentsImmediatelyAvailableSubtotalTransactionType2 = "incoming-transfer"
	PaymentsImmediatelyAvailableSubtotalTransactionType2CanceledTransfer                  PaymentsImmediatelyAvailableSubtotalTransactionType2 = "canceled-transfer"
	PaymentsImmediatelyAvailableSubtotalTransactionType2ReturnedTransfer                  PaymentsImmediatelyAvailableSubtotalTransactionType2 = "returned-transfer"
	PaymentsImmediatelyAvailableSubtotalTransactionType2BalanceReserve                    PaymentsImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve"
	PaymentsImmediatelyAvailableSubtotalTransactionType2BalanceReserveReturn              PaymentsImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve-return"
	PaymentsImmediatelyAvailableSubtotalTransactionType2InvoiceRoundingCompensation       PaymentsImmediatelyAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	PaymentsImmediatelyAvailableSubtotalTransactionType2RollingReserveHold                PaymentsImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	PaymentsImmediatelyAvailableSubtotalTransactionType2RollingReserveRelease             PaymentsImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	PaymentsImmediatelyAvailableSubtotalTransactionType2BalanceCorrection                 PaymentsImmediatelyAvailableSubtotalTransactionType2 = "balance-correction"
	PaymentsImmediatelyAvailableSubtotalTransactionType2Repayment                         PaymentsImmediatelyAvailableSubtotalTransactionType2 = "repayment"
	PaymentsImmediatelyAvailableSubtotalTransactionType2Loan                              PaymentsImmediatelyAvailableSubtotalTransactionType2 = "loan"
	PaymentsImmediatelyAvailableSubtotalTransactionType2BalanceTopup                      PaymentsImmediatelyAvailableSubtotalTransactionType2 = "balance-topup"
	PaymentsImmediatelyAvailableSubtotalTransactionType2CashCollateralIssuance            PaymentsImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	PaymentsImmediatelyAvailableSubtotalTransactionType2CashCollateralRelease             PaymentsImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-release"
	PaymentsImmediatelyAvailableSubtotalTransactionType2PendingRollingReserve             PaymentsImmediatelyAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	PaymentsImmediatelyAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        PaymentsImmediatelyAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	PaymentsImmediatelyAvailableSubtotalTransactionType2HeldRollingReserve                PaymentsImmediatelyAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	PaymentsImmediatelyAvailableSubtotalTransactionType2ReleasedRollingReserve            PaymentsImmediatelyAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e PaymentsImmediatelyAvailableSubtotalTransactionType2) ToPointer() *PaymentsImmediatelyAvailableSubtotalTransactionType2 {
	return &e
}
func (e *PaymentsImmediatelyAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = PaymentsImmediatelyAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentsImmediatelyAvailableSubtotalTransactionType2: %v", v)
	}
}

type PaymentsImmediatelyAvailableSubtotal2 struct {
	SubTotals []PaymentsImmediatelyAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *PaymentsImmediatelyAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *PaymentsImmediatelyAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *PaymentsImmediatelyAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *PaymentsImmediatelyAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *PaymentsImmediatelyAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *PaymentsImmediatelyAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *PaymentsImmediatelyAvailableSubtotal2) GetSubTotals() []PaymentsImmediatelyAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *PaymentsImmediatelyAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *PaymentsImmediatelyAvailableSubtotal2) GetMethod() *PaymentsImmediatelyAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PaymentsImmediatelyAvailableSubtotal2) GetCardIssuer() *PaymentsImmediatelyAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *PaymentsImmediatelyAvailableSubtotal2) GetCardAudience() *PaymentsImmediatelyAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *PaymentsImmediatelyAvailableSubtotal2) GetCardRegion() *PaymentsImmediatelyAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *PaymentsImmediatelyAvailableSubtotal2) GetFeeType() *PaymentsImmediatelyAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *PaymentsImmediatelyAvailableSubtotal2) GetPrepaymentPartType() *PaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *PaymentsImmediatelyAvailableSubtotal2) GetTransactionType() *PaymentsImmediatelyAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type PaymentsImmediatelyAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *PaymentsImmediatelyAvailableAmount     `json:"amount,omitempty"`
	Subtotals []PaymentsImmediatelyAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *PaymentsImmediatelyAvailable) GetAmount() *PaymentsImmediatelyAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *PaymentsImmediatelyAvailable) GetSubtotals() []PaymentsImmediatelyAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// GetBalanceReportPayments - Only available on `transaction-categories` grouping.
type GetBalanceReportPayments struct {
	Pending              *PaymentsPending              `json:"pending,omitempty"`
	MovedToAvailable     *PaymentsMovedToAvailable     `json:"movedToAvailable,omitempty"`
	ImmediatelyAvailable *PaymentsImmediatelyAvailable `json:"immediatelyAvailable,omitempty"`
}

func (o *GetBalanceReportPayments) GetPending() *PaymentsPending {
	if o == nil {
		return nil
	}
	return o.Pending
}

func (o *GetBalanceReportPayments) GetMovedToAvailable() *PaymentsMovedToAvailable {
	if o == nil {
		return nil
	}
	return o.MovedToAvailable
}

func (o *GetBalanceReportPayments) GetImmediatelyAvailable() *PaymentsImmediatelyAvailable {
	if o == nil {
		return nil
	}
	return o.ImmediatelyAvailable
}

// RefundsPendingAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type RefundsPendingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *RefundsPendingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *RefundsPendingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// RefundsPendingSubTotalMethod1 - Payment type of the transactions
type RefundsPendingSubTotalMethod1 string

const (
	RefundsPendingSubTotalMethod1Alma              RefundsPendingSubTotalMethod1 = "alma"
	RefundsPendingSubTotalMethod1Bacs              RefundsPendingSubTotalMethod1 = "bacs"
	RefundsPendingSubTotalMethod1Applepay          RefundsPendingSubTotalMethod1 = "applepay"
	RefundsPendingSubTotalMethod1Bancomatpay       RefundsPendingSubTotalMethod1 = "bancomatpay"
	RefundsPendingSubTotalMethod1Bancontact        RefundsPendingSubTotalMethod1 = "bancontact"
	RefundsPendingSubTotalMethod1Banktransfer      RefundsPendingSubTotalMethod1 = "banktransfer"
	RefundsPendingSubTotalMethod1Belfius           RefundsPendingSubTotalMethod1 = "belfius"
	RefundsPendingSubTotalMethod1Billie            RefundsPendingSubTotalMethod1 = "billie"
	RefundsPendingSubTotalMethod1Bizum             RefundsPendingSubTotalMethod1 = "bizum"
	RefundsPendingSubTotalMethod1Bitcoin           RefundsPendingSubTotalMethod1 = "bitcoin"
	RefundsPendingSubTotalMethod1Blik              RefundsPendingSubTotalMethod1 = "blik"
	RefundsPendingSubTotalMethod1Creditcard        RefundsPendingSubTotalMethod1 = "creditcard"
	RefundsPendingSubTotalMethod1Directdebit       RefundsPendingSubTotalMethod1 = "directdebit"
	RefundsPendingSubTotalMethod1Eps               RefundsPendingSubTotalMethod1 = "eps"
	RefundsPendingSubTotalMethod1Giftcard          RefundsPendingSubTotalMethod1 = "giftcard"
	RefundsPendingSubTotalMethod1Giropay           RefundsPendingSubTotalMethod1 = "giropay"
	RefundsPendingSubTotalMethod1Googlepay         RefundsPendingSubTotalMethod1 = "googlepay"
	RefundsPendingSubTotalMethod1Ideal             RefundsPendingSubTotalMethod1 = "ideal"
	RefundsPendingSubTotalMethod1In3               RefundsPendingSubTotalMethod1 = "in3"
	RefundsPendingSubTotalMethod1Inghomepay        RefundsPendingSubTotalMethod1 = "inghomepay"
	RefundsPendingSubTotalMethod1Kbc               RefundsPendingSubTotalMethod1 = "kbc"
	RefundsPendingSubTotalMethod1Klarnapaylater    RefundsPendingSubTotalMethod1 = "klarnapaylater"
	RefundsPendingSubTotalMethod1Klarnapaynow      RefundsPendingSubTotalMethod1 = "klarnapaynow"
	RefundsPendingSubTotalMethod1Klarnasliceit     RefundsPendingSubTotalMethod1 = "klarnasliceit"
	RefundsPendingSubTotalMethod1Klarna            RefundsPendingSubTotalMethod1 = "klarna"
	RefundsPendingSubTotalMethod1Mbway             RefundsPendingSubTotalMethod1 = "mbway"
	RefundsPendingSubTotalMethod1Multibanco        RefundsPendingSubTotalMethod1 = "multibanco"
	RefundsPendingSubTotalMethod1Mybank            RefundsPendingSubTotalMethod1 = "mybank"
	RefundsPendingSubTotalMethod1Paybybank         RefundsPendingSubTotalMethod1 = "paybybank"
	RefundsPendingSubTotalMethod1Payconiq          RefundsPendingSubTotalMethod1 = "payconiq"
	RefundsPendingSubTotalMethod1Paypal            RefundsPendingSubTotalMethod1 = "paypal"
	RefundsPendingSubTotalMethod1Paysafecard       RefundsPendingSubTotalMethod1 = "paysafecard"
	RefundsPendingSubTotalMethod1Przelewy24        RefundsPendingSubTotalMethod1 = "przelewy24"
	RefundsPendingSubTotalMethod1Riverty           RefundsPendingSubTotalMethod1 = "riverty"
	RefundsPendingSubTotalMethod1Satispay          RefundsPendingSubTotalMethod1 = "satispay"
	RefundsPendingSubTotalMethod1Podiumcadeaukaart RefundsPendingSubTotalMethod1 = "podiumcadeaukaart"
	RefundsPendingSubTotalMethod1Pointofsale       RefundsPendingSubTotalMethod1 = "pointofsale"
	RefundsPendingSubTotalMethod1Sofort            RefundsPendingSubTotalMethod1 = "sofort"
	RefundsPendingSubTotalMethod1Swish             RefundsPendingSubTotalMethod1 = "swish"
	RefundsPendingSubTotalMethod1Trustly           RefundsPendingSubTotalMethod1 = "trustly"
	RefundsPendingSubTotalMethod1Twint             RefundsPendingSubTotalMethod1 = "twint"
	RefundsPendingSubTotalMethod1Voucher           RefundsPendingSubTotalMethod1 = "voucher"
)

func (e RefundsPendingSubTotalMethod1) ToPointer() *RefundsPendingSubTotalMethod1 {
	return &e
}
func (e *RefundsPendingSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = RefundsPendingSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsPendingSubTotalMethod1: %v", v)
	}
}

// RefundsPendingSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type RefundsPendingSubTotalCardIssuer1 string

const (
	RefundsPendingSubTotalCardIssuer1Amex          RefundsPendingSubTotalCardIssuer1 = "amex"
	RefundsPendingSubTotalCardIssuer1Maestro       RefundsPendingSubTotalCardIssuer1 = "maestro"
	RefundsPendingSubTotalCardIssuer1CarteBancaire RefundsPendingSubTotalCardIssuer1 = "carte-bancaire"
	RefundsPendingSubTotalCardIssuer1Other         RefundsPendingSubTotalCardIssuer1 = "other"
)

func (e RefundsPendingSubTotalCardIssuer1) ToPointer() *RefundsPendingSubTotalCardIssuer1 {
	return &e
}
func (e *RefundsPendingSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = RefundsPendingSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsPendingSubTotalCardIssuer1: %v", v)
	}
}

// RefundsPendingSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type RefundsPendingSubTotalCardAudience1 string

const (
	RefundsPendingSubTotalCardAudience1Corporate RefundsPendingSubTotalCardAudience1 = "corporate"
	RefundsPendingSubTotalCardAudience1Other     RefundsPendingSubTotalCardAudience1 = "other"
)

func (e RefundsPendingSubTotalCardAudience1) ToPointer() *RefundsPendingSubTotalCardAudience1 {
	return &e
}
func (e *RefundsPendingSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = RefundsPendingSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsPendingSubTotalCardAudience1: %v", v)
	}
}

// RefundsPendingSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type RefundsPendingSubTotalCardRegion1 string

const (
	RefundsPendingSubTotalCardRegion1IntraEea RefundsPendingSubTotalCardRegion1 = "intra-eea"
	RefundsPendingSubTotalCardRegion1IntraEu  RefundsPendingSubTotalCardRegion1 = "intra-eu"
	RefundsPendingSubTotalCardRegion1Domestic RefundsPendingSubTotalCardRegion1 = "domestic"
	RefundsPendingSubTotalCardRegion1Other    RefundsPendingSubTotalCardRegion1 = "other"
)

func (e RefundsPendingSubTotalCardRegion1) ToPointer() *RefundsPendingSubTotalCardRegion1 {
	return &e
}
func (e *RefundsPendingSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = RefundsPendingSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsPendingSubTotalCardRegion1: %v", v)
	}
}

// RefundsPendingSubTotalFeeType1 - Present when the transaction represents a fee.
type RefundsPendingSubTotalFeeType1 string

const (
	RefundsPendingSubTotalFeeType1PaymentFee                                        RefundsPendingSubTotalFeeType1 = "payment-fee"
	RefundsPendingSubTotalFeeType1DirectDebitFailureFee                             RefundsPendingSubTotalFeeType1 = "direct-debit-failure-fee"
	RefundsPendingSubTotalFeeType1UnauthorizedDirectDebitFee                        RefundsPendingSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	RefundsPendingSubTotalFeeType1BankChargedDirectDebitFailureFee                  RefundsPendingSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	RefundsPendingSubTotalFeeType1PartnerCommission                                 RefundsPendingSubTotalFeeType1 = "partner-commission"
	RefundsPendingSubTotalFeeType1ApplicationFee                                    RefundsPendingSubTotalFeeType1 = "application-fee"
	RefundsPendingSubTotalFeeType1CaptureFee                                        RefundsPendingSubTotalFeeType1 = "capture-fee"
	RefundsPendingSubTotalFeeType1RefundFee                                         RefundsPendingSubTotalFeeType1 = "refund-fee"
	RefundsPendingSubTotalFeeType1ChargebackFee                                     RefundsPendingSubTotalFeeType1 = "chargeback-fee"
	RefundsPendingSubTotalFeeType1PaymentNotificationFee                            RefundsPendingSubTotalFeeType1 = "payment-notification-fee"
	RefundsPendingSubTotalFeeType1TransferNotificationFee                           RefundsPendingSubTotalFeeType1 = "transfer-notification-fee"
	RefundsPendingSubTotalFeeType1PayoutFee                                         RefundsPendingSubTotalFeeType1 = "payout-fee"
	RefundsPendingSubTotalFeeType1FeeDiscount                                       RefundsPendingSubTotalFeeType1 = "fee-discount"
	RefundsPendingSubTotalFeeType1FeeReimbursement                                  RefundsPendingSubTotalFeeType1 = "fee-reimbursement"
	RefundsPendingSubTotalFeeType1PlatformVolumeFee                                 RefundsPendingSubTotalFeeType1 = "platform-volume-fee"
	RefundsPendingSubTotalFeeType1PlatformConnectedOrganizationsFee                 RefundsPendingSubTotalFeeType1 = "platform-connected-organizations-fee"
	RefundsPendingSubTotalFeeType1BalanceChargeFee                                  RefundsPendingSubTotalFeeType1 = "balance-charge-fee"
	RefundsPendingSubTotalFeeType1ThreedsAuthenticationAttemptFee                   RefundsPendingSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	RefundsPendingSubTotalFeeType1TerminalMonthlyFee                                RefundsPendingSubTotalFeeType1 = "terminal-monthly-fee"
	RefundsPendingSubTotalFeeType1AcceptanceRiskFee                                 RefundsPendingSubTotalFeeType1 = "acceptance-risk-fee"
	RefundsPendingSubTotalFeeType1TopUpFee                                          RefundsPendingSubTotalFeeType1 = "top-up-fee"
	RefundsPendingSubTotalFeeType1PaymentGatewayFee                                 RefundsPendingSubTotalFeeType1 = "payment-gateway-fee"
	RefundsPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   RefundsPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	RefundsPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee RefundsPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	RefundsPendingSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             RefundsPendingSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	RefundsPendingSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           RefundsPendingSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	RefundsPendingSubTotalFeeType1MinimumInvoiceAmountFee                           RefundsPendingSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e RefundsPendingSubTotalFeeType1) ToPointer() *RefundsPendingSubTotalFeeType1 {
	return &e
}
func (e *RefundsPendingSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = RefundsPendingSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsPendingSubTotalFeeType1: %v", v)
	}
}

// RefundsPendingSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type RefundsPendingSubTotalPrepaymentPartType1 string

const (
	RefundsPendingSubTotalPrepaymentPartType1Fee                     RefundsPendingSubTotalPrepaymentPartType1 = "fee"
	RefundsPendingSubTotalPrepaymentPartType1FeeReimbursement        RefundsPendingSubTotalPrepaymentPartType1 = "fee-reimbursement"
	RefundsPendingSubTotalPrepaymentPartType1FeeDiscount             RefundsPendingSubTotalPrepaymentPartType1 = "fee-discount"
	RefundsPendingSubTotalPrepaymentPartType1FeeVat                  RefundsPendingSubTotalPrepaymentPartType1 = "fee-vat"
	RefundsPendingSubTotalPrepaymentPartType1FeeRoundingCompensation RefundsPendingSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e RefundsPendingSubTotalPrepaymentPartType1) ToPointer() *RefundsPendingSubTotalPrepaymentPartType1 {
	return &e
}
func (e *RefundsPendingSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = RefundsPendingSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsPendingSubTotalPrepaymentPartType1: %v", v)
	}
}

// RefundsPendingSubTotalTransactionType1 - Represents the transaction type
type RefundsPendingSubTotalTransactionType1 string

const (
	RefundsPendingSubTotalTransactionType1Payment                           RefundsPendingSubTotalTransactionType1 = "payment"
	RefundsPendingSubTotalTransactionType1SplitPayment                      RefundsPendingSubTotalTransactionType1 = "split-payment"
	RefundsPendingSubTotalTransactionType1FailedPayment                     RefundsPendingSubTotalTransactionType1 = "failed-payment"
	RefundsPendingSubTotalTransactionType1FailedPlatformSplitPayment        RefundsPendingSubTotalTransactionType1 = "failed-platform-split-payment"
	RefundsPendingSubTotalTransactionType1FailedSplitPaymentCompensation    RefundsPendingSubTotalTransactionType1 = "failed-split-payment-compensation"
	RefundsPendingSubTotalTransactionType1Capture                           RefundsPendingSubTotalTransactionType1 = "capture"
	RefundsPendingSubTotalTransactionType1SplitTransaction                  RefundsPendingSubTotalTransactionType1 = "split-transaction"
	RefundsPendingSubTotalTransactionType1Refund                            RefundsPendingSubTotalTransactionType1 = "refund"
	RefundsPendingSubTotalTransactionType1PlatformPaymentRefund             RefundsPendingSubTotalTransactionType1 = "platform-payment-refund"
	RefundsPendingSubTotalTransactionType1ReturnedPlatformPaymentRefund     RefundsPendingSubTotalTransactionType1 = "returned-platform-payment-refund"
	RefundsPendingSubTotalTransactionType1RefundCompensation                RefundsPendingSubTotalTransactionType1 = "refund-compensation"
	RefundsPendingSubTotalTransactionType1ReturnedRefundCompensation        RefundsPendingSubTotalTransactionType1 = "returned-refund-compensation"
	RefundsPendingSubTotalTransactionType1ReturnedRefund                    RefundsPendingSubTotalTransactionType1 = "returned-refund"
	RefundsPendingSubTotalTransactionType1Chargeback                        RefundsPendingSubTotalTransactionType1 = "chargeback"
	RefundsPendingSubTotalTransactionType1ChargebackReversal                RefundsPendingSubTotalTransactionType1 = "chargeback-reversal"
	RefundsPendingSubTotalTransactionType1ChargebackCompensation            RefundsPendingSubTotalTransactionType1 = "chargeback-compensation"
	RefundsPendingSubTotalTransactionType1ReversedChargebackCompensation    RefundsPendingSubTotalTransactionType1 = "reversed-chargeback-compensation"
	RefundsPendingSubTotalTransactionType1PlatformPaymentChargeback         RefundsPendingSubTotalTransactionType1 = "platform-payment-chargeback"
	RefundsPendingSubTotalTransactionType1ReversedPlatformPaymentChargeback RefundsPendingSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	RefundsPendingSubTotalTransactionType1FeePrepayment                     RefundsPendingSubTotalTransactionType1 = "fee-prepayment"
	RefundsPendingSubTotalTransactionType1OutgoingTransfer                  RefundsPendingSubTotalTransactionType1 = "outgoing-transfer"
	RefundsPendingSubTotalTransactionType1IncomingTransfer                  RefundsPendingSubTotalTransactionType1 = "incoming-transfer"
	RefundsPendingSubTotalTransactionType1CanceledTransfer                  RefundsPendingSubTotalTransactionType1 = "canceled-transfer"
	RefundsPendingSubTotalTransactionType1ReturnedTransfer                  RefundsPendingSubTotalTransactionType1 = "returned-transfer"
	RefundsPendingSubTotalTransactionType1BalanceReserve                    RefundsPendingSubTotalTransactionType1 = "balance-reserve"
	RefundsPendingSubTotalTransactionType1BalanceReserveReturn              RefundsPendingSubTotalTransactionType1 = "balance-reserve-return"
	RefundsPendingSubTotalTransactionType1InvoiceRoundingCompensation       RefundsPendingSubTotalTransactionType1 = "invoice-rounding-compensation"
	RefundsPendingSubTotalTransactionType1RollingReserveHold                RefundsPendingSubTotalTransactionType1 = "rolling-reserve-hold"
	RefundsPendingSubTotalTransactionType1RollingReserveRelease             RefundsPendingSubTotalTransactionType1 = "rolling-reserve-release"
	RefundsPendingSubTotalTransactionType1BalanceCorrection                 RefundsPendingSubTotalTransactionType1 = "balance-correction"
	RefundsPendingSubTotalTransactionType1Repayment                         RefundsPendingSubTotalTransactionType1 = "repayment"
	RefundsPendingSubTotalTransactionType1Loan                              RefundsPendingSubTotalTransactionType1 = "loan"
	RefundsPendingSubTotalTransactionType1BalanceTopup                      RefundsPendingSubTotalTransactionType1 = "balance-topup"
	RefundsPendingSubTotalTransactionType1CashCollateralIssuance            RefundsPendingSubTotalTransactionType1 = "cash-collateral-issuance';"
	RefundsPendingSubTotalTransactionType1CashCollateralRelease             RefundsPendingSubTotalTransactionType1 = "cash-collateral-release"
	RefundsPendingSubTotalTransactionType1PendingRollingReserve             RefundsPendingSubTotalTransactionType1 = "pending-rolling-reserve"
	RefundsPendingSubTotalTransactionType1ToBeReleasedRollingReserve        RefundsPendingSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	RefundsPendingSubTotalTransactionType1HeldRollingReserve                RefundsPendingSubTotalTransactionType1 = "held-rolling-reserve"
	RefundsPendingSubTotalTransactionType1ReleasedRollingReserve            RefundsPendingSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e RefundsPendingSubTotalTransactionType1) ToPointer() *RefundsPendingSubTotalTransactionType1 {
	return &e
}
func (e *RefundsPendingSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = RefundsPendingSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsPendingSubTotalTransactionType1: %v", v)
	}
}

type RefundsPendingSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *RefundsPendingSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *RefundsPendingSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *RefundsPendingSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *RefundsPendingSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *RefundsPendingSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *RefundsPendingSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *RefundsPendingSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *RefundsPendingSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *RefundsPendingSubTotal1) GetMethod() *RefundsPendingSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *RefundsPendingSubTotal1) GetCardIssuer() *RefundsPendingSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *RefundsPendingSubTotal1) GetCardAudience() *RefundsPendingSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *RefundsPendingSubTotal1) GetCardRegion() *RefundsPendingSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *RefundsPendingSubTotal1) GetFeeType() *RefundsPendingSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *RefundsPendingSubTotal1) GetPrepaymentPartType() *RefundsPendingSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *RefundsPendingSubTotal1) GetTransactionType() *RefundsPendingSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// RefundsPendingSubtotalMethod2 - Payment type of the transactions
type RefundsPendingSubtotalMethod2 string

const (
	RefundsPendingSubtotalMethod2Alma              RefundsPendingSubtotalMethod2 = "alma"
	RefundsPendingSubtotalMethod2Bacs              RefundsPendingSubtotalMethod2 = "bacs"
	RefundsPendingSubtotalMethod2Applepay          RefundsPendingSubtotalMethod2 = "applepay"
	RefundsPendingSubtotalMethod2Bancomatpay       RefundsPendingSubtotalMethod2 = "bancomatpay"
	RefundsPendingSubtotalMethod2Bancontact        RefundsPendingSubtotalMethod2 = "bancontact"
	RefundsPendingSubtotalMethod2Banktransfer      RefundsPendingSubtotalMethod2 = "banktransfer"
	RefundsPendingSubtotalMethod2Belfius           RefundsPendingSubtotalMethod2 = "belfius"
	RefundsPendingSubtotalMethod2Billie            RefundsPendingSubtotalMethod2 = "billie"
	RefundsPendingSubtotalMethod2Bizum             RefundsPendingSubtotalMethod2 = "bizum"
	RefundsPendingSubtotalMethod2Bitcoin           RefundsPendingSubtotalMethod2 = "bitcoin"
	RefundsPendingSubtotalMethod2Blik              RefundsPendingSubtotalMethod2 = "blik"
	RefundsPendingSubtotalMethod2Creditcard        RefundsPendingSubtotalMethod2 = "creditcard"
	RefundsPendingSubtotalMethod2Directdebit       RefundsPendingSubtotalMethod2 = "directdebit"
	RefundsPendingSubtotalMethod2Eps               RefundsPendingSubtotalMethod2 = "eps"
	RefundsPendingSubtotalMethod2Giftcard          RefundsPendingSubtotalMethod2 = "giftcard"
	RefundsPendingSubtotalMethod2Giropay           RefundsPendingSubtotalMethod2 = "giropay"
	RefundsPendingSubtotalMethod2Googlepay         RefundsPendingSubtotalMethod2 = "googlepay"
	RefundsPendingSubtotalMethod2Ideal             RefundsPendingSubtotalMethod2 = "ideal"
	RefundsPendingSubtotalMethod2In3               RefundsPendingSubtotalMethod2 = "in3"
	RefundsPendingSubtotalMethod2Inghomepay        RefundsPendingSubtotalMethod2 = "inghomepay"
	RefundsPendingSubtotalMethod2Kbc               RefundsPendingSubtotalMethod2 = "kbc"
	RefundsPendingSubtotalMethod2Klarnapaylater    RefundsPendingSubtotalMethod2 = "klarnapaylater"
	RefundsPendingSubtotalMethod2Klarnapaynow      RefundsPendingSubtotalMethod2 = "klarnapaynow"
	RefundsPendingSubtotalMethod2Klarnasliceit     RefundsPendingSubtotalMethod2 = "klarnasliceit"
	RefundsPendingSubtotalMethod2Klarna            RefundsPendingSubtotalMethod2 = "klarna"
	RefundsPendingSubtotalMethod2Mbway             RefundsPendingSubtotalMethod2 = "mbway"
	RefundsPendingSubtotalMethod2Multibanco        RefundsPendingSubtotalMethod2 = "multibanco"
	RefundsPendingSubtotalMethod2Mybank            RefundsPendingSubtotalMethod2 = "mybank"
	RefundsPendingSubtotalMethod2Paybybank         RefundsPendingSubtotalMethod2 = "paybybank"
	RefundsPendingSubtotalMethod2Payconiq          RefundsPendingSubtotalMethod2 = "payconiq"
	RefundsPendingSubtotalMethod2Paypal            RefundsPendingSubtotalMethod2 = "paypal"
	RefundsPendingSubtotalMethod2Paysafecard       RefundsPendingSubtotalMethod2 = "paysafecard"
	RefundsPendingSubtotalMethod2Przelewy24        RefundsPendingSubtotalMethod2 = "przelewy24"
	RefundsPendingSubtotalMethod2Riverty           RefundsPendingSubtotalMethod2 = "riverty"
	RefundsPendingSubtotalMethod2Satispay          RefundsPendingSubtotalMethod2 = "satispay"
	RefundsPendingSubtotalMethod2Podiumcadeaukaart RefundsPendingSubtotalMethod2 = "podiumcadeaukaart"
	RefundsPendingSubtotalMethod2Pointofsale       RefundsPendingSubtotalMethod2 = "pointofsale"
	RefundsPendingSubtotalMethod2Sofort            RefundsPendingSubtotalMethod2 = "sofort"
	RefundsPendingSubtotalMethod2Swish             RefundsPendingSubtotalMethod2 = "swish"
	RefundsPendingSubtotalMethod2Trustly           RefundsPendingSubtotalMethod2 = "trustly"
	RefundsPendingSubtotalMethod2Twint             RefundsPendingSubtotalMethod2 = "twint"
	RefundsPendingSubtotalMethod2Voucher           RefundsPendingSubtotalMethod2 = "voucher"
)

func (e RefundsPendingSubtotalMethod2) ToPointer() *RefundsPendingSubtotalMethod2 {
	return &e
}
func (e *RefundsPendingSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = RefundsPendingSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsPendingSubtotalMethod2: %v", v)
	}
}

// RefundsPendingSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type RefundsPendingSubtotalCardIssuer2 string

const (
	RefundsPendingSubtotalCardIssuer2Amex          RefundsPendingSubtotalCardIssuer2 = "amex"
	RefundsPendingSubtotalCardIssuer2Maestro       RefundsPendingSubtotalCardIssuer2 = "maestro"
	RefundsPendingSubtotalCardIssuer2CarteBancaire RefundsPendingSubtotalCardIssuer2 = "carte-bancaire"
	RefundsPendingSubtotalCardIssuer2Other         RefundsPendingSubtotalCardIssuer2 = "other"
)

func (e RefundsPendingSubtotalCardIssuer2) ToPointer() *RefundsPendingSubtotalCardIssuer2 {
	return &e
}
func (e *RefundsPendingSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = RefundsPendingSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsPendingSubtotalCardIssuer2: %v", v)
	}
}

// RefundsPendingSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type RefundsPendingSubtotalCardAudience2 string

const (
	RefundsPendingSubtotalCardAudience2Corporate RefundsPendingSubtotalCardAudience2 = "corporate"
	RefundsPendingSubtotalCardAudience2Other     RefundsPendingSubtotalCardAudience2 = "other"
)

func (e RefundsPendingSubtotalCardAudience2) ToPointer() *RefundsPendingSubtotalCardAudience2 {
	return &e
}
func (e *RefundsPendingSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = RefundsPendingSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsPendingSubtotalCardAudience2: %v", v)
	}
}

// RefundsPendingSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type RefundsPendingSubtotalCardRegion2 string

const (
	RefundsPendingSubtotalCardRegion2IntraEea RefundsPendingSubtotalCardRegion2 = "intra-eea"
	RefundsPendingSubtotalCardRegion2IntraEu  RefundsPendingSubtotalCardRegion2 = "intra-eu"
	RefundsPendingSubtotalCardRegion2Domestic RefundsPendingSubtotalCardRegion2 = "domestic"
	RefundsPendingSubtotalCardRegion2Other    RefundsPendingSubtotalCardRegion2 = "other"
)

func (e RefundsPendingSubtotalCardRegion2) ToPointer() *RefundsPendingSubtotalCardRegion2 {
	return &e
}
func (e *RefundsPendingSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = RefundsPendingSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsPendingSubtotalCardRegion2: %v", v)
	}
}

// RefundsPendingSubtotalFeeType2 - Present when the transaction represents a fee.
type RefundsPendingSubtotalFeeType2 string

const (
	RefundsPendingSubtotalFeeType2PaymentFee                                        RefundsPendingSubtotalFeeType2 = "payment-fee"
	RefundsPendingSubtotalFeeType2DirectDebitFailureFee                             RefundsPendingSubtotalFeeType2 = "direct-debit-failure-fee"
	RefundsPendingSubtotalFeeType2UnauthorizedDirectDebitFee                        RefundsPendingSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	RefundsPendingSubtotalFeeType2BankChargedDirectDebitFailureFee                  RefundsPendingSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	RefundsPendingSubtotalFeeType2PartnerCommission                                 RefundsPendingSubtotalFeeType2 = "partner-commission"
	RefundsPendingSubtotalFeeType2ApplicationFee                                    RefundsPendingSubtotalFeeType2 = "application-fee"
	RefundsPendingSubtotalFeeType2CaptureFee                                        RefundsPendingSubtotalFeeType2 = "capture-fee"
	RefundsPendingSubtotalFeeType2RefundFee                                         RefundsPendingSubtotalFeeType2 = "refund-fee"
	RefundsPendingSubtotalFeeType2ChargebackFee                                     RefundsPendingSubtotalFeeType2 = "chargeback-fee"
	RefundsPendingSubtotalFeeType2PaymentNotificationFee                            RefundsPendingSubtotalFeeType2 = "payment-notification-fee"
	RefundsPendingSubtotalFeeType2TransferNotificationFee                           RefundsPendingSubtotalFeeType2 = "transfer-notification-fee"
	RefundsPendingSubtotalFeeType2PayoutFee                                         RefundsPendingSubtotalFeeType2 = "payout-fee"
	RefundsPendingSubtotalFeeType2FeeDiscount                                       RefundsPendingSubtotalFeeType2 = "fee-discount"
	RefundsPendingSubtotalFeeType2FeeReimbursement                                  RefundsPendingSubtotalFeeType2 = "fee-reimbursement"
	RefundsPendingSubtotalFeeType2PlatformVolumeFee                                 RefundsPendingSubtotalFeeType2 = "platform-volume-fee"
	RefundsPendingSubtotalFeeType2PlatformConnectedOrganizationsFee                 RefundsPendingSubtotalFeeType2 = "platform-connected-organizations-fee"
	RefundsPendingSubtotalFeeType2BalanceChargeFee                                  RefundsPendingSubtotalFeeType2 = "balance-charge-fee"
	RefundsPendingSubtotalFeeType2ThreedsAuthenticationAttemptFee                   RefundsPendingSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	RefundsPendingSubtotalFeeType2TerminalMonthlyFee                                RefundsPendingSubtotalFeeType2 = "terminal-monthly-fee"
	RefundsPendingSubtotalFeeType2AcceptanceRiskFee                                 RefundsPendingSubtotalFeeType2 = "acceptance-risk-fee"
	RefundsPendingSubtotalFeeType2TopUpFee                                          RefundsPendingSubtotalFeeType2 = "top-up-fee"
	RefundsPendingSubtotalFeeType2PaymentGatewayFee                                 RefundsPendingSubtotalFeeType2 = "payment-gateway-fee"
	RefundsPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   RefundsPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	RefundsPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee RefundsPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	RefundsPendingSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             RefundsPendingSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	RefundsPendingSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           RefundsPendingSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	RefundsPendingSubtotalFeeType2MinimumInvoiceAmountFee                           RefundsPendingSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e RefundsPendingSubtotalFeeType2) ToPointer() *RefundsPendingSubtotalFeeType2 {
	return &e
}
func (e *RefundsPendingSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = RefundsPendingSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsPendingSubtotalFeeType2: %v", v)
	}
}

// RefundsPendingSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type RefundsPendingSubtotalPrepaymentPartType2 string

const (
	RefundsPendingSubtotalPrepaymentPartType2Fee                     RefundsPendingSubtotalPrepaymentPartType2 = "fee"
	RefundsPendingSubtotalPrepaymentPartType2FeeReimbursement        RefundsPendingSubtotalPrepaymentPartType2 = "fee-reimbursement"
	RefundsPendingSubtotalPrepaymentPartType2FeeDiscount             RefundsPendingSubtotalPrepaymentPartType2 = "fee-discount"
	RefundsPendingSubtotalPrepaymentPartType2FeeVat                  RefundsPendingSubtotalPrepaymentPartType2 = "fee-vat"
	RefundsPendingSubtotalPrepaymentPartType2FeeRoundingCompensation RefundsPendingSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e RefundsPendingSubtotalPrepaymentPartType2) ToPointer() *RefundsPendingSubtotalPrepaymentPartType2 {
	return &e
}
func (e *RefundsPendingSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = RefundsPendingSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsPendingSubtotalPrepaymentPartType2: %v", v)
	}
}

// RefundsPendingSubtotalTransactionType2 - Represents the transaction type
type RefundsPendingSubtotalTransactionType2 string

const (
	RefundsPendingSubtotalTransactionType2Payment                           RefundsPendingSubtotalTransactionType2 = "payment"
	RefundsPendingSubtotalTransactionType2SplitPayment                      RefundsPendingSubtotalTransactionType2 = "split-payment"
	RefundsPendingSubtotalTransactionType2FailedPayment                     RefundsPendingSubtotalTransactionType2 = "failed-payment"
	RefundsPendingSubtotalTransactionType2FailedPlatformSplitPayment        RefundsPendingSubtotalTransactionType2 = "failed-platform-split-payment"
	RefundsPendingSubtotalTransactionType2FailedSplitPaymentCompensation    RefundsPendingSubtotalTransactionType2 = "failed-split-payment-compensation"
	RefundsPendingSubtotalTransactionType2Capture                           RefundsPendingSubtotalTransactionType2 = "capture"
	RefundsPendingSubtotalTransactionType2SplitTransaction                  RefundsPendingSubtotalTransactionType2 = "split-transaction"
	RefundsPendingSubtotalTransactionType2Refund                            RefundsPendingSubtotalTransactionType2 = "refund"
	RefundsPendingSubtotalTransactionType2PlatformPaymentRefund             RefundsPendingSubtotalTransactionType2 = "platform-payment-refund"
	RefundsPendingSubtotalTransactionType2ReturnedPlatformPaymentRefund     RefundsPendingSubtotalTransactionType2 = "returned-platform-payment-refund"
	RefundsPendingSubtotalTransactionType2RefundCompensation                RefundsPendingSubtotalTransactionType2 = "refund-compensation"
	RefundsPendingSubtotalTransactionType2ReturnedRefundCompensation        RefundsPendingSubtotalTransactionType2 = "returned-refund-compensation"
	RefundsPendingSubtotalTransactionType2ReturnedRefund                    RefundsPendingSubtotalTransactionType2 = "returned-refund"
	RefundsPendingSubtotalTransactionType2Chargeback                        RefundsPendingSubtotalTransactionType2 = "chargeback"
	RefundsPendingSubtotalTransactionType2ChargebackReversal                RefundsPendingSubtotalTransactionType2 = "chargeback-reversal"
	RefundsPendingSubtotalTransactionType2ChargebackCompensation            RefundsPendingSubtotalTransactionType2 = "chargeback-compensation"
	RefundsPendingSubtotalTransactionType2ReversedChargebackCompensation    RefundsPendingSubtotalTransactionType2 = "reversed-chargeback-compensation"
	RefundsPendingSubtotalTransactionType2PlatformPaymentChargeback         RefundsPendingSubtotalTransactionType2 = "platform-payment-chargeback"
	RefundsPendingSubtotalTransactionType2ReversedPlatformPaymentChargeback RefundsPendingSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	RefundsPendingSubtotalTransactionType2FeePrepayment                     RefundsPendingSubtotalTransactionType2 = "fee-prepayment"
	RefundsPendingSubtotalTransactionType2OutgoingTransfer                  RefundsPendingSubtotalTransactionType2 = "outgoing-transfer"
	RefundsPendingSubtotalTransactionType2IncomingTransfer                  RefundsPendingSubtotalTransactionType2 = "incoming-transfer"
	RefundsPendingSubtotalTransactionType2CanceledTransfer                  RefundsPendingSubtotalTransactionType2 = "canceled-transfer"
	RefundsPendingSubtotalTransactionType2ReturnedTransfer                  RefundsPendingSubtotalTransactionType2 = "returned-transfer"
	RefundsPendingSubtotalTransactionType2BalanceReserve                    RefundsPendingSubtotalTransactionType2 = "balance-reserve"
	RefundsPendingSubtotalTransactionType2BalanceReserveReturn              RefundsPendingSubtotalTransactionType2 = "balance-reserve-return"
	RefundsPendingSubtotalTransactionType2InvoiceRoundingCompensation       RefundsPendingSubtotalTransactionType2 = "invoice-rounding-compensation"
	RefundsPendingSubtotalTransactionType2RollingReserveHold                RefundsPendingSubtotalTransactionType2 = "rolling-reserve-hold"
	RefundsPendingSubtotalTransactionType2RollingReserveRelease             RefundsPendingSubtotalTransactionType2 = "rolling-reserve-release"
	RefundsPendingSubtotalTransactionType2BalanceCorrection                 RefundsPendingSubtotalTransactionType2 = "balance-correction"
	RefundsPendingSubtotalTransactionType2Repayment                         RefundsPendingSubtotalTransactionType2 = "repayment"
	RefundsPendingSubtotalTransactionType2Loan                              RefundsPendingSubtotalTransactionType2 = "loan"
	RefundsPendingSubtotalTransactionType2BalanceTopup                      RefundsPendingSubtotalTransactionType2 = "balance-topup"
	RefundsPendingSubtotalTransactionType2CashCollateralIssuance            RefundsPendingSubtotalTransactionType2 = "cash-collateral-issuance';"
	RefundsPendingSubtotalTransactionType2CashCollateralRelease             RefundsPendingSubtotalTransactionType2 = "cash-collateral-release"
	RefundsPendingSubtotalTransactionType2PendingRollingReserve             RefundsPendingSubtotalTransactionType2 = "pending-rolling-reserve"
	RefundsPendingSubtotalTransactionType2ToBeReleasedRollingReserve        RefundsPendingSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	RefundsPendingSubtotalTransactionType2HeldRollingReserve                RefundsPendingSubtotalTransactionType2 = "held-rolling-reserve"
	RefundsPendingSubtotalTransactionType2ReleasedRollingReserve            RefundsPendingSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e RefundsPendingSubtotalTransactionType2) ToPointer() *RefundsPendingSubtotalTransactionType2 {
	return &e
}
func (e *RefundsPendingSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = RefundsPendingSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsPendingSubtotalTransactionType2: %v", v)
	}
}

type RefundsPendingSubtotal2 struct {
	SubTotals []RefundsPendingSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *RefundsPendingSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *RefundsPendingSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *RefundsPendingSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *RefundsPendingSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *RefundsPendingSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *RefundsPendingSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *RefundsPendingSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *RefundsPendingSubtotal2) GetSubTotals() []RefundsPendingSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *RefundsPendingSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *RefundsPendingSubtotal2) GetMethod() *RefundsPendingSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *RefundsPendingSubtotal2) GetCardIssuer() *RefundsPendingSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *RefundsPendingSubtotal2) GetCardAudience() *RefundsPendingSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *RefundsPendingSubtotal2) GetCardRegion() *RefundsPendingSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *RefundsPendingSubtotal2) GetFeeType() *RefundsPendingSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *RefundsPendingSubtotal2) GetPrepaymentPartType() *RefundsPendingSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *RefundsPendingSubtotal2) GetTransactionType() *RefundsPendingSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type RefundsPending struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *RefundsPendingAmount     `json:"amount,omitempty"`
	Subtotals []RefundsPendingSubtotal2 `json:"subtotals,omitempty"`
}

func (o *RefundsPending) GetAmount() *RefundsPendingAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *RefundsPending) GetSubtotals() []RefundsPendingSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// RefundsMovedToAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type RefundsMovedToAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *RefundsMovedToAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *RefundsMovedToAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// RefundsMovedToAvailableSubTotalMethod1 - Payment type of the transactions
type RefundsMovedToAvailableSubTotalMethod1 string

const (
	RefundsMovedToAvailableSubTotalMethod1Alma              RefundsMovedToAvailableSubTotalMethod1 = "alma"
	RefundsMovedToAvailableSubTotalMethod1Bacs              RefundsMovedToAvailableSubTotalMethod1 = "bacs"
	RefundsMovedToAvailableSubTotalMethod1Applepay          RefundsMovedToAvailableSubTotalMethod1 = "applepay"
	RefundsMovedToAvailableSubTotalMethod1Bancomatpay       RefundsMovedToAvailableSubTotalMethod1 = "bancomatpay"
	RefundsMovedToAvailableSubTotalMethod1Bancontact        RefundsMovedToAvailableSubTotalMethod1 = "bancontact"
	RefundsMovedToAvailableSubTotalMethod1Banktransfer      RefundsMovedToAvailableSubTotalMethod1 = "banktransfer"
	RefundsMovedToAvailableSubTotalMethod1Belfius           RefundsMovedToAvailableSubTotalMethod1 = "belfius"
	RefundsMovedToAvailableSubTotalMethod1Billie            RefundsMovedToAvailableSubTotalMethod1 = "billie"
	RefundsMovedToAvailableSubTotalMethod1Bizum             RefundsMovedToAvailableSubTotalMethod1 = "bizum"
	RefundsMovedToAvailableSubTotalMethod1Bitcoin           RefundsMovedToAvailableSubTotalMethod1 = "bitcoin"
	RefundsMovedToAvailableSubTotalMethod1Blik              RefundsMovedToAvailableSubTotalMethod1 = "blik"
	RefundsMovedToAvailableSubTotalMethod1Creditcard        RefundsMovedToAvailableSubTotalMethod1 = "creditcard"
	RefundsMovedToAvailableSubTotalMethod1Directdebit       RefundsMovedToAvailableSubTotalMethod1 = "directdebit"
	RefundsMovedToAvailableSubTotalMethod1Eps               RefundsMovedToAvailableSubTotalMethod1 = "eps"
	RefundsMovedToAvailableSubTotalMethod1Giftcard          RefundsMovedToAvailableSubTotalMethod1 = "giftcard"
	RefundsMovedToAvailableSubTotalMethod1Giropay           RefundsMovedToAvailableSubTotalMethod1 = "giropay"
	RefundsMovedToAvailableSubTotalMethod1Googlepay         RefundsMovedToAvailableSubTotalMethod1 = "googlepay"
	RefundsMovedToAvailableSubTotalMethod1Ideal             RefundsMovedToAvailableSubTotalMethod1 = "ideal"
	RefundsMovedToAvailableSubTotalMethod1In3               RefundsMovedToAvailableSubTotalMethod1 = "in3"
	RefundsMovedToAvailableSubTotalMethod1Inghomepay        RefundsMovedToAvailableSubTotalMethod1 = "inghomepay"
	RefundsMovedToAvailableSubTotalMethod1Kbc               RefundsMovedToAvailableSubTotalMethod1 = "kbc"
	RefundsMovedToAvailableSubTotalMethod1Klarnapaylater    RefundsMovedToAvailableSubTotalMethod1 = "klarnapaylater"
	RefundsMovedToAvailableSubTotalMethod1Klarnapaynow      RefundsMovedToAvailableSubTotalMethod1 = "klarnapaynow"
	RefundsMovedToAvailableSubTotalMethod1Klarnasliceit     RefundsMovedToAvailableSubTotalMethod1 = "klarnasliceit"
	RefundsMovedToAvailableSubTotalMethod1Klarna            RefundsMovedToAvailableSubTotalMethod1 = "klarna"
	RefundsMovedToAvailableSubTotalMethod1Mbway             RefundsMovedToAvailableSubTotalMethod1 = "mbway"
	RefundsMovedToAvailableSubTotalMethod1Multibanco        RefundsMovedToAvailableSubTotalMethod1 = "multibanco"
	RefundsMovedToAvailableSubTotalMethod1Mybank            RefundsMovedToAvailableSubTotalMethod1 = "mybank"
	RefundsMovedToAvailableSubTotalMethod1Paybybank         RefundsMovedToAvailableSubTotalMethod1 = "paybybank"
	RefundsMovedToAvailableSubTotalMethod1Payconiq          RefundsMovedToAvailableSubTotalMethod1 = "payconiq"
	RefundsMovedToAvailableSubTotalMethod1Paypal            RefundsMovedToAvailableSubTotalMethod1 = "paypal"
	RefundsMovedToAvailableSubTotalMethod1Paysafecard       RefundsMovedToAvailableSubTotalMethod1 = "paysafecard"
	RefundsMovedToAvailableSubTotalMethod1Przelewy24        RefundsMovedToAvailableSubTotalMethod1 = "przelewy24"
	RefundsMovedToAvailableSubTotalMethod1Riverty           RefundsMovedToAvailableSubTotalMethod1 = "riverty"
	RefundsMovedToAvailableSubTotalMethod1Satispay          RefundsMovedToAvailableSubTotalMethod1 = "satispay"
	RefundsMovedToAvailableSubTotalMethod1Podiumcadeaukaart RefundsMovedToAvailableSubTotalMethod1 = "podiumcadeaukaart"
	RefundsMovedToAvailableSubTotalMethod1Pointofsale       RefundsMovedToAvailableSubTotalMethod1 = "pointofsale"
	RefundsMovedToAvailableSubTotalMethod1Sofort            RefundsMovedToAvailableSubTotalMethod1 = "sofort"
	RefundsMovedToAvailableSubTotalMethod1Swish             RefundsMovedToAvailableSubTotalMethod1 = "swish"
	RefundsMovedToAvailableSubTotalMethod1Trustly           RefundsMovedToAvailableSubTotalMethod1 = "trustly"
	RefundsMovedToAvailableSubTotalMethod1Twint             RefundsMovedToAvailableSubTotalMethod1 = "twint"
	RefundsMovedToAvailableSubTotalMethod1Voucher           RefundsMovedToAvailableSubTotalMethod1 = "voucher"
)

func (e RefundsMovedToAvailableSubTotalMethod1) ToPointer() *RefundsMovedToAvailableSubTotalMethod1 {
	return &e
}
func (e *RefundsMovedToAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = RefundsMovedToAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsMovedToAvailableSubTotalMethod1: %v", v)
	}
}

// RefundsMovedToAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type RefundsMovedToAvailableSubTotalCardIssuer1 string

const (
	RefundsMovedToAvailableSubTotalCardIssuer1Amex          RefundsMovedToAvailableSubTotalCardIssuer1 = "amex"
	RefundsMovedToAvailableSubTotalCardIssuer1Maestro       RefundsMovedToAvailableSubTotalCardIssuer1 = "maestro"
	RefundsMovedToAvailableSubTotalCardIssuer1CarteBancaire RefundsMovedToAvailableSubTotalCardIssuer1 = "carte-bancaire"
	RefundsMovedToAvailableSubTotalCardIssuer1Other         RefundsMovedToAvailableSubTotalCardIssuer1 = "other"
)

func (e RefundsMovedToAvailableSubTotalCardIssuer1) ToPointer() *RefundsMovedToAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *RefundsMovedToAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = RefundsMovedToAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsMovedToAvailableSubTotalCardIssuer1: %v", v)
	}
}

// RefundsMovedToAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type RefundsMovedToAvailableSubTotalCardAudience1 string

const (
	RefundsMovedToAvailableSubTotalCardAudience1Corporate RefundsMovedToAvailableSubTotalCardAudience1 = "corporate"
	RefundsMovedToAvailableSubTotalCardAudience1Other     RefundsMovedToAvailableSubTotalCardAudience1 = "other"
)

func (e RefundsMovedToAvailableSubTotalCardAudience1) ToPointer() *RefundsMovedToAvailableSubTotalCardAudience1 {
	return &e
}
func (e *RefundsMovedToAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = RefundsMovedToAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsMovedToAvailableSubTotalCardAudience1: %v", v)
	}
}

// RefundsMovedToAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type RefundsMovedToAvailableSubTotalCardRegion1 string

const (
	RefundsMovedToAvailableSubTotalCardRegion1IntraEea RefundsMovedToAvailableSubTotalCardRegion1 = "intra-eea"
	RefundsMovedToAvailableSubTotalCardRegion1IntraEu  RefundsMovedToAvailableSubTotalCardRegion1 = "intra-eu"
	RefundsMovedToAvailableSubTotalCardRegion1Domestic RefundsMovedToAvailableSubTotalCardRegion1 = "domestic"
	RefundsMovedToAvailableSubTotalCardRegion1Other    RefundsMovedToAvailableSubTotalCardRegion1 = "other"
)

func (e RefundsMovedToAvailableSubTotalCardRegion1) ToPointer() *RefundsMovedToAvailableSubTotalCardRegion1 {
	return &e
}
func (e *RefundsMovedToAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = RefundsMovedToAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsMovedToAvailableSubTotalCardRegion1: %v", v)
	}
}

// RefundsMovedToAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type RefundsMovedToAvailableSubTotalFeeType1 string

const (
	RefundsMovedToAvailableSubTotalFeeType1PaymentFee                                        RefundsMovedToAvailableSubTotalFeeType1 = "payment-fee"
	RefundsMovedToAvailableSubTotalFeeType1DirectDebitFailureFee                             RefundsMovedToAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	RefundsMovedToAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        RefundsMovedToAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	RefundsMovedToAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  RefundsMovedToAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	RefundsMovedToAvailableSubTotalFeeType1PartnerCommission                                 RefundsMovedToAvailableSubTotalFeeType1 = "partner-commission"
	RefundsMovedToAvailableSubTotalFeeType1ApplicationFee                                    RefundsMovedToAvailableSubTotalFeeType1 = "application-fee"
	RefundsMovedToAvailableSubTotalFeeType1CaptureFee                                        RefundsMovedToAvailableSubTotalFeeType1 = "capture-fee"
	RefundsMovedToAvailableSubTotalFeeType1RefundFee                                         RefundsMovedToAvailableSubTotalFeeType1 = "refund-fee"
	RefundsMovedToAvailableSubTotalFeeType1ChargebackFee                                     RefundsMovedToAvailableSubTotalFeeType1 = "chargeback-fee"
	RefundsMovedToAvailableSubTotalFeeType1PaymentNotificationFee                            RefundsMovedToAvailableSubTotalFeeType1 = "payment-notification-fee"
	RefundsMovedToAvailableSubTotalFeeType1TransferNotificationFee                           RefundsMovedToAvailableSubTotalFeeType1 = "transfer-notification-fee"
	RefundsMovedToAvailableSubTotalFeeType1PayoutFee                                         RefundsMovedToAvailableSubTotalFeeType1 = "payout-fee"
	RefundsMovedToAvailableSubTotalFeeType1FeeDiscount                                       RefundsMovedToAvailableSubTotalFeeType1 = "fee-discount"
	RefundsMovedToAvailableSubTotalFeeType1FeeReimbursement                                  RefundsMovedToAvailableSubTotalFeeType1 = "fee-reimbursement"
	RefundsMovedToAvailableSubTotalFeeType1PlatformVolumeFee                                 RefundsMovedToAvailableSubTotalFeeType1 = "platform-volume-fee"
	RefundsMovedToAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 RefundsMovedToAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	RefundsMovedToAvailableSubTotalFeeType1BalanceChargeFee                                  RefundsMovedToAvailableSubTotalFeeType1 = "balance-charge-fee"
	RefundsMovedToAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   RefundsMovedToAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	RefundsMovedToAvailableSubTotalFeeType1TerminalMonthlyFee                                RefundsMovedToAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	RefundsMovedToAvailableSubTotalFeeType1AcceptanceRiskFee                                 RefundsMovedToAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	RefundsMovedToAvailableSubTotalFeeType1TopUpFee                                          RefundsMovedToAvailableSubTotalFeeType1 = "top-up-fee"
	RefundsMovedToAvailableSubTotalFeeType1PaymentGatewayFee                                 RefundsMovedToAvailableSubTotalFeeType1 = "payment-gateway-fee"
	RefundsMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   RefundsMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	RefundsMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee RefundsMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	RefundsMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             RefundsMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	RefundsMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           RefundsMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	RefundsMovedToAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           RefundsMovedToAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e RefundsMovedToAvailableSubTotalFeeType1) ToPointer() *RefundsMovedToAvailableSubTotalFeeType1 {
	return &e
}
func (e *RefundsMovedToAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = RefundsMovedToAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsMovedToAvailableSubTotalFeeType1: %v", v)
	}
}

// RefundsMovedToAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type RefundsMovedToAvailableSubTotalPrepaymentPartType1 string

const (
	RefundsMovedToAvailableSubTotalPrepaymentPartType1Fee                     RefundsMovedToAvailableSubTotalPrepaymentPartType1 = "fee"
	RefundsMovedToAvailableSubTotalPrepaymentPartType1FeeReimbursement        RefundsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	RefundsMovedToAvailableSubTotalPrepaymentPartType1FeeDiscount             RefundsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	RefundsMovedToAvailableSubTotalPrepaymentPartType1FeeVat                  RefundsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	RefundsMovedToAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation RefundsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e RefundsMovedToAvailableSubTotalPrepaymentPartType1) ToPointer() *RefundsMovedToAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *RefundsMovedToAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = RefundsMovedToAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsMovedToAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// RefundsMovedToAvailableSubTotalTransactionType1 - Represents the transaction type
type RefundsMovedToAvailableSubTotalTransactionType1 string

const (
	RefundsMovedToAvailableSubTotalTransactionType1Payment                           RefundsMovedToAvailableSubTotalTransactionType1 = "payment"
	RefundsMovedToAvailableSubTotalTransactionType1SplitPayment                      RefundsMovedToAvailableSubTotalTransactionType1 = "split-payment"
	RefundsMovedToAvailableSubTotalTransactionType1FailedPayment                     RefundsMovedToAvailableSubTotalTransactionType1 = "failed-payment"
	RefundsMovedToAvailableSubTotalTransactionType1FailedPlatformSplitPayment        RefundsMovedToAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	RefundsMovedToAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    RefundsMovedToAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	RefundsMovedToAvailableSubTotalTransactionType1Capture                           RefundsMovedToAvailableSubTotalTransactionType1 = "capture"
	RefundsMovedToAvailableSubTotalTransactionType1SplitTransaction                  RefundsMovedToAvailableSubTotalTransactionType1 = "split-transaction"
	RefundsMovedToAvailableSubTotalTransactionType1Refund                            RefundsMovedToAvailableSubTotalTransactionType1 = "refund"
	RefundsMovedToAvailableSubTotalTransactionType1PlatformPaymentRefund             RefundsMovedToAvailableSubTotalTransactionType1 = "platform-payment-refund"
	RefundsMovedToAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     RefundsMovedToAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	RefundsMovedToAvailableSubTotalTransactionType1RefundCompensation                RefundsMovedToAvailableSubTotalTransactionType1 = "refund-compensation"
	RefundsMovedToAvailableSubTotalTransactionType1ReturnedRefundCompensation        RefundsMovedToAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	RefundsMovedToAvailableSubTotalTransactionType1ReturnedRefund                    RefundsMovedToAvailableSubTotalTransactionType1 = "returned-refund"
	RefundsMovedToAvailableSubTotalTransactionType1Chargeback                        RefundsMovedToAvailableSubTotalTransactionType1 = "chargeback"
	RefundsMovedToAvailableSubTotalTransactionType1ChargebackReversal                RefundsMovedToAvailableSubTotalTransactionType1 = "chargeback-reversal"
	RefundsMovedToAvailableSubTotalTransactionType1ChargebackCompensation            RefundsMovedToAvailableSubTotalTransactionType1 = "chargeback-compensation"
	RefundsMovedToAvailableSubTotalTransactionType1ReversedChargebackCompensation    RefundsMovedToAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	RefundsMovedToAvailableSubTotalTransactionType1PlatformPaymentChargeback         RefundsMovedToAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	RefundsMovedToAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback RefundsMovedToAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	RefundsMovedToAvailableSubTotalTransactionType1FeePrepayment                     RefundsMovedToAvailableSubTotalTransactionType1 = "fee-prepayment"
	RefundsMovedToAvailableSubTotalTransactionType1OutgoingTransfer                  RefundsMovedToAvailableSubTotalTransactionType1 = "outgoing-transfer"
	RefundsMovedToAvailableSubTotalTransactionType1IncomingTransfer                  RefundsMovedToAvailableSubTotalTransactionType1 = "incoming-transfer"
	RefundsMovedToAvailableSubTotalTransactionType1CanceledTransfer                  RefundsMovedToAvailableSubTotalTransactionType1 = "canceled-transfer"
	RefundsMovedToAvailableSubTotalTransactionType1ReturnedTransfer                  RefundsMovedToAvailableSubTotalTransactionType1 = "returned-transfer"
	RefundsMovedToAvailableSubTotalTransactionType1BalanceReserve                    RefundsMovedToAvailableSubTotalTransactionType1 = "balance-reserve"
	RefundsMovedToAvailableSubTotalTransactionType1BalanceReserveReturn              RefundsMovedToAvailableSubTotalTransactionType1 = "balance-reserve-return"
	RefundsMovedToAvailableSubTotalTransactionType1InvoiceRoundingCompensation       RefundsMovedToAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	RefundsMovedToAvailableSubTotalTransactionType1RollingReserveHold                RefundsMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	RefundsMovedToAvailableSubTotalTransactionType1RollingReserveRelease             RefundsMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	RefundsMovedToAvailableSubTotalTransactionType1BalanceCorrection                 RefundsMovedToAvailableSubTotalTransactionType1 = "balance-correction"
	RefundsMovedToAvailableSubTotalTransactionType1Repayment                         RefundsMovedToAvailableSubTotalTransactionType1 = "repayment"
	RefundsMovedToAvailableSubTotalTransactionType1Loan                              RefundsMovedToAvailableSubTotalTransactionType1 = "loan"
	RefundsMovedToAvailableSubTotalTransactionType1BalanceTopup                      RefundsMovedToAvailableSubTotalTransactionType1 = "balance-topup"
	RefundsMovedToAvailableSubTotalTransactionType1CashCollateralIssuance            RefundsMovedToAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	RefundsMovedToAvailableSubTotalTransactionType1CashCollateralRelease             RefundsMovedToAvailableSubTotalTransactionType1 = "cash-collateral-release"
	RefundsMovedToAvailableSubTotalTransactionType1PendingRollingReserve             RefundsMovedToAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	RefundsMovedToAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        RefundsMovedToAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	RefundsMovedToAvailableSubTotalTransactionType1HeldRollingReserve                RefundsMovedToAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	RefundsMovedToAvailableSubTotalTransactionType1ReleasedRollingReserve            RefundsMovedToAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e RefundsMovedToAvailableSubTotalTransactionType1) ToPointer() *RefundsMovedToAvailableSubTotalTransactionType1 {
	return &e
}
func (e *RefundsMovedToAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = RefundsMovedToAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsMovedToAvailableSubTotalTransactionType1: %v", v)
	}
}

type RefundsMovedToAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *RefundsMovedToAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *RefundsMovedToAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *RefundsMovedToAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *RefundsMovedToAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *RefundsMovedToAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *RefundsMovedToAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *RefundsMovedToAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *RefundsMovedToAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *RefundsMovedToAvailableSubTotal1) GetMethod() *RefundsMovedToAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *RefundsMovedToAvailableSubTotal1) GetCardIssuer() *RefundsMovedToAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *RefundsMovedToAvailableSubTotal1) GetCardAudience() *RefundsMovedToAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *RefundsMovedToAvailableSubTotal1) GetCardRegion() *RefundsMovedToAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *RefundsMovedToAvailableSubTotal1) GetFeeType() *RefundsMovedToAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *RefundsMovedToAvailableSubTotal1) GetPrepaymentPartType() *RefundsMovedToAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *RefundsMovedToAvailableSubTotal1) GetTransactionType() *RefundsMovedToAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// RefundsMovedToAvailableSubtotalMethod2 - Payment type of the transactions
type RefundsMovedToAvailableSubtotalMethod2 string

const (
	RefundsMovedToAvailableSubtotalMethod2Alma              RefundsMovedToAvailableSubtotalMethod2 = "alma"
	RefundsMovedToAvailableSubtotalMethod2Bacs              RefundsMovedToAvailableSubtotalMethod2 = "bacs"
	RefundsMovedToAvailableSubtotalMethod2Applepay          RefundsMovedToAvailableSubtotalMethod2 = "applepay"
	RefundsMovedToAvailableSubtotalMethod2Bancomatpay       RefundsMovedToAvailableSubtotalMethod2 = "bancomatpay"
	RefundsMovedToAvailableSubtotalMethod2Bancontact        RefundsMovedToAvailableSubtotalMethod2 = "bancontact"
	RefundsMovedToAvailableSubtotalMethod2Banktransfer      RefundsMovedToAvailableSubtotalMethod2 = "banktransfer"
	RefundsMovedToAvailableSubtotalMethod2Belfius           RefundsMovedToAvailableSubtotalMethod2 = "belfius"
	RefundsMovedToAvailableSubtotalMethod2Billie            RefundsMovedToAvailableSubtotalMethod2 = "billie"
	RefundsMovedToAvailableSubtotalMethod2Bizum             RefundsMovedToAvailableSubtotalMethod2 = "bizum"
	RefundsMovedToAvailableSubtotalMethod2Bitcoin           RefundsMovedToAvailableSubtotalMethod2 = "bitcoin"
	RefundsMovedToAvailableSubtotalMethod2Blik              RefundsMovedToAvailableSubtotalMethod2 = "blik"
	RefundsMovedToAvailableSubtotalMethod2Creditcard        RefundsMovedToAvailableSubtotalMethod2 = "creditcard"
	RefundsMovedToAvailableSubtotalMethod2Directdebit       RefundsMovedToAvailableSubtotalMethod2 = "directdebit"
	RefundsMovedToAvailableSubtotalMethod2Eps               RefundsMovedToAvailableSubtotalMethod2 = "eps"
	RefundsMovedToAvailableSubtotalMethod2Giftcard          RefundsMovedToAvailableSubtotalMethod2 = "giftcard"
	RefundsMovedToAvailableSubtotalMethod2Giropay           RefundsMovedToAvailableSubtotalMethod2 = "giropay"
	RefundsMovedToAvailableSubtotalMethod2Googlepay         RefundsMovedToAvailableSubtotalMethod2 = "googlepay"
	RefundsMovedToAvailableSubtotalMethod2Ideal             RefundsMovedToAvailableSubtotalMethod2 = "ideal"
	RefundsMovedToAvailableSubtotalMethod2In3               RefundsMovedToAvailableSubtotalMethod2 = "in3"
	RefundsMovedToAvailableSubtotalMethod2Inghomepay        RefundsMovedToAvailableSubtotalMethod2 = "inghomepay"
	RefundsMovedToAvailableSubtotalMethod2Kbc               RefundsMovedToAvailableSubtotalMethod2 = "kbc"
	RefundsMovedToAvailableSubtotalMethod2Klarnapaylater    RefundsMovedToAvailableSubtotalMethod2 = "klarnapaylater"
	RefundsMovedToAvailableSubtotalMethod2Klarnapaynow      RefundsMovedToAvailableSubtotalMethod2 = "klarnapaynow"
	RefundsMovedToAvailableSubtotalMethod2Klarnasliceit     RefundsMovedToAvailableSubtotalMethod2 = "klarnasliceit"
	RefundsMovedToAvailableSubtotalMethod2Klarna            RefundsMovedToAvailableSubtotalMethod2 = "klarna"
	RefundsMovedToAvailableSubtotalMethod2Mbway             RefundsMovedToAvailableSubtotalMethod2 = "mbway"
	RefundsMovedToAvailableSubtotalMethod2Multibanco        RefundsMovedToAvailableSubtotalMethod2 = "multibanco"
	RefundsMovedToAvailableSubtotalMethod2Mybank            RefundsMovedToAvailableSubtotalMethod2 = "mybank"
	RefundsMovedToAvailableSubtotalMethod2Paybybank         RefundsMovedToAvailableSubtotalMethod2 = "paybybank"
	RefundsMovedToAvailableSubtotalMethod2Payconiq          RefundsMovedToAvailableSubtotalMethod2 = "payconiq"
	RefundsMovedToAvailableSubtotalMethod2Paypal            RefundsMovedToAvailableSubtotalMethod2 = "paypal"
	RefundsMovedToAvailableSubtotalMethod2Paysafecard       RefundsMovedToAvailableSubtotalMethod2 = "paysafecard"
	RefundsMovedToAvailableSubtotalMethod2Przelewy24        RefundsMovedToAvailableSubtotalMethod2 = "przelewy24"
	RefundsMovedToAvailableSubtotalMethod2Riverty           RefundsMovedToAvailableSubtotalMethod2 = "riverty"
	RefundsMovedToAvailableSubtotalMethod2Satispay          RefundsMovedToAvailableSubtotalMethod2 = "satispay"
	RefundsMovedToAvailableSubtotalMethod2Podiumcadeaukaart RefundsMovedToAvailableSubtotalMethod2 = "podiumcadeaukaart"
	RefundsMovedToAvailableSubtotalMethod2Pointofsale       RefundsMovedToAvailableSubtotalMethod2 = "pointofsale"
	RefundsMovedToAvailableSubtotalMethod2Sofort            RefundsMovedToAvailableSubtotalMethod2 = "sofort"
	RefundsMovedToAvailableSubtotalMethod2Swish             RefundsMovedToAvailableSubtotalMethod2 = "swish"
	RefundsMovedToAvailableSubtotalMethod2Trustly           RefundsMovedToAvailableSubtotalMethod2 = "trustly"
	RefundsMovedToAvailableSubtotalMethod2Twint             RefundsMovedToAvailableSubtotalMethod2 = "twint"
	RefundsMovedToAvailableSubtotalMethod2Voucher           RefundsMovedToAvailableSubtotalMethod2 = "voucher"
)

func (e RefundsMovedToAvailableSubtotalMethod2) ToPointer() *RefundsMovedToAvailableSubtotalMethod2 {
	return &e
}
func (e *RefundsMovedToAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = RefundsMovedToAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsMovedToAvailableSubtotalMethod2: %v", v)
	}
}

// RefundsMovedToAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type RefundsMovedToAvailableSubtotalCardIssuer2 string

const (
	RefundsMovedToAvailableSubtotalCardIssuer2Amex          RefundsMovedToAvailableSubtotalCardIssuer2 = "amex"
	RefundsMovedToAvailableSubtotalCardIssuer2Maestro       RefundsMovedToAvailableSubtotalCardIssuer2 = "maestro"
	RefundsMovedToAvailableSubtotalCardIssuer2CarteBancaire RefundsMovedToAvailableSubtotalCardIssuer2 = "carte-bancaire"
	RefundsMovedToAvailableSubtotalCardIssuer2Other         RefundsMovedToAvailableSubtotalCardIssuer2 = "other"
)

func (e RefundsMovedToAvailableSubtotalCardIssuer2) ToPointer() *RefundsMovedToAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *RefundsMovedToAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = RefundsMovedToAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsMovedToAvailableSubtotalCardIssuer2: %v", v)
	}
}

// RefundsMovedToAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type RefundsMovedToAvailableSubtotalCardAudience2 string

const (
	RefundsMovedToAvailableSubtotalCardAudience2Corporate RefundsMovedToAvailableSubtotalCardAudience2 = "corporate"
	RefundsMovedToAvailableSubtotalCardAudience2Other     RefundsMovedToAvailableSubtotalCardAudience2 = "other"
)

func (e RefundsMovedToAvailableSubtotalCardAudience2) ToPointer() *RefundsMovedToAvailableSubtotalCardAudience2 {
	return &e
}
func (e *RefundsMovedToAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = RefundsMovedToAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsMovedToAvailableSubtotalCardAudience2: %v", v)
	}
}

// RefundsMovedToAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type RefundsMovedToAvailableSubtotalCardRegion2 string

const (
	RefundsMovedToAvailableSubtotalCardRegion2IntraEea RefundsMovedToAvailableSubtotalCardRegion2 = "intra-eea"
	RefundsMovedToAvailableSubtotalCardRegion2IntraEu  RefundsMovedToAvailableSubtotalCardRegion2 = "intra-eu"
	RefundsMovedToAvailableSubtotalCardRegion2Domestic RefundsMovedToAvailableSubtotalCardRegion2 = "domestic"
	RefundsMovedToAvailableSubtotalCardRegion2Other    RefundsMovedToAvailableSubtotalCardRegion2 = "other"
)

func (e RefundsMovedToAvailableSubtotalCardRegion2) ToPointer() *RefundsMovedToAvailableSubtotalCardRegion2 {
	return &e
}
func (e *RefundsMovedToAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = RefundsMovedToAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsMovedToAvailableSubtotalCardRegion2: %v", v)
	}
}

// RefundsMovedToAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type RefundsMovedToAvailableSubtotalFeeType2 string

const (
	RefundsMovedToAvailableSubtotalFeeType2PaymentFee                                        RefundsMovedToAvailableSubtotalFeeType2 = "payment-fee"
	RefundsMovedToAvailableSubtotalFeeType2DirectDebitFailureFee                             RefundsMovedToAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	RefundsMovedToAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        RefundsMovedToAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	RefundsMovedToAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  RefundsMovedToAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	RefundsMovedToAvailableSubtotalFeeType2PartnerCommission                                 RefundsMovedToAvailableSubtotalFeeType2 = "partner-commission"
	RefundsMovedToAvailableSubtotalFeeType2ApplicationFee                                    RefundsMovedToAvailableSubtotalFeeType2 = "application-fee"
	RefundsMovedToAvailableSubtotalFeeType2CaptureFee                                        RefundsMovedToAvailableSubtotalFeeType2 = "capture-fee"
	RefundsMovedToAvailableSubtotalFeeType2RefundFee                                         RefundsMovedToAvailableSubtotalFeeType2 = "refund-fee"
	RefundsMovedToAvailableSubtotalFeeType2ChargebackFee                                     RefundsMovedToAvailableSubtotalFeeType2 = "chargeback-fee"
	RefundsMovedToAvailableSubtotalFeeType2PaymentNotificationFee                            RefundsMovedToAvailableSubtotalFeeType2 = "payment-notification-fee"
	RefundsMovedToAvailableSubtotalFeeType2TransferNotificationFee                           RefundsMovedToAvailableSubtotalFeeType2 = "transfer-notification-fee"
	RefundsMovedToAvailableSubtotalFeeType2PayoutFee                                         RefundsMovedToAvailableSubtotalFeeType2 = "payout-fee"
	RefundsMovedToAvailableSubtotalFeeType2FeeDiscount                                       RefundsMovedToAvailableSubtotalFeeType2 = "fee-discount"
	RefundsMovedToAvailableSubtotalFeeType2FeeReimbursement                                  RefundsMovedToAvailableSubtotalFeeType2 = "fee-reimbursement"
	RefundsMovedToAvailableSubtotalFeeType2PlatformVolumeFee                                 RefundsMovedToAvailableSubtotalFeeType2 = "platform-volume-fee"
	RefundsMovedToAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 RefundsMovedToAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	RefundsMovedToAvailableSubtotalFeeType2BalanceChargeFee                                  RefundsMovedToAvailableSubtotalFeeType2 = "balance-charge-fee"
	RefundsMovedToAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   RefundsMovedToAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	RefundsMovedToAvailableSubtotalFeeType2TerminalMonthlyFee                                RefundsMovedToAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	RefundsMovedToAvailableSubtotalFeeType2AcceptanceRiskFee                                 RefundsMovedToAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	RefundsMovedToAvailableSubtotalFeeType2TopUpFee                                          RefundsMovedToAvailableSubtotalFeeType2 = "top-up-fee"
	RefundsMovedToAvailableSubtotalFeeType2PaymentGatewayFee                                 RefundsMovedToAvailableSubtotalFeeType2 = "payment-gateway-fee"
	RefundsMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   RefundsMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	RefundsMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee RefundsMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	RefundsMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             RefundsMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	RefundsMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           RefundsMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	RefundsMovedToAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           RefundsMovedToAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e RefundsMovedToAvailableSubtotalFeeType2) ToPointer() *RefundsMovedToAvailableSubtotalFeeType2 {
	return &e
}
func (e *RefundsMovedToAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = RefundsMovedToAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsMovedToAvailableSubtotalFeeType2: %v", v)
	}
}

// RefundsMovedToAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type RefundsMovedToAvailableSubtotalPrepaymentPartType2 string

const (
	RefundsMovedToAvailableSubtotalPrepaymentPartType2Fee                     RefundsMovedToAvailableSubtotalPrepaymentPartType2 = "fee"
	RefundsMovedToAvailableSubtotalPrepaymentPartType2FeeReimbursement        RefundsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	RefundsMovedToAvailableSubtotalPrepaymentPartType2FeeDiscount             RefundsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	RefundsMovedToAvailableSubtotalPrepaymentPartType2FeeVat                  RefundsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	RefundsMovedToAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation RefundsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e RefundsMovedToAvailableSubtotalPrepaymentPartType2) ToPointer() *RefundsMovedToAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *RefundsMovedToAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = RefundsMovedToAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsMovedToAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// RefundsMovedToAvailableSubtotalTransactionType2 - Represents the transaction type
type RefundsMovedToAvailableSubtotalTransactionType2 string

const (
	RefundsMovedToAvailableSubtotalTransactionType2Payment                           RefundsMovedToAvailableSubtotalTransactionType2 = "payment"
	RefundsMovedToAvailableSubtotalTransactionType2SplitPayment                      RefundsMovedToAvailableSubtotalTransactionType2 = "split-payment"
	RefundsMovedToAvailableSubtotalTransactionType2FailedPayment                     RefundsMovedToAvailableSubtotalTransactionType2 = "failed-payment"
	RefundsMovedToAvailableSubtotalTransactionType2FailedPlatformSplitPayment        RefundsMovedToAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	RefundsMovedToAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    RefundsMovedToAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	RefundsMovedToAvailableSubtotalTransactionType2Capture                           RefundsMovedToAvailableSubtotalTransactionType2 = "capture"
	RefundsMovedToAvailableSubtotalTransactionType2SplitTransaction                  RefundsMovedToAvailableSubtotalTransactionType2 = "split-transaction"
	RefundsMovedToAvailableSubtotalTransactionType2Refund                            RefundsMovedToAvailableSubtotalTransactionType2 = "refund"
	RefundsMovedToAvailableSubtotalTransactionType2PlatformPaymentRefund             RefundsMovedToAvailableSubtotalTransactionType2 = "platform-payment-refund"
	RefundsMovedToAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     RefundsMovedToAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	RefundsMovedToAvailableSubtotalTransactionType2RefundCompensation                RefundsMovedToAvailableSubtotalTransactionType2 = "refund-compensation"
	RefundsMovedToAvailableSubtotalTransactionType2ReturnedRefundCompensation        RefundsMovedToAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	RefundsMovedToAvailableSubtotalTransactionType2ReturnedRefund                    RefundsMovedToAvailableSubtotalTransactionType2 = "returned-refund"
	RefundsMovedToAvailableSubtotalTransactionType2Chargeback                        RefundsMovedToAvailableSubtotalTransactionType2 = "chargeback"
	RefundsMovedToAvailableSubtotalTransactionType2ChargebackReversal                RefundsMovedToAvailableSubtotalTransactionType2 = "chargeback-reversal"
	RefundsMovedToAvailableSubtotalTransactionType2ChargebackCompensation            RefundsMovedToAvailableSubtotalTransactionType2 = "chargeback-compensation"
	RefundsMovedToAvailableSubtotalTransactionType2ReversedChargebackCompensation    RefundsMovedToAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	RefundsMovedToAvailableSubtotalTransactionType2PlatformPaymentChargeback         RefundsMovedToAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	RefundsMovedToAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback RefundsMovedToAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	RefundsMovedToAvailableSubtotalTransactionType2FeePrepayment                     RefundsMovedToAvailableSubtotalTransactionType2 = "fee-prepayment"
	RefundsMovedToAvailableSubtotalTransactionType2OutgoingTransfer                  RefundsMovedToAvailableSubtotalTransactionType2 = "outgoing-transfer"
	RefundsMovedToAvailableSubtotalTransactionType2IncomingTransfer                  RefundsMovedToAvailableSubtotalTransactionType2 = "incoming-transfer"
	RefundsMovedToAvailableSubtotalTransactionType2CanceledTransfer                  RefundsMovedToAvailableSubtotalTransactionType2 = "canceled-transfer"
	RefundsMovedToAvailableSubtotalTransactionType2ReturnedTransfer                  RefundsMovedToAvailableSubtotalTransactionType2 = "returned-transfer"
	RefundsMovedToAvailableSubtotalTransactionType2BalanceReserve                    RefundsMovedToAvailableSubtotalTransactionType2 = "balance-reserve"
	RefundsMovedToAvailableSubtotalTransactionType2BalanceReserveReturn              RefundsMovedToAvailableSubtotalTransactionType2 = "balance-reserve-return"
	RefundsMovedToAvailableSubtotalTransactionType2InvoiceRoundingCompensation       RefundsMovedToAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	RefundsMovedToAvailableSubtotalTransactionType2RollingReserveHold                RefundsMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	RefundsMovedToAvailableSubtotalTransactionType2RollingReserveRelease             RefundsMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	RefundsMovedToAvailableSubtotalTransactionType2BalanceCorrection                 RefundsMovedToAvailableSubtotalTransactionType2 = "balance-correction"
	RefundsMovedToAvailableSubtotalTransactionType2Repayment                         RefundsMovedToAvailableSubtotalTransactionType2 = "repayment"
	RefundsMovedToAvailableSubtotalTransactionType2Loan                              RefundsMovedToAvailableSubtotalTransactionType2 = "loan"
	RefundsMovedToAvailableSubtotalTransactionType2BalanceTopup                      RefundsMovedToAvailableSubtotalTransactionType2 = "balance-topup"
	RefundsMovedToAvailableSubtotalTransactionType2CashCollateralIssuance            RefundsMovedToAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	RefundsMovedToAvailableSubtotalTransactionType2CashCollateralRelease             RefundsMovedToAvailableSubtotalTransactionType2 = "cash-collateral-release"
	RefundsMovedToAvailableSubtotalTransactionType2PendingRollingReserve             RefundsMovedToAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	RefundsMovedToAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        RefundsMovedToAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	RefundsMovedToAvailableSubtotalTransactionType2HeldRollingReserve                RefundsMovedToAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	RefundsMovedToAvailableSubtotalTransactionType2ReleasedRollingReserve            RefundsMovedToAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e RefundsMovedToAvailableSubtotalTransactionType2) ToPointer() *RefundsMovedToAvailableSubtotalTransactionType2 {
	return &e
}
func (e *RefundsMovedToAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = RefundsMovedToAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsMovedToAvailableSubtotalTransactionType2: %v", v)
	}
}

type RefundsMovedToAvailableSubtotal2 struct {
	SubTotals []RefundsMovedToAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *RefundsMovedToAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *RefundsMovedToAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *RefundsMovedToAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *RefundsMovedToAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *RefundsMovedToAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *RefundsMovedToAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *RefundsMovedToAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *RefundsMovedToAvailableSubtotal2) GetSubTotals() []RefundsMovedToAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *RefundsMovedToAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *RefundsMovedToAvailableSubtotal2) GetMethod() *RefundsMovedToAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *RefundsMovedToAvailableSubtotal2) GetCardIssuer() *RefundsMovedToAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *RefundsMovedToAvailableSubtotal2) GetCardAudience() *RefundsMovedToAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *RefundsMovedToAvailableSubtotal2) GetCardRegion() *RefundsMovedToAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *RefundsMovedToAvailableSubtotal2) GetFeeType() *RefundsMovedToAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *RefundsMovedToAvailableSubtotal2) GetPrepaymentPartType() *RefundsMovedToAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *RefundsMovedToAvailableSubtotal2) GetTransactionType() *RefundsMovedToAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type RefundsMovedToAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *RefundsMovedToAvailableAmount     `json:"amount,omitempty"`
	Subtotals []RefundsMovedToAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *RefundsMovedToAvailable) GetAmount() *RefundsMovedToAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *RefundsMovedToAvailable) GetSubtotals() []RefundsMovedToAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// RefundsImmediatelyAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type RefundsImmediatelyAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *RefundsImmediatelyAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *RefundsImmediatelyAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// RefundsImmediatelyAvailableSubTotalMethod1 - Payment type of the transactions
type RefundsImmediatelyAvailableSubTotalMethod1 string

const (
	RefundsImmediatelyAvailableSubTotalMethod1Alma              RefundsImmediatelyAvailableSubTotalMethod1 = "alma"
	RefundsImmediatelyAvailableSubTotalMethod1Bacs              RefundsImmediatelyAvailableSubTotalMethod1 = "bacs"
	RefundsImmediatelyAvailableSubTotalMethod1Applepay          RefundsImmediatelyAvailableSubTotalMethod1 = "applepay"
	RefundsImmediatelyAvailableSubTotalMethod1Bancomatpay       RefundsImmediatelyAvailableSubTotalMethod1 = "bancomatpay"
	RefundsImmediatelyAvailableSubTotalMethod1Bancontact        RefundsImmediatelyAvailableSubTotalMethod1 = "bancontact"
	RefundsImmediatelyAvailableSubTotalMethod1Banktransfer      RefundsImmediatelyAvailableSubTotalMethod1 = "banktransfer"
	RefundsImmediatelyAvailableSubTotalMethod1Belfius           RefundsImmediatelyAvailableSubTotalMethod1 = "belfius"
	RefundsImmediatelyAvailableSubTotalMethod1Billie            RefundsImmediatelyAvailableSubTotalMethod1 = "billie"
	RefundsImmediatelyAvailableSubTotalMethod1Bizum             RefundsImmediatelyAvailableSubTotalMethod1 = "bizum"
	RefundsImmediatelyAvailableSubTotalMethod1Bitcoin           RefundsImmediatelyAvailableSubTotalMethod1 = "bitcoin"
	RefundsImmediatelyAvailableSubTotalMethod1Blik              RefundsImmediatelyAvailableSubTotalMethod1 = "blik"
	RefundsImmediatelyAvailableSubTotalMethod1Creditcard        RefundsImmediatelyAvailableSubTotalMethod1 = "creditcard"
	RefundsImmediatelyAvailableSubTotalMethod1Directdebit       RefundsImmediatelyAvailableSubTotalMethod1 = "directdebit"
	RefundsImmediatelyAvailableSubTotalMethod1Eps               RefundsImmediatelyAvailableSubTotalMethod1 = "eps"
	RefundsImmediatelyAvailableSubTotalMethod1Giftcard          RefundsImmediatelyAvailableSubTotalMethod1 = "giftcard"
	RefundsImmediatelyAvailableSubTotalMethod1Giropay           RefundsImmediatelyAvailableSubTotalMethod1 = "giropay"
	RefundsImmediatelyAvailableSubTotalMethod1Googlepay         RefundsImmediatelyAvailableSubTotalMethod1 = "googlepay"
	RefundsImmediatelyAvailableSubTotalMethod1Ideal             RefundsImmediatelyAvailableSubTotalMethod1 = "ideal"
	RefundsImmediatelyAvailableSubTotalMethod1In3               RefundsImmediatelyAvailableSubTotalMethod1 = "in3"
	RefundsImmediatelyAvailableSubTotalMethod1Inghomepay        RefundsImmediatelyAvailableSubTotalMethod1 = "inghomepay"
	RefundsImmediatelyAvailableSubTotalMethod1Kbc               RefundsImmediatelyAvailableSubTotalMethod1 = "kbc"
	RefundsImmediatelyAvailableSubTotalMethod1Klarnapaylater    RefundsImmediatelyAvailableSubTotalMethod1 = "klarnapaylater"
	RefundsImmediatelyAvailableSubTotalMethod1Klarnapaynow      RefundsImmediatelyAvailableSubTotalMethod1 = "klarnapaynow"
	RefundsImmediatelyAvailableSubTotalMethod1Klarnasliceit     RefundsImmediatelyAvailableSubTotalMethod1 = "klarnasliceit"
	RefundsImmediatelyAvailableSubTotalMethod1Klarna            RefundsImmediatelyAvailableSubTotalMethod1 = "klarna"
	RefundsImmediatelyAvailableSubTotalMethod1Mbway             RefundsImmediatelyAvailableSubTotalMethod1 = "mbway"
	RefundsImmediatelyAvailableSubTotalMethod1Multibanco        RefundsImmediatelyAvailableSubTotalMethod1 = "multibanco"
	RefundsImmediatelyAvailableSubTotalMethod1Mybank            RefundsImmediatelyAvailableSubTotalMethod1 = "mybank"
	RefundsImmediatelyAvailableSubTotalMethod1Paybybank         RefundsImmediatelyAvailableSubTotalMethod1 = "paybybank"
	RefundsImmediatelyAvailableSubTotalMethod1Payconiq          RefundsImmediatelyAvailableSubTotalMethod1 = "payconiq"
	RefundsImmediatelyAvailableSubTotalMethod1Paypal            RefundsImmediatelyAvailableSubTotalMethod1 = "paypal"
	RefundsImmediatelyAvailableSubTotalMethod1Paysafecard       RefundsImmediatelyAvailableSubTotalMethod1 = "paysafecard"
	RefundsImmediatelyAvailableSubTotalMethod1Przelewy24        RefundsImmediatelyAvailableSubTotalMethod1 = "przelewy24"
	RefundsImmediatelyAvailableSubTotalMethod1Riverty           RefundsImmediatelyAvailableSubTotalMethod1 = "riverty"
	RefundsImmediatelyAvailableSubTotalMethod1Satispay          RefundsImmediatelyAvailableSubTotalMethod1 = "satispay"
	RefundsImmediatelyAvailableSubTotalMethod1Podiumcadeaukaart RefundsImmediatelyAvailableSubTotalMethod1 = "podiumcadeaukaart"
	RefundsImmediatelyAvailableSubTotalMethod1Pointofsale       RefundsImmediatelyAvailableSubTotalMethod1 = "pointofsale"
	RefundsImmediatelyAvailableSubTotalMethod1Sofort            RefundsImmediatelyAvailableSubTotalMethod1 = "sofort"
	RefundsImmediatelyAvailableSubTotalMethod1Swish             RefundsImmediatelyAvailableSubTotalMethod1 = "swish"
	RefundsImmediatelyAvailableSubTotalMethod1Trustly           RefundsImmediatelyAvailableSubTotalMethod1 = "trustly"
	RefundsImmediatelyAvailableSubTotalMethod1Twint             RefundsImmediatelyAvailableSubTotalMethod1 = "twint"
	RefundsImmediatelyAvailableSubTotalMethod1Voucher           RefundsImmediatelyAvailableSubTotalMethod1 = "voucher"
)

func (e RefundsImmediatelyAvailableSubTotalMethod1) ToPointer() *RefundsImmediatelyAvailableSubTotalMethod1 {
	return &e
}
func (e *RefundsImmediatelyAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = RefundsImmediatelyAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsImmediatelyAvailableSubTotalMethod1: %v", v)
	}
}

// RefundsImmediatelyAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type RefundsImmediatelyAvailableSubTotalCardIssuer1 string

const (
	RefundsImmediatelyAvailableSubTotalCardIssuer1Amex          RefundsImmediatelyAvailableSubTotalCardIssuer1 = "amex"
	RefundsImmediatelyAvailableSubTotalCardIssuer1Maestro       RefundsImmediatelyAvailableSubTotalCardIssuer1 = "maestro"
	RefundsImmediatelyAvailableSubTotalCardIssuer1CarteBancaire RefundsImmediatelyAvailableSubTotalCardIssuer1 = "carte-bancaire"
	RefundsImmediatelyAvailableSubTotalCardIssuer1Other         RefundsImmediatelyAvailableSubTotalCardIssuer1 = "other"
)

func (e RefundsImmediatelyAvailableSubTotalCardIssuer1) ToPointer() *RefundsImmediatelyAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *RefundsImmediatelyAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = RefundsImmediatelyAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsImmediatelyAvailableSubTotalCardIssuer1: %v", v)
	}
}

// RefundsImmediatelyAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type RefundsImmediatelyAvailableSubTotalCardAudience1 string

const (
	RefundsImmediatelyAvailableSubTotalCardAudience1Corporate RefundsImmediatelyAvailableSubTotalCardAudience1 = "corporate"
	RefundsImmediatelyAvailableSubTotalCardAudience1Other     RefundsImmediatelyAvailableSubTotalCardAudience1 = "other"
)

func (e RefundsImmediatelyAvailableSubTotalCardAudience1) ToPointer() *RefundsImmediatelyAvailableSubTotalCardAudience1 {
	return &e
}
func (e *RefundsImmediatelyAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = RefundsImmediatelyAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsImmediatelyAvailableSubTotalCardAudience1: %v", v)
	}
}

// RefundsImmediatelyAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type RefundsImmediatelyAvailableSubTotalCardRegion1 string

const (
	RefundsImmediatelyAvailableSubTotalCardRegion1IntraEea RefundsImmediatelyAvailableSubTotalCardRegion1 = "intra-eea"
	RefundsImmediatelyAvailableSubTotalCardRegion1IntraEu  RefundsImmediatelyAvailableSubTotalCardRegion1 = "intra-eu"
	RefundsImmediatelyAvailableSubTotalCardRegion1Domestic RefundsImmediatelyAvailableSubTotalCardRegion1 = "domestic"
	RefundsImmediatelyAvailableSubTotalCardRegion1Other    RefundsImmediatelyAvailableSubTotalCardRegion1 = "other"
)

func (e RefundsImmediatelyAvailableSubTotalCardRegion1) ToPointer() *RefundsImmediatelyAvailableSubTotalCardRegion1 {
	return &e
}
func (e *RefundsImmediatelyAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = RefundsImmediatelyAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsImmediatelyAvailableSubTotalCardRegion1: %v", v)
	}
}

// RefundsImmediatelyAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type RefundsImmediatelyAvailableSubTotalFeeType1 string

const (
	RefundsImmediatelyAvailableSubTotalFeeType1PaymentFee                                        RefundsImmediatelyAvailableSubTotalFeeType1 = "payment-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1DirectDebitFailureFee                             RefundsImmediatelyAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        RefundsImmediatelyAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  RefundsImmediatelyAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1PartnerCommission                                 RefundsImmediatelyAvailableSubTotalFeeType1 = "partner-commission"
	RefundsImmediatelyAvailableSubTotalFeeType1ApplicationFee                                    RefundsImmediatelyAvailableSubTotalFeeType1 = "application-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1CaptureFee                                        RefundsImmediatelyAvailableSubTotalFeeType1 = "capture-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1RefundFee                                         RefundsImmediatelyAvailableSubTotalFeeType1 = "refund-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1ChargebackFee                                     RefundsImmediatelyAvailableSubTotalFeeType1 = "chargeback-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1PaymentNotificationFee                            RefundsImmediatelyAvailableSubTotalFeeType1 = "payment-notification-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1TransferNotificationFee                           RefundsImmediatelyAvailableSubTotalFeeType1 = "transfer-notification-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1PayoutFee                                         RefundsImmediatelyAvailableSubTotalFeeType1 = "payout-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1FeeDiscount                                       RefundsImmediatelyAvailableSubTotalFeeType1 = "fee-discount"
	RefundsImmediatelyAvailableSubTotalFeeType1FeeReimbursement                                  RefundsImmediatelyAvailableSubTotalFeeType1 = "fee-reimbursement"
	RefundsImmediatelyAvailableSubTotalFeeType1PlatformVolumeFee                                 RefundsImmediatelyAvailableSubTotalFeeType1 = "platform-volume-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 RefundsImmediatelyAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1BalanceChargeFee                                  RefundsImmediatelyAvailableSubTotalFeeType1 = "balance-charge-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   RefundsImmediatelyAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1TerminalMonthlyFee                                RefundsImmediatelyAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1AcceptanceRiskFee                                 RefundsImmediatelyAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1TopUpFee                                          RefundsImmediatelyAvailableSubTotalFeeType1 = "top-up-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1PaymentGatewayFee                                 RefundsImmediatelyAvailableSubTotalFeeType1 = "payment-gateway-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   RefundsImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee RefundsImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             RefundsImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           RefundsImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	RefundsImmediatelyAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           RefundsImmediatelyAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e RefundsImmediatelyAvailableSubTotalFeeType1) ToPointer() *RefundsImmediatelyAvailableSubTotalFeeType1 {
	return &e
}
func (e *RefundsImmediatelyAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = RefundsImmediatelyAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsImmediatelyAvailableSubTotalFeeType1: %v", v)
	}
}

// RefundsImmediatelyAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type RefundsImmediatelyAvailableSubTotalPrepaymentPartType1 string

const (
	RefundsImmediatelyAvailableSubTotalPrepaymentPartType1Fee                     RefundsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee"
	RefundsImmediatelyAvailableSubTotalPrepaymentPartType1FeeReimbursement        RefundsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	RefundsImmediatelyAvailableSubTotalPrepaymentPartType1FeeDiscount             RefundsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	RefundsImmediatelyAvailableSubTotalPrepaymentPartType1FeeVat                  RefundsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	RefundsImmediatelyAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation RefundsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e RefundsImmediatelyAvailableSubTotalPrepaymentPartType1) ToPointer() *RefundsImmediatelyAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *RefundsImmediatelyAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = RefundsImmediatelyAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsImmediatelyAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// RefundsImmediatelyAvailableSubTotalTransactionType1 - Represents the transaction type
type RefundsImmediatelyAvailableSubTotalTransactionType1 string

const (
	RefundsImmediatelyAvailableSubTotalTransactionType1Payment                           RefundsImmediatelyAvailableSubTotalTransactionType1 = "payment"
	RefundsImmediatelyAvailableSubTotalTransactionType1SplitPayment                      RefundsImmediatelyAvailableSubTotalTransactionType1 = "split-payment"
	RefundsImmediatelyAvailableSubTotalTransactionType1FailedPayment                     RefundsImmediatelyAvailableSubTotalTransactionType1 = "failed-payment"
	RefundsImmediatelyAvailableSubTotalTransactionType1FailedPlatformSplitPayment        RefundsImmediatelyAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	RefundsImmediatelyAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    RefundsImmediatelyAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	RefundsImmediatelyAvailableSubTotalTransactionType1Capture                           RefundsImmediatelyAvailableSubTotalTransactionType1 = "capture"
	RefundsImmediatelyAvailableSubTotalTransactionType1SplitTransaction                  RefundsImmediatelyAvailableSubTotalTransactionType1 = "split-transaction"
	RefundsImmediatelyAvailableSubTotalTransactionType1Refund                            RefundsImmediatelyAvailableSubTotalTransactionType1 = "refund"
	RefundsImmediatelyAvailableSubTotalTransactionType1PlatformPaymentRefund             RefundsImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-refund"
	RefundsImmediatelyAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     RefundsImmediatelyAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	RefundsImmediatelyAvailableSubTotalTransactionType1RefundCompensation                RefundsImmediatelyAvailableSubTotalTransactionType1 = "refund-compensation"
	RefundsImmediatelyAvailableSubTotalTransactionType1ReturnedRefundCompensation        RefundsImmediatelyAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	RefundsImmediatelyAvailableSubTotalTransactionType1ReturnedRefund                    RefundsImmediatelyAvailableSubTotalTransactionType1 = "returned-refund"
	RefundsImmediatelyAvailableSubTotalTransactionType1Chargeback                        RefundsImmediatelyAvailableSubTotalTransactionType1 = "chargeback"
	RefundsImmediatelyAvailableSubTotalTransactionType1ChargebackReversal                RefundsImmediatelyAvailableSubTotalTransactionType1 = "chargeback-reversal"
	RefundsImmediatelyAvailableSubTotalTransactionType1ChargebackCompensation            RefundsImmediatelyAvailableSubTotalTransactionType1 = "chargeback-compensation"
	RefundsImmediatelyAvailableSubTotalTransactionType1ReversedChargebackCompensation    RefundsImmediatelyAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	RefundsImmediatelyAvailableSubTotalTransactionType1PlatformPaymentChargeback         RefundsImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	RefundsImmediatelyAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback RefundsImmediatelyAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	RefundsImmediatelyAvailableSubTotalTransactionType1FeePrepayment                     RefundsImmediatelyAvailableSubTotalTransactionType1 = "fee-prepayment"
	RefundsImmediatelyAvailableSubTotalTransactionType1OutgoingTransfer                  RefundsImmediatelyAvailableSubTotalTransactionType1 = "outgoing-transfer"
	RefundsImmediatelyAvailableSubTotalTransactionType1IncomingTransfer                  RefundsImmediatelyAvailableSubTotalTransactionType1 = "incoming-transfer"
	RefundsImmediatelyAvailableSubTotalTransactionType1CanceledTransfer                  RefundsImmediatelyAvailableSubTotalTransactionType1 = "canceled-transfer"
	RefundsImmediatelyAvailableSubTotalTransactionType1ReturnedTransfer                  RefundsImmediatelyAvailableSubTotalTransactionType1 = "returned-transfer"
	RefundsImmediatelyAvailableSubTotalTransactionType1BalanceReserve                    RefundsImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve"
	RefundsImmediatelyAvailableSubTotalTransactionType1BalanceReserveReturn              RefundsImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve-return"
	RefundsImmediatelyAvailableSubTotalTransactionType1InvoiceRoundingCompensation       RefundsImmediatelyAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	RefundsImmediatelyAvailableSubTotalTransactionType1RollingReserveHold                RefundsImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	RefundsImmediatelyAvailableSubTotalTransactionType1RollingReserveRelease             RefundsImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	RefundsImmediatelyAvailableSubTotalTransactionType1BalanceCorrection                 RefundsImmediatelyAvailableSubTotalTransactionType1 = "balance-correction"
	RefundsImmediatelyAvailableSubTotalTransactionType1Repayment                         RefundsImmediatelyAvailableSubTotalTransactionType1 = "repayment"
	RefundsImmediatelyAvailableSubTotalTransactionType1Loan                              RefundsImmediatelyAvailableSubTotalTransactionType1 = "loan"
	RefundsImmediatelyAvailableSubTotalTransactionType1BalanceTopup                      RefundsImmediatelyAvailableSubTotalTransactionType1 = "balance-topup"
	RefundsImmediatelyAvailableSubTotalTransactionType1CashCollateralIssuance            RefundsImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	RefundsImmediatelyAvailableSubTotalTransactionType1CashCollateralRelease             RefundsImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-release"
	RefundsImmediatelyAvailableSubTotalTransactionType1PendingRollingReserve             RefundsImmediatelyAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	RefundsImmediatelyAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        RefundsImmediatelyAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	RefundsImmediatelyAvailableSubTotalTransactionType1HeldRollingReserve                RefundsImmediatelyAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	RefundsImmediatelyAvailableSubTotalTransactionType1ReleasedRollingReserve            RefundsImmediatelyAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e RefundsImmediatelyAvailableSubTotalTransactionType1) ToPointer() *RefundsImmediatelyAvailableSubTotalTransactionType1 {
	return &e
}
func (e *RefundsImmediatelyAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = RefundsImmediatelyAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsImmediatelyAvailableSubTotalTransactionType1: %v", v)
	}
}

type RefundsImmediatelyAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *RefundsImmediatelyAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *RefundsImmediatelyAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *RefundsImmediatelyAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *RefundsImmediatelyAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *RefundsImmediatelyAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *RefundsImmediatelyAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *RefundsImmediatelyAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *RefundsImmediatelyAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *RefundsImmediatelyAvailableSubTotal1) GetMethod() *RefundsImmediatelyAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *RefundsImmediatelyAvailableSubTotal1) GetCardIssuer() *RefundsImmediatelyAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *RefundsImmediatelyAvailableSubTotal1) GetCardAudience() *RefundsImmediatelyAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *RefundsImmediatelyAvailableSubTotal1) GetCardRegion() *RefundsImmediatelyAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *RefundsImmediatelyAvailableSubTotal1) GetFeeType() *RefundsImmediatelyAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *RefundsImmediatelyAvailableSubTotal1) GetPrepaymentPartType() *RefundsImmediatelyAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *RefundsImmediatelyAvailableSubTotal1) GetTransactionType() *RefundsImmediatelyAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// RefundsImmediatelyAvailableSubtotalMethod2 - Payment type of the transactions
type RefundsImmediatelyAvailableSubtotalMethod2 string

const (
	RefundsImmediatelyAvailableSubtotalMethod2Alma              RefundsImmediatelyAvailableSubtotalMethod2 = "alma"
	RefundsImmediatelyAvailableSubtotalMethod2Bacs              RefundsImmediatelyAvailableSubtotalMethod2 = "bacs"
	RefundsImmediatelyAvailableSubtotalMethod2Applepay          RefundsImmediatelyAvailableSubtotalMethod2 = "applepay"
	RefundsImmediatelyAvailableSubtotalMethod2Bancomatpay       RefundsImmediatelyAvailableSubtotalMethod2 = "bancomatpay"
	RefundsImmediatelyAvailableSubtotalMethod2Bancontact        RefundsImmediatelyAvailableSubtotalMethod2 = "bancontact"
	RefundsImmediatelyAvailableSubtotalMethod2Banktransfer      RefundsImmediatelyAvailableSubtotalMethod2 = "banktransfer"
	RefundsImmediatelyAvailableSubtotalMethod2Belfius           RefundsImmediatelyAvailableSubtotalMethod2 = "belfius"
	RefundsImmediatelyAvailableSubtotalMethod2Billie            RefundsImmediatelyAvailableSubtotalMethod2 = "billie"
	RefundsImmediatelyAvailableSubtotalMethod2Bizum             RefundsImmediatelyAvailableSubtotalMethod2 = "bizum"
	RefundsImmediatelyAvailableSubtotalMethod2Bitcoin           RefundsImmediatelyAvailableSubtotalMethod2 = "bitcoin"
	RefundsImmediatelyAvailableSubtotalMethod2Blik              RefundsImmediatelyAvailableSubtotalMethod2 = "blik"
	RefundsImmediatelyAvailableSubtotalMethod2Creditcard        RefundsImmediatelyAvailableSubtotalMethod2 = "creditcard"
	RefundsImmediatelyAvailableSubtotalMethod2Directdebit       RefundsImmediatelyAvailableSubtotalMethod2 = "directdebit"
	RefundsImmediatelyAvailableSubtotalMethod2Eps               RefundsImmediatelyAvailableSubtotalMethod2 = "eps"
	RefundsImmediatelyAvailableSubtotalMethod2Giftcard          RefundsImmediatelyAvailableSubtotalMethod2 = "giftcard"
	RefundsImmediatelyAvailableSubtotalMethod2Giropay           RefundsImmediatelyAvailableSubtotalMethod2 = "giropay"
	RefundsImmediatelyAvailableSubtotalMethod2Googlepay         RefundsImmediatelyAvailableSubtotalMethod2 = "googlepay"
	RefundsImmediatelyAvailableSubtotalMethod2Ideal             RefundsImmediatelyAvailableSubtotalMethod2 = "ideal"
	RefundsImmediatelyAvailableSubtotalMethod2In3               RefundsImmediatelyAvailableSubtotalMethod2 = "in3"
	RefundsImmediatelyAvailableSubtotalMethod2Inghomepay        RefundsImmediatelyAvailableSubtotalMethod2 = "inghomepay"
	RefundsImmediatelyAvailableSubtotalMethod2Kbc               RefundsImmediatelyAvailableSubtotalMethod2 = "kbc"
	RefundsImmediatelyAvailableSubtotalMethod2Klarnapaylater    RefundsImmediatelyAvailableSubtotalMethod2 = "klarnapaylater"
	RefundsImmediatelyAvailableSubtotalMethod2Klarnapaynow      RefundsImmediatelyAvailableSubtotalMethod2 = "klarnapaynow"
	RefundsImmediatelyAvailableSubtotalMethod2Klarnasliceit     RefundsImmediatelyAvailableSubtotalMethod2 = "klarnasliceit"
	RefundsImmediatelyAvailableSubtotalMethod2Klarna            RefundsImmediatelyAvailableSubtotalMethod2 = "klarna"
	RefundsImmediatelyAvailableSubtotalMethod2Mbway             RefundsImmediatelyAvailableSubtotalMethod2 = "mbway"
	RefundsImmediatelyAvailableSubtotalMethod2Multibanco        RefundsImmediatelyAvailableSubtotalMethod2 = "multibanco"
	RefundsImmediatelyAvailableSubtotalMethod2Mybank            RefundsImmediatelyAvailableSubtotalMethod2 = "mybank"
	RefundsImmediatelyAvailableSubtotalMethod2Paybybank         RefundsImmediatelyAvailableSubtotalMethod2 = "paybybank"
	RefundsImmediatelyAvailableSubtotalMethod2Payconiq          RefundsImmediatelyAvailableSubtotalMethod2 = "payconiq"
	RefundsImmediatelyAvailableSubtotalMethod2Paypal            RefundsImmediatelyAvailableSubtotalMethod2 = "paypal"
	RefundsImmediatelyAvailableSubtotalMethod2Paysafecard       RefundsImmediatelyAvailableSubtotalMethod2 = "paysafecard"
	RefundsImmediatelyAvailableSubtotalMethod2Przelewy24        RefundsImmediatelyAvailableSubtotalMethod2 = "przelewy24"
	RefundsImmediatelyAvailableSubtotalMethod2Riverty           RefundsImmediatelyAvailableSubtotalMethod2 = "riverty"
	RefundsImmediatelyAvailableSubtotalMethod2Satispay          RefundsImmediatelyAvailableSubtotalMethod2 = "satispay"
	RefundsImmediatelyAvailableSubtotalMethod2Podiumcadeaukaart RefundsImmediatelyAvailableSubtotalMethod2 = "podiumcadeaukaart"
	RefundsImmediatelyAvailableSubtotalMethod2Pointofsale       RefundsImmediatelyAvailableSubtotalMethod2 = "pointofsale"
	RefundsImmediatelyAvailableSubtotalMethod2Sofort            RefundsImmediatelyAvailableSubtotalMethod2 = "sofort"
	RefundsImmediatelyAvailableSubtotalMethod2Swish             RefundsImmediatelyAvailableSubtotalMethod2 = "swish"
	RefundsImmediatelyAvailableSubtotalMethod2Trustly           RefundsImmediatelyAvailableSubtotalMethod2 = "trustly"
	RefundsImmediatelyAvailableSubtotalMethod2Twint             RefundsImmediatelyAvailableSubtotalMethod2 = "twint"
	RefundsImmediatelyAvailableSubtotalMethod2Voucher           RefundsImmediatelyAvailableSubtotalMethod2 = "voucher"
)

func (e RefundsImmediatelyAvailableSubtotalMethod2) ToPointer() *RefundsImmediatelyAvailableSubtotalMethod2 {
	return &e
}
func (e *RefundsImmediatelyAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = RefundsImmediatelyAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsImmediatelyAvailableSubtotalMethod2: %v", v)
	}
}

// RefundsImmediatelyAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type RefundsImmediatelyAvailableSubtotalCardIssuer2 string

const (
	RefundsImmediatelyAvailableSubtotalCardIssuer2Amex          RefundsImmediatelyAvailableSubtotalCardIssuer2 = "amex"
	RefundsImmediatelyAvailableSubtotalCardIssuer2Maestro       RefundsImmediatelyAvailableSubtotalCardIssuer2 = "maestro"
	RefundsImmediatelyAvailableSubtotalCardIssuer2CarteBancaire RefundsImmediatelyAvailableSubtotalCardIssuer2 = "carte-bancaire"
	RefundsImmediatelyAvailableSubtotalCardIssuer2Other         RefundsImmediatelyAvailableSubtotalCardIssuer2 = "other"
)

func (e RefundsImmediatelyAvailableSubtotalCardIssuer2) ToPointer() *RefundsImmediatelyAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *RefundsImmediatelyAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = RefundsImmediatelyAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsImmediatelyAvailableSubtotalCardIssuer2: %v", v)
	}
}

// RefundsImmediatelyAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type RefundsImmediatelyAvailableSubtotalCardAudience2 string

const (
	RefundsImmediatelyAvailableSubtotalCardAudience2Corporate RefundsImmediatelyAvailableSubtotalCardAudience2 = "corporate"
	RefundsImmediatelyAvailableSubtotalCardAudience2Other     RefundsImmediatelyAvailableSubtotalCardAudience2 = "other"
)

func (e RefundsImmediatelyAvailableSubtotalCardAudience2) ToPointer() *RefundsImmediatelyAvailableSubtotalCardAudience2 {
	return &e
}
func (e *RefundsImmediatelyAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = RefundsImmediatelyAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsImmediatelyAvailableSubtotalCardAudience2: %v", v)
	}
}

// RefundsImmediatelyAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type RefundsImmediatelyAvailableSubtotalCardRegion2 string

const (
	RefundsImmediatelyAvailableSubtotalCardRegion2IntraEea RefundsImmediatelyAvailableSubtotalCardRegion2 = "intra-eea"
	RefundsImmediatelyAvailableSubtotalCardRegion2IntraEu  RefundsImmediatelyAvailableSubtotalCardRegion2 = "intra-eu"
	RefundsImmediatelyAvailableSubtotalCardRegion2Domestic RefundsImmediatelyAvailableSubtotalCardRegion2 = "domestic"
	RefundsImmediatelyAvailableSubtotalCardRegion2Other    RefundsImmediatelyAvailableSubtotalCardRegion2 = "other"
)

func (e RefundsImmediatelyAvailableSubtotalCardRegion2) ToPointer() *RefundsImmediatelyAvailableSubtotalCardRegion2 {
	return &e
}
func (e *RefundsImmediatelyAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = RefundsImmediatelyAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsImmediatelyAvailableSubtotalCardRegion2: %v", v)
	}
}

// RefundsImmediatelyAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type RefundsImmediatelyAvailableSubtotalFeeType2 string

const (
	RefundsImmediatelyAvailableSubtotalFeeType2PaymentFee                                        RefundsImmediatelyAvailableSubtotalFeeType2 = "payment-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2DirectDebitFailureFee                             RefundsImmediatelyAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        RefundsImmediatelyAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  RefundsImmediatelyAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2PartnerCommission                                 RefundsImmediatelyAvailableSubtotalFeeType2 = "partner-commission"
	RefundsImmediatelyAvailableSubtotalFeeType2ApplicationFee                                    RefundsImmediatelyAvailableSubtotalFeeType2 = "application-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2CaptureFee                                        RefundsImmediatelyAvailableSubtotalFeeType2 = "capture-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2RefundFee                                         RefundsImmediatelyAvailableSubtotalFeeType2 = "refund-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2ChargebackFee                                     RefundsImmediatelyAvailableSubtotalFeeType2 = "chargeback-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2PaymentNotificationFee                            RefundsImmediatelyAvailableSubtotalFeeType2 = "payment-notification-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2TransferNotificationFee                           RefundsImmediatelyAvailableSubtotalFeeType2 = "transfer-notification-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2PayoutFee                                         RefundsImmediatelyAvailableSubtotalFeeType2 = "payout-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2FeeDiscount                                       RefundsImmediatelyAvailableSubtotalFeeType2 = "fee-discount"
	RefundsImmediatelyAvailableSubtotalFeeType2FeeReimbursement                                  RefundsImmediatelyAvailableSubtotalFeeType2 = "fee-reimbursement"
	RefundsImmediatelyAvailableSubtotalFeeType2PlatformVolumeFee                                 RefundsImmediatelyAvailableSubtotalFeeType2 = "platform-volume-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 RefundsImmediatelyAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2BalanceChargeFee                                  RefundsImmediatelyAvailableSubtotalFeeType2 = "balance-charge-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   RefundsImmediatelyAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2TerminalMonthlyFee                                RefundsImmediatelyAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2AcceptanceRiskFee                                 RefundsImmediatelyAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2TopUpFee                                          RefundsImmediatelyAvailableSubtotalFeeType2 = "top-up-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2PaymentGatewayFee                                 RefundsImmediatelyAvailableSubtotalFeeType2 = "payment-gateway-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   RefundsImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee RefundsImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             RefundsImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           RefundsImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	RefundsImmediatelyAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           RefundsImmediatelyAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e RefundsImmediatelyAvailableSubtotalFeeType2) ToPointer() *RefundsImmediatelyAvailableSubtotalFeeType2 {
	return &e
}
func (e *RefundsImmediatelyAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = RefundsImmediatelyAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsImmediatelyAvailableSubtotalFeeType2: %v", v)
	}
}

// RefundsImmediatelyAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type RefundsImmediatelyAvailableSubtotalPrepaymentPartType2 string

const (
	RefundsImmediatelyAvailableSubtotalPrepaymentPartType2Fee                     RefundsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee"
	RefundsImmediatelyAvailableSubtotalPrepaymentPartType2FeeReimbursement        RefundsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	RefundsImmediatelyAvailableSubtotalPrepaymentPartType2FeeDiscount             RefundsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	RefundsImmediatelyAvailableSubtotalPrepaymentPartType2FeeVat                  RefundsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	RefundsImmediatelyAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation RefundsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e RefundsImmediatelyAvailableSubtotalPrepaymentPartType2) ToPointer() *RefundsImmediatelyAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *RefundsImmediatelyAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = RefundsImmediatelyAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsImmediatelyAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// RefundsImmediatelyAvailableSubtotalTransactionType2 - Represents the transaction type
type RefundsImmediatelyAvailableSubtotalTransactionType2 string

const (
	RefundsImmediatelyAvailableSubtotalTransactionType2Payment                           RefundsImmediatelyAvailableSubtotalTransactionType2 = "payment"
	RefundsImmediatelyAvailableSubtotalTransactionType2SplitPayment                      RefundsImmediatelyAvailableSubtotalTransactionType2 = "split-payment"
	RefundsImmediatelyAvailableSubtotalTransactionType2FailedPayment                     RefundsImmediatelyAvailableSubtotalTransactionType2 = "failed-payment"
	RefundsImmediatelyAvailableSubtotalTransactionType2FailedPlatformSplitPayment        RefundsImmediatelyAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	RefundsImmediatelyAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    RefundsImmediatelyAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	RefundsImmediatelyAvailableSubtotalTransactionType2Capture                           RefundsImmediatelyAvailableSubtotalTransactionType2 = "capture"
	RefundsImmediatelyAvailableSubtotalTransactionType2SplitTransaction                  RefundsImmediatelyAvailableSubtotalTransactionType2 = "split-transaction"
	RefundsImmediatelyAvailableSubtotalTransactionType2Refund                            RefundsImmediatelyAvailableSubtotalTransactionType2 = "refund"
	RefundsImmediatelyAvailableSubtotalTransactionType2PlatformPaymentRefund             RefundsImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-refund"
	RefundsImmediatelyAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     RefundsImmediatelyAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	RefundsImmediatelyAvailableSubtotalTransactionType2RefundCompensation                RefundsImmediatelyAvailableSubtotalTransactionType2 = "refund-compensation"
	RefundsImmediatelyAvailableSubtotalTransactionType2ReturnedRefundCompensation        RefundsImmediatelyAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	RefundsImmediatelyAvailableSubtotalTransactionType2ReturnedRefund                    RefundsImmediatelyAvailableSubtotalTransactionType2 = "returned-refund"
	RefundsImmediatelyAvailableSubtotalTransactionType2Chargeback                        RefundsImmediatelyAvailableSubtotalTransactionType2 = "chargeback"
	RefundsImmediatelyAvailableSubtotalTransactionType2ChargebackReversal                RefundsImmediatelyAvailableSubtotalTransactionType2 = "chargeback-reversal"
	RefundsImmediatelyAvailableSubtotalTransactionType2ChargebackCompensation            RefundsImmediatelyAvailableSubtotalTransactionType2 = "chargeback-compensation"
	RefundsImmediatelyAvailableSubtotalTransactionType2ReversedChargebackCompensation    RefundsImmediatelyAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	RefundsImmediatelyAvailableSubtotalTransactionType2PlatformPaymentChargeback         RefundsImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	RefundsImmediatelyAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback RefundsImmediatelyAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	RefundsImmediatelyAvailableSubtotalTransactionType2FeePrepayment                     RefundsImmediatelyAvailableSubtotalTransactionType2 = "fee-prepayment"
	RefundsImmediatelyAvailableSubtotalTransactionType2OutgoingTransfer                  RefundsImmediatelyAvailableSubtotalTransactionType2 = "outgoing-transfer"
	RefundsImmediatelyAvailableSubtotalTransactionType2IncomingTransfer                  RefundsImmediatelyAvailableSubtotalTransactionType2 = "incoming-transfer"
	RefundsImmediatelyAvailableSubtotalTransactionType2CanceledTransfer                  RefundsImmediatelyAvailableSubtotalTransactionType2 = "canceled-transfer"
	RefundsImmediatelyAvailableSubtotalTransactionType2ReturnedTransfer                  RefundsImmediatelyAvailableSubtotalTransactionType2 = "returned-transfer"
	RefundsImmediatelyAvailableSubtotalTransactionType2BalanceReserve                    RefundsImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve"
	RefundsImmediatelyAvailableSubtotalTransactionType2BalanceReserveReturn              RefundsImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve-return"
	RefundsImmediatelyAvailableSubtotalTransactionType2InvoiceRoundingCompensation       RefundsImmediatelyAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	RefundsImmediatelyAvailableSubtotalTransactionType2RollingReserveHold                RefundsImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	RefundsImmediatelyAvailableSubtotalTransactionType2RollingReserveRelease             RefundsImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	RefundsImmediatelyAvailableSubtotalTransactionType2BalanceCorrection                 RefundsImmediatelyAvailableSubtotalTransactionType2 = "balance-correction"
	RefundsImmediatelyAvailableSubtotalTransactionType2Repayment                         RefundsImmediatelyAvailableSubtotalTransactionType2 = "repayment"
	RefundsImmediatelyAvailableSubtotalTransactionType2Loan                              RefundsImmediatelyAvailableSubtotalTransactionType2 = "loan"
	RefundsImmediatelyAvailableSubtotalTransactionType2BalanceTopup                      RefundsImmediatelyAvailableSubtotalTransactionType2 = "balance-topup"
	RefundsImmediatelyAvailableSubtotalTransactionType2CashCollateralIssuance            RefundsImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	RefundsImmediatelyAvailableSubtotalTransactionType2CashCollateralRelease             RefundsImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-release"
	RefundsImmediatelyAvailableSubtotalTransactionType2PendingRollingReserve             RefundsImmediatelyAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	RefundsImmediatelyAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        RefundsImmediatelyAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	RefundsImmediatelyAvailableSubtotalTransactionType2HeldRollingReserve                RefundsImmediatelyAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	RefundsImmediatelyAvailableSubtotalTransactionType2ReleasedRollingReserve            RefundsImmediatelyAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e RefundsImmediatelyAvailableSubtotalTransactionType2) ToPointer() *RefundsImmediatelyAvailableSubtotalTransactionType2 {
	return &e
}
func (e *RefundsImmediatelyAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = RefundsImmediatelyAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RefundsImmediatelyAvailableSubtotalTransactionType2: %v", v)
	}
}

type RefundsImmediatelyAvailableSubtotal2 struct {
	SubTotals []RefundsImmediatelyAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *RefundsImmediatelyAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *RefundsImmediatelyAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *RefundsImmediatelyAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *RefundsImmediatelyAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *RefundsImmediatelyAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *RefundsImmediatelyAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *RefundsImmediatelyAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *RefundsImmediatelyAvailableSubtotal2) GetSubTotals() []RefundsImmediatelyAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *RefundsImmediatelyAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *RefundsImmediatelyAvailableSubtotal2) GetMethod() *RefundsImmediatelyAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *RefundsImmediatelyAvailableSubtotal2) GetCardIssuer() *RefundsImmediatelyAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *RefundsImmediatelyAvailableSubtotal2) GetCardAudience() *RefundsImmediatelyAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *RefundsImmediatelyAvailableSubtotal2) GetCardRegion() *RefundsImmediatelyAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *RefundsImmediatelyAvailableSubtotal2) GetFeeType() *RefundsImmediatelyAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *RefundsImmediatelyAvailableSubtotal2) GetPrepaymentPartType() *RefundsImmediatelyAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *RefundsImmediatelyAvailableSubtotal2) GetTransactionType() *RefundsImmediatelyAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type RefundsImmediatelyAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *RefundsImmediatelyAvailableAmount     `json:"amount,omitempty"`
	Subtotals []RefundsImmediatelyAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *RefundsImmediatelyAvailable) GetAmount() *RefundsImmediatelyAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *RefundsImmediatelyAvailable) GetSubtotals() []RefundsImmediatelyAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// GetBalanceReportRefunds - Only available on `transaction-categories` grouping.
type GetBalanceReportRefunds struct {
	Pending              *RefundsPending              `json:"pending,omitempty"`
	MovedToAvailable     *RefundsMovedToAvailable     `json:"movedToAvailable,omitempty"`
	ImmediatelyAvailable *RefundsImmediatelyAvailable `json:"immediatelyAvailable,omitempty"`
}

func (o *GetBalanceReportRefunds) GetPending() *RefundsPending {
	if o == nil {
		return nil
	}
	return o.Pending
}

func (o *GetBalanceReportRefunds) GetMovedToAvailable() *RefundsMovedToAvailable {
	if o == nil {
		return nil
	}
	return o.MovedToAvailable
}

func (o *GetBalanceReportRefunds) GetImmediatelyAvailable() *RefundsImmediatelyAvailable {
	if o == nil {
		return nil
	}
	return o.ImmediatelyAvailable
}

// ChargebacksPendingAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type ChargebacksPendingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ChargebacksPendingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ChargebacksPendingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ChargebacksPendingSubTotalMethod1 - Payment type of the transactions
type ChargebacksPendingSubTotalMethod1 string

const (
	ChargebacksPendingSubTotalMethod1Alma              ChargebacksPendingSubTotalMethod1 = "alma"
	ChargebacksPendingSubTotalMethod1Bacs              ChargebacksPendingSubTotalMethod1 = "bacs"
	ChargebacksPendingSubTotalMethod1Applepay          ChargebacksPendingSubTotalMethod1 = "applepay"
	ChargebacksPendingSubTotalMethod1Bancomatpay       ChargebacksPendingSubTotalMethod1 = "bancomatpay"
	ChargebacksPendingSubTotalMethod1Bancontact        ChargebacksPendingSubTotalMethod1 = "bancontact"
	ChargebacksPendingSubTotalMethod1Banktransfer      ChargebacksPendingSubTotalMethod1 = "banktransfer"
	ChargebacksPendingSubTotalMethod1Belfius           ChargebacksPendingSubTotalMethod1 = "belfius"
	ChargebacksPendingSubTotalMethod1Billie            ChargebacksPendingSubTotalMethod1 = "billie"
	ChargebacksPendingSubTotalMethod1Bizum             ChargebacksPendingSubTotalMethod1 = "bizum"
	ChargebacksPendingSubTotalMethod1Bitcoin           ChargebacksPendingSubTotalMethod1 = "bitcoin"
	ChargebacksPendingSubTotalMethod1Blik              ChargebacksPendingSubTotalMethod1 = "blik"
	ChargebacksPendingSubTotalMethod1Creditcard        ChargebacksPendingSubTotalMethod1 = "creditcard"
	ChargebacksPendingSubTotalMethod1Directdebit       ChargebacksPendingSubTotalMethod1 = "directdebit"
	ChargebacksPendingSubTotalMethod1Eps               ChargebacksPendingSubTotalMethod1 = "eps"
	ChargebacksPendingSubTotalMethod1Giftcard          ChargebacksPendingSubTotalMethod1 = "giftcard"
	ChargebacksPendingSubTotalMethod1Giropay           ChargebacksPendingSubTotalMethod1 = "giropay"
	ChargebacksPendingSubTotalMethod1Googlepay         ChargebacksPendingSubTotalMethod1 = "googlepay"
	ChargebacksPendingSubTotalMethod1Ideal             ChargebacksPendingSubTotalMethod1 = "ideal"
	ChargebacksPendingSubTotalMethod1In3               ChargebacksPendingSubTotalMethod1 = "in3"
	ChargebacksPendingSubTotalMethod1Inghomepay        ChargebacksPendingSubTotalMethod1 = "inghomepay"
	ChargebacksPendingSubTotalMethod1Kbc               ChargebacksPendingSubTotalMethod1 = "kbc"
	ChargebacksPendingSubTotalMethod1Klarnapaylater    ChargebacksPendingSubTotalMethod1 = "klarnapaylater"
	ChargebacksPendingSubTotalMethod1Klarnapaynow      ChargebacksPendingSubTotalMethod1 = "klarnapaynow"
	ChargebacksPendingSubTotalMethod1Klarnasliceit     ChargebacksPendingSubTotalMethod1 = "klarnasliceit"
	ChargebacksPendingSubTotalMethod1Klarna            ChargebacksPendingSubTotalMethod1 = "klarna"
	ChargebacksPendingSubTotalMethod1Mbway             ChargebacksPendingSubTotalMethod1 = "mbway"
	ChargebacksPendingSubTotalMethod1Multibanco        ChargebacksPendingSubTotalMethod1 = "multibanco"
	ChargebacksPendingSubTotalMethod1Mybank            ChargebacksPendingSubTotalMethod1 = "mybank"
	ChargebacksPendingSubTotalMethod1Paybybank         ChargebacksPendingSubTotalMethod1 = "paybybank"
	ChargebacksPendingSubTotalMethod1Payconiq          ChargebacksPendingSubTotalMethod1 = "payconiq"
	ChargebacksPendingSubTotalMethod1Paypal            ChargebacksPendingSubTotalMethod1 = "paypal"
	ChargebacksPendingSubTotalMethod1Paysafecard       ChargebacksPendingSubTotalMethod1 = "paysafecard"
	ChargebacksPendingSubTotalMethod1Przelewy24        ChargebacksPendingSubTotalMethod1 = "przelewy24"
	ChargebacksPendingSubTotalMethod1Riverty           ChargebacksPendingSubTotalMethod1 = "riverty"
	ChargebacksPendingSubTotalMethod1Satispay          ChargebacksPendingSubTotalMethod1 = "satispay"
	ChargebacksPendingSubTotalMethod1Podiumcadeaukaart ChargebacksPendingSubTotalMethod1 = "podiumcadeaukaart"
	ChargebacksPendingSubTotalMethod1Pointofsale       ChargebacksPendingSubTotalMethod1 = "pointofsale"
	ChargebacksPendingSubTotalMethod1Sofort            ChargebacksPendingSubTotalMethod1 = "sofort"
	ChargebacksPendingSubTotalMethod1Swish             ChargebacksPendingSubTotalMethod1 = "swish"
	ChargebacksPendingSubTotalMethod1Trustly           ChargebacksPendingSubTotalMethod1 = "trustly"
	ChargebacksPendingSubTotalMethod1Twint             ChargebacksPendingSubTotalMethod1 = "twint"
	ChargebacksPendingSubTotalMethod1Voucher           ChargebacksPendingSubTotalMethod1 = "voucher"
)

func (e ChargebacksPendingSubTotalMethod1) ToPointer() *ChargebacksPendingSubTotalMethod1 {
	return &e
}
func (e *ChargebacksPendingSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = ChargebacksPendingSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksPendingSubTotalMethod1: %v", v)
	}
}

// ChargebacksPendingSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type ChargebacksPendingSubTotalCardIssuer1 string

const (
	ChargebacksPendingSubTotalCardIssuer1Amex          ChargebacksPendingSubTotalCardIssuer1 = "amex"
	ChargebacksPendingSubTotalCardIssuer1Maestro       ChargebacksPendingSubTotalCardIssuer1 = "maestro"
	ChargebacksPendingSubTotalCardIssuer1CarteBancaire ChargebacksPendingSubTotalCardIssuer1 = "carte-bancaire"
	ChargebacksPendingSubTotalCardIssuer1Other         ChargebacksPendingSubTotalCardIssuer1 = "other"
)

func (e ChargebacksPendingSubTotalCardIssuer1) ToPointer() *ChargebacksPendingSubTotalCardIssuer1 {
	return &e
}
func (e *ChargebacksPendingSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = ChargebacksPendingSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksPendingSubTotalCardIssuer1: %v", v)
	}
}

// ChargebacksPendingSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type ChargebacksPendingSubTotalCardAudience1 string

const (
	ChargebacksPendingSubTotalCardAudience1Corporate ChargebacksPendingSubTotalCardAudience1 = "corporate"
	ChargebacksPendingSubTotalCardAudience1Other     ChargebacksPendingSubTotalCardAudience1 = "other"
)

func (e ChargebacksPendingSubTotalCardAudience1) ToPointer() *ChargebacksPendingSubTotalCardAudience1 {
	return &e
}
func (e *ChargebacksPendingSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = ChargebacksPendingSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksPendingSubTotalCardAudience1: %v", v)
	}
}

// ChargebacksPendingSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type ChargebacksPendingSubTotalCardRegion1 string

const (
	ChargebacksPendingSubTotalCardRegion1IntraEea ChargebacksPendingSubTotalCardRegion1 = "intra-eea"
	ChargebacksPendingSubTotalCardRegion1IntraEu  ChargebacksPendingSubTotalCardRegion1 = "intra-eu"
	ChargebacksPendingSubTotalCardRegion1Domestic ChargebacksPendingSubTotalCardRegion1 = "domestic"
	ChargebacksPendingSubTotalCardRegion1Other    ChargebacksPendingSubTotalCardRegion1 = "other"
)

func (e ChargebacksPendingSubTotalCardRegion1) ToPointer() *ChargebacksPendingSubTotalCardRegion1 {
	return &e
}
func (e *ChargebacksPendingSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = ChargebacksPendingSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksPendingSubTotalCardRegion1: %v", v)
	}
}

// ChargebacksPendingSubTotalFeeType1 - Present when the transaction represents a fee.
type ChargebacksPendingSubTotalFeeType1 string

const (
	ChargebacksPendingSubTotalFeeType1PaymentFee                                        ChargebacksPendingSubTotalFeeType1 = "payment-fee"
	ChargebacksPendingSubTotalFeeType1DirectDebitFailureFee                             ChargebacksPendingSubTotalFeeType1 = "direct-debit-failure-fee"
	ChargebacksPendingSubTotalFeeType1UnauthorizedDirectDebitFee                        ChargebacksPendingSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	ChargebacksPendingSubTotalFeeType1BankChargedDirectDebitFailureFee                  ChargebacksPendingSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	ChargebacksPendingSubTotalFeeType1PartnerCommission                                 ChargebacksPendingSubTotalFeeType1 = "partner-commission"
	ChargebacksPendingSubTotalFeeType1ApplicationFee                                    ChargebacksPendingSubTotalFeeType1 = "application-fee"
	ChargebacksPendingSubTotalFeeType1CaptureFee                                        ChargebacksPendingSubTotalFeeType1 = "capture-fee"
	ChargebacksPendingSubTotalFeeType1RefundFee                                         ChargebacksPendingSubTotalFeeType1 = "refund-fee"
	ChargebacksPendingSubTotalFeeType1ChargebackFee                                     ChargebacksPendingSubTotalFeeType1 = "chargeback-fee"
	ChargebacksPendingSubTotalFeeType1PaymentNotificationFee                            ChargebacksPendingSubTotalFeeType1 = "payment-notification-fee"
	ChargebacksPendingSubTotalFeeType1TransferNotificationFee                           ChargebacksPendingSubTotalFeeType1 = "transfer-notification-fee"
	ChargebacksPendingSubTotalFeeType1PayoutFee                                         ChargebacksPendingSubTotalFeeType1 = "payout-fee"
	ChargebacksPendingSubTotalFeeType1FeeDiscount                                       ChargebacksPendingSubTotalFeeType1 = "fee-discount"
	ChargebacksPendingSubTotalFeeType1FeeReimbursement                                  ChargebacksPendingSubTotalFeeType1 = "fee-reimbursement"
	ChargebacksPendingSubTotalFeeType1PlatformVolumeFee                                 ChargebacksPendingSubTotalFeeType1 = "platform-volume-fee"
	ChargebacksPendingSubTotalFeeType1PlatformConnectedOrganizationsFee                 ChargebacksPendingSubTotalFeeType1 = "platform-connected-organizations-fee"
	ChargebacksPendingSubTotalFeeType1BalanceChargeFee                                  ChargebacksPendingSubTotalFeeType1 = "balance-charge-fee"
	ChargebacksPendingSubTotalFeeType1ThreedsAuthenticationAttemptFee                   ChargebacksPendingSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	ChargebacksPendingSubTotalFeeType1TerminalMonthlyFee                                ChargebacksPendingSubTotalFeeType1 = "terminal-monthly-fee"
	ChargebacksPendingSubTotalFeeType1AcceptanceRiskFee                                 ChargebacksPendingSubTotalFeeType1 = "acceptance-risk-fee"
	ChargebacksPendingSubTotalFeeType1TopUpFee                                          ChargebacksPendingSubTotalFeeType1 = "top-up-fee"
	ChargebacksPendingSubTotalFeeType1PaymentGatewayFee                                 ChargebacksPendingSubTotalFeeType1 = "payment-gateway-fee"
	ChargebacksPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   ChargebacksPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	ChargebacksPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee ChargebacksPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	ChargebacksPendingSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             ChargebacksPendingSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	ChargebacksPendingSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           ChargebacksPendingSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	ChargebacksPendingSubTotalFeeType1MinimumInvoiceAmountFee                           ChargebacksPendingSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e ChargebacksPendingSubTotalFeeType1) ToPointer() *ChargebacksPendingSubTotalFeeType1 {
	return &e
}
func (e *ChargebacksPendingSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = ChargebacksPendingSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksPendingSubTotalFeeType1: %v", v)
	}
}

// ChargebacksPendingSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type ChargebacksPendingSubTotalPrepaymentPartType1 string

const (
	ChargebacksPendingSubTotalPrepaymentPartType1Fee                     ChargebacksPendingSubTotalPrepaymentPartType1 = "fee"
	ChargebacksPendingSubTotalPrepaymentPartType1FeeReimbursement        ChargebacksPendingSubTotalPrepaymentPartType1 = "fee-reimbursement"
	ChargebacksPendingSubTotalPrepaymentPartType1FeeDiscount             ChargebacksPendingSubTotalPrepaymentPartType1 = "fee-discount"
	ChargebacksPendingSubTotalPrepaymentPartType1FeeVat                  ChargebacksPendingSubTotalPrepaymentPartType1 = "fee-vat"
	ChargebacksPendingSubTotalPrepaymentPartType1FeeRoundingCompensation ChargebacksPendingSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e ChargebacksPendingSubTotalPrepaymentPartType1) ToPointer() *ChargebacksPendingSubTotalPrepaymentPartType1 {
	return &e
}
func (e *ChargebacksPendingSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = ChargebacksPendingSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksPendingSubTotalPrepaymentPartType1: %v", v)
	}
}

// ChargebacksPendingSubTotalTransactionType1 - Represents the transaction type
type ChargebacksPendingSubTotalTransactionType1 string

const (
	ChargebacksPendingSubTotalTransactionType1Payment                           ChargebacksPendingSubTotalTransactionType1 = "payment"
	ChargebacksPendingSubTotalTransactionType1SplitPayment                      ChargebacksPendingSubTotalTransactionType1 = "split-payment"
	ChargebacksPendingSubTotalTransactionType1FailedPayment                     ChargebacksPendingSubTotalTransactionType1 = "failed-payment"
	ChargebacksPendingSubTotalTransactionType1FailedPlatformSplitPayment        ChargebacksPendingSubTotalTransactionType1 = "failed-platform-split-payment"
	ChargebacksPendingSubTotalTransactionType1FailedSplitPaymentCompensation    ChargebacksPendingSubTotalTransactionType1 = "failed-split-payment-compensation"
	ChargebacksPendingSubTotalTransactionType1Capture                           ChargebacksPendingSubTotalTransactionType1 = "capture"
	ChargebacksPendingSubTotalTransactionType1SplitTransaction                  ChargebacksPendingSubTotalTransactionType1 = "split-transaction"
	ChargebacksPendingSubTotalTransactionType1Refund                            ChargebacksPendingSubTotalTransactionType1 = "refund"
	ChargebacksPendingSubTotalTransactionType1PlatformPaymentRefund             ChargebacksPendingSubTotalTransactionType1 = "platform-payment-refund"
	ChargebacksPendingSubTotalTransactionType1ReturnedPlatformPaymentRefund     ChargebacksPendingSubTotalTransactionType1 = "returned-platform-payment-refund"
	ChargebacksPendingSubTotalTransactionType1RefundCompensation                ChargebacksPendingSubTotalTransactionType1 = "refund-compensation"
	ChargebacksPendingSubTotalTransactionType1ReturnedRefundCompensation        ChargebacksPendingSubTotalTransactionType1 = "returned-refund-compensation"
	ChargebacksPendingSubTotalTransactionType1ReturnedRefund                    ChargebacksPendingSubTotalTransactionType1 = "returned-refund"
	ChargebacksPendingSubTotalTransactionType1Chargeback                        ChargebacksPendingSubTotalTransactionType1 = "chargeback"
	ChargebacksPendingSubTotalTransactionType1ChargebackReversal                ChargebacksPendingSubTotalTransactionType1 = "chargeback-reversal"
	ChargebacksPendingSubTotalTransactionType1ChargebackCompensation            ChargebacksPendingSubTotalTransactionType1 = "chargeback-compensation"
	ChargebacksPendingSubTotalTransactionType1ReversedChargebackCompensation    ChargebacksPendingSubTotalTransactionType1 = "reversed-chargeback-compensation"
	ChargebacksPendingSubTotalTransactionType1PlatformPaymentChargeback         ChargebacksPendingSubTotalTransactionType1 = "platform-payment-chargeback"
	ChargebacksPendingSubTotalTransactionType1ReversedPlatformPaymentChargeback ChargebacksPendingSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	ChargebacksPendingSubTotalTransactionType1FeePrepayment                     ChargebacksPendingSubTotalTransactionType1 = "fee-prepayment"
	ChargebacksPendingSubTotalTransactionType1OutgoingTransfer                  ChargebacksPendingSubTotalTransactionType1 = "outgoing-transfer"
	ChargebacksPendingSubTotalTransactionType1IncomingTransfer                  ChargebacksPendingSubTotalTransactionType1 = "incoming-transfer"
	ChargebacksPendingSubTotalTransactionType1CanceledTransfer                  ChargebacksPendingSubTotalTransactionType1 = "canceled-transfer"
	ChargebacksPendingSubTotalTransactionType1ReturnedTransfer                  ChargebacksPendingSubTotalTransactionType1 = "returned-transfer"
	ChargebacksPendingSubTotalTransactionType1BalanceReserve                    ChargebacksPendingSubTotalTransactionType1 = "balance-reserve"
	ChargebacksPendingSubTotalTransactionType1BalanceReserveReturn              ChargebacksPendingSubTotalTransactionType1 = "balance-reserve-return"
	ChargebacksPendingSubTotalTransactionType1InvoiceRoundingCompensation       ChargebacksPendingSubTotalTransactionType1 = "invoice-rounding-compensation"
	ChargebacksPendingSubTotalTransactionType1RollingReserveHold                ChargebacksPendingSubTotalTransactionType1 = "rolling-reserve-hold"
	ChargebacksPendingSubTotalTransactionType1RollingReserveRelease             ChargebacksPendingSubTotalTransactionType1 = "rolling-reserve-release"
	ChargebacksPendingSubTotalTransactionType1BalanceCorrection                 ChargebacksPendingSubTotalTransactionType1 = "balance-correction"
	ChargebacksPendingSubTotalTransactionType1Repayment                         ChargebacksPendingSubTotalTransactionType1 = "repayment"
	ChargebacksPendingSubTotalTransactionType1Loan                              ChargebacksPendingSubTotalTransactionType1 = "loan"
	ChargebacksPendingSubTotalTransactionType1BalanceTopup                      ChargebacksPendingSubTotalTransactionType1 = "balance-topup"
	ChargebacksPendingSubTotalTransactionType1CashCollateralIssuance            ChargebacksPendingSubTotalTransactionType1 = "cash-collateral-issuance';"
	ChargebacksPendingSubTotalTransactionType1CashCollateralRelease             ChargebacksPendingSubTotalTransactionType1 = "cash-collateral-release"
	ChargebacksPendingSubTotalTransactionType1PendingRollingReserve             ChargebacksPendingSubTotalTransactionType1 = "pending-rolling-reserve"
	ChargebacksPendingSubTotalTransactionType1ToBeReleasedRollingReserve        ChargebacksPendingSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	ChargebacksPendingSubTotalTransactionType1HeldRollingReserve                ChargebacksPendingSubTotalTransactionType1 = "held-rolling-reserve"
	ChargebacksPendingSubTotalTransactionType1ReleasedRollingReserve            ChargebacksPendingSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e ChargebacksPendingSubTotalTransactionType1) ToPointer() *ChargebacksPendingSubTotalTransactionType1 {
	return &e
}
func (e *ChargebacksPendingSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = ChargebacksPendingSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksPendingSubTotalTransactionType1: %v", v)
	}
}

type ChargebacksPendingSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *ChargebacksPendingSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *ChargebacksPendingSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *ChargebacksPendingSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *ChargebacksPendingSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *ChargebacksPendingSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *ChargebacksPendingSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *ChargebacksPendingSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *ChargebacksPendingSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ChargebacksPendingSubTotal1) GetMethod() *ChargebacksPendingSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *ChargebacksPendingSubTotal1) GetCardIssuer() *ChargebacksPendingSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *ChargebacksPendingSubTotal1) GetCardAudience() *ChargebacksPendingSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *ChargebacksPendingSubTotal1) GetCardRegion() *ChargebacksPendingSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *ChargebacksPendingSubTotal1) GetFeeType() *ChargebacksPendingSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *ChargebacksPendingSubTotal1) GetPrepaymentPartType() *ChargebacksPendingSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *ChargebacksPendingSubTotal1) GetTransactionType() *ChargebacksPendingSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// ChargebacksPendingSubtotalMethod2 - Payment type of the transactions
type ChargebacksPendingSubtotalMethod2 string

const (
	ChargebacksPendingSubtotalMethod2Alma              ChargebacksPendingSubtotalMethod2 = "alma"
	ChargebacksPendingSubtotalMethod2Bacs              ChargebacksPendingSubtotalMethod2 = "bacs"
	ChargebacksPendingSubtotalMethod2Applepay          ChargebacksPendingSubtotalMethod2 = "applepay"
	ChargebacksPendingSubtotalMethod2Bancomatpay       ChargebacksPendingSubtotalMethod2 = "bancomatpay"
	ChargebacksPendingSubtotalMethod2Bancontact        ChargebacksPendingSubtotalMethod2 = "bancontact"
	ChargebacksPendingSubtotalMethod2Banktransfer      ChargebacksPendingSubtotalMethod2 = "banktransfer"
	ChargebacksPendingSubtotalMethod2Belfius           ChargebacksPendingSubtotalMethod2 = "belfius"
	ChargebacksPendingSubtotalMethod2Billie            ChargebacksPendingSubtotalMethod2 = "billie"
	ChargebacksPendingSubtotalMethod2Bizum             ChargebacksPendingSubtotalMethod2 = "bizum"
	ChargebacksPendingSubtotalMethod2Bitcoin           ChargebacksPendingSubtotalMethod2 = "bitcoin"
	ChargebacksPendingSubtotalMethod2Blik              ChargebacksPendingSubtotalMethod2 = "blik"
	ChargebacksPendingSubtotalMethod2Creditcard        ChargebacksPendingSubtotalMethod2 = "creditcard"
	ChargebacksPendingSubtotalMethod2Directdebit       ChargebacksPendingSubtotalMethod2 = "directdebit"
	ChargebacksPendingSubtotalMethod2Eps               ChargebacksPendingSubtotalMethod2 = "eps"
	ChargebacksPendingSubtotalMethod2Giftcard          ChargebacksPendingSubtotalMethod2 = "giftcard"
	ChargebacksPendingSubtotalMethod2Giropay           ChargebacksPendingSubtotalMethod2 = "giropay"
	ChargebacksPendingSubtotalMethod2Googlepay         ChargebacksPendingSubtotalMethod2 = "googlepay"
	ChargebacksPendingSubtotalMethod2Ideal             ChargebacksPendingSubtotalMethod2 = "ideal"
	ChargebacksPendingSubtotalMethod2In3               ChargebacksPendingSubtotalMethod2 = "in3"
	ChargebacksPendingSubtotalMethod2Inghomepay        ChargebacksPendingSubtotalMethod2 = "inghomepay"
	ChargebacksPendingSubtotalMethod2Kbc               ChargebacksPendingSubtotalMethod2 = "kbc"
	ChargebacksPendingSubtotalMethod2Klarnapaylater    ChargebacksPendingSubtotalMethod2 = "klarnapaylater"
	ChargebacksPendingSubtotalMethod2Klarnapaynow      ChargebacksPendingSubtotalMethod2 = "klarnapaynow"
	ChargebacksPendingSubtotalMethod2Klarnasliceit     ChargebacksPendingSubtotalMethod2 = "klarnasliceit"
	ChargebacksPendingSubtotalMethod2Klarna            ChargebacksPendingSubtotalMethod2 = "klarna"
	ChargebacksPendingSubtotalMethod2Mbway             ChargebacksPendingSubtotalMethod2 = "mbway"
	ChargebacksPendingSubtotalMethod2Multibanco        ChargebacksPendingSubtotalMethod2 = "multibanco"
	ChargebacksPendingSubtotalMethod2Mybank            ChargebacksPendingSubtotalMethod2 = "mybank"
	ChargebacksPendingSubtotalMethod2Paybybank         ChargebacksPendingSubtotalMethod2 = "paybybank"
	ChargebacksPendingSubtotalMethod2Payconiq          ChargebacksPendingSubtotalMethod2 = "payconiq"
	ChargebacksPendingSubtotalMethod2Paypal            ChargebacksPendingSubtotalMethod2 = "paypal"
	ChargebacksPendingSubtotalMethod2Paysafecard       ChargebacksPendingSubtotalMethod2 = "paysafecard"
	ChargebacksPendingSubtotalMethod2Przelewy24        ChargebacksPendingSubtotalMethod2 = "przelewy24"
	ChargebacksPendingSubtotalMethod2Riverty           ChargebacksPendingSubtotalMethod2 = "riverty"
	ChargebacksPendingSubtotalMethod2Satispay          ChargebacksPendingSubtotalMethod2 = "satispay"
	ChargebacksPendingSubtotalMethod2Podiumcadeaukaart ChargebacksPendingSubtotalMethod2 = "podiumcadeaukaart"
	ChargebacksPendingSubtotalMethod2Pointofsale       ChargebacksPendingSubtotalMethod2 = "pointofsale"
	ChargebacksPendingSubtotalMethod2Sofort            ChargebacksPendingSubtotalMethod2 = "sofort"
	ChargebacksPendingSubtotalMethod2Swish             ChargebacksPendingSubtotalMethod2 = "swish"
	ChargebacksPendingSubtotalMethod2Trustly           ChargebacksPendingSubtotalMethod2 = "trustly"
	ChargebacksPendingSubtotalMethod2Twint             ChargebacksPendingSubtotalMethod2 = "twint"
	ChargebacksPendingSubtotalMethod2Voucher           ChargebacksPendingSubtotalMethod2 = "voucher"
)

func (e ChargebacksPendingSubtotalMethod2) ToPointer() *ChargebacksPendingSubtotalMethod2 {
	return &e
}
func (e *ChargebacksPendingSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = ChargebacksPendingSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksPendingSubtotalMethod2: %v", v)
	}
}

// ChargebacksPendingSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type ChargebacksPendingSubtotalCardIssuer2 string

const (
	ChargebacksPendingSubtotalCardIssuer2Amex          ChargebacksPendingSubtotalCardIssuer2 = "amex"
	ChargebacksPendingSubtotalCardIssuer2Maestro       ChargebacksPendingSubtotalCardIssuer2 = "maestro"
	ChargebacksPendingSubtotalCardIssuer2CarteBancaire ChargebacksPendingSubtotalCardIssuer2 = "carte-bancaire"
	ChargebacksPendingSubtotalCardIssuer2Other         ChargebacksPendingSubtotalCardIssuer2 = "other"
)

func (e ChargebacksPendingSubtotalCardIssuer2) ToPointer() *ChargebacksPendingSubtotalCardIssuer2 {
	return &e
}
func (e *ChargebacksPendingSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = ChargebacksPendingSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksPendingSubtotalCardIssuer2: %v", v)
	}
}

// ChargebacksPendingSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type ChargebacksPendingSubtotalCardAudience2 string

const (
	ChargebacksPendingSubtotalCardAudience2Corporate ChargebacksPendingSubtotalCardAudience2 = "corporate"
	ChargebacksPendingSubtotalCardAudience2Other     ChargebacksPendingSubtotalCardAudience2 = "other"
)

func (e ChargebacksPendingSubtotalCardAudience2) ToPointer() *ChargebacksPendingSubtotalCardAudience2 {
	return &e
}
func (e *ChargebacksPendingSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = ChargebacksPendingSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksPendingSubtotalCardAudience2: %v", v)
	}
}

// ChargebacksPendingSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type ChargebacksPendingSubtotalCardRegion2 string

const (
	ChargebacksPendingSubtotalCardRegion2IntraEea ChargebacksPendingSubtotalCardRegion2 = "intra-eea"
	ChargebacksPendingSubtotalCardRegion2IntraEu  ChargebacksPendingSubtotalCardRegion2 = "intra-eu"
	ChargebacksPendingSubtotalCardRegion2Domestic ChargebacksPendingSubtotalCardRegion2 = "domestic"
	ChargebacksPendingSubtotalCardRegion2Other    ChargebacksPendingSubtotalCardRegion2 = "other"
)

func (e ChargebacksPendingSubtotalCardRegion2) ToPointer() *ChargebacksPendingSubtotalCardRegion2 {
	return &e
}
func (e *ChargebacksPendingSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = ChargebacksPendingSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksPendingSubtotalCardRegion2: %v", v)
	}
}

// ChargebacksPendingSubtotalFeeType2 - Present when the transaction represents a fee.
type ChargebacksPendingSubtotalFeeType2 string

const (
	ChargebacksPendingSubtotalFeeType2PaymentFee                                        ChargebacksPendingSubtotalFeeType2 = "payment-fee"
	ChargebacksPendingSubtotalFeeType2DirectDebitFailureFee                             ChargebacksPendingSubtotalFeeType2 = "direct-debit-failure-fee"
	ChargebacksPendingSubtotalFeeType2UnauthorizedDirectDebitFee                        ChargebacksPendingSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	ChargebacksPendingSubtotalFeeType2BankChargedDirectDebitFailureFee                  ChargebacksPendingSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	ChargebacksPendingSubtotalFeeType2PartnerCommission                                 ChargebacksPendingSubtotalFeeType2 = "partner-commission"
	ChargebacksPendingSubtotalFeeType2ApplicationFee                                    ChargebacksPendingSubtotalFeeType2 = "application-fee"
	ChargebacksPendingSubtotalFeeType2CaptureFee                                        ChargebacksPendingSubtotalFeeType2 = "capture-fee"
	ChargebacksPendingSubtotalFeeType2RefundFee                                         ChargebacksPendingSubtotalFeeType2 = "refund-fee"
	ChargebacksPendingSubtotalFeeType2ChargebackFee                                     ChargebacksPendingSubtotalFeeType2 = "chargeback-fee"
	ChargebacksPendingSubtotalFeeType2PaymentNotificationFee                            ChargebacksPendingSubtotalFeeType2 = "payment-notification-fee"
	ChargebacksPendingSubtotalFeeType2TransferNotificationFee                           ChargebacksPendingSubtotalFeeType2 = "transfer-notification-fee"
	ChargebacksPendingSubtotalFeeType2PayoutFee                                         ChargebacksPendingSubtotalFeeType2 = "payout-fee"
	ChargebacksPendingSubtotalFeeType2FeeDiscount                                       ChargebacksPendingSubtotalFeeType2 = "fee-discount"
	ChargebacksPendingSubtotalFeeType2FeeReimbursement                                  ChargebacksPendingSubtotalFeeType2 = "fee-reimbursement"
	ChargebacksPendingSubtotalFeeType2PlatformVolumeFee                                 ChargebacksPendingSubtotalFeeType2 = "platform-volume-fee"
	ChargebacksPendingSubtotalFeeType2PlatformConnectedOrganizationsFee                 ChargebacksPendingSubtotalFeeType2 = "platform-connected-organizations-fee"
	ChargebacksPendingSubtotalFeeType2BalanceChargeFee                                  ChargebacksPendingSubtotalFeeType2 = "balance-charge-fee"
	ChargebacksPendingSubtotalFeeType2ThreedsAuthenticationAttemptFee                   ChargebacksPendingSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	ChargebacksPendingSubtotalFeeType2TerminalMonthlyFee                                ChargebacksPendingSubtotalFeeType2 = "terminal-monthly-fee"
	ChargebacksPendingSubtotalFeeType2AcceptanceRiskFee                                 ChargebacksPendingSubtotalFeeType2 = "acceptance-risk-fee"
	ChargebacksPendingSubtotalFeeType2TopUpFee                                          ChargebacksPendingSubtotalFeeType2 = "top-up-fee"
	ChargebacksPendingSubtotalFeeType2PaymentGatewayFee                                 ChargebacksPendingSubtotalFeeType2 = "payment-gateway-fee"
	ChargebacksPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   ChargebacksPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	ChargebacksPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee ChargebacksPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	ChargebacksPendingSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             ChargebacksPendingSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	ChargebacksPendingSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           ChargebacksPendingSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	ChargebacksPendingSubtotalFeeType2MinimumInvoiceAmountFee                           ChargebacksPendingSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e ChargebacksPendingSubtotalFeeType2) ToPointer() *ChargebacksPendingSubtotalFeeType2 {
	return &e
}
func (e *ChargebacksPendingSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = ChargebacksPendingSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksPendingSubtotalFeeType2: %v", v)
	}
}

// ChargebacksPendingSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type ChargebacksPendingSubtotalPrepaymentPartType2 string

const (
	ChargebacksPendingSubtotalPrepaymentPartType2Fee                     ChargebacksPendingSubtotalPrepaymentPartType2 = "fee"
	ChargebacksPendingSubtotalPrepaymentPartType2FeeReimbursement        ChargebacksPendingSubtotalPrepaymentPartType2 = "fee-reimbursement"
	ChargebacksPendingSubtotalPrepaymentPartType2FeeDiscount             ChargebacksPendingSubtotalPrepaymentPartType2 = "fee-discount"
	ChargebacksPendingSubtotalPrepaymentPartType2FeeVat                  ChargebacksPendingSubtotalPrepaymentPartType2 = "fee-vat"
	ChargebacksPendingSubtotalPrepaymentPartType2FeeRoundingCompensation ChargebacksPendingSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e ChargebacksPendingSubtotalPrepaymentPartType2) ToPointer() *ChargebacksPendingSubtotalPrepaymentPartType2 {
	return &e
}
func (e *ChargebacksPendingSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = ChargebacksPendingSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksPendingSubtotalPrepaymentPartType2: %v", v)
	}
}

// ChargebacksPendingSubtotalTransactionType2 - Represents the transaction type
type ChargebacksPendingSubtotalTransactionType2 string

const (
	ChargebacksPendingSubtotalTransactionType2Payment                           ChargebacksPendingSubtotalTransactionType2 = "payment"
	ChargebacksPendingSubtotalTransactionType2SplitPayment                      ChargebacksPendingSubtotalTransactionType2 = "split-payment"
	ChargebacksPendingSubtotalTransactionType2FailedPayment                     ChargebacksPendingSubtotalTransactionType2 = "failed-payment"
	ChargebacksPendingSubtotalTransactionType2FailedPlatformSplitPayment        ChargebacksPendingSubtotalTransactionType2 = "failed-platform-split-payment"
	ChargebacksPendingSubtotalTransactionType2FailedSplitPaymentCompensation    ChargebacksPendingSubtotalTransactionType2 = "failed-split-payment-compensation"
	ChargebacksPendingSubtotalTransactionType2Capture                           ChargebacksPendingSubtotalTransactionType2 = "capture"
	ChargebacksPendingSubtotalTransactionType2SplitTransaction                  ChargebacksPendingSubtotalTransactionType2 = "split-transaction"
	ChargebacksPendingSubtotalTransactionType2Refund                            ChargebacksPendingSubtotalTransactionType2 = "refund"
	ChargebacksPendingSubtotalTransactionType2PlatformPaymentRefund             ChargebacksPendingSubtotalTransactionType2 = "platform-payment-refund"
	ChargebacksPendingSubtotalTransactionType2ReturnedPlatformPaymentRefund     ChargebacksPendingSubtotalTransactionType2 = "returned-platform-payment-refund"
	ChargebacksPendingSubtotalTransactionType2RefundCompensation                ChargebacksPendingSubtotalTransactionType2 = "refund-compensation"
	ChargebacksPendingSubtotalTransactionType2ReturnedRefundCompensation        ChargebacksPendingSubtotalTransactionType2 = "returned-refund-compensation"
	ChargebacksPendingSubtotalTransactionType2ReturnedRefund                    ChargebacksPendingSubtotalTransactionType2 = "returned-refund"
	ChargebacksPendingSubtotalTransactionType2Chargeback                        ChargebacksPendingSubtotalTransactionType2 = "chargeback"
	ChargebacksPendingSubtotalTransactionType2ChargebackReversal                ChargebacksPendingSubtotalTransactionType2 = "chargeback-reversal"
	ChargebacksPendingSubtotalTransactionType2ChargebackCompensation            ChargebacksPendingSubtotalTransactionType2 = "chargeback-compensation"
	ChargebacksPendingSubtotalTransactionType2ReversedChargebackCompensation    ChargebacksPendingSubtotalTransactionType2 = "reversed-chargeback-compensation"
	ChargebacksPendingSubtotalTransactionType2PlatformPaymentChargeback         ChargebacksPendingSubtotalTransactionType2 = "platform-payment-chargeback"
	ChargebacksPendingSubtotalTransactionType2ReversedPlatformPaymentChargeback ChargebacksPendingSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	ChargebacksPendingSubtotalTransactionType2FeePrepayment                     ChargebacksPendingSubtotalTransactionType2 = "fee-prepayment"
	ChargebacksPendingSubtotalTransactionType2OutgoingTransfer                  ChargebacksPendingSubtotalTransactionType2 = "outgoing-transfer"
	ChargebacksPendingSubtotalTransactionType2IncomingTransfer                  ChargebacksPendingSubtotalTransactionType2 = "incoming-transfer"
	ChargebacksPendingSubtotalTransactionType2CanceledTransfer                  ChargebacksPendingSubtotalTransactionType2 = "canceled-transfer"
	ChargebacksPendingSubtotalTransactionType2ReturnedTransfer                  ChargebacksPendingSubtotalTransactionType2 = "returned-transfer"
	ChargebacksPendingSubtotalTransactionType2BalanceReserve                    ChargebacksPendingSubtotalTransactionType2 = "balance-reserve"
	ChargebacksPendingSubtotalTransactionType2BalanceReserveReturn              ChargebacksPendingSubtotalTransactionType2 = "balance-reserve-return"
	ChargebacksPendingSubtotalTransactionType2InvoiceRoundingCompensation       ChargebacksPendingSubtotalTransactionType2 = "invoice-rounding-compensation"
	ChargebacksPendingSubtotalTransactionType2RollingReserveHold                ChargebacksPendingSubtotalTransactionType2 = "rolling-reserve-hold"
	ChargebacksPendingSubtotalTransactionType2RollingReserveRelease             ChargebacksPendingSubtotalTransactionType2 = "rolling-reserve-release"
	ChargebacksPendingSubtotalTransactionType2BalanceCorrection                 ChargebacksPendingSubtotalTransactionType2 = "balance-correction"
	ChargebacksPendingSubtotalTransactionType2Repayment                         ChargebacksPendingSubtotalTransactionType2 = "repayment"
	ChargebacksPendingSubtotalTransactionType2Loan                              ChargebacksPendingSubtotalTransactionType2 = "loan"
	ChargebacksPendingSubtotalTransactionType2BalanceTopup                      ChargebacksPendingSubtotalTransactionType2 = "balance-topup"
	ChargebacksPendingSubtotalTransactionType2CashCollateralIssuance            ChargebacksPendingSubtotalTransactionType2 = "cash-collateral-issuance';"
	ChargebacksPendingSubtotalTransactionType2CashCollateralRelease             ChargebacksPendingSubtotalTransactionType2 = "cash-collateral-release"
	ChargebacksPendingSubtotalTransactionType2PendingRollingReserve             ChargebacksPendingSubtotalTransactionType2 = "pending-rolling-reserve"
	ChargebacksPendingSubtotalTransactionType2ToBeReleasedRollingReserve        ChargebacksPendingSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	ChargebacksPendingSubtotalTransactionType2HeldRollingReserve                ChargebacksPendingSubtotalTransactionType2 = "held-rolling-reserve"
	ChargebacksPendingSubtotalTransactionType2ReleasedRollingReserve            ChargebacksPendingSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e ChargebacksPendingSubtotalTransactionType2) ToPointer() *ChargebacksPendingSubtotalTransactionType2 {
	return &e
}
func (e *ChargebacksPendingSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = ChargebacksPendingSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksPendingSubtotalTransactionType2: %v", v)
	}
}

type ChargebacksPendingSubtotal2 struct {
	SubTotals []ChargebacksPendingSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *ChargebacksPendingSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *ChargebacksPendingSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *ChargebacksPendingSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *ChargebacksPendingSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *ChargebacksPendingSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *ChargebacksPendingSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *ChargebacksPendingSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *ChargebacksPendingSubtotal2) GetSubTotals() []ChargebacksPendingSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *ChargebacksPendingSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ChargebacksPendingSubtotal2) GetMethod() *ChargebacksPendingSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *ChargebacksPendingSubtotal2) GetCardIssuer() *ChargebacksPendingSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *ChargebacksPendingSubtotal2) GetCardAudience() *ChargebacksPendingSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *ChargebacksPendingSubtotal2) GetCardRegion() *ChargebacksPendingSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *ChargebacksPendingSubtotal2) GetFeeType() *ChargebacksPendingSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *ChargebacksPendingSubtotal2) GetPrepaymentPartType() *ChargebacksPendingSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *ChargebacksPendingSubtotal2) GetTransactionType() *ChargebacksPendingSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type ChargebacksPending struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *ChargebacksPendingAmount     `json:"amount,omitempty"`
	Subtotals []ChargebacksPendingSubtotal2 `json:"subtotals,omitempty"`
}

func (o *ChargebacksPending) GetAmount() *ChargebacksPendingAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ChargebacksPending) GetSubtotals() []ChargebacksPendingSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// ChargebacksMovedToAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type ChargebacksMovedToAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ChargebacksMovedToAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ChargebacksMovedToAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ChargebacksMovedToAvailableSubTotalMethod1 - Payment type of the transactions
type ChargebacksMovedToAvailableSubTotalMethod1 string

const (
	ChargebacksMovedToAvailableSubTotalMethod1Alma              ChargebacksMovedToAvailableSubTotalMethod1 = "alma"
	ChargebacksMovedToAvailableSubTotalMethod1Bacs              ChargebacksMovedToAvailableSubTotalMethod1 = "bacs"
	ChargebacksMovedToAvailableSubTotalMethod1Applepay          ChargebacksMovedToAvailableSubTotalMethod1 = "applepay"
	ChargebacksMovedToAvailableSubTotalMethod1Bancomatpay       ChargebacksMovedToAvailableSubTotalMethod1 = "bancomatpay"
	ChargebacksMovedToAvailableSubTotalMethod1Bancontact        ChargebacksMovedToAvailableSubTotalMethod1 = "bancontact"
	ChargebacksMovedToAvailableSubTotalMethod1Banktransfer      ChargebacksMovedToAvailableSubTotalMethod1 = "banktransfer"
	ChargebacksMovedToAvailableSubTotalMethod1Belfius           ChargebacksMovedToAvailableSubTotalMethod1 = "belfius"
	ChargebacksMovedToAvailableSubTotalMethod1Billie            ChargebacksMovedToAvailableSubTotalMethod1 = "billie"
	ChargebacksMovedToAvailableSubTotalMethod1Bizum             ChargebacksMovedToAvailableSubTotalMethod1 = "bizum"
	ChargebacksMovedToAvailableSubTotalMethod1Bitcoin           ChargebacksMovedToAvailableSubTotalMethod1 = "bitcoin"
	ChargebacksMovedToAvailableSubTotalMethod1Blik              ChargebacksMovedToAvailableSubTotalMethod1 = "blik"
	ChargebacksMovedToAvailableSubTotalMethod1Creditcard        ChargebacksMovedToAvailableSubTotalMethod1 = "creditcard"
	ChargebacksMovedToAvailableSubTotalMethod1Directdebit       ChargebacksMovedToAvailableSubTotalMethod1 = "directdebit"
	ChargebacksMovedToAvailableSubTotalMethod1Eps               ChargebacksMovedToAvailableSubTotalMethod1 = "eps"
	ChargebacksMovedToAvailableSubTotalMethod1Giftcard          ChargebacksMovedToAvailableSubTotalMethod1 = "giftcard"
	ChargebacksMovedToAvailableSubTotalMethod1Giropay           ChargebacksMovedToAvailableSubTotalMethod1 = "giropay"
	ChargebacksMovedToAvailableSubTotalMethod1Googlepay         ChargebacksMovedToAvailableSubTotalMethod1 = "googlepay"
	ChargebacksMovedToAvailableSubTotalMethod1Ideal             ChargebacksMovedToAvailableSubTotalMethod1 = "ideal"
	ChargebacksMovedToAvailableSubTotalMethod1In3               ChargebacksMovedToAvailableSubTotalMethod1 = "in3"
	ChargebacksMovedToAvailableSubTotalMethod1Inghomepay        ChargebacksMovedToAvailableSubTotalMethod1 = "inghomepay"
	ChargebacksMovedToAvailableSubTotalMethod1Kbc               ChargebacksMovedToAvailableSubTotalMethod1 = "kbc"
	ChargebacksMovedToAvailableSubTotalMethod1Klarnapaylater    ChargebacksMovedToAvailableSubTotalMethod1 = "klarnapaylater"
	ChargebacksMovedToAvailableSubTotalMethod1Klarnapaynow      ChargebacksMovedToAvailableSubTotalMethod1 = "klarnapaynow"
	ChargebacksMovedToAvailableSubTotalMethod1Klarnasliceit     ChargebacksMovedToAvailableSubTotalMethod1 = "klarnasliceit"
	ChargebacksMovedToAvailableSubTotalMethod1Klarna            ChargebacksMovedToAvailableSubTotalMethod1 = "klarna"
	ChargebacksMovedToAvailableSubTotalMethod1Mbway             ChargebacksMovedToAvailableSubTotalMethod1 = "mbway"
	ChargebacksMovedToAvailableSubTotalMethod1Multibanco        ChargebacksMovedToAvailableSubTotalMethod1 = "multibanco"
	ChargebacksMovedToAvailableSubTotalMethod1Mybank            ChargebacksMovedToAvailableSubTotalMethod1 = "mybank"
	ChargebacksMovedToAvailableSubTotalMethod1Paybybank         ChargebacksMovedToAvailableSubTotalMethod1 = "paybybank"
	ChargebacksMovedToAvailableSubTotalMethod1Payconiq          ChargebacksMovedToAvailableSubTotalMethod1 = "payconiq"
	ChargebacksMovedToAvailableSubTotalMethod1Paypal            ChargebacksMovedToAvailableSubTotalMethod1 = "paypal"
	ChargebacksMovedToAvailableSubTotalMethod1Paysafecard       ChargebacksMovedToAvailableSubTotalMethod1 = "paysafecard"
	ChargebacksMovedToAvailableSubTotalMethod1Przelewy24        ChargebacksMovedToAvailableSubTotalMethod1 = "przelewy24"
	ChargebacksMovedToAvailableSubTotalMethod1Riverty           ChargebacksMovedToAvailableSubTotalMethod1 = "riverty"
	ChargebacksMovedToAvailableSubTotalMethod1Satispay          ChargebacksMovedToAvailableSubTotalMethod1 = "satispay"
	ChargebacksMovedToAvailableSubTotalMethod1Podiumcadeaukaart ChargebacksMovedToAvailableSubTotalMethod1 = "podiumcadeaukaart"
	ChargebacksMovedToAvailableSubTotalMethod1Pointofsale       ChargebacksMovedToAvailableSubTotalMethod1 = "pointofsale"
	ChargebacksMovedToAvailableSubTotalMethod1Sofort            ChargebacksMovedToAvailableSubTotalMethod1 = "sofort"
	ChargebacksMovedToAvailableSubTotalMethod1Swish             ChargebacksMovedToAvailableSubTotalMethod1 = "swish"
	ChargebacksMovedToAvailableSubTotalMethod1Trustly           ChargebacksMovedToAvailableSubTotalMethod1 = "trustly"
	ChargebacksMovedToAvailableSubTotalMethod1Twint             ChargebacksMovedToAvailableSubTotalMethod1 = "twint"
	ChargebacksMovedToAvailableSubTotalMethod1Voucher           ChargebacksMovedToAvailableSubTotalMethod1 = "voucher"
)

func (e ChargebacksMovedToAvailableSubTotalMethod1) ToPointer() *ChargebacksMovedToAvailableSubTotalMethod1 {
	return &e
}
func (e *ChargebacksMovedToAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = ChargebacksMovedToAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksMovedToAvailableSubTotalMethod1: %v", v)
	}
}

// ChargebacksMovedToAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type ChargebacksMovedToAvailableSubTotalCardIssuer1 string

const (
	ChargebacksMovedToAvailableSubTotalCardIssuer1Amex          ChargebacksMovedToAvailableSubTotalCardIssuer1 = "amex"
	ChargebacksMovedToAvailableSubTotalCardIssuer1Maestro       ChargebacksMovedToAvailableSubTotalCardIssuer1 = "maestro"
	ChargebacksMovedToAvailableSubTotalCardIssuer1CarteBancaire ChargebacksMovedToAvailableSubTotalCardIssuer1 = "carte-bancaire"
	ChargebacksMovedToAvailableSubTotalCardIssuer1Other         ChargebacksMovedToAvailableSubTotalCardIssuer1 = "other"
)

func (e ChargebacksMovedToAvailableSubTotalCardIssuer1) ToPointer() *ChargebacksMovedToAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *ChargebacksMovedToAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = ChargebacksMovedToAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksMovedToAvailableSubTotalCardIssuer1: %v", v)
	}
}

// ChargebacksMovedToAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type ChargebacksMovedToAvailableSubTotalCardAudience1 string

const (
	ChargebacksMovedToAvailableSubTotalCardAudience1Corporate ChargebacksMovedToAvailableSubTotalCardAudience1 = "corporate"
	ChargebacksMovedToAvailableSubTotalCardAudience1Other     ChargebacksMovedToAvailableSubTotalCardAudience1 = "other"
)

func (e ChargebacksMovedToAvailableSubTotalCardAudience1) ToPointer() *ChargebacksMovedToAvailableSubTotalCardAudience1 {
	return &e
}
func (e *ChargebacksMovedToAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = ChargebacksMovedToAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksMovedToAvailableSubTotalCardAudience1: %v", v)
	}
}

// ChargebacksMovedToAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type ChargebacksMovedToAvailableSubTotalCardRegion1 string

const (
	ChargebacksMovedToAvailableSubTotalCardRegion1IntraEea ChargebacksMovedToAvailableSubTotalCardRegion1 = "intra-eea"
	ChargebacksMovedToAvailableSubTotalCardRegion1IntraEu  ChargebacksMovedToAvailableSubTotalCardRegion1 = "intra-eu"
	ChargebacksMovedToAvailableSubTotalCardRegion1Domestic ChargebacksMovedToAvailableSubTotalCardRegion1 = "domestic"
	ChargebacksMovedToAvailableSubTotalCardRegion1Other    ChargebacksMovedToAvailableSubTotalCardRegion1 = "other"
)

func (e ChargebacksMovedToAvailableSubTotalCardRegion1) ToPointer() *ChargebacksMovedToAvailableSubTotalCardRegion1 {
	return &e
}
func (e *ChargebacksMovedToAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = ChargebacksMovedToAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksMovedToAvailableSubTotalCardRegion1: %v", v)
	}
}

// ChargebacksMovedToAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type ChargebacksMovedToAvailableSubTotalFeeType1 string

const (
	ChargebacksMovedToAvailableSubTotalFeeType1PaymentFee                                        ChargebacksMovedToAvailableSubTotalFeeType1 = "payment-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1DirectDebitFailureFee                             ChargebacksMovedToAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        ChargebacksMovedToAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  ChargebacksMovedToAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1PartnerCommission                                 ChargebacksMovedToAvailableSubTotalFeeType1 = "partner-commission"
	ChargebacksMovedToAvailableSubTotalFeeType1ApplicationFee                                    ChargebacksMovedToAvailableSubTotalFeeType1 = "application-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1CaptureFee                                        ChargebacksMovedToAvailableSubTotalFeeType1 = "capture-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1RefundFee                                         ChargebacksMovedToAvailableSubTotalFeeType1 = "refund-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1ChargebackFee                                     ChargebacksMovedToAvailableSubTotalFeeType1 = "chargeback-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1PaymentNotificationFee                            ChargebacksMovedToAvailableSubTotalFeeType1 = "payment-notification-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1TransferNotificationFee                           ChargebacksMovedToAvailableSubTotalFeeType1 = "transfer-notification-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1PayoutFee                                         ChargebacksMovedToAvailableSubTotalFeeType1 = "payout-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1FeeDiscount                                       ChargebacksMovedToAvailableSubTotalFeeType1 = "fee-discount"
	ChargebacksMovedToAvailableSubTotalFeeType1FeeReimbursement                                  ChargebacksMovedToAvailableSubTotalFeeType1 = "fee-reimbursement"
	ChargebacksMovedToAvailableSubTotalFeeType1PlatformVolumeFee                                 ChargebacksMovedToAvailableSubTotalFeeType1 = "platform-volume-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 ChargebacksMovedToAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1BalanceChargeFee                                  ChargebacksMovedToAvailableSubTotalFeeType1 = "balance-charge-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   ChargebacksMovedToAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1TerminalMonthlyFee                                ChargebacksMovedToAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1AcceptanceRiskFee                                 ChargebacksMovedToAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1TopUpFee                                          ChargebacksMovedToAvailableSubTotalFeeType1 = "top-up-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1PaymentGatewayFee                                 ChargebacksMovedToAvailableSubTotalFeeType1 = "payment-gateway-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   ChargebacksMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee ChargebacksMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             ChargebacksMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           ChargebacksMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	ChargebacksMovedToAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           ChargebacksMovedToAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e ChargebacksMovedToAvailableSubTotalFeeType1) ToPointer() *ChargebacksMovedToAvailableSubTotalFeeType1 {
	return &e
}
func (e *ChargebacksMovedToAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = ChargebacksMovedToAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksMovedToAvailableSubTotalFeeType1: %v", v)
	}
}

// ChargebacksMovedToAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type ChargebacksMovedToAvailableSubTotalPrepaymentPartType1 string

const (
	ChargebacksMovedToAvailableSubTotalPrepaymentPartType1Fee                     ChargebacksMovedToAvailableSubTotalPrepaymentPartType1 = "fee"
	ChargebacksMovedToAvailableSubTotalPrepaymentPartType1FeeReimbursement        ChargebacksMovedToAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	ChargebacksMovedToAvailableSubTotalPrepaymentPartType1FeeDiscount             ChargebacksMovedToAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	ChargebacksMovedToAvailableSubTotalPrepaymentPartType1FeeVat                  ChargebacksMovedToAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	ChargebacksMovedToAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation ChargebacksMovedToAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e ChargebacksMovedToAvailableSubTotalPrepaymentPartType1) ToPointer() *ChargebacksMovedToAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *ChargebacksMovedToAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = ChargebacksMovedToAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksMovedToAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// ChargebacksMovedToAvailableSubTotalTransactionType1 - Represents the transaction type
type ChargebacksMovedToAvailableSubTotalTransactionType1 string

const (
	ChargebacksMovedToAvailableSubTotalTransactionType1Payment                           ChargebacksMovedToAvailableSubTotalTransactionType1 = "payment"
	ChargebacksMovedToAvailableSubTotalTransactionType1SplitPayment                      ChargebacksMovedToAvailableSubTotalTransactionType1 = "split-payment"
	ChargebacksMovedToAvailableSubTotalTransactionType1FailedPayment                     ChargebacksMovedToAvailableSubTotalTransactionType1 = "failed-payment"
	ChargebacksMovedToAvailableSubTotalTransactionType1FailedPlatformSplitPayment        ChargebacksMovedToAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	ChargebacksMovedToAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    ChargebacksMovedToAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	ChargebacksMovedToAvailableSubTotalTransactionType1Capture                           ChargebacksMovedToAvailableSubTotalTransactionType1 = "capture"
	ChargebacksMovedToAvailableSubTotalTransactionType1SplitTransaction                  ChargebacksMovedToAvailableSubTotalTransactionType1 = "split-transaction"
	ChargebacksMovedToAvailableSubTotalTransactionType1Refund                            ChargebacksMovedToAvailableSubTotalTransactionType1 = "refund"
	ChargebacksMovedToAvailableSubTotalTransactionType1PlatformPaymentRefund             ChargebacksMovedToAvailableSubTotalTransactionType1 = "platform-payment-refund"
	ChargebacksMovedToAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     ChargebacksMovedToAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	ChargebacksMovedToAvailableSubTotalTransactionType1RefundCompensation                ChargebacksMovedToAvailableSubTotalTransactionType1 = "refund-compensation"
	ChargebacksMovedToAvailableSubTotalTransactionType1ReturnedRefundCompensation        ChargebacksMovedToAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	ChargebacksMovedToAvailableSubTotalTransactionType1ReturnedRefund                    ChargebacksMovedToAvailableSubTotalTransactionType1 = "returned-refund"
	ChargebacksMovedToAvailableSubTotalTransactionType1Chargeback                        ChargebacksMovedToAvailableSubTotalTransactionType1 = "chargeback"
	ChargebacksMovedToAvailableSubTotalTransactionType1ChargebackReversal                ChargebacksMovedToAvailableSubTotalTransactionType1 = "chargeback-reversal"
	ChargebacksMovedToAvailableSubTotalTransactionType1ChargebackCompensation            ChargebacksMovedToAvailableSubTotalTransactionType1 = "chargeback-compensation"
	ChargebacksMovedToAvailableSubTotalTransactionType1ReversedChargebackCompensation    ChargebacksMovedToAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	ChargebacksMovedToAvailableSubTotalTransactionType1PlatformPaymentChargeback         ChargebacksMovedToAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	ChargebacksMovedToAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback ChargebacksMovedToAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	ChargebacksMovedToAvailableSubTotalTransactionType1FeePrepayment                     ChargebacksMovedToAvailableSubTotalTransactionType1 = "fee-prepayment"
	ChargebacksMovedToAvailableSubTotalTransactionType1OutgoingTransfer                  ChargebacksMovedToAvailableSubTotalTransactionType1 = "outgoing-transfer"
	ChargebacksMovedToAvailableSubTotalTransactionType1IncomingTransfer                  ChargebacksMovedToAvailableSubTotalTransactionType1 = "incoming-transfer"
	ChargebacksMovedToAvailableSubTotalTransactionType1CanceledTransfer                  ChargebacksMovedToAvailableSubTotalTransactionType1 = "canceled-transfer"
	ChargebacksMovedToAvailableSubTotalTransactionType1ReturnedTransfer                  ChargebacksMovedToAvailableSubTotalTransactionType1 = "returned-transfer"
	ChargebacksMovedToAvailableSubTotalTransactionType1BalanceReserve                    ChargebacksMovedToAvailableSubTotalTransactionType1 = "balance-reserve"
	ChargebacksMovedToAvailableSubTotalTransactionType1BalanceReserveReturn              ChargebacksMovedToAvailableSubTotalTransactionType1 = "balance-reserve-return"
	ChargebacksMovedToAvailableSubTotalTransactionType1InvoiceRoundingCompensation       ChargebacksMovedToAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	ChargebacksMovedToAvailableSubTotalTransactionType1RollingReserveHold                ChargebacksMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	ChargebacksMovedToAvailableSubTotalTransactionType1RollingReserveRelease             ChargebacksMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	ChargebacksMovedToAvailableSubTotalTransactionType1BalanceCorrection                 ChargebacksMovedToAvailableSubTotalTransactionType1 = "balance-correction"
	ChargebacksMovedToAvailableSubTotalTransactionType1Repayment                         ChargebacksMovedToAvailableSubTotalTransactionType1 = "repayment"
	ChargebacksMovedToAvailableSubTotalTransactionType1Loan                              ChargebacksMovedToAvailableSubTotalTransactionType1 = "loan"
	ChargebacksMovedToAvailableSubTotalTransactionType1BalanceTopup                      ChargebacksMovedToAvailableSubTotalTransactionType1 = "balance-topup"
	ChargebacksMovedToAvailableSubTotalTransactionType1CashCollateralIssuance            ChargebacksMovedToAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	ChargebacksMovedToAvailableSubTotalTransactionType1CashCollateralRelease             ChargebacksMovedToAvailableSubTotalTransactionType1 = "cash-collateral-release"
	ChargebacksMovedToAvailableSubTotalTransactionType1PendingRollingReserve             ChargebacksMovedToAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	ChargebacksMovedToAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        ChargebacksMovedToAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	ChargebacksMovedToAvailableSubTotalTransactionType1HeldRollingReserve                ChargebacksMovedToAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	ChargebacksMovedToAvailableSubTotalTransactionType1ReleasedRollingReserve            ChargebacksMovedToAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e ChargebacksMovedToAvailableSubTotalTransactionType1) ToPointer() *ChargebacksMovedToAvailableSubTotalTransactionType1 {
	return &e
}
func (e *ChargebacksMovedToAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = ChargebacksMovedToAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksMovedToAvailableSubTotalTransactionType1: %v", v)
	}
}

type ChargebacksMovedToAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *ChargebacksMovedToAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *ChargebacksMovedToAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *ChargebacksMovedToAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *ChargebacksMovedToAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *ChargebacksMovedToAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *ChargebacksMovedToAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *ChargebacksMovedToAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *ChargebacksMovedToAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ChargebacksMovedToAvailableSubTotal1) GetMethod() *ChargebacksMovedToAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *ChargebacksMovedToAvailableSubTotal1) GetCardIssuer() *ChargebacksMovedToAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *ChargebacksMovedToAvailableSubTotal1) GetCardAudience() *ChargebacksMovedToAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *ChargebacksMovedToAvailableSubTotal1) GetCardRegion() *ChargebacksMovedToAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *ChargebacksMovedToAvailableSubTotal1) GetFeeType() *ChargebacksMovedToAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *ChargebacksMovedToAvailableSubTotal1) GetPrepaymentPartType() *ChargebacksMovedToAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *ChargebacksMovedToAvailableSubTotal1) GetTransactionType() *ChargebacksMovedToAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// ChargebacksMovedToAvailableSubtotalMethod2 - Payment type of the transactions
type ChargebacksMovedToAvailableSubtotalMethod2 string

const (
	ChargebacksMovedToAvailableSubtotalMethod2Alma              ChargebacksMovedToAvailableSubtotalMethod2 = "alma"
	ChargebacksMovedToAvailableSubtotalMethod2Bacs              ChargebacksMovedToAvailableSubtotalMethod2 = "bacs"
	ChargebacksMovedToAvailableSubtotalMethod2Applepay          ChargebacksMovedToAvailableSubtotalMethod2 = "applepay"
	ChargebacksMovedToAvailableSubtotalMethod2Bancomatpay       ChargebacksMovedToAvailableSubtotalMethod2 = "bancomatpay"
	ChargebacksMovedToAvailableSubtotalMethod2Bancontact        ChargebacksMovedToAvailableSubtotalMethod2 = "bancontact"
	ChargebacksMovedToAvailableSubtotalMethod2Banktransfer      ChargebacksMovedToAvailableSubtotalMethod2 = "banktransfer"
	ChargebacksMovedToAvailableSubtotalMethod2Belfius           ChargebacksMovedToAvailableSubtotalMethod2 = "belfius"
	ChargebacksMovedToAvailableSubtotalMethod2Billie            ChargebacksMovedToAvailableSubtotalMethod2 = "billie"
	ChargebacksMovedToAvailableSubtotalMethod2Bizum             ChargebacksMovedToAvailableSubtotalMethod2 = "bizum"
	ChargebacksMovedToAvailableSubtotalMethod2Bitcoin           ChargebacksMovedToAvailableSubtotalMethod2 = "bitcoin"
	ChargebacksMovedToAvailableSubtotalMethod2Blik              ChargebacksMovedToAvailableSubtotalMethod2 = "blik"
	ChargebacksMovedToAvailableSubtotalMethod2Creditcard        ChargebacksMovedToAvailableSubtotalMethod2 = "creditcard"
	ChargebacksMovedToAvailableSubtotalMethod2Directdebit       ChargebacksMovedToAvailableSubtotalMethod2 = "directdebit"
	ChargebacksMovedToAvailableSubtotalMethod2Eps               ChargebacksMovedToAvailableSubtotalMethod2 = "eps"
	ChargebacksMovedToAvailableSubtotalMethod2Giftcard          ChargebacksMovedToAvailableSubtotalMethod2 = "giftcard"
	ChargebacksMovedToAvailableSubtotalMethod2Giropay           ChargebacksMovedToAvailableSubtotalMethod2 = "giropay"
	ChargebacksMovedToAvailableSubtotalMethod2Googlepay         ChargebacksMovedToAvailableSubtotalMethod2 = "googlepay"
	ChargebacksMovedToAvailableSubtotalMethod2Ideal             ChargebacksMovedToAvailableSubtotalMethod2 = "ideal"
	ChargebacksMovedToAvailableSubtotalMethod2In3               ChargebacksMovedToAvailableSubtotalMethod2 = "in3"
	ChargebacksMovedToAvailableSubtotalMethod2Inghomepay        ChargebacksMovedToAvailableSubtotalMethod2 = "inghomepay"
	ChargebacksMovedToAvailableSubtotalMethod2Kbc               ChargebacksMovedToAvailableSubtotalMethod2 = "kbc"
	ChargebacksMovedToAvailableSubtotalMethod2Klarnapaylater    ChargebacksMovedToAvailableSubtotalMethod2 = "klarnapaylater"
	ChargebacksMovedToAvailableSubtotalMethod2Klarnapaynow      ChargebacksMovedToAvailableSubtotalMethod2 = "klarnapaynow"
	ChargebacksMovedToAvailableSubtotalMethod2Klarnasliceit     ChargebacksMovedToAvailableSubtotalMethod2 = "klarnasliceit"
	ChargebacksMovedToAvailableSubtotalMethod2Klarna            ChargebacksMovedToAvailableSubtotalMethod2 = "klarna"
	ChargebacksMovedToAvailableSubtotalMethod2Mbway             ChargebacksMovedToAvailableSubtotalMethod2 = "mbway"
	ChargebacksMovedToAvailableSubtotalMethod2Multibanco        ChargebacksMovedToAvailableSubtotalMethod2 = "multibanco"
	ChargebacksMovedToAvailableSubtotalMethod2Mybank            ChargebacksMovedToAvailableSubtotalMethod2 = "mybank"
	ChargebacksMovedToAvailableSubtotalMethod2Paybybank         ChargebacksMovedToAvailableSubtotalMethod2 = "paybybank"
	ChargebacksMovedToAvailableSubtotalMethod2Payconiq          ChargebacksMovedToAvailableSubtotalMethod2 = "payconiq"
	ChargebacksMovedToAvailableSubtotalMethod2Paypal            ChargebacksMovedToAvailableSubtotalMethod2 = "paypal"
	ChargebacksMovedToAvailableSubtotalMethod2Paysafecard       ChargebacksMovedToAvailableSubtotalMethod2 = "paysafecard"
	ChargebacksMovedToAvailableSubtotalMethod2Przelewy24        ChargebacksMovedToAvailableSubtotalMethod2 = "przelewy24"
	ChargebacksMovedToAvailableSubtotalMethod2Riverty           ChargebacksMovedToAvailableSubtotalMethod2 = "riverty"
	ChargebacksMovedToAvailableSubtotalMethod2Satispay          ChargebacksMovedToAvailableSubtotalMethod2 = "satispay"
	ChargebacksMovedToAvailableSubtotalMethod2Podiumcadeaukaart ChargebacksMovedToAvailableSubtotalMethod2 = "podiumcadeaukaart"
	ChargebacksMovedToAvailableSubtotalMethod2Pointofsale       ChargebacksMovedToAvailableSubtotalMethod2 = "pointofsale"
	ChargebacksMovedToAvailableSubtotalMethod2Sofort            ChargebacksMovedToAvailableSubtotalMethod2 = "sofort"
	ChargebacksMovedToAvailableSubtotalMethod2Swish             ChargebacksMovedToAvailableSubtotalMethod2 = "swish"
	ChargebacksMovedToAvailableSubtotalMethod2Trustly           ChargebacksMovedToAvailableSubtotalMethod2 = "trustly"
	ChargebacksMovedToAvailableSubtotalMethod2Twint             ChargebacksMovedToAvailableSubtotalMethod2 = "twint"
	ChargebacksMovedToAvailableSubtotalMethod2Voucher           ChargebacksMovedToAvailableSubtotalMethod2 = "voucher"
)

func (e ChargebacksMovedToAvailableSubtotalMethod2) ToPointer() *ChargebacksMovedToAvailableSubtotalMethod2 {
	return &e
}
func (e *ChargebacksMovedToAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = ChargebacksMovedToAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksMovedToAvailableSubtotalMethod2: %v", v)
	}
}

// ChargebacksMovedToAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type ChargebacksMovedToAvailableSubtotalCardIssuer2 string

const (
	ChargebacksMovedToAvailableSubtotalCardIssuer2Amex          ChargebacksMovedToAvailableSubtotalCardIssuer2 = "amex"
	ChargebacksMovedToAvailableSubtotalCardIssuer2Maestro       ChargebacksMovedToAvailableSubtotalCardIssuer2 = "maestro"
	ChargebacksMovedToAvailableSubtotalCardIssuer2CarteBancaire ChargebacksMovedToAvailableSubtotalCardIssuer2 = "carte-bancaire"
	ChargebacksMovedToAvailableSubtotalCardIssuer2Other         ChargebacksMovedToAvailableSubtotalCardIssuer2 = "other"
)

func (e ChargebacksMovedToAvailableSubtotalCardIssuer2) ToPointer() *ChargebacksMovedToAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *ChargebacksMovedToAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = ChargebacksMovedToAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksMovedToAvailableSubtotalCardIssuer2: %v", v)
	}
}

// ChargebacksMovedToAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type ChargebacksMovedToAvailableSubtotalCardAudience2 string

const (
	ChargebacksMovedToAvailableSubtotalCardAudience2Corporate ChargebacksMovedToAvailableSubtotalCardAudience2 = "corporate"
	ChargebacksMovedToAvailableSubtotalCardAudience2Other     ChargebacksMovedToAvailableSubtotalCardAudience2 = "other"
)

func (e ChargebacksMovedToAvailableSubtotalCardAudience2) ToPointer() *ChargebacksMovedToAvailableSubtotalCardAudience2 {
	return &e
}
func (e *ChargebacksMovedToAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = ChargebacksMovedToAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksMovedToAvailableSubtotalCardAudience2: %v", v)
	}
}

// ChargebacksMovedToAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type ChargebacksMovedToAvailableSubtotalCardRegion2 string

const (
	ChargebacksMovedToAvailableSubtotalCardRegion2IntraEea ChargebacksMovedToAvailableSubtotalCardRegion2 = "intra-eea"
	ChargebacksMovedToAvailableSubtotalCardRegion2IntraEu  ChargebacksMovedToAvailableSubtotalCardRegion2 = "intra-eu"
	ChargebacksMovedToAvailableSubtotalCardRegion2Domestic ChargebacksMovedToAvailableSubtotalCardRegion2 = "domestic"
	ChargebacksMovedToAvailableSubtotalCardRegion2Other    ChargebacksMovedToAvailableSubtotalCardRegion2 = "other"
)

func (e ChargebacksMovedToAvailableSubtotalCardRegion2) ToPointer() *ChargebacksMovedToAvailableSubtotalCardRegion2 {
	return &e
}
func (e *ChargebacksMovedToAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = ChargebacksMovedToAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksMovedToAvailableSubtotalCardRegion2: %v", v)
	}
}

// ChargebacksMovedToAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type ChargebacksMovedToAvailableSubtotalFeeType2 string

const (
	ChargebacksMovedToAvailableSubtotalFeeType2PaymentFee                                        ChargebacksMovedToAvailableSubtotalFeeType2 = "payment-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2DirectDebitFailureFee                             ChargebacksMovedToAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        ChargebacksMovedToAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  ChargebacksMovedToAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2PartnerCommission                                 ChargebacksMovedToAvailableSubtotalFeeType2 = "partner-commission"
	ChargebacksMovedToAvailableSubtotalFeeType2ApplicationFee                                    ChargebacksMovedToAvailableSubtotalFeeType2 = "application-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2CaptureFee                                        ChargebacksMovedToAvailableSubtotalFeeType2 = "capture-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2RefundFee                                         ChargebacksMovedToAvailableSubtotalFeeType2 = "refund-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2ChargebackFee                                     ChargebacksMovedToAvailableSubtotalFeeType2 = "chargeback-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2PaymentNotificationFee                            ChargebacksMovedToAvailableSubtotalFeeType2 = "payment-notification-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2TransferNotificationFee                           ChargebacksMovedToAvailableSubtotalFeeType2 = "transfer-notification-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2PayoutFee                                         ChargebacksMovedToAvailableSubtotalFeeType2 = "payout-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2FeeDiscount                                       ChargebacksMovedToAvailableSubtotalFeeType2 = "fee-discount"
	ChargebacksMovedToAvailableSubtotalFeeType2FeeReimbursement                                  ChargebacksMovedToAvailableSubtotalFeeType2 = "fee-reimbursement"
	ChargebacksMovedToAvailableSubtotalFeeType2PlatformVolumeFee                                 ChargebacksMovedToAvailableSubtotalFeeType2 = "platform-volume-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 ChargebacksMovedToAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2BalanceChargeFee                                  ChargebacksMovedToAvailableSubtotalFeeType2 = "balance-charge-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   ChargebacksMovedToAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2TerminalMonthlyFee                                ChargebacksMovedToAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2AcceptanceRiskFee                                 ChargebacksMovedToAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2TopUpFee                                          ChargebacksMovedToAvailableSubtotalFeeType2 = "top-up-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2PaymentGatewayFee                                 ChargebacksMovedToAvailableSubtotalFeeType2 = "payment-gateway-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   ChargebacksMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee ChargebacksMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             ChargebacksMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           ChargebacksMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	ChargebacksMovedToAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           ChargebacksMovedToAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e ChargebacksMovedToAvailableSubtotalFeeType2) ToPointer() *ChargebacksMovedToAvailableSubtotalFeeType2 {
	return &e
}
func (e *ChargebacksMovedToAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = ChargebacksMovedToAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksMovedToAvailableSubtotalFeeType2: %v", v)
	}
}

// ChargebacksMovedToAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type ChargebacksMovedToAvailableSubtotalPrepaymentPartType2 string

const (
	ChargebacksMovedToAvailableSubtotalPrepaymentPartType2Fee                     ChargebacksMovedToAvailableSubtotalPrepaymentPartType2 = "fee"
	ChargebacksMovedToAvailableSubtotalPrepaymentPartType2FeeReimbursement        ChargebacksMovedToAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	ChargebacksMovedToAvailableSubtotalPrepaymentPartType2FeeDiscount             ChargebacksMovedToAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	ChargebacksMovedToAvailableSubtotalPrepaymentPartType2FeeVat                  ChargebacksMovedToAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	ChargebacksMovedToAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation ChargebacksMovedToAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e ChargebacksMovedToAvailableSubtotalPrepaymentPartType2) ToPointer() *ChargebacksMovedToAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *ChargebacksMovedToAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = ChargebacksMovedToAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksMovedToAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// ChargebacksMovedToAvailableSubtotalTransactionType2 - Represents the transaction type
type ChargebacksMovedToAvailableSubtotalTransactionType2 string

const (
	ChargebacksMovedToAvailableSubtotalTransactionType2Payment                           ChargebacksMovedToAvailableSubtotalTransactionType2 = "payment"
	ChargebacksMovedToAvailableSubtotalTransactionType2SplitPayment                      ChargebacksMovedToAvailableSubtotalTransactionType2 = "split-payment"
	ChargebacksMovedToAvailableSubtotalTransactionType2FailedPayment                     ChargebacksMovedToAvailableSubtotalTransactionType2 = "failed-payment"
	ChargebacksMovedToAvailableSubtotalTransactionType2FailedPlatformSplitPayment        ChargebacksMovedToAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	ChargebacksMovedToAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    ChargebacksMovedToAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	ChargebacksMovedToAvailableSubtotalTransactionType2Capture                           ChargebacksMovedToAvailableSubtotalTransactionType2 = "capture"
	ChargebacksMovedToAvailableSubtotalTransactionType2SplitTransaction                  ChargebacksMovedToAvailableSubtotalTransactionType2 = "split-transaction"
	ChargebacksMovedToAvailableSubtotalTransactionType2Refund                            ChargebacksMovedToAvailableSubtotalTransactionType2 = "refund"
	ChargebacksMovedToAvailableSubtotalTransactionType2PlatformPaymentRefund             ChargebacksMovedToAvailableSubtotalTransactionType2 = "platform-payment-refund"
	ChargebacksMovedToAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     ChargebacksMovedToAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	ChargebacksMovedToAvailableSubtotalTransactionType2RefundCompensation                ChargebacksMovedToAvailableSubtotalTransactionType2 = "refund-compensation"
	ChargebacksMovedToAvailableSubtotalTransactionType2ReturnedRefundCompensation        ChargebacksMovedToAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	ChargebacksMovedToAvailableSubtotalTransactionType2ReturnedRefund                    ChargebacksMovedToAvailableSubtotalTransactionType2 = "returned-refund"
	ChargebacksMovedToAvailableSubtotalTransactionType2Chargeback                        ChargebacksMovedToAvailableSubtotalTransactionType2 = "chargeback"
	ChargebacksMovedToAvailableSubtotalTransactionType2ChargebackReversal                ChargebacksMovedToAvailableSubtotalTransactionType2 = "chargeback-reversal"
	ChargebacksMovedToAvailableSubtotalTransactionType2ChargebackCompensation            ChargebacksMovedToAvailableSubtotalTransactionType2 = "chargeback-compensation"
	ChargebacksMovedToAvailableSubtotalTransactionType2ReversedChargebackCompensation    ChargebacksMovedToAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	ChargebacksMovedToAvailableSubtotalTransactionType2PlatformPaymentChargeback         ChargebacksMovedToAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	ChargebacksMovedToAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback ChargebacksMovedToAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	ChargebacksMovedToAvailableSubtotalTransactionType2FeePrepayment                     ChargebacksMovedToAvailableSubtotalTransactionType2 = "fee-prepayment"
	ChargebacksMovedToAvailableSubtotalTransactionType2OutgoingTransfer                  ChargebacksMovedToAvailableSubtotalTransactionType2 = "outgoing-transfer"
	ChargebacksMovedToAvailableSubtotalTransactionType2IncomingTransfer                  ChargebacksMovedToAvailableSubtotalTransactionType2 = "incoming-transfer"
	ChargebacksMovedToAvailableSubtotalTransactionType2CanceledTransfer                  ChargebacksMovedToAvailableSubtotalTransactionType2 = "canceled-transfer"
	ChargebacksMovedToAvailableSubtotalTransactionType2ReturnedTransfer                  ChargebacksMovedToAvailableSubtotalTransactionType2 = "returned-transfer"
	ChargebacksMovedToAvailableSubtotalTransactionType2BalanceReserve                    ChargebacksMovedToAvailableSubtotalTransactionType2 = "balance-reserve"
	ChargebacksMovedToAvailableSubtotalTransactionType2BalanceReserveReturn              ChargebacksMovedToAvailableSubtotalTransactionType2 = "balance-reserve-return"
	ChargebacksMovedToAvailableSubtotalTransactionType2InvoiceRoundingCompensation       ChargebacksMovedToAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	ChargebacksMovedToAvailableSubtotalTransactionType2RollingReserveHold                ChargebacksMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	ChargebacksMovedToAvailableSubtotalTransactionType2RollingReserveRelease             ChargebacksMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	ChargebacksMovedToAvailableSubtotalTransactionType2BalanceCorrection                 ChargebacksMovedToAvailableSubtotalTransactionType2 = "balance-correction"
	ChargebacksMovedToAvailableSubtotalTransactionType2Repayment                         ChargebacksMovedToAvailableSubtotalTransactionType2 = "repayment"
	ChargebacksMovedToAvailableSubtotalTransactionType2Loan                              ChargebacksMovedToAvailableSubtotalTransactionType2 = "loan"
	ChargebacksMovedToAvailableSubtotalTransactionType2BalanceTopup                      ChargebacksMovedToAvailableSubtotalTransactionType2 = "balance-topup"
	ChargebacksMovedToAvailableSubtotalTransactionType2CashCollateralIssuance            ChargebacksMovedToAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	ChargebacksMovedToAvailableSubtotalTransactionType2CashCollateralRelease             ChargebacksMovedToAvailableSubtotalTransactionType2 = "cash-collateral-release"
	ChargebacksMovedToAvailableSubtotalTransactionType2PendingRollingReserve             ChargebacksMovedToAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	ChargebacksMovedToAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        ChargebacksMovedToAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	ChargebacksMovedToAvailableSubtotalTransactionType2HeldRollingReserve                ChargebacksMovedToAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	ChargebacksMovedToAvailableSubtotalTransactionType2ReleasedRollingReserve            ChargebacksMovedToAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e ChargebacksMovedToAvailableSubtotalTransactionType2) ToPointer() *ChargebacksMovedToAvailableSubtotalTransactionType2 {
	return &e
}
func (e *ChargebacksMovedToAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = ChargebacksMovedToAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksMovedToAvailableSubtotalTransactionType2: %v", v)
	}
}

type ChargebacksMovedToAvailableSubtotal2 struct {
	SubTotals []ChargebacksMovedToAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *ChargebacksMovedToAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *ChargebacksMovedToAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *ChargebacksMovedToAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *ChargebacksMovedToAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *ChargebacksMovedToAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *ChargebacksMovedToAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *ChargebacksMovedToAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *ChargebacksMovedToAvailableSubtotal2) GetSubTotals() []ChargebacksMovedToAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *ChargebacksMovedToAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ChargebacksMovedToAvailableSubtotal2) GetMethod() *ChargebacksMovedToAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *ChargebacksMovedToAvailableSubtotal2) GetCardIssuer() *ChargebacksMovedToAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *ChargebacksMovedToAvailableSubtotal2) GetCardAudience() *ChargebacksMovedToAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *ChargebacksMovedToAvailableSubtotal2) GetCardRegion() *ChargebacksMovedToAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *ChargebacksMovedToAvailableSubtotal2) GetFeeType() *ChargebacksMovedToAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *ChargebacksMovedToAvailableSubtotal2) GetPrepaymentPartType() *ChargebacksMovedToAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *ChargebacksMovedToAvailableSubtotal2) GetTransactionType() *ChargebacksMovedToAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type ChargebacksMovedToAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *ChargebacksMovedToAvailableAmount     `json:"amount,omitempty"`
	Subtotals []ChargebacksMovedToAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *ChargebacksMovedToAvailable) GetAmount() *ChargebacksMovedToAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ChargebacksMovedToAvailable) GetSubtotals() []ChargebacksMovedToAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// ChargebacksImmediatelyAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type ChargebacksImmediatelyAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ChargebacksImmediatelyAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ChargebacksImmediatelyAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ChargebacksImmediatelyAvailableSubTotalMethod1 - Payment type of the transactions
type ChargebacksImmediatelyAvailableSubTotalMethod1 string

const (
	ChargebacksImmediatelyAvailableSubTotalMethod1Alma              ChargebacksImmediatelyAvailableSubTotalMethod1 = "alma"
	ChargebacksImmediatelyAvailableSubTotalMethod1Bacs              ChargebacksImmediatelyAvailableSubTotalMethod1 = "bacs"
	ChargebacksImmediatelyAvailableSubTotalMethod1Applepay          ChargebacksImmediatelyAvailableSubTotalMethod1 = "applepay"
	ChargebacksImmediatelyAvailableSubTotalMethod1Bancomatpay       ChargebacksImmediatelyAvailableSubTotalMethod1 = "bancomatpay"
	ChargebacksImmediatelyAvailableSubTotalMethod1Bancontact        ChargebacksImmediatelyAvailableSubTotalMethod1 = "bancontact"
	ChargebacksImmediatelyAvailableSubTotalMethod1Banktransfer      ChargebacksImmediatelyAvailableSubTotalMethod1 = "banktransfer"
	ChargebacksImmediatelyAvailableSubTotalMethod1Belfius           ChargebacksImmediatelyAvailableSubTotalMethod1 = "belfius"
	ChargebacksImmediatelyAvailableSubTotalMethod1Billie            ChargebacksImmediatelyAvailableSubTotalMethod1 = "billie"
	ChargebacksImmediatelyAvailableSubTotalMethod1Bizum             ChargebacksImmediatelyAvailableSubTotalMethod1 = "bizum"
	ChargebacksImmediatelyAvailableSubTotalMethod1Bitcoin           ChargebacksImmediatelyAvailableSubTotalMethod1 = "bitcoin"
	ChargebacksImmediatelyAvailableSubTotalMethod1Blik              ChargebacksImmediatelyAvailableSubTotalMethod1 = "blik"
	ChargebacksImmediatelyAvailableSubTotalMethod1Creditcard        ChargebacksImmediatelyAvailableSubTotalMethod1 = "creditcard"
	ChargebacksImmediatelyAvailableSubTotalMethod1Directdebit       ChargebacksImmediatelyAvailableSubTotalMethod1 = "directdebit"
	ChargebacksImmediatelyAvailableSubTotalMethod1Eps               ChargebacksImmediatelyAvailableSubTotalMethod1 = "eps"
	ChargebacksImmediatelyAvailableSubTotalMethod1Giftcard          ChargebacksImmediatelyAvailableSubTotalMethod1 = "giftcard"
	ChargebacksImmediatelyAvailableSubTotalMethod1Giropay           ChargebacksImmediatelyAvailableSubTotalMethod1 = "giropay"
	ChargebacksImmediatelyAvailableSubTotalMethod1Googlepay         ChargebacksImmediatelyAvailableSubTotalMethod1 = "googlepay"
	ChargebacksImmediatelyAvailableSubTotalMethod1Ideal             ChargebacksImmediatelyAvailableSubTotalMethod1 = "ideal"
	ChargebacksImmediatelyAvailableSubTotalMethod1In3               ChargebacksImmediatelyAvailableSubTotalMethod1 = "in3"
	ChargebacksImmediatelyAvailableSubTotalMethod1Inghomepay        ChargebacksImmediatelyAvailableSubTotalMethod1 = "inghomepay"
	ChargebacksImmediatelyAvailableSubTotalMethod1Kbc               ChargebacksImmediatelyAvailableSubTotalMethod1 = "kbc"
	ChargebacksImmediatelyAvailableSubTotalMethod1Klarnapaylater    ChargebacksImmediatelyAvailableSubTotalMethod1 = "klarnapaylater"
	ChargebacksImmediatelyAvailableSubTotalMethod1Klarnapaynow      ChargebacksImmediatelyAvailableSubTotalMethod1 = "klarnapaynow"
	ChargebacksImmediatelyAvailableSubTotalMethod1Klarnasliceit     ChargebacksImmediatelyAvailableSubTotalMethod1 = "klarnasliceit"
	ChargebacksImmediatelyAvailableSubTotalMethod1Klarna            ChargebacksImmediatelyAvailableSubTotalMethod1 = "klarna"
	ChargebacksImmediatelyAvailableSubTotalMethod1Mbway             ChargebacksImmediatelyAvailableSubTotalMethod1 = "mbway"
	ChargebacksImmediatelyAvailableSubTotalMethod1Multibanco        ChargebacksImmediatelyAvailableSubTotalMethod1 = "multibanco"
	ChargebacksImmediatelyAvailableSubTotalMethod1Mybank            ChargebacksImmediatelyAvailableSubTotalMethod1 = "mybank"
	ChargebacksImmediatelyAvailableSubTotalMethod1Paybybank         ChargebacksImmediatelyAvailableSubTotalMethod1 = "paybybank"
	ChargebacksImmediatelyAvailableSubTotalMethod1Payconiq          ChargebacksImmediatelyAvailableSubTotalMethod1 = "payconiq"
	ChargebacksImmediatelyAvailableSubTotalMethod1Paypal            ChargebacksImmediatelyAvailableSubTotalMethod1 = "paypal"
	ChargebacksImmediatelyAvailableSubTotalMethod1Paysafecard       ChargebacksImmediatelyAvailableSubTotalMethod1 = "paysafecard"
	ChargebacksImmediatelyAvailableSubTotalMethod1Przelewy24        ChargebacksImmediatelyAvailableSubTotalMethod1 = "przelewy24"
	ChargebacksImmediatelyAvailableSubTotalMethod1Riverty           ChargebacksImmediatelyAvailableSubTotalMethod1 = "riverty"
	ChargebacksImmediatelyAvailableSubTotalMethod1Satispay          ChargebacksImmediatelyAvailableSubTotalMethod1 = "satispay"
	ChargebacksImmediatelyAvailableSubTotalMethod1Podiumcadeaukaart ChargebacksImmediatelyAvailableSubTotalMethod1 = "podiumcadeaukaart"
	ChargebacksImmediatelyAvailableSubTotalMethod1Pointofsale       ChargebacksImmediatelyAvailableSubTotalMethod1 = "pointofsale"
	ChargebacksImmediatelyAvailableSubTotalMethod1Sofort            ChargebacksImmediatelyAvailableSubTotalMethod1 = "sofort"
	ChargebacksImmediatelyAvailableSubTotalMethod1Swish             ChargebacksImmediatelyAvailableSubTotalMethod1 = "swish"
	ChargebacksImmediatelyAvailableSubTotalMethod1Trustly           ChargebacksImmediatelyAvailableSubTotalMethod1 = "trustly"
	ChargebacksImmediatelyAvailableSubTotalMethod1Twint             ChargebacksImmediatelyAvailableSubTotalMethod1 = "twint"
	ChargebacksImmediatelyAvailableSubTotalMethod1Voucher           ChargebacksImmediatelyAvailableSubTotalMethod1 = "voucher"
)

func (e ChargebacksImmediatelyAvailableSubTotalMethod1) ToPointer() *ChargebacksImmediatelyAvailableSubTotalMethod1 {
	return &e
}
func (e *ChargebacksImmediatelyAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = ChargebacksImmediatelyAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksImmediatelyAvailableSubTotalMethod1: %v", v)
	}
}

// ChargebacksImmediatelyAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type ChargebacksImmediatelyAvailableSubTotalCardIssuer1 string

const (
	ChargebacksImmediatelyAvailableSubTotalCardIssuer1Amex          ChargebacksImmediatelyAvailableSubTotalCardIssuer1 = "amex"
	ChargebacksImmediatelyAvailableSubTotalCardIssuer1Maestro       ChargebacksImmediatelyAvailableSubTotalCardIssuer1 = "maestro"
	ChargebacksImmediatelyAvailableSubTotalCardIssuer1CarteBancaire ChargebacksImmediatelyAvailableSubTotalCardIssuer1 = "carte-bancaire"
	ChargebacksImmediatelyAvailableSubTotalCardIssuer1Other         ChargebacksImmediatelyAvailableSubTotalCardIssuer1 = "other"
)

func (e ChargebacksImmediatelyAvailableSubTotalCardIssuer1) ToPointer() *ChargebacksImmediatelyAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *ChargebacksImmediatelyAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = ChargebacksImmediatelyAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksImmediatelyAvailableSubTotalCardIssuer1: %v", v)
	}
}

// ChargebacksImmediatelyAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type ChargebacksImmediatelyAvailableSubTotalCardAudience1 string

const (
	ChargebacksImmediatelyAvailableSubTotalCardAudience1Corporate ChargebacksImmediatelyAvailableSubTotalCardAudience1 = "corporate"
	ChargebacksImmediatelyAvailableSubTotalCardAudience1Other     ChargebacksImmediatelyAvailableSubTotalCardAudience1 = "other"
)

func (e ChargebacksImmediatelyAvailableSubTotalCardAudience1) ToPointer() *ChargebacksImmediatelyAvailableSubTotalCardAudience1 {
	return &e
}
func (e *ChargebacksImmediatelyAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = ChargebacksImmediatelyAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksImmediatelyAvailableSubTotalCardAudience1: %v", v)
	}
}

// ChargebacksImmediatelyAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type ChargebacksImmediatelyAvailableSubTotalCardRegion1 string

const (
	ChargebacksImmediatelyAvailableSubTotalCardRegion1IntraEea ChargebacksImmediatelyAvailableSubTotalCardRegion1 = "intra-eea"
	ChargebacksImmediatelyAvailableSubTotalCardRegion1IntraEu  ChargebacksImmediatelyAvailableSubTotalCardRegion1 = "intra-eu"
	ChargebacksImmediatelyAvailableSubTotalCardRegion1Domestic ChargebacksImmediatelyAvailableSubTotalCardRegion1 = "domestic"
	ChargebacksImmediatelyAvailableSubTotalCardRegion1Other    ChargebacksImmediatelyAvailableSubTotalCardRegion1 = "other"
)

func (e ChargebacksImmediatelyAvailableSubTotalCardRegion1) ToPointer() *ChargebacksImmediatelyAvailableSubTotalCardRegion1 {
	return &e
}
func (e *ChargebacksImmediatelyAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = ChargebacksImmediatelyAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksImmediatelyAvailableSubTotalCardRegion1: %v", v)
	}
}

// ChargebacksImmediatelyAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type ChargebacksImmediatelyAvailableSubTotalFeeType1 string

const (
	ChargebacksImmediatelyAvailableSubTotalFeeType1PaymentFee                                        ChargebacksImmediatelyAvailableSubTotalFeeType1 = "payment-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1DirectDebitFailureFee                             ChargebacksImmediatelyAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        ChargebacksImmediatelyAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  ChargebacksImmediatelyAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1PartnerCommission                                 ChargebacksImmediatelyAvailableSubTotalFeeType1 = "partner-commission"
	ChargebacksImmediatelyAvailableSubTotalFeeType1ApplicationFee                                    ChargebacksImmediatelyAvailableSubTotalFeeType1 = "application-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1CaptureFee                                        ChargebacksImmediatelyAvailableSubTotalFeeType1 = "capture-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1RefundFee                                         ChargebacksImmediatelyAvailableSubTotalFeeType1 = "refund-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1ChargebackFee                                     ChargebacksImmediatelyAvailableSubTotalFeeType1 = "chargeback-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1PaymentNotificationFee                            ChargebacksImmediatelyAvailableSubTotalFeeType1 = "payment-notification-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1TransferNotificationFee                           ChargebacksImmediatelyAvailableSubTotalFeeType1 = "transfer-notification-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1PayoutFee                                         ChargebacksImmediatelyAvailableSubTotalFeeType1 = "payout-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1FeeDiscount                                       ChargebacksImmediatelyAvailableSubTotalFeeType1 = "fee-discount"
	ChargebacksImmediatelyAvailableSubTotalFeeType1FeeReimbursement                                  ChargebacksImmediatelyAvailableSubTotalFeeType1 = "fee-reimbursement"
	ChargebacksImmediatelyAvailableSubTotalFeeType1PlatformVolumeFee                                 ChargebacksImmediatelyAvailableSubTotalFeeType1 = "platform-volume-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 ChargebacksImmediatelyAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1BalanceChargeFee                                  ChargebacksImmediatelyAvailableSubTotalFeeType1 = "balance-charge-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   ChargebacksImmediatelyAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1TerminalMonthlyFee                                ChargebacksImmediatelyAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1AcceptanceRiskFee                                 ChargebacksImmediatelyAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1TopUpFee                                          ChargebacksImmediatelyAvailableSubTotalFeeType1 = "top-up-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1PaymentGatewayFee                                 ChargebacksImmediatelyAvailableSubTotalFeeType1 = "payment-gateway-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   ChargebacksImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee ChargebacksImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             ChargebacksImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           ChargebacksImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	ChargebacksImmediatelyAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           ChargebacksImmediatelyAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e ChargebacksImmediatelyAvailableSubTotalFeeType1) ToPointer() *ChargebacksImmediatelyAvailableSubTotalFeeType1 {
	return &e
}
func (e *ChargebacksImmediatelyAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = ChargebacksImmediatelyAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksImmediatelyAvailableSubTotalFeeType1: %v", v)
	}
}

// ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1 string

const (
	ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1Fee                     ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee"
	ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1FeeReimbursement        ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1FeeDiscount             ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1FeeVat                  ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1) ToPointer() *ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// ChargebacksImmediatelyAvailableSubTotalTransactionType1 - Represents the transaction type
type ChargebacksImmediatelyAvailableSubTotalTransactionType1 string

const (
	ChargebacksImmediatelyAvailableSubTotalTransactionType1Payment                           ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "payment"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1SplitPayment                      ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "split-payment"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1FailedPayment                     ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "failed-payment"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1FailedPlatformSplitPayment        ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1Capture                           ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "capture"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1SplitTransaction                  ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "split-transaction"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1Refund                            ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "refund"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1PlatformPaymentRefund             ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-refund"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1RefundCompensation                ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "refund-compensation"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1ReturnedRefundCompensation        ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1ReturnedRefund                    ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "returned-refund"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1Chargeback                        ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "chargeback"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1ChargebackReversal                ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "chargeback-reversal"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1ChargebackCompensation            ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "chargeback-compensation"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1ReversedChargebackCompensation    ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1PlatformPaymentChargeback         ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1FeePrepayment                     ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "fee-prepayment"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1OutgoingTransfer                  ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "outgoing-transfer"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1IncomingTransfer                  ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "incoming-transfer"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1CanceledTransfer                  ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "canceled-transfer"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1ReturnedTransfer                  ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "returned-transfer"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1BalanceReserve                    ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1BalanceReserveReturn              ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve-return"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1InvoiceRoundingCompensation       ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1RollingReserveHold                ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1RollingReserveRelease             ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1BalanceCorrection                 ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "balance-correction"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1Repayment                         ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "repayment"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1Loan                              ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "loan"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1BalanceTopup                      ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "balance-topup"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1CashCollateralIssuance            ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1CashCollateralRelease             ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-release"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1PendingRollingReserve             ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1HeldRollingReserve                ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	ChargebacksImmediatelyAvailableSubTotalTransactionType1ReleasedRollingReserve            ChargebacksImmediatelyAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e ChargebacksImmediatelyAvailableSubTotalTransactionType1) ToPointer() *ChargebacksImmediatelyAvailableSubTotalTransactionType1 {
	return &e
}
func (e *ChargebacksImmediatelyAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = ChargebacksImmediatelyAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksImmediatelyAvailableSubTotalTransactionType1: %v", v)
	}
}

type ChargebacksImmediatelyAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *ChargebacksImmediatelyAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *ChargebacksImmediatelyAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *ChargebacksImmediatelyAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *ChargebacksImmediatelyAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *ChargebacksImmediatelyAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *ChargebacksImmediatelyAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *ChargebacksImmediatelyAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ChargebacksImmediatelyAvailableSubTotal1) GetMethod() *ChargebacksImmediatelyAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *ChargebacksImmediatelyAvailableSubTotal1) GetCardIssuer() *ChargebacksImmediatelyAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *ChargebacksImmediatelyAvailableSubTotal1) GetCardAudience() *ChargebacksImmediatelyAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *ChargebacksImmediatelyAvailableSubTotal1) GetCardRegion() *ChargebacksImmediatelyAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *ChargebacksImmediatelyAvailableSubTotal1) GetFeeType() *ChargebacksImmediatelyAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *ChargebacksImmediatelyAvailableSubTotal1) GetPrepaymentPartType() *ChargebacksImmediatelyAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *ChargebacksImmediatelyAvailableSubTotal1) GetTransactionType() *ChargebacksImmediatelyAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// ChargebacksImmediatelyAvailableSubtotalMethod2 - Payment type of the transactions
type ChargebacksImmediatelyAvailableSubtotalMethod2 string

const (
	ChargebacksImmediatelyAvailableSubtotalMethod2Alma              ChargebacksImmediatelyAvailableSubtotalMethod2 = "alma"
	ChargebacksImmediatelyAvailableSubtotalMethod2Bacs              ChargebacksImmediatelyAvailableSubtotalMethod2 = "bacs"
	ChargebacksImmediatelyAvailableSubtotalMethod2Applepay          ChargebacksImmediatelyAvailableSubtotalMethod2 = "applepay"
	ChargebacksImmediatelyAvailableSubtotalMethod2Bancomatpay       ChargebacksImmediatelyAvailableSubtotalMethod2 = "bancomatpay"
	ChargebacksImmediatelyAvailableSubtotalMethod2Bancontact        ChargebacksImmediatelyAvailableSubtotalMethod2 = "bancontact"
	ChargebacksImmediatelyAvailableSubtotalMethod2Banktransfer      ChargebacksImmediatelyAvailableSubtotalMethod2 = "banktransfer"
	ChargebacksImmediatelyAvailableSubtotalMethod2Belfius           ChargebacksImmediatelyAvailableSubtotalMethod2 = "belfius"
	ChargebacksImmediatelyAvailableSubtotalMethod2Billie            ChargebacksImmediatelyAvailableSubtotalMethod2 = "billie"
	ChargebacksImmediatelyAvailableSubtotalMethod2Bizum             ChargebacksImmediatelyAvailableSubtotalMethod2 = "bizum"
	ChargebacksImmediatelyAvailableSubtotalMethod2Bitcoin           ChargebacksImmediatelyAvailableSubtotalMethod2 = "bitcoin"
	ChargebacksImmediatelyAvailableSubtotalMethod2Blik              ChargebacksImmediatelyAvailableSubtotalMethod2 = "blik"
	ChargebacksImmediatelyAvailableSubtotalMethod2Creditcard        ChargebacksImmediatelyAvailableSubtotalMethod2 = "creditcard"
	ChargebacksImmediatelyAvailableSubtotalMethod2Directdebit       ChargebacksImmediatelyAvailableSubtotalMethod2 = "directdebit"
	ChargebacksImmediatelyAvailableSubtotalMethod2Eps               ChargebacksImmediatelyAvailableSubtotalMethod2 = "eps"
	ChargebacksImmediatelyAvailableSubtotalMethod2Giftcard          ChargebacksImmediatelyAvailableSubtotalMethod2 = "giftcard"
	ChargebacksImmediatelyAvailableSubtotalMethod2Giropay           ChargebacksImmediatelyAvailableSubtotalMethod2 = "giropay"
	ChargebacksImmediatelyAvailableSubtotalMethod2Googlepay         ChargebacksImmediatelyAvailableSubtotalMethod2 = "googlepay"
	ChargebacksImmediatelyAvailableSubtotalMethod2Ideal             ChargebacksImmediatelyAvailableSubtotalMethod2 = "ideal"
	ChargebacksImmediatelyAvailableSubtotalMethod2In3               ChargebacksImmediatelyAvailableSubtotalMethod2 = "in3"
	ChargebacksImmediatelyAvailableSubtotalMethod2Inghomepay        ChargebacksImmediatelyAvailableSubtotalMethod2 = "inghomepay"
	ChargebacksImmediatelyAvailableSubtotalMethod2Kbc               ChargebacksImmediatelyAvailableSubtotalMethod2 = "kbc"
	ChargebacksImmediatelyAvailableSubtotalMethod2Klarnapaylater    ChargebacksImmediatelyAvailableSubtotalMethod2 = "klarnapaylater"
	ChargebacksImmediatelyAvailableSubtotalMethod2Klarnapaynow      ChargebacksImmediatelyAvailableSubtotalMethod2 = "klarnapaynow"
	ChargebacksImmediatelyAvailableSubtotalMethod2Klarnasliceit     ChargebacksImmediatelyAvailableSubtotalMethod2 = "klarnasliceit"
	ChargebacksImmediatelyAvailableSubtotalMethod2Klarna            ChargebacksImmediatelyAvailableSubtotalMethod2 = "klarna"
	ChargebacksImmediatelyAvailableSubtotalMethod2Mbway             ChargebacksImmediatelyAvailableSubtotalMethod2 = "mbway"
	ChargebacksImmediatelyAvailableSubtotalMethod2Multibanco        ChargebacksImmediatelyAvailableSubtotalMethod2 = "multibanco"
	ChargebacksImmediatelyAvailableSubtotalMethod2Mybank            ChargebacksImmediatelyAvailableSubtotalMethod2 = "mybank"
	ChargebacksImmediatelyAvailableSubtotalMethod2Paybybank         ChargebacksImmediatelyAvailableSubtotalMethod2 = "paybybank"
	ChargebacksImmediatelyAvailableSubtotalMethod2Payconiq          ChargebacksImmediatelyAvailableSubtotalMethod2 = "payconiq"
	ChargebacksImmediatelyAvailableSubtotalMethod2Paypal            ChargebacksImmediatelyAvailableSubtotalMethod2 = "paypal"
	ChargebacksImmediatelyAvailableSubtotalMethod2Paysafecard       ChargebacksImmediatelyAvailableSubtotalMethod2 = "paysafecard"
	ChargebacksImmediatelyAvailableSubtotalMethod2Przelewy24        ChargebacksImmediatelyAvailableSubtotalMethod2 = "przelewy24"
	ChargebacksImmediatelyAvailableSubtotalMethod2Riverty           ChargebacksImmediatelyAvailableSubtotalMethod2 = "riverty"
	ChargebacksImmediatelyAvailableSubtotalMethod2Satispay          ChargebacksImmediatelyAvailableSubtotalMethod2 = "satispay"
	ChargebacksImmediatelyAvailableSubtotalMethod2Podiumcadeaukaart ChargebacksImmediatelyAvailableSubtotalMethod2 = "podiumcadeaukaart"
	ChargebacksImmediatelyAvailableSubtotalMethod2Pointofsale       ChargebacksImmediatelyAvailableSubtotalMethod2 = "pointofsale"
	ChargebacksImmediatelyAvailableSubtotalMethod2Sofort            ChargebacksImmediatelyAvailableSubtotalMethod2 = "sofort"
	ChargebacksImmediatelyAvailableSubtotalMethod2Swish             ChargebacksImmediatelyAvailableSubtotalMethod2 = "swish"
	ChargebacksImmediatelyAvailableSubtotalMethod2Trustly           ChargebacksImmediatelyAvailableSubtotalMethod2 = "trustly"
	ChargebacksImmediatelyAvailableSubtotalMethod2Twint             ChargebacksImmediatelyAvailableSubtotalMethod2 = "twint"
	ChargebacksImmediatelyAvailableSubtotalMethod2Voucher           ChargebacksImmediatelyAvailableSubtotalMethod2 = "voucher"
)

func (e ChargebacksImmediatelyAvailableSubtotalMethod2) ToPointer() *ChargebacksImmediatelyAvailableSubtotalMethod2 {
	return &e
}
func (e *ChargebacksImmediatelyAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = ChargebacksImmediatelyAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksImmediatelyAvailableSubtotalMethod2: %v", v)
	}
}

// ChargebacksImmediatelyAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type ChargebacksImmediatelyAvailableSubtotalCardIssuer2 string

const (
	ChargebacksImmediatelyAvailableSubtotalCardIssuer2Amex          ChargebacksImmediatelyAvailableSubtotalCardIssuer2 = "amex"
	ChargebacksImmediatelyAvailableSubtotalCardIssuer2Maestro       ChargebacksImmediatelyAvailableSubtotalCardIssuer2 = "maestro"
	ChargebacksImmediatelyAvailableSubtotalCardIssuer2CarteBancaire ChargebacksImmediatelyAvailableSubtotalCardIssuer2 = "carte-bancaire"
	ChargebacksImmediatelyAvailableSubtotalCardIssuer2Other         ChargebacksImmediatelyAvailableSubtotalCardIssuer2 = "other"
)

func (e ChargebacksImmediatelyAvailableSubtotalCardIssuer2) ToPointer() *ChargebacksImmediatelyAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *ChargebacksImmediatelyAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = ChargebacksImmediatelyAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksImmediatelyAvailableSubtotalCardIssuer2: %v", v)
	}
}

// ChargebacksImmediatelyAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type ChargebacksImmediatelyAvailableSubtotalCardAudience2 string

const (
	ChargebacksImmediatelyAvailableSubtotalCardAudience2Corporate ChargebacksImmediatelyAvailableSubtotalCardAudience2 = "corporate"
	ChargebacksImmediatelyAvailableSubtotalCardAudience2Other     ChargebacksImmediatelyAvailableSubtotalCardAudience2 = "other"
)

func (e ChargebacksImmediatelyAvailableSubtotalCardAudience2) ToPointer() *ChargebacksImmediatelyAvailableSubtotalCardAudience2 {
	return &e
}
func (e *ChargebacksImmediatelyAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = ChargebacksImmediatelyAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksImmediatelyAvailableSubtotalCardAudience2: %v", v)
	}
}

// ChargebacksImmediatelyAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type ChargebacksImmediatelyAvailableSubtotalCardRegion2 string

const (
	ChargebacksImmediatelyAvailableSubtotalCardRegion2IntraEea ChargebacksImmediatelyAvailableSubtotalCardRegion2 = "intra-eea"
	ChargebacksImmediatelyAvailableSubtotalCardRegion2IntraEu  ChargebacksImmediatelyAvailableSubtotalCardRegion2 = "intra-eu"
	ChargebacksImmediatelyAvailableSubtotalCardRegion2Domestic ChargebacksImmediatelyAvailableSubtotalCardRegion2 = "domestic"
	ChargebacksImmediatelyAvailableSubtotalCardRegion2Other    ChargebacksImmediatelyAvailableSubtotalCardRegion2 = "other"
)

func (e ChargebacksImmediatelyAvailableSubtotalCardRegion2) ToPointer() *ChargebacksImmediatelyAvailableSubtotalCardRegion2 {
	return &e
}
func (e *ChargebacksImmediatelyAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = ChargebacksImmediatelyAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksImmediatelyAvailableSubtotalCardRegion2: %v", v)
	}
}

// ChargebacksImmediatelyAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type ChargebacksImmediatelyAvailableSubtotalFeeType2 string

const (
	ChargebacksImmediatelyAvailableSubtotalFeeType2PaymentFee                                        ChargebacksImmediatelyAvailableSubtotalFeeType2 = "payment-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2DirectDebitFailureFee                             ChargebacksImmediatelyAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        ChargebacksImmediatelyAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  ChargebacksImmediatelyAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2PartnerCommission                                 ChargebacksImmediatelyAvailableSubtotalFeeType2 = "partner-commission"
	ChargebacksImmediatelyAvailableSubtotalFeeType2ApplicationFee                                    ChargebacksImmediatelyAvailableSubtotalFeeType2 = "application-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2CaptureFee                                        ChargebacksImmediatelyAvailableSubtotalFeeType2 = "capture-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2RefundFee                                         ChargebacksImmediatelyAvailableSubtotalFeeType2 = "refund-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2ChargebackFee                                     ChargebacksImmediatelyAvailableSubtotalFeeType2 = "chargeback-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2PaymentNotificationFee                            ChargebacksImmediatelyAvailableSubtotalFeeType2 = "payment-notification-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2TransferNotificationFee                           ChargebacksImmediatelyAvailableSubtotalFeeType2 = "transfer-notification-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2PayoutFee                                         ChargebacksImmediatelyAvailableSubtotalFeeType2 = "payout-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2FeeDiscount                                       ChargebacksImmediatelyAvailableSubtotalFeeType2 = "fee-discount"
	ChargebacksImmediatelyAvailableSubtotalFeeType2FeeReimbursement                                  ChargebacksImmediatelyAvailableSubtotalFeeType2 = "fee-reimbursement"
	ChargebacksImmediatelyAvailableSubtotalFeeType2PlatformVolumeFee                                 ChargebacksImmediatelyAvailableSubtotalFeeType2 = "platform-volume-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 ChargebacksImmediatelyAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2BalanceChargeFee                                  ChargebacksImmediatelyAvailableSubtotalFeeType2 = "balance-charge-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   ChargebacksImmediatelyAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2TerminalMonthlyFee                                ChargebacksImmediatelyAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2AcceptanceRiskFee                                 ChargebacksImmediatelyAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2TopUpFee                                          ChargebacksImmediatelyAvailableSubtotalFeeType2 = "top-up-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2PaymentGatewayFee                                 ChargebacksImmediatelyAvailableSubtotalFeeType2 = "payment-gateway-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   ChargebacksImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee ChargebacksImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             ChargebacksImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           ChargebacksImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	ChargebacksImmediatelyAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           ChargebacksImmediatelyAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e ChargebacksImmediatelyAvailableSubtotalFeeType2) ToPointer() *ChargebacksImmediatelyAvailableSubtotalFeeType2 {
	return &e
}
func (e *ChargebacksImmediatelyAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = ChargebacksImmediatelyAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksImmediatelyAvailableSubtotalFeeType2: %v", v)
	}
}

// ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2 string

const (
	ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2Fee                     ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee"
	ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2FeeReimbursement        ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2FeeDiscount             ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2FeeVat                  ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2) ToPointer() *ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// ChargebacksImmediatelyAvailableSubtotalTransactionType2 - Represents the transaction type
type ChargebacksImmediatelyAvailableSubtotalTransactionType2 string

const (
	ChargebacksImmediatelyAvailableSubtotalTransactionType2Payment                           ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "payment"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2SplitPayment                      ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "split-payment"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2FailedPayment                     ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "failed-payment"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2FailedPlatformSplitPayment        ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2Capture                           ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "capture"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2SplitTransaction                  ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "split-transaction"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2Refund                            ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "refund"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2PlatformPaymentRefund             ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-refund"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2RefundCompensation                ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "refund-compensation"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2ReturnedRefundCompensation        ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2ReturnedRefund                    ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "returned-refund"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2Chargeback                        ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "chargeback"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2ChargebackReversal                ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "chargeback-reversal"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2ChargebackCompensation            ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "chargeback-compensation"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2ReversedChargebackCompensation    ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2PlatformPaymentChargeback         ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2FeePrepayment                     ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "fee-prepayment"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2OutgoingTransfer                  ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "outgoing-transfer"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2IncomingTransfer                  ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "incoming-transfer"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2CanceledTransfer                  ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "canceled-transfer"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2ReturnedTransfer                  ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "returned-transfer"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2BalanceReserve                    ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2BalanceReserveReturn              ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve-return"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2InvoiceRoundingCompensation       ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2RollingReserveHold                ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2RollingReserveRelease             ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2BalanceCorrection                 ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "balance-correction"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2Repayment                         ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "repayment"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2Loan                              ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "loan"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2BalanceTopup                      ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "balance-topup"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2CashCollateralIssuance            ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2CashCollateralRelease             ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-release"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2PendingRollingReserve             ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2HeldRollingReserve                ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	ChargebacksImmediatelyAvailableSubtotalTransactionType2ReleasedRollingReserve            ChargebacksImmediatelyAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e ChargebacksImmediatelyAvailableSubtotalTransactionType2) ToPointer() *ChargebacksImmediatelyAvailableSubtotalTransactionType2 {
	return &e
}
func (e *ChargebacksImmediatelyAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = ChargebacksImmediatelyAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargebacksImmediatelyAvailableSubtotalTransactionType2: %v", v)
	}
}

type ChargebacksImmediatelyAvailableSubtotal2 struct {
	SubTotals []ChargebacksImmediatelyAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *ChargebacksImmediatelyAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *ChargebacksImmediatelyAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *ChargebacksImmediatelyAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *ChargebacksImmediatelyAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *ChargebacksImmediatelyAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *ChargebacksImmediatelyAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *ChargebacksImmediatelyAvailableSubtotal2) GetSubTotals() []ChargebacksImmediatelyAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *ChargebacksImmediatelyAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ChargebacksImmediatelyAvailableSubtotal2) GetMethod() *ChargebacksImmediatelyAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *ChargebacksImmediatelyAvailableSubtotal2) GetCardIssuer() *ChargebacksImmediatelyAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *ChargebacksImmediatelyAvailableSubtotal2) GetCardAudience() *ChargebacksImmediatelyAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *ChargebacksImmediatelyAvailableSubtotal2) GetCardRegion() *ChargebacksImmediatelyAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *ChargebacksImmediatelyAvailableSubtotal2) GetFeeType() *ChargebacksImmediatelyAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *ChargebacksImmediatelyAvailableSubtotal2) GetPrepaymentPartType() *ChargebacksImmediatelyAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *ChargebacksImmediatelyAvailableSubtotal2) GetTransactionType() *ChargebacksImmediatelyAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type ChargebacksImmediatelyAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *ChargebacksImmediatelyAvailableAmount     `json:"amount,omitempty"`
	Subtotals []ChargebacksImmediatelyAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *ChargebacksImmediatelyAvailable) GetAmount() *ChargebacksImmediatelyAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ChargebacksImmediatelyAvailable) GetSubtotals() []ChargebacksImmediatelyAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// GetBalanceReportChargebacks - Only available on `transaction-categories` grouping.
type GetBalanceReportChargebacks struct {
	Pending              *ChargebacksPending              `json:"pending,omitempty"`
	MovedToAvailable     *ChargebacksMovedToAvailable     `json:"movedToAvailable,omitempty"`
	ImmediatelyAvailable *ChargebacksImmediatelyAvailable `json:"immediatelyAvailable,omitempty"`
}

func (o *GetBalanceReportChargebacks) GetPending() *ChargebacksPending {
	if o == nil {
		return nil
	}
	return o.Pending
}

func (o *GetBalanceReportChargebacks) GetMovedToAvailable() *ChargebacksMovedToAvailable {
	if o == nil {
		return nil
	}
	return o.MovedToAvailable
}

func (o *GetBalanceReportChargebacks) GetImmediatelyAvailable() *ChargebacksImmediatelyAvailable {
	if o == nil {
		return nil
	}
	return o.ImmediatelyAvailable
}

// CapitalPendingAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type CapitalPendingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CapitalPendingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CapitalPendingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CapitalPendingSubTotalMethod1 - Payment type of the transactions
type CapitalPendingSubTotalMethod1 string

const (
	CapitalPendingSubTotalMethod1Alma              CapitalPendingSubTotalMethod1 = "alma"
	CapitalPendingSubTotalMethod1Bacs              CapitalPendingSubTotalMethod1 = "bacs"
	CapitalPendingSubTotalMethod1Applepay          CapitalPendingSubTotalMethod1 = "applepay"
	CapitalPendingSubTotalMethod1Bancomatpay       CapitalPendingSubTotalMethod1 = "bancomatpay"
	CapitalPendingSubTotalMethod1Bancontact        CapitalPendingSubTotalMethod1 = "bancontact"
	CapitalPendingSubTotalMethod1Banktransfer      CapitalPendingSubTotalMethod1 = "banktransfer"
	CapitalPendingSubTotalMethod1Belfius           CapitalPendingSubTotalMethod1 = "belfius"
	CapitalPendingSubTotalMethod1Billie            CapitalPendingSubTotalMethod1 = "billie"
	CapitalPendingSubTotalMethod1Bizum             CapitalPendingSubTotalMethod1 = "bizum"
	CapitalPendingSubTotalMethod1Bitcoin           CapitalPendingSubTotalMethod1 = "bitcoin"
	CapitalPendingSubTotalMethod1Blik              CapitalPendingSubTotalMethod1 = "blik"
	CapitalPendingSubTotalMethod1Creditcard        CapitalPendingSubTotalMethod1 = "creditcard"
	CapitalPendingSubTotalMethod1Directdebit       CapitalPendingSubTotalMethod1 = "directdebit"
	CapitalPendingSubTotalMethod1Eps               CapitalPendingSubTotalMethod1 = "eps"
	CapitalPendingSubTotalMethod1Giftcard          CapitalPendingSubTotalMethod1 = "giftcard"
	CapitalPendingSubTotalMethod1Giropay           CapitalPendingSubTotalMethod1 = "giropay"
	CapitalPendingSubTotalMethod1Googlepay         CapitalPendingSubTotalMethod1 = "googlepay"
	CapitalPendingSubTotalMethod1Ideal             CapitalPendingSubTotalMethod1 = "ideal"
	CapitalPendingSubTotalMethod1In3               CapitalPendingSubTotalMethod1 = "in3"
	CapitalPendingSubTotalMethod1Inghomepay        CapitalPendingSubTotalMethod1 = "inghomepay"
	CapitalPendingSubTotalMethod1Kbc               CapitalPendingSubTotalMethod1 = "kbc"
	CapitalPendingSubTotalMethod1Klarnapaylater    CapitalPendingSubTotalMethod1 = "klarnapaylater"
	CapitalPendingSubTotalMethod1Klarnapaynow      CapitalPendingSubTotalMethod1 = "klarnapaynow"
	CapitalPendingSubTotalMethod1Klarnasliceit     CapitalPendingSubTotalMethod1 = "klarnasliceit"
	CapitalPendingSubTotalMethod1Klarna            CapitalPendingSubTotalMethod1 = "klarna"
	CapitalPendingSubTotalMethod1Mbway             CapitalPendingSubTotalMethod1 = "mbway"
	CapitalPendingSubTotalMethod1Multibanco        CapitalPendingSubTotalMethod1 = "multibanco"
	CapitalPendingSubTotalMethod1Mybank            CapitalPendingSubTotalMethod1 = "mybank"
	CapitalPendingSubTotalMethod1Paybybank         CapitalPendingSubTotalMethod1 = "paybybank"
	CapitalPendingSubTotalMethod1Payconiq          CapitalPendingSubTotalMethod1 = "payconiq"
	CapitalPendingSubTotalMethod1Paypal            CapitalPendingSubTotalMethod1 = "paypal"
	CapitalPendingSubTotalMethod1Paysafecard       CapitalPendingSubTotalMethod1 = "paysafecard"
	CapitalPendingSubTotalMethod1Przelewy24        CapitalPendingSubTotalMethod1 = "przelewy24"
	CapitalPendingSubTotalMethod1Riverty           CapitalPendingSubTotalMethod1 = "riverty"
	CapitalPendingSubTotalMethod1Satispay          CapitalPendingSubTotalMethod1 = "satispay"
	CapitalPendingSubTotalMethod1Podiumcadeaukaart CapitalPendingSubTotalMethod1 = "podiumcadeaukaart"
	CapitalPendingSubTotalMethod1Pointofsale       CapitalPendingSubTotalMethod1 = "pointofsale"
	CapitalPendingSubTotalMethod1Sofort            CapitalPendingSubTotalMethod1 = "sofort"
	CapitalPendingSubTotalMethod1Swish             CapitalPendingSubTotalMethod1 = "swish"
	CapitalPendingSubTotalMethod1Trustly           CapitalPendingSubTotalMethod1 = "trustly"
	CapitalPendingSubTotalMethod1Twint             CapitalPendingSubTotalMethod1 = "twint"
	CapitalPendingSubTotalMethod1Voucher           CapitalPendingSubTotalMethod1 = "voucher"
)

func (e CapitalPendingSubTotalMethod1) ToPointer() *CapitalPendingSubTotalMethod1 {
	return &e
}
func (e *CapitalPendingSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = CapitalPendingSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalPendingSubTotalMethod1: %v", v)
	}
}

// CapitalPendingSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type CapitalPendingSubTotalCardIssuer1 string

const (
	CapitalPendingSubTotalCardIssuer1Amex          CapitalPendingSubTotalCardIssuer1 = "amex"
	CapitalPendingSubTotalCardIssuer1Maestro       CapitalPendingSubTotalCardIssuer1 = "maestro"
	CapitalPendingSubTotalCardIssuer1CarteBancaire CapitalPendingSubTotalCardIssuer1 = "carte-bancaire"
	CapitalPendingSubTotalCardIssuer1Other         CapitalPendingSubTotalCardIssuer1 = "other"
)

func (e CapitalPendingSubTotalCardIssuer1) ToPointer() *CapitalPendingSubTotalCardIssuer1 {
	return &e
}
func (e *CapitalPendingSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = CapitalPendingSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalPendingSubTotalCardIssuer1: %v", v)
	}
}

// CapitalPendingSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type CapitalPendingSubTotalCardAudience1 string

const (
	CapitalPendingSubTotalCardAudience1Corporate CapitalPendingSubTotalCardAudience1 = "corporate"
	CapitalPendingSubTotalCardAudience1Other     CapitalPendingSubTotalCardAudience1 = "other"
)

func (e CapitalPendingSubTotalCardAudience1) ToPointer() *CapitalPendingSubTotalCardAudience1 {
	return &e
}
func (e *CapitalPendingSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = CapitalPendingSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalPendingSubTotalCardAudience1: %v", v)
	}
}

// CapitalPendingSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type CapitalPendingSubTotalCardRegion1 string

const (
	CapitalPendingSubTotalCardRegion1IntraEea CapitalPendingSubTotalCardRegion1 = "intra-eea"
	CapitalPendingSubTotalCardRegion1IntraEu  CapitalPendingSubTotalCardRegion1 = "intra-eu"
	CapitalPendingSubTotalCardRegion1Domestic CapitalPendingSubTotalCardRegion1 = "domestic"
	CapitalPendingSubTotalCardRegion1Other    CapitalPendingSubTotalCardRegion1 = "other"
)

func (e CapitalPendingSubTotalCardRegion1) ToPointer() *CapitalPendingSubTotalCardRegion1 {
	return &e
}
func (e *CapitalPendingSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = CapitalPendingSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalPendingSubTotalCardRegion1: %v", v)
	}
}

// CapitalPendingSubTotalFeeType1 - Present when the transaction represents a fee.
type CapitalPendingSubTotalFeeType1 string

const (
	CapitalPendingSubTotalFeeType1PaymentFee                                        CapitalPendingSubTotalFeeType1 = "payment-fee"
	CapitalPendingSubTotalFeeType1DirectDebitFailureFee                             CapitalPendingSubTotalFeeType1 = "direct-debit-failure-fee"
	CapitalPendingSubTotalFeeType1UnauthorizedDirectDebitFee                        CapitalPendingSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	CapitalPendingSubTotalFeeType1BankChargedDirectDebitFailureFee                  CapitalPendingSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	CapitalPendingSubTotalFeeType1PartnerCommission                                 CapitalPendingSubTotalFeeType1 = "partner-commission"
	CapitalPendingSubTotalFeeType1ApplicationFee                                    CapitalPendingSubTotalFeeType1 = "application-fee"
	CapitalPendingSubTotalFeeType1CaptureFee                                        CapitalPendingSubTotalFeeType1 = "capture-fee"
	CapitalPendingSubTotalFeeType1RefundFee                                         CapitalPendingSubTotalFeeType1 = "refund-fee"
	CapitalPendingSubTotalFeeType1ChargebackFee                                     CapitalPendingSubTotalFeeType1 = "chargeback-fee"
	CapitalPendingSubTotalFeeType1PaymentNotificationFee                            CapitalPendingSubTotalFeeType1 = "payment-notification-fee"
	CapitalPendingSubTotalFeeType1TransferNotificationFee                           CapitalPendingSubTotalFeeType1 = "transfer-notification-fee"
	CapitalPendingSubTotalFeeType1PayoutFee                                         CapitalPendingSubTotalFeeType1 = "payout-fee"
	CapitalPendingSubTotalFeeType1FeeDiscount                                       CapitalPendingSubTotalFeeType1 = "fee-discount"
	CapitalPendingSubTotalFeeType1FeeReimbursement                                  CapitalPendingSubTotalFeeType1 = "fee-reimbursement"
	CapitalPendingSubTotalFeeType1PlatformVolumeFee                                 CapitalPendingSubTotalFeeType1 = "platform-volume-fee"
	CapitalPendingSubTotalFeeType1PlatformConnectedOrganizationsFee                 CapitalPendingSubTotalFeeType1 = "platform-connected-organizations-fee"
	CapitalPendingSubTotalFeeType1BalanceChargeFee                                  CapitalPendingSubTotalFeeType1 = "balance-charge-fee"
	CapitalPendingSubTotalFeeType1ThreedsAuthenticationAttemptFee                   CapitalPendingSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	CapitalPendingSubTotalFeeType1TerminalMonthlyFee                                CapitalPendingSubTotalFeeType1 = "terminal-monthly-fee"
	CapitalPendingSubTotalFeeType1AcceptanceRiskFee                                 CapitalPendingSubTotalFeeType1 = "acceptance-risk-fee"
	CapitalPendingSubTotalFeeType1TopUpFee                                          CapitalPendingSubTotalFeeType1 = "top-up-fee"
	CapitalPendingSubTotalFeeType1PaymentGatewayFee                                 CapitalPendingSubTotalFeeType1 = "payment-gateway-fee"
	CapitalPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   CapitalPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	CapitalPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee CapitalPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	CapitalPendingSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             CapitalPendingSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	CapitalPendingSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           CapitalPendingSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	CapitalPendingSubTotalFeeType1MinimumInvoiceAmountFee                           CapitalPendingSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e CapitalPendingSubTotalFeeType1) ToPointer() *CapitalPendingSubTotalFeeType1 {
	return &e
}
func (e *CapitalPendingSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = CapitalPendingSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalPendingSubTotalFeeType1: %v", v)
	}
}

// CapitalPendingSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type CapitalPendingSubTotalPrepaymentPartType1 string

const (
	CapitalPendingSubTotalPrepaymentPartType1Fee                     CapitalPendingSubTotalPrepaymentPartType1 = "fee"
	CapitalPendingSubTotalPrepaymentPartType1FeeReimbursement        CapitalPendingSubTotalPrepaymentPartType1 = "fee-reimbursement"
	CapitalPendingSubTotalPrepaymentPartType1FeeDiscount             CapitalPendingSubTotalPrepaymentPartType1 = "fee-discount"
	CapitalPendingSubTotalPrepaymentPartType1FeeVat                  CapitalPendingSubTotalPrepaymentPartType1 = "fee-vat"
	CapitalPendingSubTotalPrepaymentPartType1FeeRoundingCompensation CapitalPendingSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e CapitalPendingSubTotalPrepaymentPartType1) ToPointer() *CapitalPendingSubTotalPrepaymentPartType1 {
	return &e
}
func (e *CapitalPendingSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = CapitalPendingSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalPendingSubTotalPrepaymentPartType1: %v", v)
	}
}

// CapitalPendingSubTotalTransactionType1 - Represents the transaction type
type CapitalPendingSubTotalTransactionType1 string

const (
	CapitalPendingSubTotalTransactionType1Payment                           CapitalPendingSubTotalTransactionType1 = "payment"
	CapitalPendingSubTotalTransactionType1SplitPayment                      CapitalPendingSubTotalTransactionType1 = "split-payment"
	CapitalPendingSubTotalTransactionType1FailedPayment                     CapitalPendingSubTotalTransactionType1 = "failed-payment"
	CapitalPendingSubTotalTransactionType1FailedPlatformSplitPayment        CapitalPendingSubTotalTransactionType1 = "failed-platform-split-payment"
	CapitalPendingSubTotalTransactionType1FailedSplitPaymentCompensation    CapitalPendingSubTotalTransactionType1 = "failed-split-payment-compensation"
	CapitalPendingSubTotalTransactionType1Capture                           CapitalPendingSubTotalTransactionType1 = "capture"
	CapitalPendingSubTotalTransactionType1SplitTransaction                  CapitalPendingSubTotalTransactionType1 = "split-transaction"
	CapitalPendingSubTotalTransactionType1Refund                            CapitalPendingSubTotalTransactionType1 = "refund"
	CapitalPendingSubTotalTransactionType1PlatformPaymentRefund             CapitalPendingSubTotalTransactionType1 = "platform-payment-refund"
	CapitalPendingSubTotalTransactionType1ReturnedPlatformPaymentRefund     CapitalPendingSubTotalTransactionType1 = "returned-platform-payment-refund"
	CapitalPendingSubTotalTransactionType1RefundCompensation                CapitalPendingSubTotalTransactionType1 = "refund-compensation"
	CapitalPendingSubTotalTransactionType1ReturnedRefundCompensation        CapitalPendingSubTotalTransactionType1 = "returned-refund-compensation"
	CapitalPendingSubTotalTransactionType1ReturnedRefund                    CapitalPendingSubTotalTransactionType1 = "returned-refund"
	CapitalPendingSubTotalTransactionType1Chargeback                        CapitalPendingSubTotalTransactionType1 = "chargeback"
	CapitalPendingSubTotalTransactionType1ChargebackReversal                CapitalPendingSubTotalTransactionType1 = "chargeback-reversal"
	CapitalPendingSubTotalTransactionType1ChargebackCompensation            CapitalPendingSubTotalTransactionType1 = "chargeback-compensation"
	CapitalPendingSubTotalTransactionType1ReversedChargebackCompensation    CapitalPendingSubTotalTransactionType1 = "reversed-chargeback-compensation"
	CapitalPendingSubTotalTransactionType1PlatformPaymentChargeback         CapitalPendingSubTotalTransactionType1 = "platform-payment-chargeback"
	CapitalPendingSubTotalTransactionType1ReversedPlatformPaymentChargeback CapitalPendingSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	CapitalPendingSubTotalTransactionType1FeePrepayment                     CapitalPendingSubTotalTransactionType1 = "fee-prepayment"
	CapitalPendingSubTotalTransactionType1OutgoingTransfer                  CapitalPendingSubTotalTransactionType1 = "outgoing-transfer"
	CapitalPendingSubTotalTransactionType1IncomingTransfer                  CapitalPendingSubTotalTransactionType1 = "incoming-transfer"
	CapitalPendingSubTotalTransactionType1CanceledTransfer                  CapitalPendingSubTotalTransactionType1 = "canceled-transfer"
	CapitalPendingSubTotalTransactionType1ReturnedTransfer                  CapitalPendingSubTotalTransactionType1 = "returned-transfer"
	CapitalPendingSubTotalTransactionType1BalanceReserve                    CapitalPendingSubTotalTransactionType1 = "balance-reserve"
	CapitalPendingSubTotalTransactionType1BalanceReserveReturn              CapitalPendingSubTotalTransactionType1 = "balance-reserve-return"
	CapitalPendingSubTotalTransactionType1InvoiceRoundingCompensation       CapitalPendingSubTotalTransactionType1 = "invoice-rounding-compensation"
	CapitalPendingSubTotalTransactionType1RollingReserveHold                CapitalPendingSubTotalTransactionType1 = "rolling-reserve-hold"
	CapitalPendingSubTotalTransactionType1RollingReserveRelease             CapitalPendingSubTotalTransactionType1 = "rolling-reserve-release"
	CapitalPendingSubTotalTransactionType1BalanceCorrection                 CapitalPendingSubTotalTransactionType1 = "balance-correction"
	CapitalPendingSubTotalTransactionType1Repayment                         CapitalPendingSubTotalTransactionType1 = "repayment"
	CapitalPendingSubTotalTransactionType1Loan                              CapitalPendingSubTotalTransactionType1 = "loan"
	CapitalPendingSubTotalTransactionType1BalanceTopup                      CapitalPendingSubTotalTransactionType1 = "balance-topup"
	CapitalPendingSubTotalTransactionType1CashCollateralIssuance            CapitalPendingSubTotalTransactionType1 = "cash-collateral-issuance';"
	CapitalPendingSubTotalTransactionType1CashCollateralRelease             CapitalPendingSubTotalTransactionType1 = "cash-collateral-release"
	CapitalPendingSubTotalTransactionType1PendingRollingReserve             CapitalPendingSubTotalTransactionType1 = "pending-rolling-reserve"
	CapitalPendingSubTotalTransactionType1ToBeReleasedRollingReserve        CapitalPendingSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	CapitalPendingSubTotalTransactionType1HeldRollingReserve                CapitalPendingSubTotalTransactionType1 = "held-rolling-reserve"
	CapitalPendingSubTotalTransactionType1ReleasedRollingReserve            CapitalPendingSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e CapitalPendingSubTotalTransactionType1) ToPointer() *CapitalPendingSubTotalTransactionType1 {
	return &e
}
func (e *CapitalPendingSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = CapitalPendingSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalPendingSubTotalTransactionType1: %v", v)
	}
}

type CapitalPendingSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *CapitalPendingSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *CapitalPendingSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *CapitalPendingSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *CapitalPendingSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *CapitalPendingSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *CapitalPendingSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *CapitalPendingSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *CapitalPendingSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *CapitalPendingSubTotal1) GetMethod() *CapitalPendingSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CapitalPendingSubTotal1) GetCardIssuer() *CapitalPendingSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *CapitalPendingSubTotal1) GetCardAudience() *CapitalPendingSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *CapitalPendingSubTotal1) GetCardRegion() *CapitalPendingSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *CapitalPendingSubTotal1) GetFeeType() *CapitalPendingSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *CapitalPendingSubTotal1) GetPrepaymentPartType() *CapitalPendingSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *CapitalPendingSubTotal1) GetTransactionType() *CapitalPendingSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// CapitalPendingSubtotalMethod2 - Payment type of the transactions
type CapitalPendingSubtotalMethod2 string

const (
	CapitalPendingSubtotalMethod2Alma              CapitalPendingSubtotalMethod2 = "alma"
	CapitalPendingSubtotalMethod2Bacs              CapitalPendingSubtotalMethod2 = "bacs"
	CapitalPendingSubtotalMethod2Applepay          CapitalPendingSubtotalMethod2 = "applepay"
	CapitalPendingSubtotalMethod2Bancomatpay       CapitalPendingSubtotalMethod2 = "bancomatpay"
	CapitalPendingSubtotalMethod2Bancontact        CapitalPendingSubtotalMethod2 = "bancontact"
	CapitalPendingSubtotalMethod2Banktransfer      CapitalPendingSubtotalMethod2 = "banktransfer"
	CapitalPendingSubtotalMethod2Belfius           CapitalPendingSubtotalMethod2 = "belfius"
	CapitalPendingSubtotalMethod2Billie            CapitalPendingSubtotalMethod2 = "billie"
	CapitalPendingSubtotalMethod2Bizum             CapitalPendingSubtotalMethod2 = "bizum"
	CapitalPendingSubtotalMethod2Bitcoin           CapitalPendingSubtotalMethod2 = "bitcoin"
	CapitalPendingSubtotalMethod2Blik              CapitalPendingSubtotalMethod2 = "blik"
	CapitalPendingSubtotalMethod2Creditcard        CapitalPendingSubtotalMethod2 = "creditcard"
	CapitalPendingSubtotalMethod2Directdebit       CapitalPendingSubtotalMethod2 = "directdebit"
	CapitalPendingSubtotalMethod2Eps               CapitalPendingSubtotalMethod2 = "eps"
	CapitalPendingSubtotalMethod2Giftcard          CapitalPendingSubtotalMethod2 = "giftcard"
	CapitalPendingSubtotalMethod2Giropay           CapitalPendingSubtotalMethod2 = "giropay"
	CapitalPendingSubtotalMethod2Googlepay         CapitalPendingSubtotalMethod2 = "googlepay"
	CapitalPendingSubtotalMethod2Ideal             CapitalPendingSubtotalMethod2 = "ideal"
	CapitalPendingSubtotalMethod2In3               CapitalPendingSubtotalMethod2 = "in3"
	CapitalPendingSubtotalMethod2Inghomepay        CapitalPendingSubtotalMethod2 = "inghomepay"
	CapitalPendingSubtotalMethod2Kbc               CapitalPendingSubtotalMethod2 = "kbc"
	CapitalPendingSubtotalMethod2Klarnapaylater    CapitalPendingSubtotalMethod2 = "klarnapaylater"
	CapitalPendingSubtotalMethod2Klarnapaynow      CapitalPendingSubtotalMethod2 = "klarnapaynow"
	CapitalPendingSubtotalMethod2Klarnasliceit     CapitalPendingSubtotalMethod2 = "klarnasliceit"
	CapitalPendingSubtotalMethod2Klarna            CapitalPendingSubtotalMethod2 = "klarna"
	CapitalPendingSubtotalMethod2Mbway             CapitalPendingSubtotalMethod2 = "mbway"
	CapitalPendingSubtotalMethod2Multibanco        CapitalPendingSubtotalMethod2 = "multibanco"
	CapitalPendingSubtotalMethod2Mybank            CapitalPendingSubtotalMethod2 = "mybank"
	CapitalPendingSubtotalMethod2Paybybank         CapitalPendingSubtotalMethod2 = "paybybank"
	CapitalPendingSubtotalMethod2Payconiq          CapitalPendingSubtotalMethod2 = "payconiq"
	CapitalPendingSubtotalMethod2Paypal            CapitalPendingSubtotalMethod2 = "paypal"
	CapitalPendingSubtotalMethod2Paysafecard       CapitalPendingSubtotalMethod2 = "paysafecard"
	CapitalPendingSubtotalMethod2Przelewy24        CapitalPendingSubtotalMethod2 = "przelewy24"
	CapitalPendingSubtotalMethod2Riverty           CapitalPendingSubtotalMethod2 = "riverty"
	CapitalPendingSubtotalMethod2Satispay          CapitalPendingSubtotalMethod2 = "satispay"
	CapitalPendingSubtotalMethod2Podiumcadeaukaart CapitalPendingSubtotalMethod2 = "podiumcadeaukaart"
	CapitalPendingSubtotalMethod2Pointofsale       CapitalPendingSubtotalMethod2 = "pointofsale"
	CapitalPendingSubtotalMethod2Sofort            CapitalPendingSubtotalMethod2 = "sofort"
	CapitalPendingSubtotalMethod2Swish             CapitalPendingSubtotalMethod2 = "swish"
	CapitalPendingSubtotalMethod2Trustly           CapitalPendingSubtotalMethod2 = "trustly"
	CapitalPendingSubtotalMethod2Twint             CapitalPendingSubtotalMethod2 = "twint"
	CapitalPendingSubtotalMethod2Voucher           CapitalPendingSubtotalMethod2 = "voucher"
)

func (e CapitalPendingSubtotalMethod2) ToPointer() *CapitalPendingSubtotalMethod2 {
	return &e
}
func (e *CapitalPendingSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = CapitalPendingSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalPendingSubtotalMethod2: %v", v)
	}
}

// CapitalPendingSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type CapitalPendingSubtotalCardIssuer2 string

const (
	CapitalPendingSubtotalCardIssuer2Amex          CapitalPendingSubtotalCardIssuer2 = "amex"
	CapitalPendingSubtotalCardIssuer2Maestro       CapitalPendingSubtotalCardIssuer2 = "maestro"
	CapitalPendingSubtotalCardIssuer2CarteBancaire CapitalPendingSubtotalCardIssuer2 = "carte-bancaire"
	CapitalPendingSubtotalCardIssuer2Other         CapitalPendingSubtotalCardIssuer2 = "other"
)

func (e CapitalPendingSubtotalCardIssuer2) ToPointer() *CapitalPendingSubtotalCardIssuer2 {
	return &e
}
func (e *CapitalPendingSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = CapitalPendingSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalPendingSubtotalCardIssuer2: %v", v)
	}
}

// CapitalPendingSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type CapitalPendingSubtotalCardAudience2 string

const (
	CapitalPendingSubtotalCardAudience2Corporate CapitalPendingSubtotalCardAudience2 = "corporate"
	CapitalPendingSubtotalCardAudience2Other     CapitalPendingSubtotalCardAudience2 = "other"
)

func (e CapitalPendingSubtotalCardAudience2) ToPointer() *CapitalPendingSubtotalCardAudience2 {
	return &e
}
func (e *CapitalPendingSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = CapitalPendingSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalPendingSubtotalCardAudience2: %v", v)
	}
}

// CapitalPendingSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type CapitalPendingSubtotalCardRegion2 string

const (
	CapitalPendingSubtotalCardRegion2IntraEea CapitalPendingSubtotalCardRegion2 = "intra-eea"
	CapitalPendingSubtotalCardRegion2IntraEu  CapitalPendingSubtotalCardRegion2 = "intra-eu"
	CapitalPendingSubtotalCardRegion2Domestic CapitalPendingSubtotalCardRegion2 = "domestic"
	CapitalPendingSubtotalCardRegion2Other    CapitalPendingSubtotalCardRegion2 = "other"
)

func (e CapitalPendingSubtotalCardRegion2) ToPointer() *CapitalPendingSubtotalCardRegion2 {
	return &e
}
func (e *CapitalPendingSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = CapitalPendingSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalPendingSubtotalCardRegion2: %v", v)
	}
}

// CapitalPendingSubtotalFeeType2 - Present when the transaction represents a fee.
type CapitalPendingSubtotalFeeType2 string

const (
	CapitalPendingSubtotalFeeType2PaymentFee                                        CapitalPendingSubtotalFeeType2 = "payment-fee"
	CapitalPendingSubtotalFeeType2DirectDebitFailureFee                             CapitalPendingSubtotalFeeType2 = "direct-debit-failure-fee"
	CapitalPendingSubtotalFeeType2UnauthorizedDirectDebitFee                        CapitalPendingSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	CapitalPendingSubtotalFeeType2BankChargedDirectDebitFailureFee                  CapitalPendingSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	CapitalPendingSubtotalFeeType2PartnerCommission                                 CapitalPendingSubtotalFeeType2 = "partner-commission"
	CapitalPendingSubtotalFeeType2ApplicationFee                                    CapitalPendingSubtotalFeeType2 = "application-fee"
	CapitalPendingSubtotalFeeType2CaptureFee                                        CapitalPendingSubtotalFeeType2 = "capture-fee"
	CapitalPendingSubtotalFeeType2RefundFee                                         CapitalPendingSubtotalFeeType2 = "refund-fee"
	CapitalPendingSubtotalFeeType2ChargebackFee                                     CapitalPendingSubtotalFeeType2 = "chargeback-fee"
	CapitalPendingSubtotalFeeType2PaymentNotificationFee                            CapitalPendingSubtotalFeeType2 = "payment-notification-fee"
	CapitalPendingSubtotalFeeType2TransferNotificationFee                           CapitalPendingSubtotalFeeType2 = "transfer-notification-fee"
	CapitalPendingSubtotalFeeType2PayoutFee                                         CapitalPendingSubtotalFeeType2 = "payout-fee"
	CapitalPendingSubtotalFeeType2FeeDiscount                                       CapitalPendingSubtotalFeeType2 = "fee-discount"
	CapitalPendingSubtotalFeeType2FeeReimbursement                                  CapitalPendingSubtotalFeeType2 = "fee-reimbursement"
	CapitalPendingSubtotalFeeType2PlatformVolumeFee                                 CapitalPendingSubtotalFeeType2 = "platform-volume-fee"
	CapitalPendingSubtotalFeeType2PlatformConnectedOrganizationsFee                 CapitalPendingSubtotalFeeType2 = "platform-connected-organizations-fee"
	CapitalPendingSubtotalFeeType2BalanceChargeFee                                  CapitalPendingSubtotalFeeType2 = "balance-charge-fee"
	CapitalPendingSubtotalFeeType2ThreedsAuthenticationAttemptFee                   CapitalPendingSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	CapitalPendingSubtotalFeeType2TerminalMonthlyFee                                CapitalPendingSubtotalFeeType2 = "terminal-monthly-fee"
	CapitalPendingSubtotalFeeType2AcceptanceRiskFee                                 CapitalPendingSubtotalFeeType2 = "acceptance-risk-fee"
	CapitalPendingSubtotalFeeType2TopUpFee                                          CapitalPendingSubtotalFeeType2 = "top-up-fee"
	CapitalPendingSubtotalFeeType2PaymentGatewayFee                                 CapitalPendingSubtotalFeeType2 = "payment-gateway-fee"
	CapitalPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   CapitalPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	CapitalPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee CapitalPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	CapitalPendingSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             CapitalPendingSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	CapitalPendingSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           CapitalPendingSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	CapitalPendingSubtotalFeeType2MinimumInvoiceAmountFee                           CapitalPendingSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e CapitalPendingSubtotalFeeType2) ToPointer() *CapitalPendingSubtotalFeeType2 {
	return &e
}
func (e *CapitalPendingSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = CapitalPendingSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalPendingSubtotalFeeType2: %v", v)
	}
}

// CapitalPendingSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type CapitalPendingSubtotalPrepaymentPartType2 string

const (
	CapitalPendingSubtotalPrepaymentPartType2Fee                     CapitalPendingSubtotalPrepaymentPartType2 = "fee"
	CapitalPendingSubtotalPrepaymentPartType2FeeReimbursement        CapitalPendingSubtotalPrepaymentPartType2 = "fee-reimbursement"
	CapitalPendingSubtotalPrepaymentPartType2FeeDiscount             CapitalPendingSubtotalPrepaymentPartType2 = "fee-discount"
	CapitalPendingSubtotalPrepaymentPartType2FeeVat                  CapitalPendingSubtotalPrepaymentPartType2 = "fee-vat"
	CapitalPendingSubtotalPrepaymentPartType2FeeRoundingCompensation CapitalPendingSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e CapitalPendingSubtotalPrepaymentPartType2) ToPointer() *CapitalPendingSubtotalPrepaymentPartType2 {
	return &e
}
func (e *CapitalPendingSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = CapitalPendingSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalPendingSubtotalPrepaymentPartType2: %v", v)
	}
}

// CapitalPendingSubtotalTransactionType2 - Represents the transaction type
type CapitalPendingSubtotalTransactionType2 string

const (
	CapitalPendingSubtotalTransactionType2Payment                           CapitalPendingSubtotalTransactionType2 = "payment"
	CapitalPendingSubtotalTransactionType2SplitPayment                      CapitalPendingSubtotalTransactionType2 = "split-payment"
	CapitalPendingSubtotalTransactionType2FailedPayment                     CapitalPendingSubtotalTransactionType2 = "failed-payment"
	CapitalPendingSubtotalTransactionType2FailedPlatformSplitPayment        CapitalPendingSubtotalTransactionType2 = "failed-platform-split-payment"
	CapitalPendingSubtotalTransactionType2FailedSplitPaymentCompensation    CapitalPendingSubtotalTransactionType2 = "failed-split-payment-compensation"
	CapitalPendingSubtotalTransactionType2Capture                           CapitalPendingSubtotalTransactionType2 = "capture"
	CapitalPendingSubtotalTransactionType2SplitTransaction                  CapitalPendingSubtotalTransactionType2 = "split-transaction"
	CapitalPendingSubtotalTransactionType2Refund                            CapitalPendingSubtotalTransactionType2 = "refund"
	CapitalPendingSubtotalTransactionType2PlatformPaymentRefund             CapitalPendingSubtotalTransactionType2 = "platform-payment-refund"
	CapitalPendingSubtotalTransactionType2ReturnedPlatformPaymentRefund     CapitalPendingSubtotalTransactionType2 = "returned-platform-payment-refund"
	CapitalPendingSubtotalTransactionType2RefundCompensation                CapitalPendingSubtotalTransactionType2 = "refund-compensation"
	CapitalPendingSubtotalTransactionType2ReturnedRefundCompensation        CapitalPendingSubtotalTransactionType2 = "returned-refund-compensation"
	CapitalPendingSubtotalTransactionType2ReturnedRefund                    CapitalPendingSubtotalTransactionType2 = "returned-refund"
	CapitalPendingSubtotalTransactionType2Chargeback                        CapitalPendingSubtotalTransactionType2 = "chargeback"
	CapitalPendingSubtotalTransactionType2ChargebackReversal                CapitalPendingSubtotalTransactionType2 = "chargeback-reversal"
	CapitalPendingSubtotalTransactionType2ChargebackCompensation            CapitalPendingSubtotalTransactionType2 = "chargeback-compensation"
	CapitalPendingSubtotalTransactionType2ReversedChargebackCompensation    CapitalPendingSubtotalTransactionType2 = "reversed-chargeback-compensation"
	CapitalPendingSubtotalTransactionType2PlatformPaymentChargeback         CapitalPendingSubtotalTransactionType2 = "platform-payment-chargeback"
	CapitalPendingSubtotalTransactionType2ReversedPlatformPaymentChargeback CapitalPendingSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	CapitalPendingSubtotalTransactionType2FeePrepayment                     CapitalPendingSubtotalTransactionType2 = "fee-prepayment"
	CapitalPendingSubtotalTransactionType2OutgoingTransfer                  CapitalPendingSubtotalTransactionType2 = "outgoing-transfer"
	CapitalPendingSubtotalTransactionType2IncomingTransfer                  CapitalPendingSubtotalTransactionType2 = "incoming-transfer"
	CapitalPendingSubtotalTransactionType2CanceledTransfer                  CapitalPendingSubtotalTransactionType2 = "canceled-transfer"
	CapitalPendingSubtotalTransactionType2ReturnedTransfer                  CapitalPendingSubtotalTransactionType2 = "returned-transfer"
	CapitalPendingSubtotalTransactionType2BalanceReserve                    CapitalPendingSubtotalTransactionType2 = "balance-reserve"
	CapitalPendingSubtotalTransactionType2BalanceReserveReturn              CapitalPendingSubtotalTransactionType2 = "balance-reserve-return"
	CapitalPendingSubtotalTransactionType2InvoiceRoundingCompensation       CapitalPendingSubtotalTransactionType2 = "invoice-rounding-compensation"
	CapitalPendingSubtotalTransactionType2RollingReserveHold                CapitalPendingSubtotalTransactionType2 = "rolling-reserve-hold"
	CapitalPendingSubtotalTransactionType2RollingReserveRelease             CapitalPendingSubtotalTransactionType2 = "rolling-reserve-release"
	CapitalPendingSubtotalTransactionType2BalanceCorrection                 CapitalPendingSubtotalTransactionType2 = "balance-correction"
	CapitalPendingSubtotalTransactionType2Repayment                         CapitalPendingSubtotalTransactionType2 = "repayment"
	CapitalPendingSubtotalTransactionType2Loan                              CapitalPendingSubtotalTransactionType2 = "loan"
	CapitalPendingSubtotalTransactionType2BalanceTopup                      CapitalPendingSubtotalTransactionType2 = "balance-topup"
	CapitalPendingSubtotalTransactionType2CashCollateralIssuance            CapitalPendingSubtotalTransactionType2 = "cash-collateral-issuance';"
	CapitalPendingSubtotalTransactionType2CashCollateralRelease             CapitalPendingSubtotalTransactionType2 = "cash-collateral-release"
	CapitalPendingSubtotalTransactionType2PendingRollingReserve             CapitalPendingSubtotalTransactionType2 = "pending-rolling-reserve"
	CapitalPendingSubtotalTransactionType2ToBeReleasedRollingReserve        CapitalPendingSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	CapitalPendingSubtotalTransactionType2HeldRollingReserve                CapitalPendingSubtotalTransactionType2 = "held-rolling-reserve"
	CapitalPendingSubtotalTransactionType2ReleasedRollingReserve            CapitalPendingSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e CapitalPendingSubtotalTransactionType2) ToPointer() *CapitalPendingSubtotalTransactionType2 {
	return &e
}
func (e *CapitalPendingSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = CapitalPendingSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalPendingSubtotalTransactionType2: %v", v)
	}
}

type CapitalPendingSubtotal2 struct {
	SubTotals []CapitalPendingSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *CapitalPendingSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *CapitalPendingSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *CapitalPendingSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *CapitalPendingSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *CapitalPendingSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *CapitalPendingSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *CapitalPendingSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *CapitalPendingSubtotal2) GetSubTotals() []CapitalPendingSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *CapitalPendingSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *CapitalPendingSubtotal2) GetMethod() *CapitalPendingSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CapitalPendingSubtotal2) GetCardIssuer() *CapitalPendingSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *CapitalPendingSubtotal2) GetCardAudience() *CapitalPendingSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *CapitalPendingSubtotal2) GetCardRegion() *CapitalPendingSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *CapitalPendingSubtotal2) GetFeeType() *CapitalPendingSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *CapitalPendingSubtotal2) GetPrepaymentPartType() *CapitalPendingSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *CapitalPendingSubtotal2) GetTransactionType() *CapitalPendingSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type CapitalPending struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *CapitalPendingAmount     `json:"amount,omitempty"`
	Subtotals []CapitalPendingSubtotal2 `json:"subtotals,omitempty"`
}

func (o *CapitalPending) GetAmount() *CapitalPendingAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CapitalPending) GetSubtotals() []CapitalPendingSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// CapitalMovedToAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type CapitalMovedToAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CapitalMovedToAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CapitalMovedToAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CapitalMovedToAvailableSubTotalMethod1 - Payment type of the transactions
type CapitalMovedToAvailableSubTotalMethod1 string

const (
	CapitalMovedToAvailableSubTotalMethod1Alma              CapitalMovedToAvailableSubTotalMethod1 = "alma"
	CapitalMovedToAvailableSubTotalMethod1Bacs              CapitalMovedToAvailableSubTotalMethod1 = "bacs"
	CapitalMovedToAvailableSubTotalMethod1Applepay          CapitalMovedToAvailableSubTotalMethod1 = "applepay"
	CapitalMovedToAvailableSubTotalMethod1Bancomatpay       CapitalMovedToAvailableSubTotalMethod1 = "bancomatpay"
	CapitalMovedToAvailableSubTotalMethod1Bancontact        CapitalMovedToAvailableSubTotalMethod1 = "bancontact"
	CapitalMovedToAvailableSubTotalMethod1Banktransfer      CapitalMovedToAvailableSubTotalMethod1 = "banktransfer"
	CapitalMovedToAvailableSubTotalMethod1Belfius           CapitalMovedToAvailableSubTotalMethod1 = "belfius"
	CapitalMovedToAvailableSubTotalMethod1Billie            CapitalMovedToAvailableSubTotalMethod1 = "billie"
	CapitalMovedToAvailableSubTotalMethod1Bizum             CapitalMovedToAvailableSubTotalMethod1 = "bizum"
	CapitalMovedToAvailableSubTotalMethod1Bitcoin           CapitalMovedToAvailableSubTotalMethod1 = "bitcoin"
	CapitalMovedToAvailableSubTotalMethod1Blik              CapitalMovedToAvailableSubTotalMethod1 = "blik"
	CapitalMovedToAvailableSubTotalMethod1Creditcard        CapitalMovedToAvailableSubTotalMethod1 = "creditcard"
	CapitalMovedToAvailableSubTotalMethod1Directdebit       CapitalMovedToAvailableSubTotalMethod1 = "directdebit"
	CapitalMovedToAvailableSubTotalMethod1Eps               CapitalMovedToAvailableSubTotalMethod1 = "eps"
	CapitalMovedToAvailableSubTotalMethod1Giftcard          CapitalMovedToAvailableSubTotalMethod1 = "giftcard"
	CapitalMovedToAvailableSubTotalMethod1Giropay           CapitalMovedToAvailableSubTotalMethod1 = "giropay"
	CapitalMovedToAvailableSubTotalMethod1Googlepay         CapitalMovedToAvailableSubTotalMethod1 = "googlepay"
	CapitalMovedToAvailableSubTotalMethod1Ideal             CapitalMovedToAvailableSubTotalMethod1 = "ideal"
	CapitalMovedToAvailableSubTotalMethod1In3               CapitalMovedToAvailableSubTotalMethod1 = "in3"
	CapitalMovedToAvailableSubTotalMethod1Inghomepay        CapitalMovedToAvailableSubTotalMethod1 = "inghomepay"
	CapitalMovedToAvailableSubTotalMethod1Kbc               CapitalMovedToAvailableSubTotalMethod1 = "kbc"
	CapitalMovedToAvailableSubTotalMethod1Klarnapaylater    CapitalMovedToAvailableSubTotalMethod1 = "klarnapaylater"
	CapitalMovedToAvailableSubTotalMethod1Klarnapaynow      CapitalMovedToAvailableSubTotalMethod1 = "klarnapaynow"
	CapitalMovedToAvailableSubTotalMethod1Klarnasliceit     CapitalMovedToAvailableSubTotalMethod1 = "klarnasliceit"
	CapitalMovedToAvailableSubTotalMethod1Klarna            CapitalMovedToAvailableSubTotalMethod1 = "klarna"
	CapitalMovedToAvailableSubTotalMethod1Mbway             CapitalMovedToAvailableSubTotalMethod1 = "mbway"
	CapitalMovedToAvailableSubTotalMethod1Multibanco        CapitalMovedToAvailableSubTotalMethod1 = "multibanco"
	CapitalMovedToAvailableSubTotalMethod1Mybank            CapitalMovedToAvailableSubTotalMethod1 = "mybank"
	CapitalMovedToAvailableSubTotalMethod1Paybybank         CapitalMovedToAvailableSubTotalMethod1 = "paybybank"
	CapitalMovedToAvailableSubTotalMethod1Payconiq          CapitalMovedToAvailableSubTotalMethod1 = "payconiq"
	CapitalMovedToAvailableSubTotalMethod1Paypal            CapitalMovedToAvailableSubTotalMethod1 = "paypal"
	CapitalMovedToAvailableSubTotalMethod1Paysafecard       CapitalMovedToAvailableSubTotalMethod1 = "paysafecard"
	CapitalMovedToAvailableSubTotalMethod1Przelewy24        CapitalMovedToAvailableSubTotalMethod1 = "przelewy24"
	CapitalMovedToAvailableSubTotalMethod1Riverty           CapitalMovedToAvailableSubTotalMethod1 = "riverty"
	CapitalMovedToAvailableSubTotalMethod1Satispay          CapitalMovedToAvailableSubTotalMethod1 = "satispay"
	CapitalMovedToAvailableSubTotalMethod1Podiumcadeaukaart CapitalMovedToAvailableSubTotalMethod1 = "podiumcadeaukaart"
	CapitalMovedToAvailableSubTotalMethod1Pointofsale       CapitalMovedToAvailableSubTotalMethod1 = "pointofsale"
	CapitalMovedToAvailableSubTotalMethod1Sofort            CapitalMovedToAvailableSubTotalMethod1 = "sofort"
	CapitalMovedToAvailableSubTotalMethod1Swish             CapitalMovedToAvailableSubTotalMethod1 = "swish"
	CapitalMovedToAvailableSubTotalMethod1Trustly           CapitalMovedToAvailableSubTotalMethod1 = "trustly"
	CapitalMovedToAvailableSubTotalMethod1Twint             CapitalMovedToAvailableSubTotalMethod1 = "twint"
	CapitalMovedToAvailableSubTotalMethod1Voucher           CapitalMovedToAvailableSubTotalMethod1 = "voucher"
)

func (e CapitalMovedToAvailableSubTotalMethod1) ToPointer() *CapitalMovedToAvailableSubTotalMethod1 {
	return &e
}
func (e *CapitalMovedToAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = CapitalMovedToAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalMovedToAvailableSubTotalMethod1: %v", v)
	}
}

// CapitalMovedToAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type CapitalMovedToAvailableSubTotalCardIssuer1 string

const (
	CapitalMovedToAvailableSubTotalCardIssuer1Amex          CapitalMovedToAvailableSubTotalCardIssuer1 = "amex"
	CapitalMovedToAvailableSubTotalCardIssuer1Maestro       CapitalMovedToAvailableSubTotalCardIssuer1 = "maestro"
	CapitalMovedToAvailableSubTotalCardIssuer1CarteBancaire CapitalMovedToAvailableSubTotalCardIssuer1 = "carte-bancaire"
	CapitalMovedToAvailableSubTotalCardIssuer1Other         CapitalMovedToAvailableSubTotalCardIssuer1 = "other"
)

func (e CapitalMovedToAvailableSubTotalCardIssuer1) ToPointer() *CapitalMovedToAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *CapitalMovedToAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = CapitalMovedToAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalMovedToAvailableSubTotalCardIssuer1: %v", v)
	}
}

// CapitalMovedToAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type CapitalMovedToAvailableSubTotalCardAudience1 string

const (
	CapitalMovedToAvailableSubTotalCardAudience1Corporate CapitalMovedToAvailableSubTotalCardAudience1 = "corporate"
	CapitalMovedToAvailableSubTotalCardAudience1Other     CapitalMovedToAvailableSubTotalCardAudience1 = "other"
)

func (e CapitalMovedToAvailableSubTotalCardAudience1) ToPointer() *CapitalMovedToAvailableSubTotalCardAudience1 {
	return &e
}
func (e *CapitalMovedToAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = CapitalMovedToAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalMovedToAvailableSubTotalCardAudience1: %v", v)
	}
}

// CapitalMovedToAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type CapitalMovedToAvailableSubTotalCardRegion1 string

const (
	CapitalMovedToAvailableSubTotalCardRegion1IntraEea CapitalMovedToAvailableSubTotalCardRegion1 = "intra-eea"
	CapitalMovedToAvailableSubTotalCardRegion1IntraEu  CapitalMovedToAvailableSubTotalCardRegion1 = "intra-eu"
	CapitalMovedToAvailableSubTotalCardRegion1Domestic CapitalMovedToAvailableSubTotalCardRegion1 = "domestic"
	CapitalMovedToAvailableSubTotalCardRegion1Other    CapitalMovedToAvailableSubTotalCardRegion1 = "other"
)

func (e CapitalMovedToAvailableSubTotalCardRegion1) ToPointer() *CapitalMovedToAvailableSubTotalCardRegion1 {
	return &e
}
func (e *CapitalMovedToAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = CapitalMovedToAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalMovedToAvailableSubTotalCardRegion1: %v", v)
	}
}

// CapitalMovedToAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type CapitalMovedToAvailableSubTotalFeeType1 string

const (
	CapitalMovedToAvailableSubTotalFeeType1PaymentFee                                        CapitalMovedToAvailableSubTotalFeeType1 = "payment-fee"
	CapitalMovedToAvailableSubTotalFeeType1DirectDebitFailureFee                             CapitalMovedToAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	CapitalMovedToAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        CapitalMovedToAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	CapitalMovedToAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  CapitalMovedToAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	CapitalMovedToAvailableSubTotalFeeType1PartnerCommission                                 CapitalMovedToAvailableSubTotalFeeType1 = "partner-commission"
	CapitalMovedToAvailableSubTotalFeeType1ApplicationFee                                    CapitalMovedToAvailableSubTotalFeeType1 = "application-fee"
	CapitalMovedToAvailableSubTotalFeeType1CaptureFee                                        CapitalMovedToAvailableSubTotalFeeType1 = "capture-fee"
	CapitalMovedToAvailableSubTotalFeeType1RefundFee                                         CapitalMovedToAvailableSubTotalFeeType1 = "refund-fee"
	CapitalMovedToAvailableSubTotalFeeType1ChargebackFee                                     CapitalMovedToAvailableSubTotalFeeType1 = "chargeback-fee"
	CapitalMovedToAvailableSubTotalFeeType1PaymentNotificationFee                            CapitalMovedToAvailableSubTotalFeeType1 = "payment-notification-fee"
	CapitalMovedToAvailableSubTotalFeeType1TransferNotificationFee                           CapitalMovedToAvailableSubTotalFeeType1 = "transfer-notification-fee"
	CapitalMovedToAvailableSubTotalFeeType1PayoutFee                                         CapitalMovedToAvailableSubTotalFeeType1 = "payout-fee"
	CapitalMovedToAvailableSubTotalFeeType1FeeDiscount                                       CapitalMovedToAvailableSubTotalFeeType1 = "fee-discount"
	CapitalMovedToAvailableSubTotalFeeType1FeeReimbursement                                  CapitalMovedToAvailableSubTotalFeeType1 = "fee-reimbursement"
	CapitalMovedToAvailableSubTotalFeeType1PlatformVolumeFee                                 CapitalMovedToAvailableSubTotalFeeType1 = "platform-volume-fee"
	CapitalMovedToAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 CapitalMovedToAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	CapitalMovedToAvailableSubTotalFeeType1BalanceChargeFee                                  CapitalMovedToAvailableSubTotalFeeType1 = "balance-charge-fee"
	CapitalMovedToAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   CapitalMovedToAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	CapitalMovedToAvailableSubTotalFeeType1TerminalMonthlyFee                                CapitalMovedToAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	CapitalMovedToAvailableSubTotalFeeType1AcceptanceRiskFee                                 CapitalMovedToAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	CapitalMovedToAvailableSubTotalFeeType1TopUpFee                                          CapitalMovedToAvailableSubTotalFeeType1 = "top-up-fee"
	CapitalMovedToAvailableSubTotalFeeType1PaymentGatewayFee                                 CapitalMovedToAvailableSubTotalFeeType1 = "payment-gateway-fee"
	CapitalMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   CapitalMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	CapitalMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee CapitalMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	CapitalMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             CapitalMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	CapitalMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           CapitalMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	CapitalMovedToAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           CapitalMovedToAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e CapitalMovedToAvailableSubTotalFeeType1) ToPointer() *CapitalMovedToAvailableSubTotalFeeType1 {
	return &e
}
func (e *CapitalMovedToAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = CapitalMovedToAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalMovedToAvailableSubTotalFeeType1: %v", v)
	}
}

// CapitalMovedToAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type CapitalMovedToAvailableSubTotalPrepaymentPartType1 string

const (
	CapitalMovedToAvailableSubTotalPrepaymentPartType1Fee                     CapitalMovedToAvailableSubTotalPrepaymentPartType1 = "fee"
	CapitalMovedToAvailableSubTotalPrepaymentPartType1FeeReimbursement        CapitalMovedToAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	CapitalMovedToAvailableSubTotalPrepaymentPartType1FeeDiscount             CapitalMovedToAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	CapitalMovedToAvailableSubTotalPrepaymentPartType1FeeVat                  CapitalMovedToAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	CapitalMovedToAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation CapitalMovedToAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e CapitalMovedToAvailableSubTotalPrepaymentPartType1) ToPointer() *CapitalMovedToAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *CapitalMovedToAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = CapitalMovedToAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalMovedToAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// CapitalMovedToAvailableSubTotalTransactionType1 - Represents the transaction type
type CapitalMovedToAvailableSubTotalTransactionType1 string

const (
	CapitalMovedToAvailableSubTotalTransactionType1Payment                           CapitalMovedToAvailableSubTotalTransactionType1 = "payment"
	CapitalMovedToAvailableSubTotalTransactionType1SplitPayment                      CapitalMovedToAvailableSubTotalTransactionType1 = "split-payment"
	CapitalMovedToAvailableSubTotalTransactionType1FailedPayment                     CapitalMovedToAvailableSubTotalTransactionType1 = "failed-payment"
	CapitalMovedToAvailableSubTotalTransactionType1FailedPlatformSplitPayment        CapitalMovedToAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	CapitalMovedToAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    CapitalMovedToAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	CapitalMovedToAvailableSubTotalTransactionType1Capture                           CapitalMovedToAvailableSubTotalTransactionType1 = "capture"
	CapitalMovedToAvailableSubTotalTransactionType1SplitTransaction                  CapitalMovedToAvailableSubTotalTransactionType1 = "split-transaction"
	CapitalMovedToAvailableSubTotalTransactionType1Refund                            CapitalMovedToAvailableSubTotalTransactionType1 = "refund"
	CapitalMovedToAvailableSubTotalTransactionType1PlatformPaymentRefund             CapitalMovedToAvailableSubTotalTransactionType1 = "platform-payment-refund"
	CapitalMovedToAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     CapitalMovedToAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	CapitalMovedToAvailableSubTotalTransactionType1RefundCompensation                CapitalMovedToAvailableSubTotalTransactionType1 = "refund-compensation"
	CapitalMovedToAvailableSubTotalTransactionType1ReturnedRefundCompensation        CapitalMovedToAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	CapitalMovedToAvailableSubTotalTransactionType1ReturnedRefund                    CapitalMovedToAvailableSubTotalTransactionType1 = "returned-refund"
	CapitalMovedToAvailableSubTotalTransactionType1Chargeback                        CapitalMovedToAvailableSubTotalTransactionType1 = "chargeback"
	CapitalMovedToAvailableSubTotalTransactionType1ChargebackReversal                CapitalMovedToAvailableSubTotalTransactionType1 = "chargeback-reversal"
	CapitalMovedToAvailableSubTotalTransactionType1ChargebackCompensation            CapitalMovedToAvailableSubTotalTransactionType1 = "chargeback-compensation"
	CapitalMovedToAvailableSubTotalTransactionType1ReversedChargebackCompensation    CapitalMovedToAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	CapitalMovedToAvailableSubTotalTransactionType1PlatformPaymentChargeback         CapitalMovedToAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	CapitalMovedToAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback CapitalMovedToAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	CapitalMovedToAvailableSubTotalTransactionType1FeePrepayment                     CapitalMovedToAvailableSubTotalTransactionType1 = "fee-prepayment"
	CapitalMovedToAvailableSubTotalTransactionType1OutgoingTransfer                  CapitalMovedToAvailableSubTotalTransactionType1 = "outgoing-transfer"
	CapitalMovedToAvailableSubTotalTransactionType1IncomingTransfer                  CapitalMovedToAvailableSubTotalTransactionType1 = "incoming-transfer"
	CapitalMovedToAvailableSubTotalTransactionType1CanceledTransfer                  CapitalMovedToAvailableSubTotalTransactionType1 = "canceled-transfer"
	CapitalMovedToAvailableSubTotalTransactionType1ReturnedTransfer                  CapitalMovedToAvailableSubTotalTransactionType1 = "returned-transfer"
	CapitalMovedToAvailableSubTotalTransactionType1BalanceReserve                    CapitalMovedToAvailableSubTotalTransactionType1 = "balance-reserve"
	CapitalMovedToAvailableSubTotalTransactionType1BalanceReserveReturn              CapitalMovedToAvailableSubTotalTransactionType1 = "balance-reserve-return"
	CapitalMovedToAvailableSubTotalTransactionType1InvoiceRoundingCompensation       CapitalMovedToAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	CapitalMovedToAvailableSubTotalTransactionType1RollingReserveHold                CapitalMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	CapitalMovedToAvailableSubTotalTransactionType1RollingReserveRelease             CapitalMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	CapitalMovedToAvailableSubTotalTransactionType1BalanceCorrection                 CapitalMovedToAvailableSubTotalTransactionType1 = "balance-correction"
	CapitalMovedToAvailableSubTotalTransactionType1Repayment                         CapitalMovedToAvailableSubTotalTransactionType1 = "repayment"
	CapitalMovedToAvailableSubTotalTransactionType1Loan                              CapitalMovedToAvailableSubTotalTransactionType1 = "loan"
	CapitalMovedToAvailableSubTotalTransactionType1BalanceTopup                      CapitalMovedToAvailableSubTotalTransactionType1 = "balance-topup"
	CapitalMovedToAvailableSubTotalTransactionType1CashCollateralIssuance            CapitalMovedToAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	CapitalMovedToAvailableSubTotalTransactionType1CashCollateralRelease             CapitalMovedToAvailableSubTotalTransactionType1 = "cash-collateral-release"
	CapitalMovedToAvailableSubTotalTransactionType1PendingRollingReserve             CapitalMovedToAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	CapitalMovedToAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        CapitalMovedToAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	CapitalMovedToAvailableSubTotalTransactionType1HeldRollingReserve                CapitalMovedToAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	CapitalMovedToAvailableSubTotalTransactionType1ReleasedRollingReserve            CapitalMovedToAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e CapitalMovedToAvailableSubTotalTransactionType1) ToPointer() *CapitalMovedToAvailableSubTotalTransactionType1 {
	return &e
}
func (e *CapitalMovedToAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = CapitalMovedToAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalMovedToAvailableSubTotalTransactionType1: %v", v)
	}
}

type CapitalMovedToAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *CapitalMovedToAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *CapitalMovedToAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *CapitalMovedToAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *CapitalMovedToAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *CapitalMovedToAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *CapitalMovedToAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *CapitalMovedToAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *CapitalMovedToAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *CapitalMovedToAvailableSubTotal1) GetMethod() *CapitalMovedToAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CapitalMovedToAvailableSubTotal1) GetCardIssuer() *CapitalMovedToAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *CapitalMovedToAvailableSubTotal1) GetCardAudience() *CapitalMovedToAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *CapitalMovedToAvailableSubTotal1) GetCardRegion() *CapitalMovedToAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *CapitalMovedToAvailableSubTotal1) GetFeeType() *CapitalMovedToAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *CapitalMovedToAvailableSubTotal1) GetPrepaymentPartType() *CapitalMovedToAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *CapitalMovedToAvailableSubTotal1) GetTransactionType() *CapitalMovedToAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// CapitalMovedToAvailableSubtotalMethod2 - Payment type of the transactions
type CapitalMovedToAvailableSubtotalMethod2 string

const (
	CapitalMovedToAvailableSubtotalMethod2Alma              CapitalMovedToAvailableSubtotalMethod2 = "alma"
	CapitalMovedToAvailableSubtotalMethod2Bacs              CapitalMovedToAvailableSubtotalMethod2 = "bacs"
	CapitalMovedToAvailableSubtotalMethod2Applepay          CapitalMovedToAvailableSubtotalMethod2 = "applepay"
	CapitalMovedToAvailableSubtotalMethod2Bancomatpay       CapitalMovedToAvailableSubtotalMethod2 = "bancomatpay"
	CapitalMovedToAvailableSubtotalMethod2Bancontact        CapitalMovedToAvailableSubtotalMethod2 = "bancontact"
	CapitalMovedToAvailableSubtotalMethod2Banktransfer      CapitalMovedToAvailableSubtotalMethod2 = "banktransfer"
	CapitalMovedToAvailableSubtotalMethod2Belfius           CapitalMovedToAvailableSubtotalMethod2 = "belfius"
	CapitalMovedToAvailableSubtotalMethod2Billie            CapitalMovedToAvailableSubtotalMethod2 = "billie"
	CapitalMovedToAvailableSubtotalMethod2Bizum             CapitalMovedToAvailableSubtotalMethod2 = "bizum"
	CapitalMovedToAvailableSubtotalMethod2Bitcoin           CapitalMovedToAvailableSubtotalMethod2 = "bitcoin"
	CapitalMovedToAvailableSubtotalMethod2Blik              CapitalMovedToAvailableSubtotalMethod2 = "blik"
	CapitalMovedToAvailableSubtotalMethod2Creditcard        CapitalMovedToAvailableSubtotalMethod2 = "creditcard"
	CapitalMovedToAvailableSubtotalMethod2Directdebit       CapitalMovedToAvailableSubtotalMethod2 = "directdebit"
	CapitalMovedToAvailableSubtotalMethod2Eps               CapitalMovedToAvailableSubtotalMethod2 = "eps"
	CapitalMovedToAvailableSubtotalMethod2Giftcard          CapitalMovedToAvailableSubtotalMethod2 = "giftcard"
	CapitalMovedToAvailableSubtotalMethod2Giropay           CapitalMovedToAvailableSubtotalMethod2 = "giropay"
	CapitalMovedToAvailableSubtotalMethod2Googlepay         CapitalMovedToAvailableSubtotalMethod2 = "googlepay"
	CapitalMovedToAvailableSubtotalMethod2Ideal             CapitalMovedToAvailableSubtotalMethod2 = "ideal"
	CapitalMovedToAvailableSubtotalMethod2In3               CapitalMovedToAvailableSubtotalMethod2 = "in3"
	CapitalMovedToAvailableSubtotalMethod2Inghomepay        CapitalMovedToAvailableSubtotalMethod2 = "inghomepay"
	CapitalMovedToAvailableSubtotalMethod2Kbc               CapitalMovedToAvailableSubtotalMethod2 = "kbc"
	CapitalMovedToAvailableSubtotalMethod2Klarnapaylater    CapitalMovedToAvailableSubtotalMethod2 = "klarnapaylater"
	CapitalMovedToAvailableSubtotalMethod2Klarnapaynow      CapitalMovedToAvailableSubtotalMethod2 = "klarnapaynow"
	CapitalMovedToAvailableSubtotalMethod2Klarnasliceit     CapitalMovedToAvailableSubtotalMethod2 = "klarnasliceit"
	CapitalMovedToAvailableSubtotalMethod2Klarna            CapitalMovedToAvailableSubtotalMethod2 = "klarna"
	CapitalMovedToAvailableSubtotalMethod2Mbway             CapitalMovedToAvailableSubtotalMethod2 = "mbway"
	CapitalMovedToAvailableSubtotalMethod2Multibanco        CapitalMovedToAvailableSubtotalMethod2 = "multibanco"
	CapitalMovedToAvailableSubtotalMethod2Mybank            CapitalMovedToAvailableSubtotalMethod2 = "mybank"
	CapitalMovedToAvailableSubtotalMethod2Paybybank         CapitalMovedToAvailableSubtotalMethod2 = "paybybank"
	CapitalMovedToAvailableSubtotalMethod2Payconiq          CapitalMovedToAvailableSubtotalMethod2 = "payconiq"
	CapitalMovedToAvailableSubtotalMethod2Paypal            CapitalMovedToAvailableSubtotalMethod2 = "paypal"
	CapitalMovedToAvailableSubtotalMethod2Paysafecard       CapitalMovedToAvailableSubtotalMethod2 = "paysafecard"
	CapitalMovedToAvailableSubtotalMethod2Przelewy24        CapitalMovedToAvailableSubtotalMethod2 = "przelewy24"
	CapitalMovedToAvailableSubtotalMethod2Riverty           CapitalMovedToAvailableSubtotalMethod2 = "riverty"
	CapitalMovedToAvailableSubtotalMethod2Satispay          CapitalMovedToAvailableSubtotalMethod2 = "satispay"
	CapitalMovedToAvailableSubtotalMethod2Podiumcadeaukaart CapitalMovedToAvailableSubtotalMethod2 = "podiumcadeaukaart"
	CapitalMovedToAvailableSubtotalMethod2Pointofsale       CapitalMovedToAvailableSubtotalMethod2 = "pointofsale"
	CapitalMovedToAvailableSubtotalMethod2Sofort            CapitalMovedToAvailableSubtotalMethod2 = "sofort"
	CapitalMovedToAvailableSubtotalMethod2Swish             CapitalMovedToAvailableSubtotalMethod2 = "swish"
	CapitalMovedToAvailableSubtotalMethod2Trustly           CapitalMovedToAvailableSubtotalMethod2 = "trustly"
	CapitalMovedToAvailableSubtotalMethod2Twint             CapitalMovedToAvailableSubtotalMethod2 = "twint"
	CapitalMovedToAvailableSubtotalMethod2Voucher           CapitalMovedToAvailableSubtotalMethod2 = "voucher"
)

func (e CapitalMovedToAvailableSubtotalMethod2) ToPointer() *CapitalMovedToAvailableSubtotalMethod2 {
	return &e
}
func (e *CapitalMovedToAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = CapitalMovedToAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalMovedToAvailableSubtotalMethod2: %v", v)
	}
}

// CapitalMovedToAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type CapitalMovedToAvailableSubtotalCardIssuer2 string

const (
	CapitalMovedToAvailableSubtotalCardIssuer2Amex          CapitalMovedToAvailableSubtotalCardIssuer2 = "amex"
	CapitalMovedToAvailableSubtotalCardIssuer2Maestro       CapitalMovedToAvailableSubtotalCardIssuer2 = "maestro"
	CapitalMovedToAvailableSubtotalCardIssuer2CarteBancaire CapitalMovedToAvailableSubtotalCardIssuer2 = "carte-bancaire"
	CapitalMovedToAvailableSubtotalCardIssuer2Other         CapitalMovedToAvailableSubtotalCardIssuer2 = "other"
)

func (e CapitalMovedToAvailableSubtotalCardIssuer2) ToPointer() *CapitalMovedToAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *CapitalMovedToAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = CapitalMovedToAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalMovedToAvailableSubtotalCardIssuer2: %v", v)
	}
}

// CapitalMovedToAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type CapitalMovedToAvailableSubtotalCardAudience2 string

const (
	CapitalMovedToAvailableSubtotalCardAudience2Corporate CapitalMovedToAvailableSubtotalCardAudience2 = "corporate"
	CapitalMovedToAvailableSubtotalCardAudience2Other     CapitalMovedToAvailableSubtotalCardAudience2 = "other"
)

func (e CapitalMovedToAvailableSubtotalCardAudience2) ToPointer() *CapitalMovedToAvailableSubtotalCardAudience2 {
	return &e
}
func (e *CapitalMovedToAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = CapitalMovedToAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalMovedToAvailableSubtotalCardAudience2: %v", v)
	}
}

// CapitalMovedToAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type CapitalMovedToAvailableSubtotalCardRegion2 string

const (
	CapitalMovedToAvailableSubtotalCardRegion2IntraEea CapitalMovedToAvailableSubtotalCardRegion2 = "intra-eea"
	CapitalMovedToAvailableSubtotalCardRegion2IntraEu  CapitalMovedToAvailableSubtotalCardRegion2 = "intra-eu"
	CapitalMovedToAvailableSubtotalCardRegion2Domestic CapitalMovedToAvailableSubtotalCardRegion2 = "domestic"
	CapitalMovedToAvailableSubtotalCardRegion2Other    CapitalMovedToAvailableSubtotalCardRegion2 = "other"
)

func (e CapitalMovedToAvailableSubtotalCardRegion2) ToPointer() *CapitalMovedToAvailableSubtotalCardRegion2 {
	return &e
}
func (e *CapitalMovedToAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = CapitalMovedToAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalMovedToAvailableSubtotalCardRegion2: %v", v)
	}
}

// CapitalMovedToAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type CapitalMovedToAvailableSubtotalFeeType2 string

const (
	CapitalMovedToAvailableSubtotalFeeType2PaymentFee                                        CapitalMovedToAvailableSubtotalFeeType2 = "payment-fee"
	CapitalMovedToAvailableSubtotalFeeType2DirectDebitFailureFee                             CapitalMovedToAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	CapitalMovedToAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        CapitalMovedToAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	CapitalMovedToAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  CapitalMovedToAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	CapitalMovedToAvailableSubtotalFeeType2PartnerCommission                                 CapitalMovedToAvailableSubtotalFeeType2 = "partner-commission"
	CapitalMovedToAvailableSubtotalFeeType2ApplicationFee                                    CapitalMovedToAvailableSubtotalFeeType2 = "application-fee"
	CapitalMovedToAvailableSubtotalFeeType2CaptureFee                                        CapitalMovedToAvailableSubtotalFeeType2 = "capture-fee"
	CapitalMovedToAvailableSubtotalFeeType2RefundFee                                         CapitalMovedToAvailableSubtotalFeeType2 = "refund-fee"
	CapitalMovedToAvailableSubtotalFeeType2ChargebackFee                                     CapitalMovedToAvailableSubtotalFeeType2 = "chargeback-fee"
	CapitalMovedToAvailableSubtotalFeeType2PaymentNotificationFee                            CapitalMovedToAvailableSubtotalFeeType2 = "payment-notification-fee"
	CapitalMovedToAvailableSubtotalFeeType2TransferNotificationFee                           CapitalMovedToAvailableSubtotalFeeType2 = "transfer-notification-fee"
	CapitalMovedToAvailableSubtotalFeeType2PayoutFee                                         CapitalMovedToAvailableSubtotalFeeType2 = "payout-fee"
	CapitalMovedToAvailableSubtotalFeeType2FeeDiscount                                       CapitalMovedToAvailableSubtotalFeeType2 = "fee-discount"
	CapitalMovedToAvailableSubtotalFeeType2FeeReimbursement                                  CapitalMovedToAvailableSubtotalFeeType2 = "fee-reimbursement"
	CapitalMovedToAvailableSubtotalFeeType2PlatformVolumeFee                                 CapitalMovedToAvailableSubtotalFeeType2 = "platform-volume-fee"
	CapitalMovedToAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 CapitalMovedToAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	CapitalMovedToAvailableSubtotalFeeType2BalanceChargeFee                                  CapitalMovedToAvailableSubtotalFeeType2 = "balance-charge-fee"
	CapitalMovedToAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   CapitalMovedToAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	CapitalMovedToAvailableSubtotalFeeType2TerminalMonthlyFee                                CapitalMovedToAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	CapitalMovedToAvailableSubtotalFeeType2AcceptanceRiskFee                                 CapitalMovedToAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	CapitalMovedToAvailableSubtotalFeeType2TopUpFee                                          CapitalMovedToAvailableSubtotalFeeType2 = "top-up-fee"
	CapitalMovedToAvailableSubtotalFeeType2PaymentGatewayFee                                 CapitalMovedToAvailableSubtotalFeeType2 = "payment-gateway-fee"
	CapitalMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   CapitalMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	CapitalMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee CapitalMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	CapitalMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             CapitalMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	CapitalMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           CapitalMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	CapitalMovedToAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           CapitalMovedToAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e CapitalMovedToAvailableSubtotalFeeType2) ToPointer() *CapitalMovedToAvailableSubtotalFeeType2 {
	return &e
}
func (e *CapitalMovedToAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = CapitalMovedToAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalMovedToAvailableSubtotalFeeType2: %v", v)
	}
}

// CapitalMovedToAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type CapitalMovedToAvailableSubtotalPrepaymentPartType2 string

const (
	CapitalMovedToAvailableSubtotalPrepaymentPartType2Fee                     CapitalMovedToAvailableSubtotalPrepaymentPartType2 = "fee"
	CapitalMovedToAvailableSubtotalPrepaymentPartType2FeeReimbursement        CapitalMovedToAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	CapitalMovedToAvailableSubtotalPrepaymentPartType2FeeDiscount             CapitalMovedToAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	CapitalMovedToAvailableSubtotalPrepaymentPartType2FeeVat                  CapitalMovedToAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	CapitalMovedToAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation CapitalMovedToAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e CapitalMovedToAvailableSubtotalPrepaymentPartType2) ToPointer() *CapitalMovedToAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *CapitalMovedToAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = CapitalMovedToAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalMovedToAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// CapitalMovedToAvailableSubtotalTransactionType2 - Represents the transaction type
type CapitalMovedToAvailableSubtotalTransactionType2 string

const (
	CapitalMovedToAvailableSubtotalTransactionType2Payment                           CapitalMovedToAvailableSubtotalTransactionType2 = "payment"
	CapitalMovedToAvailableSubtotalTransactionType2SplitPayment                      CapitalMovedToAvailableSubtotalTransactionType2 = "split-payment"
	CapitalMovedToAvailableSubtotalTransactionType2FailedPayment                     CapitalMovedToAvailableSubtotalTransactionType2 = "failed-payment"
	CapitalMovedToAvailableSubtotalTransactionType2FailedPlatformSplitPayment        CapitalMovedToAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	CapitalMovedToAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    CapitalMovedToAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	CapitalMovedToAvailableSubtotalTransactionType2Capture                           CapitalMovedToAvailableSubtotalTransactionType2 = "capture"
	CapitalMovedToAvailableSubtotalTransactionType2SplitTransaction                  CapitalMovedToAvailableSubtotalTransactionType2 = "split-transaction"
	CapitalMovedToAvailableSubtotalTransactionType2Refund                            CapitalMovedToAvailableSubtotalTransactionType2 = "refund"
	CapitalMovedToAvailableSubtotalTransactionType2PlatformPaymentRefund             CapitalMovedToAvailableSubtotalTransactionType2 = "platform-payment-refund"
	CapitalMovedToAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     CapitalMovedToAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	CapitalMovedToAvailableSubtotalTransactionType2RefundCompensation                CapitalMovedToAvailableSubtotalTransactionType2 = "refund-compensation"
	CapitalMovedToAvailableSubtotalTransactionType2ReturnedRefundCompensation        CapitalMovedToAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	CapitalMovedToAvailableSubtotalTransactionType2ReturnedRefund                    CapitalMovedToAvailableSubtotalTransactionType2 = "returned-refund"
	CapitalMovedToAvailableSubtotalTransactionType2Chargeback                        CapitalMovedToAvailableSubtotalTransactionType2 = "chargeback"
	CapitalMovedToAvailableSubtotalTransactionType2ChargebackReversal                CapitalMovedToAvailableSubtotalTransactionType2 = "chargeback-reversal"
	CapitalMovedToAvailableSubtotalTransactionType2ChargebackCompensation            CapitalMovedToAvailableSubtotalTransactionType2 = "chargeback-compensation"
	CapitalMovedToAvailableSubtotalTransactionType2ReversedChargebackCompensation    CapitalMovedToAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	CapitalMovedToAvailableSubtotalTransactionType2PlatformPaymentChargeback         CapitalMovedToAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	CapitalMovedToAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback CapitalMovedToAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	CapitalMovedToAvailableSubtotalTransactionType2FeePrepayment                     CapitalMovedToAvailableSubtotalTransactionType2 = "fee-prepayment"
	CapitalMovedToAvailableSubtotalTransactionType2OutgoingTransfer                  CapitalMovedToAvailableSubtotalTransactionType2 = "outgoing-transfer"
	CapitalMovedToAvailableSubtotalTransactionType2IncomingTransfer                  CapitalMovedToAvailableSubtotalTransactionType2 = "incoming-transfer"
	CapitalMovedToAvailableSubtotalTransactionType2CanceledTransfer                  CapitalMovedToAvailableSubtotalTransactionType2 = "canceled-transfer"
	CapitalMovedToAvailableSubtotalTransactionType2ReturnedTransfer                  CapitalMovedToAvailableSubtotalTransactionType2 = "returned-transfer"
	CapitalMovedToAvailableSubtotalTransactionType2BalanceReserve                    CapitalMovedToAvailableSubtotalTransactionType2 = "balance-reserve"
	CapitalMovedToAvailableSubtotalTransactionType2BalanceReserveReturn              CapitalMovedToAvailableSubtotalTransactionType2 = "balance-reserve-return"
	CapitalMovedToAvailableSubtotalTransactionType2InvoiceRoundingCompensation       CapitalMovedToAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	CapitalMovedToAvailableSubtotalTransactionType2RollingReserveHold                CapitalMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	CapitalMovedToAvailableSubtotalTransactionType2RollingReserveRelease             CapitalMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	CapitalMovedToAvailableSubtotalTransactionType2BalanceCorrection                 CapitalMovedToAvailableSubtotalTransactionType2 = "balance-correction"
	CapitalMovedToAvailableSubtotalTransactionType2Repayment                         CapitalMovedToAvailableSubtotalTransactionType2 = "repayment"
	CapitalMovedToAvailableSubtotalTransactionType2Loan                              CapitalMovedToAvailableSubtotalTransactionType2 = "loan"
	CapitalMovedToAvailableSubtotalTransactionType2BalanceTopup                      CapitalMovedToAvailableSubtotalTransactionType2 = "balance-topup"
	CapitalMovedToAvailableSubtotalTransactionType2CashCollateralIssuance            CapitalMovedToAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	CapitalMovedToAvailableSubtotalTransactionType2CashCollateralRelease             CapitalMovedToAvailableSubtotalTransactionType2 = "cash-collateral-release"
	CapitalMovedToAvailableSubtotalTransactionType2PendingRollingReserve             CapitalMovedToAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	CapitalMovedToAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        CapitalMovedToAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	CapitalMovedToAvailableSubtotalTransactionType2HeldRollingReserve                CapitalMovedToAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	CapitalMovedToAvailableSubtotalTransactionType2ReleasedRollingReserve            CapitalMovedToAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e CapitalMovedToAvailableSubtotalTransactionType2) ToPointer() *CapitalMovedToAvailableSubtotalTransactionType2 {
	return &e
}
func (e *CapitalMovedToAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = CapitalMovedToAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalMovedToAvailableSubtotalTransactionType2: %v", v)
	}
}

type CapitalMovedToAvailableSubtotal2 struct {
	SubTotals []CapitalMovedToAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *CapitalMovedToAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *CapitalMovedToAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *CapitalMovedToAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *CapitalMovedToAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *CapitalMovedToAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *CapitalMovedToAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *CapitalMovedToAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *CapitalMovedToAvailableSubtotal2) GetSubTotals() []CapitalMovedToAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *CapitalMovedToAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *CapitalMovedToAvailableSubtotal2) GetMethod() *CapitalMovedToAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CapitalMovedToAvailableSubtotal2) GetCardIssuer() *CapitalMovedToAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *CapitalMovedToAvailableSubtotal2) GetCardAudience() *CapitalMovedToAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *CapitalMovedToAvailableSubtotal2) GetCardRegion() *CapitalMovedToAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *CapitalMovedToAvailableSubtotal2) GetFeeType() *CapitalMovedToAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *CapitalMovedToAvailableSubtotal2) GetPrepaymentPartType() *CapitalMovedToAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *CapitalMovedToAvailableSubtotal2) GetTransactionType() *CapitalMovedToAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type CapitalMovedToAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *CapitalMovedToAvailableAmount     `json:"amount,omitempty"`
	Subtotals []CapitalMovedToAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *CapitalMovedToAvailable) GetAmount() *CapitalMovedToAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CapitalMovedToAvailable) GetSubtotals() []CapitalMovedToAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// CapitalImmediatelyAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type CapitalImmediatelyAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CapitalImmediatelyAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CapitalImmediatelyAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CapitalImmediatelyAvailableSubTotalMethod1 - Payment type of the transactions
type CapitalImmediatelyAvailableSubTotalMethod1 string

const (
	CapitalImmediatelyAvailableSubTotalMethod1Alma              CapitalImmediatelyAvailableSubTotalMethod1 = "alma"
	CapitalImmediatelyAvailableSubTotalMethod1Bacs              CapitalImmediatelyAvailableSubTotalMethod1 = "bacs"
	CapitalImmediatelyAvailableSubTotalMethod1Applepay          CapitalImmediatelyAvailableSubTotalMethod1 = "applepay"
	CapitalImmediatelyAvailableSubTotalMethod1Bancomatpay       CapitalImmediatelyAvailableSubTotalMethod1 = "bancomatpay"
	CapitalImmediatelyAvailableSubTotalMethod1Bancontact        CapitalImmediatelyAvailableSubTotalMethod1 = "bancontact"
	CapitalImmediatelyAvailableSubTotalMethod1Banktransfer      CapitalImmediatelyAvailableSubTotalMethod1 = "banktransfer"
	CapitalImmediatelyAvailableSubTotalMethod1Belfius           CapitalImmediatelyAvailableSubTotalMethod1 = "belfius"
	CapitalImmediatelyAvailableSubTotalMethod1Billie            CapitalImmediatelyAvailableSubTotalMethod1 = "billie"
	CapitalImmediatelyAvailableSubTotalMethod1Bizum             CapitalImmediatelyAvailableSubTotalMethod1 = "bizum"
	CapitalImmediatelyAvailableSubTotalMethod1Bitcoin           CapitalImmediatelyAvailableSubTotalMethod1 = "bitcoin"
	CapitalImmediatelyAvailableSubTotalMethod1Blik              CapitalImmediatelyAvailableSubTotalMethod1 = "blik"
	CapitalImmediatelyAvailableSubTotalMethod1Creditcard        CapitalImmediatelyAvailableSubTotalMethod1 = "creditcard"
	CapitalImmediatelyAvailableSubTotalMethod1Directdebit       CapitalImmediatelyAvailableSubTotalMethod1 = "directdebit"
	CapitalImmediatelyAvailableSubTotalMethod1Eps               CapitalImmediatelyAvailableSubTotalMethod1 = "eps"
	CapitalImmediatelyAvailableSubTotalMethod1Giftcard          CapitalImmediatelyAvailableSubTotalMethod1 = "giftcard"
	CapitalImmediatelyAvailableSubTotalMethod1Giropay           CapitalImmediatelyAvailableSubTotalMethod1 = "giropay"
	CapitalImmediatelyAvailableSubTotalMethod1Googlepay         CapitalImmediatelyAvailableSubTotalMethod1 = "googlepay"
	CapitalImmediatelyAvailableSubTotalMethod1Ideal             CapitalImmediatelyAvailableSubTotalMethod1 = "ideal"
	CapitalImmediatelyAvailableSubTotalMethod1In3               CapitalImmediatelyAvailableSubTotalMethod1 = "in3"
	CapitalImmediatelyAvailableSubTotalMethod1Inghomepay        CapitalImmediatelyAvailableSubTotalMethod1 = "inghomepay"
	CapitalImmediatelyAvailableSubTotalMethod1Kbc               CapitalImmediatelyAvailableSubTotalMethod1 = "kbc"
	CapitalImmediatelyAvailableSubTotalMethod1Klarnapaylater    CapitalImmediatelyAvailableSubTotalMethod1 = "klarnapaylater"
	CapitalImmediatelyAvailableSubTotalMethod1Klarnapaynow      CapitalImmediatelyAvailableSubTotalMethod1 = "klarnapaynow"
	CapitalImmediatelyAvailableSubTotalMethod1Klarnasliceit     CapitalImmediatelyAvailableSubTotalMethod1 = "klarnasliceit"
	CapitalImmediatelyAvailableSubTotalMethod1Klarna            CapitalImmediatelyAvailableSubTotalMethod1 = "klarna"
	CapitalImmediatelyAvailableSubTotalMethod1Mbway             CapitalImmediatelyAvailableSubTotalMethod1 = "mbway"
	CapitalImmediatelyAvailableSubTotalMethod1Multibanco        CapitalImmediatelyAvailableSubTotalMethod1 = "multibanco"
	CapitalImmediatelyAvailableSubTotalMethod1Mybank            CapitalImmediatelyAvailableSubTotalMethod1 = "mybank"
	CapitalImmediatelyAvailableSubTotalMethod1Paybybank         CapitalImmediatelyAvailableSubTotalMethod1 = "paybybank"
	CapitalImmediatelyAvailableSubTotalMethod1Payconiq          CapitalImmediatelyAvailableSubTotalMethod1 = "payconiq"
	CapitalImmediatelyAvailableSubTotalMethod1Paypal            CapitalImmediatelyAvailableSubTotalMethod1 = "paypal"
	CapitalImmediatelyAvailableSubTotalMethod1Paysafecard       CapitalImmediatelyAvailableSubTotalMethod1 = "paysafecard"
	CapitalImmediatelyAvailableSubTotalMethod1Przelewy24        CapitalImmediatelyAvailableSubTotalMethod1 = "przelewy24"
	CapitalImmediatelyAvailableSubTotalMethod1Riverty           CapitalImmediatelyAvailableSubTotalMethod1 = "riverty"
	CapitalImmediatelyAvailableSubTotalMethod1Satispay          CapitalImmediatelyAvailableSubTotalMethod1 = "satispay"
	CapitalImmediatelyAvailableSubTotalMethod1Podiumcadeaukaart CapitalImmediatelyAvailableSubTotalMethod1 = "podiumcadeaukaart"
	CapitalImmediatelyAvailableSubTotalMethod1Pointofsale       CapitalImmediatelyAvailableSubTotalMethod1 = "pointofsale"
	CapitalImmediatelyAvailableSubTotalMethod1Sofort            CapitalImmediatelyAvailableSubTotalMethod1 = "sofort"
	CapitalImmediatelyAvailableSubTotalMethod1Swish             CapitalImmediatelyAvailableSubTotalMethod1 = "swish"
	CapitalImmediatelyAvailableSubTotalMethod1Trustly           CapitalImmediatelyAvailableSubTotalMethod1 = "trustly"
	CapitalImmediatelyAvailableSubTotalMethod1Twint             CapitalImmediatelyAvailableSubTotalMethod1 = "twint"
	CapitalImmediatelyAvailableSubTotalMethod1Voucher           CapitalImmediatelyAvailableSubTotalMethod1 = "voucher"
)

func (e CapitalImmediatelyAvailableSubTotalMethod1) ToPointer() *CapitalImmediatelyAvailableSubTotalMethod1 {
	return &e
}
func (e *CapitalImmediatelyAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = CapitalImmediatelyAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalImmediatelyAvailableSubTotalMethod1: %v", v)
	}
}

// CapitalImmediatelyAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type CapitalImmediatelyAvailableSubTotalCardIssuer1 string

const (
	CapitalImmediatelyAvailableSubTotalCardIssuer1Amex          CapitalImmediatelyAvailableSubTotalCardIssuer1 = "amex"
	CapitalImmediatelyAvailableSubTotalCardIssuer1Maestro       CapitalImmediatelyAvailableSubTotalCardIssuer1 = "maestro"
	CapitalImmediatelyAvailableSubTotalCardIssuer1CarteBancaire CapitalImmediatelyAvailableSubTotalCardIssuer1 = "carte-bancaire"
	CapitalImmediatelyAvailableSubTotalCardIssuer1Other         CapitalImmediatelyAvailableSubTotalCardIssuer1 = "other"
)

func (e CapitalImmediatelyAvailableSubTotalCardIssuer1) ToPointer() *CapitalImmediatelyAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *CapitalImmediatelyAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = CapitalImmediatelyAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalImmediatelyAvailableSubTotalCardIssuer1: %v", v)
	}
}

// CapitalImmediatelyAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type CapitalImmediatelyAvailableSubTotalCardAudience1 string

const (
	CapitalImmediatelyAvailableSubTotalCardAudience1Corporate CapitalImmediatelyAvailableSubTotalCardAudience1 = "corporate"
	CapitalImmediatelyAvailableSubTotalCardAudience1Other     CapitalImmediatelyAvailableSubTotalCardAudience1 = "other"
)

func (e CapitalImmediatelyAvailableSubTotalCardAudience1) ToPointer() *CapitalImmediatelyAvailableSubTotalCardAudience1 {
	return &e
}
func (e *CapitalImmediatelyAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = CapitalImmediatelyAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalImmediatelyAvailableSubTotalCardAudience1: %v", v)
	}
}

// CapitalImmediatelyAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type CapitalImmediatelyAvailableSubTotalCardRegion1 string

const (
	CapitalImmediatelyAvailableSubTotalCardRegion1IntraEea CapitalImmediatelyAvailableSubTotalCardRegion1 = "intra-eea"
	CapitalImmediatelyAvailableSubTotalCardRegion1IntraEu  CapitalImmediatelyAvailableSubTotalCardRegion1 = "intra-eu"
	CapitalImmediatelyAvailableSubTotalCardRegion1Domestic CapitalImmediatelyAvailableSubTotalCardRegion1 = "domestic"
	CapitalImmediatelyAvailableSubTotalCardRegion1Other    CapitalImmediatelyAvailableSubTotalCardRegion1 = "other"
)

func (e CapitalImmediatelyAvailableSubTotalCardRegion1) ToPointer() *CapitalImmediatelyAvailableSubTotalCardRegion1 {
	return &e
}
func (e *CapitalImmediatelyAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = CapitalImmediatelyAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalImmediatelyAvailableSubTotalCardRegion1: %v", v)
	}
}

// CapitalImmediatelyAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type CapitalImmediatelyAvailableSubTotalFeeType1 string

const (
	CapitalImmediatelyAvailableSubTotalFeeType1PaymentFee                                        CapitalImmediatelyAvailableSubTotalFeeType1 = "payment-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1DirectDebitFailureFee                             CapitalImmediatelyAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        CapitalImmediatelyAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  CapitalImmediatelyAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1PartnerCommission                                 CapitalImmediatelyAvailableSubTotalFeeType1 = "partner-commission"
	CapitalImmediatelyAvailableSubTotalFeeType1ApplicationFee                                    CapitalImmediatelyAvailableSubTotalFeeType1 = "application-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1CaptureFee                                        CapitalImmediatelyAvailableSubTotalFeeType1 = "capture-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1RefundFee                                         CapitalImmediatelyAvailableSubTotalFeeType1 = "refund-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1ChargebackFee                                     CapitalImmediatelyAvailableSubTotalFeeType1 = "chargeback-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1PaymentNotificationFee                            CapitalImmediatelyAvailableSubTotalFeeType1 = "payment-notification-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1TransferNotificationFee                           CapitalImmediatelyAvailableSubTotalFeeType1 = "transfer-notification-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1PayoutFee                                         CapitalImmediatelyAvailableSubTotalFeeType1 = "payout-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1FeeDiscount                                       CapitalImmediatelyAvailableSubTotalFeeType1 = "fee-discount"
	CapitalImmediatelyAvailableSubTotalFeeType1FeeReimbursement                                  CapitalImmediatelyAvailableSubTotalFeeType1 = "fee-reimbursement"
	CapitalImmediatelyAvailableSubTotalFeeType1PlatformVolumeFee                                 CapitalImmediatelyAvailableSubTotalFeeType1 = "platform-volume-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 CapitalImmediatelyAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1BalanceChargeFee                                  CapitalImmediatelyAvailableSubTotalFeeType1 = "balance-charge-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   CapitalImmediatelyAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1TerminalMonthlyFee                                CapitalImmediatelyAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1AcceptanceRiskFee                                 CapitalImmediatelyAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1TopUpFee                                          CapitalImmediatelyAvailableSubTotalFeeType1 = "top-up-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1PaymentGatewayFee                                 CapitalImmediatelyAvailableSubTotalFeeType1 = "payment-gateway-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   CapitalImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee CapitalImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             CapitalImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           CapitalImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	CapitalImmediatelyAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           CapitalImmediatelyAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e CapitalImmediatelyAvailableSubTotalFeeType1) ToPointer() *CapitalImmediatelyAvailableSubTotalFeeType1 {
	return &e
}
func (e *CapitalImmediatelyAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = CapitalImmediatelyAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalImmediatelyAvailableSubTotalFeeType1: %v", v)
	}
}

// CapitalImmediatelyAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type CapitalImmediatelyAvailableSubTotalPrepaymentPartType1 string

const (
	CapitalImmediatelyAvailableSubTotalPrepaymentPartType1Fee                     CapitalImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee"
	CapitalImmediatelyAvailableSubTotalPrepaymentPartType1FeeReimbursement        CapitalImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	CapitalImmediatelyAvailableSubTotalPrepaymentPartType1FeeDiscount             CapitalImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	CapitalImmediatelyAvailableSubTotalPrepaymentPartType1FeeVat                  CapitalImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	CapitalImmediatelyAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation CapitalImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e CapitalImmediatelyAvailableSubTotalPrepaymentPartType1) ToPointer() *CapitalImmediatelyAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *CapitalImmediatelyAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = CapitalImmediatelyAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalImmediatelyAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// CapitalImmediatelyAvailableSubTotalTransactionType1 - Represents the transaction type
type CapitalImmediatelyAvailableSubTotalTransactionType1 string

const (
	CapitalImmediatelyAvailableSubTotalTransactionType1Payment                           CapitalImmediatelyAvailableSubTotalTransactionType1 = "payment"
	CapitalImmediatelyAvailableSubTotalTransactionType1SplitPayment                      CapitalImmediatelyAvailableSubTotalTransactionType1 = "split-payment"
	CapitalImmediatelyAvailableSubTotalTransactionType1FailedPayment                     CapitalImmediatelyAvailableSubTotalTransactionType1 = "failed-payment"
	CapitalImmediatelyAvailableSubTotalTransactionType1FailedPlatformSplitPayment        CapitalImmediatelyAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	CapitalImmediatelyAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    CapitalImmediatelyAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	CapitalImmediatelyAvailableSubTotalTransactionType1Capture                           CapitalImmediatelyAvailableSubTotalTransactionType1 = "capture"
	CapitalImmediatelyAvailableSubTotalTransactionType1SplitTransaction                  CapitalImmediatelyAvailableSubTotalTransactionType1 = "split-transaction"
	CapitalImmediatelyAvailableSubTotalTransactionType1Refund                            CapitalImmediatelyAvailableSubTotalTransactionType1 = "refund"
	CapitalImmediatelyAvailableSubTotalTransactionType1PlatformPaymentRefund             CapitalImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-refund"
	CapitalImmediatelyAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     CapitalImmediatelyAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	CapitalImmediatelyAvailableSubTotalTransactionType1RefundCompensation                CapitalImmediatelyAvailableSubTotalTransactionType1 = "refund-compensation"
	CapitalImmediatelyAvailableSubTotalTransactionType1ReturnedRefundCompensation        CapitalImmediatelyAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	CapitalImmediatelyAvailableSubTotalTransactionType1ReturnedRefund                    CapitalImmediatelyAvailableSubTotalTransactionType1 = "returned-refund"
	CapitalImmediatelyAvailableSubTotalTransactionType1Chargeback                        CapitalImmediatelyAvailableSubTotalTransactionType1 = "chargeback"
	CapitalImmediatelyAvailableSubTotalTransactionType1ChargebackReversal                CapitalImmediatelyAvailableSubTotalTransactionType1 = "chargeback-reversal"
	CapitalImmediatelyAvailableSubTotalTransactionType1ChargebackCompensation            CapitalImmediatelyAvailableSubTotalTransactionType1 = "chargeback-compensation"
	CapitalImmediatelyAvailableSubTotalTransactionType1ReversedChargebackCompensation    CapitalImmediatelyAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	CapitalImmediatelyAvailableSubTotalTransactionType1PlatformPaymentChargeback         CapitalImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	CapitalImmediatelyAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback CapitalImmediatelyAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	CapitalImmediatelyAvailableSubTotalTransactionType1FeePrepayment                     CapitalImmediatelyAvailableSubTotalTransactionType1 = "fee-prepayment"
	CapitalImmediatelyAvailableSubTotalTransactionType1OutgoingTransfer                  CapitalImmediatelyAvailableSubTotalTransactionType1 = "outgoing-transfer"
	CapitalImmediatelyAvailableSubTotalTransactionType1IncomingTransfer                  CapitalImmediatelyAvailableSubTotalTransactionType1 = "incoming-transfer"
	CapitalImmediatelyAvailableSubTotalTransactionType1CanceledTransfer                  CapitalImmediatelyAvailableSubTotalTransactionType1 = "canceled-transfer"
	CapitalImmediatelyAvailableSubTotalTransactionType1ReturnedTransfer                  CapitalImmediatelyAvailableSubTotalTransactionType1 = "returned-transfer"
	CapitalImmediatelyAvailableSubTotalTransactionType1BalanceReserve                    CapitalImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve"
	CapitalImmediatelyAvailableSubTotalTransactionType1BalanceReserveReturn              CapitalImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve-return"
	CapitalImmediatelyAvailableSubTotalTransactionType1InvoiceRoundingCompensation       CapitalImmediatelyAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	CapitalImmediatelyAvailableSubTotalTransactionType1RollingReserveHold                CapitalImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	CapitalImmediatelyAvailableSubTotalTransactionType1RollingReserveRelease             CapitalImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	CapitalImmediatelyAvailableSubTotalTransactionType1BalanceCorrection                 CapitalImmediatelyAvailableSubTotalTransactionType1 = "balance-correction"
	CapitalImmediatelyAvailableSubTotalTransactionType1Repayment                         CapitalImmediatelyAvailableSubTotalTransactionType1 = "repayment"
	CapitalImmediatelyAvailableSubTotalTransactionType1Loan                              CapitalImmediatelyAvailableSubTotalTransactionType1 = "loan"
	CapitalImmediatelyAvailableSubTotalTransactionType1BalanceTopup                      CapitalImmediatelyAvailableSubTotalTransactionType1 = "balance-topup"
	CapitalImmediatelyAvailableSubTotalTransactionType1CashCollateralIssuance            CapitalImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	CapitalImmediatelyAvailableSubTotalTransactionType1CashCollateralRelease             CapitalImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-release"
	CapitalImmediatelyAvailableSubTotalTransactionType1PendingRollingReserve             CapitalImmediatelyAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	CapitalImmediatelyAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        CapitalImmediatelyAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	CapitalImmediatelyAvailableSubTotalTransactionType1HeldRollingReserve                CapitalImmediatelyAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	CapitalImmediatelyAvailableSubTotalTransactionType1ReleasedRollingReserve            CapitalImmediatelyAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e CapitalImmediatelyAvailableSubTotalTransactionType1) ToPointer() *CapitalImmediatelyAvailableSubTotalTransactionType1 {
	return &e
}
func (e *CapitalImmediatelyAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = CapitalImmediatelyAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalImmediatelyAvailableSubTotalTransactionType1: %v", v)
	}
}

type CapitalImmediatelyAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *CapitalImmediatelyAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *CapitalImmediatelyAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *CapitalImmediatelyAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *CapitalImmediatelyAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *CapitalImmediatelyAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *CapitalImmediatelyAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *CapitalImmediatelyAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *CapitalImmediatelyAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *CapitalImmediatelyAvailableSubTotal1) GetMethod() *CapitalImmediatelyAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CapitalImmediatelyAvailableSubTotal1) GetCardIssuer() *CapitalImmediatelyAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *CapitalImmediatelyAvailableSubTotal1) GetCardAudience() *CapitalImmediatelyAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *CapitalImmediatelyAvailableSubTotal1) GetCardRegion() *CapitalImmediatelyAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *CapitalImmediatelyAvailableSubTotal1) GetFeeType() *CapitalImmediatelyAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *CapitalImmediatelyAvailableSubTotal1) GetPrepaymentPartType() *CapitalImmediatelyAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *CapitalImmediatelyAvailableSubTotal1) GetTransactionType() *CapitalImmediatelyAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// CapitalImmediatelyAvailableSubtotalMethod2 - Payment type of the transactions
type CapitalImmediatelyAvailableSubtotalMethod2 string

const (
	CapitalImmediatelyAvailableSubtotalMethod2Alma              CapitalImmediatelyAvailableSubtotalMethod2 = "alma"
	CapitalImmediatelyAvailableSubtotalMethod2Bacs              CapitalImmediatelyAvailableSubtotalMethod2 = "bacs"
	CapitalImmediatelyAvailableSubtotalMethod2Applepay          CapitalImmediatelyAvailableSubtotalMethod2 = "applepay"
	CapitalImmediatelyAvailableSubtotalMethod2Bancomatpay       CapitalImmediatelyAvailableSubtotalMethod2 = "bancomatpay"
	CapitalImmediatelyAvailableSubtotalMethod2Bancontact        CapitalImmediatelyAvailableSubtotalMethod2 = "bancontact"
	CapitalImmediatelyAvailableSubtotalMethod2Banktransfer      CapitalImmediatelyAvailableSubtotalMethod2 = "banktransfer"
	CapitalImmediatelyAvailableSubtotalMethod2Belfius           CapitalImmediatelyAvailableSubtotalMethod2 = "belfius"
	CapitalImmediatelyAvailableSubtotalMethod2Billie            CapitalImmediatelyAvailableSubtotalMethod2 = "billie"
	CapitalImmediatelyAvailableSubtotalMethod2Bizum             CapitalImmediatelyAvailableSubtotalMethod2 = "bizum"
	CapitalImmediatelyAvailableSubtotalMethod2Bitcoin           CapitalImmediatelyAvailableSubtotalMethod2 = "bitcoin"
	CapitalImmediatelyAvailableSubtotalMethod2Blik              CapitalImmediatelyAvailableSubtotalMethod2 = "blik"
	CapitalImmediatelyAvailableSubtotalMethod2Creditcard        CapitalImmediatelyAvailableSubtotalMethod2 = "creditcard"
	CapitalImmediatelyAvailableSubtotalMethod2Directdebit       CapitalImmediatelyAvailableSubtotalMethod2 = "directdebit"
	CapitalImmediatelyAvailableSubtotalMethod2Eps               CapitalImmediatelyAvailableSubtotalMethod2 = "eps"
	CapitalImmediatelyAvailableSubtotalMethod2Giftcard          CapitalImmediatelyAvailableSubtotalMethod2 = "giftcard"
	CapitalImmediatelyAvailableSubtotalMethod2Giropay           CapitalImmediatelyAvailableSubtotalMethod2 = "giropay"
	CapitalImmediatelyAvailableSubtotalMethod2Googlepay         CapitalImmediatelyAvailableSubtotalMethod2 = "googlepay"
	CapitalImmediatelyAvailableSubtotalMethod2Ideal             CapitalImmediatelyAvailableSubtotalMethod2 = "ideal"
	CapitalImmediatelyAvailableSubtotalMethod2In3               CapitalImmediatelyAvailableSubtotalMethod2 = "in3"
	CapitalImmediatelyAvailableSubtotalMethod2Inghomepay        CapitalImmediatelyAvailableSubtotalMethod2 = "inghomepay"
	CapitalImmediatelyAvailableSubtotalMethod2Kbc               CapitalImmediatelyAvailableSubtotalMethod2 = "kbc"
	CapitalImmediatelyAvailableSubtotalMethod2Klarnapaylater    CapitalImmediatelyAvailableSubtotalMethod2 = "klarnapaylater"
	CapitalImmediatelyAvailableSubtotalMethod2Klarnapaynow      CapitalImmediatelyAvailableSubtotalMethod2 = "klarnapaynow"
	CapitalImmediatelyAvailableSubtotalMethod2Klarnasliceit     CapitalImmediatelyAvailableSubtotalMethod2 = "klarnasliceit"
	CapitalImmediatelyAvailableSubtotalMethod2Klarna            CapitalImmediatelyAvailableSubtotalMethod2 = "klarna"
	CapitalImmediatelyAvailableSubtotalMethod2Mbway             CapitalImmediatelyAvailableSubtotalMethod2 = "mbway"
	CapitalImmediatelyAvailableSubtotalMethod2Multibanco        CapitalImmediatelyAvailableSubtotalMethod2 = "multibanco"
	CapitalImmediatelyAvailableSubtotalMethod2Mybank            CapitalImmediatelyAvailableSubtotalMethod2 = "mybank"
	CapitalImmediatelyAvailableSubtotalMethod2Paybybank         CapitalImmediatelyAvailableSubtotalMethod2 = "paybybank"
	CapitalImmediatelyAvailableSubtotalMethod2Payconiq          CapitalImmediatelyAvailableSubtotalMethod2 = "payconiq"
	CapitalImmediatelyAvailableSubtotalMethod2Paypal            CapitalImmediatelyAvailableSubtotalMethod2 = "paypal"
	CapitalImmediatelyAvailableSubtotalMethod2Paysafecard       CapitalImmediatelyAvailableSubtotalMethod2 = "paysafecard"
	CapitalImmediatelyAvailableSubtotalMethod2Przelewy24        CapitalImmediatelyAvailableSubtotalMethod2 = "przelewy24"
	CapitalImmediatelyAvailableSubtotalMethod2Riverty           CapitalImmediatelyAvailableSubtotalMethod2 = "riverty"
	CapitalImmediatelyAvailableSubtotalMethod2Satispay          CapitalImmediatelyAvailableSubtotalMethod2 = "satispay"
	CapitalImmediatelyAvailableSubtotalMethod2Podiumcadeaukaart CapitalImmediatelyAvailableSubtotalMethod2 = "podiumcadeaukaart"
	CapitalImmediatelyAvailableSubtotalMethod2Pointofsale       CapitalImmediatelyAvailableSubtotalMethod2 = "pointofsale"
	CapitalImmediatelyAvailableSubtotalMethod2Sofort            CapitalImmediatelyAvailableSubtotalMethod2 = "sofort"
	CapitalImmediatelyAvailableSubtotalMethod2Swish             CapitalImmediatelyAvailableSubtotalMethod2 = "swish"
	CapitalImmediatelyAvailableSubtotalMethod2Trustly           CapitalImmediatelyAvailableSubtotalMethod2 = "trustly"
	CapitalImmediatelyAvailableSubtotalMethod2Twint             CapitalImmediatelyAvailableSubtotalMethod2 = "twint"
	CapitalImmediatelyAvailableSubtotalMethod2Voucher           CapitalImmediatelyAvailableSubtotalMethod2 = "voucher"
)

func (e CapitalImmediatelyAvailableSubtotalMethod2) ToPointer() *CapitalImmediatelyAvailableSubtotalMethod2 {
	return &e
}
func (e *CapitalImmediatelyAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = CapitalImmediatelyAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalImmediatelyAvailableSubtotalMethod2: %v", v)
	}
}

// CapitalImmediatelyAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type CapitalImmediatelyAvailableSubtotalCardIssuer2 string

const (
	CapitalImmediatelyAvailableSubtotalCardIssuer2Amex          CapitalImmediatelyAvailableSubtotalCardIssuer2 = "amex"
	CapitalImmediatelyAvailableSubtotalCardIssuer2Maestro       CapitalImmediatelyAvailableSubtotalCardIssuer2 = "maestro"
	CapitalImmediatelyAvailableSubtotalCardIssuer2CarteBancaire CapitalImmediatelyAvailableSubtotalCardIssuer2 = "carte-bancaire"
	CapitalImmediatelyAvailableSubtotalCardIssuer2Other         CapitalImmediatelyAvailableSubtotalCardIssuer2 = "other"
)

func (e CapitalImmediatelyAvailableSubtotalCardIssuer2) ToPointer() *CapitalImmediatelyAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *CapitalImmediatelyAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = CapitalImmediatelyAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalImmediatelyAvailableSubtotalCardIssuer2: %v", v)
	}
}

// CapitalImmediatelyAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type CapitalImmediatelyAvailableSubtotalCardAudience2 string

const (
	CapitalImmediatelyAvailableSubtotalCardAudience2Corporate CapitalImmediatelyAvailableSubtotalCardAudience2 = "corporate"
	CapitalImmediatelyAvailableSubtotalCardAudience2Other     CapitalImmediatelyAvailableSubtotalCardAudience2 = "other"
)

func (e CapitalImmediatelyAvailableSubtotalCardAudience2) ToPointer() *CapitalImmediatelyAvailableSubtotalCardAudience2 {
	return &e
}
func (e *CapitalImmediatelyAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = CapitalImmediatelyAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalImmediatelyAvailableSubtotalCardAudience2: %v", v)
	}
}

// CapitalImmediatelyAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type CapitalImmediatelyAvailableSubtotalCardRegion2 string

const (
	CapitalImmediatelyAvailableSubtotalCardRegion2IntraEea CapitalImmediatelyAvailableSubtotalCardRegion2 = "intra-eea"
	CapitalImmediatelyAvailableSubtotalCardRegion2IntraEu  CapitalImmediatelyAvailableSubtotalCardRegion2 = "intra-eu"
	CapitalImmediatelyAvailableSubtotalCardRegion2Domestic CapitalImmediatelyAvailableSubtotalCardRegion2 = "domestic"
	CapitalImmediatelyAvailableSubtotalCardRegion2Other    CapitalImmediatelyAvailableSubtotalCardRegion2 = "other"
)

func (e CapitalImmediatelyAvailableSubtotalCardRegion2) ToPointer() *CapitalImmediatelyAvailableSubtotalCardRegion2 {
	return &e
}
func (e *CapitalImmediatelyAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = CapitalImmediatelyAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalImmediatelyAvailableSubtotalCardRegion2: %v", v)
	}
}

// CapitalImmediatelyAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type CapitalImmediatelyAvailableSubtotalFeeType2 string

const (
	CapitalImmediatelyAvailableSubtotalFeeType2PaymentFee                                        CapitalImmediatelyAvailableSubtotalFeeType2 = "payment-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2DirectDebitFailureFee                             CapitalImmediatelyAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        CapitalImmediatelyAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  CapitalImmediatelyAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2PartnerCommission                                 CapitalImmediatelyAvailableSubtotalFeeType2 = "partner-commission"
	CapitalImmediatelyAvailableSubtotalFeeType2ApplicationFee                                    CapitalImmediatelyAvailableSubtotalFeeType2 = "application-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2CaptureFee                                        CapitalImmediatelyAvailableSubtotalFeeType2 = "capture-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2RefundFee                                         CapitalImmediatelyAvailableSubtotalFeeType2 = "refund-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2ChargebackFee                                     CapitalImmediatelyAvailableSubtotalFeeType2 = "chargeback-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2PaymentNotificationFee                            CapitalImmediatelyAvailableSubtotalFeeType2 = "payment-notification-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2TransferNotificationFee                           CapitalImmediatelyAvailableSubtotalFeeType2 = "transfer-notification-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2PayoutFee                                         CapitalImmediatelyAvailableSubtotalFeeType2 = "payout-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2FeeDiscount                                       CapitalImmediatelyAvailableSubtotalFeeType2 = "fee-discount"
	CapitalImmediatelyAvailableSubtotalFeeType2FeeReimbursement                                  CapitalImmediatelyAvailableSubtotalFeeType2 = "fee-reimbursement"
	CapitalImmediatelyAvailableSubtotalFeeType2PlatformVolumeFee                                 CapitalImmediatelyAvailableSubtotalFeeType2 = "platform-volume-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 CapitalImmediatelyAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2BalanceChargeFee                                  CapitalImmediatelyAvailableSubtotalFeeType2 = "balance-charge-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   CapitalImmediatelyAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2TerminalMonthlyFee                                CapitalImmediatelyAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2AcceptanceRiskFee                                 CapitalImmediatelyAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2TopUpFee                                          CapitalImmediatelyAvailableSubtotalFeeType2 = "top-up-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2PaymentGatewayFee                                 CapitalImmediatelyAvailableSubtotalFeeType2 = "payment-gateway-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   CapitalImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee CapitalImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             CapitalImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           CapitalImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	CapitalImmediatelyAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           CapitalImmediatelyAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e CapitalImmediatelyAvailableSubtotalFeeType2) ToPointer() *CapitalImmediatelyAvailableSubtotalFeeType2 {
	return &e
}
func (e *CapitalImmediatelyAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = CapitalImmediatelyAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalImmediatelyAvailableSubtotalFeeType2: %v", v)
	}
}

// CapitalImmediatelyAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type CapitalImmediatelyAvailableSubtotalPrepaymentPartType2 string

const (
	CapitalImmediatelyAvailableSubtotalPrepaymentPartType2Fee                     CapitalImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee"
	CapitalImmediatelyAvailableSubtotalPrepaymentPartType2FeeReimbursement        CapitalImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	CapitalImmediatelyAvailableSubtotalPrepaymentPartType2FeeDiscount             CapitalImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	CapitalImmediatelyAvailableSubtotalPrepaymentPartType2FeeVat                  CapitalImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	CapitalImmediatelyAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation CapitalImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e CapitalImmediatelyAvailableSubtotalPrepaymentPartType2) ToPointer() *CapitalImmediatelyAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *CapitalImmediatelyAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = CapitalImmediatelyAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalImmediatelyAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// CapitalImmediatelyAvailableSubtotalTransactionType2 - Represents the transaction type
type CapitalImmediatelyAvailableSubtotalTransactionType2 string

const (
	CapitalImmediatelyAvailableSubtotalTransactionType2Payment                           CapitalImmediatelyAvailableSubtotalTransactionType2 = "payment"
	CapitalImmediatelyAvailableSubtotalTransactionType2SplitPayment                      CapitalImmediatelyAvailableSubtotalTransactionType2 = "split-payment"
	CapitalImmediatelyAvailableSubtotalTransactionType2FailedPayment                     CapitalImmediatelyAvailableSubtotalTransactionType2 = "failed-payment"
	CapitalImmediatelyAvailableSubtotalTransactionType2FailedPlatformSplitPayment        CapitalImmediatelyAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	CapitalImmediatelyAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    CapitalImmediatelyAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	CapitalImmediatelyAvailableSubtotalTransactionType2Capture                           CapitalImmediatelyAvailableSubtotalTransactionType2 = "capture"
	CapitalImmediatelyAvailableSubtotalTransactionType2SplitTransaction                  CapitalImmediatelyAvailableSubtotalTransactionType2 = "split-transaction"
	CapitalImmediatelyAvailableSubtotalTransactionType2Refund                            CapitalImmediatelyAvailableSubtotalTransactionType2 = "refund"
	CapitalImmediatelyAvailableSubtotalTransactionType2PlatformPaymentRefund             CapitalImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-refund"
	CapitalImmediatelyAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     CapitalImmediatelyAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	CapitalImmediatelyAvailableSubtotalTransactionType2RefundCompensation                CapitalImmediatelyAvailableSubtotalTransactionType2 = "refund-compensation"
	CapitalImmediatelyAvailableSubtotalTransactionType2ReturnedRefundCompensation        CapitalImmediatelyAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	CapitalImmediatelyAvailableSubtotalTransactionType2ReturnedRefund                    CapitalImmediatelyAvailableSubtotalTransactionType2 = "returned-refund"
	CapitalImmediatelyAvailableSubtotalTransactionType2Chargeback                        CapitalImmediatelyAvailableSubtotalTransactionType2 = "chargeback"
	CapitalImmediatelyAvailableSubtotalTransactionType2ChargebackReversal                CapitalImmediatelyAvailableSubtotalTransactionType2 = "chargeback-reversal"
	CapitalImmediatelyAvailableSubtotalTransactionType2ChargebackCompensation            CapitalImmediatelyAvailableSubtotalTransactionType2 = "chargeback-compensation"
	CapitalImmediatelyAvailableSubtotalTransactionType2ReversedChargebackCompensation    CapitalImmediatelyAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	CapitalImmediatelyAvailableSubtotalTransactionType2PlatformPaymentChargeback         CapitalImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	CapitalImmediatelyAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback CapitalImmediatelyAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	CapitalImmediatelyAvailableSubtotalTransactionType2FeePrepayment                     CapitalImmediatelyAvailableSubtotalTransactionType2 = "fee-prepayment"
	CapitalImmediatelyAvailableSubtotalTransactionType2OutgoingTransfer                  CapitalImmediatelyAvailableSubtotalTransactionType2 = "outgoing-transfer"
	CapitalImmediatelyAvailableSubtotalTransactionType2IncomingTransfer                  CapitalImmediatelyAvailableSubtotalTransactionType2 = "incoming-transfer"
	CapitalImmediatelyAvailableSubtotalTransactionType2CanceledTransfer                  CapitalImmediatelyAvailableSubtotalTransactionType2 = "canceled-transfer"
	CapitalImmediatelyAvailableSubtotalTransactionType2ReturnedTransfer                  CapitalImmediatelyAvailableSubtotalTransactionType2 = "returned-transfer"
	CapitalImmediatelyAvailableSubtotalTransactionType2BalanceReserve                    CapitalImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve"
	CapitalImmediatelyAvailableSubtotalTransactionType2BalanceReserveReturn              CapitalImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve-return"
	CapitalImmediatelyAvailableSubtotalTransactionType2InvoiceRoundingCompensation       CapitalImmediatelyAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	CapitalImmediatelyAvailableSubtotalTransactionType2RollingReserveHold                CapitalImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	CapitalImmediatelyAvailableSubtotalTransactionType2RollingReserveRelease             CapitalImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	CapitalImmediatelyAvailableSubtotalTransactionType2BalanceCorrection                 CapitalImmediatelyAvailableSubtotalTransactionType2 = "balance-correction"
	CapitalImmediatelyAvailableSubtotalTransactionType2Repayment                         CapitalImmediatelyAvailableSubtotalTransactionType2 = "repayment"
	CapitalImmediatelyAvailableSubtotalTransactionType2Loan                              CapitalImmediatelyAvailableSubtotalTransactionType2 = "loan"
	CapitalImmediatelyAvailableSubtotalTransactionType2BalanceTopup                      CapitalImmediatelyAvailableSubtotalTransactionType2 = "balance-topup"
	CapitalImmediatelyAvailableSubtotalTransactionType2CashCollateralIssuance            CapitalImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	CapitalImmediatelyAvailableSubtotalTransactionType2CashCollateralRelease             CapitalImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-release"
	CapitalImmediatelyAvailableSubtotalTransactionType2PendingRollingReserve             CapitalImmediatelyAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	CapitalImmediatelyAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        CapitalImmediatelyAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	CapitalImmediatelyAvailableSubtotalTransactionType2HeldRollingReserve                CapitalImmediatelyAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	CapitalImmediatelyAvailableSubtotalTransactionType2ReleasedRollingReserve            CapitalImmediatelyAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e CapitalImmediatelyAvailableSubtotalTransactionType2) ToPointer() *CapitalImmediatelyAvailableSubtotalTransactionType2 {
	return &e
}
func (e *CapitalImmediatelyAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = CapitalImmediatelyAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapitalImmediatelyAvailableSubtotalTransactionType2: %v", v)
	}
}

type CapitalImmediatelyAvailableSubtotal2 struct {
	SubTotals []CapitalImmediatelyAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *CapitalImmediatelyAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *CapitalImmediatelyAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *CapitalImmediatelyAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *CapitalImmediatelyAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *CapitalImmediatelyAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *CapitalImmediatelyAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *CapitalImmediatelyAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *CapitalImmediatelyAvailableSubtotal2) GetSubTotals() []CapitalImmediatelyAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *CapitalImmediatelyAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *CapitalImmediatelyAvailableSubtotal2) GetMethod() *CapitalImmediatelyAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CapitalImmediatelyAvailableSubtotal2) GetCardIssuer() *CapitalImmediatelyAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *CapitalImmediatelyAvailableSubtotal2) GetCardAudience() *CapitalImmediatelyAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *CapitalImmediatelyAvailableSubtotal2) GetCardRegion() *CapitalImmediatelyAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *CapitalImmediatelyAvailableSubtotal2) GetFeeType() *CapitalImmediatelyAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *CapitalImmediatelyAvailableSubtotal2) GetPrepaymentPartType() *CapitalImmediatelyAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *CapitalImmediatelyAvailableSubtotal2) GetTransactionType() *CapitalImmediatelyAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type CapitalImmediatelyAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *CapitalImmediatelyAvailableAmount     `json:"amount,omitempty"`
	Subtotals []CapitalImmediatelyAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *CapitalImmediatelyAvailable) GetAmount() *CapitalImmediatelyAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CapitalImmediatelyAvailable) GetSubtotals() []CapitalImmediatelyAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// Capital - Only available on `transaction-categories` grouping.
type Capital struct {
	Pending              *CapitalPending              `json:"pending,omitempty"`
	MovedToAvailable     *CapitalMovedToAvailable     `json:"movedToAvailable,omitempty"`
	ImmediatelyAvailable *CapitalImmediatelyAvailable `json:"immediatelyAvailable,omitempty"`
}

func (o *Capital) GetPending() *CapitalPending {
	if o == nil {
		return nil
	}
	return o.Pending
}

func (o *Capital) GetMovedToAvailable() *CapitalMovedToAvailable {
	if o == nil {
		return nil
	}
	return o.MovedToAvailable
}

func (o *Capital) GetImmediatelyAvailable() *CapitalImmediatelyAvailable {
	if o == nil {
		return nil
	}
	return o.ImmediatelyAvailable
}

// TransfersPendingAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type TransfersPendingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *TransfersPendingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *TransfersPendingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// TransfersPendingSubTotalMethod1 - Payment type of the transactions
type TransfersPendingSubTotalMethod1 string

const (
	TransfersPendingSubTotalMethod1Alma              TransfersPendingSubTotalMethod1 = "alma"
	TransfersPendingSubTotalMethod1Bacs              TransfersPendingSubTotalMethod1 = "bacs"
	TransfersPendingSubTotalMethod1Applepay          TransfersPendingSubTotalMethod1 = "applepay"
	TransfersPendingSubTotalMethod1Bancomatpay       TransfersPendingSubTotalMethod1 = "bancomatpay"
	TransfersPendingSubTotalMethod1Bancontact        TransfersPendingSubTotalMethod1 = "bancontact"
	TransfersPendingSubTotalMethod1Banktransfer      TransfersPendingSubTotalMethod1 = "banktransfer"
	TransfersPendingSubTotalMethod1Belfius           TransfersPendingSubTotalMethod1 = "belfius"
	TransfersPendingSubTotalMethod1Billie            TransfersPendingSubTotalMethod1 = "billie"
	TransfersPendingSubTotalMethod1Bizum             TransfersPendingSubTotalMethod1 = "bizum"
	TransfersPendingSubTotalMethod1Bitcoin           TransfersPendingSubTotalMethod1 = "bitcoin"
	TransfersPendingSubTotalMethod1Blik              TransfersPendingSubTotalMethod1 = "blik"
	TransfersPendingSubTotalMethod1Creditcard        TransfersPendingSubTotalMethod1 = "creditcard"
	TransfersPendingSubTotalMethod1Directdebit       TransfersPendingSubTotalMethod1 = "directdebit"
	TransfersPendingSubTotalMethod1Eps               TransfersPendingSubTotalMethod1 = "eps"
	TransfersPendingSubTotalMethod1Giftcard          TransfersPendingSubTotalMethod1 = "giftcard"
	TransfersPendingSubTotalMethod1Giropay           TransfersPendingSubTotalMethod1 = "giropay"
	TransfersPendingSubTotalMethod1Googlepay         TransfersPendingSubTotalMethod1 = "googlepay"
	TransfersPendingSubTotalMethod1Ideal             TransfersPendingSubTotalMethod1 = "ideal"
	TransfersPendingSubTotalMethod1In3               TransfersPendingSubTotalMethod1 = "in3"
	TransfersPendingSubTotalMethod1Inghomepay        TransfersPendingSubTotalMethod1 = "inghomepay"
	TransfersPendingSubTotalMethod1Kbc               TransfersPendingSubTotalMethod1 = "kbc"
	TransfersPendingSubTotalMethod1Klarnapaylater    TransfersPendingSubTotalMethod1 = "klarnapaylater"
	TransfersPendingSubTotalMethod1Klarnapaynow      TransfersPendingSubTotalMethod1 = "klarnapaynow"
	TransfersPendingSubTotalMethod1Klarnasliceit     TransfersPendingSubTotalMethod1 = "klarnasliceit"
	TransfersPendingSubTotalMethod1Klarna            TransfersPendingSubTotalMethod1 = "klarna"
	TransfersPendingSubTotalMethod1Mbway             TransfersPendingSubTotalMethod1 = "mbway"
	TransfersPendingSubTotalMethod1Multibanco        TransfersPendingSubTotalMethod1 = "multibanco"
	TransfersPendingSubTotalMethod1Mybank            TransfersPendingSubTotalMethod1 = "mybank"
	TransfersPendingSubTotalMethod1Paybybank         TransfersPendingSubTotalMethod1 = "paybybank"
	TransfersPendingSubTotalMethod1Payconiq          TransfersPendingSubTotalMethod1 = "payconiq"
	TransfersPendingSubTotalMethod1Paypal            TransfersPendingSubTotalMethod1 = "paypal"
	TransfersPendingSubTotalMethod1Paysafecard       TransfersPendingSubTotalMethod1 = "paysafecard"
	TransfersPendingSubTotalMethod1Przelewy24        TransfersPendingSubTotalMethod1 = "przelewy24"
	TransfersPendingSubTotalMethod1Riverty           TransfersPendingSubTotalMethod1 = "riverty"
	TransfersPendingSubTotalMethod1Satispay          TransfersPendingSubTotalMethod1 = "satispay"
	TransfersPendingSubTotalMethod1Podiumcadeaukaart TransfersPendingSubTotalMethod1 = "podiumcadeaukaart"
	TransfersPendingSubTotalMethod1Pointofsale       TransfersPendingSubTotalMethod1 = "pointofsale"
	TransfersPendingSubTotalMethod1Sofort            TransfersPendingSubTotalMethod1 = "sofort"
	TransfersPendingSubTotalMethod1Swish             TransfersPendingSubTotalMethod1 = "swish"
	TransfersPendingSubTotalMethod1Trustly           TransfersPendingSubTotalMethod1 = "trustly"
	TransfersPendingSubTotalMethod1Twint             TransfersPendingSubTotalMethod1 = "twint"
	TransfersPendingSubTotalMethod1Voucher           TransfersPendingSubTotalMethod1 = "voucher"
)

func (e TransfersPendingSubTotalMethod1) ToPointer() *TransfersPendingSubTotalMethod1 {
	return &e
}
func (e *TransfersPendingSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = TransfersPendingSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersPendingSubTotalMethod1: %v", v)
	}
}

// TransfersPendingSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type TransfersPendingSubTotalCardIssuer1 string

const (
	TransfersPendingSubTotalCardIssuer1Amex          TransfersPendingSubTotalCardIssuer1 = "amex"
	TransfersPendingSubTotalCardIssuer1Maestro       TransfersPendingSubTotalCardIssuer1 = "maestro"
	TransfersPendingSubTotalCardIssuer1CarteBancaire TransfersPendingSubTotalCardIssuer1 = "carte-bancaire"
	TransfersPendingSubTotalCardIssuer1Other         TransfersPendingSubTotalCardIssuer1 = "other"
)

func (e TransfersPendingSubTotalCardIssuer1) ToPointer() *TransfersPendingSubTotalCardIssuer1 {
	return &e
}
func (e *TransfersPendingSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = TransfersPendingSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersPendingSubTotalCardIssuer1: %v", v)
	}
}

// TransfersPendingSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type TransfersPendingSubTotalCardAudience1 string

const (
	TransfersPendingSubTotalCardAudience1Corporate TransfersPendingSubTotalCardAudience1 = "corporate"
	TransfersPendingSubTotalCardAudience1Other     TransfersPendingSubTotalCardAudience1 = "other"
)

func (e TransfersPendingSubTotalCardAudience1) ToPointer() *TransfersPendingSubTotalCardAudience1 {
	return &e
}
func (e *TransfersPendingSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = TransfersPendingSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersPendingSubTotalCardAudience1: %v", v)
	}
}

// TransfersPendingSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type TransfersPendingSubTotalCardRegion1 string

const (
	TransfersPendingSubTotalCardRegion1IntraEea TransfersPendingSubTotalCardRegion1 = "intra-eea"
	TransfersPendingSubTotalCardRegion1IntraEu  TransfersPendingSubTotalCardRegion1 = "intra-eu"
	TransfersPendingSubTotalCardRegion1Domestic TransfersPendingSubTotalCardRegion1 = "domestic"
	TransfersPendingSubTotalCardRegion1Other    TransfersPendingSubTotalCardRegion1 = "other"
)

func (e TransfersPendingSubTotalCardRegion1) ToPointer() *TransfersPendingSubTotalCardRegion1 {
	return &e
}
func (e *TransfersPendingSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = TransfersPendingSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersPendingSubTotalCardRegion1: %v", v)
	}
}

// TransfersPendingSubTotalFeeType1 - Present when the transaction represents a fee.
type TransfersPendingSubTotalFeeType1 string

const (
	TransfersPendingSubTotalFeeType1PaymentFee                                        TransfersPendingSubTotalFeeType1 = "payment-fee"
	TransfersPendingSubTotalFeeType1DirectDebitFailureFee                             TransfersPendingSubTotalFeeType1 = "direct-debit-failure-fee"
	TransfersPendingSubTotalFeeType1UnauthorizedDirectDebitFee                        TransfersPendingSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	TransfersPendingSubTotalFeeType1BankChargedDirectDebitFailureFee                  TransfersPendingSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	TransfersPendingSubTotalFeeType1PartnerCommission                                 TransfersPendingSubTotalFeeType1 = "partner-commission"
	TransfersPendingSubTotalFeeType1ApplicationFee                                    TransfersPendingSubTotalFeeType1 = "application-fee"
	TransfersPendingSubTotalFeeType1CaptureFee                                        TransfersPendingSubTotalFeeType1 = "capture-fee"
	TransfersPendingSubTotalFeeType1RefundFee                                         TransfersPendingSubTotalFeeType1 = "refund-fee"
	TransfersPendingSubTotalFeeType1ChargebackFee                                     TransfersPendingSubTotalFeeType1 = "chargeback-fee"
	TransfersPendingSubTotalFeeType1PaymentNotificationFee                            TransfersPendingSubTotalFeeType1 = "payment-notification-fee"
	TransfersPendingSubTotalFeeType1TransferNotificationFee                           TransfersPendingSubTotalFeeType1 = "transfer-notification-fee"
	TransfersPendingSubTotalFeeType1PayoutFee                                         TransfersPendingSubTotalFeeType1 = "payout-fee"
	TransfersPendingSubTotalFeeType1FeeDiscount                                       TransfersPendingSubTotalFeeType1 = "fee-discount"
	TransfersPendingSubTotalFeeType1FeeReimbursement                                  TransfersPendingSubTotalFeeType1 = "fee-reimbursement"
	TransfersPendingSubTotalFeeType1PlatformVolumeFee                                 TransfersPendingSubTotalFeeType1 = "platform-volume-fee"
	TransfersPendingSubTotalFeeType1PlatformConnectedOrganizationsFee                 TransfersPendingSubTotalFeeType1 = "platform-connected-organizations-fee"
	TransfersPendingSubTotalFeeType1BalanceChargeFee                                  TransfersPendingSubTotalFeeType1 = "balance-charge-fee"
	TransfersPendingSubTotalFeeType1ThreedsAuthenticationAttemptFee                   TransfersPendingSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	TransfersPendingSubTotalFeeType1TerminalMonthlyFee                                TransfersPendingSubTotalFeeType1 = "terminal-monthly-fee"
	TransfersPendingSubTotalFeeType1AcceptanceRiskFee                                 TransfersPendingSubTotalFeeType1 = "acceptance-risk-fee"
	TransfersPendingSubTotalFeeType1TopUpFee                                          TransfersPendingSubTotalFeeType1 = "top-up-fee"
	TransfersPendingSubTotalFeeType1PaymentGatewayFee                                 TransfersPendingSubTotalFeeType1 = "payment-gateway-fee"
	TransfersPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   TransfersPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	TransfersPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee TransfersPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	TransfersPendingSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             TransfersPendingSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	TransfersPendingSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           TransfersPendingSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	TransfersPendingSubTotalFeeType1MinimumInvoiceAmountFee                           TransfersPendingSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e TransfersPendingSubTotalFeeType1) ToPointer() *TransfersPendingSubTotalFeeType1 {
	return &e
}
func (e *TransfersPendingSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = TransfersPendingSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersPendingSubTotalFeeType1: %v", v)
	}
}

// TransfersPendingSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type TransfersPendingSubTotalPrepaymentPartType1 string

const (
	TransfersPendingSubTotalPrepaymentPartType1Fee                     TransfersPendingSubTotalPrepaymentPartType1 = "fee"
	TransfersPendingSubTotalPrepaymentPartType1FeeReimbursement        TransfersPendingSubTotalPrepaymentPartType1 = "fee-reimbursement"
	TransfersPendingSubTotalPrepaymentPartType1FeeDiscount             TransfersPendingSubTotalPrepaymentPartType1 = "fee-discount"
	TransfersPendingSubTotalPrepaymentPartType1FeeVat                  TransfersPendingSubTotalPrepaymentPartType1 = "fee-vat"
	TransfersPendingSubTotalPrepaymentPartType1FeeRoundingCompensation TransfersPendingSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e TransfersPendingSubTotalPrepaymentPartType1) ToPointer() *TransfersPendingSubTotalPrepaymentPartType1 {
	return &e
}
func (e *TransfersPendingSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = TransfersPendingSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersPendingSubTotalPrepaymentPartType1: %v", v)
	}
}

// TransfersPendingSubTotalTransactionType1 - Represents the transaction type
type TransfersPendingSubTotalTransactionType1 string

const (
	TransfersPendingSubTotalTransactionType1Payment                           TransfersPendingSubTotalTransactionType1 = "payment"
	TransfersPendingSubTotalTransactionType1SplitPayment                      TransfersPendingSubTotalTransactionType1 = "split-payment"
	TransfersPendingSubTotalTransactionType1FailedPayment                     TransfersPendingSubTotalTransactionType1 = "failed-payment"
	TransfersPendingSubTotalTransactionType1FailedPlatformSplitPayment        TransfersPendingSubTotalTransactionType1 = "failed-platform-split-payment"
	TransfersPendingSubTotalTransactionType1FailedSplitPaymentCompensation    TransfersPendingSubTotalTransactionType1 = "failed-split-payment-compensation"
	TransfersPendingSubTotalTransactionType1Capture                           TransfersPendingSubTotalTransactionType1 = "capture"
	TransfersPendingSubTotalTransactionType1SplitTransaction                  TransfersPendingSubTotalTransactionType1 = "split-transaction"
	TransfersPendingSubTotalTransactionType1Refund                            TransfersPendingSubTotalTransactionType1 = "refund"
	TransfersPendingSubTotalTransactionType1PlatformPaymentRefund             TransfersPendingSubTotalTransactionType1 = "platform-payment-refund"
	TransfersPendingSubTotalTransactionType1ReturnedPlatformPaymentRefund     TransfersPendingSubTotalTransactionType1 = "returned-platform-payment-refund"
	TransfersPendingSubTotalTransactionType1RefundCompensation                TransfersPendingSubTotalTransactionType1 = "refund-compensation"
	TransfersPendingSubTotalTransactionType1ReturnedRefundCompensation        TransfersPendingSubTotalTransactionType1 = "returned-refund-compensation"
	TransfersPendingSubTotalTransactionType1ReturnedRefund                    TransfersPendingSubTotalTransactionType1 = "returned-refund"
	TransfersPendingSubTotalTransactionType1Chargeback                        TransfersPendingSubTotalTransactionType1 = "chargeback"
	TransfersPendingSubTotalTransactionType1ChargebackReversal                TransfersPendingSubTotalTransactionType1 = "chargeback-reversal"
	TransfersPendingSubTotalTransactionType1ChargebackCompensation            TransfersPendingSubTotalTransactionType1 = "chargeback-compensation"
	TransfersPendingSubTotalTransactionType1ReversedChargebackCompensation    TransfersPendingSubTotalTransactionType1 = "reversed-chargeback-compensation"
	TransfersPendingSubTotalTransactionType1PlatformPaymentChargeback         TransfersPendingSubTotalTransactionType1 = "platform-payment-chargeback"
	TransfersPendingSubTotalTransactionType1ReversedPlatformPaymentChargeback TransfersPendingSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	TransfersPendingSubTotalTransactionType1FeePrepayment                     TransfersPendingSubTotalTransactionType1 = "fee-prepayment"
	TransfersPendingSubTotalTransactionType1OutgoingTransfer                  TransfersPendingSubTotalTransactionType1 = "outgoing-transfer"
	TransfersPendingSubTotalTransactionType1IncomingTransfer                  TransfersPendingSubTotalTransactionType1 = "incoming-transfer"
	TransfersPendingSubTotalTransactionType1CanceledTransfer                  TransfersPendingSubTotalTransactionType1 = "canceled-transfer"
	TransfersPendingSubTotalTransactionType1ReturnedTransfer                  TransfersPendingSubTotalTransactionType1 = "returned-transfer"
	TransfersPendingSubTotalTransactionType1BalanceReserve                    TransfersPendingSubTotalTransactionType1 = "balance-reserve"
	TransfersPendingSubTotalTransactionType1BalanceReserveReturn              TransfersPendingSubTotalTransactionType1 = "balance-reserve-return"
	TransfersPendingSubTotalTransactionType1InvoiceRoundingCompensation       TransfersPendingSubTotalTransactionType1 = "invoice-rounding-compensation"
	TransfersPendingSubTotalTransactionType1RollingReserveHold                TransfersPendingSubTotalTransactionType1 = "rolling-reserve-hold"
	TransfersPendingSubTotalTransactionType1RollingReserveRelease             TransfersPendingSubTotalTransactionType1 = "rolling-reserve-release"
	TransfersPendingSubTotalTransactionType1BalanceCorrection                 TransfersPendingSubTotalTransactionType1 = "balance-correction"
	TransfersPendingSubTotalTransactionType1Repayment                         TransfersPendingSubTotalTransactionType1 = "repayment"
	TransfersPendingSubTotalTransactionType1Loan                              TransfersPendingSubTotalTransactionType1 = "loan"
	TransfersPendingSubTotalTransactionType1BalanceTopup                      TransfersPendingSubTotalTransactionType1 = "balance-topup"
	TransfersPendingSubTotalTransactionType1CashCollateralIssuance            TransfersPendingSubTotalTransactionType1 = "cash-collateral-issuance';"
	TransfersPendingSubTotalTransactionType1CashCollateralRelease             TransfersPendingSubTotalTransactionType1 = "cash-collateral-release"
	TransfersPendingSubTotalTransactionType1PendingRollingReserve             TransfersPendingSubTotalTransactionType1 = "pending-rolling-reserve"
	TransfersPendingSubTotalTransactionType1ToBeReleasedRollingReserve        TransfersPendingSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	TransfersPendingSubTotalTransactionType1HeldRollingReserve                TransfersPendingSubTotalTransactionType1 = "held-rolling-reserve"
	TransfersPendingSubTotalTransactionType1ReleasedRollingReserve            TransfersPendingSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e TransfersPendingSubTotalTransactionType1) ToPointer() *TransfersPendingSubTotalTransactionType1 {
	return &e
}
func (e *TransfersPendingSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = TransfersPendingSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersPendingSubTotalTransactionType1: %v", v)
	}
}

type TransfersPendingSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *TransfersPendingSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *TransfersPendingSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *TransfersPendingSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *TransfersPendingSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *TransfersPendingSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *TransfersPendingSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *TransfersPendingSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *TransfersPendingSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *TransfersPendingSubTotal1) GetMethod() *TransfersPendingSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *TransfersPendingSubTotal1) GetCardIssuer() *TransfersPendingSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *TransfersPendingSubTotal1) GetCardAudience() *TransfersPendingSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *TransfersPendingSubTotal1) GetCardRegion() *TransfersPendingSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *TransfersPendingSubTotal1) GetFeeType() *TransfersPendingSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *TransfersPendingSubTotal1) GetPrepaymentPartType() *TransfersPendingSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *TransfersPendingSubTotal1) GetTransactionType() *TransfersPendingSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// TransfersPendingSubtotalMethod2 - Payment type of the transactions
type TransfersPendingSubtotalMethod2 string

const (
	TransfersPendingSubtotalMethod2Alma              TransfersPendingSubtotalMethod2 = "alma"
	TransfersPendingSubtotalMethod2Bacs              TransfersPendingSubtotalMethod2 = "bacs"
	TransfersPendingSubtotalMethod2Applepay          TransfersPendingSubtotalMethod2 = "applepay"
	TransfersPendingSubtotalMethod2Bancomatpay       TransfersPendingSubtotalMethod2 = "bancomatpay"
	TransfersPendingSubtotalMethod2Bancontact        TransfersPendingSubtotalMethod2 = "bancontact"
	TransfersPendingSubtotalMethod2Banktransfer      TransfersPendingSubtotalMethod2 = "banktransfer"
	TransfersPendingSubtotalMethod2Belfius           TransfersPendingSubtotalMethod2 = "belfius"
	TransfersPendingSubtotalMethod2Billie            TransfersPendingSubtotalMethod2 = "billie"
	TransfersPendingSubtotalMethod2Bizum             TransfersPendingSubtotalMethod2 = "bizum"
	TransfersPendingSubtotalMethod2Bitcoin           TransfersPendingSubtotalMethod2 = "bitcoin"
	TransfersPendingSubtotalMethod2Blik              TransfersPendingSubtotalMethod2 = "blik"
	TransfersPendingSubtotalMethod2Creditcard        TransfersPendingSubtotalMethod2 = "creditcard"
	TransfersPendingSubtotalMethod2Directdebit       TransfersPendingSubtotalMethod2 = "directdebit"
	TransfersPendingSubtotalMethod2Eps               TransfersPendingSubtotalMethod2 = "eps"
	TransfersPendingSubtotalMethod2Giftcard          TransfersPendingSubtotalMethod2 = "giftcard"
	TransfersPendingSubtotalMethod2Giropay           TransfersPendingSubtotalMethod2 = "giropay"
	TransfersPendingSubtotalMethod2Googlepay         TransfersPendingSubtotalMethod2 = "googlepay"
	TransfersPendingSubtotalMethod2Ideal             TransfersPendingSubtotalMethod2 = "ideal"
	TransfersPendingSubtotalMethod2In3               TransfersPendingSubtotalMethod2 = "in3"
	TransfersPendingSubtotalMethod2Inghomepay        TransfersPendingSubtotalMethod2 = "inghomepay"
	TransfersPendingSubtotalMethod2Kbc               TransfersPendingSubtotalMethod2 = "kbc"
	TransfersPendingSubtotalMethod2Klarnapaylater    TransfersPendingSubtotalMethod2 = "klarnapaylater"
	TransfersPendingSubtotalMethod2Klarnapaynow      TransfersPendingSubtotalMethod2 = "klarnapaynow"
	TransfersPendingSubtotalMethod2Klarnasliceit     TransfersPendingSubtotalMethod2 = "klarnasliceit"
	TransfersPendingSubtotalMethod2Klarna            TransfersPendingSubtotalMethod2 = "klarna"
	TransfersPendingSubtotalMethod2Mbway             TransfersPendingSubtotalMethod2 = "mbway"
	TransfersPendingSubtotalMethod2Multibanco        TransfersPendingSubtotalMethod2 = "multibanco"
	TransfersPendingSubtotalMethod2Mybank            TransfersPendingSubtotalMethod2 = "mybank"
	TransfersPendingSubtotalMethod2Paybybank         TransfersPendingSubtotalMethod2 = "paybybank"
	TransfersPendingSubtotalMethod2Payconiq          TransfersPendingSubtotalMethod2 = "payconiq"
	TransfersPendingSubtotalMethod2Paypal            TransfersPendingSubtotalMethod2 = "paypal"
	TransfersPendingSubtotalMethod2Paysafecard       TransfersPendingSubtotalMethod2 = "paysafecard"
	TransfersPendingSubtotalMethod2Przelewy24        TransfersPendingSubtotalMethod2 = "przelewy24"
	TransfersPendingSubtotalMethod2Riverty           TransfersPendingSubtotalMethod2 = "riverty"
	TransfersPendingSubtotalMethod2Satispay          TransfersPendingSubtotalMethod2 = "satispay"
	TransfersPendingSubtotalMethod2Podiumcadeaukaart TransfersPendingSubtotalMethod2 = "podiumcadeaukaart"
	TransfersPendingSubtotalMethod2Pointofsale       TransfersPendingSubtotalMethod2 = "pointofsale"
	TransfersPendingSubtotalMethod2Sofort            TransfersPendingSubtotalMethod2 = "sofort"
	TransfersPendingSubtotalMethod2Swish             TransfersPendingSubtotalMethod2 = "swish"
	TransfersPendingSubtotalMethod2Trustly           TransfersPendingSubtotalMethod2 = "trustly"
	TransfersPendingSubtotalMethod2Twint             TransfersPendingSubtotalMethod2 = "twint"
	TransfersPendingSubtotalMethod2Voucher           TransfersPendingSubtotalMethod2 = "voucher"
)

func (e TransfersPendingSubtotalMethod2) ToPointer() *TransfersPendingSubtotalMethod2 {
	return &e
}
func (e *TransfersPendingSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = TransfersPendingSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersPendingSubtotalMethod2: %v", v)
	}
}

// TransfersPendingSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type TransfersPendingSubtotalCardIssuer2 string

const (
	TransfersPendingSubtotalCardIssuer2Amex          TransfersPendingSubtotalCardIssuer2 = "amex"
	TransfersPendingSubtotalCardIssuer2Maestro       TransfersPendingSubtotalCardIssuer2 = "maestro"
	TransfersPendingSubtotalCardIssuer2CarteBancaire TransfersPendingSubtotalCardIssuer2 = "carte-bancaire"
	TransfersPendingSubtotalCardIssuer2Other         TransfersPendingSubtotalCardIssuer2 = "other"
)

func (e TransfersPendingSubtotalCardIssuer2) ToPointer() *TransfersPendingSubtotalCardIssuer2 {
	return &e
}
func (e *TransfersPendingSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = TransfersPendingSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersPendingSubtotalCardIssuer2: %v", v)
	}
}

// TransfersPendingSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type TransfersPendingSubtotalCardAudience2 string

const (
	TransfersPendingSubtotalCardAudience2Corporate TransfersPendingSubtotalCardAudience2 = "corporate"
	TransfersPendingSubtotalCardAudience2Other     TransfersPendingSubtotalCardAudience2 = "other"
)

func (e TransfersPendingSubtotalCardAudience2) ToPointer() *TransfersPendingSubtotalCardAudience2 {
	return &e
}
func (e *TransfersPendingSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = TransfersPendingSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersPendingSubtotalCardAudience2: %v", v)
	}
}

// TransfersPendingSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type TransfersPendingSubtotalCardRegion2 string

const (
	TransfersPendingSubtotalCardRegion2IntraEea TransfersPendingSubtotalCardRegion2 = "intra-eea"
	TransfersPendingSubtotalCardRegion2IntraEu  TransfersPendingSubtotalCardRegion2 = "intra-eu"
	TransfersPendingSubtotalCardRegion2Domestic TransfersPendingSubtotalCardRegion2 = "domestic"
	TransfersPendingSubtotalCardRegion2Other    TransfersPendingSubtotalCardRegion2 = "other"
)

func (e TransfersPendingSubtotalCardRegion2) ToPointer() *TransfersPendingSubtotalCardRegion2 {
	return &e
}
func (e *TransfersPendingSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = TransfersPendingSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersPendingSubtotalCardRegion2: %v", v)
	}
}

// TransfersPendingSubtotalFeeType2 - Present when the transaction represents a fee.
type TransfersPendingSubtotalFeeType2 string

const (
	TransfersPendingSubtotalFeeType2PaymentFee                                        TransfersPendingSubtotalFeeType2 = "payment-fee"
	TransfersPendingSubtotalFeeType2DirectDebitFailureFee                             TransfersPendingSubtotalFeeType2 = "direct-debit-failure-fee"
	TransfersPendingSubtotalFeeType2UnauthorizedDirectDebitFee                        TransfersPendingSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	TransfersPendingSubtotalFeeType2BankChargedDirectDebitFailureFee                  TransfersPendingSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	TransfersPendingSubtotalFeeType2PartnerCommission                                 TransfersPendingSubtotalFeeType2 = "partner-commission"
	TransfersPendingSubtotalFeeType2ApplicationFee                                    TransfersPendingSubtotalFeeType2 = "application-fee"
	TransfersPendingSubtotalFeeType2CaptureFee                                        TransfersPendingSubtotalFeeType2 = "capture-fee"
	TransfersPendingSubtotalFeeType2RefundFee                                         TransfersPendingSubtotalFeeType2 = "refund-fee"
	TransfersPendingSubtotalFeeType2ChargebackFee                                     TransfersPendingSubtotalFeeType2 = "chargeback-fee"
	TransfersPendingSubtotalFeeType2PaymentNotificationFee                            TransfersPendingSubtotalFeeType2 = "payment-notification-fee"
	TransfersPendingSubtotalFeeType2TransferNotificationFee                           TransfersPendingSubtotalFeeType2 = "transfer-notification-fee"
	TransfersPendingSubtotalFeeType2PayoutFee                                         TransfersPendingSubtotalFeeType2 = "payout-fee"
	TransfersPendingSubtotalFeeType2FeeDiscount                                       TransfersPendingSubtotalFeeType2 = "fee-discount"
	TransfersPendingSubtotalFeeType2FeeReimbursement                                  TransfersPendingSubtotalFeeType2 = "fee-reimbursement"
	TransfersPendingSubtotalFeeType2PlatformVolumeFee                                 TransfersPendingSubtotalFeeType2 = "platform-volume-fee"
	TransfersPendingSubtotalFeeType2PlatformConnectedOrganizationsFee                 TransfersPendingSubtotalFeeType2 = "platform-connected-organizations-fee"
	TransfersPendingSubtotalFeeType2BalanceChargeFee                                  TransfersPendingSubtotalFeeType2 = "balance-charge-fee"
	TransfersPendingSubtotalFeeType2ThreedsAuthenticationAttemptFee                   TransfersPendingSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	TransfersPendingSubtotalFeeType2TerminalMonthlyFee                                TransfersPendingSubtotalFeeType2 = "terminal-monthly-fee"
	TransfersPendingSubtotalFeeType2AcceptanceRiskFee                                 TransfersPendingSubtotalFeeType2 = "acceptance-risk-fee"
	TransfersPendingSubtotalFeeType2TopUpFee                                          TransfersPendingSubtotalFeeType2 = "top-up-fee"
	TransfersPendingSubtotalFeeType2PaymentGatewayFee                                 TransfersPendingSubtotalFeeType2 = "payment-gateway-fee"
	TransfersPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   TransfersPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	TransfersPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee TransfersPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	TransfersPendingSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             TransfersPendingSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	TransfersPendingSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           TransfersPendingSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	TransfersPendingSubtotalFeeType2MinimumInvoiceAmountFee                           TransfersPendingSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e TransfersPendingSubtotalFeeType2) ToPointer() *TransfersPendingSubtotalFeeType2 {
	return &e
}
func (e *TransfersPendingSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = TransfersPendingSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersPendingSubtotalFeeType2: %v", v)
	}
}

// TransfersPendingSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type TransfersPendingSubtotalPrepaymentPartType2 string

const (
	TransfersPendingSubtotalPrepaymentPartType2Fee                     TransfersPendingSubtotalPrepaymentPartType2 = "fee"
	TransfersPendingSubtotalPrepaymentPartType2FeeReimbursement        TransfersPendingSubtotalPrepaymentPartType2 = "fee-reimbursement"
	TransfersPendingSubtotalPrepaymentPartType2FeeDiscount             TransfersPendingSubtotalPrepaymentPartType2 = "fee-discount"
	TransfersPendingSubtotalPrepaymentPartType2FeeVat                  TransfersPendingSubtotalPrepaymentPartType2 = "fee-vat"
	TransfersPendingSubtotalPrepaymentPartType2FeeRoundingCompensation TransfersPendingSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e TransfersPendingSubtotalPrepaymentPartType2) ToPointer() *TransfersPendingSubtotalPrepaymentPartType2 {
	return &e
}
func (e *TransfersPendingSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = TransfersPendingSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersPendingSubtotalPrepaymentPartType2: %v", v)
	}
}

// TransfersPendingSubtotalTransactionType2 - Represents the transaction type
type TransfersPendingSubtotalTransactionType2 string

const (
	TransfersPendingSubtotalTransactionType2Payment                           TransfersPendingSubtotalTransactionType2 = "payment"
	TransfersPendingSubtotalTransactionType2SplitPayment                      TransfersPendingSubtotalTransactionType2 = "split-payment"
	TransfersPendingSubtotalTransactionType2FailedPayment                     TransfersPendingSubtotalTransactionType2 = "failed-payment"
	TransfersPendingSubtotalTransactionType2FailedPlatformSplitPayment        TransfersPendingSubtotalTransactionType2 = "failed-platform-split-payment"
	TransfersPendingSubtotalTransactionType2FailedSplitPaymentCompensation    TransfersPendingSubtotalTransactionType2 = "failed-split-payment-compensation"
	TransfersPendingSubtotalTransactionType2Capture                           TransfersPendingSubtotalTransactionType2 = "capture"
	TransfersPendingSubtotalTransactionType2SplitTransaction                  TransfersPendingSubtotalTransactionType2 = "split-transaction"
	TransfersPendingSubtotalTransactionType2Refund                            TransfersPendingSubtotalTransactionType2 = "refund"
	TransfersPendingSubtotalTransactionType2PlatformPaymentRefund             TransfersPendingSubtotalTransactionType2 = "platform-payment-refund"
	TransfersPendingSubtotalTransactionType2ReturnedPlatformPaymentRefund     TransfersPendingSubtotalTransactionType2 = "returned-platform-payment-refund"
	TransfersPendingSubtotalTransactionType2RefundCompensation                TransfersPendingSubtotalTransactionType2 = "refund-compensation"
	TransfersPendingSubtotalTransactionType2ReturnedRefundCompensation        TransfersPendingSubtotalTransactionType2 = "returned-refund-compensation"
	TransfersPendingSubtotalTransactionType2ReturnedRefund                    TransfersPendingSubtotalTransactionType2 = "returned-refund"
	TransfersPendingSubtotalTransactionType2Chargeback                        TransfersPendingSubtotalTransactionType2 = "chargeback"
	TransfersPendingSubtotalTransactionType2ChargebackReversal                TransfersPendingSubtotalTransactionType2 = "chargeback-reversal"
	TransfersPendingSubtotalTransactionType2ChargebackCompensation            TransfersPendingSubtotalTransactionType2 = "chargeback-compensation"
	TransfersPendingSubtotalTransactionType2ReversedChargebackCompensation    TransfersPendingSubtotalTransactionType2 = "reversed-chargeback-compensation"
	TransfersPendingSubtotalTransactionType2PlatformPaymentChargeback         TransfersPendingSubtotalTransactionType2 = "platform-payment-chargeback"
	TransfersPendingSubtotalTransactionType2ReversedPlatformPaymentChargeback TransfersPendingSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	TransfersPendingSubtotalTransactionType2FeePrepayment                     TransfersPendingSubtotalTransactionType2 = "fee-prepayment"
	TransfersPendingSubtotalTransactionType2OutgoingTransfer                  TransfersPendingSubtotalTransactionType2 = "outgoing-transfer"
	TransfersPendingSubtotalTransactionType2IncomingTransfer                  TransfersPendingSubtotalTransactionType2 = "incoming-transfer"
	TransfersPendingSubtotalTransactionType2CanceledTransfer                  TransfersPendingSubtotalTransactionType2 = "canceled-transfer"
	TransfersPendingSubtotalTransactionType2ReturnedTransfer                  TransfersPendingSubtotalTransactionType2 = "returned-transfer"
	TransfersPendingSubtotalTransactionType2BalanceReserve                    TransfersPendingSubtotalTransactionType2 = "balance-reserve"
	TransfersPendingSubtotalTransactionType2BalanceReserveReturn              TransfersPendingSubtotalTransactionType2 = "balance-reserve-return"
	TransfersPendingSubtotalTransactionType2InvoiceRoundingCompensation       TransfersPendingSubtotalTransactionType2 = "invoice-rounding-compensation"
	TransfersPendingSubtotalTransactionType2RollingReserveHold                TransfersPendingSubtotalTransactionType2 = "rolling-reserve-hold"
	TransfersPendingSubtotalTransactionType2RollingReserveRelease             TransfersPendingSubtotalTransactionType2 = "rolling-reserve-release"
	TransfersPendingSubtotalTransactionType2BalanceCorrection                 TransfersPendingSubtotalTransactionType2 = "balance-correction"
	TransfersPendingSubtotalTransactionType2Repayment                         TransfersPendingSubtotalTransactionType2 = "repayment"
	TransfersPendingSubtotalTransactionType2Loan                              TransfersPendingSubtotalTransactionType2 = "loan"
	TransfersPendingSubtotalTransactionType2BalanceTopup                      TransfersPendingSubtotalTransactionType2 = "balance-topup"
	TransfersPendingSubtotalTransactionType2CashCollateralIssuance            TransfersPendingSubtotalTransactionType2 = "cash-collateral-issuance';"
	TransfersPendingSubtotalTransactionType2CashCollateralRelease             TransfersPendingSubtotalTransactionType2 = "cash-collateral-release"
	TransfersPendingSubtotalTransactionType2PendingRollingReserve             TransfersPendingSubtotalTransactionType2 = "pending-rolling-reserve"
	TransfersPendingSubtotalTransactionType2ToBeReleasedRollingReserve        TransfersPendingSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	TransfersPendingSubtotalTransactionType2HeldRollingReserve                TransfersPendingSubtotalTransactionType2 = "held-rolling-reserve"
	TransfersPendingSubtotalTransactionType2ReleasedRollingReserve            TransfersPendingSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e TransfersPendingSubtotalTransactionType2) ToPointer() *TransfersPendingSubtotalTransactionType2 {
	return &e
}
func (e *TransfersPendingSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = TransfersPendingSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersPendingSubtotalTransactionType2: %v", v)
	}
}

type TransfersPendingSubtotal2 struct {
	SubTotals []TransfersPendingSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *TransfersPendingSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *TransfersPendingSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *TransfersPendingSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *TransfersPendingSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *TransfersPendingSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *TransfersPendingSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *TransfersPendingSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *TransfersPendingSubtotal2) GetSubTotals() []TransfersPendingSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *TransfersPendingSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *TransfersPendingSubtotal2) GetMethod() *TransfersPendingSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *TransfersPendingSubtotal2) GetCardIssuer() *TransfersPendingSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *TransfersPendingSubtotal2) GetCardAudience() *TransfersPendingSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *TransfersPendingSubtotal2) GetCardRegion() *TransfersPendingSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *TransfersPendingSubtotal2) GetFeeType() *TransfersPendingSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *TransfersPendingSubtotal2) GetPrepaymentPartType() *TransfersPendingSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *TransfersPendingSubtotal2) GetTransactionType() *TransfersPendingSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type TransfersPending struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *TransfersPendingAmount     `json:"amount,omitempty"`
	Subtotals []TransfersPendingSubtotal2 `json:"subtotals,omitempty"`
}

func (o *TransfersPending) GetAmount() *TransfersPendingAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *TransfersPending) GetSubtotals() []TransfersPendingSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// TransfersMovedToAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type TransfersMovedToAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *TransfersMovedToAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *TransfersMovedToAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// TransfersMovedToAvailableSubTotalMethod1 - Payment type of the transactions
type TransfersMovedToAvailableSubTotalMethod1 string

const (
	TransfersMovedToAvailableSubTotalMethod1Alma              TransfersMovedToAvailableSubTotalMethod1 = "alma"
	TransfersMovedToAvailableSubTotalMethod1Bacs              TransfersMovedToAvailableSubTotalMethod1 = "bacs"
	TransfersMovedToAvailableSubTotalMethod1Applepay          TransfersMovedToAvailableSubTotalMethod1 = "applepay"
	TransfersMovedToAvailableSubTotalMethod1Bancomatpay       TransfersMovedToAvailableSubTotalMethod1 = "bancomatpay"
	TransfersMovedToAvailableSubTotalMethod1Bancontact        TransfersMovedToAvailableSubTotalMethod1 = "bancontact"
	TransfersMovedToAvailableSubTotalMethod1Banktransfer      TransfersMovedToAvailableSubTotalMethod1 = "banktransfer"
	TransfersMovedToAvailableSubTotalMethod1Belfius           TransfersMovedToAvailableSubTotalMethod1 = "belfius"
	TransfersMovedToAvailableSubTotalMethod1Billie            TransfersMovedToAvailableSubTotalMethod1 = "billie"
	TransfersMovedToAvailableSubTotalMethod1Bizum             TransfersMovedToAvailableSubTotalMethod1 = "bizum"
	TransfersMovedToAvailableSubTotalMethod1Bitcoin           TransfersMovedToAvailableSubTotalMethod1 = "bitcoin"
	TransfersMovedToAvailableSubTotalMethod1Blik              TransfersMovedToAvailableSubTotalMethod1 = "blik"
	TransfersMovedToAvailableSubTotalMethod1Creditcard        TransfersMovedToAvailableSubTotalMethod1 = "creditcard"
	TransfersMovedToAvailableSubTotalMethod1Directdebit       TransfersMovedToAvailableSubTotalMethod1 = "directdebit"
	TransfersMovedToAvailableSubTotalMethod1Eps               TransfersMovedToAvailableSubTotalMethod1 = "eps"
	TransfersMovedToAvailableSubTotalMethod1Giftcard          TransfersMovedToAvailableSubTotalMethod1 = "giftcard"
	TransfersMovedToAvailableSubTotalMethod1Giropay           TransfersMovedToAvailableSubTotalMethod1 = "giropay"
	TransfersMovedToAvailableSubTotalMethod1Googlepay         TransfersMovedToAvailableSubTotalMethod1 = "googlepay"
	TransfersMovedToAvailableSubTotalMethod1Ideal             TransfersMovedToAvailableSubTotalMethod1 = "ideal"
	TransfersMovedToAvailableSubTotalMethod1In3               TransfersMovedToAvailableSubTotalMethod1 = "in3"
	TransfersMovedToAvailableSubTotalMethod1Inghomepay        TransfersMovedToAvailableSubTotalMethod1 = "inghomepay"
	TransfersMovedToAvailableSubTotalMethod1Kbc               TransfersMovedToAvailableSubTotalMethod1 = "kbc"
	TransfersMovedToAvailableSubTotalMethod1Klarnapaylater    TransfersMovedToAvailableSubTotalMethod1 = "klarnapaylater"
	TransfersMovedToAvailableSubTotalMethod1Klarnapaynow      TransfersMovedToAvailableSubTotalMethod1 = "klarnapaynow"
	TransfersMovedToAvailableSubTotalMethod1Klarnasliceit     TransfersMovedToAvailableSubTotalMethod1 = "klarnasliceit"
	TransfersMovedToAvailableSubTotalMethod1Klarna            TransfersMovedToAvailableSubTotalMethod1 = "klarna"
	TransfersMovedToAvailableSubTotalMethod1Mbway             TransfersMovedToAvailableSubTotalMethod1 = "mbway"
	TransfersMovedToAvailableSubTotalMethod1Multibanco        TransfersMovedToAvailableSubTotalMethod1 = "multibanco"
	TransfersMovedToAvailableSubTotalMethod1Mybank            TransfersMovedToAvailableSubTotalMethod1 = "mybank"
	TransfersMovedToAvailableSubTotalMethod1Paybybank         TransfersMovedToAvailableSubTotalMethod1 = "paybybank"
	TransfersMovedToAvailableSubTotalMethod1Payconiq          TransfersMovedToAvailableSubTotalMethod1 = "payconiq"
	TransfersMovedToAvailableSubTotalMethod1Paypal            TransfersMovedToAvailableSubTotalMethod1 = "paypal"
	TransfersMovedToAvailableSubTotalMethod1Paysafecard       TransfersMovedToAvailableSubTotalMethod1 = "paysafecard"
	TransfersMovedToAvailableSubTotalMethod1Przelewy24        TransfersMovedToAvailableSubTotalMethod1 = "przelewy24"
	TransfersMovedToAvailableSubTotalMethod1Riverty           TransfersMovedToAvailableSubTotalMethod1 = "riverty"
	TransfersMovedToAvailableSubTotalMethod1Satispay          TransfersMovedToAvailableSubTotalMethod1 = "satispay"
	TransfersMovedToAvailableSubTotalMethod1Podiumcadeaukaart TransfersMovedToAvailableSubTotalMethod1 = "podiumcadeaukaart"
	TransfersMovedToAvailableSubTotalMethod1Pointofsale       TransfersMovedToAvailableSubTotalMethod1 = "pointofsale"
	TransfersMovedToAvailableSubTotalMethod1Sofort            TransfersMovedToAvailableSubTotalMethod1 = "sofort"
	TransfersMovedToAvailableSubTotalMethod1Swish             TransfersMovedToAvailableSubTotalMethod1 = "swish"
	TransfersMovedToAvailableSubTotalMethod1Trustly           TransfersMovedToAvailableSubTotalMethod1 = "trustly"
	TransfersMovedToAvailableSubTotalMethod1Twint             TransfersMovedToAvailableSubTotalMethod1 = "twint"
	TransfersMovedToAvailableSubTotalMethod1Voucher           TransfersMovedToAvailableSubTotalMethod1 = "voucher"
)

func (e TransfersMovedToAvailableSubTotalMethod1) ToPointer() *TransfersMovedToAvailableSubTotalMethod1 {
	return &e
}
func (e *TransfersMovedToAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = TransfersMovedToAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersMovedToAvailableSubTotalMethod1: %v", v)
	}
}

// TransfersMovedToAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type TransfersMovedToAvailableSubTotalCardIssuer1 string

const (
	TransfersMovedToAvailableSubTotalCardIssuer1Amex          TransfersMovedToAvailableSubTotalCardIssuer1 = "amex"
	TransfersMovedToAvailableSubTotalCardIssuer1Maestro       TransfersMovedToAvailableSubTotalCardIssuer1 = "maestro"
	TransfersMovedToAvailableSubTotalCardIssuer1CarteBancaire TransfersMovedToAvailableSubTotalCardIssuer1 = "carte-bancaire"
	TransfersMovedToAvailableSubTotalCardIssuer1Other         TransfersMovedToAvailableSubTotalCardIssuer1 = "other"
)

func (e TransfersMovedToAvailableSubTotalCardIssuer1) ToPointer() *TransfersMovedToAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *TransfersMovedToAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = TransfersMovedToAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersMovedToAvailableSubTotalCardIssuer1: %v", v)
	}
}

// TransfersMovedToAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type TransfersMovedToAvailableSubTotalCardAudience1 string

const (
	TransfersMovedToAvailableSubTotalCardAudience1Corporate TransfersMovedToAvailableSubTotalCardAudience1 = "corporate"
	TransfersMovedToAvailableSubTotalCardAudience1Other     TransfersMovedToAvailableSubTotalCardAudience1 = "other"
)

func (e TransfersMovedToAvailableSubTotalCardAudience1) ToPointer() *TransfersMovedToAvailableSubTotalCardAudience1 {
	return &e
}
func (e *TransfersMovedToAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = TransfersMovedToAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersMovedToAvailableSubTotalCardAudience1: %v", v)
	}
}

// TransfersMovedToAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type TransfersMovedToAvailableSubTotalCardRegion1 string

const (
	TransfersMovedToAvailableSubTotalCardRegion1IntraEea TransfersMovedToAvailableSubTotalCardRegion1 = "intra-eea"
	TransfersMovedToAvailableSubTotalCardRegion1IntraEu  TransfersMovedToAvailableSubTotalCardRegion1 = "intra-eu"
	TransfersMovedToAvailableSubTotalCardRegion1Domestic TransfersMovedToAvailableSubTotalCardRegion1 = "domestic"
	TransfersMovedToAvailableSubTotalCardRegion1Other    TransfersMovedToAvailableSubTotalCardRegion1 = "other"
)

func (e TransfersMovedToAvailableSubTotalCardRegion1) ToPointer() *TransfersMovedToAvailableSubTotalCardRegion1 {
	return &e
}
func (e *TransfersMovedToAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = TransfersMovedToAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersMovedToAvailableSubTotalCardRegion1: %v", v)
	}
}

// TransfersMovedToAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type TransfersMovedToAvailableSubTotalFeeType1 string

const (
	TransfersMovedToAvailableSubTotalFeeType1PaymentFee                                        TransfersMovedToAvailableSubTotalFeeType1 = "payment-fee"
	TransfersMovedToAvailableSubTotalFeeType1DirectDebitFailureFee                             TransfersMovedToAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	TransfersMovedToAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        TransfersMovedToAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	TransfersMovedToAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  TransfersMovedToAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	TransfersMovedToAvailableSubTotalFeeType1PartnerCommission                                 TransfersMovedToAvailableSubTotalFeeType1 = "partner-commission"
	TransfersMovedToAvailableSubTotalFeeType1ApplicationFee                                    TransfersMovedToAvailableSubTotalFeeType1 = "application-fee"
	TransfersMovedToAvailableSubTotalFeeType1CaptureFee                                        TransfersMovedToAvailableSubTotalFeeType1 = "capture-fee"
	TransfersMovedToAvailableSubTotalFeeType1RefundFee                                         TransfersMovedToAvailableSubTotalFeeType1 = "refund-fee"
	TransfersMovedToAvailableSubTotalFeeType1ChargebackFee                                     TransfersMovedToAvailableSubTotalFeeType1 = "chargeback-fee"
	TransfersMovedToAvailableSubTotalFeeType1PaymentNotificationFee                            TransfersMovedToAvailableSubTotalFeeType1 = "payment-notification-fee"
	TransfersMovedToAvailableSubTotalFeeType1TransferNotificationFee                           TransfersMovedToAvailableSubTotalFeeType1 = "transfer-notification-fee"
	TransfersMovedToAvailableSubTotalFeeType1PayoutFee                                         TransfersMovedToAvailableSubTotalFeeType1 = "payout-fee"
	TransfersMovedToAvailableSubTotalFeeType1FeeDiscount                                       TransfersMovedToAvailableSubTotalFeeType1 = "fee-discount"
	TransfersMovedToAvailableSubTotalFeeType1FeeReimbursement                                  TransfersMovedToAvailableSubTotalFeeType1 = "fee-reimbursement"
	TransfersMovedToAvailableSubTotalFeeType1PlatformVolumeFee                                 TransfersMovedToAvailableSubTotalFeeType1 = "platform-volume-fee"
	TransfersMovedToAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 TransfersMovedToAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	TransfersMovedToAvailableSubTotalFeeType1BalanceChargeFee                                  TransfersMovedToAvailableSubTotalFeeType1 = "balance-charge-fee"
	TransfersMovedToAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   TransfersMovedToAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	TransfersMovedToAvailableSubTotalFeeType1TerminalMonthlyFee                                TransfersMovedToAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	TransfersMovedToAvailableSubTotalFeeType1AcceptanceRiskFee                                 TransfersMovedToAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	TransfersMovedToAvailableSubTotalFeeType1TopUpFee                                          TransfersMovedToAvailableSubTotalFeeType1 = "top-up-fee"
	TransfersMovedToAvailableSubTotalFeeType1PaymentGatewayFee                                 TransfersMovedToAvailableSubTotalFeeType1 = "payment-gateway-fee"
	TransfersMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   TransfersMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	TransfersMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee TransfersMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	TransfersMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             TransfersMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	TransfersMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           TransfersMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	TransfersMovedToAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           TransfersMovedToAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e TransfersMovedToAvailableSubTotalFeeType1) ToPointer() *TransfersMovedToAvailableSubTotalFeeType1 {
	return &e
}
func (e *TransfersMovedToAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = TransfersMovedToAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersMovedToAvailableSubTotalFeeType1: %v", v)
	}
}

// TransfersMovedToAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type TransfersMovedToAvailableSubTotalPrepaymentPartType1 string

const (
	TransfersMovedToAvailableSubTotalPrepaymentPartType1Fee                     TransfersMovedToAvailableSubTotalPrepaymentPartType1 = "fee"
	TransfersMovedToAvailableSubTotalPrepaymentPartType1FeeReimbursement        TransfersMovedToAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	TransfersMovedToAvailableSubTotalPrepaymentPartType1FeeDiscount             TransfersMovedToAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	TransfersMovedToAvailableSubTotalPrepaymentPartType1FeeVat                  TransfersMovedToAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	TransfersMovedToAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation TransfersMovedToAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e TransfersMovedToAvailableSubTotalPrepaymentPartType1) ToPointer() *TransfersMovedToAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *TransfersMovedToAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = TransfersMovedToAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersMovedToAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// TransfersMovedToAvailableSubTotalTransactionType1 - Represents the transaction type
type TransfersMovedToAvailableSubTotalTransactionType1 string

const (
	TransfersMovedToAvailableSubTotalTransactionType1Payment                           TransfersMovedToAvailableSubTotalTransactionType1 = "payment"
	TransfersMovedToAvailableSubTotalTransactionType1SplitPayment                      TransfersMovedToAvailableSubTotalTransactionType1 = "split-payment"
	TransfersMovedToAvailableSubTotalTransactionType1FailedPayment                     TransfersMovedToAvailableSubTotalTransactionType1 = "failed-payment"
	TransfersMovedToAvailableSubTotalTransactionType1FailedPlatformSplitPayment        TransfersMovedToAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	TransfersMovedToAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    TransfersMovedToAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	TransfersMovedToAvailableSubTotalTransactionType1Capture                           TransfersMovedToAvailableSubTotalTransactionType1 = "capture"
	TransfersMovedToAvailableSubTotalTransactionType1SplitTransaction                  TransfersMovedToAvailableSubTotalTransactionType1 = "split-transaction"
	TransfersMovedToAvailableSubTotalTransactionType1Refund                            TransfersMovedToAvailableSubTotalTransactionType1 = "refund"
	TransfersMovedToAvailableSubTotalTransactionType1PlatformPaymentRefund             TransfersMovedToAvailableSubTotalTransactionType1 = "platform-payment-refund"
	TransfersMovedToAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     TransfersMovedToAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	TransfersMovedToAvailableSubTotalTransactionType1RefundCompensation                TransfersMovedToAvailableSubTotalTransactionType1 = "refund-compensation"
	TransfersMovedToAvailableSubTotalTransactionType1ReturnedRefundCompensation        TransfersMovedToAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	TransfersMovedToAvailableSubTotalTransactionType1ReturnedRefund                    TransfersMovedToAvailableSubTotalTransactionType1 = "returned-refund"
	TransfersMovedToAvailableSubTotalTransactionType1Chargeback                        TransfersMovedToAvailableSubTotalTransactionType1 = "chargeback"
	TransfersMovedToAvailableSubTotalTransactionType1ChargebackReversal                TransfersMovedToAvailableSubTotalTransactionType1 = "chargeback-reversal"
	TransfersMovedToAvailableSubTotalTransactionType1ChargebackCompensation            TransfersMovedToAvailableSubTotalTransactionType1 = "chargeback-compensation"
	TransfersMovedToAvailableSubTotalTransactionType1ReversedChargebackCompensation    TransfersMovedToAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	TransfersMovedToAvailableSubTotalTransactionType1PlatformPaymentChargeback         TransfersMovedToAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	TransfersMovedToAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback TransfersMovedToAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	TransfersMovedToAvailableSubTotalTransactionType1FeePrepayment                     TransfersMovedToAvailableSubTotalTransactionType1 = "fee-prepayment"
	TransfersMovedToAvailableSubTotalTransactionType1OutgoingTransfer                  TransfersMovedToAvailableSubTotalTransactionType1 = "outgoing-transfer"
	TransfersMovedToAvailableSubTotalTransactionType1IncomingTransfer                  TransfersMovedToAvailableSubTotalTransactionType1 = "incoming-transfer"
	TransfersMovedToAvailableSubTotalTransactionType1CanceledTransfer                  TransfersMovedToAvailableSubTotalTransactionType1 = "canceled-transfer"
	TransfersMovedToAvailableSubTotalTransactionType1ReturnedTransfer                  TransfersMovedToAvailableSubTotalTransactionType1 = "returned-transfer"
	TransfersMovedToAvailableSubTotalTransactionType1BalanceReserve                    TransfersMovedToAvailableSubTotalTransactionType1 = "balance-reserve"
	TransfersMovedToAvailableSubTotalTransactionType1BalanceReserveReturn              TransfersMovedToAvailableSubTotalTransactionType1 = "balance-reserve-return"
	TransfersMovedToAvailableSubTotalTransactionType1InvoiceRoundingCompensation       TransfersMovedToAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	TransfersMovedToAvailableSubTotalTransactionType1RollingReserveHold                TransfersMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	TransfersMovedToAvailableSubTotalTransactionType1RollingReserveRelease             TransfersMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	TransfersMovedToAvailableSubTotalTransactionType1BalanceCorrection                 TransfersMovedToAvailableSubTotalTransactionType1 = "balance-correction"
	TransfersMovedToAvailableSubTotalTransactionType1Repayment                         TransfersMovedToAvailableSubTotalTransactionType1 = "repayment"
	TransfersMovedToAvailableSubTotalTransactionType1Loan                              TransfersMovedToAvailableSubTotalTransactionType1 = "loan"
	TransfersMovedToAvailableSubTotalTransactionType1BalanceTopup                      TransfersMovedToAvailableSubTotalTransactionType1 = "balance-topup"
	TransfersMovedToAvailableSubTotalTransactionType1CashCollateralIssuance            TransfersMovedToAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	TransfersMovedToAvailableSubTotalTransactionType1CashCollateralRelease             TransfersMovedToAvailableSubTotalTransactionType1 = "cash-collateral-release"
	TransfersMovedToAvailableSubTotalTransactionType1PendingRollingReserve             TransfersMovedToAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	TransfersMovedToAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        TransfersMovedToAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	TransfersMovedToAvailableSubTotalTransactionType1HeldRollingReserve                TransfersMovedToAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	TransfersMovedToAvailableSubTotalTransactionType1ReleasedRollingReserve            TransfersMovedToAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e TransfersMovedToAvailableSubTotalTransactionType1) ToPointer() *TransfersMovedToAvailableSubTotalTransactionType1 {
	return &e
}
func (e *TransfersMovedToAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = TransfersMovedToAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersMovedToAvailableSubTotalTransactionType1: %v", v)
	}
}

type TransfersMovedToAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *TransfersMovedToAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *TransfersMovedToAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *TransfersMovedToAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *TransfersMovedToAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *TransfersMovedToAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *TransfersMovedToAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *TransfersMovedToAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *TransfersMovedToAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *TransfersMovedToAvailableSubTotal1) GetMethod() *TransfersMovedToAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *TransfersMovedToAvailableSubTotal1) GetCardIssuer() *TransfersMovedToAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *TransfersMovedToAvailableSubTotal1) GetCardAudience() *TransfersMovedToAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *TransfersMovedToAvailableSubTotal1) GetCardRegion() *TransfersMovedToAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *TransfersMovedToAvailableSubTotal1) GetFeeType() *TransfersMovedToAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *TransfersMovedToAvailableSubTotal1) GetPrepaymentPartType() *TransfersMovedToAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *TransfersMovedToAvailableSubTotal1) GetTransactionType() *TransfersMovedToAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// TransfersMovedToAvailableSubtotalMethod2 - Payment type of the transactions
type TransfersMovedToAvailableSubtotalMethod2 string

const (
	TransfersMovedToAvailableSubtotalMethod2Alma              TransfersMovedToAvailableSubtotalMethod2 = "alma"
	TransfersMovedToAvailableSubtotalMethod2Bacs              TransfersMovedToAvailableSubtotalMethod2 = "bacs"
	TransfersMovedToAvailableSubtotalMethod2Applepay          TransfersMovedToAvailableSubtotalMethod2 = "applepay"
	TransfersMovedToAvailableSubtotalMethod2Bancomatpay       TransfersMovedToAvailableSubtotalMethod2 = "bancomatpay"
	TransfersMovedToAvailableSubtotalMethod2Bancontact        TransfersMovedToAvailableSubtotalMethod2 = "bancontact"
	TransfersMovedToAvailableSubtotalMethod2Banktransfer      TransfersMovedToAvailableSubtotalMethod2 = "banktransfer"
	TransfersMovedToAvailableSubtotalMethod2Belfius           TransfersMovedToAvailableSubtotalMethod2 = "belfius"
	TransfersMovedToAvailableSubtotalMethod2Billie            TransfersMovedToAvailableSubtotalMethod2 = "billie"
	TransfersMovedToAvailableSubtotalMethod2Bizum             TransfersMovedToAvailableSubtotalMethod2 = "bizum"
	TransfersMovedToAvailableSubtotalMethod2Bitcoin           TransfersMovedToAvailableSubtotalMethod2 = "bitcoin"
	TransfersMovedToAvailableSubtotalMethod2Blik              TransfersMovedToAvailableSubtotalMethod2 = "blik"
	TransfersMovedToAvailableSubtotalMethod2Creditcard        TransfersMovedToAvailableSubtotalMethod2 = "creditcard"
	TransfersMovedToAvailableSubtotalMethod2Directdebit       TransfersMovedToAvailableSubtotalMethod2 = "directdebit"
	TransfersMovedToAvailableSubtotalMethod2Eps               TransfersMovedToAvailableSubtotalMethod2 = "eps"
	TransfersMovedToAvailableSubtotalMethod2Giftcard          TransfersMovedToAvailableSubtotalMethod2 = "giftcard"
	TransfersMovedToAvailableSubtotalMethod2Giropay           TransfersMovedToAvailableSubtotalMethod2 = "giropay"
	TransfersMovedToAvailableSubtotalMethod2Googlepay         TransfersMovedToAvailableSubtotalMethod2 = "googlepay"
	TransfersMovedToAvailableSubtotalMethod2Ideal             TransfersMovedToAvailableSubtotalMethod2 = "ideal"
	TransfersMovedToAvailableSubtotalMethod2In3               TransfersMovedToAvailableSubtotalMethod2 = "in3"
	TransfersMovedToAvailableSubtotalMethod2Inghomepay        TransfersMovedToAvailableSubtotalMethod2 = "inghomepay"
	TransfersMovedToAvailableSubtotalMethod2Kbc               TransfersMovedToAvailableSubtotalMethod2 = "kbc"
	TransfersMovedToAvailableSubtotalMethod2Klarnapaylater    TransfersMovedToAvailableSubtotalMethod2 = "klarnapaylater"
	TransfersMovedToAvailableSubtotalMethod2Klarnapaynow      TransfersMovedToAvailableSubtotalMethod2 = "klarnapaynow"
	TransfersMovedToAvailableSubtotalMethod2Klarnasliceit     TransfersMovedToAvailableSubtotalMethod2 = "klarnasliceit"
	TransfersMovedToAvailableSubtotalMethod2Klarna            TransfersMovedToAvailableSubtotalMethod2 = "klarna"
	TransfersMovedToAvailableSubtotalMethod2Mbway             TransfersMovedToAvailableSubtotalMethod2 = "mbway"
	TransfersMovedToAvailableSubtotalMethod2Multibanco        TransfersMovedToAvailableSubtotalMethod2 = "multibanco"
	TransfersMovedToAvailableSubtotalMethod2Mybank            TransfersMovedToAvailableSubtotalMethod2 = "mybank"
	TransfersMovedToAvailableSubtotalMethod2Paybybank         TransfersMovedToAvailableSubtotalMethod2 = "paybybank"
	TransfersMovedToAvailableSubtotalMethod2Payconiq          TransfersMovedToAvailableSubtotalMethod2 = "payconiq"
	TransfersMovedToAvailableSubtotalMethod2Paypal            TransfersMovedToAvailableSubtotalMethod2 = "paypal"
	TransfersMovedToAvailableSubtotalMethod2Paysafecard       TransfersMovedToAvailableSubtotalMethod2 = "paysafecard"
	TransfersMovedToAvailableSubtotalMethod2Przelewy24        TransfersMovedToAvailableSubtotalMethod2 = "przelewy24"
	TransfersMovedToAvailableSubtotalMethod2Riverty           TransfersMovedToAvailableSubtotalMethod2 = "riverty"
	TransfersMovedToAvailableSubtotalMethod2Satispay          TransfersMovedToAvailableSubtotalMethod2 = "satispay"
	TransfersMovedToAvailableSubtotalMethod2Podiumcadeaukaart TransfersMovedToAvailableSubtotalMethod2 = "podiumcadeaukaart"
	TransfersMovedToAvailableSubtotalMethod2Pointofsale       TransfersMovedToAvailableSubtotalMethod2 = "pointofsale"
	TransfersMovedToAvailableSubtotalMethod2Sofort            TransfersMovedToAvailableSubtotalMethod2 = "sofort"
	TransfersMovedToAvailableSubtotalMethod2Swish             TransfersMovedToAvailableSubtotalMethod2 = "swish"
	TransfersMovedToAvailableSubtotalMethod2Trustly           TransfersMovedToAvailableSubtotalMethod2 = "trustly"
	TransfersMovedToAvailableSubtotalMethod2Twint             TransfersMovedToAvailableSubtotalMethod2 = "twint"
	TransfersMovedToAvailableSubtotalMethod2Voucher           TransfersMovedToAvailableSubtotalMethod2 = "voucher"
)

func (e TransfersMovedToAvailableSubtotalMethod2) ToPointer() *TransfersMovedToAvailableSubtotalMethod2 {
	return &e
}
func (e *TransfersMovedToAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = TransfersMovedToAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersMovedToAvailableSubtotalMethod2: %v", v)
	}
}

// TransfersMovedToAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type TransfersMovedToAvailableSubtotalCardIssuer2 string

const (
	TransfersMovedToAvailableSubtotalCardIssuer2Amex          TransfersMovedToAvailableSubtotalCardIssuer2 = "amex"
	TransfersMovedToAvailableSubtotalCardIssuer2Maestro       TransfersMovedToAvailableSubtotalCardIssuer2 = "maestro"
	TransfersMovedToAvailableSubtotalCardIssuer2CarteBancaire TransfersMovedToAvailableSubtotalCardIssuer2 = "carte-bancaire"
	TransfersMovedToAvailableSubtotalCardIssuer2Other         TransfersMovedToAvailableSubtotalCardIssuer2 = "other"
)

func (e TransfersMovedToAvailableSubtotalCardIssuer2) ToPointer() *TransfersMovedToAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *TransfersMovedToAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = TransfersMovedToAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersMovedToAvailableSubtotalCardIssuer2: %v", v)
	}
}

// TransfersMovedToAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type TransfersMovedToAvailableSubtotalCardAudience2 string

const (
	TransfersMovedToAvailableSubtotalCardAudience2Corporate TransfersMovedToAvailableSubtotalCardAudience2 = "corporate"
	TransfersMovedToAvailableSubtotalCardAudience2Other     TransfersMovedToAvailableSubtotalCardAudience2 = "other"
)

func (e TransfersMovedToAvailableSubtotalCardAudience2) ToPointer() *TransfersMovedToAvailableSubtotalCardAudience2 {
	return &e
}
func (e *TransfersMovedToAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = TransfersMovedToAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersMovedToAvailableSubtotalCardAudience2: %v", v)
	}
}

// TransfersMovedToAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type TransfersMovedToAvailableSubtotalCardRegion2 string

const (
	TransfersMovedToAvailableSubtotalCardRegion2IntraEea TransfersMovedToAvailableSubtotalCardRegion2 = "intra-eea"
	TransfersMovedToAvailableSubtotalCardRegion2IntraEu  TransfersMovedToAvailableSubtotalCardRegion2 = "intra-eu"
	TransfersMovedToAvailableSubtotalCardRegion2Domestic TransfersMovedToAvailableSubtotalCardRegion2 = "domestic"
	TransfersMovedToAvailableSubtotalCardRegion2Other    TransfersMovedToAvailableSubtotalCardRegion2 = "other"
)

func (e TransfersMovedToAvailableSubtotalCardRegion2) ToPointer() *TransfersMovedToAvailableSubtotalCardRegion2 {
	return &e
}
func (e *TransfersMovedToAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = TransfersMovedToAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersMovedToAvailableSubtotalCardRegion2: %v", v)
	}
}

// TransfersMovedToAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type TransfersMovedToAvailableSubtotalFeeType2 string

const (
	TransfersMovedToAvailableSubtotalFeeType2PaymentFee                                        TransfersMovedToAvailableSubtotalFeeType2 = "payment-fee"
	TransfersMovedToAvailableSubtotalFeeType2DirectDebitFailureFee                             TransfersMovedToAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	TransfersMovedToAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        TransfersMovedToAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	TransfersMovedToAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  TransfersMovedToAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	TransfersMovedToAvailableSubtotalFeeType2PartnerCommission                                 TransfersMovedToAvailableSubtotalFeeType2 = "partner-commission"
	TransfersMovedToAvailableSubtotalFeeType2ApplicationFee                                    TransfersMovedToAvailableSubtotalFeeType2 = "application-fee"
	TransfersMovedToAvailableSubtotalFeeType2CaptureFee                                        TransfersMovedToAvailableSubtotalFeeType2 = "capture-fee"
	TransfersMovedToAvailableSubtotalFeeType2RefundFee                                         TransfersMovedToAvailableSubtotalFeeType2 = "refund-fee"
	TransfersMovedToAvailableSubtotalFeeType2ChargebackFee                                     TransfersMovedToAvailableSubtotalFeeType2 = "chargeback-fee"
	TransfersMovedToAvailableSubtotalFeeType2PaymentNotificationFee                            TransfersMovedToAvailableSubtotalFeeType2 = "payment-notification-fee"
	TransfersMovedToAvailableSubtotalFeeType2TransferNotificationFee                           TransfersMovedToAvailableSubtotalFeeType2 = "transfer-notification-fee"
	TransfersMovedToAvailableSubtotalFeeType2PayoutFee                                         TransfersMovedToAvailableSubtotalFeeType2 = "payout-fee"
	TransfersMovedToAvailableSubtotalFeeType2FeeDiscount                                       TransfersMovedToAvailableSubtotalFeeType2 = "fee-discount"
	TransfersMovedToAvailableSubtotalFeeType2FeeReimbursement                                  TransfersMovedToAvailableSubtotalFeeType2 = "fee-reimbursement"
	TransfersMovedToAvailableSubtotalFeeType2PlatformVolumeFee                                 TransfersMovedToAvailableSubtotalFeeType2 = "platform-volume-fee"
	TransfersMovedToAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 TransfersMovedToAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	TransfersMovedToAvailableSubtotalFeeType2BalanceChargeFee                                  TransfersMovedToAvailableSubtotalFeeType2 = "balance-charge-fee"
	TransfersMovedToAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   TransfersMovedToAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	TransfersMovedToAvailableSubtotalFeeType2TerminalMonthlyFee                                TransfersMovedToAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	TransfersMovedToAvailableSubtotalFeeType2AcceptanceRiskFee                                 TransfersMovedToAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	TransfersMovedToAvailableSubtotalFeeType2TopUpFee                                          TransfersMovedToAvailableSubtotalFeeType2 = "top-up-fee"
	TransfersMovedToAvailableSubtotalFeeType2PaymentGatewayFee                                 TransfersMovedToAvailableSubtotalFeeType2 = "payment-gateway-fee"
	TransfersMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   TransfersMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	TransfersMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee TransfersMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	TransfersMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             TransfersMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	TransfersMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           TransfersMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	TransfersMovedToAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           TransfersMovedToAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e TransfersMovedToAvailableSubtotalFeeType2) ToPointer() *TransfersMovedToAvailableSubtotalFeeType2 {
	return &e
}
func (e *TransfersMovedToAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = TransfersMovedToAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersMovedToAvailableSubtotalFeeType2: %v", v)
	}
}

// TransfersMovedToAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type TransfersMovedToAvailableSubtotalPrepaymentPartType2 string

const (
	TransfersMovedToAvailableSubtotalPrepaymentPartType2Fee                     TransfersMovedToAvailableSubtotalPrepaymentPartType2 = "fee"
	TransfersMovedToAvailableSubtotalPrepaymentPartType2FeeReimbursement        TransfersMovedToAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	TransfersMovedToAvailableSubtotalPrepaymentPartType2FeeDiscount             TransfersMovedToAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	TransfersMovedToAvailableSubtotalPrepaymentPartType2FeeVat                  TransfersMovedToAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	TransfersMovedToAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation TransfersMovedToAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e TransfersMovedToAvailableSubtotalPrepaymentPartType2) ToPointer() *TransfersMovedToAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *TransfersMovedToAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = TransfersMovedToAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersMovedToAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// TransfersMovedToAvailableSubtotalTransactionType2 - Represents the transaction type
type TransfersMovedToAvailableSubtotalTransactionType2 string

const (
	TransfersMovedToAvailableSubtotalTransactionType2Payment                           TransfersMovedToAvailableSubtotalTransactionType2 = "payment"
	TransfersMovedToAvailableSubtotalTransactionType2SplitPayment                      TransfersMovedToAvailableSubtotalTransactionType2 = "split-payment"
	TransfersMovedToAvailableSubtotalTransactionType2FailedPayment                     TransfersMovedToAvailableSubtotalTransactionType2 = "failed-payment"
	TransfersMovedToAvailableSubtotalTransactionType2FailedPlatformSplitPayment        TransfersMovedToAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	TransfersMovedToAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    TransfersMovedToAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	TransfersMovedToAvailableSubtotalTransactionType2Capture                           TransfersMovedToAvailableSubtotalTransactionType2 = "capture"
	TransfersMovedToAvailableSubtotalTransactionType2SplitTransaction                  TransfersMovedToAvailableSubtotalTransactionType2 = "split-transaction"
	TransfersMovedToAvailableSubtotalTransactionType2Refund                            TransfersMovedToAvailableSubtotalTransactionType2 = "refund"
	TransfersMovedToAvailableSubtotalTransactionType2PlatformPaymentRefund             TransfersMovedToAvailableSubtotalTransactionType2 = "platform-payment-refund"
	TransfersMovedToAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     TransfersMovedToAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	TransfersMovedToAvailableSubtotalTransactionType2RefundCompensation                TransfersMovedToAvailableSubtotalTransactionType2 = "refund-compensation"
	TransfersMovedToAvailableSubtotalTransactionType2ReturnedRefundCompensation        TransfersMovedToAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	TransfersMovedToAvailableSubtotalTransactionType2ReturnedRefund                    TransfersMovedToAvailableSubtotalTransactionType2 = "returned-refund"
	TransfersMovedToAvailableSubtotalTransactionType2Chargeback                        TransfersMovedToAvailableSubtotalTransactionType2 = "chargeback"
	TransfersMovedToAvailableSubtotalTransactionType2ChargebackReversal                TransfersMovedToAvailableSubtotalTransactionType2 = "chargeback-reversal"
	TransfersMovedToAvailableSubtotalTransactionType2ChargebackCompensation            TransfersMovedToAvailableSubtotalTransactionType2 = "chargeback-compensation"
	TransfersMovedToAvailableSubtotalTransactionType2ReversedChargebackCompensation    TransfersMovedToAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	TransfersMovedToAvailableSubtotalTransactionType2PlatformPaymentChargeback         TransfersMovedToAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	TransfersMovedToAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback TransfersMovedToAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	TransfersMovedToAvailableSubtotalTransactionType2FeePrepayment                     TransfersMovedToAvailableSubtotalTransactionType2 = "fee-prepayment"
	TransfersMovedToAvailableSubtotalTransactionType2OutgoingTransfer                  TransfersMovedToAvailableSubtotalTransactionType2 = "outgoing-transfer"
	TransfersMovedToAvailableSubtotalTransactionType2IncomingTransfer                  TransfersMovedToAvailableSubtotalTransactionType2 = "incoming-transfer"
	TransfersMovedToAvailableSubtotalTransactionType2CanceledTransfer                  TransfersMovedToAvailableSubtotalTransactionType2 = "canceled-transfer"
	TransfersMovedToAvailableSubtotalTransactionType2ReturnedTransfer                  TransfersMovedToAvailableSubtotalTransactionType2 = "returned-transfer"
	TransfersMovedToAvailableSubtotalTransactionType2BalanceReserve                    TransfersMovedToAvailableSubtotalTransactionType2 = "balance-reserve"
	TransfersMovedToAvailableSubtotalTransactionType2BalanceReserveReturn              TransfersMovedToAvailableSubtotalTransactionType2 = "balance-reserve-return"
	TransfersMovedToAvailableSubtotalTransactionType2InvoiceRoundingCompensation       TransfersMovedToAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	TransfersMovedToAvailableSubtotalTransactionType2RollingReserveHold                TransfersMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	TransfersMovedToAvailableSubtotalTransactionType2RollingReserveRelease             TransfersMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	TransfersMovedToAvailableSubtotalTransactionType2BalanceCorrection                 TransfersMovedToAvailableSubtotalTransactionType2 = "balance-correction"
	TransfersMovedToAvailableSubtotalTransactionType2Repayment                         TransfersMovedToAvailableSubtotalTransactionType2 = "repayment"
	TransfersMovedToAvailableSubtotalTransactionType2Loan                              TransfersMovedToAvailableSubtotalTransactionType2 = "loan"
	TransfersMovedToAvailableSubtotalTransactionType2BalanceTopup                      TransfersMovedToAvailableSubtotalTransactionType2 = "balance-topup"
	TransfersMovedToAvailableSubtotalTransactionType2CashCollateralIssuance            TransfersMovedToAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	TransfersMovedToAvailableSubtotalTransactionType2CashCollateralRelease             TransfersMovedToAvailableSubtotalTransactionType2 = "cash-collateral-release"
	TransfersMovedToAvailableSubtotalTransactionType2PendingRollingReserve             TransfersMovedToAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	TransfersMovedToAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        TransfersMovedToAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	TransfersMovedToAvailableSubtotalTransactionType2HeldRollingReserve                TransfersMovedToAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	TransfersMovedToAvailableSubtotalTransactionType2ReleasedRollingReserve            TransfersMovedToAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e TransfersMovedToAvailableSubtotalTransactionType2) ToPointer() *TransfersMovedToAvailableSubtotalTransactionType2 {
	return &e
}
func (e *TransfersMovedToAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = TransfersMovedToAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersMovedToAvailableSubtotalTransactionType2: %v", v)
	}
}

type TransfersMovedToAvailableSubtotal2 struct {
	SubTotals []TransfersMovedToAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *TransfersMovedToAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *TransfersMovedToAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *TransfersMovedToAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *TransfersMovedToAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *TransfersMovedToAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *TransfersMovedToAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *TransfersMovedToAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *TransfersMovedToAvailableSubtotal2) GetSubTotals() []TransfersMovedToAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *TransfersMovedToAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *TransfersMovedToAvailableSubtotal2) GetMethod() *TransfersMovedToAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *TransfersMovedToAvailableSubtotal2) GetCardIssuer() *TransfersMovedToAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *TransfersMovedToAvailableSubtotal2) GetCardAudience() *TransfersMovedToAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *TransfersMovedToAvailableSubtotal2) GetCardRegion() *TransfersMovedToAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *TransfersMovedToAvailableSubtotal2) GetFeeType() *TransfersMovedToAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *TransfersMovedToAvailableSubtotal2) GetPrepaymentPartType() *TransfersMovedToAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *TransfersMovedToAvailableSubtotal2) GetTransactionType() *TransfersMovedToAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type TransfersMovedToAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *TransfersMovedToAvailableAmount     `json:"amount,omitempty"`
	Subtotals []TransfersMovedToAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *TransfersMovedToAvailable) GetAmount() *TransfersMovedToAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *TransfersMovedToAvailable) GetSubtotals() []TransfersMovedToAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// TransfersImmediatelyAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type TransfersImmediatelyAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *TransfersImmediatelyAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *TransfersImmediatelyAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// TransfersImmediatelyAvailableSubTotalMethod1 - Payment type of the transactions
type TransfersImmediatelyAvailableSubTotalMethod1 string

const (
	TransfersImmediatelyAvailableSubTotalMethod1Alma              TransfersImmediatelyAvailableSubTotalMethod1 = "alma"
	TransfersImmediatelyAvailableSubTotalMethod1Bacs              TransfersImmediatelyAvailableSubTotalMethod1 = "bacs"
	TransfersImmediatelyAvailableSubTotalMethod1Applepay          TransfersImmediatelyAvailableSubTotalMethod1 = "applepay"
	TransfersImmediatelyAvailableSubTotalMethod1Bancomatpay       TransfersImmediatelyAvailableSubTotalMethod1 = "bancomatpay"
	TransfersImmediatelyAvailableSubTotalMethod1Bancontact        TransfersImmediatelyAvailableSubTotalMethod1 = "bancontact"
	TransfersImmediatelyAvailableSubTotalMethod1Banktransfer      TransfersImmediatelyAvailableSubTotalMethod1 = "banktransfer"
	TransfersImmediatelyAvailableSubTotalMethod1Belfius           TransfersImmediatelyAvailableSubTotalMethod1 = "belfius"
	TransfersImmediatelyAvailableSubTotalMethod1Billie            TransfersImmediatelyAvailableSubTotalMethod1 = "billie"
	TransfersImmediatelyAvailableSubTotalMethod1Bizum             TransfersImmediatelyAvailableSubTotalMethod1 = "bizum"
	TransfersImmediatelyAvailableSubTotalMethod1Bitcoin           TransfersImmediatelyAvailableSubTotalMethod1 = "bitcoin"
	TransfersImmediatelyAvailableSubTotalMethod1Blik              TransfersImmediatelyAvailableSubTotalMethod1 = "blik"
	TransfersImmediatelyAvailableSubTotalMethod1Creditcard        TransfersImmediatelyAvailableSubTotalMethod1 = "creditcard"
	TransfersImmediatelyAvailableSubTotalMethod1Directdebit       TransfersImmediatelyAvailableSubTotalMethod1 = "directdebit"
	TransfersImmediatelyAvailableSubTotalMethod1Eps               TransfersImmediatelyAvailableSubTotalMethod1 = "eps"
	TransfersImmediatelyAvailableSubTotalMethod1Giftcard          TransfersImmediatelyAvailableSubTotalMethod1 = "giftcard"
	TransfersImmediatelyAvailableSubTotalMethod1Giropay           TransfersImmediatelyAvailableSubTotalMethod1 = "giropay"
	TransfersImmediatelyAvailableSubTotalMethod1Googlepay         TransfersImmediatelyAvailableSubTotalMethod1 = "googlepay"
	TransfersImmediatelyAvailableSubTotalMethod1Ideal             TransfersImmediatelyAvailableSubTotalMethod1 = "ideal"
	TransfersImmediatelyAvailableSubTotalMethod1In3               TransfersImmediatelyAvailableSubTotalMethod1 = "in3"
	TransfersImmediatelyAvailableSubTotalMethod1Inghomepay        TransfersImmediatelyAvailableSubTotalMethod1 = "inghomepay"
	TransfersImmediatelyAvailableSubTotalMethod1Kbc               TransfersImmediatelyAvailableSubTotalMethod1 = "kbc"
	TransfersImmediatelyAvailableSubTotalMethod1Klarnapaylater    TransfersImmediatelyAvailableSubTotalMethod1 = "klarnapaylater"
	TransfersImmediatelyAvailableSubTotalMethod1Klarnapaynow      TransfersImmediatelyAvailableSubTotalMethod1 = "klarnapaynow"
	TransfersImmediatelyAvailableSubTotalMethod1Klarnasliceit     TransfersImmediatelyAvailableSubTotalMethod1 = "klarnasliceit"
	TransfersImmediatelyAvailableSubTotalMethod1Klarna            TransfersImmediatelyAvailableSubTotalMethod1 = "klarna"
	TransfersImmediatelyAvailableSubTotalMethod1Mbway             TransfersImmediatelyAvailableSubTotalMethod1 = "mbway"
	TransfersImmediatelyAvailableSubTotalMethod1Multibanco        TransfersImmediatelyAvailableSubTotalMethod1 = "multibanco"
	TransfersImmediatelyAvailableSubTotalMethod1Mybank            TransfersImmediatelyAvailableSubTotalMethod1 = "mybank"
	TransfersImmediatelyAvailableSubTotalMethod1Paybybank         TransfersImmediatelyAvailableSubTotalMethod1 = "paybybank"
	TransfersImmediatelyAvailableSubTotalMethod1Payconiq          TransfersImmediatelyAvailableSubTotalMethod1 = "payconiq"
	TransfersImmediatelyAvailableSubTotalMethod1Paypal            TransfersImmediatelyAvailableSubTotalMethod1 = "paypal"
	TransfersImmediatelyAvailableSubTotalMethod1Paysafecard       TransfersImmediatelyAvailableSubTotalMethod1 = "paysafecard"
	TransfersImmediatelyAvailableSubTotalMethod1Przelewy24        TransfersImmediatelyAvailableSubTotalMethod1 = "przelewy24"
	TransfersImmediatelyAvailableSubTotalMethod1Riverty           TransfersImmediatelyAvailableSubTotalMethod1 = "riverty"
	TransfersImmediatelyAvailableSubTotalMethod1Satispay          TransfersImmediatelyAvailableSubTotalMethod1 = "satispay"
	TransfersImmediatelyAvailableSubTotalMethod1Podiumcadeaukaart TransfersImmediatelyAvailableSubTotalMethod1 = "podiumcadeaukaart"
	TransfersImmediatelyAvailableSubTotalMethod1Pointofsale       TransfersImmediatelyAvailableSubTotalMethod1 = "pointofsale"
	TransfersImmediatelyAvailableSubTotalMethod1Sofort            TransfersImmediatelyAvailableSubTotalMethod1 = "sofort"
	TransfersImmediatelyAvailableSubTotalMethod1Swish             TransfersImmediatelyAvailableSubTotalMethod1 = "swish"
	TransfersImmediatelyAvailableSubTotalMethod1Trustly           TransfersImmediatelyAvailableSubTotalMethod1 = "trustly"
	TransfersImmediatelyAvailableSubTotalMethod1Twint             TransfersImmediatelyAvailableSubTotalMethod1 = "twint"
	TransfersImmediatelyAvailableSubTotalMethod1Voucher           TransfersImmediatelyAvailableSubTotalMethod1 = "voucher"
)

func (e TransfersImmediatelyAvailableSubTotalMethod1) ToPointer() *TransfersImmediatelyAvailableSubTotalMethod1 {
	return &e
}
func (e *TransfersImmediatelyAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = TransfersImmediatelyAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersImmediatelyAvailableSubTotalMethod1: %v", v)
	}
}

// TransfersImmediatelyAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type TransfersImmediatelyAvailableSubTotalCardIssuer1 string

const (
	TransfersImmediatelyAvailableSubTotalCardIssuer1Amex          TransfersImmediatelyAvailableSubTotalCardIssuer1 = "amex"
	TransfersImmediatelyAvailableSubTotalCardIssuer1Maestro       TransfersImmediatelyAvailableSubTotalCardIssuer1 = "maestro"
	TransfersImmediatelyAvailableSubTotalCardIssuer1CarteBancaire TransfersImmediatelyAvailableSubTotalCardIssuer1 = "carte-bancaire"
	TransfersImmediatelyAvailableSubTotalCardIssuer1Other         TransfersImmediatelyAvailableSubTotalCardIssuer1 = "other"
)

func (e TransfersImmediatelyAvailableSubTotalCardIssuer1) ToPointer() *TransfersImmediatelyAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *TransfersImmediatelyAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = TransfersImmediatelyAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersImmediatelyAvailableSubTotalCardIssuer1: %v", v)
	}
}

// TransfersImmediatelyAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type TransfersImmediatelyAvailableSubTotalCardAudience1 string

const (
	TransfersImmediatelyAvailableSubTotalCardAudience1Corporate TransfersImmediatelyAvailableSubTotalCardAudience1 = "corporate"
	TransfersImmediatelyAvailableSubTotalCardAudience1Other     TransfersImmediatelyAvailableSubTotalCardAudience1 = "other"
)

func (e TransfersImmediatelyAvailableSubTotalCardAudience1) ToPointer() *TransfersImmediatelyAvailableSubTotalCardAudience1 {
	return &e
}
func (e *TransfersImmediatelyAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = TransfersImmediatelyAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersImmediatelyAvailableSubTotalCardAudience1: %v", v)
	}
}

// TransfersImmediatelyAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type TransfersImmediatelyAvailableSubTotalCardRegion1 string

const (
	TransfersImmediatelyAvailableSubTotalCardRegion1IntraEea TransfersImmediatelyAvailableSubTotalCardRegion1 = "intra-eea"
	TransfersImmediatelyAvailableSubTotalCardRegion1IntraEu  TransfersImmediatelyAvailableSubTotalCardRegion1 = "intra-eu"
	TransfersImmediatelyAvailableSubTotalCardRegion1Domestic TransfersImmediatelyAvailableSubTotalCardRegion1 = "domestic"
	TransfersImmediatelyAvailableSubTotalCardRegion1Other    TransfersImmediatelyAvailableSubTotalCardRegion1 = "other"
)

func (e TransfersImmediatelyAvailableSubTotalCardRegion1) ToPointer() *TransfersImmediatelyAvailableSubTotalCardRegion1 {
	return &e
}
func (e *TransfersImmediatelyAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = TransfersImmediatelyAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersImmediatelyAvailableSubTotalCardRegion1: %v", v)
	}
}

// TransfersImmediatelyAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type TransfersImmediatelyAvailableSubTotalFeeType1 string

const (
	TransfersImmediatelyAvailableSubTotalFeeType1PaymentFee                                        TransfersImmediatelyAvailableSubTotalFeeType1 = "payment-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1DirectDebitFailureFee                             TransfersImmediatelyAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        TransfersImmediatelyAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  TransfersImmediatelyAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1PartnerCommission                                 TransfersImmediatelyAvailableSubTotalFeeType1 = "partner-commission"
	TransfersImmediatelyAvailableSubTotalFeeType1ApplicationFee                                    TransfersImmediatelyAvailableSubTotalFeeType1 = "application-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1CaptureFee                                        TransfersImmediatelyAvailableSubTotalFeeType1 = "capture-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1RefundFee                                         TransfersImmediatelyAvailableSubTotalFeeType1 = "refund-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1ChargebackFee                                     TransfersImmediatelyAvailableSubTotalFeeType1 = "chargeback-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1PaymentNotificationFee                            TransfersImmediatelyAvailableSubTotalFeeType1 = "payment-notification-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1TransferNotificationFee                           TransfersImmediatelyAvailableSubTotalFeeType1 = "transfer-notification-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1PayoutFee                                         TransfersImmediatelyAvailableSubTotalFeeType1 = "payout-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1FeeDiscount                                       TransfersImmediatelyAvailableSubTotalFeeType1 = "fee-discount"
	TransfersImmediatelyAvailableSubTotalFeeType1FeeReimbursement                                  TransfersImmediatelyAvailableSubTotalFeeType1 = "fee-reimbursement"
	TransfersImmediatelyAvailableSubTotalFeeType1PlatformVolumeFee                                 TransfersImmediatelyAvailableSubTotalFeeType1 = "platform-volume-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 TransfersImmediatelyAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1BalanceChargeFee                                  TransfersImmediatelyAvailableSubTotalFeeType1 = "balance-charge-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   TransfersImmediatelyAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1TerminalMonthlyFee                                TransfersImmediatelyAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1AcceptanceRiskFee                                 TransfersImmediatelyAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1TopUpFee                                          TransfersImmediatelyAvailableSubTotalFeeType1 = "top-up-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1PaymentGatewayFee                                 TransfersImmediatelyAvailableSubTotalFeeType1 = "payment-gateway-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   TransfersImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee TransfersImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             TransfersImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           TransfersImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	TransfersImmediatelyAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           TransfersImmediatelyAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e TransfersImmediatelyAvailableSubTotalFeeType1) ToPointer() *TransfersImmediatelyAvailableSubTotalFeeType1 {
	return &e
}
func (e *TransfersImmediatelyAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = TransfersImmediatelyAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersImmediatelyAvailableSubTotalFeeType1: %v", v)
	}
}

// TransfersImmediatelyAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type TransfersImmediatelyAvailableSubTotalPrepaymentPartType1 string

const (
	TransfersImmediatelyAvailableSubTotalPrepaymentPartType1Fee                     TransfersImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee"
	TransfersImmediatelyAvailableSubTotalPrepaymentPartType1FeeReimbursement        TransfersImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	TransfersImmediatelyAvailableSubTotalPrepaymentPartType1FeeDiscount             TransfersImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	TransfersImmediatelyAvailableSubTotalPrepaymentPartType1FeeVat                  TransfersImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	TransfersImmediatelyAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation TransfersImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e TransfersImmediatelyAvailableSubTotalPrepaymentPartType1) ToPointer() *TransfersImmediatelyAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *TransfersImmediatelyAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = TransfersImmediatelyAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersImmediatelyAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// TransfersImmediatelyAvailableSubTotalTransactionType1 - Represents the transaction type
type TransfersImmediatelyAvailableSubTotalTransactionType1 string

const (
	TransfersImmediatelyAvailableSubTotalTransactionType1Payment                           TransfersImmediatelyAvailableSubTotalTransactionType1 = "payment"
	TransfersImmediatelyAvailableSubTotalTransactionType1SplitPayment                      TransfersImmediatelyAvailableSubTotalTransactionType1 = "split-payment"
	TransfersImmediatelyAvailableSubTotalTransactionType1FailedPayment                     TransfersImmediatelyAvailableSubTotalTransactionType1 = "failed-payment"
	TransfersImmediatelyAvailableSubTotalTransactionType1FailedPlatformSplitPayment        TransfersImmediatelyAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	TransfersImmediatelyAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    TransfersImmediatelyAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	TransfersImmediatelyAvailableSubTotalTransactionType1Capture                           TransfersImmediatelyAvailableSubTotalTransactionType1 = "capture"
	TransfersImmediatelyAvailableSubTotalTransactionType1SplitTransaction                  TransfersImmediatelyAvailableSubTotalTransactionType1 = "split-transaction"
	TransfersImmediatelyAvailableSubTotalTransactionType1Refund                            TransfersImmediatelyAvailableSubTotalTransactionType1 = "refund"
	TransfersImmediatelyAvailableSubTotalTransactionType1PlatformPaymentRefund             TransfersImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-refund"
	TransfersImmediatelyAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     TransfersImmediatelyAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	TransfersImmediatelyAvailableSubTotalTransactionType1RefundCompensation                TransfersImmediatelyAvailableSubTotalTransactionType1 = "refund-compensation"
	TransfersImmediatelyAvailableSubTotalTransactionType1ReturnedRefundCompensation        TransfersImmediatelyAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	TransfersImmediatelyAvailableSubTotalTransactionType1ReturnedRefund                    TransfersImmediatelyAvailableSubTotalTransactionType1 = "returned-refund"
	TransfersImmediatelyAvailableSubTotalTransactionType1Chargeback                        TransfersImmediatelyAvailableSubTotalTransactionType1 = "chargeback"
	TransfersImmediatelyAvailableSubTotalTransactionType1ChargebackReversal                TransfersImmediatelyAvailableSubTotalTransactionType1 = "chargeback-reversal"
	TransfersImmediatelyAvailableSubTotalTransactionType1ChargebackCompensation            TransfersImmediatelyAvailableSubTotalTransactionType1 = "chargeback-compensation"
	TransfersImmediatelyAvailableSubTotalTransactionType1ReversedChargebackCompensation    TransfersImmediatelyAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	TransfersImmediatelyAvailableSubTotalTransactionType1PlatformPaymentChargeback         TransfersImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	TransfersImmediatelyAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback TransfersImmediatelyAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	TransfersImmediatelyAvailableSubTotalTransactionType1FeePrepayment                     TransfersImmediatelyAvailableSubTotalTransactionType1 = "fee-prepayment"
	TransfersImmediatelyAvailableSubTotalTransactionType1OutgoingTransfer                  TransfersImmediatelyAvailableSubTotalTransactionType1 = "outgoing-transfer"
	TransfersImmediatelyAvailableSubTotalTransactionType1IncomingTransfer                  TransfersImmediatelyAvailableSubTotalTransactionType1 = "incoming-transfer"
	TransfersImmediatelyAvailableSubTotalTransactionType1CanceledTransfer                  TransfersImmediatelyAvailableSubTotalTransactionType1 = "canceled-transfer"
	TransfersImmediatelyAvailableSubTotalTransactionType1ReturnedTransfer                  TransfersImmediatelyAvailableSubTotalTransactionType1 = "returned-transfer"
	TransfersImmediatelyAvailableSubTotalTransactionType1BalanceReserve                    TransfersImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve"
	TransfersImmediatelyAvailableSubTotalTransactionType1BalanceReserveReturn              TransfersImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve-return"
	TransfersImmediatelyAvailableSubTotalTransactionType1InvoiceRoundingCompensation       TransfersImmediatelyAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	TransfersImmediatelyAvailableSubTotalTransactionType1RollingReserveHold                TransfersImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	TransfersImmediatelyAvailableSubTotalTransactionType1RollingReserveRelease             TransfersImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	TransfersImmediatelyAvailableSubTotalTransactionType1BalanceCorrection                 TransfersImmediatelyAvailableSubTotalTransactionType1 = "balance-correction"
	TransfersImmediatelyAvailableSubTotalTransactionType1Repayment                         TransfersImmediatelyAvailableSubTotalTransactionType1 = "repayment"
	TransfersImmediatelyAvailableSubTotalTransactionType1Loan                              TransfersImmediatelyAvailableSubTotalTransactionType1 = "loan"
	TransfersImmediatelyAvailableSubTotalTransactionType1BalanceTopup                      TransfersImmediatelyAvailableSubTotalTransactionType1 = "balance-topup"
	TransfersImmediatelyAvailableSubTotalTransactionType1CashCollateralIssuance            TransfersImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	TransfersImmediatelyAvailableSubTotalTransactionType1CashCollateralRelease             TransfersImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-release"
	TransfersImmediatelyAvailableSubTotalTransactionType1PendingRollingReserve             TransfersImmediatelyAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	TransfersImmediatelyAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        TransfersImmediatelyAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	TransfersImmediatelyAvailableSubTotalTransactionType1HeldRollingReserve                TransfersImmediatelyAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	TransfersImmediatelyAvailableSubTotalTransactionType1ReleasedRollingReserve            TransfersImmediatelyAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e TransfersImmediatelyAvailableSubTotalTransactionType1) ToPointer() *TransfersImmediatelyAvailableSubTotalTransactionType1 {
	return &e
}
func (e *TransfersImmediatelyAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = TransfersImmediatelyAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersImmediatelyAvailableSubTotalTransactionType1: %v", v)
	}
}

type TransfersImmediatelyAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *TransfersImmediatelyAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *TransfersImmediatelyAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *TransfersImmediatelyAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *TransfersImmediatelyAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *TransfersImmediatelyAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *TransfersImmediatelyAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *TransfersImmediatelyAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *TransfersImmediatelyAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *TransfersImmediatelyAvailableSubTotal1) GetMethod() *TransfersImmediatelyAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *TransfersImmediatelyAvailableSubTotal1) GetCardIssuer() *TransfersImmediatelyAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *TransfersImmediatelyAvailableSubTotal1) GetCardAudience() *TransfersImmediatelyAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *TransfersImmediatelyAvailableSubTotal1) GetCardRegion() *TransfersImmediatelyAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *TransfersImmediatelyAvailableSubTotal1) GetFeeType() *TransfersImmediatelyAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *TransfersImmediatelyAvailableSubTotal1) GetPrepaymentPartType() *TransfersImmediatelyAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *TransfersImmediatelyAvailableSubTotal1) GetTransactionType() *TransfersImmediatelyAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// TransfersImmediatelyAvailableSubtotalMethod2 - Payment type of the transactions
type TransfersImmediatelyAvailableSubtotalMethod2 string

const (
	TransfersImmediatelyAvailableSubtotalMethod2Alma              TransfersImmediatelyAvailableSubtotalMethod2 = "alma"
	TransfersImmediatelyAvailableSubtotalMethod2Bacs              TransfersImmediatelyAvailableSubtotalMethod2 = "bacs"
	TransfersImmediatelyAvailableSubtotalMethod2Applepay          TransfersImmediatelyAvailableSubtotalMethod2 = "applepay"
	TransfersImmediatelyAvailableSubtotalMethod2Bancomatpay       TransfersImmediatelyAvailableSubtotalMethod2 = "bancomatpay"
	TransfersImmediatelyAvailableSubtotalMethod2Bancontact        TransfersImmediatelyAvailableSubtotalMethod2 = "bancontact"
	TransfersImmediatelyAvailableSubtotalMethod2Banktransfer      TransfersImmediatelyAvailableSubtotalMethod2 = "banktransfer"
	TransfersImmediatelyAvailableSubtotalMethod2Belfius           TransfersImmediatelyAvailableSubtotalMethod2 = "belfius"
	TransfersImmediatelyAvailableSubtotalMethod2Billie            TransfersImmediatelyAvailableSubtotalMethod2 = "billie"
	TransfersImmediatelyAvailableSubtotalMethod2Bizum             TransfersImmediatelyAvailableSubtotalMethod2 = "bizum"
	TransfersImmediatelyAvailableSubtotalMethod2Bitcoin           TransfersImmediatelyAvailableSubtotalMethod2 = "bitcoin"
	TransfersImmediatelyAvailableSubtotalMethod2Blik              TransfersImmediatelyAvailableSubtotalMethod2 = "blik"
	TransfersImmediatelyAvailableSubtotalMethod2Creditcard        TransfersImmediatelyAvailableSubtotalMethod2 = "creditcard"
	TransfersImmediatelyAvailableSubtotalMethod2Directdebit       TransfersImmediatelyAvailableSubtotalMethod2 = "directdebit"
	TransfersImmediatelyAvailableSubtotalMethod2Eps               TransfersImmediatelyAvailableSubtotalMethod2 = "eps"
	TransfersImmediatelyAvailableSubtotalMethod2Giftcard          TransfersImmediatelyAvailableSubtotalMethod2 = "giftcard"
	TransfersImmediatelyAvailableSubtotalMethod2Giropay           TransfersImmediatelyAvailableSubtotalMethod2 = "giropay"
	TransfersImmediatelyAvailableSubtotalMethod2Googlepay         TransfersImmediatelyAvailableSubtotalMethod2 = "googlepay"
	TransfersImmediatelyAvailableSubtotalMethod2Ideal             TransfersImmediatelyAvailableSubtotalMethod2 = "ideal"
	TransfersImmediatelyAvailableSubtotalMethod2In3               TransfersImmediatelyAvailableSubtotalMethod2 = "in3"
	TransfersImmediatelyAvailableSubtotalMethod2Inghomepay        TransfersImmediatelyAvailableSubtotalMethod2 = "inghomepay"
	TransfersImmediatelyAvailableSubtotalMethod2Kbc               TransfersImmediatelyAvailableSubtotalMethod2 = "kbc"
	TransfersImmediatelyAvailableSubtotalMethod2Klarnapaylater    TransfersImmediatelyAvailableSubtotalMethod2 = "klarnapaylater"
	TransfersImmediatelyAvailableSubtotalMethod2Klarnapaynow      TransfersImmediatelyAvailableSubtotalMethod2 = "klarnapaynow"
	TransfersImmediatelyAvailableSubtotalMethod2Klarnasliceit     TransfersImmediatelyAvailableSubtotalMethod2 = "klarnasliceit"
	TransfersImmediatelyAvailableSubtotalMethod2Klarna            TransfersImmediatelyAvailableSubtotalMethod2 = "klarna"
	TransfersImmediatelyAvailableSubtotalMethod2Mbway             TransfersImmediatelyAvailableSubtotalMethod2 = "mbway"
	TransfersImmediatelyAvailableSubtotalMethod2Multibanco        TransfersImmediatelyAvailableSubtotalMethod2 = "multibanco"
	TransfersImmediatelyAvailableSubtotalMethod2Mybank            TransfersImmediatelyAvailableSubtotalMethod2 = "mybank"
	TransfersImmediatelyAvailableSubtotalMethod2Paybybank         TransfersImmediatelyAvailableSubtotalMethod2 = "paybybank"
	TransfersImmediatelyAvailableSubtotalMethod2Payconiq          TransfersImmediatelyAvailableSubtotalMethod2 = "payconiq"
	TransfersImmediatelyAvailableSubtotalMethod2Paypal            TransfersImmediatelyAvailableSubtotalMethod2 = "paypal"
	TransfersImmediatelyAvailableSubtotalMethod2Paysafecard       TransfersImmediatelyAvailableSubtotalMethod2 = "paysafecard"
	TransfersImmediatelyAvailableSubtotalMethod2Przelewy24        TransfersImmediatelyAvailableSubtotalMethod2 = "przelewy24"
	TransfersImmediatelyAvailableSubtotalMethod2Riverty           TransfersImmediatelyAvailableSubtotalMethod2 = "riverty"
	TransfersImmediatelyAvailableSubtotalMethod2Satispay          TransfersImmediatelyAvailableSubtotalMethod2 = "satispay"
	TransfersImmediatelyAvailableSubtotalMethod2Podiumcadeaukaart TransfersImmediatelyAvailableSubtotalMethod2 = "podiumcadeaukaart"
	TransfersImmediatelyAvailableSubtotalMethod2Pointofsale       TransfersImmediatelyAvailableSubtotalMethod2 = "pointofsale"
	TransfersImmediatelyAvailableSubtotalMethod2Sofort            TransfersImmediatelyAvailableSubtotalMethod2 = "sofort"
	TransfersImmediatelyAvailableSubtotalMethod2Swish             TransfersImmediatelyAvailableSubtotalMethod2 = "swish"
	TransfersImmediatelyAvailableSubtotalMethod2Trustly           TransfersImmediatelyAvailableSubtotalMethod2 = "trustly"
	TransfersImmediatelyAvailableSubtotalMethod2Twint             TransfersImmediatelyAvailableSubtotalMethod2 = "twint"
	TransfersImmediatelyAvailableSubtotalMethod2Voucher           TransfersImmediatelyAvailableSubtotalMethod2 = "voucher"
)

func (e TransfersImmediatelyAvailableSubtotalMethod2) ToPointer() *TransfersImmediatelyAvailableSubtotalMethod2 {
	return &e
}
func (e *TransfersImmediatelyAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = TransfersImmediatelyAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersImmediatelyAvailableSubtotalMethod2: %v", v)
	}
}

// TransfersImmediatelyAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type TransfersImmediatelyAvailableSubtotalCardIssuer2 string

const (
	TransfersImmediatelyAvailableSubtotalCardIssuer2Amex          TransfersImmediatelyAvailableSubtotalCardIssuer2 = "amex"
	TransfersImmediatelyAvailableSubtotalCardIssuer2Maestro       TransfersImmediatelyAvailableSubtotalCardIssuer2 = "maestro"
	TransfersImmediatelyAvailableSubtotalCardIssuer2CarteBancaire TransfersImmediatelyAvailableSubtotalCardIssuer2 = "carte-bancaire"
	TransfersImmediatelyAvailableSubtotalCardIssuer2Other         TransfersImmediatelyAvailableSubtotalCardIssuer2 = "other"
)

func (e TransfersImmediatelyAvailableSubtotalCardIssuer2) ToPointer() *TransfersImmediatelyAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *TransfersImmediatelyAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = TransfersImmediatelyAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersImmediatelyAvailableSubtotalCardIssuer2: %v", v)
	}
}

// TransfersImmediatelyAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type TransfersImmediatelyAvailableSubtotalCardAudience2 string

const (
	TransfersImmediatelyAvailableSubtotalCardAudience2Corporate TransfersImmediatelyAvailableSubtotalCardAudience2 = "corporate"
	TransfersImmediatelyAvailableSubtotalCardAudience2Other     TransfersImmediatelyAvailableSubtotalCardAudience2 = "other"
)

func (e TransfersImmediatelyAvailableSubtotalCardAudience2) ToPointer() *TransfersImmediatelyAvailableSubtotalCardAudience2 {
	return &e
}
func (e *TransfersImmediatelyAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = TransfersImmediatelyAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersImmediatelyAvailableSubtotalCardAudience2: %v", v)
	}
}

// TransfersImmediatelyAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type TransfersImmediatelyAvailableSubtotalCardRegion2 string

const (
	TransfersImmediatelyAvailableSubtotalCardRegion2IntraEea TransfersImmediatelyAvailableSubtotalCardRegion2 = "intra-eea"
	TransfersImmediatelyAvailableSubtotalCardRegion2IntraEu  TransfersImmediatelyAvailableSubtotalCardRegion2 = "intra-eu"
	TransfersImmediatelyAvailableSubtotalCardRegion2Domestic TransfersImmediatelyAvailableSubtotalCardRegion2 = "domestic"
	TransfersImmediatelyAvailableSubtotalCardRegion2Other    TransfersImmediatelyAvailableSubtotalCardRegion2 = "other"
)

func (e TransfersImmediatelyAvailableSubtotalCardRegion2) ToPointer() *TransfersImmediatelyAvailableSubtotalCardRegion2 {
	return &e
}
func (e *TransfersImmediatelyAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = TransfersImmediatelyAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersImmediatelyAvailableSubtotalCardRegion2: %v", v)
	}
}

// TransfersImmediatelyAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type TransfersImmediatelyAvailableSubtotalFeeType2 string

const (
	TransfersImmediatelyAvailableSubtotalFeeType2PaymentFee                                        TransfersImmediatelyAvailableSubtotalFeeType2 = "payment-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2DirectDebitFailureFee                             TransfersImmediatelyAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        TransfersImmediatelyAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  TransfersImmediatelyAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2PartnerCommission                                 TransfersImmediatelyAvailableSubtotalFeeType2 = "partner-commission"
	TransfersImmediatelyAvailableSubtotalFeeType2ApplicationFee                                    TransfersImmediatelyAvailableSubtotalFeeType2 = "application-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2CaptureFee                                        TransfersImmediatelyAvailableSubtotalFeeType2 = "capture-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2RefundFee                                         TransfersImmediatelyAvailableSubtotalFeeType2 = "refund-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2ChargebackFee                                     TransfersImmediatelyAvailableSubtotalFeeType2 = "chargeback-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2PaymentNotificationFee                            TransfersImmediatelyAvailableSubtotalFeeType2 = "payment-notification-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2TransferNotificationFee                           TransfersImmediatelyAvailableSubtotalFeeType2 = "transfer-notification-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2PayoutFee                                         TransfersImmediatelyAvailableSubtotalFeeType2 = "payout-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2FeeDiscount                                       TransfersImmediatelyAvailableSubtotalFeeType2 = "fee-discount"
	TransfersImmediatelyAvailableSubtotalFeeType2FeeReimbursement                                  TransfersImmediatelyAvailableSubtotalFeeType2 = "fee-reimbursement"
	TransfersImmediatelyAvailableSubtotalFeeType2PlatformVolumeFee                                 TransfersImmediatelyAvailableSubtotalFeeType2 = "platform-volume-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 TransfersImmediatelyAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2BalanceChargeFee                                  TransfersImmediatelyAvailableSubtotalFeeType2 = "balance-charge-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   TransfersImmediatelyAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2TerminalMonthlyFee                                TransfersImmediatelyAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2AcceptanceRiskFee                                 TransfersImmediatelyAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2TopUpFee                                          TransfersImmediatelyAvailableSubtotalFeeType2 = "top-up-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2PaymentGatewayFee                                 TransfersImmediatelyAvailableSubtotalFeeType2 = "payment-gateway-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   TransfersImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee TransfersImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             TransfersImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           TransfersImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	TransfersImmediatelyAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           TransfersImmediatelyAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e TransfersImmediatelyAvailableSubtotalFeeType2) ToPointer() *TransfersImmediatelyAvailableSubtotalFeeType2 {
	return &e
}
func (e *TransfersImmediatelyAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = TransfersImmediatelyAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersImmediatelyAvailableSubtotalFeeType2: %v", v)
	}
}

// TransfersImmediatelyAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type TransfersImmediatelyAvailableSubtotalPrepaymentPartType2 string

const (
	TransfersImmediatelyAvailableSubtotalPrepaymentPartType2Fee                     TransfersImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee"
	TransfersImmediatelyAvailableSubtotalPrepaymentPartType2FeeReimbursement        TransfersImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	TransfersImmediatelyAvailableSubtotalPrepaymentPartType2FeeDiscount             TransfersImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	TransfersImmediatelyAvailableSubtotalPrepaymentPartType2FeeVat                  TransfersImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	TransfersImmediatelyAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation TransfersImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e TransfersImmediatelyAvailableSubtotalPrepaymentPartType2) ToPointer() *TransfersImmediatelyAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *TransfersImmediatelyAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = TransfersImmediatelyAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersImmediatelyAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// TransfersImmediatelyAvailableSubtotalTransactionType2 - Represents the transaction type
type TransfersImmediatelyAvailableSubtotalTransactionType2 string

const (
	TransfersImmediatelyAvailableSubtotalTransactionType2Payment                           TransfersImmediatelyAvailableSubtotalTransactionType2 = "payment"
	TransfersImmediatelyAvailableSubtotalTransactionType2SplitPayment                      TransfersImmediatelyAvailableSubtotalTransactionType2 = "split-payment"
	TransfersImmediatelyAvailableSubtotalTransactionType2FailedPayment                     TransfersImmediatelyAvailableSubtotalTransactionType2 = "failed-payment"
	TransfersImmediatelyAvailableSubtotalTransactionType2FailedPlatformSplitPayment        TransfersImmediatelyAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	TransfersImmediatelyAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    TransfersImmediatelyAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	TransfersImmediatelyAvailableSubtotalTransactionType2Capture                           TransfersImmediatelyAvailableSubtotalTransactionType2 = "capture"
	TransfersImmediatelyAvailableSubtotalTransactionType2SplitTransaction                  TransfersImmediatelyAvailableSubtotalTransactionType2 = "split-transaction"
	TransfersImmediatelyAvailableSubtotalTransactionType2Refund                            TransfersImmediatelyAvailableSubtotalTransactionType2 = "refund"
	TransfersImmediatelyAvailableSubtotalTransactionType2PlatformPaymentRefund             TransfersImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-refund"
	TransfersImmediatelyAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     TransfersImmediatelyAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	TransfersImmediatelyAvailableSubtotalTransactionType2RefundCompensation                TransfersImmediatelyAvailableSubtotalTransactionType2 = "refund-compensation"
	TransfersImmediatelyAvailableSubtotalTransactionType2ReturnedRefundCompensation        TransfersImmediatelyAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	TransfersImmediatelyAvailableSubtotalTransactionType2ReturnedRefund                    TransfersImmediatelyAvailableSubtotalTransactionType2 = "returned-refund"
	TransfersImmediatelyAvailableSubtotalTransactionType2Chargeback                        TransfersImmediatelyAvailableSubtotalTransactionType2 = "chargeback"
	TransfersImmediatelyAvailableSubtotalTransactionType2ChargebackReversal                TransfersImmediatelyAvailableSubtotalTransactionType2 = "chargeback-reversal"
	TransfersImmediatelyAvailableSubtotalTransactionType2ChargebackCompensation            TransfersImmediatelyAvailableSubtotalTransactionType2 = "chargeback-compensation"
	TransfersImmediatelyAvailableSubtotalTransactionType2ReversedChargebackCompensation    TransfersImmediatelyAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	TransfersImmediatelyAvailableSubtotalTransactionType2PlatformPaymentChargeback         TransfersImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	TransfersImmediatelyAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback TransfersImmediatelyAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	TransfersImmediatelyAvailableSubtotalTransactionType2FeePrepayment                     TransfersImmediatelyAvailableSubtotalTransactionType2 = "fee-prepayment"
	TransfersImmediatelyAvailableSubtotalTransactionType2OutgoingTransfer                  TransfersImmediatelyAvailableSubtotalTransactionType2 = "outgoing-transfer"
	TransfersImmediatelyAvailableSubtotalTransactionType2IncomingTransfer                  TransfersImmediatelyAvailableSubtotalTransactionType2 = "incoming-transfer"
	TransfersImmediatelyAvailableSubtotalTransactionType2CanceledTransfer                  TransfersImmediatelyAvailableSubtotalTransactionType2 = "canceled-transfer"
	TransfersImmediatelyAvailableSubtotalTransactionType2ReturnedTransfer                  TransfersImmediatelyAvailableSubtotalTransactionType2 = "returned-transfer"
	TransfersImmediatelyAvailableSubtotalTransactionType2BalanceReserve                    TransfersImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve"
	TransfersImmediatelyAvailableSubtotalTransactionType2BalanceReserveReturn              TransfersImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve-return"
	TransfersImmediatelyAvailableSubtotalTransactionType2InvoiceRoundingCompensation       TransfersImmediatelyAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	TransfersImmediatelyAvailableSubtotalTransactionType2RollingReserveHold                TransfersImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	TransfersImmediatelyAvailableSubtotalTransactionType2RollingReserveRelease             TransfersImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	TransfersImmediatelyAvailableSubtotalTransactionType2BalanceCorrection                 TransfersImmediatelyAvailableSubtotalTransactionType2 = "balance-correction"
	TransfersImmediatelyAvailableSubtotalTransactionType2Repayment                         TransfersImmediatelyAvailableSubtotalTransactionType2 = "repayment"
	TransfersImmediatelyAvailableSubtotalTransactionType2Loan                              TransfersImmediatelyAvailableSubtotalTransactionType2 = "loan"
	TransfersImmediatelyAvailableSubtotalTransactionType2BalanceTopup                      TransfersImmediatelyAvailableSubtotalTransactionType2 = "balance-topup"
	TransfersImmediatelyAvailableSubtotalTransactionType2CashCollateralIssuance            TransfersImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	TransfersImmediatelyAvailableSubtotalTransactionType2CashCollateralRelease             TransfersImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-release"
	TransfersImmediatelyAvailableSubtotalTransactionType2PendingRollingReserve             TransfersImmediatelyAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	TransfersImmediatelyAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        TransfersImmediatelyAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	TransfersImmediatelyAvailableSubtotalTransactionType2HeldRollingReserve                TransfersImmediatelyAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	TransfersImmediatelyAvailableSubtotalTransactionType2ReleasedRollingReserve            TransfersImmediatelyAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e TransfersImmediatelyAvailableSubtotalTransactionType2) ToPointer() *TransfersImmediatelyAvailableSubtotalTransactionType2 {
	return &e
}
func (e *TransfersImmediatelyAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = TransfersImmediatelyAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersImmediatelyAvailableSubtotalTransactionType2: %v", v)
	}
}

type TransfersImmediatelyAvailableSubtotal2 struct {
	SubTotals []TransfersImmediatelyAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *TransfersImmediatelyAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *TransfersImmediatelyAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *TransfersImmediatelyAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *TransfersImmediatelyAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *TransfersImmediatelyAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *TransfersImmediatelyAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *TransfersImmediatelyAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *TransfersImmediatelyAvailableSubtotal2) GetSubTotals() []TransfersImmediatelyAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *TransfersImmediatelyAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *TransfersImmediatelyAvailableSubtotal2) GetMethod() *TransfersImmediatelyAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *TransfersImmediatelyAvailableSubtotal2) GetCardIssuer() *TransfersImmediatelyAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *TransfersImmediatelyAvailableSubtotal2) GetCardAudience() *TransfersImmediatelyAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *TransfersImmediatelyAvailableSubtotal2) GetCardRegion() *TransfersImmediatelyAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *TransfersImmediatelyAvailableSubtotal2) GetFeeType() *TransfersImmediatelyAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *TransfersImmediatelyAvailableSubtotal2) GetPrepaymentPartType() *TransfersImmediatelyAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *TransfersImmediatelyAvailableSubtotal2) GetTransactionType() *TransfersImmediatelyAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type TransfersImmediatelyAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *TransfersImmediatelyAvailableAmount     `json:"amount,omitempty"`
	Subtotals []TransfersImmediatelyAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *TransfersImmediatelyAvailable) GetAmount() *TransfersImmediatelyAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *TransfersImmediatelyAvailable) GetSubtotals() []TransfersImmediatelyAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// Transfers - Only available on `transaction-categories` grouping.
type Transfers struct {
	Pending              *TransfersPending              `json:"pending,omitempty"`
	MovedToAvailable     *TransfersMovedToAvailable     `json:"movedToAvailable,omitempty"`
	ImmediatelyAvailable *TransfersImmediatelyAvailable `json:"immediatelyAvailable,omitempty"`
}

func (o *Transfers) GetPending() *TransfersPending {
	if o == nil {
		return nil
	}
	return o.Pending
}

func (o *Transfers) GetMovedToAvailable() *TransfersMovedToAvailable {
	if o == nil {
		return nil
	}
	return o.MovedToAvailable
}

func (o *Transfers) GetImmediatelyAvailable() *TransfersImmediatelyAvailable {
	if o == nil {
		return nil
	}
	return o.ImmediatelyAvailable
}

// FeePrepaymentsPendingAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type FeePrepaymentsPendingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *FeePrepaymentsPendingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *FeePrepaymentsPendingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// FeePrepaymentsPendingSubTotalMethod1 - Payment type of the transactions
type FeePrepaymentsPendingSubTotalMethod1 string

const (
	FeePrepaymentsPendingSubTotalMethod1Alma              FeePrepaymentsPendingSubTotalMethod1 = "alma"
	FeePrepaymentsPendingSubTotalMethod1Bacs              FeePrepaymentsPendingSubTotalMethod1 = "bacs"
	FeePrepaymentsPendingSubTotalMethod1Applepay          FeePrepaymentsPendingSubTotalMethod1 = "applepay"
	FeePrepaymentsPendingSubTotalMethod1Bancomatpay       FeePrepaymentsPendingSubTotalMethod1 = "bancomatpay"
	FeePrepaymentsPendingSubTotalMethod1Bancontact        FeePrepaymentsPendingSubTotalMethod1 = "bancontact"
	FeePrepaymentsPendingSubTotalMethod1Banktransfer      FeePrepaymentsPendingSubTotalMethod1 = "banktransfer"
	FeePrepaymentsPendingSubTotalMethod1Belfius           FeePrepaymentsPendingSubTotalMethod1 = "belfius"
	FeePrepaymentsPendingSubTotalMethod1Billie            FeePrepaymentsPendingSubTotalMethod1 = "billie"
	FeePrepaymentsPendingSubTotalMethod1Bizum             FeePrepaymentsPendingSubTotalMethod1 = "bizum"
	FeePrepaymentsPendingSubTotalMethod1Bitcoin           FeePrepaymentsPendingSubTotalMethod1 = "bitcoin"
	FeePrepaymentsPendingSubTotalMethod1Blik              FeePrepaymentsPendingSubTotalMethod1 = "blik"
	FeePrepaymentsPendingSubTotalMethod1Creditcard        FeePrepaymentsPendingSubTotalMethod1 = "creditcard"
	FeePrepaymentsPendingSubTotalMethod1Directdebit       FeePrepaymentsPendingSubTotalMethod1 = "directdebit"
	FeePrepaymentsPendingSubTotalMethod1Eps               FeePrepaymentsPendingSubTotalMethod1 = "eps"
	FeePrepaymentsPendingSubTotalMethod1Giftcard          FeePrepaymentsPendingSubTotalMethod1 = "giftcard"
	FeePrepaymentsPendingSubTotalMethod1Giropay           FeePrepaymentsPendingSubTotalMethod1 = "giropay"
	FeePrepaymentsPendingSubTotalMethod1Googlepay         FeePrepaymentsPendingSubTotalMethod1 = "googlepay"
	FeePrepaymentsPendingSubTotalMethod1Ideal             FeePrepaymentsPendingSubTotalMethod1 = "ideal"
	FeePrepaymentsPendingSubTotalMethod1In3               FeePrepaymentsPendingSubTotalMethod1 = "in3"
	FeePrepaymentsPendingSubTotalMethod1Inghomepay        FeePrepaymentsPendingSubTotalMethod1 = "inghomepay"
	FeePrepaymentsPendingSubTotalMethod1Kbc               FeePrepaymentsPendingSubTotalMethod1 = "kbc"
	FeePrepaymentsPendingSubTotalMethod1Klarnapaylater    FeePrepaymentsPendingSubTotalMethod1 = "klarnapaylater"
	FeePrepaymentsPendingSubTotalMethod1Klarnapaynow      FeePrepaymentsPendingSubTotalMethod1 = "klarnapaynow"
	FeePrepaymentsPendingSubTotalMethod1Klarnasliceit     FeePrepaymentsPendingSubTotalMethod1 = "klarnasliceit"
	FeePrepaymentsPendingSubTotalMethod1Klarna            FeePrepaymentsPendingSubTotalMethod1 = "klarna"
	FeePrepaymentsPendingSubTotalMethod1Mbway             FeePrepaymentsPendingSubTotalMethod1 = "mbway"
	FeePrepaymentsPendingSubTotalMethod1Multibanco        FeePrepaymentsPendingSubTotalMethod1 = "multibanco"
	FeePrepaymentsPendingSubTotalMethod1Mybank            FeePrepaymentsPendingSubTotalMethod1 = "mybank"
	FeePrepaymentsPendingSubTotalMethod1Paybybank         FeePrepaymentsPendingSubTotalMethod1 = "paybybank"
	FeePrepaymentsPendingSubTotalMethod1Payconiq          FeePrepaymentsPendingSubTotalMethod1 = "payconiq"
	FeePrepaymentsPendingSubTotalMethod1Paypal            FeePrepaymentsPendingSubTotalMethod1 = "paypal"
	FeePrepaymentsPendingSubTotalMethod1Paysafecard       FeePrepaymentsPendingSubTotalMethod1 = "paysafecard"
	FeePrepaymentsPendingSubTotalMethod1Przelewy24        FeePrepaymentsPendingSubTotalMethod1 = "przelewy24"
	FeePrepaymentsPendingSubTotalMethod1Riverty           FeePrepaymentsPendingSubTotalMethod1 = "riverty"
	FeePrepaymentsPendingSubTotalMethod1Satispay          FeePrepaymentsPendingSubTotalMethod1 = "satispay"
	FeePrepaymentsPendingSubTotalMethod1Podiumcadeaukaart FeePrepaymentsPendingSubTotalMethod1 = "podiumcadeaukaart"
	FeePrepaymentsPendingSubTotalMethod1Pointofsale       FeePrepaymentsPendingSubTotalMethod1 = "pointofsale"
	FeePrepaymentsPendingSubTotalMethod1Sofort            FeePrepaymentsPendingSubTotalMethod1 = "sofort"
	FeePrepaymentsPendingSubTotalMethod1Swish             FeePrepaymentsPendingSubTotalMethod1 = "swish"
	FeePrepaymentsPendingSubTotalMethod1Trustly           FeePrepaymentsPendingSubTotalMethod1 = "trustly"
	FeePrepaymentsPendingSubTotalMethod1Twint             FeePrepaymentsPendingSubTotalMethod1 = "twint"
	FeePrepaymentsPendingSubTotalMethod1Voucher           FeePrepaymentsPendingSubTotalMethod1 = "voucher"
)

func (e FeePrepaymentsPendingSubTotalMethod1) ToPointer() *FeePrepaymentsPendingSubTotalMethod1 {
	return &e
}
func (e *FeePrepaymentsPendingSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = FeePrepaymentsPendingSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsPendingSubTotalMethod1: %v", v)
	}
}

// FeePrepaymentsPendingSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type FeePrepaymentsPendingSubTotalCardIssuer1 string

const (
	FeePrepaymentsPendingSubTotalCardIssuer1Amex          FeePrepaymentsPendingSubTotalCardIssuer1 = "amex"
	FeePrepaymentsPendingSubTotalCardIssuer1Maestro       FeePrepaymentsPendingSubTotalCardIssuer1 = "maestro"
	FeePrepaymentsPendingSubTotalCardIssuer1CarteBancaire FeePrepaymentsPendingSubTotalCardIssuer1 = "carte-bancaire"
	FeePrepaymentsPendingSubTotalCardIssuer1Other         FeePrepaymentsPendingSubTotalCardIssuer1 = "other"
)

func (e FeePrepaymentsPendingSubTotalCardIssuer1) ToPointer() *FeePrepaymentsPendingSubTotalCardIssuer1 {
	return &e
}
func (e *FeePrepaymentsPendingSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = FeePrepaymentsPendingSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsPendingSubTotalCardIssuer1: %v", v)
	}
}

// FeePrepaymentsPendingSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type FeePrepaymentsPendingSubTotalCardAudience1 string

const (
	FeePrepaymentsPendingSubTotalCardAudience1Corporate FeePrepaymentsPendingSubTotalCardAudience1 = "corporate"
	FeePrepaymentsPendingSubTotalCardAudience1Other     FeePrepaymentsPendingSubTotalCardAudience1 = "other"
)

func (e FeePrepaymentsPendingSubTotalCardAudience1) ToPointer() *FeePrepaymentsPendingSubTotalCardAudience1 {
	return &e
}
func (e *FeePrepaymentsPendingSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = FeePrepaymentsPendingSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsPendingSubTotalCardAudience1: %v", v)
	}
}

// FeePrepaymentsPendingSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type FeePrepaymentsPendingSubTotalCardRegion1 string

const (
	FeePrepaymentsPendingSubTotalCardRegion1IntraEea FeePrepaymentsPendingSubTotalCardRegion1 = "intra-eea"
	FeePrepaymentsPendingSubTotalCardRegion1IntraEu  FeePrepaymentsPendingSubTotalCardRegion1 = "intra-eu"
	FeePrepaymentsPendingSubTotalCardRegion1Domestic FeePrepaymentsPendingSubTotalCardRegion1 = "domestic"
	FeePrepaymentsPendingSubTotalCardRegion1Other    FeePrepaymentsPendingSubTotalCardRegion1 = "other"
)

func (e FeePrepaymentsPendingSubTotalCardRegion1) ToPointer() *FeePrepaymentsPendingSubTotalCardRegion1 {
	return &e
}
func (e *FeePrepaymentsPendingSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = FeePrepaymentsPendingSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsPendingSubTotalCardRegion1: %v", v)
	}
}

// FeePrepaymentsPendingSubTotalFeeType1 - Present when the transaction represents a fee.
type FeePrepaymentsPendingSubTotalFeeType1 string

const (
	FeePrepaymentsPendingSubTotalFeeType1PaymentFee                                        FeePrepaymentsPendingSubTotalFeeType1 = "payment-fee"
	FeePrepaymentsPendingSubTotalFeeType1DirectDebitFailureFee                             FeePrepaymentsPendingSubTotalFeeType1 = "direct-debit-failure-fee"
	FeePrepaymentsPendingSubTotalFeeType1UnauthorizedDirectDebitFee                        FeePrepaymentsPendingSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	FeePrepaymentsPendingSubTotalFeeType1BankChargedDirectDebitFailureFee                  FeePrepaymentsPendingSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	FeePrepaymentsPendingSubTotalFeeType1PartnerCommission                                 FeePrepaymentsPendingSubTotalFeeType1 = "partner-commission"
	FeePrepaymentsPendingSubTotalFeeType1ApplicationFee                                    FeePrepaymentsPendingSubTotalFeeType1 = "application-fee"
	FeePrepaymentsPendingSubTotalFeeType1CaptureFee                                        FeePrepaymentsPendingSubTotalFeeType1 = "capture-fee"
	FeePrepaymentsPendingSubTotalFeeType1RefundFee                                         FeePrepaymentsPendingSubTotalFeeType1 = "refund-fee"
	FeePrepaymentsPendingSubTotalFeeType1ChargebackFee                                     FeePrepaymentsPendingSubTotalFeeType1 = "chargeback-fee"
	FeePrepaymentsPendingSubTotalFeeType1PaymentNotificationFee                            FeePrepaymentsPendingSubTotalFeeType1 = "payment-notification-fee"
	FeePrepaymentsPendingSubTotalFeeType1TransferNotificationFee                           FeePrepaymentsPendingSubTotalFeeType1 = "transfer-notification-fee"
	FeePrepaymentsPendingSubTotalFeeType1PayoutFee                                         FeePrepaymentsPendingSubTotalFeeType1 = "payout-fee"
	FeePrepaymentsPendingSubTotalFeeType1FeeDiscount                                       FeePrepaymentsPendingSubTotalFeeType1 = "fee-discount"
	FeePrepaymentsPendingSubTotalFeeType1FeeReimbursement                                  FeePrepaymentsPendingSubTotalFeeType1 = "fee-reimbursement"
	FeePrepaymentsPendingSubTotalFeeType1PlatformVolumeFee                                 FeePrepaymentsPendingSubTotalFeeType1 = "platform-volume-fee"
	FeePrepaymentsPendingSubTotalFeeType1PlatformConnectedOrganizationsFee                 FeePrepaymentsPendingSubTotalFeeType1 = "platform-connected-organizations-fee"
	FeePrepaymentsPendingSubTotalFeeType1BalanceChargeFee                                  FeePrepaymentsPendingSubTotalFeeType1 = "balance-charge-fee"
	FeePrepaymentsPendingSubTotalFeeType1ThreedsAuthenticationAttemptFee                   FeePrepaymentsPendingSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	FeePrepaymentsPendingSubTotalFeeType1TerminalMonthlyFee                                FeePrepaymentsPendingSubTotalFeeType1 = "terminal-monthly-fee"
	FeePrepaymentsPendingSubTotalFeeType1AcceptanceRiskFee                                 FeePrepaymentsPendingSubTotalFeeType1 = "acceptance-risk-fee"
	FeePrepaymentsPendingSubTotalFeeType1TopUpFee                                          FeePrepaymentsPendingSubTotalFeeType1 = "top-up-fee"
	FeePrepaymentsPendingSubTotalFeeType1PaymentGatewayFee                                 FeePrepaymentsPendingSubTotalFeeType1 = "payment-gateway-fee"
	FeePrepaymentsPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   FeePrepaymentsPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	FeePrepaymentsPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee FeePrepaymentsPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	FeePrepaymentsPendingSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             FeePrepaymentsPendingSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	FeePrepaymentsPendingSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           FeePrepaymentsPendingSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	FeePrepaymentsPendingSubTotalFeeType1MinimumInvoiceAmountFee                           FeePrepaymentsPendingSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e FeePrepaymentsPendingSubTotalFeeType1) ToPointer() *FeePrepaymentsPendingSubTotalFeeType1 {
	return &e
}
func (e *FeePrepaymentsPendingSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = FeePrepaymentsPendingSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsPendingSubTotalFeeType1: %v", v)
	}
}

// FeePrepaymentsPendingSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type FeePrepaymentsPendingSubTotalPrepaymentPartType1 string

const (
	FeePrepaymentsPendingSubTotalPrepaymentPartType1Fee                     FeePrepaymentsPendingSubTotalPrepaymentPartType1 = "fee"
	FeePrepaymentsPendingSubTotalPrepaymentPartType1FeeReimbursement        FeePrepaymentsPendingSubTotalPrepaymentPartType1 = "fee-reimbursement"
	FeePrepaymentsPendingSubTotalPrepaymentPartType1FeeDiscount             FeePrepaymentsPendingSubTotalPrepaymentPartType1 = "fee-discount"
	FeePrepaymentsPendingSubTotalPrepaymentPartType1FeeVat                  FeePrepaymentsPendingSubTotalPrepaymentPartType1 = "fee-vat"
	FeePrepaymentsPendingSubTotalPrepaymentPartType1FeeRoundingCompensation FeePrepaymentsPendingSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e FeePrepaymentsPendingSubTotalPrepaymentPartType1) ToPointer() *FeePrepaymentsPendingSubTotalPrepaymentPartType1 {
	return &e
}
func (e *FeePrepaymentsPendingSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = FeePrepaymentsPendingSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsPendingSubTotalPrepaymentPartType1: %v", v)
	}
}

// FeePrepaymentsPendingSubTotalTransactionType1 - Represents the transaction type
type FeePrepaymentsPendingSubTotalTransactionType1 string

const (
	FeePrepaymentsPendingSubTotalTransactionType1Payment                           FeePrepaymentsPendingSubTotalTransactionType1 = "payment"
	FeePrepaymentsPendingSubTotalTransactionType1SplitPayment                      FeePrepaymentsPendingSubTotalTransactionType1 = "split-payment"
	FeePrepaymentsPendingSubTotalTransactionType1FailedPayment                     FeePrepaymentsPendingSubTotalTransactionType1 = "failed-payment"
	FeePrepaymentsPendingSubTotalTransactionType1FailedPlatformSplitPayment        FeePrepaymentsPendingSubTotalTransactionType1 = "failed-platform-split-payment"
	FeePrepaymentsPendingSubTotalTransactionType1FailedSplitPaymentCompensation    FeePrepaymentsPendingSubTotalTransactionType1 = "failed-split-payment-compensation"
	FeePrepaymentsPendingSubTotalTransactionType1Capture                           FeePrepaymentsPendingSubTotalTransactionType1 = "capture"
	FeePrepaymentsPendingSubTotalTransactionType1SplitTransaction                  FeePrepaymentsPendingSubTotalTransactionType1 = "split-transaction"
	FeePrepaymentsPendingSubTotalTransactionType1Refund                            FeePrepaymentsPendingSubTotalTransactionType1 = "refund"
	FeePrepaymentsPendingSubTotalTransactionType1PlatformPaymentRefund             FeePrepaymentsPendingSubTotalTransactionType1 = "platform-payment-refund"
	FeePrepaymentsPendingSubTotalTransactionType1ReturnedPlatformPaymentRefund     FeePrepaymentsPendingSubTotalTransactionType1 = "returned-platform-payment-refund"
	FeePrepaymentsPendingSubTotalTransactionType1RefundCompensation                FeePrepaymentsPendingSubTotalTransactionType1 = "refund-compensation"
	FeePrepaymentsPendingSubTotalTransactionType1ReturnedRefundCompensation        FeePrepaymentsPendingSubTotalTransactionType1 = "returned-refund-compensation"
	FeePrepaymentsPendingSubTotalTransactionType1ReturnedRefund                    FeePrepaymentsPendingSubTotalTransactionType1 = "returned-refund"
	FeePrepaymentsPendingSubTotalTransactionType1Chargeback                        FeePrepaymentsPendingSubTotalTransactionType1 = "chargeback"
	FeePrepaymentsPendingSubTotalTransactionType1ChargebackReversal                FeePrepaymentsPendingSubTotalTransactionType1 = "chargeback-reversal"
	FeePrepaymentsPendingSubTotalTransactionType1ChargebackCompensation            FeePrepaymentsPendingSubTotalTransactionType1 = "chargeback-compensation"
	FeePrepaymentsPendingSubTotalTransactionType1ReversedChargebackCompensation    FeePrepaymentsPendingSubTotalTransactionType1 = "reversed-chargeback-compensation"
	FeePrepaymentsPendingSubTotalTransactionType1PlatformPaymentChargeback         FeePrepaymentsPendingSubTotalTransactionType1 = "platform-payment-chargeback"
	FeePrepaymentsPendingSubTotalTransactionType1ReversedPlatformPaymentChargeback FeePrepaymentsPendingSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	FeePrepaymentsPendingSubTotalTransactionType1FeePrepayment                     FeePrepaymentsPendingSubTotalTransactionType1 = "fee-prepayment"
	FeePrepaymentsPendingSubTotalTransactionType1OutgoingTransfer                  FeePrepaymentsPendingSubTotalTransactionType1 = "outgoing-transfer"
	FeePrepaymentsPendingSubTotalTransactionType1IncomingTransfer                  FeePrepaymentsPendingSubTotalTransactionType1 = "incoming-transfer"
	FeePrepaymentsPendingSubTotalTransactionType1CanceledTransfer                  FeePrepaymentsPendingSubTotalTransactionType1 = "canceled-transfer"
	FeePrepaymentsPendingSubTotalTransactionType1ReturnedTransfer                  FeePrepaymentsPendingSubTotalTransactionType1 = "returned-transfer"
	FeePrepaymentsPendingSubTotalTransactionType1BalanceReserve                    FeePrepaymentsPendingSubTotalTransactionType1 = "balance-reserve"
	FeePrepaymentsPendingSubTotalTransactionType1BalanceReserveReturn              FeePrepaymentsPendingSubTotalTransactionType1 = "balance-reserve-return"
	FeePrepaymentsPendingSubTotalTransactionType1InvoiceRoundingCompensation       FeePrepaymentsPendingSubTotalTransactionType1 = "invoice-rounding-compensation"
	FeePrepaymentsPendingSubTotalTransactionType1RollingReserveHold                FeePrepaymentsPendingSubTotalTransactionType1 = "rolling-reserve-hold"
	FeePrepaymentsPendingSubTotalTransactionType1RollingReserveRelease             FeePrepaymentsPendingSubTotalTransactionType1 = "rolling-reserve-release"
	FeePrepaymentsPendingSubTotalTransactionType1BalanceCorrection                 FeePrepaymentsPendingSubTotalTransactionType1 = "balance-correction"
	FeePrepaymentsPendingSubTotalTransactionType1Repayment                         FeePrepaymentsPendingSubTotalTransactionType1 = "repayment"
	FeePrepaymentsPendingSubTotalTransactionType1Loan                              FeePrepaymentsPendingSubTotalTransactionType1 = "loan"
	FeePrepaymentsPendingSubTotalTransactionType1BalanceTopup                      FeePrepaymentsPendingSubTotalTransactionType1 = "balance-topup"
	FeePrepaymentsPendingSubTotalTransactionType1CashCollateralIssuance            FeePrepaymentsPendingSubTotalTransactionType1 = "cash-collateral-issuance';"
	FeePrepaymentsPendingSubTotalTransactionType1CashCollateralRelease             FeePrepaymentsPendingSubTotalTransactionType1 = "cash-collateral-release"
	FeePrepaymentsPendingSubTotalTransactionType1PendingRollingReserve             FeePrepaymentsPendingSubTotalTransactionType1 = "pending-rolling-reserve"
	FeePrepaymentsPendingSubTotalTransactionType1ToBeReleasedRollingReserve        FeePrepaymentsPendingSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	FeePrepaymentsPendingSubTotalTransactionType1HeldRollingReserve                FeePrepaymentsPendingSubTotalTransactionType1 = "held-rolling-reserve"
	FeePrepaymentsPendingSubTotalTransactionType1ReleasedRollingReserve            FeePrepaymentsPendingSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e FeePrepaymentsPendingSubTotalTransactionType1) ToPointer() *FeePrepaymentsPendingSubTotalTransactionType1 {
	return &e
}
func (e *FeePrepaymentsPendingSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = FeePrepaymentsPendingSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsPendingSubTotalTransactionType1: %v", v)
	}
}

type FeePrepaymentsPendingSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *FeePrepaymentsPendingSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *FeePrepaymentsPendingSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *FeePrepaymentsPendingSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *FeePrepaymentsPendingSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *FeePrepaymentsPendingSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *FeePrepaymentsPendingSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *FeePrepaymentsPendingSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *FeePrepaymentsPendingSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *FeePrepaymentsPendingSubTotal1) GetMethod() *FeePrepaymentsPendingSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *FeePrepaymentsPendingSubTotal1) GetCardIssuer() *FeePrepaymentsPendingSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *FeePrepaymentsPendingSubTotal1) GetCardAudience() *FeePrepaymentsPendingSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *FeePrepaymentsPendingSubTotal1) GetCardRegion() *FeePrepaymentsPendingSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *FeePrepaymentsPendingSubTotal1) GetFeeType() *FeePrepaymentsPendingSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *FeePrepaymentsPendingSubTotal1) GetPrepaymentPartType() *FeePrepaymentsPendingSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *FeePrepaymentsPendingSubTotal1) GetTransactionType() *FeePrepaymentsPendingSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// FeePrepaymentsPendingSubtotalMethod2 - Payment type of the transactions
type FeePrepaymentsPendingSubtotalMethod2 string

const (
	FeePrepaymentsPendingSubtotalMethod2Alma              FeePrepaymentsPendingSubtotalMethod2 = "alma"
	FeePrepaymentsPendingSubtotalMethod2Bacs              FeePrepaymentsPendingSubtotalMethod2 = "bacs"
	FeePrepaymentsPendingSubtotalMethod2Applepay          FeePrepaymentsPendingSubtotalMethod2 = "applepay"
	FeePrepaymentsPendingSubtotalMethod2Bancomatpay       FeePrepaymentsPendingSubtotalMethod2 = "bancomatpay"
	FeePrepaymentsPendingSubtotalMethod2Bancontact        FeePrepaymentsPendingSubtotalMethod2 = "bancontact"
	FeePrepaymentsPendingSubtotalMethod2Banktransfer      FeePrepaymentsPendingSubtotalMethod2 = "banktransfer"
	FeePrepaymentsPendingSubtotalMethod2Belfius           FeePrepaymentsPendingSubtotalMethod2 = "belfius"
	FeePrepaymentsPendingSubtotalMethod2Billie            FeePrepaymentsPendingSubtotalMethod2 = "billie"
	FeePrepaymentsPendingSubtotalMethod2Bizum             FeePrepaymentsPendingSubtotalMethod2 = "bizum"
	FeePrepaymentsPendingSubtotalMethod2Bitcoin           FeePrepaymentsPendingSubtotalMethod2 = "bitcoin"
	FeePrepaymentsPendingSubtotalMethod2Blik              FeePrepaymentsPendingSubtotalMethod2 = "blik"
	FeePrepaymentsPendingSubtotalMethod2Creditcard        FeePrepaymentsPendingSubtotalMethod2 = "creditcard"
	FeePrepaymentsPendingSubtotalMethod2Directdebit       FeePrepaymentsPendingSubtotalMethod2 = "directdebit"
	FeePrepaymentsPendingSubtotalMethod2Eps               FeePrepaymentsPendingSubtotalMethod2 = "eps"
	FeePrepaymentsPendingSubtotalMethod2Giftcard          FeePrepaymentsPendingSubtotalMethod2 = "giftcard"
	FeePrepaymentsPendingSubtotalMethod2Giropay           FeePrepaymentsPendingSubtotalMethod2 = "giropay"
	FeePrepaymentsPendingSubtotalMethod2Googlepay         FeePrepaymentsPendingSubtotalMethod2 = "googlepay"
	FeePrepaymentsPendingSubtotalMethod2Ideal             FeePrepaymentsPendingSubtotalMethod2 = "ideal"
	FeePrepaymentsPendingSubtotalMethod2In3               FeePrepaymentsPendingSubtotalMethod2 = "in3"
	FeePrepaymentsPendingSubtotalMethod2Inghomepay        FeePrepaymentsPendingSubtotalMethod2 = "inghomepay"
	FeePrepaymentsPendingSubtotalMethod2Kbc               FeePrepaymentsPendingSubtotalMethod2 = "kbc"
	FeePrepaymentsPendingSubtotalMethod2Klarnapaylater    FeePrepaymentsPendingSubtotalMethod2 = "klarnapaylater"
	FeePrepaymentsPendingSubtotalMethod2Klarnapaynow      FeePrepaymentsPendingSubtotalMethod2 = "klarnapaynow"
	FeePrepaymentsPendingSubtotalMethod2Klarnasliceit     FeePrepaymentsPendingSubtotalMethod2 = "klarnasliceit"
	FeePrepaymentsPendingSubtotalMethod2Klarna            FeePrepaymentsPendingSubtotalMethod2 = "klarna"
	FeePrepaymentsPendingSubtotalMethod2Mbway             FeePrepaymentsPendingSubtotalMethod2 = "mbway"
	FeePrepaymentsPendingSubtotalMethod2Multibanco        FeePrepaymentsPendingSubtotalMethod2 = "multibanco"
	FeePrepaymentsPendingSubtotalMethod2Mybank            FeePrepaymentsPendingSubtotalMethod2 = "mybank"
	FeePrepaymentsPendingSubtotalMethod2Paybybank         FeePrepaymentsPendingSubtotalMethod2 = "paybybank"
	FeePrepaymentsPendingSubtotalMethod2Payconiq          FeePrepaymentsPendingSubtotalMethod2 = "payconiq"
	FeePrepaymentsPendingSubtotalMethod2Paypal            FeePrepaymentsPendingSubtotalMethod2 = "paypal"
	FeePrepaymentsPendingSubtotalMethod2Paysafecard       FeePrepaymentsPendingSubtotalMethod2 = "paysafecard"
	FeePrepaymentsPendingSubtotalMethod2Przelewy24        FeePrepaymentsPendingSubtotalMethod2 = "przelewy24"
	FeePrepaymentsPendingSubtotalMethod2Riverty           FeePrepaymentsPendingSubtotalMethod2 = "riverty"
	FeePrepaymentsPendingSubtotalMethod2Satispay          FeePrepaymentsPendingSubtotalMethod2 = "satispay"
	FeePrepaymentsPendingSubtotalMethod2Podiumcadeaukaart FeePrepaymentsPendingSubtotalMethod2 = "podiumcadeaukaart"
	FeePrepaymentsPendingSubtotalMethod2Pointofsale       FeePrepaymentsPendingSubtotalMethod2 = "pointofsale"
	FeePrepaymentsPendingSubtotalMethod2Sofort            FeePrepaymentsPendingSubtotalMethod2 = "sofort"
	FeePrepaymentsPendingSubtotalMethod2Swish             FeePrepaymentsPendingSubtotalMethod2 = "swish"
	FeePrepaymentsPendingSubtotalMethod2Trustly           FeePrepaymentsPendingSubtotalMethod2 = "trustly"
	FeePrepaymentsPendingSubtotalMethod2Twint             FeePrepaymentsPendingSubtotalMethod2 = "twint"
	FeePrepaymentsPendingSubtotalMethod2Voucher           FeePrepaymentsPendingSubtotalMethod2 = "voucher"
)

func (e FeePrepaymentsPendingSubtotalMethod2) ToPointer() *FeePrepaymentsPendingSubtotalMethod2 {
	return &e
}
func (e *FeePrepaymentsPendingSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = FeePrepaymentsPendingSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsPendingSubtotalMethod2: %v", v)
	}
}

// FeePrepaymentsPendingSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type FeePrepaymentsPendingSubtotalCardIssuer2 string

const (
	FeePrepaymentsPendingSubtotalCardIssuer2Amex          FeePrepaymentsPendingSubtotalCardIssuer2 = "amex"
	FeePrepaymentsPendingSubtotalCardIssuer2Maestro       FeePrepaymentsPendingSubtotalCardIssuer2 = "maestro"
	FeePrepaymentsPendingSubtotalCardIssuer2CarteBancaire FeePrepaymentsPendingSubtotalCardIssuer2 = "carte-bancaire"
	FeePrepaymentsPendingSubtotalCardIssuer2Other         FeePrepaymentsPendingSubtotalCardIssuer2 = "other"
)

func (e FeePrepaymentsPendingSubtotalCardIssuer2) ToPointer() *FeePrepaymentsPendingSubtotalCardIssuer2 {
	return &e
}
func (e *FeePrepaymentsPendingSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = FeePrepaymentsPendingSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsPendingSubtotalCardIssuer2: %v", v)
	}
}

// FeePrepaymentsPendingSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type FeePrepaymentsPendingSubtotalCardAudience2 string

const (
	FeePrepaymentsPendingSubtotalCardAudience2Corporate FeePrepaymentsPendingSubtotalCardAudience2 = "corporate"
	FeePrepaymentsPendingSubtotalCardAudience2Other     FeePrepaymentsPendingSubtotalCardAudience2 = "other"
)

func (e FeePrepaymentsPendingSubtotalCardAudience2) ToPointer() *FeePrepaymentsPendingSubtotalCardAudience2 {
	return &e
}
func (e *FeePrepaymentsPendingSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = FeePrepaymentsPendingSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsPendingSubtotalCardAudience2: %v", v)
	}
}

// FeePrepaymentsPendingSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type FeePrepaymentsPendingSubtotalCardRegion2 string

const (
	FeePrepaymentsPendingSubtotalCardRegion2IntraEea FeePrepaymentsPendingSubtotalCardRegion2 = "intra-eea"
	FeePrepaymentsPendingSubtotalCardRegion2IntraEu  FeePrepaymentsPendingSubtotalCardRegion2 = "intra-eu"
	FeePrepaymentsPendingSubtotalCardRegion2Domestic FeePrepaymentsPendingSubtotalCardRegion2 = "domestic"
	FeePrepaymentsPendingSubtotalCardRegion2Other    FeePrepaymentsPendingSubtotalCardRegion2 = "other"
)

func (e FeePrepaymentsPendingSubtotalCardRegion2) ToPointer() *FeePrepaymentsPendingSubtotalCardRegion2 {
	return &e
}
func (e *FeePrepaymentsPendingSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = FeePrepaymentsPendingSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsPendingSubtotalCardRegion2: %v", v)
	}
}

// FeePrepaymentsPendingSubtotalFeeType2 - Present when the transaction represents a fee.
type FeePrepaymentsPendingSubtotalFeeType2 string

const (
	FeePrepaymentsPendingSubtotalFeeType2PaymentFee                                        FeePrepaymentsPendingSubtotalFeeType2 = "payment-fee"
	FeePrepaymentsPendingSubtotalFeeType2DirectDebitFailureFee                             FeePrepaymentsPendingSubtotalFeeType2 = "direct-debit-failure-fee"
	FeePrepaymentsPendingSubtotalFeeType2UnauthorizedDirectDebitFee                        FeePrepaymentsPendingSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	FeePrepaymentsPendingSubtotalFeeType2BankChargedDirectDebitFailureFee                  FeePrepaymentsPendingSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	FeePrepaymentsPendingSubtotalFeeType2PartnerCommission                                 FeePrepaymentsPendingSubtotalFeeType2 = "partner-commission"
	FeePrepaymentsPendingSubtotalFeeType2ApplicationFee                                    FeePrepaymentsPendingSubtotalFeeType2 = "application-fee"
	FeePrepaymentsPendingSubtotalFeeType2CaptureFee                                        FeePrepaymentsPendingSubtotalFeeType2 = "capture-fee"
	FeePrepaymentsPendingSubtotalFeeType2RefundFee                                         FeePrepaymentsPendingSubtotalFeeType2 = "refund-fee"
	FeePrepaymentsPendingSubtotalFeeType2ChargebackFee                                     FeePrepaymentsPendingSubtotalFeeType2 = "chargeback-fee"
	FeePrepaymentsPendingSubtotalFeeType2PaymentNotificationFee                            FeePrepaymentsPendingSubtotalFeeType2 = "payment-notification-fee"
	FeePrepaymentsPendingSubtotalFeeType2TransferNotificationFee                           FeePrepaymentsPendingSubtotalFeeType2 = "transfer-notification-fee"
	FeePrepaymentsPendingSubtotalFeeType2PayoutFee                                         FeePrepaymentsPendingSubtotalFeeType2 = "payout-fee"
	FeePrepaymentsPendingSubtotalFeeType2FeeDiscount                                       FeePrepaymentsPendingSubtotalFeeType2 = "fee-discount"
	FeePrepaymentsPendingSubtotalFeeType2FeeReimbursement                                  FeePrepaymentsPendingSubtotalFeeType2 = "fee-reimbursement"
	FeePrepaymentsPendingSubtotalFeeType2PlatformVolumeFee                                 FeePrepaymentsPendingSubtotalFeeType2 = "platform-volume-fee"
	FeePrepaymentsPendingSubtotalFeeType2PlatformConnectedOrganizationsFee                 FeePrepaymentsPendingSubtotalFeeType2 = "platform-connected-organizations-fee"
	FeePrepaymentsPendingSubtotalFeeType2BalanceChargeFee                                  FeePrepaymentsPendingSubtotalFeeType2 = "balance-charge-fee"
	FeePrepaymentsPendingSubtotalFeeType2ThreedsAuthenticationAttemptFee                   FeePrepaymentsPendingSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	FeePrepaymentsPendingSubtotalFeeType2TerminalMonthlyFee                                FeePrepaymentsPendingSubtotalFeeType2 = "terminal-monthly-fee"
	FeePrepaymentsPendingSubtotalFeeType2AcceptanceRiskFee                                 FeePrepaymentsPendingSubtotalFeeType2 = "acceptance-risk-fee"
	FeePrepaymentsPendingSubtotalFeeType2TopUpFee                                          FeePrepaymentsPendingSubtotalFeeType2 = "top-up-fee"
	FeePrepaymentsPendingSubtotalFeeType2PaymentGatewayFee                                 FeePrepaymentsPendingSubtotalFeeType2 = "payment-gateway-fee"
	FeePrepaymentsPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   FeePrepaymentsPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	FeePrepaymentsPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee FeePrepaymentsPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	FeePrepaymentsPendingSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             FeePrepaymentsPendingSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	FeePrepaymentsPendingSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           FeePrepaymentsPendingSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	FeePrepaymentsPendingSubtotalFeeType2MinimumInvoiceAmountFee                           FeePrepaymentsPendingSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e FeePrepaymentsPendingSubtotalFeeType2) ToPointer() *FeePrepaymentsPendingSubtotalFeeType2 {
	return &e
}
func (e *FeePrepaymentsPendingSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = FeePrepaymentsPendingSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsPendingSubtotalFeeType2: %v", v)
	}
}

// FeePrepaymentsPendingSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type FeePrepaymentsPendingSubtotalPrepaymentPartType2 string

const (
	FeePrepaymentsPendingSubtotalPrepaymentPartType2Fee                     FeePrepaymentsPendingSubtotalPrepaymentPartType2 = "fee"
	FeePrepaymentsPendingSubtotalPrepaymentPartType2FeeReimbursement        FeePrepaymentsPendingSubtotalPrepaymentPartType2 = "fee-reimbursement"
	FeePrepaymentsPendingSubtotalPrepaymentPartType2FeeDiscount             FeePrepaymentsPendingSubtotalPrepaymentPartType2 = "fee-discount"
	FeePrepaymentsPendingSubtotalPrepaymentPartType2FeeVat                  FeePrepaymentsPendingSubtotalPrepaymentPartType2 = "fee-vat"
	FeePrepaymentsPendingSubtotalPrepaymentPartType2FeeRoundingCompensation FeePrepaymentsPendingSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e FeePrepaymentsPendingSubtotalPrepaymentPartType2) ToPointer() *FeePrepaymentsPendingSubtotalPrepaymentPartType2 {
	return &e
}
func (e *FeePrepaymentsPendingSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = FeePrepaymentsPendingSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsPendingSubtotalPrepaymentPartType2: %v", v)
	}
}

// FeePrepaymentsPendingSubtotalTransactionType2 - Represents the transaction type
type FeePrepaymentsPendingSubtotalTransactionType2 string

const (
	FeePrepaymentsPendingSubtotalTransactionType2Payment                           FeePrepaymentsPendingSubtotalTransactionType2 = "payment"
	FeePrepaymentsPendingSubtotalTransactionType2SplitPayment                      FeePrepaymentsPendingSubtotalTransactionType2 = "split-payment"
	FeePrepaymentsPendingSubtotalTransactionType2FailedPayment                     FeePrepaymentsPendingSubtotalTransactionType2 = "failed-payment"
	FeePrepaymentsPendingSubtotalTransactionType2FailedPlatformSplitPayment        FeePrepaymentsPendingSubtotalTransactionType2 = "failed-platform-split-payment"
	FeePrepaymentsPendingSubtotalTransactionType2FailedSplitPaymentCompensation    FeePrepaymentsPendingSubtotalTransactionType2 = "failed-split-payment-compensation"
	FeePrepaymentsPendingSubtotalTransactionType2Capture                           FeePrepaymentsPendingSubtotalTransactionType2 = "capture"
	FeePrepaymentsPendingSubtotalTransactionType2SplitTransaction                  FeePrepaymentsPendingSubtotalTransactionType2 = "split-transaction"
	FeePrepaymentsPendingSubtotalTransactionType2Refund                            FeePrepaymentsPendingSubtotalTransactionType2 = "refund"
	FeePrepaymentsPendingSubtotalTransactionType2PlatformPaymentRefund             FeePrepaymentsPendingSubtotalTransactionType2 = "platform-payment-refund"
	FeePrepaymentsPendingSubtotalTransactionType2ReturnedPlatformPaymentRefund     FeePrepaymentsPendingSubtotalTransactionType2 = "returned-platform-payment-refund"
	FeePrepaymentsPendingSubtotalTransactionType2RefundCompensation                FeePrepaymentsPendingSubtotalTransactionType2 = "refund-compensation"
	FeePrepaymentsPendingSubtotalTransactionType2ReturnedRefundCompensation        FeePrepaymentsPendingSubtotalTransactionType2 = "returned-refund-compensation"
	FeePrepaymentsPendingSubtotalTransactionType2ReturnedRefund                    FeePrepaymentsPendingSubtotalTransactionType2 = "returned-refund"
	FeePrepaymentsPendingSubtotalTransactionType2Chargeback                        FeePrepaymentsPendingSubtotalTransactionType2 = "chargeback"
	FeePrepaymentsPendingSubtotalTransactionType2ChargebackReversal                FeePrepaymentsPendingSubtotalTransactionType2 = "chargeback-reversal"
	FeePrepaymentsPendingSubtotalTransactionType2ChargebackCompensation            FeePrepaymentsPendingSubtotalTransactionType2 = "chargeback-compensation"
	FeePrepaymentsPendingSubtotalTransactionType2ReversedChargebackCompensation    FeePrepaymentsPendingSubtotalTransactionType2 = "reversed-chargeback-compensation"
	FeePrepaymentsPendingSubtotalTransactionType2PlatformPaymentChargeback         FeePrepaymentsPendingSubtotalTransactionType2 = "platform-payment-chargeback"
	FeePrepaymentsPendingSubtotalTransactionType2ReversedPlatformPaymentChargeback FeePrepaymentsPendingSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	FeePrepaymentsPendingSubtotalTransactionType2FeePrepayment                     FeePrepaymentsPendingSubtotalTransactionType2 = "fee-prepayment"
	FeePrepaymentsPendingSubtotalTransactionType2OutgoingTransfer                  FeePrepaymentsPendingSubtotalTransactionType2 = "outgoing-transfer"
	FeePrepaymentsPendingSubtotalTransactionType2IncomingTransfer                  FeePrepaymentsPendingSubtotalTransactionType2 = "incoming-transfer"
	FeePrepaymentsPendingSubtotalTransactionType2CanceledTransfer                  FeePrepaymentsPendingSubtotalTransactionType2 = "canceled-transfer"
	FeePrepaymentsPendingSubtotalTransactionType2ReturnedTransfer                  FeePrepaymentsPendingSubtotalTransactionType2 = "returned-transfer"
	FeePrepaymentsPendingSubtotalTransactionType2BalanceReserve                    FeePrepaymentsPendingSubtotalTransactionType2 = "balance-reserve"
	FeePrepaymentsPendingSubtotalTransactionType2BalanceReserveReturn              FeePrepaymentsPendingSubtotalTransactionType2 = "balance-reserve-return"
	FeePrepaymentsPendingSubtotalTransactionType2InvoiceRoundingCompensation       FeePrepaymentsPendingSubtotalTransactionType2 = "invoice-rounding-compensation"
	FeePrepaymentsPendingSubtotalTransactionType2RollingReserveHold                FeePrepaymentsPendingSubtotalTransactionType2 = "rolling-reserve-hold"
	FeePrepaymentsPendingSubtotalTransactionType2RollingReserveRelease             FeePrepaymentsPendingSubtotalTransactionType2 = "rolling-reserve-release"
	FeePrepaymentsPendingSubtotalTransactionType2BalanceCorrection                 FeePrepaymentsPendingSubtotalTransactionType2 = "balance-correction"
	FeePrepaymentsPendingSubtotalTransactionType2Repayment                         FeePrepaymentsPendingSubtotalTransactionType2 = "repayment"
	FeePrepaymentsPendingSubtotalTransactionType2Loan                              FeePrepaymentsPendingSubtotalTransactionType2 = "loan"
	FeePrepaymentsPendingSubtotalTransactionType2BalanceTopup                      FeePrepaymentsPendingSubtotalTransactionType2 = "balance-topup"
	FeePrepaymentsPendingSubtotalTransactionType2CashCollateralIssuance            FeePrepaymentsPendingSubtotalTransactionType2 = "cash-collateral-issuance';"
	FeePrepaymentsPendingSubtotalTransactionType2CashCollateralRelease             FeePrepaymentsPendingSubtotalTransactionType2 = "cash-collateral-release"
	FeePrepaymentsPendingSubtotalTransactionType2PendingRollingReserve             FeePrepaymentsPendingSubtotalTransactionType2 = "pending-rolling-reserve"
	FeePrepaymentsPendingSubtotalTransactionType2ToBeReleasedRollingReserve        FeePrepaymentsPendingSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	FeePrepaymentsPendingSubtotalTransactionType2HeldRollingReserve                FeePrepaymentsPendingSubtotalTransactionType2 = "held-rolling-reserve"
	FeePrepaymentsPendingSubtotalTransactionType2ReleasedRollingReserve            FeePrepaymentsPendingSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e FeePrepaymentsPendingSubtotalTransactionType2) ToPointer() *FeePrepaymentsPendingSubtotalTransactionType2 {
	return &e
}
func (e *FeePrepaymentsPendingSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = FeePrepaymentsPendingSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsPendingSubtotalTransactionType2: %v", v)
	}
}

type FeePrepaymentsPendingSubtotal2 struct {
	SubTotals []FeePrepaymentsPendingSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *FeePrepaymentsPendingSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *FeePrepaymentsPendingSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *FeePrepaymentsPendingSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *FeePrepaymentsPendingSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *FeePrepaymentsPendingSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *FeePrepaymentsPendingSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *FeePrepaymentsPendingSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *FeePrepaymentsPendingSubtotal2) GetSubTotals() []FeePrepaymentsPendingSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *FeePrepaymentsPendingSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *FeePrepaymentsPendingSubtotal2) GetMethod() *FeePrepaymentsPendingSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *FeePrepaymentsPendingSubtotal2) GetCardIssuer() *FeePrepaymentsPendingSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *FeePrepaymentsPendingSubtotal2) GetCardAudience() *FeePrepaymentsPendingSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *FeePrepaymentsPendingSubtotal2) GetCardRegion() *FeePrepaymentsPendingSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *FeePrepaymentsPendingSubtotal2) GetFeeType() *FeePrepaymentsPendingSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *FeePrepaymentsPendingSubtotal2) GetPrepaymentPartType() *FeePrepaymentsPendingSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *FeePrepaymentsPendingSubtotal2) GetTransactionType() *FeePrepaymentsPendingSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type FeePrepaymentsPending struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *FeePrepaymentsPendingAmount     `json:"amount,omitempty"`
	Subtotals []FeePrepaymentsPendingSubtotal2 `json:"subtotals,omitempty"`
}

func (o *FeePrepaymentsPending) GetAmount() *FeePrepaymentsPendingAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *FeePrepaymentsPending) GetSubtotals() []FeePrepaymentsPendingSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// FeePrepaymentsMovedToAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type FeePrepaymentsMovedToAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *FeePrepaymentsMovedToAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *FeePrepaymentsMovedToAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// FeePrepaymentsMovedToAvailableSubTotalMethod1 - Payment type of the transactions
type FeePrepaymentsMovedToAvailableSubTotalMethod1 string

const (
	FeePrepaymentsMovedToAvailableSubTotalMethod1Alma              FeePrepaymentsMovedToAvailableSubTotalMethod1 = "alma"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Bacs              FeePrepaymentsMovedToAvailableSubTotalMethod1 = "bacs"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Applepay          FeePrepaymentsMovedToAvailableSubTotalMethod1 = "applepay"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Bancomatpay       FeePrepaymentsMovedToAvailableSubTotalMethod1 = "bancomatpay"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Bancontact        FeePrepaymentsMovedToAvailableSubTotalMethod1 = "bancontact"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Banktransfer      FeePrepaymentsMovedToAvailableSubTotalMethod1 = "banktransfer"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Belfius           FeePrepaymentsMovedToAvailableSubTotalMethod1 = "belfius"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Billie            FeePrepaymentsMovedToAvailableSubTotalMethod1 = "billie"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Bizum             FeePrepaymentsMovedToAvailableSubTotalMethod1 = "bizum"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Bitcoin           FeePrepaymentsMovedToAvailableSubTotalMethod1 = "bitcoin"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Blik              FeePrepaymentsMovedToAvailableSubTotalMethod1 = "blik"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Creditcard        FeePrepaymentsMovedToAvailableSubTotalMethod1 = "creditcard"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Directdebit       FeePrepaymentsMovedToAvailableSubTotalMethod1 = "directdebit"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Eps               FeePrepaymentsMovedToAvailableSubTotalMethod1 = "eps"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Giftcard          FeePrepaymentsMovedToAvailableSubTotalMethod1 = "giftcard"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Giropay           FeePrepaymentsMovedToAvailableSubTotalMethod1 = "giropay"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Googlepay         FeePrepaymentsMovedToAvailableSubTotalMethod1 = "googlepay"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Ideal             FeePrepaymentsMovedToAvailableSubTotalMethod1 = "ideal"
	FeePrepaymentsMovedToAvailableSubTotalMethod1In3               FeePrepaymentsMovedToAvailableSubTotalMethod1 = "in3"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Inghomepay        FeePrepaymentsMovedToAvailableSubTotalMethod1 = "inghomepay"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Kbc               FeePrepaymentsMovedToAvailableSubTotalMethod1 = "kbc"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Klarnapaylater    FeePrepaymentsMovedToAvailableSubTotalMethod1 = "klarnapaylater"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Klarnapaynow      FeePrepaymentsMovedToAvailableSubTotalMethod1 = "klarnapaynow"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Klarnasliceit     FeePrepaymentsMovedToAvailableSubTotalMethod1 = "klarnasliceit"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Klarna            FeePrepaymentsMovedToAvailableSubTotalMethod1 = "klarna"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Mbway             FeePrepaymentsMovedToAvailableSubTotalMethod1 = "mbway"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Multibanco        FeePrepaymentsMovedToAvailableSubTotalMethod1 = "multibanco"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Mybank            FeePrepaymentsMovedToAvailableSubTotalMethod1 = "mybank"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Paybybank         FeePrepaymentsMovedToAvailableSubTotalMethod1 = "paybybank"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Payconiq          FeePrepaymentsMovedToAvailableSubTotalMethod1 = "payconiq"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Paypal            FeePrepaymentsMovedToAvailableSubTotalMethod1 = "paypal"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Paysafecard       FeePrepaymentsMovedToAvailableSubTotalMethod1 = "paysafecard"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Przelewy24        FeePrepaymentsMovedToAvailableSubTotalMethod1 = "przelewy24"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Riverty           FeePrepaymentsMovedToAvailableSubTotalMethod1 = "riverty"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Satispay          FeePrepaymentsMovedToAvailableSubTotalMethod1 = "satispay"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Podiumcadeaukaart FeePrepaymentsMovedToAvailableSubTotalMethod1 = "podiumcadeaukaart"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Pointofsale       FeePrepaymentsMovedToAvailableSubTotalMethod1 = "pointofsale"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Sofort            FeePrepaymentsMovedToAvailableSubTotalMethod1 = "sofort"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Swish             FeePrepaymentsMovedToAvailableSubTotalMethod1 = "swish"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Trustly           FeePrepaymentsMovedToAvailableSubTotalMethod1 = "trustly"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Twint             FeePrepaymentsMovedToAvailableSubTotalMethod1 = "twint"
	FeePrepaymentsMovedToAvailableSubTotalMethod1Voucher           FeePrepaymentsMovedToAvailableSubTotalMethod1 = "voucher"
)

func (e FeePrepaymentsMovedToAvailableSubTotalMethod1) ToPointer() *FeePrepaymentsMovedToAvailableSubTotalMethod1 {
	return &e
}
func (e *FeePrepaymentsMovedToAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = FeePrepaymentsMovedToAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsMovedToAvailableSubTotalMethod1: %v", v)
	}
}

// FeePrepaymentsMovedToAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type FeePrepaymentsMovedToAvailableSubTotalCardIssuer1 string

const (
	FeePrepaymentsMovedToAvailableSubTotalCardIssuer1Amex          FeePrepaymentsMovedToAvailableSubTotalCardIssuer1 = "amex"
	FeePrepaymentsMovedToAvailableSubTotalCardIssuer1Maestro       FeePrepaymentsMovedToAvailableSubTotalCardIssuer1 = "maestro"
	FeePrepaymentsMovedToAvailableSubTotalCardIssuer1CarteBancaire FeePrepaymentsMovedToAvailableSubTotalCardIssuer1 = "carte-bancaire"
	FeePrepaymentsMovedToAvailableSubTotalCardIssuer1Other         FeePrepaymentsMovedToAvailableSubTotalCardIssuer1 = "other"
)

func (e FeePrepaymentsMovedToAvailableSubTotalCardIssuer1) ToPointer() *FeePrepaymentsMovedToAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *FeePrepaymentsMovedToAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = FeePrepaymentsMovedToAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsMovedToAvailableSubTotalCardIssuer1: %v", v)
	}
}

// FeePrepaymentsMovedToAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type FeePrepaymentsMovedToAvailableSubTotalCardAudience1 string

const (
	FeePrepaymentsMovedToAvailableSubTotalCardAudience1Corporate FeePrepaymentsMovedToAvailableSubTotalCardAudience1 = "corporate"
	FeePrepaymentsMovedToAvailableSubTotalCardAudience1Other     FeePrepaymentsMovedToAvailableSubTotalCardAudience1 = "other"
)

func (e FeePrepaymentsMovedToAvailableSubTotalCardAudience1) ToPointer() *FeePrepaymentsMovedToAvailableSubTotalCardAudience1 {
	return &e
}
func (e *FeePrepaymentsMovedToAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = FeePrepaymentsMovedToAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsMovedToAvailableSubTotalCardAudience1: %v", v)
	}
}

// FeePrepaymentsMovedToAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type FeePrepaymentsMovedToAvailableSubTotalCardRegion1 string

const (
	FeePrepaymentsMovedToAvailableSubTotalCardRegion1IntraEea FeePrepaymentsMovedToAvailableSubTotalCardRegion1 = "intra-eea"
	FeePrepaymentsMovedToAvailableSubTotalCardRegion1IntraEu  FeePrepaymentsMovedToAvailableSubTotalCardRegion1 = "intra-eu"
	FeePrepaymentsMovedToAvailableSubTotalCardRegion1Domestic FeePrepaymentsMovedToAvailableSubTotalCardRegion1 = "domestic"
	FeePrepaymentsMovedToAvailableSubTotalCardRegion1Other    FeePrepaymentsMovedToAvailableSubTotalCardRegion1 = "other"
)

func (e FeePrepaymentsMovedToAvailableSubTotalCardRegion1) ToPointer() *FeePrepaymentsMovedToAvailableSubTotalCardRegion1 {
	return &e
}
func (e *FeePrepaymentsMovedToAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = FeePrepaymentsMovedToAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsMovedToAvailableSubTotalCardRegion1: %v", v)
	}
}

// FeePrepaymentsMovedToAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type FeePrepaymentsMovedToAvailableSubTotalFeeType1 string

const (
	FeePrepaymentsMovedToAvailableSubTotalFeeType1PaymentFee                                        FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "payment-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1DirectDebitFailureFee                             FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1PartnerCommission                                 FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "partner-commission"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1ApplicationFee                                    FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "application-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1CaptureFee                                        FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "capture-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1RefundFee                                         FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "refund-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1ChargebackFee                                     FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "chargeback-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1PaymentNotificationFee                            FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "payment-notification-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1TransferNotificationFee                           FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "transfer-notification-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1PayoutFee                                         FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "payout-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1FeeDiscount                                       FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "fee-discount"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1FeeReimbursement                                  FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "fee-reimbursement"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1PlatformVolumeFee                                 FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "platform-volume-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1BalanceChargeFee                                  FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "balance-charge-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1TerminalMonthlyFee                                FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1AcceptanceRiskFee                                 FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1TopUpFee                                          FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "top-up-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1PaymentGatewayFee                                 FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "payment-gateway-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	FeePrepaymentsMovedToAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           FeePrepaymentsMovedToAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e FeePrepaymentsMovedToAvailableSubTotalFeeType1) ToPointer() *FeePrepaymentsMovedToAvailableSubTotalFeeType1 {
	return &e
}
func (e *FeePrepaymentsMovedToAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = FeePrepaymentsMovedToAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsMovedToAvailableSubTotalFeeType1: %v", v)
	}
}

// FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1 string

const (
	FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1Fee                     FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1 = "fee"
	FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1FeeReimbursement        FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1FeeDiscount             FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1FeeVat                  FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1) ToPointer() *FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// FeePrepaymentsMovedToAvailableSubTotalTransactionType1 - Represents the transaction type
type FeePrepaymentsMovedToAvailableSubTotalTransactionType1 string

const (
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1Payment                           FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "payment"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1SplitPayment                      FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "split-payment"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1FailedPayment                     FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "failed-payment"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1FailedPlatformSplitPayment        FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1Capture                           FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "capture"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1SplitTransaction                  FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "split-transaction"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1Refund                            FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "refund"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1PlatformPaymentRefund             FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "platform-payment-refund"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1RefundCompensation                FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "refund-compensation"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1ReturnedRefundCompensation        FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1ReturnedRefund                    FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "returned-refund"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1Chargeback                        FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "chargeback"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1ChargebackReversal                FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "chargeback-reversal"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1ChargebackCompensation            FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "chargeback-compensation"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1ReversedChargebackCompensation    FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1PlatformPaymentChargeback         FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1FeePrepayment                     FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "fee-prepayment"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1OutgoingTransfer                  FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "outgoing-transfer"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1IncomingTransfer                  FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "incoming-transfer"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1CanceledTransfer                  FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "canceled-transfer"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1ReturnedTransfer                  FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "returned-transfer"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1BalanceReserve                    FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "balance-reserve"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1BalanceReserveReturn              FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "balance-reserve-return"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1InvoiceRoundingCompensation       FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1RollingReserveHold                FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1RollingReserveRelease             FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1BalanceCorrection                 FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "balance-correction"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1Repayment                         FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "repayment"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1Loan                              FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "loan"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1BalanceTopup                      FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "balance-topup"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1CashCollateralIssuance            FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1CashCollateralRelease             FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "cash-collateral-release"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1PendingRollingReserve             FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1HeldRollingReserve                FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	FeePrepaymentsMovedToAvailableSubTotalTransactionType1ReleasedRollingReserve            FeePrepaymentsMovedToAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e FeePrepaymentsMovedToAvailableSubTotalTransactionType1) ToPointer() *FeePrepaymentsMovedToAvailableSubTotalTransactionType1 {
	return &e
}
func (e *FeePrepaymentsMovedToAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = FeePrepaymentsMovedToAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsMovedToAvailableSubTotalTransactionType1: %v", v)
	}
}

type FeePrepaymentsMovedToAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *FeePrepaymentsMovedToAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *FeePrepaymentsMovedToAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *FeePrepaymentsMovedToAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *FeePrepaymentsMovedToAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *FeePrepaymentsMovedToAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *FeePrepaymentsMovedToAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *FeePrepaymentsMovedToAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *FeePrepaymentsMovedToAvailableSubTotal1) GetMethod() *FeePrepaymentsMovedToAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *FeePrepaymentsMovedToAvailableSubTotal1) GetCardIssuer() *FeePrepaymentsMovedToAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *FeePrepaymentsMovedToAvailableSubTotal1) GetCardAudience() *FeePrepaymentsMovedToAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *FeePrepaymentsMovedToAvailableSubTotal1) GetCardRegion() *FeePrepaymentsMovedToAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *FeePrepaymentsMovedToAvailableSubTotal1) GetFeeType() *FeePrepaymentsMovedToAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *FeePrepaymentsMovedToAvailableSubTotal1) GetPrepaymentPartType() *FeePrepaymentsMovedToAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *FeePrepaymentsMovedToAvailableSubTotal1) GetTransactionType() *FeePrepaymentsMovedToAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// FeePrepaymentsMovedToAvailableSubtotalMethod2 - Payment type of the transactions
type FeePrepaymentsMovedToAvailableSubtotalMethod2 string

const (
	FeePrepaymentsMovedToAvailableSubtotalMethod2Alma              FeePrepaymentsMovedToAvailableSubtotalMethod2 = "alma"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Bacs              FeePrepaymentsMovedToAvailableSubtotalMethod2 = "bacs"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Applepay          FeePrepaymentsMovedToAvailableSubtotalMethod2 = "applepay"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Bancomatpay       FeePrepaymentsMovedToAvailableSubtotalMethod2 = "bancomatpay"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Bancontact        FeePrepaymentsMovedToAvailableSubtotalMethod2 = "bancontact"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Banktransfer      FeePrepaymentsMovedToAvailableSubtotalMethod2 = "banktransfer"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Belfius           FeePrepaymentsMovedToAvailableSubtotalMethod2 = "belfius"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Billie            FeePrepaymentsMovedToAvailableSubtotalMethod2 = "billie"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Bizum             FeePrepaymentsMovedToAvailableSubtotalMethod2 = "bizum"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Bitcoin           FeePrepaymentsMovedToAvailableSubtotalMethod2 = "bitcoin"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Blik              FeePrepaymentsMovedToAvailableSubtotalMethod2 = "blik"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Creditcard        FeePrepaymentsMovedToAvailableSubtotalMethod2 = "creditcard"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Directdebit       FeePrepaymentsMovedToAvailableSubtotalMethod2 = "directdebit"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Eps               FeePrepaymentsMovedToAvailableSubtotalMethod2 = "eps"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Giftcard          FeePrepaymentsMovedToAvailableSubtotalMethod2 = "giftcard"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Giropay           FeePrepaymentsMovedToAvailableSubtotalMethod2 = "giropay"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Googlepay         FeePrepaymentsMovedToAvailableSubtotalMethod2 = "googlepay"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Ideal             FeePrepaymentsMovedToAvailableSubtotalMethod2 = "ideal"
	FeePrepaymentsMovedToAvailableSubtotalMethod2In3               FeePrepaymentsMovedToAvailableSubtotalMethod2 = "in3"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Inghomepay        FeePrepaymentsMovedToAvailableSubtotalMethod2 = "inghomepay"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Kbc               FeePrepaymentsMovedToAvailableSubtotalMethod2 = "kbc"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Klarnapaylater    FeePrepaymentsMovedToAvailableSubtotalMethod2 = "klarnapaylater"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Klarnapaynow      FeePrepaymentsMovedToAvailableSubtotalMethod2 = "klarnapaynow"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Klarnasliceit     FeePrepaymentsMovedToAvailableSubtotalMethod2 = "klarnasliceit"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Klarna            FeePrepaymentsMovedToAvailableSubtotalMethod2 = "klarna"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Mbway             FeePrepaymentsMovedToAvailableSubtotalMethod2 = "mbway"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Multibanco        FeePrepaymentsMovedToAvailableSubtotalMethod2 = "multibanco"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Mybank            FeePrepaymentsMovedToAvailableSubtotalMethod2 = "mybank"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Paybybank         FeePrepaymentsMovedToAvailableSubtotalMethod2 = "paybybank"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Payconiq          FeePrepaymentsMovedToAvailableSubtotalMethod2 = "payconiq"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Paypal            FeePrepaymentsMovedToAvailableSubtotalMethod2 = "paypal"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Paysafecard       FeePrepaymentsMovedToAvailableSubtotalMethod2 = "paysafecard"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Przelewy24        FeePrepaymentsMovedToAvailableSubtotalMethod2 = "przelewy24"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Riverty           FeePrepaymentsMovedToAvailableSubtotalMethod2 = "riverty"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Satispay          FeePrepaymentsMovedToAvailableSubtotalMethod2 = "satispay"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Podiumcadeaukaart FeePrepaymentsMovedToAvailableSubtotalMethod2 = "podiumcadeaukaart"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Pointofsale       FeePrepaymentsMovedToAvailableSubtotalMethod2 = "pointofsale"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Sofort            FeePrepaymentsMovedToAvailableSubtotalMethod2 = "sofort"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Swish             FeePrepaymentsMovedToAvailableSubtotalMethod2 = "swish"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Trustly           FeePrepaymentsMovedToAvailableSubtotalMethod2 = "trustly"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Twint             FeePrepaymentsMovedToAvailableSubtotalMethod2 = "twint"
	FeePrepaymentsMovedToAvailableSubtotalMethod2Voucher           FeePrepaymentsMovedToAvailableSubtotalMethod2 = "voucher"
)

func (e FeePrepaymentsMovedToAvailableSubtotalMethod2) ToPointer() *FeePrepaymentsMovedToAvailableSubtotalMethod2 {
	return &e
}
func (e *FeePrepaymentsMovedToAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = FeePrepaymentsMovedToAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsMovedToAvailableSubtotalMethod2: %v", v)
	}
}

// FeePrepaymentsMovedToAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type FeePrepaymentsMovedToAvailableSubtotalCardIssuer2 string

const (
	FeePrepaymentsMovedToAvailableSubtotalCardIssuer2Amex          FeePrepaymentsMovedToAvailableSubtotalCardIssuer2 = "amex"
	FeePrepaymentsMovedToAvailableSubtotalCardIssuer2Maestro       FeePrepaymentsMovedToAvailableSubtotalCardIssuer2 = "maestro"
	FeePrepaymentsMovedToAvailableSubtotalCardIssuer2CarteBancaire FeePrepaymentsMovedToAvailableSubtotalCardIssuer2 = "carte-bancaire"
	FeePrepaymentsMovedToAvailableSubtotalCardIssuer2Other         FeePrepaymentsMovedToAvailableSubtotalCardIssuer2 = "other"
)

func (e FeePrepaymentsMovedToAvailableSubtotalCardIssuer2) ToPointer() *FeePrepaymentsMovedToAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *FeePrepaymentsMovedToAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = FeePrepaymentsMovedToAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsMovedToAvailableSubtotalCardIssuer2: %v", v)
	}
}

// FeePrepaymentsMovedToAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type FeePrepaymentsMovedToAvailableSubtotalCardAudience2 string

const (
	FeePrepaymentsMovedToAvailableSubtotalCardAudience2Corporate FeePrepaymentsMovedToAvailableSubtotalCardAudience2 = "corporate"
	FeePrepaymentsMovedToAvailableSubtotalCardAudience2Other     FeePrepaymentsMovedToAvailableSubtotalCardAudience2 = "other"
)

func (e FeePrepaymentsMovedToAvailableSubtotalCardAudience2) ToPointer() *FeePrepaymentsMovedToAvailableSubtotalCardAudience2 {
	return &e
}
func (e *FeePrepaymentsMovedToAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = FeePrepaymentsMovedToAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsMovedToAvailableSubtotalCardAudience2: %v", v)
	}
}

// FeePrepaymentsMovedToAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type FeePrepaymentsMovedToAvailableSubtotalCardRegion2 string

const (
	FeePrepaymentsMovedToAvailableSubtotalCardRegion2IntraEea FeePrepaymentsMovedToAvailableSubtotalCardRegion2 = "intra-eea"
	FeePrepaymentsMovedToAvailableSubtotalCardRegion2IntraEu  FeePrepaymentsMovedToAvailableSubtotalCardRegion2 = "intra-eu"
	FeePrepaymentsMovedToAvailableSubtotalCardRegion2Domestic FeePrepaymentsMovedToAvailableSubtotalCardRegion2 = "domestic"
	FeePrepaymentsMovedToAvailableSubtotalCardRegion2Other    FeePrepaymentsMovedToAvailableSubtotalCardRegion2 = "other"
)

func (e FeePrepaymentsMovedToAvailableSubtotalCardRegion2) ToPointer() *FeePrepaymentsMovedToAvailableSubtotalCardRegion2 {
	return &e
}
func (e *FeePrepaymentsMovedToAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = FeePrepaymentsMovedToAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsMovedToAvailableSubtotalCardRegion2: %v", v)
	}
}

// FeePrepaymentsMovedToAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type FeePrepaymentsMovedToAvailableSubtotalFeeType2 string

const (
	FeePrepaymentsMovedToAvailableSubtotalFeeType2PaymentFee                                        FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "payment-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2DirectDebitFailureFee                             FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2PartnerCommission                                 FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "partner-commission"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2ApplicationFee                                    FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "application-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2CaptureFee                                        FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "capture-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2RefundFee                                         FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "refund-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2ChargebackFee                                     FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "chargeback-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2PaymentNotificationFee                            FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "payment-notification-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2TransferNotificationFee                           FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "transfer-notification-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2PayoutFee                                         FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "payout-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2FeeDiscount                                       FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "fee-discount"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2FeeReimbursement                                  FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "fee-reimbursement"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2PlatformVolumeFee                                 FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "platform-volume-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2BalanceChargeFee                                  FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "balance-charge-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2TerminalMonthlyFee                                FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2AcceptanceRiskFee                                 FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2TopUpFee                                          FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "top-up-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2PaymentGatewayFee                                 FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "payment-gateway-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	FeePrepaymentsMovedToAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           FeePrepaymentsMovedToAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e FeePrepaymentsMovedToAvailableSubtotalFeeType2) ToPointer() *FeePrepaymentsMovedToAvailableSubtotalFeeType2 {
	return &e
}
func (e *FeePrepaymentsMovedToAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = FeePrepaymentsMovedToAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsMovedToAvailableSubtotalFeeType2: %v", v)
	}
}

// FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2 string

const (
	FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2Fee                     FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2 = "fee"
	FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2FeeReimbursement        FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2FeeDiscount             FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2FeeVat                  FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2) ToPointer() *FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// FeePrepaymentsMovedToAvailableSubtotalTransactionType2 - Represents the transaction type
type FeePrepaymentsMovedToAvailableSubtotalTransactionType2 string

const (
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2Payment                           FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "payment"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2SplitPayment                      FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "split-payment"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2FailedPayment                     FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "failed-payment"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2FailedPlatformSplitPayment        FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2Capture                           FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "capture"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2SplitTransaction                  FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "split-transaction"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2Refund                            FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "refund"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2PlatformPaymentRefund             FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "platform-payment-refund"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2RefundCompensation                FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "refund-compensation"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2ReturnedRefundCompensation        FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2ReturnedRefund                    FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "returned-refund"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2Chargeback                        FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "chargeback"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2ChargebackReversal                FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "chargeback-reversal"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2ChargebackCompensation            FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "chargeback-compensation"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2ReversedChargebackCompensation    FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2PlatformPaymentChargeback         FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2FeePrepayment                     FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "fee-prepayment"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2OutgoingTransfer                  FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "outgoing-transfer"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2IncomingTransfer                  FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "incoming-transfer"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2CanceledTransfer                  FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "canceled-transfer"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2ReturnedTransfer                  FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "returned-transfer"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2BalanceReserve                    FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "balance-reserve"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2BalanceReserveReturn              FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "balance-reserve-return"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2InvoiceRoundingCompensation       FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2RollingReserveHold                FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2RollingReserveRelease             FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2BalanceCorrection                 FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "balance-correction"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2Repayment                         FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "repayment"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2Loan                              FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "loan"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2BalanceTopup                      FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "balance-topup"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2CashCollateralIssuance            FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2CashCollateralRelease             FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "cash-collateral-release"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2PendingRollingReserve             FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2HeldRollingReserve                FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	FeePrepaymentsMovedToAvailableSubtotalTransactionType2ReleasedRollingReserve            FeePrepaymentsMovedToAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e FeePrepaymentsMovedToAvailableSubtotalTransactionType2) ToPointer() *FeePrepaymentsMovedToAvailableSubtotalTransactionType2 {
	return &e
}
func (e *FeePrepaymentsMovedToAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = FeePrepaymentsMovedToAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsMovedToAvailableSubtotalTransactionType2: %v", v)
	}
}

type FeePrepaymentsMovedToAvailableSubtotal2 struct {
	SubTotals []FeePrepaymentsMovedToAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *FeePrepaymentsMovedToAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *FeePrepaymentsMovedToAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *FeePrepaymentsMovedToAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *FeePrepaymentsMovedToAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *FeePrepaymentsMovedToAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *FeePrepaymentsMovedToAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *FeePrepaymentsMovedToAvailableSubtotal2) GetSubTotals() []FeePrepaymentsMovedToAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *FeePrepaymentsMovedToAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *FeePrepaymentsMovedToAvailableSubtotal2) GetMethod() *FeePrepaymentsMovedToAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *FeePrepaymentsMovedToAvailableSubtotal2) GetCardIssuer() *FeePrepaymentsMovedToAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *FeePrepaymentsMovedToAvailableSubtotal2) GetCardAudience() *FeePrepaymentsMovedToAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *FeePrepaymentsMovedToAvailableSubtotal2) GetCardRegion() *FeePrepaymentsMovedToAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *FeePrepaymentsMovedToAvailableSubtotal2) GetFeeType() *FeePrepaymentsMovedToAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *FeePrepaymentsMovedToAvailableSubtotal2) GetPrepaymentPartType() *FeePrepaymentsMovedToAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *FeePrepaymentsMovedToAvailableSubtotal2) GetTransactionType() *FeePrepaymentsMovedToAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type FeePrepaymentsMovedToAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *FeePrepaymentsMovedToAvailableAmount     `json:"amount,omitempty"`
	Subtotals []FeePrepaymentsMovedToAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *FeePrepaymentsMovedToAvailable) GetAmount() *FeePrepaymentsMovedToAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *FeePrepaymentsMovedToAvailable) GetSubtotals() []FeePrepaymentsMovedToAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// FeePrepaymentsImmediatelyAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type FeePrepaymentsImmediatelyAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *FeePrepaymentsImmediatelyAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *FeePrepaymentsImmediatelyAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// FeePrepaymentsImmediatelyAvailableSubTotalMethod1 - Payment type of the transactions
type FeePrepaymentsImmediatelyAvailableSubTotalMethod1 string

const (
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Alma              FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "alma"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Bacs              FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "bacs"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Applepay          FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "applepay"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Bancomatpay       FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "bancomatpay"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Bancontact        FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "bancontact"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Banktransfer      FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "banktransfer"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Belfius           FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "belfius"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Billie            FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "billie"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Bizum             FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "bizum"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Bitcoin           FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "bitcoin"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Blik              FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "blik"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Creditcard        FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "creditcard"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Directdebit       FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "directdebit"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Eps               FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "eps"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Giftcard          FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "giftcard"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Giropay           FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "giropay"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Googlepay         FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "googlepay"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Ideal             FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "ideal"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1In3               FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "in3"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Inghomepay        FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "inghomepay"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Kbc               FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "kbc"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Klarnapaylater    FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "klarnapaylater"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Klarnapaynow      FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "klarnapaynow"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Klarnasliceit     FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "klarnasliceit"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Klarna            FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "klarna"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Mbway             FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "mbway"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Multibanco        FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "multibanco"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Mybank            FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "mybank"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Paybybank         FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "paybybank"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Payconiq          FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "payconiq"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Paypal            FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "paypal"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Paysafecard       FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "paysafecard"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Przelewy24        FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "przelewy24"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Riverty           FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "riverty"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Satispay          FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "satispay"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Podiumcadeaukaart FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "podiumcadeaukaart"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Pointofsale       FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "pointofsale"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Sofort            FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "sofort"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Swish             FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "swish"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Trustly           FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "trustly"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Twint             FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "twint"
	FeePrepaymentsImmediatelyAvailableSubTotalMethod1Voucher           FeePrepaymentsImmediatelyAvailableSubTotalMethod1 = "voucher"
)

func (e FeePrepaymentsImmediatelyAvailableSubTotalMethod1) ToPointer() *FeePrepaymentsImmediatelyAvailableSubTotalMethod1 {
	return &e
}
func (e *FeePrepaymentsImmediatelyAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = FeePrepaymentsImmediatelyAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsImmediatelyAvailableSubTotalMethod1: %v", v)
	}
}

// FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1 string

const (
	FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1Amex          FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1 = "amex"
	FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1Maestro       FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1 = "maestro"
	FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1CarteBancaire FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1 = "carte-bancaire"
	FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1Other         FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1 = "other"
)

func (e FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1) ToPointer() *FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1: %v", v)
	}
}

// FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1 string

const (
	FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1Corporate FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1 = "corporate"
	FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1Other     FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1 = "other"
)

func (e FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1) ToPointer() *FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1 {
	return &e
}
func (e *FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1: %v", v)
	}
}

// FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1 string

const (
	FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1IntraEea FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1 = "intra-eea"
	FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1IntraEu  FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1 = "intra-eu"
	FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1Domestic FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1 = "domestic"
	FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1Other    FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1 = "other"
)

func (e FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1) ToPointer() *FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1 {
	return &e
}
func (e *FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1: %v", v)
	}
}

// FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 string

const (
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1PaymentFee                                        FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "payment-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1DirectDebitFailureFee                             FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1PartnerCommission                                 FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "partner-commission"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1ApplicationFee                                    FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "application-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1CaptureFee                                        FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "capture-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1RefundFee                                         FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "refund-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1ChargebackFee                                     FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "chargeback-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1PaymentNotificationFee                            FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "payment-notification-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1TransferNotificationFee                           FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "transfer-notification-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1PayoutFee                                         FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "payout-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1FeeDiscount                                       FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "fee-discount"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1FeeReimbursement                                  FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "fee-reimbursement"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1PlatformVolumeFee                                 FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "platform-volume-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1BalanceChargeFee                                  FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "balance-charge-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1TerminalMonthlyFee                                FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1AcceptanceRiskFee                                 FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1TopUpFee                                          FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "top-up-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1PaymentGatewayFee                                 FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "payment-gateway-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	FeePrepaymentsImmediatelyAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e FeePrepaymentsImmediatelyAvailableSubTotalFeeType1) ToPointer() *FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 {
	return &e
}
func (e *FeePrepaymentsImmediatelyAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = FeePrepaymentsImmediatelyAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsImmediatelyAvailableSubTotalFeeType1: %v", v)
	}
}

// FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 string

const (
	FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1Fee                     FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee"
	FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1FeeReimbursement        FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1FeeDiscount             FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1FeeVat                  FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1) ToPointer() *FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 - Represents the transaction type
type FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 string

const (
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1Payment                           FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "payment"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1SplitPayment                      FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "split-payment"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1FailedPayment                     FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "failed-payment"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1FailedPlatformSplitPayment        FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1Capture                           FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "capture"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1SplitTransaction                  FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "split-transaction"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1Refund                            FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "refund"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1PlatformPaymentRefund             FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-refund"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1RefundCompensation                FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "refund-compensation"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1ReturnedRefundCompensation        FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1ReturnedRefund                    FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "returned-refund"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1Chargeback                        FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "chargeback"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1ChargebackReversal                FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "chargeback-reversal"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1ChargebackCompensation            FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "chargeback-compensation"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1ReversedChargebackCompensation    FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1PlatformPaymentChargeback         FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1FeePrepayment                     FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "fee-prepayment"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1OutgoingTransfer                  FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "outgoing-transfer"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1IncomingTransfer                  FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "incoming-transfer"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1CanceledTransfer                  FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "canceled-transfer"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1ReturnedTransfer                  FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "returned-transfer"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1BalanceReserve                    FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1BalanceReserveReturn              FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve-return"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1InvoiceRoundingCompensation       FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1RollingReserveHold                FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1RollingReserveRelease             FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1BalanceCorrection                 FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "balance-correction"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1Repayment                         FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "repayment"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1Loan                              FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "loan"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1BalanceTopup                      FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "balance-topup"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1CashCollateralIssuance            FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1CashCollateralRelease             FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-release"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1PendingRollingReserve             FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1HeldRollingReserve                FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1ReleasedRollingReserve            FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1) ToPointer() *FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 {
	return &e
}
func (e *FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1: %v", v)
	}
}

type FeePrepaymentsImmediatelyAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *FeePrepaymentsImmediatelyAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *FeePrepaymentsImmediatelyAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *FeePrepaymentsImmediatelyAvailableSubTotal1) GetMethod() *FeePrepaymentsImmediatelyAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *FeePrepaymentsImmediatelyAvailableSubTotal1) GetCardIssuer() *FeePrepaymentsImmediatelyAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *FeePrepaymentsImmediatelyAvailableSubTotal1) GetCardAudience() *FeePrepaymentsImmediatelyAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *FeePrepaymentsImmediatelyAvailableSubTotal1) GetCardRegion() *FeePrepaymentsImmediatelyAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *FeePrepaymentsImmediatelyAvailableSubTotal1) GetFeeType() *FeePrepaymentsImmediatelyAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *FeePrepaymentsImmediatelyAvailableSubTotal1) GetPrepaymentPartType() *FeePrepaymentsImmediatelyAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *FeePrepaymentsImmediatelyAvailableSubTotal1) GetTransactionType() *FeePrepaymentsImmediatelyAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// FeePrepaymentsImmediatelyAvailableSubtotalMethod2 - Payment type of the transactions
type FeePrepaymentsImmediatelyAvailableSubtotalMethod2 string

const (
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Alma              FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "alma"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Bacs              FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "bacs"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Applepay          FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "applepay"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Bancomatpay       FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "bancomatpay"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Bancontact        FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "bancontact"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Banktransfer      FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "banktransfer"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Belfius           FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "belfius"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Billie            FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "billie"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Bizum             FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "bizum"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Bitcoin           FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "bitcoin"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Blik              FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "blik"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Creditcard        FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "creditcard"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Directdebit       FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "directdebit"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Eps               FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "eps"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Giftcard          FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "giftcard"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Giropay           FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "giropay"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Googlepay         FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "googlepay"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Ideal             FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "ideal"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2In3               FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "in3"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Inghomepay        FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "inghomepay"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Kbc               FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "kbc"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Klarnapaylater    FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "klarnapaylater"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Klarnapaynow      FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "klarnapaynow"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Klarnasliceit     FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "klarnasliceit"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Klarna            FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "klarna"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Mbway             FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "mbway"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Multibanco        FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "multibanco"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Mybank            FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "mybank"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Paybybank         FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "paybybank"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Payconiq          FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "payconiq"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Paypal            FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "paypal"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Paysafecard       FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "paysafecard"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Przelewy24        FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "przelewy24"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Riverty           FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "riverty"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Satispay          FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "satispay"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Podiumcadeaukaart FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "podiumcadeaukaart"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Pointofsale       FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "pointofsale"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Sofort            FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "sofort"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Swish             FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "swish"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Trustly           FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "trustly"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Twint             FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "twint"
	FeePrepaymentsImmediatelyAvailableSubtotalMethod2Voucher           FeePrepaymentsImmediatelyAvailableSubtotalMethod2 = "voucher"
)

func (e FeePrepaymentsImmediatelyAvailableSubtotalMethod2) ToPointer() *FeePrepaymentsImmediatelyAvailableSubtotalMethod2 {
	return &e
}
func (e *FeePrepaymentsImmediatelyAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = FeePrepaymentsImmediatelyAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsImmediatelyAvailableSubtotalMethod2: %v", v)
	}
}

// FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2 string

const (
	FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2Amex          FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2 = "amex"
	FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2Maestro       FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2 = "maestro"
	FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2CarteBancaire FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2 = "carte-bancaire"
	FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2Other         FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2 = "other"
)

func (e FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2) ToPointer() *FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2: %v", v)
	}
}

// FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2 string

const (
	FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2Corporate FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2 = "corporate"
	FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2Other     FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2 = "other"
)

func (e FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2) ToPointer() *FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2 {
	return &e
}
func (e *FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2: %v", v)
	}
}

// FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2 string

const (
	FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2IntraEea FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2 = "intra-eea"
	FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2IntraEu  FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2 = "intra-eu"
	FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2Domestic FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2 = "domestic"
	FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2Other    FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2 = "other"
)

func (e FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2) ToPointer() *FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2 {
	return &e
}
func (e *FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2: %v", v)
	}
}

// FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 string

const (
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2PaymentFee                                        FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "payment-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2DirectDebitFailureFee                             FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2PartnerCommission                                 FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "partner-commission"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2ApplicationFee                                    FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "application-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2CaptureFee                                        FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "capture-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2RefundFee                                         FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "refund-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2ChargebackFee                                     FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "chargeback-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2PaymentNotificationFee                            FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "payment-notification-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2TransferNotificationFee                           FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "transfer-notification-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2PayoutFee                                         FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "payout-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2FeeDiscount                                       FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "fee-discount"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2FeeReimbursement                                  FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "fee-reimbursement"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2PlatformVolumeFee                                 FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "platform-volume-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2BalanceChargeFee                                  FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "balance-charge-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2TerminalMonthlyFee                                FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2AcceptanceRiskFee                                 FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2TopUpFee                                          FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "top-up-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2PaymentGatewayFee                                 FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "payment-gateway-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	FeePrepaymentsImmediatelyAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e FeePrepaymentsImmediatelyAvailableSubtotalFeeType2) ToPointer() *FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 {
	return &e
}
func (e *FeePrepaymentsImmediatelyAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = FeePrepaymentsImmediatelyAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsImmediatelyAvailableSubtotalFeeType2: %v", v)
	}
}

// FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 string

const (
	FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2Fee                     FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee"
	FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2FeeReimbursement        FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2FeeDiscount             FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2FeeVat                  FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2) ToPointer() *FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 - Represents the transaction type
type FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 string

const (
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2Payment                           FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "payment"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2SplitPayment                      FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "split-payment"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2FailedPayment                     FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "failed-payment"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2FailedPlatformSplitPayment        FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2Capture                           FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "capture"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2SplitTransaction                  FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "split-transaction"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2Refund                            FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "refund"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2PlatformPaymentRefund             FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-refund"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2RefundCompensation                FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "refund-compensation"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2ReturnedRefundCompensation        FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2ReturnedRefund                    FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "returned-refund"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2Chargeback                        FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "chargeback"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2ChargebackReversal                FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "chargeback-reversal"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2ChargebackCompensation            FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "chargeback-compensation"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2ReversedChargebackCompensation    FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2PlatformPaymentChargeback         FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2FeePrepayment                     FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "fee-prepayment"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2OutgoingTransfer                  FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "outgoing-transfer"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2IncomingTransfer                  FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "incoming-transfer"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2CanceledTransfer                  FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "canceled-transfer"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2ReturnedTransfer                  FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "returned-transfer"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2BalanceReserve                    FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2BalanceReserveReturn              FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve-return"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2InvoiceRoundingCompensation       FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2RollingReserveHold                FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2RollingReserveRelease             FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2BalanceCorrection                 FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "balance-correction"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2Repayment                         FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "repayment"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2Loan                              FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "loan"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2BalanceTopup                      FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "balance-topup"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2CashCollateralIssuance            FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2CashCollateralRelease             FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-release"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2PendingRollingReserve             FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2HeldRollingReserve                FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2ReleasedRollingReserve            FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2) ToPointer() *FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 {
	return &e
}
func (e *FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2: %v", v)
	}
}

type FeePrepaymentsImmediatelyAvailableSubtotal2 struct {
	SubTotals []FeePrepaymentsImmediatelyAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *FeePrepaymentsImmediatelyAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *FeePrepaymentsImmediatelyAvailableSubtotal2) GetSubTotals() []FeePrepaymentsImmediatelyAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *FeePrepaymentsImmediatelyAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *FeePrepaymentsImmediatelyAvailableSubtotal2) GetMethod() *FeePrepaymentsImmediatelyAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *FeePrepaymentsImmediatelyAvailableSubtotal2) GetCardIssuer() *FeePrepaymentsImmediatelyAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *FeePrepaymentsImmediatelyAvailableSubtotal2) GetCardAudience() *FeePrepaymentsImmediatelyAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *FeePrepaymentsImmediatelyAvailableSubtotal2) GetCardRegion() *FeePrepaymentsImmediatelyAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *FeePrepaymentsImmediatelyAvailableSubtotal2) GetFeeType() *FeePrepaymentsImmediatelyAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *FeePrepaymentsImmediatelyAvailableSubtotal2) GetPrepaymentPartType() *FeePrepaymentsImmediatelyAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *FeePrepaymentsImmediatelyAvailableSubtotal2) GetTransactionType() *FeePrepaymentsImmediatelyAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type FeePrepaymentsImmediatelyAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *FeePrepaymentsImmediatelyAvailableAmount     `json:"amount,omitempty"`
	Subtotals []FeePrepaymentsImmediatelyAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *FeePrepaymentsImmediatelyAvailable) GetAmount() *FeePrepaymentsImmediatelyAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *FeePrepaymentsImmediatelyAvailable) GetSubtotals() []FeePrepaymentsImmediatelyAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// FeePrepayments - Only available on `transaction-categories` grouping.
type FeePrepayments struct {
	Pending              *FeePrepaymentsPending              `json:"pending,omitempty"`
	MovedToAvailable     *FeePrepaymentsMovedToAvailable     `json:"movedToAvailable,omitempty"`
	ImmediatelyAvailable *FeePrepaymentsImmediatelyAvailable `json:"immediatelyAvailable,omitempty"`
}

func (o *FeePrepayments) GetPending() *FeePrepaymentsPending {
	if o == nil {
		return nil
	}
	return o.Pending
}

func (o *FeePrepayments) GetMovedToAvailable() *FeePrepaymentsMovedToAvailable {
	if o == nil {
		return nil
	}
	return o.MovedToAvailable
}

func (o *FeePrepayments) GetImmediatelyAvailable() *FeePrepaymentsImmediatelyAvailable {
	if o == nil {
		return nil
	}
	return o.ImmediatelyAvailable
}

// CorrectionsPendingAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type CorrectionsPendingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CorrectionsPendingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CorrectionsPendingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CorrectionsPendingSubTotalMethod1 - Payment type of the transactions
type CorrectionsPendingSubTotalMethod1 string

const (
	CorrectionsPendingSubTotalMethod1Alma              CorrectionsPendingSubTotalMethod1 = "alma"
	CorrectionsPendingSubTotalMethod1Bacs              CorrectionsPendingSubTotalMethod1 = "bacs"
	CorrectionsPendingSubTotalMethod1Applepay          CorrectionsPendingSubTotalMethod1 = "applepay"
	CorrectionsPendingSubTotalMethod1Bancomatpay       CorrectionsPendingSubTotalMethod1 = "bancomatpay"
	CorrectionsPendingSubTotalMethod1Bancontact        CorrectionsPendingSubTotalMethod1 = "bancontact"
	CorrectionsPendingSubTotalMethod1Banktransfer      CorrectionsPendingSubTotalMethod1 = "banktransfer"
	CorrectionsPendingSubTotalMethod1Belfius           CorrectionsPendingSubTotalMethod1 = "belfius"
	CorrectionsPendingSubTotalMethod1Billie            CorrectionsPendingSubTotalMethod1 = "billie"
	CorrectionsPendingSubTotalMethod1Bizum             CorrectionsPendingSubTotalMethod1 = "bizum"
	CorrectionsPendingSubTotalMethod1Bitcoin           CorrectionsPendingSubTotalMethod1 = "bitcoin"
	CorrectionsPendingSubTotalMethod1Blik              CorrectionsPendingSubTotalMethod1 = "blik"
	CorrectionsPendingSubTotalMethod1Creditcard        CorrectionsPendingSubTotalMethod1 = "creditcard"
	CorrectionsPendingSubTotalMethod1Directdebit       CorrectionsPendingSubTotalMethod1 = "directdebit"
	CorrectionsPendingSubTotalMethod1Eps               CorrectionsPendingSubTotalMethod1 = "eps"
	CorrectionsPendingSubTotalMethod1Giftcard          CorrectionsPendingSubTotalMethod1 = "giftcard"
	CorrectionsPendingSubTotalMethod1Giropay           CorrectionsPendingSubTotalMethod1 = "giropay"
	CorrectionsPendingSubTotalMethod1Googlepay         CorrectionsPendingSubTotalMethod1 = "googlepay"
	CorrectionsPendingSubTotalMethod1Ideal             CorrectionsPendingSubTotalMethod1 = "ideal"
	CorrectionsPendingSubTotalMethod1In3               CorrectionsPendingSubTotalMethod1 = "in3"
	CorrectionsPendingSubTotalMethod1Inghomepay        CorrectionsPendingSubTotalMethod1 = "inghomepay"
	CorrectionsPendingSubTotalMethod1Kbc               CorrectionsPendingSubTotalMethod1 = "kbc"
	CorrectionsPendingSubTotalMethod1Klarnapaylater    CorrectionsPendingSubTotalMethod1 = "klarnapaylater"
	CorrectionsPendingSubTotalMethod1Klarnapaynow      CorrectionsPendingSubTotalMethod1 = "klarnapaynow"
	CorrectionsPendingSubTotalMethod1Klarnasliceit     CorrectionsPendingSubTotalMethod1 = "klarnasliceit"
	CorrectionsPendingSubTotalMethod1Klarna            CorrectionsPendingSubTotalMethod1 = "klarna"
	CorrectionsPendingSubTotalMethod1Mbway             CorrectionsPendingSubTotalMethod1 = "mbway"
	CorrectionsPendingSubTotalMethod1Multibanco        CorrectionsPendingSubTotalMethod1 = "multibanco"
	CorrectionsPendingSubTotalMethod1Mybank            CorrectionsPendingSubTotalMethod1 = "mybank"
	CorrectionsPendingSubTotalMethod1Paybybank         CorrectionsPendingSubTotalMethod1 = "paybybank"
	CorrectionsPendingSubTotalMethod1Payconiq          CorrectionsPendingSubTotalMethod1 = "payconiq"
	CorrectionsPendingSubTotalMethod1Paypal            CorrectionsPendingSubTotalMethod1 = "paypal"
	CorrectionsPendingSubTotalMethod1Paysafecard       CorrectionsPendingSubTotalMethod1 = "paysafecard"
	CorrectionsPendingSubTotalMethod1Przelewy24        CorrectionsPendingSubTotalMethod1 = "przelewy24"
	CorrectionsPendingSubTotalMethod1Riverty           CorrectionsPendingSubTotalMethod1 = "riverty"
	CorrectionsPendingSubTotalMethod1Satispay          CorrectionsPendingSubTotalMethod1 = "satispay"
	CorrectionsPendingSubTotalMethod1Podiumcadeaukaart CorrectionsPendingSubTotalMethod1 = "podiumcadeaukaart"
	CorrectionsPendingSubTotalMethod1Pointofsale       CorrectionsPendingSubTotalMethod1 = "pointofsale"
	CorrectionsPendingSubTotalMethod1Sofort            CorrectionsPendingSubTotalMethod1 = "sofort"
	CorrectionsPendingSubTotalMethod1Swish             CorrectionsPendingSubTotalMethod1 = "swish"
	CorrectionsPendingSubTotalMethod1Trustly           CorrectionsPendingSubTotalMethod1 = "trustly"
	CorrectionsPendingSubTotalMethod1Twint             CorrectionsPendingSubTotalMethod1 = "twint"
	CorrectionsPendingSubTotalMethod1Voucher           CorrectionsPendingSubTotalMethod1 = "voucher"
)

func (e CorrectionsPendingSubTotalMethod1) ToPointer() *CorrectionsPendingSubTotalMethod1 {
	return &e
}
func (e *CorrectionsPendingSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = CorrectionsPendingSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsPendingSubTotalMethod1: %v", v)
	}
}

// CorrectionsPendingSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type CorrectionsPendingSubTotalCardIssuer1 string

const (
	CorrectionsPendingSubTotalCardIssuer1Amex          CorrectionsPendingSubTotalCardIssuer1 = "amex"
	CorrectionsPendingSubTotalCardIssuer1Maestro       CorrectionsPendingSubTotalCardIssuer1 = "maestro"
	CorrectionsPendingSubTotalCardIssuer1CarteBancaire CorrectionsPendingSubTotalCardIssuer1 = "carte-bancaire"
	CorrectionsPendingSubTotalCardIssuer1Other         CorrectionsPendingSubTotalCardIssuer1 = "other"
)

func (e CorrectionsPendingSubTotalCardIssuer1) ToPointer() *CorrectionsPendingSubTotalCardIssuer1 {
	return &e
}
func (e *CorrectionsPendingSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = CorrectionsPendingSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsPendingSubTotalCardIssuer1: %v", v)
	}
}

// CorrectionsPendingSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type CorrectionsPendingSubTotalCardAudience1 string

const (
	CorrectionsPendingSubTotalCardAudience1Corporate CorrectionsPendingSubTotalCardAudience1 = "corporate"
	CorrectionsPendingSubTotalCardAudience1Other     CorrectionsPendingSubTotalCardAudience1 = "other"
)

func (e CorrectionsPendingSubTotalCardAudience1) ToPointer() *CorrectionsPendingSubTotalCardAudience1 {
	return &e
}
func (e *CorrectionsPendingSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = CorrectionsPendingSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsPendingSubTotalCardAudience1: %v", v)
	}
}

// CorrectionsPendingSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type CorrectionsPendingSubTotalCardRegion1 string

const (
	CorrectionsPendingSubTotalCardRegion1IntraEea CorrectionsPendingSubTotalCardRegion1 = "intra-eea"
	CorrectionsPendingSubTotalCardRegion1IntraEu  CorrectionsPendingSubTotalCardRegion1 = "intra-eu"
	CorrectionsPendingSubTotalCardRegion1Domestic CorrectionsPendingSubTotalCardRegion1 = "domestic"
	CorrectionsPendingSubTotalCardRegion1Other    CorrectionsPendingSubTotalCardRegion1 = "other"
)

func (e CorrectionsPendingSubTotalCardRegion1) ToPointer() *CorrectionsPendingSubTotalCardRegion1 {
	return &e
}
func (e *CorrectionsPendingSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = CorrectionsPendingSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsPendingSubTotalCardRegion1: %v", v)
	}
}

// CorrectionsPendingSubTotalFeeType1 - Present when the transaction represents a fee.
type CorrectionsPendingSubTotalFeeType1 string

const (
	CorrectionsPendingSubTotalFeeType1PaymentFee                                        CorrectionsPendingSubTotalFeeType1 = "payment-fee"
	CorrectionsPendingSubTotalFeeType1DirectDebitFailureFee                             CorrectionsPendingSubTotalFeeType1 = "direct-debit-failure-fee"
	CorrectionsPendingSubTotalFeeType1UnauthorizedDirectDebitFee                        CorrectionsPendingSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	CorrectionsPendingSubTotalFeeType1BankChargedDirectDebitFailureFee                  CorrectionsPendingSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	CorrectionsPendingSubTotalFeeType1PartnerCommission                                 CorrectionsPendingSubTotalFeeType1 = "partner-commission"
	CorrectionsPendingSubTotalFeeType1ApplicationFee                                    CorrectionsPendingSubTotalFeeType1 = "application-fee"
	CorrectionsPendingSubTotalFeeType1CaptureFee                                        CorrectionsPendingSubTotalFeeType1 = "capture-fee"
	CorrectionsPendingSubTotalFeeType1RefundFee                                         CorrectionsPendingSubTotalFeeType1 = "refund-fee"
	CorrectionsPendingSubTotalFeeType1ChargebackFee                                     CorrectionsPendingSubTotalFeeType1 = "chargeback-fee"
	CorrectionsPendingSubTotalFeeType1PaymentNotificationFee                            CorrectionsPendingSubTotalFeeType1 = "payment-notification-fee"
	CorrectionsPendingSubTotalFeeType1TransferNotificationFee                           CorrectionsPendingSubTotalFeeType1 = "transfer-notification-fee"
	CorrectionsPendingSubTotalFeeType1PayoutFee                                         CorrectionsPendingSubTotalFeeType1 = "payout-fee"
	CorrectionsPendingSubTotalFeeType1FeeDiscount                                       CorrectionsPendingSubTotalFeeType1 = "fee-discount"
	CorrectionsPendingSubTotalFeeType1FeeReimbursement                                  CorrectionsPendingSubTotalFeeType1 = "fee-reimbursement"
	CorrectionsPendingSubTotalFeeType1PlatformVolumeFee                                 CorrectionsPendingSubTotalFeeType1 = "platform-volume-fee"
	CorrectionsPendingSubTotalFeeType1PlatformConnectedOrganizationsFee                 CorrectionsPendingSubTotalFeeType1 = "platform-connected-organizations-fee"
	CorrectionsPendingSubTotalFeeType1BalanceChargeFee                                  CorrectionsPendingSubTotalFeeType1 = "balance-charge-fee"
	CorrectionsPendingSubTotalFeeType1ThreedsAuthenticationAttemptFee                   CorrectionsPendingSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	CorrectionsPendingSubTotalFeeType1TerminalMonthlyFee                                CorrectionsPendingSubTotalFeeType1 = "terminal-monthly-fee"
	CorrectionsPendingSubTotalFeeType1AcceptanceRiskFee                                 CorrectionsPendingSubTotalFeeType1 = "acceptance-risk-fee"
	CorrectionsPendingSubTotalFeeType1TopUpFee                                          CorrectionsPendingSubTotalFeeType1 = "top-up-fee"
	CorrectionsPendingSubTotalFeeType1PaymentGatewayFee                                 CorrectionsPendingSubTotalFeeType1 = "payment-gateway-fee"
	CorrectionsPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   CorrectionsPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	CorrectionsPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee CorrectionsPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	CorrectionsPendingSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             CorrectionsPendingSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	CorrectionsPendingSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           CorrectionsPendingSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	CorrectionsPendingSubTotalFeeType1MinimumInvoiceAmountFee                           CorrectionsPendingSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e CorrectionsPendingSubTotalFeeType1) ToPointer() *CorrectionsPendingSubTotalFeeType1 {
	return &e
}
func (e *CorrectionsPendingSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = CorrectionsPendingSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsPendingSubTotalFeeType1: %v", v)
	}
}

// CorrectionsPendingSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type CorrectionsPendingSubTotalPrepaymentPartType1 string

const (
	CorrectionsPendingSubTotalPrepaymentPartType1Fee                     CorrectionsPendingSubTotalPrepaymentPartType1 = "fee"
	CorrectionsPendingSubTotalPrepaymentPartType1FeeReimbursement        CorrectionsPendingSubTotalPrepaymentPartType1 = "fee-reimbursement"
	CorrectionsPendingSubTotalPrepaymentPartType1FeeDiscount             CorrectionsPendingSubTotalPrepaymentPartType1 = "fee-discount"
	CorrectionsPendingSubTotalPrepaymentPartType1FeeVat                  CorrectionsPendingSubTotalPrepaymentPartType1 = "fee-vat"
	CorrectionsPendingSubTotalPrepaymentPartType1FeeRoundingCompensation CorrectionsPendingSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e CorrectionsPendingSubTotalPrepaymentPartType1) ToPointer() *CorrectionsPendingSubTotalPrepaymentPartType1 {
	return &e
}
func (e *CorrectionsPendingSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = CorrectionsPendingSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsPendingSubTotalPrepaymentPartType1: %v", v)
	}
}

// CorrectionsPendingSubTotalTransactionType1 - Represents the transaction type
type CorrectionsPendingSubTotalTransactionType1 string

const (
	CorrectionsPendingSubTotalTransactionType1Payment                           CorrectionsPendingSubTotalTransactionType1 = "payment"
	CorrectionsPendingSubTotalTransactionType1SplitPayment                      CorrectionsPendingSubTotalTransactionType1 = "split-payment"
	CorrectionsPendingSubTotalTransactionType1FailedPayment                     CorrectionsPendingSubTotalTransactionType1 = "failed-payment"
	CorrectionsPendingSubTotalTransactionType1FailedPlatformSplitPayment        CorrectionsPendingSubTotalTransactionType1 = "failed-platform-split-payment"
	CorrectionsPendingSubTotalTransactionType1FailedSplitPaymentCompensation    CorrectionsPendingSubTotalTransactionType1 = "failed-split-payment-compensation"
	CorrectionsPendingSubTotalTransactionType1Capture                           CorrectionsPendingSubTotalTransactionType1 = "capture"
	CorrectionsPendingSubTotalTransactionType1SplitTransaction                  CorrectionsPendingSubTotalTransactionType1 = "split-transaction"
	CorrectionsPendingSubTotalTransactionType1Refund                            CorrectionsPendingSubTotalTransactionType1 = "refund"
	CorrectionsPendingSubTotalTransactionType1PlatformPaymentRefund             CorrectionsPendingSubTotalTransactionType1 = "platform-payment-refund"
	CorrectionsPendingSubTotalTransactionType1ReturnedPlatformPaymentRefund     CorrectionsPendingSubTotalTransactionType1 = "returned-platform-payment-refund"
	CorrectionsPendingSubTotalTransactionType1RefundCompensation                CorrectionsPendingSubTotalTransactionType1 = "refund-compensation"
	CorrectionsPendingSubTotalTransactionType1ReturnedRefundCompensation        CorrectionsPendingSubTotalTransactionType1 = "returned-refund-compensation"
	CorrectionsPendingSubTotalTransactionType1ReturnedRefund                    CorrectionsPendingSubTotalTransactionType1 = "returned-refund"
	CorrectionsPendingSubTotalTransactionType1Chargeback                        CorrectionsPendingSubTotalTransactionType1 = "chargeback"
	CorrectionsPendingSubTotalTransactionType1ChargebackReversal                CorrectionsPendingSubTotalTransactionType1 = "chargeback-reversal"
	CorrectionsPendingSubTotalTransactionType1ChargebackCompensation            CorrectionsPendingSubTotalTransactionType1 = "chargeback-compensation"
	CorrectionsPendingSubTotalTransactionType1ReversedChargebackCompensation    CorrectionsPendingSubTotalTransactionType1 = "reversed-chargeback-compensation"
	CorrectionsPendingSubTotalTransactionType1PlatformPaymentChargeback         CorrectionsPendingSubTotalTransactionType1 = "platform-payment-chargeback"
	CorrectionsPendingSubTotalTransactionType1ReversedPlatformPaymentChargeback CorrectionsPendingSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	CorrectionsPendingSubTotalTransactionType1FeePrepayment                     CorrectionsPendingSubTotalTransactionType1 = "fee-prepayment"
	CorrectionsPendingSubTotalTransactionType1OutgoingTransfer                  CorrectionsPendingSubTotalTransactionType1 = "outgoing-transfer"
	CorrectionsPendingSubTotalTransactionType1IncomingTransfer                  CorrectionsPendingSubTotalTransactionType1 = "incoming-transfer"
	CorrectionsPendingSubTotalTransactionType1CanceledTransfer                  CorrectionsPendingSubTotalTransactionType1 = "canceled-transfer"
	CorrectionsPendingSubTotalTransactionType1ReturnedTransfer                  CorrectionsPendingSubTotalTransactionType1 = "returned-transfer"
	CorrectionsPendingSubTotalTransactionType1BalanceReserve                    CorrectionsPendingSubTotalTransactionType1 = "balance-reserve"
	CorrectionsPendingSubTotalTransactionType1BalanceReserveReturn              CorrectionsPendingSubTotalTransactionType1 = "balance-reserve-return"
	CorrectionsPendingSubTotalTransactionType1InvoiceRoundingCompensation       CorrectionsPendingSubTotalTransactionType1 = "invoice-rounding-compensation"
	CorrectionsPendingSubTotalTransactionType1RollingReserveHold                CorrectionsPendingSubTotalTransactionType1 = "rolling-reserve-hold"
	CorrectionsPendingSubTotalTransactionType1RollingReserveRelease             CorrectionsPendingSubTotalTransactionType1 = "rolling-reserve-release"
	CorrectionsPendingSubTotalTransactionType1BalanceCorrection                 CorrectionsPendingSubTotalTransactionType1 = "balance-correction"
	CorrectionsPendingSubTotalTransactionType1Repayment                         CorrectionsPendingSubTotalTransactionType1 = "repayment"
	CorrectionsPendingSubTotalTransactionType1Loan                              CorrectionsPendingSubTotalTransactionType1 = "loan"
	CorrectionsPendingSubTotalTransactionType1BalanceTopup                      CorrectionsPendingSubTotalTransactionType1 = "balance-topup"
	CorrectionsPendingSubTotalTransactionType1CashCollateralIssuance            CorrectionsPendingSubTotalTransactionType1 = "cash-collateral-issuance';"
	CorrectionsPendingSubTotalTransactionType1CashCollateralRelease             CorrectionsPendingSubTotalTransactionType1 = "cash-collateral-release"
	CorrectionsPendingSubTotalTransactionType1PendingRollingReserve             CorrectionsPendingSubTotalTransactionType1 = "pending-rolling-reserve"
	CorrectionsPendingSubTotalTransactionType1ToBeReleasedRollingReserve        CorrectionsPendingSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	CorrectionsPendingSubTotalTransactionType1HeldRollingReserve                CorrectionsPendingSubTotalTransactionType1 = "held-rolling-reserve"
	CorrectionsPendingSubTotalTransactionType1ReleasedRollingReserve            CorrectionsPendingSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e CorrectionsPendingSubTotalTransactionType1) ToPointer() *CorrectionsPendingSubTotalTransactionType1 {
	return &e
}
func (e *CorrectionsPendingSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = CorrectionsPendingSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsPendingSubTotalTransactionType1: %v", v)
	}
}

type CorrectionsPendingSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *CorrectionsPendingSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *CorrectionsPendingSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *CorrectionsPendingSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *CorrectionsPendingSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *CorrectionsPendingSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *CorrectionsPendingSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *CorrectionsPendingSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *CorrectionsPendingSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *CorrectionsPendingSubTotal1) GetMethod() *CorrectionsPendingSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CorrectionsPendingSubTotal1) GetCardIssuer() *CorrectionsPendingSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *CorrectionsPendingSubTotal1) GetCardAudience() *CorrectionsPendingSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *CorrectionsPendingSubTotal1) GetCardRegion() *CorrectionsPendingSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *CorrectionsPendingSubTotal1) GetFeeType() *CorrectionsPendingSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *CorrectionsPendingSubTotal1) GetPrepaymentPartType() *CorrectionsPendingSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *CorrectionsPendingSubTotal1) GetTransactionType() *CorrectionsPendingSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// CorrectionsPendingSubtotalMethod2 - Payment type of the transactions
type CorrectionsPendingSubtotalMethod2 string

const (
	CorrectionsPendingSubtotalMethod2Alma              CorrectionsPendingSubtotalMethod2 = "alma"
	CorrectionsPendingSubtotalMethod2Bacs              CorrectionsPendingSubtotalMethod2 = "bacs"
	CorrectionsPendingSubtotalMethod2Applepay          CorrectionsPendingSubtotalMethod2 = "applepay"
	CorrectionsPendingSubtotalMethod2Bancomatpay       CorrectionsPendingSubtotalMethod2 = "bancomatpay"
	CorrectionsPendingSubtotalMethod2Bancontact        CorrectionsPendingSubtotalMethod2 = "bancontact"
	CorrectionsPendingSubtotalMethod2Banktransfer      CorrectionsPendingSubtotalMethod2 = "banktransfer"
	CorrectionsPendingSubtotalMethod2Belfius           CorrectionsPendingSubtotalMethod2 = "belfius"
	CorrectionsPendingSubtotalMethod2Billie            CorrectionsPendingSubtotalMethod2 = "billie"
	CorrectionsPendingSubtotalMethod2Bizum             CorrectionsPendingSubtotalMethod2 = "bizum"
	CorrectionsPendingSubtotalMethod2Bitcoin           CorrectionsPendingSubtotalMethod2 = "bitcoin"
	CorrectionsPendingSubtotalMethod2Blik              CorrectionsPendingSubtotalMethod2 = "blik"
	CorrectionsPendingSubtotalMethod2Creditcard        CorrectionsPendingSubtotalMethod2 = "creditcard"
	CorrectionsPendingSubtotalMethod2Directdebit       CorrectionsPendingSubtotalMethod2 = "directdebit"
	CorrectionsPendingSubtotalMethod2Eps               CorrectionsPendingSubtotalMethod2 = "eps"
	CorrectionsPendingSubtotalMethod2Giftcard          CorrectionsPendingSubtotalMethod2 = "giftcard"
	CorrectionsPendingSubtotalMethod2Giropay           CorrectionsPendingSubtotalMethod2 = "giropay"
	CorrectionsPendingSubtotalMethod2Googlepay         CorrectionsPendingSubtotalMethod2 = "googlepay"
	CorrectionsPendingSubtotalMethod2Ideal             CorrectionsPendingSubtotalMethod2 = "ideal"
	CorrectionsPendingSubtotalMethod2In3               CorrectionsPendingSubtotalMethod2 = "in3"
	CorrectionsPendingSubtotalMethod2Inghomepay        CorrectionsPendingSubtotalMethod2 = "inghomepay"
	CorrectionsPendingSubtotalMethod2Kbc               CorrectionsPendingSubtotalMethod2 = "kbc"
	CorrectionsPendingSubtotalMethod2Klarnapaylater    CorrectionsPendingSubtotalMethod2 = "klarnapaylater"
	CorrectionsPendingSubtotalMethod2Klarnapaynow      CorrectionsPendingSubtotalMethod2 = "klarnapaynow"
	CorrectionsPendingSubtotalMethod2Klarnasliceit     CorrectionsPendingSubtotalMethod2 = "klarnasliceit"
	CorrectionsPendingSubtotalMethod2Klarna            CorrectionsPendingSubtotalMethod2 = "klarna"
	CorrectionsPendingSubtotalMethod2Mbway             CorrectionsPendingSubtotalMethod2 = "mbway"
	CorrectionsPendingSubtotalMethod2Multibanco        CorrectionsPendingSubtotalMethod2 = "multibanco"
	CorrectionsPendingSubtotalMethod2Mybank            CorrectionsPendingSubtotalMethod2 = "mybank"
	CorrectionsPendingSubtotalMethod2Paybybank         CorrectionsPendingSubtotalMethod2 = "paybybank"
	CorrectionsPendingSubtotalMethod2Payconiq          CorrectionsPendingSubtotalMethod2 = "payconiq"
	CorrectionsPendingSubtotalMethod2Paypal            CorrectionsPendingSubtotalMethod2 = "paypal"
	CorrectionsPendingSubtotalMethod2Paysafecard       CorrectionsPendingSubtotalMethod2 = "paysafecard"
	CorrectionsPendingSubtotalMethod2Przelewy24        CorrectionsPendingSubtotalMethod2 = "przelewy24"
	CorrectionsPendingSubtotalMethod2Riverty           CorrectionsPendingSubtotalMethod2 = "riverty"
	CorrectionsPendingSubtotalMethod2Satispay          CorrectionsPendingSubtotalMethod2 = "satispay"
	CorrectionsPendingSubtotalMethod2Podiumcadeaukaart CorrectionsPendingSubtotalMethod2 = "podiumcadeaukaart"
	CorrectionsPendingSubtotalMethod2Pointofsale       CorrectionsPendingSubtotalMethod2 = "pointofsale"
	CorrectionsPendingSubtotalMethod2Sofort            CorrectionsPendingSubtotalMethod2 = "sofort"
	CorrectionsPendingSubtotalMethod2Swish             CorrectionsPendingSubtotalMethod2 = "swish"
	CorrectionsPendingSubtotalMethod2Trustly           CorrectionsPendingSubtotalMethod2 = "trustly"
	CorrectionsPendingSubtotalMethod2Twint             CorrectionsPendingSubtotalMethod2 = "twint"
	CorrectionsPendingSubtotalMethod2Voucher           CorrectionsPendingSubtotalMethod2 = "voucher"
)

func (e CorrectionsPendingSubtotalMethod2) ToPointer() *CorrectionsPendingSubtotalMethod2 {
	return &e
}
func (e *CorrectionsPendingSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = CorrectionsPendingSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsPendingSubtotalMethod2: %v", v)
	}
}

// CorrectionsPendingSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type CorrectionsPendingSubtotalCardIssuer2 string

const (
	CorrectionsPendingSubtotalCardIssuer2Amex          CorrectionsPendingSubtotalCardIssuer2 = "amex"
	CorrectionsPendingSubtotalCardIssuer2Maestro       CorrectionsPendingSubtotalCardIssuer2 = "maestro"
	CorrectionsPendingSubtotalCardIssuer2CarteBancaire CorrectionsPendingSubtotalCardIssuer2 = "carte-bancaire"
	CorrectionsPendingSubtotalCardIssuer2Other         CorrectionsPendingSubtotalCardIssuer2 = "other"
)

func (e CorrectionsPendingSubtotalCardIssuer2) ToPointer() *CorrectionsPendingSubtotalCardIssuer2 {
	return &e
}
func (e *CorrectionsPendingSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = CorrectionsPendingSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsPendingSubtotalCardIssuer2: %v", v)
	}
}

// CorrectionsPendingSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type CorrectionsPendingSubtotalCardAudience2 string

const (
	CorrectionsPendingSubtotalCardAudience2Corporate CorrectionsPendingSubtotalCardAudience2 = "corporate"
	CorrectionsPendingSubtotalCardAudience2Other     CorrectionsPendingSubtotalCardAudience2 = "other"
)

func (e CorrectionsPendingSubtotalCardAudience2) ToPointer() *CorrectionsPendingSubtotalCardAudience2 {
	return &e
}
func (e *CorrectionsPendingSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = CorrectionsPendingSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsPendingSubtotalCardAudience2: %v", v)
	}
}

// CorrectionsPendingSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type CorrectionsPendingSubtotalCardRegion2 string

const (
	CorrectionsPendingSubtotalCardRegion2IntraEea CorrectionsPendingSubtotalCardRegion2 = "intra-eea"
	CorrectionsPendingSubtotalCardRegion2IntraEu  CorrectionsPendingSubtotalCardRegion2 = "intra-eu"
	CorrectionsPendingSubtotalCardRegion2Domestic CorrectionsPendingSubtotalCardRegion2 = "domestic"
	CorrectionsPendingSubtotalCardRegion2Other    CorrectionsPendingSubtotalCardRegion2 = "other"
)

func (e CorrectionsPendingSubtotalCardRegion2) ToPointer() *CorrectionsPendingSubtotalCardRegion2 {
	return &e
}
func (e *CorrectionsPendingSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = CorrectionsPendingSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsPendingSubtotalCardRegion2: %v", v)
	}
}

// CorrectionsPendingSubtotalFeeType2 - Present when the transaction represents a fee.
type CorrectionsPendingSubtotalFeeType2 string

const (
	CorrectionsPendingSubtotalFeeType2PaymentFee                                        CorrectionsPendingSubtotalFeeType2 = "payment-fee"
	CorrectionsPendingSubtotalFeeType2DirectDebitFailureFee                             CorrectionsPendingSubtotalFeeType2 = "direct-debit-failure-fee"
	CorrectionsPendingSubtotalFeeType2UnauthorizedDirectDebitFee                        CorrectionsPendingSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	CorrectionsPendingSubtotalFeeType2BankChargedDirectDebitFailureFee                  CorrectionsPendingSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	CorrectionsPendingSubtotalFeeType2PartnerCommission                                 CorrectionsPendingSubtotalFeeType2 = "partner-commission"
	CorrectionsPendingSubtotalFeeType2ApplicationFee                                    CorrectionsPendingSubtotalFeeType2 = "application-fee"
	CorrectionsPendingSubtotalFeeType2CaptureFee                                        CorrectionsPendingSubtotalFeeType2 = "capture-fee"
	CorrectionsPendingSubtotalFeeType2RefundFee                                         CorrectionsPendingSubtotalFeeType2 = "refund-fee"
	CorrectionsPendingSubtotalFeeType2ChargebackFee                                     CorrectionsPendingSubtotalFeeType2 = "chargeback-fee"
	CorrectionsPendingSubtotalFeeType2PaymentNotificationFee                            CorrectionsPendingSubtotalFeeType2 = "payment-notification-fee"
	CorrectionsPendingSubtotalFeeType2TransferNotificationFee                           CorrectionsPendingSubtotalFeeType2 = "transfer-notification-fee"
	CorrectionsPendingSubtotalFeeType2PayoutFee                                         CorrectionsPendingSubtotalFeeType2 = "payout-fee"
	CorrectionsPendingSubtotalFeeType2FeeDiscount                                       CorrectionsPendingSubtotalFeeType2 = "fee-discount"
	CorrectionsPendingSubtotalFeeType2FeeReimbursement                                  CorrectionsPendingSubtotalFeeType2 = "fee-reimbursement"
	CorrectionsPendingSubtotalFeeType2PlatformVolumeFee                                 CorrectionsPendingSubtotalFeeType2 = "platform-volume-fee"
	CorrectionsPendingSubtotalFeeType2PlatformConnectedOrganizationsFee                 CorrectionsPendingSubtotalFeeType2 = "platform-connected-organizations-fee"
	CorrectionsPendingSubtotalFeeType2BalanceChargeFee                                  CorrectionsPendingSubtotalFeeType2 = "balance-charge-fee"
	CorrectionsPendingSubtotalFeeType2ThreedsAuthenticationAttemptFee                   CorrectionsPendingSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	CorrectionsPendingSubtotalFeeType2TerminalMonthlyFee                                CorrectionsPendingSubtotalFeeType2 = "terminal-monthly-fee"
	CorrectionsPendingSubtotalFeeType2AcceptanceRiskFee                                 CorrectionsPendingSubtotalFeeType2 = "acceptance-risk-fee"
	CorrectionsPendingSubtotalFeeType2TopUpFee                                          CorrectionsPendingSubtotalFeeType2 = "top-up-fee"
	CorrectionsPendingSubtotalFeeType2PaymentGatewayFee                                 CorrectionsPendingSubtotalFeeType2 = "payment-gateway-fee"
	CorrectionsPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   CorrectionsPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	CorrectionsPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee CorrectionsPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	CorrectionsPendingSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             CorrectionsPendingSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	CorrectionsPendingSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           CorrectionsPendingSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	CorrectionsPendingSubtotalFeeType2MinimumInvoiceAmountFee                           CorrectionsPendingSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e CorrectionsPendingSubtotalFeeType2) ToPointer() *CorrectionsPendingSubtotalFeeType2 {
	return &e
}
func (e *CorrectionsPendingSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = CorrectionsPendingSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsPendingSubtotalFeeType2: %v", v)
	}
}

// CorrectionsPendingSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type CorrectionsPendingSubtotalPrepaymentPartType2 string

const (
	CorrectionsPendingSubtotalPrepaymentPartType2Fee                     CorrectionsPendingSubtotalPrepaymentPartType2 = "fee"
	CorrectionsPendingSubtotalPrepaymentPartType2FeeReimbursement        CorrectionsPendingSubtotalPrepaymentPartType2 = "fee-reimbursement"
	CorrectionsPendingSubtotalPrepaymentPartType2FeeDiscount             CorrectionsPendingSubtotalPrepaymentPartType2 = "fee-discount"
	CorrectionsPendingSubtotalPrepaymentPartType2FeeVat                  CorrectionsPendingSubtotalPrepaymentPartType2 = "fee-vat"
	CorrectionsPendingSubtotalPrepaymentPartType2FeeRoundingCompensation CorrectionsPendingSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e CorrectionsPendingSubtotalPrepaymentPartType2) ToPointer() *CorrectionsPendingSubtotalPrepaymentPartType2 {
	return &e
}
func (e *CorrectionsPendingSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = CorrectionsPendingSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsPendingSubtotalPrepaymentPartType2: %v", v)
	}
}

// CorrectionsPendingSubtotalTransactionType2 - Represents the transaction type
type CorrectionsPendingSubtotalTransactionType2 string

const (
	CorrectionsPendingSubtotalTransactionType2Payment                           CorrectionsPendingSubtotalTransactionType2 = "payment"
	CorrectionsPendingSubtotalTransactionType2SplitPayment                      CorrectionsPendingSubtotalTransactionType2 = "split-payment"
	CorrectionsPendingSubtotalTransactionType2FailedPayment                     CorrectionsPendingSubtotalTransactionType2 = "failed-payment"
	CorrectionsPendingSubtotalTransactionType2FailedPlatformSplitPayment        CorrectionsPendingSubtotalTransactionType2 = "failed-platform-split-payment"
	CorrectionsPendingSubtotalTransactionType2FailedSplitPaymentCompensation    CorrectionsPendingSubtotalTransactionType2 = "failed-split-payment-compensation"
	CorrectionsPendingSubtotalTransactionType2Capture                           CorrectionsPendingSubtotalTransactionType2 = "capture"
	CorrectionsPendingSubtotalTransactionType2SplitTransaction                  CorrectionsPendingSubtotalTransactionType2 = "split-transaction"
	CorrectionsPendingSubtotalTransactionType2Refund                            CorrectionsPendingSubtotalTransactionType2 = "refund"
	CorrectionsPendingSubtotalTransactionType2PlatformPaymentRefund             CorrectionsPendingSubtotalTransactionType2 = "platform-payment-refund"
	CorrectionsPendingSubtotalTransactionType2ReturnedPlatformPaymentRefund     CorrectionsPendingSubtotalTransactionType2 = "returned-platform-payment-refund"
	CorrectionsPendingSubtotalTransactionType2RefundCompensation                CorrectionsPendingSubtotalTransactionType2 = "refund-compensation"
	CorrectionsPendingSubtotalTransactionType2ReturnedRefundCompensation        CorrectionsPendingSubtotalTransactionType2 = "returned-refund-compensation"
	CorrectionsPendingSubtotalTransactionType2ReturnedRefund                    CorrectionsPendingSubtotalTransactionType2 = "returned-refund"
	CorrectionsPendingSubtotalTransactionType2Chargeback                        CorrectionsPendingSubtotalTransactionType2 = "chargeback"
	CorrectionsPendingSubtotalTransactionType2ChargebackReversal                CorrectionsPendingSubtotalTransactionType2 = "chargeback-reversal"
	CorrectionsPendingSubtotalTransactionType2ChargebackCompensation            CorrectionsPendingSubtotalTransactionType2 = "chargeback-compensation"
	CorrectionsPendingSubtotalTransactionType2ReversedChargebackCompensation    CorrectionsPendingSubtotalTransactionType2 = "reversed-chargeback-compensation"
	CorrectionsPendingSubtotalTransactionType2PlatformPaymentChargeback         CorrectionsPendingSubtotalTransactionType2 = "platform-payment-chargeback"
	CorrectionsPendingSubtotalTransactionType2ReversedPlatformPaymentChargeback CorrectionsPendingSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	CorrectionsPendingSubtotalTransactionType2FeePrepayment                     CorrectionsPendingSubtotalTransactionType2 = "fee-prepayment"
	CorrectionsPendingSubtotalTransactionType2OutgoingTransfer                  CorrectionsPendingSubtotalTransactionType2 = "outgoing-transfer"
	CorrectionsPendingSubtotalTransactionType2IncomingTransfer                  CorrectionsPendingSubtotalTransactionType2 = "incoming-transfer"
	CorrectionsPendingSubtotalTransactionType2CanceledTransfer                  CorrectionsPendingSubtotalTransactionType2 = "canceled-transfer"
	CorrectionsPendingSubtotalTransactionType2ReturnedTransfer                  CorrectionsPendingSubtotalTransactionType2 = "returned-transfer"
	CorrectionsPendingSubtotalTransactionType2BalanceReserve                    CorrectionsPendingSubtotalTransactionType2 = "balance-reserve"
	CorrectionsPendingSubtotalTransactionType2BalanceReserveReturn              CorrectionsPendingSubtotalTransactionType2 = "balance-reserve-return"
	CorrectionsPendingSubtotalTransactionType2InvoiceRoundingCompensation       CorrectionsPendingSubtotalTransactionType2 = "invoice-rounding-compensation"
	CorrectionsPendingSubtotalTransactionType2RollingReserveHold                CorrectionsPendingSubtotalTransactionType2 = "rolling-reserve-hold"
	CorrectionsPendingSubtotalTransactionType2RollingReserveRelease             CorrectionsPendingSubtotalTransactionType2 = "rolling-reserve-release"
	CorrectionsPendingSubtotalTransactionType2BalanceCorrection                 CorrectionsPendingSubtotalTransactionType2 = "balance-correction"
	CorrectionsPendingSubtotalTransactionType2Repayment                         CorrectionsPendingSubtotalTransactionType2 = "repayment"
	CorrectionsPendingSubtotalTransactionType2Loan                              CorrectionsPendingSubtotalTransactionType2 = "loan"
	CorrectionsPendingSubtotalTransactionType2BalanceTopup                      CorrectionsPendingSubtotalTransactionType2 = "balance-topup"
	CorrectionsPendingSubtotalTransactionType2CashCollateralIssuance            CorrectionsPendingSubtotalTransactionType2 = "cash-collateral-issuance';"
	CorrectionsPendingSubtotalTransactionType2CashCollateralRelease             CorrectionsPendingSubtotalTransactionType2 = "cash-collateral-release"
	CorrectionsPendingSubtotalTransactionType2PendingRollingReserve             CorrectionsPendingSubtotalTransactionType2 = "pending-rolling-reserve"
	CorrectionsPendingSubtotalTransactionType2ToBeReleasedRollingReserve        CorrectionsPendingSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	CorrectionsPendingSubtotalTransactionType2HeldRollingReserve                CorrectionsPendingSubtotalTransactionType2 = "held-rolling-reserve"
	CorrectionsPendingSubtotalTransactionType2ReleasedRollingReserve            CorrectionsPendingSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e CorrectionsPendingSubtotalTransactionType2) ToPointer() *CorrectionsPendingSubtotalTransactionType2 {
	return &e
}
func (e *CorrectionsPendingSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = CorrectionsPendingSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsPendingSubtotalTransactionType2: %v", v)
	}
}

type CorrectionsPendingSubtotal2 struct {
	SubTotals []CorrectionsPendingSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *CorrectionsPendingSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *CorrectionsPendingSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *CorrectionsPendingSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *CorrectionsPendingSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *CorrectionsPendingSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *CorrectionsPendingSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *CorrectionsPendingSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *CorrectionsPendingSubtotal2) GetSubTotals() []CorrectionsPendingSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *CorrectionsPendingSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *CorrectionsPendingSubtotal2) GetMethod() *CorrectionsPendingSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CorrectionsPendingSubtotal2) GetCardIssuer() *CorrectionsPendingSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *CorrectionsPendingSubtotal2) GetCardAudience() *CorrectionsPendingSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *CorrectionsPendingSubtotal2) GetCardRegion() *CorrectionsPendingSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *CorrectionsPendingSubtotal2) GetFeeType() *CorrectionsPendingSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *CorrectionsPendingSubtotal2) GetPrepaymentPartType() *CorrectionsPendingSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *CorrectionsPendingSubtotal2) GetTransactionType() *CorrectionsPendingSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type CorrectionsPending struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *CorrectionsPendingAmount     `json:"amount,omitempty"`
	Subtotals []CorrectionsPendingSubtotal2 `json:"subtotals,omitempty"`
}

func (o *CorrectionsPending) GetAmount() *CorrectionsPendingAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CorrectionsPending) GetSubtotals() []CorrectionsPendingSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// CorrectionsMovedToAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type CorrectionsMovedToAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CorrectionsMovedToAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CorrectionsMovedToAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CorrectionsMovedToAvailableSubTotalMethod1 - Payment type of the transactions
type CorrectionsMovedToAvailableSubTotalMethod1 string

const (
	CorrectionsMovedToAvailableSubTotalMethod1Alma              CorrectionsMovedToAvailableSubTotalMethod1 = "alma"
	CorrectionsMovedToAvailableSubTotalMethod1Bacs              CorrectionsMovedToAvailableSubTotalMethod1 = "bacs"
	CorrectionsMovedToAvailableSubTotalMethod1Applepay          CorrectionsMovedToAvailableSubTotalMethod1 = "applepay"
	CorrectionsMovedToAvailableSubTotalMethod1Bancomatpay       CorrectionsMovedToAvailableSubTotalMethod1 = "bancomatpay"
	CorrectionsMovedToAvailableSubTotalMethod1Bancontact        CorrectionsMovedToAvailableSubTotalMethod1 = "bancontact"
	CorrectionsMovedToAvailableSubTotalMethod1Banktransfer      CorrectionsMovedToAvailableSubTotalMethod1 = "banktransfer"
	CorrectionsMovedToAvailableSubTotalMethod1Belfius           CorrectionsMovedToAvailableSubTotalMethod1 = "belfius"
	CorrectionsMovedToAvailableSubTotalMethod1Billie            CorrectionsMovedToAvailableSubTotalMethod1 = "billie"
	CorrectionsMovedToAvailableSubTotalMethod1Bizum             CorrectionsMovedToAvailableSubTotalMethod1 = "bizum"
	CorrectionsMovedToAvailableSubTotalMethod1Bitcoin           CorrectionsMovedToAvailableSubTotalMethod1 = "bitcoin"
	CorrectionsMovedToAvailableSubTotalMethod1Blik              CorrectionsMovedToAvailableSubTotalMethod1 = "blik"
	CorrectionsMovedToAvailableSubTotalMethod1Creditcard        CorrectionsMovedToAvailableSubTotalMethod1 = "creditcard"
	CorrectionsMovedToAvailableSubTotalMethod1Directdebit       CorrectionsMovedToAvailableSubTotalMethod1 = "directdebit"
	CorrectionsMovedToAvailableSubTotalMethod1Eps               CorrectionsMovedToAvailableSubTotalMethod1 = "eps"
	CorrectionsMovedToAvailableSubTotalMethod1Giftcard          CorrectionsMovedToAvailableSubTotalMethod1 = "giftcard"
	CorrectionsMovedToAvailableSubTotalMethod1Giropay           CorrectionsMovedToAvailableSubTotalMethod1 = "giropay"
	CorrectionsMovedToAvailableSubTotalMethod1Googlepay         CorrectionsMovedToAvailableSubTotalMethod1 = "googlepay"
	CorrectionsMovedToAvailableSubTotalMethod1Ideal             CorrectionsMovedToAvailableSubTotalMethod1 = "ideal"
	CorrectionsMovedToAvailableSubTotalMethod1In3               CorrectionsMovedToAvailableSubTotalMethod1 = "in3"
	CorrectionsMovedToAvailableSubTotalMethod1Inghomepay        CorrectionsMovedToAvailableSubTotalMethod1 = "inghomepay"
	CorrectionsMovedToAvailableSubTotalMethod1Kbc               CorrectionsMovedToAvailableSubTotalMethod1 = "kbc"
	CorrectionsMovedToAvailableSubTotalMethod1Klarnapaylater    CorrectionsMovedToAvailableSubTotalMethod1 = "klarnapaylater"
	CorrectionsMovedToAvailableSubTotalMethod1Klarnapaynow      CorrectionsMovedToAvailableSubTotalMethod1 = "klarnapaynow"
	CorrectionsMovedToAvailableSubTotalMethod1Klarnasliceit     CorrectionsMovedToAvailableSubTotalMethod1 = "klarnasliceit"
	CorrectionsMovedToAvailableSubTotalMethod1Klarna            CorrectionsMovedToAvailableSubTotalMethod1 = "klarna"
	CorrectionsMovedToAvailableSubTotalMethod1Mbway             CorrectionsMovedToAvailableSubTotalMethod1 = "mbway"
	CorrectionsMovedToAvailableSubTotalMethod1Multibanco        CorrectionsMovedToAvailableSubTotalMethod1 = "multibanco"
	CorrectionsMovedToAvailableSubTotalMethod1Mybank            CorrectionsMovedToAvailableSubTotalMethod1 = "mybank"
	CorrectionsMovedToAvailableSubTotalMethod1Paybybank         CorrectionsMovedToAvailableSubTotalMethod1 = "paybybank"
	CorrectionsMovedToAvailableSubTotalMethod1Payconiq          CorrectionsMovedToAvailableSubTotalMethod1 = "payconiq"
	CorrectionsMovedToAvailableSubTotalMethod1Paypal            CorrectionsMovedToAvailableSubTotalMethod1 = "paypal"
	CorrectionsMovedToAvailableSubTotalMethod1Paysafecard       CorrectionsMovedToAvailableSubTotalMethod1 = "paysafecard"
	CorrectionsMovedToAvailableSubTotalMethod1Przelewy24        CorrectionsMovedToAvailableSubTotalMethod1 = "przelewy24"
	CorrectionsMovedToAvailableSubTotalMethod1Riverty           CorrectionsMovedToAvailableSubTotalMethod1 = "riverty"
	CorrectionsMovedToAvailableSubTotalMethod1Satispay          CorrectionsMovedToAvailableSubTotalMethod1 = "satispay"
	CorrectionsMovedToAvailableSubTotalMethod1Podiumcadeaukaart CorrectionsMovedToAvailableSubTotalMethod1 = "podiumcadeaukaart"
	CorrectionsMovedToAvailableSubTotalMethod1Pointofsale       CorrectionsMovedToAvailableSubTotalMethod1 = "pointofsale"
	CorrectionsMovedToAvailableSubTotalMethod1Sofort            CorrectionsMovedToAvailableSubTotalMethod1 = "sofort"
	CorrectionsMovedToAvailableSubTotalMethod1Swish             CorrectionsMovedToAvailableSubTotalMethod1 = "swish"
	CorrectionsMovedToAvailableSubTotalMethod1Trustly           CorrectionsMovedToAvailableSubTotalMethod1 = "trustly"
	CorrectionsMovedToAvailableSubTotalMethod1Twint             CorrectionsMovedToAvailableSubTotalMethod1 = "twint"
	CorrectionsMovedToAvailableSubTotalMethod1Voucher           CorrectionsMovedToAvailableSubTotalMethod1 = "voucher"
)

func (e CorrectionsMovedToAvailableSubTotalMethod1) ToPointer() *CorrectionsMovedToAvailableSubTotalMethod1 {
	return &e
}
func (e *CorrectionsMovedToAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = CorrectionsMovedToAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsMovedToAvailableSubTotalMethod1: %v", v)
	}
}

// CorrectionsMovedToAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type CorrectionsMovedToAvailableSubTotalCardIssuer1 string

const (
	CorrectionsMovedToAvailableSubTotalCardIssuer1Amex          CorrectionsMovedToAvailableSubTotalCardIssuer1 = "amex"
	CorrectionsMovedToAvailableSubTotalCardIssuer1Maestro       CorrectionsMovedToAvailableSubTotalCardIssuer1 = "maestro"
	CorrectionsMovedToAvailableSubTotalCardIssuer1CarteBancaire CorrectionsMovedToAvailableSubTotalCardIssuer1 = "carte-bancaire"
	CorrectionsMovedToAvailableSubTotalCardIssuer1Other         CorrectionsMovedToAvailableSubTotalCardIssuer1 = "other"
)

func (e CorrectionsMovedToAvailableSubTotalCardIssuer1) ToPointer() *CorrectionsMovedToAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *CorrectionsMovedToAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = CorrectionsMovedToAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsMovedToAvailableSubTotalCardIssuer1: %v", v)
	}
}

// CorrectionsMovedToAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type CorrectionsMovedToAvailableSubTotalCardAudience1 string

const (
	CorrectionsMovedToAvailableSubTotalCardAudience1Corporate CorrectionsMovedToAvailableSubTotalCardAudience1 = "corporate"
	CorrectionsMovedToAvailableSubTotalCardAudience1Other     CorrectionsMovedToAvailableSubTotalCardAudience1 = "other"
)

func (e CorrectionsMovedToAvailableSubTotalCardAudience1) ToPointer() *CorrectionsMovedToAvailableSubTotalCardAudience1 {
	return &e
}
func (e *CorrectionsMovedToAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = CorrectionsMovedToAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsMovedToAvailableSubTotalCardAudience1: %v", v)
	}
}

// CorrectionsMovedToAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type CorrectionsMovedToAvailableSubTotalCardRegion1 string

const (
	CorrectionsMovedToAvailableSubTotalCardRegion1IntraEea CorrectionsMovedToAvailableSubTotalCardRegion1 = "intra-eea"
	CorrectionsMovedToAvailableSubTotalCardRegion1IntraEu  CorrectionsMovedToAvailableSubTotalCardRegion1 = "intra-eu"
	CorrectionsMovedToAvailableSubTotalCardRegion1Domestic CorrectionsMovedToAvailableSubTotalCardRegion1 = "domestic"
	CorrectionsMovedToAvailableSubTotalCardRegion1Other    CorrectionsMovedToAvailableSubTotalCardRegion1 = "other"
)

func (e CorrectionsMovedToAvailableSubTotalCardRegion1) ToPointer() *CorrectionsMovedToAvailableSubTotalCardRegion1 {
	return &e
}
func (e *CorrectionsMovedToAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = CorrectionsMovedToAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsMovedToAvailableSubTotalCardRegion1: %v", v)
	}
}

// CorrectionsMovedToAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type CorrectionsMovedToAvailableSubTotalFeeType1 string

const (
	CorrectionsMovedToAvailableSubTotalFeeType1PaymentFee                                        CorrectionsMovedToAvailableSubTotalFeeType1 = "payment-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1DirectDebitFailureFee                             CorrectionsMovedToAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        CorrectionsMovedToAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  CorrectionsMovedToAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1PartnerCommission                                 CorrectionsMovedToAvailableSubTotalFeeType1 = "partner-commission"
	CorrectionsMovedToAvailableSubTotalFeeType1ApplicationFee                                    CorrectionsMovedToAvailableSubTotalFeeType1 = "application-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1CaptureFee                                        CorrectionsMovedToAvailableSubTotalFeeType1 = "capture-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1RefundFee                                         CorrectionsMovedToAvailableSubTotalFeeType1 = "refund-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1ChargebackFee                                     CorrectionsMovedToAvailableSubTotalFeeType1 = "chargeback-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1PaymentNotificationFee                            CorrectionsMovedToAvailableSubTotalFeeType1 = "payment-notification-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1TransferNotificationFee                           CorrectionsMovedToAvailableSubTotalFeeType1 = "transfer-notification-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1PayoutFee                                         CorrectionsMovedToAvailableSubTotalFeeType1 = "payout-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1FeeDiscount                                       CorrectionsMovedToAvailableSubTotalFeeType1 = "fee-discount"
	CorrectionsMovedToAvailableSubTotalFeeType1FeeReimbursement                                  CorrectionsMovedToAvailableSubTotalFeeType1 = "fee-reimbursement"
	CorrectionsMovedToAvailableSubTotalFeeType1PlatformVolumeFee                                 CorrectionsMovedToAvailableSubTotalFeeType1 = "platform-volume-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 CorrectionsMovedToAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1BalanceChargeFee                                  CorrectionsMovedToAvailableSubTotalFeeType1 = "balance-charge-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   CorrectionsMovedToAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1TerminalMonthlyFee                                CorrectionsMovedToAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1AcceptanceRiskFee                                 CorrectionsMovedToAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1TopUpFee                                          CorrectionsMovedToAvailableSubTotalFeeType1 = "top-up-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1PaymentGatewayFee                                 CorrectionsMovedToAvailableSubTotalFeeType1 = "payment-gateway-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   CorrectionsMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee CorrectionsMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             CorrectionsMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           CorrectionsMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	CorrectionsMovedToAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           CorrectionsMovedToAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e CorrectionsMovedToAvailableSubTotalFeeType1) ToPointer() *CorrectionsMovedToAvailableSubTotalFeeType1 {
	return &e
}
func (e *CorrectionsMovedToAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = CorrectionsMovedToAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsMovedToAvailableSubTotalFeeType1: %v", v)
	}
}

// CorrectionsMovedToAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type CorrectionsMovedToAvailableSubTotalPrepaymentPartType1 string

const (
	CorrectionsMovedToAvailableSubTotalPrepaymentPartType1Fee                     CorrectionsMovedToAvailableSubTotalPrepaymentPartType1 = "fee"
	CorrectionsMovedToAvailableSubTotalPrepaymentPartType1FeeReimbursement        CorrectionsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	CorrectionsMovedToAvailableSubTotalPrepaymentPartType1FeeDiscount             CorrectionsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	CorrectionsMovedToAvailableSubTotalPrepaymentPartType1FeeVat                  CorrectionsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	CorrectionsMovedToAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation CorrectionsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e CorrectionsMovedToAvailableSubTotalPrepaymentPartType1) ToPointer() *CorrectionsMovedToAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *CorrectionsMovedToAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = CorrectionsMovedToAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsMovedToAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// CorrectionsMovedToAvailableSubTotalTransactionType1 - Represents the transaction type
type CorrectionsMovedToAvailableSubTotalTransactionType1 string

const (
	CorrectionsMovedToAvailableSubTotalTransactionType1Payment                           CorrectionsMovedToAvailableSubTotalTransactionType1 = "payment"
	CorrectionsMovedToAvailableSubTotalTransactionType1SplitPayment                      CorrectionsMovedToAvailableSubTotalTransactionType1 = "split-payment"
	CorrectionsMovedToAvailableSubTotalTransactionType1FailedPayment                     CorrectionsMovedToAvailableSubTotalTransactionType1 = "failed-payment"
	CorrectionsMovedToAvailableSubTotalTransactionType1FailedPlatformSplitPayment        CorrectionsMovedToAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	CorrectionsMovedToAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    CorrectionsMovedToAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	CorrectionsMovedToAvailableSubTotalTransactionType1Capture                           CorrectionsMovedToAvailableSubTotalTransactionType1 = "capture"
	CorrectionsMovedToAvailableSubTotalTransactionType1SplitTransaction                  CorrectionsMovedToAvailableSubTotalTransactionType1 = "split-transaction"
	CorrectionsMovedToAvailableSubTotalTransactionType1Refund                            CorrectionsMovedToAvailableSubTotalTransactionType1 = "refund"
	CorrectionsMovedToAvailableSubTotalTransactionType1PlatformPaymentRefund             CorrectionsMovedToAvailableSubTotalTransactionType1 = "platform-payment-refund"
	CorrectionsMovedToAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     CorrectionsMovedToAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	CorrectionsMovedToAvailableSubTotalTransactionType1RefundCompensation                CorrectionsMovedToAvailableSubTotalTransactionType1 = "refund-compensation"
	CorrectionsMovedToAvailableSubTotalTransactionType1ReturnedRefundCompensation        CorrectionsMovedToAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	CorrectionsMovedToAvailableSubTotalTransactionType1ReturnedRefund                    CorrectionsMovedToAvailableSubTotalTransactionType1 = "returned-refund"
	CorrectionsMovedToAvailableSubTotalTransactionType1Chargeback                        CorrectionsMovedToAvailableSubTotalTransactionType1 = "chargeback"
	CorrectionsMovedToAvailableSubTotalTransactionType1ChargebackReversal                CorrectionsMovedToAvailableSubTotalTransactionType1 = "chargeback-reversal"
	CorrectionsMovedToAvailableSubTotalTransactionType1ChargebackCompensation            CorrectionsMovedToAvailableSubTotalTransactionType1 = "chargeback-compensation"
	CorrectionsMovedToAvailableSubTotalTransactionType1ReversedChargebackCompensation    CorrectionsMovedToAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	CorrectionsMovedToAvailableSubTotalTransactionType1PlatformPaymentChargeback         CorrectionsMovedToAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	CorrectionsMovedToAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback CorrectionsMovedToAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	CorrectionsMovedToAvailableSubTotalTransactionType1FeePrepayment                     CorrectionsMovedToAvailableSubTotalTransactionType1 = "fee-prepayment"
	CorrectionsMovedToAvailableSubTotalTransactionType1OutgoingTransfer                  CorrectionsMovedToAvailableSubTotalTransactionType1 = "outgoing-transfer"
	CorrectionsMovedToAvailableSubTotalTransactionType1IncomingTransfer                  CorrectionsMovedToAvailableSubTotalTransactionType1 = "incoming-transfer"
	CorrectionsMovedToAvailableSubTotalTransactionType1CanceledTransfer                  CorrectionsMovedToAvailableSubTotalTransactionType1 = "canceled-transfer"
	CorrectionsMovedToAvailableSubTotalTransactionType1ReturnedTransfer                  CorrectionsMovedToAvailableSubTotalTransactionType1 = "returned-transfer"
	CorrectionsMovedToAvailableSubTotalTransactionType1BalanceReserve                    CorrectionsMovedToAvailableSubTotalTransactionType1 = "balance-reserve"
	CorrectionsMovedToAvailableSubTotalTransactionType1BalanceReserveReturn              CorrectionsMovedToAvailableSubTotalTransactionType1 = "balance-reserve-return"
	CorrectionsMovedToAvailableSubTotalTransactionType1InvoiceRoundingCompensation       CorrectionsMovedToAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	CorrectionsMovedToAvailableSubTotalTransactionType1RollingReserveHold                CorrectionsMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	CorrectionsMovedToAvailableSubTotalTransactionType1RollingReserveRelease             CorrectionsMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	CorrectionsMovedToAvailableSubTotalTransactionType1BalanceCorrection                 CorrectionsMovedToAvailableSubTotalTransactionType1 = "balance-correction"
	CorrectionsMovedToAvailableSubTotalTransactionType1Repayment                         CorrectionsMovedToAvailableSubTotalTransactionType1 = "repayment"
	CorrectionsMovedToAvailableSubTotalTransactionType1Loan                              CorrectionsMovedToAvailableSubTotalTransactionType1 = "loan"
	CorrectionsMovedToAvailableSubTotalTransactionType1BalanceTopup                      CorrectionsMovedToAvailableSubTotalTransactionType1 = "balance-topup"
	CorrectionsMovedToAvailableSubTotalTransactionType1CashCollateralIssuance            CorrectionsMovedToAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	CorrectionsMovedToAvailableSubTotalTransactionType1CashCollateralRelease             CorrectionsMovedToAvailableSubTotalTransactionType1 = "cash-collateral-release"
	CorrectionsMovedToAvailableSubTotalTransactionType1PendingRollingReserve             CorrectionsMovedToAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	CorrectionsMovedToAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        CorrectionsMovedToAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	CorrectionsMovedToAvailableSubTotalTransactionType1HeldRollingReserve                CorrectionsMovedToAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	CorrectionsMovedToAvailableSubTotalTransactionType1ReleasedRollingReserve            CorrectionsMovedToAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e CorrectionsMovedToAvailableSubTotalTransactionType1) ToPointer() *CorrectionsMovedToAvailableSubTotalTransactionType1 {
	return &e
}
func (e *CorrectionsMovedToAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = CorrectionsMovedToAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsMovedToAvailableSubTotalTransactionType1: %v", v)
	}
}

type CorrectionsMovedToAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *CorrectionsMovedToAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *CorrectionsMovedToAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *CorrectionsMovedToAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *CorrectionsMovedToAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *CorrectionsMovedToAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *CorrectionsMovedToAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *CorrectionsMovedToAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *CorrectionsMovedToAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *CorrectionsMovedToAvailableSubTotal1) GetMethod() *CorrectionsMovedToAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CorrectionsMovedToAvailableSubTotal1) GetCardIssuer() *CorrectionsMovedToAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *CorrectionsMovedToAvailableSubTotal1) GetCardAudience() *CorrectionsMovedToAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *CorrectionsMovedToAvailableSubTotal1) GetCardRegion() *CorrectionsMovedToAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *CorrectionsMovedToAvailableSubTotal1) GetFeeType() *CorrectionsMovedToAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *CorrectionsMovedToAvailableSubTotal1) GetPrepaymentPartType() *CorrectionsMovedToAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *CorrectionsMovedToAvailableSubTotal1) GetTransactionType() *CorrectionsMovedToAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// CorrectionsMovedToAvailableSubtotalMethod2 - Payment type of the transactions
type CorrectionsMovedToAvailableSubtotalMethod2 string

const (
	CorrectionsMovedToAvailableSubtotalMethod2Alma              CorrectionsMovedToAvailableSubtotalMethod2 = "alma"
	CorrectionsMovedToAvailableSubtotalMethod2Bacs              CorrectionsMovedToAvailableSubtotalMethod2 = "bacs"
	CorrectionsMovedToAvailableSubtotalMethod2Applepay          CorrectionsMovedToAvailableSubtotalMethod2 = "applepay"
	CorrectionsMovedToAvailableSubtotalMethod2Bancomatpay       CorrectionsMovedToAvailableSubtotalMethod2 = "bancomatpay"
	CorrectionsMovedToAvailableSubtotalMethod2Bancontact        CorrectionsMovedToAvailableSubtotalMethod2 = "bancontact"
	CorrectionsMovedToAvailableSubtotalMethod2Banktransfer      CorrectionsMovedToAvailableSubtotalMethod2 = "banktransfer"
	CorrectionsMovedToAvailableSubtotalMethod2Belfius           CorrectionsMovedToAvailableSubtotalMethod2 = "belfius"
	CorrectionsMovedToAvailableSubtotalMethod2Billie            CorrectionsMovedToAvailableSubtotalMethod2 = "billie"
	CorrectionsMovedToAvailableSubtotalMethod2Bizum             CorrectionsMovedToAvailableSubtotalMethod2 = "bizum"
	CorrectionsMovedToAvailableSubtotalMethod2Bitcoin           CorrectionsMovedToAvailableSubtotalMethod2 = "bitcoin"
	CorrectionsMovedToAvailableSubtotalMethod2Blik              CorrectionsMovedToAvailableSubtotalMethod2 = "blik"
	CorrectionsMovedToAvailableSubtotalMethod2Creditcard        CorrectionsMovedToAvailableSubtotalMethod2 = "creditcard"
	CorrectionsMovedToAvailableSubtotalMethod2Directdebit       CorrectionsMovedToAvailableSubtotalMethod2 = "directdebit"
	CorrectionsMovedToAvailableSubtotalMethod2Eps               CorrectionsMovedToAvailableSubtotalMethod2 = "eps"
	CorrectionsMovedToAvailableSubtotalMethod2Giftcard          CorrectionsMovedToAvailableSubtotalMethod2 = "giftcard"
	CorrectionsMovedToAvailableSubtotalMethod2Giropay           CorrectionsMovedToAvailableSubtotalMethod2 = "giropay"
	CorrectionsMovedToAvailableSubtotalMethod2Googlepay         CorrectionsMovedToAvailableSubtotalMethod2 = "googlepay"
	CorrectionsMovedToAvailableSubtotalMethod2Ideal             CorrectionsMovedToAvailableSubtotalMethod2 = "ideal"
	CorrectionsMovedToAvailableSubtotalMethod2In3               CorrectionsMovedToAvailableSubtotalMethod2 = "in3"
	CorrectionsMovedToAvailableSubtotalMethod2Inghomepay        CorrectionsMovedToAvailableSubtotalMethod2 = "inghomepay"
	CorrectionsMovedToAvailableSubtotalMethod2Kbc               CorrectionsMovedToAvailableSubtotalMethod2 = "kbc"
	CorrectionsMovedToAvailableSubtotalMethod2Klarnapaylater    CorrectionsMovedToAvailableSubtotalMethod2 = "klarnapaylater"
	CorrectionsMovedToAvailableSubtotalMethod2Klarnapaynow      CorrectionsMovedToAvailableSubtotalMethod2 = "klarnapaynow"
	CorrectionsMovedToAvailableSubtotalMethod2Klarnasliceit     CorrectionsMovedToAvailableSubtotalMethod2 = "klarnasliceit"
	CorrectionsMovedToAvailableSubtotalMethod2Klarna            CorrectionsMovedToAvailableSubtotalMethod2 = "klarna"
	CorrectionsMovedToAvailableSubtotalMethod2Mbway             CorrectionsMovedToAvailableSubtotalMethod2 = "mbway"
	CorrectionsMovedToAvailableSubtotalMethod2Multibanco        CorrectionsMovedToAvailableSubtotalMethod2 = "multibanco"
	CorrectionsMovedToAvailableSubtotalMethod2Mybank            CorrectionsMovedToAvailableSubtotalMethod2 = "mybank"
	CorrectionsMovedToAvailableSubtotalMethod2Paybybank         CorrectionsMovedToAvailableSubtotalMethod2 = "paybybank"
	CorrectionsMovedToAvailableSubtotalMethod2Payconiq          CorrectionsMovedToAvailableSubtotalMethod2 = "payconiq"
	CorrectionsMovedToAvailableSubtotalMethod2Paypal            CorrectionsMovedToAvailableSubtotalMethod2 = "paypal"
	CorrectionsMovedToAvailableSubtotalMethod2Paysafecard       CorrectionsMovedToAvailableSubtotalMethod2 = "paysafecard"
	CorrectionsMovedToAvailableSubtotalMethod2Przelewy24        CorrectionsMovedToAvailableSubtotalMethod2 = "przelewy24"
	CorrectionsMovedToAvailableSubtotalMethod2Riverty           CorrectionsMovedToAvailableSubtotalMethod2 = "riverty"
	CorrectionsMovedToAvailableSubtotalMethod2Satispay          CorrectionsMovedToAvailableSubtotalMethod2 = "satispay"
	CorrectionsMovedToAvailableSubtotalMethod2Podiumcadeaukaart CorrectionsMovedToAvailableSubtotalMethod2 = "podiumcadeaukaart"
	CorrectionsMovedToAvailableSubtotalMethod2Pointofsale       CorrectionsMovedToAvailableSubtotalMethod2 = "pointofsale"
	CorrectionsMovedToAvailableSubtotalMethod2Sofort            CorrectionsMovedToAvailableSubtotalMethod2 = "sofort"
	CorrectionsMovedToAvailableSubtotalMethod2Swish             CorrectionsMovedToAvailableSubtotalMethod2 = "swish"
	CorrectionsMovedToAvailableSubtotalMethod2Trustly           CorrectionsMovedToAvailableSubtotalMethod2 = "trustly"
	CorrectionsMovedToAvailableSubtotalMethod2Twint             CorrectionsMovedToAvailableSubtotalMethod2 = "twint"
	CorrectionsMovedToAvailableSubtotalMethod2Voucher           CorrectionsMovedToAvailableSubtotalMethod2 = "voucher"
)

func (e CorrectionsMovedToAvailableSubtotalMethod2) ToPointer() *CorrectionsMovedToAvailableSubtotalMethod2 {
	return &e
}
func (e *CorrectionsMovedToAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = CorrectionsMovedToAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsMovedToAvailableSubtotalMethod2: %v", v)
	}
}

// CorrectionsMovedToAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type CorrectionsMovedToAvailableSubtotalCardIssuer2 string

const (
	CorrectionsMovedToAvailableSubtotalCardIssuer2Amex          CorrectionsMovedToAvailableSubtotalCardIssuer2 = "amex"
	CorrectionsMovedToAvailableSubtotalCardIssuer2Maestro       CorrectionsMovedToAvailableSubtotalCardIssuer2 = "maestro"
	CorrectionsMovedToAvailableSubtotalCardIssuer2CarteBancaire CorrectionsMovedToAvailableSubtotalCardIssuer2 = "carte-bancaire"
	CorrectionsMovedToAvailableSubtotalCardIssuer2Other         CorrectionsMovedToAvailableSubtotalCardIssuer2 = "other"
)

func (e CorrectionsMovedToAvailableSubtotalCardIssuer2) ToPointer() *CorrectionsMovedToAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *CorrectionsMovedToAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = CorrectionsMovedToAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsMovedToAvailableSubtotalCardIssuer2: %v", v)
	}
}

// CorrectionsMovedToAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type CorrectionsMovedToAvailableSubtotalCardAudience2 string

const (
	CorrectionsMovedToAvailableSubtotalCardAudience2Corporate CorrectionsMovedToAvailableSubtotalCardAudience2 = "corporate"
	CorrectionsMovedToAvailableSubtotalCardAudience2Other     CorrectionsMovedToAvailableSubtotalCardAudience2 = "other"
)

func (e CorrectionsMovedToAvailableSubtotalCardAudience2) ToPointer() *CorrectionsMovedToAvailableSubtotalCardAudience2 {
	return &e
}
func (e *CorrectionsMovedToAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = CorrectionsMovedToAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsMovedToAvailableSubtotalCardAudience2: %v", v)
	}
}

// CorrectionsMovedToAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type CorrectionsMovedToAvailableSubtotalCardRegion2 string

const (
	CorrectionsMovedToAvailableSubtotalCardRegion2IntraEea CorrectionsMovedToAvailableSubtotalCardRegion2 = "intra-eea"
	CorrectionsMovedToAvailableSubtotalCardRegion2IntraEu  CorrectionsMovedToAvailableSubtotalCardRegion2 = "intra-eu"
	CorrectionsMovedToAvailableSubtotalCardRegion2Domestic CorrectionsMovedToAvailableSubtotalCardRegion2 = "domestic"
	CorrectionsMovedToAvailableSubtotalCardRegion2Other    CorrectionsMovedToAvailableSubtotalCardRegion2 = "other"
)

func (e CorrectionsMovedToAvailableSubtotalCardRegion2) ToPointer() *CorrectionsMovedToAvailableSubtotalCardRegion2 {
	return &e
}
func (e *CorrectionsMovedToAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = CorrectionsMovedToAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsMovedToAvailableSubtotalCardRegion2: %v", v)
	}
}

// CorrectionsMovedToAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type CorrectionsMovedToAvailableSubtotalFeeType2 string

const (
	CorrectionsMovedToAvailableSubtotalFeeType2PaymentFee                                        CorrectionsMovedToAvailableSubtotalFeeType2 = "payment-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2DirectDebitFailureFee                             CorrectionsMovedToAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        CorrectionsMovedToAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  CorrectionsMovedToAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2PartnerCommission                                 CorrectionsMovedToAvailableSubtotalFeeType2 = "partner-commission"
	CorrectionsMovedToAvailableSubtotalFeeType2ApplicationFee                                    CorrectionsMovedToAvailableSubtotalFeeType2 = "application-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2CaptureFee                                        CorrectionsMovedToAvailableSubtotalFeeType2 = "capture-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2RefundFee                                         CorrectionsMovedToAvailableSubtotalFeeType2 = "refund-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2ChargebackFee                                     CorrectionsMovedToAvailableSubtotalFeeType2 = "chargeback-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2PaymentNotificationFee                            CorrectionsMovedToAvailableSubtotalFeeType2 = "payment-notification-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2TransferNotificationFee                           CorrectionsMovedToAvailableSubtotalFeeType2 = "transfer-notification-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2PayoutFee                                         CorrectionsMovedToAvailableSubtotalFeeType2 = "payout-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2FeeDiscount                                       CorrectionsMovedToAvailableSubtotalFeeType2 = "fee-discount"
	CorrectionsMovedToAvailableSubtotalFeeType2FeeReimbursement                                  CorrectionsMovedToAvailableSubtotalFeeType2 = "fee-reimbursement"
	CorrectionsMovedToAvailableSubtotalFeeType2PlatformVolumeFee                                 CorrectionsMovedToAvailableSubtotalFeeType2 = "platform-volume-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 CorrectionsMovedToAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2BalanceChargeFee                                  CorrectionsMovedToAvailableSubtotalFeeType2 = "balance-charge-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   CorrectionsMovedToAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2TerminalMonthlyFee                                CorrectionsMovedToAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2AcceptanceRiskFee                                 CorrectionsMovedToAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2TopUpFee                                          CorrectionsMovedToAvailableSubtotalFeeType2 = "top-up-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2PaymentGatewayFee                                 CorrectionsMovedToAvailableSubtotalFeeType2 = "payment-gateway-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   CorrectionsMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee CorrectionsMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             CorrectionsMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           CorrectionsMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	CorrectionsMovedToAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           CorrectionsMovedToAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e CorrectionsMovedToAvailableSubtotalFeeType2) ToPointer() *CorrectionsMovedToAvailableSubtotalFeeType2 {
	return &e
}
func (e *CorrectionsMovedToAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = CorrectionsMovedToAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsMovedToAvailableSubtotalFeeType2: %v", v)
	}
}

// CorrectionsMovedToAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type CorrectionsMovedToAvailableSubtotalPrepaymentPartType2 string

const (
	CorrectionsMovedToAvailableSubtotalPrepaymentPartType2Fee                     CorrectionsMovedToAvailableSubtotalPrepaymentPartType2 = "fee"
	CorrectionsMovedToAvailableSubtotalPrepaymentPartType2FeeReimbursement        CorrectionsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	CorrectionsMovedToAvailableSubtotalPrepaymentPartType2FeeDiscount             CorrectionsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	CorrectionsMovedToAvailableSubtotalPrepaymentPartType2FeeVat                  CorrectionsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	CorrectionsMovedToAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation CorrectionsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e CorrectionsMovedToAvailableSubtotalPrepaymentPartType2) ToPointer() *CorrectionsMovedToAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *CorrectionsMovedToAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = CorrectionsMovedToAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsMovedToAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// CorrectionsMovedToAvailableSubtotalTransactionType2 - Represents the transaction type
type CorrectionsMovedToAvailableSubtotalTransactionType2 string

const (
	CorrectionsMovedToAvailableSubtotalTransactionType2Payment                           CorrectionsMovedToAvailableSubtotalTransactionType2 = "payment"
	CorrectionsMovedToAvailableSubtotalTransactionType2SplitPayment                      CorrectionsMovedToAvailableSubtotalTransactionType2 = "split-payment"
	CorrectionsMovedToAvailableSubtotalTransactionType2FailedPayment                     CorrectionsMovedToAvailableSubtotalTransactionType2 = "failed-payment"
	CorrectionsMovedToAvailableSubtotalTransactionType2FailedPlatformSplitPayment        CorrectionsMovedToAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	CorrectionsMovedToAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    CorrectionsMovedToAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	CorrectionsMovedToAvailableSubtotalTransactionType2Capture                           CorrectionsMovedToAvailableSubtotalTransactionType2 = "capture"
	CorrectionsMovedToAvailableSubtotalTransactionType2SplitTransaction                  CorrectionsMovedToAvailableSubtotalTransactionType2 = "split-transaction"
	CorrectionsMovedToAvailableSubtotalTransactionType2Refund                            CorrectionsMovedToAvailableSubtotalTransactionType2 = "refund"
	CorrectionsMovedToAvailableSubtotalTransactionType2PlatformPaymentRefund             CorrectionsMovedToAvailableSubtotalTransactionType2 = "platform-payment-refund"
	CorrectionsMovedToAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     CorrectionsMovedToAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	CorrectionsMovedToAvailableSubtotalTransactionType2RefundCompensation                CorrectionsMovedToAvailableSubtotalTransactionType2 = "refund-compensation"
	CorrectionsMovedToAvailableSubtotalTransactionType2ReturnedRefundCompensation        CorrectionsMovedToAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	CorrectionsMovedToAvailableSubtotalTransactionType2ReturnedRefund                    CorrectionsMovedToAvailableSubtotalTransactionType2 = "returned-refund"
	CorrectionsMovedToAvailableSubtotalTransactionType2Chargeback                        CorrectionsMovedToAvailableSubtotalTransactionType2 = "chargeback"
	CorrectionsMovedToAvailableSubtotalTransactionType2ChargebackReversal                CorrectionsMovedToAvailableSubtotalTransactionType2 = "chargeback-reversal"
	CorrectionsMovedToAvailableSubtotalTransactionType2ChargebackCompensation            CorrectionsMovedToAvailableSubtotalTransactionType2 = "chargeback-compensation"
	CorrectionsMovedToAvailableSubtotalTransactionType2ReversedChargebackCompensation    CorrectionsMovedToAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	CorrectionsMovedToAvailableSubtotalTransactionType2PlatformPaymentChargeback         CorrectionsMovedToAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	CorrectionsMovedToAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback CorrectionsMovedToAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	CorrectionsMovedToAvailableSubtotalTransactionType2FeePrepayment                     CorrectionsMovedToAvailableSubtotalTransactionType2 = "fee-prepayment"
	CorrectionsMovedToAvailableSubtotalTransactionType2OutgoingTransfer                  CorrectionsMovedToAvailableSubtotalTransactionType2 = "outgoing-transfer"
	CorrectionsMovedToAvailableSubtotalTransactionType2IncomingTransfer                  CorrectionsMovedToAvailableSubtotalTransactionType2 = "incoming-transfer"
	CorrectionsMovedToAvailableSubtotalTransactionType2CanceledTransfer                  CorrectionsMovedToAvailableSubtotalTransactionType2 = "canceled-transfer"
	CorrectionsMovedToAvailableSubtotalTransactionType2ReturnedTransfer                  CorrectionsMovedToAvailableSubtotalTransactionType2 = "returned-transfer"
	CorrectionsMovedToAvailableSubtotalTransactionType2BalanceReserve                    CorrectionsMovedToAvailableSubtotalTransactionType2 = "balance-reserve"
	CorrectionsMovedToAvailableSubtotalTransactionType2BalanceReserveReturn              CorrectionsMovedToAvailableSubtotalTransactionType2 = "balance-reserve-return"
	CorrectionsMovedToAvailableSubtotalTransactionType2InvoiceRoundingCompensation       CorrectionsMovedToAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	CorrectionsMovedToAvailableSubtotalTransactionType2RollingReserveHold                CorrectionsMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	CorrectionsMovedToAvailableSubtotalTransactionType2RollingReserveRelease             CorrectionsMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	CorrectionsMovedToAvailableSubtotalTransactionType2BalanceCorrection                 CorrectionsMovedToAvailableSubtotalTransactionType2 = "balance-correction"
	CorrectionsMovedToAvailableSubtotalTransactionType2Repayment                         CorrectionsMovedToAvailableSubtotalTransactionType2 = "repayment"
	CorrectionsMovedToAvailableSubtotalTransactionType2Loan                              CorrectionsMovedToAvailableSubtotalTransactionType2 = "loan"
	CorrectionsMovedToAvailableSubtotalTransactionType2BalanceTopup                      CorrectionsMovedToAvailableSubtotalTransactionType2 = "balance-topup"
	CorrectionsMovedToAvailableSubtotalTransactionType2CashCollateralIssuance            CorrectionsMovedToAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	CorrectionsMovedToAvailableSubtotalTransactionType2CashCollateralRelease             CorrectionsMovedToAvailableSubtotalTransactionType2 = "cash-collateral-release"
	CorrectionsMovedToAvailableSubtotalTransactionType2PendingRollingReserve             CorrectionsMovedToAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	CorrectionsMovedToAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        CorrectionsMovedToAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	CorrectionsMovedToAvailableSubtotalTransactionType2HeldRollingReserve                CorrectionsMovedToAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	CorrectionsMovedToAvailableSubtotalTransactionType2ReleasedRollingReserve            CorrectionsMovedToAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e CorrectionsMovedToAvailableSubtotalTransactionType2) ToPointer() *CorrectionsMovedToAvailableSubtotalTransactionType2 {
	return &e
}
func (e *CorrectionsMovedToAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = CorrectionsMovedToAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsMovedToAvailableSubtotalTransactionType2: %v", v)
	}
}

type CorrectionsMovedToAvailableSubtotal2 struct {
	SubTotals []CorrectionsMovedToAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *CorrectionsMovedToAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *CorrectionsMovedToAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *CorrectionsMovedToAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *CorrectionsMovedToAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *CorrectionsMovedToAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *CorrectionsMovedToAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *CorrectionsMovedToAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *CorrectionsMovedToAvailableSubtotal2) GetSubTotals() []CorrectionsMovedToAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *CorrectionsMovedToAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *CorrectionsMovedToAvailableSubtotal2) GetMethod() *CorrectionsMovedToAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CorrectionsMovedToAvailableSubtotal2) GetCardIssuer() *CorrectionsMovedToAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *CorrectionsMovedToAvailableSubtotal2) GetCardAudience() *CorrectionsMovedToAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *CorrectionsMovedToAvailableSubtotal2) GetCardRegion() *CorrectionsMovedToAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *CorrectionsMovedToAvailableSubtotal2) GetFeeType() *CorrectionsMovedToAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *CorrectionsMovedToAvailableSubtotal2) GetPrepaymentPartType() *CorrectionsMovedToAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *CorrectionsMovedToAvailableSubtotal2) GetTransactionType() *CorrectionsMovedToAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type CorrectionsMovedToAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *CorrectionsMovedToAvailableAmount     `json:"amount,omitempty"`
	Subtotals []CorrectionsMovedToAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *CorrectionsMovedToAvailable) GetAmount() *CorrectionsMovedToAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CorrectionsMovedToAvailable) GetSubtotals() []CorrectionsMovedToAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// CorrectionsImmediatelyAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type CorrectionsImmediatelyAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CorrectionsImmediatelyAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CorrectionsImmediatelyAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CorrectionsImmediatelyAvailableSubTotalMethod1 - Payment type of the transactions
type CorrectionsImmediatelyAvailableSubTotalMethod1 string

const (
	CorrectionsImmediatelyAvailableSubTotalMethod1Alma              CorrectionsImmediatelyAvailableSubTotalMethod1 = "alma"
	CorrectionsImmediatelyAvailableSubTotalMethod1Bacs              CorrectionsImmediatelyAvailableSubTotalMethod1 = "bacs"
	CorrectionsImmediatelyAvailableSubTotalMethod1Applepay          CorrectionsImmediatelyAvailableSubTotalMethod1 = "applepay"
	CorrectionsImmediatelyAvailableSubTotalMethod1Bancomatpay       CorrectionsImmediatelyAvailableSubTotalMethod1 = "bancomatpay"
	CorrectionsImmediatelyAvailableSubTotalMethod1Bancontact        CorrectionsImmediatelyAvailableSubTotalMethod1 = "bancontact"
	CorrectionsImmediatelyAvailableSubTotalMethod1Banktransfer      CorrectionsImmediatelyAvailableSubTotalMethod1 = "banktransfer"
	CorrectionsImmediatelyAvailableSubTotalMethod1Belfius           CorrectionsImmediatelyAvailableSubTotalMethod1 = "belfius"
	CorrectionsImmediatelyAvailableSubTotalMethod1Billie            CorrectionsImmediatelyAvailableSubTotalMethod1 = "billie"
	CorrectionsImmediatelyAvailableSubTotalMethod1Bizum             CorrectionsImmediatelyAvailableSubTotalMethod1 = "bizum"
	CorrectionsImmediatelyAvailableSubTotalMethod1Bitcoin           CorrectionsImmediatelyAvailableSubTotalMethod1 = "bitcoin"
	CorrectionsImmediatelyAvailableSubTotalMethod1Blik              CorrectionsImmediatelyAvailableSubTotalMethod1 = "blik"
	CorrectionsImmediatelyAvailableSubTotalMethod1Creditcard        CorrectionsImmediatelyAvailableSubTotalMethod1 = "creditcard"
	CorrectionsImmediatelyAvailableSubTotalMethod1Directdebit       CorrectionsImmediatelyAvailableSubTotalMethod1 = "directdebit"
	CorrectionsImmediatelyAvailableSubTotalMethod1Eps               CorrectionsImmediatelyAvailableSubTotalMethod1 = "eps"
	CorrectionsImmediatelyAvailableSubTotalMethod1Giftcard          CorrectionsImmediatelyAvailableSubTotalMethod1 = "giftcard"
	CorrectionsImmediatelyAvailableSubTotalMethod1Giropay           CorrectionsImmediatelyAvailableSubTotalMethod1 = "giropay"
	CorrectionsImmediatelyAvailableSubTotalMethod1Googlepay         CorrectionsImmediatelyAvailableSubTotalMethod1 = "googlepay"
	CorrectionsImmediatelyAvailableSubTotalMethod1Ideal             CorrectionsImmediatelyAvailableSubTotalMethod1 = "ideal"
	CorrectionsImmediatelyAvailableSubTotalMethod1In3               CorrectionsImmediatelyAvailableSubTotalMethod1 = "in3"
	CorrectionsImmediatelyAvailableSubTotalMethod1Inghomepay        CorrectionsImmediatelyAvailableSubTotalMethod1 = "inghomepay"
	CorrectionsImmediatelyAvailableSubTotalMethod1Kbc               CorrectionsImmediatelyAvailableSubTotalMethod1 = "kbc"
	CorrectionsImmediatelyAvailableSubTotalMethod1Klarnapaylater    CorrectionsImmediatelyAvailableSubTotalMethod1 = "klarnapaylater"
	CorrectionsImmediatelyAvailableSubTotalMethod1Klarnapaynow      CorrectionsImmediatelyAvailableSubTotalMethod1 = "klarnapaynow"
	CorrectionsImmediatelyAvailableSubTotalMethod1Klarnasliceit     CorrectionsImmediatelyAvailableSubTotalMethod1 = "klarnasliceit"
	CorrectionsImmediatelyAvailableSubTotalMethod1Klarna            CorrectionsImmediatelyAvailableSubTotalMethod1 = "klarna"
	CorrectionsImmediatelyAvailableSubTotalMethod1Mbway             CorrectionsImmediatelyAvailableSubTotalMethod1 = "mbway"
	CorrectionsImmediatelyAvailableSubTotalMethod1Multibanco        CorrectionsImmediatelyAvailableSubTotalMethod1 = "multibanco"
	CorrectionsImmediatelyAvailableSubTotalMethod1Mybank            CorrectionsImmediatelyAvailableSubTotalMethod1 = "mybank"
	CorrectionsImmediatelyAvailableSubTotalMethod1Paybybank         CorrectionsImmediatelyAvailableSubTotalMethod1 = "paybybank"
	CorrectionsImmediatelyAvailableSubTotalMethod1Payconiq          CorrectionsImmediatelyAvailableSubTotalMethod1 = "payconiq"
	CorrectionsImmediatelyAvailableSubTotalMethod1Paypal            CorrectionsImmediatelyAvailableSubTotalMethod1 = "paypal"
	CorrectionsImmediatelyAvailableSubTotalMethod1Paysafecard       CorrectionsImmediatelyAvailableSubTotalMethod1 = "paysafecard"
	CorrectionsImmediatelyAvailableSubTotalMethod1Przelewy24        CorrectionsImmediatelyAvailableSubTotalMethod1 = "przelewy24"
	CorrectionsImmediatelyAvailableSubTotalMethod1Riverty           CorrectionsImmediatelyAvailableSubTotalMethod1 = "riverty"
	CorrectionsImmediatelyAvailableSubTotalMethod1Satispay          CorrectionsImmediatelyAvailableSubTotalMethod1 = "satispay"
	CorrectionsImmediatelyAvailableSubTotalMethod1Podiumcadeaukaart CorrectionsImmediatelyAvailableSubTotalMethod1 = "podiumcadeaukaart"
	CorrectionsImmediatelyAvailableSubTotalMethod1Pointofsale       CorrectionsImmediatelyAvailableSubTotalMethod1 = "pointofsale"
	CorrectionsImmediatelyAvailableSubTotalMethod1Sofort            CorrectionsImmediatelyAvailableSubTotalMethod1 = "sofort"
	CorrectionsImmediatelyAvailableSubTotalMethod1Swish             CorrectionsImmediatelyAvailableSubTotalMethod1 = "swish"
	CorrectionsImmediatelyAvailableSubTotalMethod1Trustly           CorrectionsImmediatelyAvailableSubTotalMethod1 = "trustly"
	CorrectionsImmediatelyAvailableSubTotalMethod1Twint             CorrectionsImmediatelyAvailableSubTotalMethod1 = "twint"
	CorrectionsImmediatelyAvailableSubTotalMethod1Voucher           CorrectionsImmediatelyAvailableSubTotalMethod1 = "voucher"
)

func (e CorrectionsImmediatelyAvailableSubTotalMethod1) ToPointer() *CorrectionsImmediatelyAvailableSubTotalMethod1 {
	return &e
}
func (e *CorrectionsImmediatelyAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = CorrectionsImmediatelyAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsImmediatelyAvailableSubTotalMethod1: %v", v)
	}
}

// CorrectionsImmediatelyAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type CorrectionsImmediatelyAvailableSubTotalCardIssuer1 string

const (
	CorrectionsImmediatelyAvailableSubTotalCardIssuer1Amex          CorrectionsImmediatelyAvailableSubTotalCardIssuer1 = "amex"
	CorrectionsImmediatelyAvailableSubTotalCardIssuer1Maestro       CorrectionsImmediatelyAvailableSubTotalCardIssuer1 = "maestro"
	CorrectionsImmediatelyAvailableSubTotalCardIssuer1CarteBancaire CorrectionsImmediatelyAvailableSubTotalCardIssuer1 = "carte-bancaire"
	CorrectionsImmediatelyAvailableSubTotalCardIssuer1Other         CorrectionsImmediatelyAvailableSubTotalCardIssuer1 = "other"
)

func (e CorrectionsImmediatelyAvailableSubTotalCardIssuer1) ToPointer() *CorrectionsImmediatelyAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *CorrectionsImmediatelyAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = CorrectionsImmediatelyAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsImmediatelyAvailableSubTotalCardIssuer1: %v", v)
	}
}

// CorrectionsImmediatelyAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type CorrectionsImmediatelyAvailableSubTotalCardAudience1 string

const (
	CorrectionsImmediatelyAvailableSubTotalCardAudience1Corporate CorrectionsImmediatelyAvailableSubTotalCardAudience1 = "corporate"
	CorrectionsImmediatelyAvailableSubTotalCardAudience1Other     CorrectionsImmediatelyAvailableSubTotalCardAudience1 = "other"
)

func (e CorrectionsImmediatelyAvailableSubTotalCardAudience1) ToPointer() *CorrectionsImmediatelyAvailableSubTotalCardAudience1 {
	return &e
}
func (e *CorrectionsImmediatelyAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = CorrectionsImmediatelyAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsImmediatelyAvailableSubTotalCardAudience1: %v", v)
	}
}

// CorrectionsImmediatelyAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type CorrectionsImmediatelyAvailableSubTotalCardRegion1 string

const (
	CorrectionsImmediatelyAvailableSubTotalCardRegion1IntraEea CorrectionsImmediatelyAvailableSubTotalCardRegion1 = "intra-eea"
	CorrectionsImmediatelyAvailableSubTotalCardRegion1IntraEu  CorrectionsImmediatelyAvailableSubTotalCardRegion1 = "intra-eu"
	CorrectionsImmediatelyAvailableSubTotalCardRegion1Domestic CorrectionsImmediatelyAvailableSubTotalCardRegion1 = "domestic"
	CorrectionsImmediatelyAvailableSubTotalCardRegion1Other    CorrectionsImmediatelyAvailableSubTotalCardRegion1 = "other"
)

func (e CorrectionsImmediatelyAvailableSubTotalCardRegion1) ToPointer() *CorrectionsImmediatelyAvailableSubTotalCardRegion1 {
	return &e
}
func (e *CorrectionsImmediatelyAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = CorrectionsImmediatelyAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsImmediatelyAvailableSubTotalCardRegion1: %v", v)
	}
}

// CorrectionsImmediatelyAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type CorrectionsImmediatelyAvailableSubTotalFeeType1 string

const (
	CorrectionsImmediatelyAvailableSubTotalFeeType1PaymentFee                                        CorrectionsImmediatelyAvailableSubTotalFeeType1 = "payment-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1DirectDebitFailureFee                             CorrectionsImmediatelyAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        CorrectionsImmediatelyAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  CorrectionsImmediatelyAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1PartnerCommission                                 CorrectionsImmediatelyAvailableSubTotalFeeType1 = "partner-commission"
	CorrectionsImmediatelyAvailableSubTotalFeeType1ApplicationFee                                    CorrectionsImmediatelyAvailableSubTotalFeeType1 = "application-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1CaptureFee                                        CorrectionsImmediatelyAvailableSubTotalFeeType1 = "capture-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1RefundFee                                         CorrectionsImmediatelyAvailableSubTotalFeeType1 = "refund-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1ChargebackFee                                     CorrectionsImmediatelyAvailableSubTotalFeeType1 = "chargeback-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1PaymentNotificationFee                            CorrectionsImmediatelyAvailableSubTotalFeeType1 = "payment-notification-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1TransferNotificationFee                           CorrectionsImmediatelyAvailableSubTotalFeeType1 = "transfer-notification-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1PayoutFee                                         CorrectionsImmediatelyAvailableSubTotalFeeType1 = "payout-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1FeeDiscount                                       CorrectionsImmediatelyAvailableSubTotalFeeType1 = "fee-discount"
	CorrectionsImmediatelyAvailableSubTotalFeeType1FeeReimbursement                                  CorrectionsImmediatelyAvailableSubTotalFeeType1 = "fee-reimbursement"
	CorrectionsImmediatelyAvailableSubTotalFeeType1PlatformVolumeFee                                 CorrectionsImmediatelyAvailableSubTotalFeeType1 = "platform-volume-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 CorrectionsImmediatelyAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1BalanceChargeFee                                  CorrectionsImmediatelyAvailableSubTotalFeeType1 = "balance-charge-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   CorrectionsImmediatelyAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1TerminalMonthlyFee                                CorrectionsImmediatelyAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1AcceptanceRiskFee                                 CorrectionsImmediatelyAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1TopUpFee                                          CorrectionsImmediatelyAvailableSubTotalFeeType1 = "top-up-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1PaymentGatewayFee                                 CorrectionsImmediatelyAvailableSubTotalFeeType1 = "payment-gateway-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   CorrectionsImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee CorrectionsImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             CorrectionsImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           CorrectionsImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	CorrectionsImmediatelyAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           CorrectionsImmediatelyAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e CorrectionsImmediatelyAvailableSubTotalFeeType1) ToPointer() *CorrectionsImmediatelyAvailableSubTotalFeeType1 {
	return &e
}
func (e *CorrectionsImmediatelyAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = CorrectionsImmediatelyAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsImmediatelyAvailableSubTotalFeeType1: %v", v)
	}
}

// CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1 string

const (
	CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1Fee                     CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee"
	CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1FeeReimbursement        CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1FeeDiscount             CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1FeeVat                  CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1) ToPointer() *CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// CorrectionsImmediatelyAvailableSubTotalTransactionType1 - Represents the transaction type
type CorrectionsImmediatelyAvailableSubTotalTransactionType1 string

const (
	CorrectionsImmediatelyAvailableSubTotalTransactionType1Payment                           CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "payment"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1SplitPayment                      CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "split-payment"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1FailedPayment                     CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "failed-payment"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1FailedPlatformSplitPayment        CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1Capture                           CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "capture"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1SplitTransaction                  CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "split-transaction"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1Refund                            CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "refund"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1PlatformPaymentRefund             CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-refund"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1RefundCompensation                CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "refund-compensation"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1ReturnedRefundCompensation        CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1ReturnedRefund                    CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "returned-refund"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1Chargeback                        CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "chargeback"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1ChargebackReversal                CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "chargeback-reversal"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1ChargebackCompensation            CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "chargeback-compensation"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1ReversedChargebackCompensation    CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1PlatformPaymentChargeback         CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1FeePrepayment                     CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "fee-prepayment"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1OutgoingTransfer                  CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "outgoing-transfer"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1IncomingTransfer                  CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "incoming-transfer"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1CanceledTransfer                  CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "canceled-transfer"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1ReturnedTransfer                  CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "returned-transfer"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1BalanceReserve                    CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1BalanceReserveReturn              CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve-return"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1InvoiceRoundingCompensation       CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1RollingReserveHold                CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1RollingReserveRelease             CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1BalanceCorrection                 CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "balance-correction"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1Repayment                         CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "repayment"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1Loan                              CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "loan"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1BalanceTopup                      CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "balance-topup"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1CashCollateralIssuance            CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1CashCollateralRelease             CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-release"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1PendingRollingReserve             CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1HeldRollingReserve                CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	CorrectionsImmediatelyAvailableSubTotalTransactionType1ReleasedRollingReserve            CorrectionsImmediatelyAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e CorrectionsImmediatelyAvailableSubTotalTransactionType1) ToPointer() *CorrectionsImmediatelyAvailableSubTotalTransactionType1 {
	return &e
}
func (e *CorrectionsImmediatelyAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = CorrectionsImmediatelyAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsImmediatelyAvailableSubTotalTransactionType1: %v", v)
	}
}

type CorrectionsImmediatelyAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *CorrectionsImmediatelyAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *CorrectionsImmediatelyAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *CorrectionsImmediatelyAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *CorrectionsImmediatelyAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *CorrectionsImmediatelyAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *CorrectionsImmediatelyAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *CorrectionsImmediatelyAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *CorrectionsImmediatelyAvailableSubTotal1) GetMethod() *CorrectionsImmediatelyAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CorrectionsImmediatelyAvailableSubTotal1) GetCardIssuer() *CorrectionsImmediatelyAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *CorrectionsImmediatelyAvailableSubTotal1) GetCardAudience() *CorrectionsImmediatelyAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *CorrectionsImmediatelyAvailableSubTotal1) GetCardRegion() *CorrectionsImmediatelyAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *CorrectionsImmediatelyAvailableSubTotal1) GetFeeType() *CorrectionsImmediatelyAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *CorrectionsImmediatelyAvailableSubTotal1) GetPrepaymentPartType() *CorrectionsImmediatelyAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *CorrectionsImmediatelyAvailableSubTotal1) GetTransactionType() *CorrectionsImmediatelyAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// CorrectionsImmediatelyAvailableSubtotalMethod2 - Payment type of the transactions
type CorrectionsImmediatelyAvailableSubtotalMethod2 string

const (
	CorrectionsImmediatelyAvailableSubtotalMethod2Alma              CorrectionsImmediatelyAvailableSubtotalMethod2 = "alma"
	CorrectionsImmediatelyAvailableSubtotalMethod2Bacs              CorrectionsImmediatelyAvailableSubtotalMethod2 = "bacs"
	CorrectionsImmediatelyAvailableSubtotalMethod2Applepay          CorrectionsImmediatelyAvailableSubtotalMethod2 = "applepay"
	CorrectionsImmediatelyAvailableSubtotalMethod2Bancomatpay       CorrectionsImmediatelyAvailableSubtotalMethod2 = "bancomatpay"
	CorrectionsImmediatelyAvailableSubtotalMethod2Bancontact        CorrectionsImmediatelyAvailableSubtotalMethod2 = "bancontact"
	CorrectionsImmediatelyAvailableSubtotalMethod2Banktransfer      CorrectionsImmediatelyAvailableSubtotalMethod2 = "banktransfer"
	CorrectionsImmediatelyAvailableSubtotalMethod2Belfius           CorrectionsImmediatelyAvailableSubtotalMethod2 = "belfius"
	CorrectionsImmediatelyAvailableSubtotalMethod2Billie            CorrectionsImmediatelyAvailableSubtotalMethod2 = "billie"
	CorrectionsImmediatelyAvailableSubtotalMethod2Bizum             CorrectionsImmediatelyAvailableSubtotalMethod2 = "bizum"
	CorrectionsImmediatelyAvailableSubtotalMethod2Bitcoin           CorrectionsImmediatelyAvailableSubtotalMethod2 = "bitcoin"
	CorrectionsImmediatelyAvailableSubtotalMethod2Blik              CorrectionsImmediatelyAvailableSubtotalMethod2 = "blik"
	CorrectionsImmediatelyAvailableSubtotalMethod2Creditcard        CorrectionsImmediatelyAvailableSubtotalMethod2 = "creditcard"
	CorrectionsImmediatelyAvailableSubtotalMethod2Directdebit       CorrectionsImmediatelyAvailableSubtotalMethod2 = "directdebit"
	CorrectionsImmediatelyAvailableSubtotalMethod2Eps               CorrectionsImmediatelyAvailableSubtotalMethod2 = "eps"
	CorrectionsImmediatelyAvailableSubtotalMethod2Giftcard          CorrectionsImmediatelyAvailableSubtotalMethod2 = "giftcard"
	CorrectionsImmediatelyAvailableSubtotalMethod2Giropay           CorrectionsImmediatelyAvailableSubtotalMethod2 = "giropay"
	CorrectionsImmediatelyAvailableSubtotalMethod2Googlepay         CorrectionsImmediatelyAvailableSubtotalMethod2 = "googlepay"
	CorrectionsImmediatelyAvailableSubtotalMethod2Ideal             CorrectionsImmediatelyAvailableSubtotalMethod2 = "ideal"
	CorrectionsImmediatelyAvailableSubtotalMethod2In3               CorrectionsImmediatelyAvailableSubtotalMethod2 = "in3"
	CorrectionsImmediatelyAvailableSubtotalMethod2Inghomepay        CorrectionsImmediatelyAvailableSubtotalMethod2 = "inghomepay"
	CorrectionsImmediatelyAvailableSubtotalMethod2Kbc               CorrectionsImmediatelyAvailableSubtotalMethod2 = "kbc"
	CorrectionsImmediatelyAvailableSubtotalMethod2Klarnapaylater    CorrectionsImmediatelyAvailableSubtotalMethod2 = "klarnapaylater"
	CorrectionsImmediatelyAvailableSubtotalMethod2Klarnapaynow      CorrectionsImmediatelyAvailableSubtotalMethod2 = "klarnapaynow"
	CorrectionsImmediatelyAvailableSubtotalMethod2Klarnasliceit     CorrectionsImmediatelyAvailableSubtotalMethod2 = "klarnasliceit"
	CorrectionsImmediatelyAvailableSubtotalMethod2Klarna            CorrectionsImmediatelyAvailableSubtotalMethod2 = "klarna"
	CorrectionsImmediatelyAvailableSubtotalMethod2Mbway             CorrectionsImmediatelyAvailableSubtotalMethod2 = "mbway"
	CorrectionsImmediatelyAvailableSubtotalMethod2Multibanco        CorrectionsImmediatelyAvailableSubtotalMethod2 = "multibanco"
	CorrectionsImmediatelyAvailableSubtotalMethod2Mybank            CorrectionsImmediatelyAvailableSubtotalMethod2 = "mybank"
	CorrectionsImmediatelyAvailableSubtotalMethod2Paybybank         CorrectionsImmediatelyAvailableSubtotalMethod2 = "paybybank"
	CorrectionsImmediatelyAvailableSubtotalMethod2Payconiq          CorrectionsImmediatelyAvailableSubtotalMethod2 = "payconiq"
	CorrectionsImmediatelyAvailableSubtotalMethod2Paypal            CorrectionsImmediatelyAvailableSubtotalMethod2 = "paypal"
	CorrectionsImmediatelyAvailableSubtotalMethod2Paysafecard       CorrectionsImmediatelyAvailableSubtotalMethod2 = "paysafecard"
	CorrectionsImmediatelyAvailableSubtotalMethod2Przelewy24        CorrectionsImmediatelyAvailableSubtotalMethod2 = "przelewy24"
	CorrectionsImmediatelyAvailableSubtotalMethod2Riverty           CorrectionsImmediatelyAvailableSubtotalMethod2 = "riverty"
	CorrectionsImmediatelyAvailableSubtotalMethod2Satispay          CorrectionsImmediatelyAvailableSubtotalMethod2 = "satispay"
	CorrectionsImmediatelyAvailableSubtotalMethod2Podiumcadeaukaart CorrectionsImmediatelyAvailableSubtotalMethod2 = "podiumcadeaukaart"
	CorrectionsImmediatelyAvailableSubtotalMethod2Pointofsale       CorrectionsImmediatelyAvailableSubtotalMethod2 = "pointofsale"
	CorrectionsImmediatelyAvailableSubtotalMethod2Sofort            CorrectionsImmediatelyAvailableSubtotalMethod2 = "sofort"
	CorrectionsImmediatelyAvailableSubtotalMethod2Swish             CorrectionsImmediatelyAvailableSubtotalMethod2 = "swish"
	CorrectionsImmediatelyAvailableSubtotalMethod2Trustly           CorrectionsImmediatelyAvailableSubtotalMethod2 = "trustly"
	CorrectionsImmediatelyAvailableSubtotalMethod2Twint             CorrectionsImmediatelyAvailableSubtotalMethod2 = "twint"
	CorrectionsImmediatelyAvailableSubtotalMethod2Voucher           CorrectionsImmediatelyAvailableSubtotalMethod2 = "voucher"
)

func (e CorrectionsImmediatelyAvailableSubtotalMethod2) ToPointer() *CorrectionsImmediatelyAvailableSubtotalMethod2 {
	return &e
}
func (e *CorrectionsImmediatelyAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = CorrectionsImmediatelyAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsImmediatelyAvailableSubtotalMethod2: %v", v)
	}
}

// CorrectionsImmediatelyAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type CorrectionsImmediatelyAvailableSubtotalCardIssuer2 string

const (
	CorrectionsImmediatelyAvailableSubtotalCardIssuer2Amex          CorrectionsImmediatelyAvailableSubtotalCardIssuer2 = "amex"
	CorrectionsImmediatelyAvailableSubtotalCardIssuer2Maestro       CorrectionsImmediatelyAvailableSubtotalCardIssuer2 = "maestro"
	CorrectionsImmediatelyAvailableSubtotalCardIssuer2CarteBancaire CorrectionsImmediatelyAvailableSubtotalCardIssuer2 = "carte-bancaire"
	CorrectionsImmediatelyAvailableSubtotalCardIssuer2Other         CorrectionsImmediatelyAvailableSubtotalCardIssuer2 = "other"
)

func (e CorrectionsImmediatelyAvailableSubtotalCardIssuer2) ToPointer() *CorrectionsImmediatelyAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *CorrectionsImmediatelyAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = CorrectionsImmediatelyAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsImmediatelyAvailableSubtotalCardIssuer2: %v", v)
	}
}

// CorrectionsImmediatelyAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type CorrectionsImmediatelyAvailableSubtotalCardAudience2 string

const (
	CorrectionsImmediatelyAvailableSubtotalCardAudience2Corporate CorrectionsImmediatelyAvailableSubtotalCardAudience2 = "corporate"
	CorrectionsImmediatelyAvailableSubtotalCardAudience2Other     CorrectionsImmediatelyAvailableSubtotalCardAudience2 = "other"
)

func (e CorrectionsImmediatelyAvailableSubtotalCardAudience2) ToPointer() *CorrectionsImmediatelyAvailableSubtotalCardAudience2 {
	return &e
}
func (e *CorrectionsImmediatelyAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = CorrectionsImmediatelyAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsImmediatelyAvailableSubtotalCardAudience2: %v", v)
	}
}

// CorrectionsImmediatelyAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type CorrectionsImmediatelyAvailableSubtotalCardRegion2 string

const (
	CorrectionsImmediatelyAvailableSubtotalCardRegion2IntraEea CorrectionsImmediatelyAvailableSubtotalCardRegion2 = "intra-eea"
	CorrectionsImmediatelyAvailableSubtotalCardRegion2IntraEu  CorrectionsImmediatelyAvailableSubtotalCardRegion2 = "intra-eu"
	CorrectionsImmediatelyAvailableSubtotalCardRegion2Domestic CorrectionsImmediatelyAvailableSubtotalCardRegion2 = "domestic"
	CorrectionsImmediatelyAvailableSubtotalCardRegion2Other    CorrectionsImmediatelyAvailableSubtotalCardRegion2 = "other"
)

func (e CorrectionsImmediatelyAvailableSubtotalCardRegion2) ToPointer() *CorrectionsImmediatelyAvailableSubtotalCardRegion2 {
	return &e
}
func (e *CorrectionsImmediatelyAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = CorrectionsImmediatelyAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsImmediatelyAvailableSubtotalCardRegion2: %v", v)
	}
}

// CorrectionsImmediatelyAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type CorrectionsImmediatelyAvailableSubtotalFeeType2 string

const (
	CorrectionsImmediatelyAvailableSubtotalFeeType2PaymentFee                                        CorrectionsImmediatelyAvailableSubtotalFeeType2 = "payment-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2DirectDebitFailureFee                             CorrectionsImmediatelyAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        CorrectionsImmediatelyAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  CorrectionsImmediatelyAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2PartnerCommission                                 CorrectionsImmediatelyAvailableSubtotalFeeType2 = "partner-commission"
	CorrectionsImmediatelyAvailableSubtotalFeeType2ApplicationFee                                    CorrectionsImmediatelyAvailableSubtotalFeeType2 = "application-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2CaptureFee                                        CorrectionsImmediatelyAvailableSubtotalFeeType2 = "capture-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2RefundFee                                         CorrectionsImmediatelyAvailableSubtotalFeeType2 = "refund-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2ChargebackFee                                     CorrectionsImmediatelyAvailableSubtotalFeeType2 = "chargeback-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2PaymentNotificationFee                            CorrectionsImmediatelyAvailableSubtotalFeeType2 = "payment-notification-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2TransferNotificationFee                           CorrectionsImmediatelyAvailableSubtotalFeeType2 = "transfer-notification-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2PayoutFee                                         CorrectionsImmediatelyAvailableSubtotalFeeType2 = "payout-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2FeeDiscount                                       CorrectionsImmediatelyAvailableSubtotalFeeType2 = "fee-discount"
	CorrectionsImmediatelyAvailableSubtotalFeeType2FeeReimbursement                                  CorrectionsImmediatelyAvailableSubtotalFeeType2 = "fee-reimbursement"
	CorrectionsImmediatelyAvailableSubtotalFeeType2PlatformVolumeFee                                 CorrectionsImmediatelyAvailableSubtotalFeeType2 = "platform-volume-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 CorrectionsImmediatelyAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2BalanceChargeFee                                  CorrectionsImmediatelyAvailableSubtotalFeeType2 = "balance-charge-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   CorrectionsImmediatelyAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2TerminalMonthlyFee                                CorrectionsImmediatelyAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2AcceptanceRiskFee                                 CorrectionsImmediatelyAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2TopUpFee                                          CorrectionsImmediatelyAvailableSubtotalFeeType2 = "top-up-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2PaymentGatewayFee                                 CorrectionsImmediatelyAvailableSubtotalFeeType2 = "payment-gateway-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   CorrectionsImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee CorrectionsImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             CorrectionsImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           CorrectionsImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	CorrectionsImmediatelyAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           CorrectionsImmediatelyAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e CorrectionsImmediatelyAvailableSubtotalFeeType2) ToPointer() *CorrectionsImmediatelyAvailableSubtotalFeeType2 {
	return &e
}
func (e *CorrectionsImmediatelyAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = CorrectionsImmediatelyAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsImmediatelyAvailableSubtotalFeeType2: %v", v)
	}
}

// CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2 string

const (
	CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2Fee                     CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee"
	CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2FeeReimbursement        CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2FeeDiscount             CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2FeeVat                  CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2) ToPointer() *CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// CorrectionsImmediatelyAvailableSubtotalTransactionType2 - Represents the transaction type
type CorrectionsImmediatelyAvailableSubtotalTransactionType2 string

const (
	CorrectionsImmediatelyAvailableSubtotalTransactionType2Payment                           CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "payment"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2SplitPayment                      CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "split-payment"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2FailedPayment                     CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "failed-payment"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2FailedPlatformSplitPayment        CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2Capture                           CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "capture"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2SplitTransaction                  CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "split-transaction"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2Refund                            CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "refund"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2PlatformPaymentRefund             CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-refund"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2RefundCompensation                CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "refund-compensation"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2ReturnedRefundCompensation        CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2ReturnedRefund                    CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "returned-refund"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2Chargeback                        CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "chargeback"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2ChargebackReversal                CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "chargeback-reversal"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2ChargebackCompensation            CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "chargeback-compensation"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2ReversedChargebackCompensation    CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2PlatformPaymentChargeback         CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2FeePrepayment                     CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "fee-prepayment"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2OutgoingTransfer                  CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "outgoing-transfer"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2IncomingTransfer                  CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "incoming-transfer"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2CanceledTransfer                  CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "canceled-transfer"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2ReturnedTransfer                  CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "returned-transfer"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2BalanceReserve                    CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2BalanceReserveReturn              CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve-return"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2InvoiceRoundingCompensation       CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2RollingReserveHold                CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2RollingReserveRelease             CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2BalanceCorrection                 CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "balance-correction"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2Repayment                         CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "repayment"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2Loan                              CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "loan"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2BalanceTopup                      CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "balance-topup"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2CashCollateralIssuance            CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2CashCollateralRelease             CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-release"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2PendingRollingReserve             CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2HeldRollingReserve                CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	CorrectionsImmediatelyAvailableSubtotalTransactionType2ReleasedRollingReserve            CorrectionsImmediatelyAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e CorrectionsImmediatelyAvailableSubtotalTransactionType2) ToPointer() *CorrectionsImmediatelyAvailableSubtotalTransactionType2 {
	return &e
}
func (e *CorrectionsImmediatelyAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = CorrectionsImmediatelyAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrectionsImmediatelyAvailableSubtotalTransactionType2: %v", v)
	}
}

type CorrectionsImmediatelyAvailableSubtotal2 struct {
	SubTotals []CorrectionsImmediatelyAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *CorrectionsImmediatelyAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *CorrectionsImmediatelyAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *CorrectionsImmediatelyAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *CorrectionsImmediatelyAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *CorrectionsImmediatelyAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *CorrectionsImmediatelyAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *CorrectionsImmediatelyAvailableSubtotal2) GetSubTotals() []CorrectionsImmediatelyAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *CorrectionsImmediatelyAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *CorrectionsImmediatelyAvailableSubtotal2) GetMethod() *CorrectionsImmediatelyAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CorrectionsImmediatelyAvailableSubtotal2) GetCardIssuer() *CorrectionsImmediatelyAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *CorrectionsImmediatelyAvailableSubtotal2) GetCardAudience() *CorrectionsImmediatelyAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *CorrectionsImmediatelyAvailableSubtotal2) GetCardRegion() *CorrectionsImmediatelyAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *CorrectionsImmediatelyAvailableSubtotal2) GetFeeType() *CorrectionsImmediatelyAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *CorrectionsImmediatelyAvailableSubtotal2) GetPrepaymentPartType() *CorrectionsImmediatelyAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *CorrectionsImmediatelyAvailableSubtotal2) GetTransactionType() *CorrectionsImmediatelyAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type CorrectionsImmediatelyAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *CorrectionsImmediatelyAvailableAmount     `json:"amount,omitempty"`
	Subtotals []CorrectionsImmediatelyAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *CorrectionsImmediatelyAvailable) GetAmount() *CorrectionsImmediatelyAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CorrectionsImmediatelyAvailable) GetSubtotals() []CorrectionsImmediatelyAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// Corrections - Only available on `transaction-categories` grouping.
type Corrections struct {
	Pending              *CorrectionsPending              `json:"pending,omitempty"`
	MovedToAvailable     *CorrectionsMovedToAvailable     `json:"movedToAvailable,omitempty"`
	ImmediatelyAvailable *CorrectionsImmediatelyAvailable `json:"immediatelyAvailable,omitempty"`
}

func (o *Corrections) GetPending() *CorrectionsPending {
	if o == nil {
		return nil
	}
	return o.Pending
}

func (o *Corrections) GetMovedToAvailable() *CorrectionsMovedToAvailable {
	if o == nil {
		return nil
	}
	return o.MovedToAvailable
}

func (o *Corrections) GetImmediatelyAvailable() *CorrectionsImmediatelyAvailable {
	if o == nil {
		return nil
	}
	return o.ImmediatelyAvailable
}

// TopupsPendingAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type TopupsPendingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *TopupsPendingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *TopupsPendingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// TopupsPendingSubTotalMethod1 - Payment type of the transactions
type TopupsPendingSubTotalMethod1 string

const (
	TopupsPendingSubTotalMethod1Alma              TopupsPendingSubTotalMethod1 = "alma"
	TopupsPendingSubTotalMethod1Bacs              TopupsPendingSubTotalMethod1 = "bacs"
	TopupsPendingSubTotalMethod1Applepay          TopupsPendingSubTotalMethod1 = "applepay"
	TopupsPendingSubTotalMethod1Bancomatpay       TopupsPendingSubTotalMethod1 = "bancomatpay"
	TopupsPendingSubTotalMethod1Bancontact        TopupsPendingSubTotalMethod1 = "bancontact"
	TopupsPendingSubTotalMethod1Banktransfer      TopupsPendingSubTotalMethod1 = "banktransfer"
	TopupsPendingSubTotalMethod1Belfius           TopupsPendingSubTotalMethod1 = "belfius"
	TopupsPendingSubTotalMethod1Billie            TopupsPendingSubTotalMethod1 = "billie"
	TopupsPendingSubTotalMethod1Bizum             TopupsPendingSubTotalMethod1 = "bizum"
	TopupsPendingSubTotalMethod1Bitcoin           TopupsPendingSubTotalMethod1 = "bitcoin"
	TopupsPendingSubTotalMethod1Blik              TopupsPendingSubTotalMethod1 = "blik"
	TopupsPendingSubTotalMethod1Creditcard        TopupsPendingSubTotalMethod1 = "creditcard"
	TopupsPendingSubTotalMethod1Directdebit       TopupsPendingSubTotalMethod1 = "directdebit"
	TopupsPendingSubTotalMethod1Eps               TopupsPendingSubTotalMethod1 = "eps"
	TopupsPendingSubTotalMethod1Giftcard          TopupsPendingSubTotalMethod1 = "giftcard"
	TopupsPendingSubTotalMethod1Giropay           TopupsPendingSubTotalMethod1 = "giropay"
	TopupsPendingSubTotalMethod1Googlepay         TopupsPendingSubTotalMethod1 = "googlepay"
	TopupsPendingSubTotalMethod1Ideal             TopupsPendingSubTotalMethod1 = "ideal"
	TopupsPendingSubTotalMethod1In3               TopupsPendingSubTotalMethod1 = "in3"
	TopupsPendingSubTotalMethod1Inghomepay        TopupsPendingSubTotalMethod1 = "inghomepay"
	TopupsPendingSubTotalMethod1Kbc               TopupsPendingSubTotalMethod1 = "kbc"
	TopupsPendingSubTotalMethod1Klarnapaylater    TopupsPendingSubTotalMethod1 = "klarnapaylater"
	TopupsPendingSubTotalMethod1Klarnapaynow      TopupsPendingSubTotalMethod1 = "klarnapaynow"
	TopupsPendingSubTotalMethod1Klarnasliceit     TopupsPendingSubTotalMethod1 = "klarnasliceit"
	TopupsPendingSubTotalMethod1Klarna            TopupsPendingSubTotalMethod1 = "klarna"
	TopupsPendingSubTotalMethod1Mbway             TopupsPendingSubTotalMethod1 = "mbway"
	TopupsPendingSubTotalMethod1Multibanco        TopupsPendingSubTotalMethod1 = "multibanco"
	TopupsPendingSubTotalMethod1Mybank            TopupsPendingSubTotalMethod1 = "mybank"
	TopupsPendingSubTotalMethod1Paybybank         TopupsPendingSubTotalMethod1 = "paybybank"
	TopupsPendingSubTotalMethod1Payconiq          TopupsPendingSubTotalMethod1 = "payconiq"
	TopupsPendingSubTotalMethod1Paypal            TopupsPendingSubTotalMethod1 = "paypal"
	TopupsPendingSubTotalMethod1Paysafecard       TopupsPendingSubTotalMethod1 = "paysafecard"
	TopupsPendingSubTotalMethod1Przelewy24        TopupsPendingSubTotalMethod1 = "przelewy24"
	TopupsPendingSubTotalMethod1Riverty           TopupsPendingSubTotalMethod1 = "riverty"
	TopupsPendingSubTotalMethod1Satispay          TopupsPendingSubTotalMethod1 = "satispay"
	TopupsPendingSubTotalMethod1Podiumcadeaukaart TopupsPendingSubTotalMethod1 = "podiumcadeaukaart"
	TopupsPendingSubTotalMethod1Pointofsale       TopupsPendingSubTotalMethod1 = "pointofsale"
	TopupsPendingSubTotalMethod1Sofort            TopupsPendingSubTotalMethod1 = "sofort"
	TopupsPendingSubTotalMethod1Swish             TopupsPendingSubTotalMethod1 = "swish"
	TopupsPendingSubTotalMethod1Trustly           TopupsPendingSubTotalMethod1 = "trustly"
	TopupsPendingSubTotalMethod1Twint             TopupsPendingSubTotalMethod1 = "twint"
	TopupsPendingSubTotalMethod1Voucher           TopupsPendingSubTotalMethod1 = "voucher"
)

func (e TopupsPendingSubTotalMethod1) ToPointer() *TopupsPendingSubTotalMethod1 {
	return &e
}
func (e *TopupsPendingSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = TopupsPendingSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsPendingSubTotalMethod1: %v", v)
	}
}

// TopupsPendingSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type TopupsPendingSubTotalCardIssuer1 string

const (
	TopupsPendingSubTotalCardIssuer1Amex          TopupsPendingSubTotalCardIssuer1 = "amex"
	TopupsPendingSubTotalCardIssuer1Maestro       TopupsPendingSubTotalCardIssuer1 = "maestro"
	TopupsPendingSubTotalCardIssuer1CarteBancaire TopupsPendingSubTotalCardIssuer1 = "carte-bancaire"
	TopupsPendingSubTotalCardIssuer1Other         TopupsPendingSubTotalCardIssuer1 = "other"
)

func (e TopupsPendingSubTotalCardIssuer1) ToPointer() *TopupsPendingSubTotalCardIssuer1 {
	return &e
}
func (e *TopupsPendingSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = TopupsPendingSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsPendingSubTotalCardIssuer1: %v", v)
	}
}

// TopupsPendingSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type TopupsPendingSubTotalCardAudience1 string

const (
	TopupsPendingSubTotalCardAudience1Corporate TopupsPendingSubTotalCardAudience1 = "corporate"
	TopupsPendingSubTotalCardAudience1Other     TopupsPendingSubTotalCardAudience1 = "other"
)

func (e TopupsPendingSubTotalCardAudience1) ToPointer() *TopupsPendingSubTotalCardAudience1 {
	return &e
}
func (e *TopupsPendingSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = TopupsPendingSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsPendingSubTotalCardAudience1: %v", v)
	}
}

// TopupsPendingSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type TopupsPendingSubTotalCardRegion1 string

const (
	TopupsPendingSubTotalCardRegion1IntraEea TopupsPendingSubTotalCardRegion1 = "intra-eea"
	TopupsPendingSubTotalCardRegion1IntraEu  TopupsPendingSubTotalCardRegion1 = "intra-eu"
	TopupsPendingSubTotalCardRegion1Domestic TopupsPendingSubTotalCardRegion1 = "domestic"
	TopupsPendingSubTotalCardRegion1Other    TopupsPendingSubTotalCardRegion1 = "other"
)

func (e TopupsPendingSubTotalCardRegion1) ToPointer() *TopupsPendingSubTotalCardRegion1 {
	return &e
}
func (e *TopupsPendingSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = TopupsPendingSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsPendingSubTotalCardRegion1: %v", v)
	}
}

// TopupsPendingSubTotalFeeType1 - Present when the transaction represents a fee.
type TopupsPendingSubTotalFeeType1 string

const (
	TopupsPendingSubTotalFeeType1PaymentFee                                        TopupsPendingSubTotalFeeType1 = "payment-fee"
	TopupsPendingSubTotalFeeType1DirectDebitFailureFee                             TopupsPendingSubTotalFeeType1 = "direct-debit-failure-fee"
	TopupsPendingSubTotalFeeType1UnauthorizedDirectDebitFee                        TopupsPendingSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	TopupsPendingSubTotalFeeType1BankChargedDirectDebitFailureFee                  TopupsPendingSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	TopupsPendingSubTotalFeeType1PartnerCommission                                 TopupsPendingSubTotalFeeType1 = "partner-commission"
	TopupsPendingSubTotalFeeType1ApplicationFee                                    TopupsPendingSubTotalFeeType1 = "application-fee"
	TopupsPendingSubTotalFeeType1CaptureFee                                        TopupsPendingSubTotalFeeType1 = "capture-fee"
	TopupsPendingSubTotalFeeType1RefundFee                                         TopupsPendingSubTotalFeeType1 = "refund-fee"
	TopupsPendingSubTotalFeeType1ChargebackFee                                     TopupsPendingSubTotalFeeType1 = "chargeback-fee"
	TopupsPendingSubTotalFeeType1PaymentNotificationFee                            TopupsPendingSubTotalFeeType1 = "payment-notification-fee"
	TopupsPendingSubTotalFeeType1TransferNotificationFee                           TopupsPendingSubTotalFeeType1 = "transfer-notification-fee"
	TopupsPendingSubTotalFeeType1PayoutFee                                         TopupsPendingSubTotalFeeType1 = "payout-fee"
	TopupsPendingSubTotalFeeType1FeeDiscount                                       TopupsPendingSubTotalFeeType1 = "fee-discount"
	TopupsPendingSubTotalFeeType1FeeReimbursement                                  TopupsPendingSubTotalFeeType1 = "fee-reimbursement"
	TopupsPendingSubTotalFeeType1PlatformVolumeFee                                 TopupsPendingSubTotalFeeType1 = "platform-volume-fee"
	TopupsPendingSubTotalFeeType1PlatformConnectedOrganizationsFee                 TopupsPendingSubTotalFeeType1 = "platform-connected-organizations-fee"
	TopupsPendingSubTotalFeeType1BalanceChargeFee                                  TopupsPendingSubTotalFeeType1 = "balance-charge-fee"
	TopupsPendingSubTotalFeeType1ThreedsAuthenticationAttemptFee                   TopupsPendingSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	TopupsPendingSubTotalFeeType1TerminalMonthlyFee                                TopupsPendingSubTotalFeeType1 = "terminal-monthly-fee"
	TopupsPendingSubTotalFeeType1AcceptanceRiskFee                                 TopupsPendingSubTotalFeeType1 = "acceptance-risk-fee"
	TopupsPendingSubTotalFeeType1TopUpFee                                          TopupsPendingSubTotalFeeType1 = "top-up-fee"
	TopupsPendingSubTotalFeeType1PaymentGatewayFee                                 TopupsPendingSubTotalFeeType1 = "payment-gateway-fee"
	TopupsPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   TopupsPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	TopupsPendingSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee TopupsPendingSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	TopupsPendingSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             TopupsPendingSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	TopupsPendingSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           TopupsPendingSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	TopupsPendingSubTotalFeeType1MinimumInvoiceAmountFee                           TopupsPendingSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e TopupsPendingSubTotalFeeType1) ToPointer() *TopupsPendingSubTotalFeeType1 {
	return &e
}
func (e *TopupsPendingSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = TopupsPendingSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsPendingSubTotalFeeType1: %v", v)
	}
}

// TopupsPendingSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type TopupsPendingSubTotalPrepaymentPartType1 string

const (
	TopupsPendingSubTotalPrepaymentPartType1Fee                     TopupsPendingSubTotalPrepaymentPartType1 = "fee"
	TopupsPendingSubTotalPrepaymentPartType1FeeReimbursement        TopupsPendingSubTotalPrepaymentPartType1 = "fee-reimbursement"
	TopupsPendingSubTotalPrepaymentPartType1FeeDiscount             TopupsPendingSubTotalPrepaymentPartType1 = "fee-discount"
	TopupsPendingSubTotalPrepaymentPartType1FeeVat                  TopupsPendingSubTotalPrepaymentPartType1 = "fee-vat"
	TopupsPendingSubTotalPrepaymentPartType1FeeRoundingCompensation TopupsPendingSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e TopupsPendingSubTotalPrepaymentPartType1) ToPointer() *TopupsPendingSubTotalPrepaymentPartType1 {
	return &e
}
func (e *TopupsPendingSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = TopupsPendingSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsPendingSubTotalPrepaymentPartType1: %v", v)
	}
}

// TopupsPendingSubTotalTransactionType1 - Represents the transaction type
type TopupsPendingSubTotalTransactionType1 string

const (
	TopupsPendingSubTotalTransactionType1Payment                           TopupsPendingSubTotalTransactionType1 = "payment"
	TopupsPendingSubTotalTransactionType1SplitPayment                      TopupsPendingSubTotalTransactionType1 = "split-payment"
	TopupsPendingSubTotalTransactionType1FailedPayment                     TopupsPendingSubTotalTransactionType1 = "failed-payment"
	TopupsPendingSubTotalTransactionType1FailedPlatformSplitPayment        TopupsPendingSubTotalTransactionType1 = "failed-platform-split-payment"
	TopupsPendingSubTotalTransactionType1FailedSplitPaymentCompensation    TopupsPendingSubTotalTransactionType1 = "failed-split-payment-compensation"
	TopupsPendingSubTotalTransactionType1Capture                           TopupsPendingSubTotalTransactionType1 = "capture"
	TopupsPendingSubTotalTransactionType1SplitTransaction                  TopupsPendingSubTotalTransactionType1 = "split-transaction"
	TopupsPendingSubTotalTransactionType1Refund                            TopupsPendingSubTotalTransactionType1 = "refund"
	TopupsPendingSubTotalTransactionType1PlatformPaymentRefund             TopupsPendingSubTotalTransactionType1 = "platform-payment-refund"
	TopupsPendingSubTotalTransactionType1ReturnedPlatformPaymentRefund     TopupsPendingSubTotalTransactionType1 = "returned-platform-payment-refund"
	TopupsPendingSubTotalTransactionType1RefundCompensation                TopupsPendingSubTotalTransactionType1 = "refund-compensation"
	TopupsPendingSubTotalTransactionType1ReturnedRefundCompensation        TopupsPendingSubTotalTransactionType1 = "returned-refund-compensation"
	TopupsPendingSubTotalTransactionType1ReturnedRefund                    TopupsPendingSubTotalTransactionType1 = "returned-refund"
	TopupsPendingSubTotalTransactionType1Chargeback                        TopupsPendingSubTotalTransactionType1 = "chargeback"
	TopupsPendingSubTotalTransactionType1ChargebackReversal                TopupsPendingSubTotalTransactionType1 = "chargeback-reversal"
	TopupsPendingSubTotalTransactionType1ChargebackCompensation            TopupsPendingSubTotalTransactionType1 = "chargeback-compensation"
	TopupsPendingSubTotalTransactionType1ReversedChargebackCompensation    TopupsPendingSubTotalTransactionType1 = "reversed-chargeback-compensation"
	TopupsPendingSubTotalTransactionType1PlatformPaymentChargeback         TopupsPendingSubTotalTransactionType1 = "platform-payment-chargeback"
	TopupsPendingSubTotalTransactionType1ReversedPlatformPaymentChargeback TopupsPendingSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	TopupsPendingSubTotalTransactionType1FeePrepayment                     TopupsPendingSubTotalTransactionType1 = "fee-prepayment"
	TopupsPendingSubTotalTransactionType1OutgoingTransfer                  TopupsPendingSubTotalTransactionType1 = "outgoing-transfer"
	TopupsPendingSubTotalTransactionType1IncomingTransfer                  TopupsPendingSubTotalTransactionType1 = "incoming-transfer"
	TopupsPendingSubTotalTransactionType1CanceledTransfer                  TopupsPendingSubTotalTransactionType1 = "canceled-transfer"
	TopupsPendingSubTotalTransactionType1ReturnedTransfer                  TopupsPendingSubTotalTransactionType1 = "returned-transfer"
	TopupsPendingSubTotalTransactionType1BalanceReserve                    TopupsPendingSubTotalTransactionType1 = "balance-reserve"
	TopupsPendingSubTotalTransactionType1BalanceReserveReturn              TopupsPendingSubTotalTransactionType1 = "balance-reserve-return"
	TopupsPendingSubTotalTransactionType1InvoiceRoundingCompensation       TopupsPendingSubTotalTransactionType1 = "invoice-rounding-compensation"
	TopupsPendingSubTotalTransactionType1RollingReserveHold                TopupsPendingSubTotalTransactionType1 = "rolling-reserve-hold"
	TopupsPendingSubTotalTransactionType1RollingReserveRelease             TopupsPendingSubTotalTransactionType1 = "rolling-reserve-release"
	TopupsPendingSubTotalTransactionType1BalanceCorrection                 TopupsPendingSubTotalTransactionType1 = "balance-correction"
	TopupsPendingSubTotalTransactionType1Repayment                         TopupsPendingSubTotalTransactionType1 = "repayment"
	TopupsPendingSubTotalTransactionType1Loan                              TopupsPendingSubTotalTransactionType1 = "loan"
	TopupsPendingSubTotalTransactionType1BalanceTopup                      TopupsPendingSubTotalTransactionType1 = "balance-topup"
	TopupsPendingSubTotalTransactionType1CashCollateralIssuance            TopupsPendingSubTotalTransactionType1 = "cash-collateral-issuance';"
	TopupsPendingSubTotalTransactionType1CashCollateralRelease             TopupsPendingSubTotalTransactionType1 = "cash-collateral-release"
	TopupsPendingSubTotalTransactionType1PendingRollingReserve             TopupsPendingSubTotalTransactionType1 = "pending-rolling-reserve"
	TopupsPendingSubTotalTransactionType1ToBeReleasedRollingReserve        TopupsPendingSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	TopupsPendingSubTotalTransactionType1HeldRollingReserve                TopupsPendingSubTotalTransactionType1 = "held-rolling-reserve"
	TopupsPendingSubTotalTransactionType1ReleasedRollingReserve            TopupsPendingSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e TopupsPendingSubTotalTransactionType1) ToPointer() *TopupsPendingSubTotalTransactionType1 {
	return &e
}
func (e *TopupsPendingSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = TopupsPendingSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsPendingSubTotalTransactionType1: %v", v)
	}
}

type TopupsPendingSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *TopupsPendingSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *TopupsPendingSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *TopupsPendingSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *TopupsPendingSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *TopupsPendingSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *TopupsPendingSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *TopupsPendingSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *TopupsPendingSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *TopupsPendingSubTotal1) GetMethod() *TopupsPendingSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *TopupsPendingSubTotal1) GetCardIssuer() *TopupsPendingSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *TopupsPendingSubTotal1) GetCardAudience() *TopupsPendingSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *TopupsPendingSubTotal1) GetCardRegion() *TopupsPendingSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *TopupsPendingSubTotal1) GetFeeType() *TopupsPendingSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *TopupsPendingSubTotal1) GetPrepaymentPartType() *TopupsPendingSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *TopupsPendingSubTotal1) GetTransactionType() *TopupsPendingSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// TopupsPendingSubtotalMethod2 - Payment type of the transactions
type TopupsPendingSubtotalMethod2 string

const (
	TopupsPendingSubtotalMethod2Alma              TopupsPendingSubtotalMethod2 = "alma"
	TopupsPendingSubtotalMethod2Bacs              TopupsPendingSubtotalMethod2 = "bacs"
	TopupsPendingSubtotalMethod2Applepay          TopupsPendingSubtotalMethod2 = "applepay"
	TopupsPendingSubtotalMethod2Bancomatpay       TopupsPendingSubtotalMethod2 = "bancomatpay"
	TopupsPendingSubtotalMethod2Bancontact        TopupsPendingSubtotalMethod2 = "bancontact"
	TopupsPendingSubtotalMethod2Banktransfer      TopupsPendingSubtotalMethod2 = "banktransfer"
	TopupsPendingSubtotalMethod2Belfius           TopupsPendingSubtotalMethod2 = "belfius"
	TopupsPendingSubtotalMethod2Billie            TopupsPendingSubtotalMethod2 = "billie"
	TopupsPendingSubtotalMethod2Bizum             TopupsPendingSubtotalMethod2 = "bizum"
	TopupsPendingSubtotalMethod2Bitcoin           TopupsPendingSubtotalMethod2 = "bitcoin"
	TopupsPendingSubtotalMethod2Blik              TopupsPendingSubtotalMethod2 = "blik"
	TopupsPendingSubtotalMethod2Creditcard        TopupsPendingSubtotalMethod2 = "creditcard"
	TopupsPendingSubtotalMethod2Directdebit       TopupsPendingSubtotalMethod2 = "directdebit"
	TopupsPendingSubtotalMethod2Eps               TopupsPendingSubtotalMethod2 = "eps"
	TopupsPendingSubtotalMethod2Giftcard          TopupsPendingSubtotalMethod2 = "giftcard"
	TopupsPendingSubtotalMethod2Giropay           TopupsPendingSubtotalMethod2 = "giropay"
	TopupsPendingSubtotalMethod2Googlepay         TopupsPendingSubtotalMethod2 = "googlepay"
	TopupsPendingSubtotalMethod2Ideal             TopupsPendingSubtotalMethod2 = "ideal"
	TopupsPendingSubtotalMethod2In3               TopupsPendingSubtotalMethod2 = "in3"
	TopupsPendingSubtotalMethod2Inghomepay        TopupsPendingSubtotalMethod2 = "inghomepay"
	TopupsPendingSubtotalMethod2Kbc               TopupsPendingSubtotalMethod2 = "kbc"
	TopupsPendingSubtotalMethod2Klarnapaylater    TopupsPendingSubtotalMethod2 = "klarnapaylater"
	TopupsPendingSubtotalMethod2Klarnapaynow      TopupsPendingSubtotalMethod2 = "klarnapaynow"
	TopupsPendingSubtotalMethod2Klarnasliceit     TopupsPendingSubtotalMethod2 = "klarnasliceit"
	TopupsPendingSubtotalMethod2Klarna            TopupsPendingSubtotalMethod2 = "klarna"
	TopupsPendingSubtotalMethod2Mbway             TopupsPendingSubtotalMethod2 = "mbway"
	TopupsPendingSubtotalMethod2Multibanco        TopupsPendingSubtotalMethod2 = "multibanco"
	TopupsPendingSubtotalMethod2Mybank            TopupsPendingSubtotalMethod2 = "mybank"
	TopupsPendingSubtotalMethod2Paybybank         TopupsPendingSubtotalMethod2 = "paybybank"
	TopupsPendingSubtotalMethod2Payconiq          TopupsPendingSubtotalMethod2 = "payconiq"
	TopupsPendingSubtotalMethod2Paypal            TopupsPendingSubtotalMethod2 = "paypal"
	TopupsPendingSubtotalMethod2Paysafecard       TopupsPendingSubtotalMethod2 = "paysafecard"
	TopupsPendingSubtotalMethod2Przelewy24        TopupsPendingSubtotalMethod2 = "przelewy24"
	TopupsPendingSubtotalMethod2Riverty           TopupsPendingSubtotalMethod2 = "riverty"
	TopupsPendingSubtotalMethod2Satispay          TopupsPendingSubtotalMethod2 = "satispay"
	TopupsPendingSubtotalMethod2Podiumcadeaukaart TopupsPendingSubtotalMethod2 = "podiumcadeaukaart"
	TopupsPendingSubtotalMethod2Pointofsale       TopupsPendingSubtotalMethod2 = "pointofsale"
	TopupsPendingSubtotalMethod2Sofort            TopupsPendingSubtotalMethod2 = "sofort"
	TopupsPendingSubtotalMethod2Swish             TopupsPendingSubtotalMethod2 = "swish"
	TopupsPendingSubtotalMethod2Trustly           TopupsPendingSubtotalMethod2 = "trustly"
	TopupsPendingSubtotalMethod2Twint             TopupsPendingSubtotalMethod2 = "twint"
	TopupsPendingSubtotalMethod2Voucher           TopupsPendingSubtotalMethod2 = "voucher"
)

func (e TopupsPendingSubtotalMethod2) ToPointer() *TopupsPendingSubtotalMethod2 {
	return &e
}
func (e *TopupsPendingSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = TopupsPendingSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsPendingSubtotalMethod2: %v", v)
	}
}

// TopupsPendingSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type TopupsPendingSubtotalCardIssuer2 string

const (
	TopupsPendingSubtotalCardIssuer2Amex          TopupsPendingSubtotalCardIssuer2 = "amex"
	TopupsPendingSubtotalCardIssuer2Maestro       TopupsPendingSubtotalCardIssuer2 = "maestro"
	TopupsPendingSubtotalCardIssuer2CarteBancaire TopupsPendingSubtotalCardIssuer2 = "carte-bancaire"
	TopupsPendingSubtotalCardIssuer2Other         TopupsPendingSubtotalCardIssuer2 = "other"
)

func (e TopupsPendingSubtotalCardIssuer2) ToPointer() *TopupsPendingSubtotalCardIssuer2 {
	return &e
}
func (e *TopupsPendingSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = TopupsPendingSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsPendingSubtotalCardIssuer2: %v", v)
	}
}

// TopupsPendingSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type TopupsPendingSubtotalCardAudience2 string

const (
	TopupsPendingSubtotalCardAudience2Corporate TopupsPendingSubtotalCardAudience2 = "corporate"
	TopupsPendingSubtotalCardAudience2Other     TopupsPendingSubtotalCardAudience2 = "other"
)

func (e TopupsPendingSubtotalCardAudience2) ToPointer() *TopupsPendingSubtotalCardAudience2 {
	return &e
}
func (e *TopupsPendingSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = TopupsPendingSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsPendingSubtotalCardAudience2: %v", v)
	}
}

// TopupsPendingSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type TopupsPendingSubtotalCardRegion2 string

const (
	TopupsPendingSubtotalCardRegion2IntraEea TopupsPendingSubtotalCardRegion2 = "intra-eea"
	TopupsPendingSubtotalCardRegion2IntraEu  TopupsPendingSubtotalCardRegion2 = "intra-eu"
	TopupsPendingSubtotalCardRegion2Domestic TopupsPendingSubtotalCardRegion2 = "domestic"
	TopupsPendingSubtotalCardRegion2Other    TopupsPendingSubtotalCardRegion2 = "other"
)

func (e TopupsPendingSubtotalCardRegion2) ToPointer() *TopupsPendingSubtotalCardRegion2 {
	return &e
}
func (e *TopupsPendingSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = TopupsPendingSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsPendingSubtotalCardRegion2: %v", v)
	}
}

// TopupsPendingSubtotalFeeType2 - Present when the transaction represents a fee.
type TopupsPendingSubtotalFeeType2 string

const (
	TopupsPendingSubtotalFeeType2PaymentFee                                        TopupsPendingSubtotalFeeType2 = "payment-fee"
	TopupsPendingSubtotalFeeType2DirectDebitFailureFee                             TopupsPendingSubtotalFeeType2 = "direct-debit-failure-fee"
	TopupsPendingSubtotalFeeType2UnauthorizedDirectDebitFee                        TopupsPendingSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	TopupsPendingSubtotalFeeType2BankChargedDirectDebitFailureFee                  TopupsPendingSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	TopupsPendingSubtotalFeeType2PartnerCommission                                 TopupsPendingSubtotalFeeType2 = "partner-commission"
	TopupsPendingSubtotalFeeType2ApplicationFee                                    TopupsPendingSubtotalFeeType2 = "application-fee"
	TopupsPendingSubtotalFeeType2CaptureFee                                        TopupsPendingSubtotalFeeType2 = "capture-fee"
	TopupsPendingSubtotalFeeType2RefundFee                                         TopupsPendingSubtotalFeeType2 = "refund-fee"
	TopupsPendingSubtotalFeeType2ChargebackFee                                     TopupsPendingSubtotalFeeType2 = "chargeback-fee"
	TopupsPendingSubtotalFeeType2PaymentNotificationFee                            TopupsPendingSubtotalFeeType2 = "payment-notification-fee"
	TopupsPendingSubtotalFeeType2TransferNotificationFee                           TopupsPendingSubtotalFeeType2 = "transfer-notification-fee"
	TopupsPendingSubtotalFeeType2PayoutFee                                         TopupsPendingSubtotalFeeType2 = "payout-fee"
	TopupsPendingSubtotalFeeType2FeeDiscount                                       TopupsPendingSubtotalFeeType2 = "fee-discount"
	TopupsPendingSubtotalFeeType2FeeReimbursement                                  TopupsPendingSubtotalFeeType2 = "fee-reimbursement"
	TopupsPendingSubtotalFeeType2PlatformVolumeFee                                 TopupsPendingSubtotalFeeType2 = "platform-volume-fee"
	TopupsPendingSubtotalFeeType2PlatformConnectedOrganizationsFee                 TopupsPendingSubtotalFeeType2 = "platform-connected-organizations-fee"
	TopupsPendingSubtotalFeeType2BalanceChargeFee                                  TopupsPendingSubtotalFeeType2 = "balance-charge-fee"
	TopupsPendingSubtotalFeeType2ThreedsAuthenticationAttemptFee                   TopupsPendingSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	TopupsPendingSubtotalFeeType2TerminalMonthlyFee                                TopupsPendingSubtotalFeeType2 = "terminal-monthly-fee"
	TopupsPendingSubtotalFeeType2AcceptanceRiskFee                                 TopupsPendingSubtotalFeeType2 = "acceptance-risk-fee"
	TopupsPendingSubtotalFeeType2TopUpFee                                          TopupsPendingSubtotalFeeType2 = "top-up-fee"
	TopupsPendingSubtotalFeeType2PaymentGatewayFee                                 TopupsPendingSubtotalFeeType2 = "payment-gateway-fee"
	TopupsPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   TopupsPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	TopupsPendingSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee TopupsPendingSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	TopupsPendingSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             TopupsPendingSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	TopupsPendingSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           TopupsPendingSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	TopupsPendingSubtotalFeeType2MinimumInvoiceAmountFee                           TopupsPendingSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e TopupsPendingSubtotalFeeType2) ToPointer() *TopupsPendingSubtotalFeeType2 {
	return &e
}
func (e *TopupsPendingSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = TopupsPendingSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsPendingSubtotalFeeType2: %v", v)
	}
}

// TopupsPendingSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type TopupsPendingSubtotalPrepaymentPartType2 string

const (
	TopupsPendingSubtotalPrepaymentPartType2Fee                     TopupsPendingSubtotalPrepaymentPartType2 = "fee"
	TopupsPendingSubtotalPrepaymentPartType2FeeReimbursement        TopupsPendingSubtotalPrepaymentPartType2 = "fee-reimbursement"
	TopupsPendingSubtotalPrepaymentPartType2FeeDiscount             TopupsPendingSubtotalPrepaymentPartType2 = "fee-discount"
	TopupsPendingSubtotalPrepaymentPartType2FeeVat                  TopupsPendingSubtotalPrepaymentPartType2 = "fee-vat"
	TopupsPendingSubtotalPrepaymentPartType2FeeRoundingCompensation TopupsPendingSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e TopupsPendingSubtotalPrepaymentPartType2) ToPointer() *TopupsPendingSubtotalPrepaymentPartType2 {
	return &e
}
func (e *TopupsPendingSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = TopupsPendingSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsPendingSubtotalPrepaymentPartType2: %v", v)
	}
}

// TopupsPendingSubtotalTransactionType2 - Represents the transaction type
type TopupsPendingSubtotalTransactionType2 string

const (
	TopupsPendingSubtotalTransactionType2Payment                           TopupsPendingSubtotalTransactionType2 = "payment"
	TopupsPendingSubtotalTransactionType2SplitPayment                      TopupsPendingSubtotalTransactionType2 = "split-payment"
	TopupsPendingSubtotalTransactionType2FailedPayment                     TopupsPendingSubtotalTransactionType2 = "failed-payment"
	TopupsPendingSubtotalTransactionType2FailedPlatformSplitPayment        TopupsPendingSubtotalTransactionType2 = "failed-platform-split-payment"
	TopupsPendingSubtotalTransactionType2FailedSplitPaymentCompensation    TopupsPendingSubtotalTransactionType2 = "failed-split-payment-compensation"
	TopupsPendingSubtotalTransactionType2Capture                           TopupsPendingSubtotalTransactionType2 = "capture"
	TopupsPendingSubtotalTransactionType2SplitTransaction                  TopupsPendingSubtotalTransactionType2 = "split-transaction"
	TopupsPendingSubtotalTransactionType2Refund                            TopupsPendingSubtotalTransactionType2 = "refund"
	TopupsPendingSubtotalTransactionType2PlatformPaymentRefund             TopupsPendingSubtotalTransactionType2 = "platform-payment-refund"
	TopupsPendingSubtotalTransactionType2ReturnedPlatformPaymentRefund     TopupsPendingSubtotalTransactionType2 = "returned-platform-payment-refund"
	TopupsPendingSubtotalTransactionType2RefundCompensation                TopupsPendingSubtotalTransactionType2 = "refund-compensation"
	TopupsPendingSubtotalTransactionType2ReturnedRefundCompensation        TopupsPendingSubtotalTransactionType2 = "returned-refund-compensation"
	TopupsPendingSubtotalTransactionType2ReturnedRefund                    TopupsPendingSubtotalTransactionType2 = "returned-refund"
	TopupsPendingSubtotalTransactionType2Chargeback                        TopupsPendingSubtotalTransactionType2 = "chargeback"
	TopupsPendingSubtotalTransactionType2ChargebackReversal                TopupsPendingSubtotalTransactionType2 = "chargeback-reversal"
	TopupsPendingSubtotalTransactionType2ChargebackCompensation            TopupsPendingSubtotalTransactionType2 = "chargeback-compensation"
	TopupsPendingSubtotalTransactionType2ReversedChargebackCompensation    TopupsPendingSubtotalTransactionType2 = "reversed-chargeback-compensation"
	TopupsPendingSubtotalTransactionType2PlatformPaymentChargeback         TopupsPendingSubtotalTransactionType2 = "platform-payment-chargeback"
	TopupsPendingSubtotalTransactionType2ReversedPlatformPaymentChargeback TopupsPendingSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	TopupsPendingSubtotalTransactionType2FeePrepayment                     TopupsPendingSubtotalTransactionType2 = "fee-prepayment"
	TopupsPendingSubtotalTransactionType2OutgoingTransfer                  TopupsPendingSubtotalTransactionType2 = "outgoing-transfer"
	TopupsPendingSubtotalTransactionType2IncomingTransfer                  TopupsPendingSubtotalTransactionType2 = "incoming-transfer"
	TopupsPendingSubtotalTransactionType2CanceledTransfer                  TopupsPendingSubtotalTransactionType2 = "canceled-transfer"
	TopupsPendingSubtotalTransactionType2ReturnedTransfer                  TopupsPendingSubtotalTransactionType2 = "returned-transfer"
	TopupsPendingSubtotalTransactionType2BalanceReserve                    TopupsPendingSubtotalTransactionType2 = "balance-reserve"
	TopupsPendingSubtotalTransactionType2BalanceReserveReturn              TopupsPendingSubtotalTransactionType2 = "balance-reserve-return"
	TopupsPendingSubtotalTransactionType2InvoiceRoundingCompensation       TopupsPendingSubtotalTransactionType2 = "invoice-rounding-compensation"
	TopupsPendingSubtotalTransactionType2RollingReserveHold                TopupsPendingSubtotalTransactionType2 = "rolling-reserve-hold"
	TopupsPendingSubtotalTransactionType2RollingReserveRelease             TopupsPendingSubtotalTransactionType2 = "rolling-reserve-release"
	TopupsPendingSubtotalTransactionType2BalanceCorrection                 TopupsPendingSubtotalTransactionType2 = "balance-correction"
	TopupsPendingSubtotalTransactionType2Repayment                         TopupsPendingSubtotalTransactionType2 = "repayment"
	TopupsPendingSubtotalTransactionType2Loan                              TopupsPendingSubtotalTransactionType2 = "loan"
	TopupsPendingSubtotalTransactionType2BalanceTopup                      TopupsPendingSubtotalTransactionType2 = "balance-topup"
	TopupsPendingSubtotalTransactionType2CashCollateralIssuance            TopupsPendingSubtotalTransactionType2 = "cash-collateral-issuance';"
	TopupsPendingSubtotalTransactionType2CashCollateralRelease             TopupsPendingSubtotalTransactionType2 = "cash-collateral-release"
	TopupsPendingSubtotalTransactionType2PendingRollingReserve             TopupsPendingSubtotalTransactionType2 = "pending-rolling-reserve"
	TopupsPendingSubtotalTransactionType2ToBeReleasedRollingReserve        TopupsPendingSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	TopupsPendingSubtotalTransactionType2HeldRollingReserve                TopupsPendingSubtotalTransactionType2 = "held-rolling-reserve"
	TopupsPendingSubtotalTransactionType2ReleasedRollingReserve            TopupsPendingSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e TopupsPendingSubtotalTransactionType2) ToPointer() *TopupsPendingSubtotalTransactionType2 {
	return &e
}
func (e *TopupsPendingSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = TopupsPendingSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsPendingSubtotalTransactionType2: %v", v)
	}
}

type TopupsPendingSubtotal2 struct {
	SubTotals []TopupsPendingSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *TopupsPendingSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *TopupsPendingSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *TopupsPendingSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *TopupsPendingSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *TopupsPendingSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *TopupsPendingSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *TopupsPendingSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *TopupsPendingSubtotal2) GetSubTotals() []TopupsPendingSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *TopupsPendingSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *TopupsPendingSubtotal2) GetMethod() *TopupsPendingSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *TopupsPendingSubtotal2) GetCardIssuer() *TopupsPendingSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *TopupsPendingSubtotal2) GetCardAudience() *TopupsPendingSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *TopupsPendingSubtotal2) GetCardRegion() *TopupsPendingSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *TopupsPendingSubtotal2) GetFeeType() *TopupsPendingSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *TopupsPendingSubtotal2) GetPrepaymentPartType() *TopupsPendingSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *TopupsPendingSubtotal2) GetTransactionType() *TopupsPendingSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type TopupsPending struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *TopupsPendingAmount     `json:"amount,omitempty"`
	Subtotals []TopupsPendingSubtotal2 `json:"subtotals,omitempty"`
}

func (o *TopupsPending) GetAmount() *TopupsPendingAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *TopupsPending) GetSubtotals() []TopupsPendingSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// TopupsMovedToAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type TopupsMovedToAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *TopupsMovedToAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *TopupsMovedToAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// TopupsMovedToAvailableSubTotalMethod1 - Payment type of the transactions
type TopupsMovedToAvailableSubTotalMethod1 string

const (
	TopupsMovedToAvailableSubTotalMethod1Alma              TopupsMovedToAvailableSubTotalMethod1 = "alma"
	TopupsMovedToAvailableSubTotalMethod1Bacs              TopupsMovedToAvailableSubTotalMethod1 = "bacs"
	TopupsMovedToAvailableSubTotalMethod1Applepay          TopupsMovedToAvailableSubTotalMethod1 = "applepay"
	TopupsMovedToAvailableSubTotalMethod1Bancomatpay       TopupsMovedToAvailableSubTotalMethod1 = "bancomatpay"
	TopupsMovedToAvailableSubTotalMethod1Bancontact        TopupsMovedToAvailableSubTotalMethod1 = "bancontact"
	TopupsMovedToAvailableSubTotalMethod1Banktransfer      TopupsMovedToAvailableSubTotalMethod1 = "banktransfer"
	TopupsMovedToAvailableSubTotalMethod1Belfius           TopupsMovedToAvailableSubTotalMethod1 = "belfius"
	TopupsMovedToAvailableSubTotalMethod1Billie            TopupsMovedToAvailableSubTotalMethod1 = "billie"
	TopupsMovedToAvailableSubTotalMethod1Bizum             TopupsMovedToAvailableSubTotalMethod1 = "bizum"
	TopupsMovedToAvailableSubTotalMethod1Bitcoin           TopupsMovedToAvailableSubTotalMethod1 = "bitcoin"
	TopupsMovedToAvailableSubTotalMethod1Blik              TopupsMovedToAvailableSubTotalMethod1 = "blik"
	TopupsMovedToAvailableSubTotalMethod1Creditcard        TopupsMovedToAvailableSubTotalMethod1 = "creditcard"
	TopupsMovedToAvailableSubTotalMethod1Directdebit       TopupsMovedToAvailableSubTotalMethod1 = "directdebit"
	TopupsMovedToAvailableSubTotalMethod1Eps               TopupsMovedToAvailableSubTotalMethod1 = "eps"
	TopupsMovedToAvailableSubTotalMethod1Giftcard          TopupsMovedToAvailableSubTotalMethod1 = "giftcard"
	TopupsMovedToAvailableSubTotalMethod1Giropay           TopupsMovedToAvailableSubTotalMethod1 = "giropay"
	TopupsMovedToAvailableSubTotalMethod1Googlepay         TopupsMovedToAvailableSubTotalMethod1 = "googlepay"
	TopupsMovedToAvailableSubTotalMethod1Ideal             TopupsMovedToAvailableSubTotalMethod1 = "ideal"
	TopupsMovedToAvailableSubTotalMethod1In3               TopupsMovedToAvailableSubTotalMethod1 = "in3"
	TopupsMovedToAvailableSubTotalMethod1Inghomepay        TopupsMovedToAvailableSubTotalMethod1 = "inghomepay"
	TopupsMovedToAvailableSubTotalMethod1Kbc               TopupsMovedToAvailableSubTotalMethod1 = "kbc"
	TopupsMovedToAvailableSubTotalMethod1Klarnapaylater    TopupsMovedToAvailableSubTotalMethod1 = "klarnapaylater"
	TopupsMovedToAvailableSubTotalMethod1Klarnapaynow      TopupsMovedToAvailableSubTotalMethod1 = "klarnapaynow"
	TopupsMovedToAvailableSubTotalMethod1Klarnasliceit     TopupsMovedToAvailableSubTotalMethod1 = "klarnasliceit"
	TopupsMovedToAvailableSubTotalMethod1Klarna            TopupsMovedToAvailableSubTotalMethod1 = "klarna"
	TopupsMovedToAvailableSubTotalMethod1Mbway             TopupsMovedToAvailableSubTotalMethod1 = "mbway"
	TopupsMovedToAvailableSubTotalMethod1Multibanco        TopupsMovedToAvailableSubTotalMethod1 = "multibanco"
	TopupsMovedToAvailableSubTotalMethod1Mybank            TopupsMovedToAvailableSubTotalMethod1 = "mybank"
	TopupsMovedToAvailableSubTotalMethod1Paybybank         TopupsMovedToAvailableSubTotalMethod1 = "paybybank"
	TopupsMovedToAvailableSubTotalMethod1Payconiq          TopupsMovedToAvailableSubTotalMethod1 = "payconiq"
	TopupsMovedToAvailableSubTotalMethod1Paypal            TopupsMovedToAvailableSubTotalMethod1 = "paypal"
	TopupsMovedToAvailableSubTotalMethod1Paysafecard       TopupsMovedToAvailableSubTotalMethod1 = "paysafecard"
	TopupsMovedToAvailableSubTotalMethod1Przelewy24        TopupsMovedToAvailableSubTotalMethod1 = "przelewy24"
	TopupsMovedToAvailableSubTotalMethod1Riverty           TopupsMovedToAvailableSubTotalMethod1 = "riverty"
	TopupsMovedToAvailableSubTotalMethod1Satispay          TopupsMovedToAvailableSubTotalMethod1 = "satispay"
	TopupsMovedToAvailableSubTotalMethod1Podiumcadeaukaart TopupsMovedToAvailableSubTotalMethod1 = "podiumcadeaukaart"
	TopupsMovedToAvailableSubTotalMethod1Pointofsale       TopupsMovedToAvailableSubTotalMethod1 = "pointofsale"
	TopupsMovedToAvailableSubTotalMethod1Sofort            TopupsMovedToAvailableSubTotalMethod1 = "sofort"
	TopupsMovedToAvailableSubTotalMethod1Swish             TopupsMovedToAvailableSubTotalMethod1 = "swish"
	TopupsMovedToAvailableSubTotalMethod1Trustly           TopupsMovedToAvailableSubTotalMethod1 = "trustly"
	TopupsMovedToAvailableSubTotalMethod1Twint             TopupsMovedToAvailableSubTotalMethod1 = "twint"
	TopupsMovedToAvailableSubTotalMethod1Voucher           TopupsMovedToAvailableSubTotalMethod1 = "voucher"
)

func (e TopupsMovedToAvailableSubTotalMethod1) ToPointer() *TopupsMovedToAvailableSubTotalMethod1 {
	return &e
}
func (e *TopupsMovedToAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = TopupsMovedToAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsMovedToAvailableSubTotalMethod1: %v", v)
	}
}

// TopupsMovedToAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type TopupsMovedToAvailableSubTotalCardIssuer1 string

const (
	TopupsMovedToAvailableSubTotalCardIssuer1Amex          TopupsMovedToAvailableSubTotalCardIssuer1 = "amex"
	TopupsMovedToAvailableSubTotalCardIssuer1Maestro       TopupsMovedToAvailableSubTotalCardIssuer1 = "maestro"
	TopupsMovedToAvailableSubTotalCardIssuer1CarteBancaire TopupsMovedToAvailableSubTotalCardIssuer1 = "carte-bancaire"
	TopupsMovedToAvailableSubTotalCardIssuer1Other         TopupsMovedToAvailableSubTotalCardIssuer1 = "other"
)

func (e TopupsMovedToAvailableSubTotalCardIssuer1) ToPointer() *TopupsMovedToAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *TopupsMovedToAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = TopupsMovedToAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsMovedToAvailableSubTotalCardIssuer1: %v", v)
	}
}

// TopupsMovedToAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type TopupsMovedToAvailableSubTotalCardAudience1 string

const (
	TopupsMovedToAvailableSubTotalCardAudience1Corporate TopupsMovedToAvailableSubTotalCardAudience1 = "corporate"
	TopupsMovedToAvailableSubTotalCardAudience1Other     TopupsMovedToAvailableSubTotalCardAudience1 = "other"
)

func (e TopupsMovedToAvailableSubTotalCardAudience1) ToPointer() *TopupsMovedToAvailableSubTotalCardAudience1 {
	return &e
}
func (e *TopupsMovedToAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = TopupsMovedToAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsMovedToAvailableSubTotalCardAudience1: %v", v)
	}
}

// TopupsMovedToAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type TopupsMovedToAvailableSubTotalCardRegion1 string

const (
	TopupsMovedToAvailableSubTotalCardRegion1IntraEea TopupsMovedToAvailableSubTotalCardRegion1 = "intra-eea"
	TopupsMovedToAvailableSubTotalCardRegion1IntraEu  TopupsMovedToAvailableSubTotalCardRegion1 = "intra-eu"
	TopupsMovedToAvailableSubTotalCardRegion1Domestic TopupsMovedToAvailableSubTotalCardRegion1 = "domestic"
	TopupsMovedToAvailableSubTotalCardRegion1Other    TopupsMovedToAvailableSubTotalCardRegion1 = "other"
)

func (e TopupsMovedToAvailableSubTotalCardRegion1) ToPointer() *TopupsMovedToAvailableSubTotalCardRegion1 {
	return &e
}
func (e *TopupsMovedToAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = TopupsMovedToAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsMovedToAvailableSubTotalCardRegion1: %v", v)
	}
}

// TopupsMovedToAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type TopupsMovedToAvailableSubTotalFeeType1 string

const (
	TopupsMovedToAvailableSubTotalFeeType1PaymentFee                                        TopupsMovedToAvailableSubTotalFeeType1 = "payment-fee"
	TopupsMovedToAvailableSubTotalFeeType1DirectDebitFailureFee                             TopupsMovedToAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	TopupsMovedToAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        TopupsMovedToAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	TopupsMovedToAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  TopupsMovedToAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	TopupsMovedToAvailableSubTotalFeeType1PartnerCommission                                 TopupsMovedToAvailableSubTotalFeeType1 = "partner-commission"
	TopupsMovedToAvailableSubTotalFeeType1ApplicationFee                                    TopupsMovedToAvailableSubTotalFeeType1 = "application-fee"
	TopupsMovedToAvailableSubTotalFeeType1CaptureFee                                        TopupsMovedToAvailableSubTotalFeeType1 = "capture-fee"
	TopupsMovedToAvailableSubTotalFeeType1RefundFee                                         TopupsMovedToAvailableSubTotalFeeType1 = "refund-fee"
	TopupsMovedToAvailableSubTotalFeeType1ChargebackFee                                     TopupsMovedToAvailableSubTotalFeeType1 = "chargeback-fee"
	TopupsMovedToAvailableSubTotalFeeType1PaymentNotificationFee                            TopupsMovedToAvailableSubTotalFeeType1 = "payment-notification-fee"
	TopupsMovedToAvailableSubTotalFeeType1TransferNotificationFee                           TopupsMovedToAvailableSubTotalFeeType1 = "transfer-notification-fee"
	TopupsMovedToAvailableSubTotalFeeType1PayoutFee                                         TopupsMovedToAvailableSubTotalFeeType1 = "payout-fee"
	TopupsMovedToAvailableSubTotalFeeType1FeeDiscount                                       TopupsMovedToAvailableSubTotalFeeType1 = "fee-discount"
	TopupsMovedToAvailableSubTotalFeeType1FeeReimbursement                                  TopupsMovedToAvailableSubTotalFeeType1 = "fee-reimbursement"
	TopupsMovedToAvailableSubTotalFeeType1PlatformVolumeFee                                 TopupsMovedToAvailableSubTotalFeeType1 = "platform-volume-fee"
	TopupsMovedToAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 TopupsMovedToAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	TopupsMovedToAvailableSubTotalFeeType1BalanceChargeFee                                  TopupsMovedToAvailableSubTotalFeeType1 = "balance-charge-fee"
	TopupsMovedToAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   TopupsMovedToAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	TopupsMovedToAvailableSubTotalFeeType1TerminalMonthlyFee                                TopupsMovedToAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	TopupsMovedToAvailableSubTotalFeeType1AcceptanceRiskFee                                 TopupsMovedToAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	TopupsMovedToAvailableSubTotalFeeType1TopUpFee                                          TopupsMovedToAvailableSubTotalFeeType1 = "top-up-fee"
	TopupsMovedToAvailableSubTotalFeeType1PaymentGatewayFee                                 TopupsMovedToAvailableSubTotalFeeType1 = "payment-gateway-fee"
	TopupsMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   TopupsMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	TopupsMovedToAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee TopupsMovedToAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	TopupsMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             TopupsMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	TopupsMovedToAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           TopupsMovedToAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	TopupsMovedToAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           TopupsMovedToAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e TopupsMovedToAvailableSubTotalFeeType1) ToPointer() *TopupsMovedToAvailableSubTotalFeeType1 {
	return &e
}
func (e *TopupsMovedToAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = TopupsMovedToAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsMovedToAvailableSubTotalFeeType1: %v", v)
	}
}

// TopupsMovedToAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type TopupsMovedToAvailableSubTotalPrepaymentPartType1 string

const (
	TopupsMovedToAvailableSubTotalPrepaymentPartType1Fee                     TopupsMovedToAvailableSubTotalPrepaymentPartType1 = "fee"
	TopupsMovedToAvailableSubTotalPrepaymentPartType1FeeReimbursement        TopupsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	TopupsMovedToAvailableSubTotalPrepaymentPartType1FeeDiscount             TopupsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	TopupsMovedToAvailableSubTotalPrepaymentPartType1FeeVat                  TopupsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	TopupsMovedToAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation TopupsMovedToAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e TopupsMovedToAvailableSubTotalPrepaymentPartType1) ToPointer() *TopupsMovedToAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *TopupsMovedToAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = TopupsMovedToAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsMovedToAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// TopupsMovedToAvailableSubTotalTransactionType1 - Represents the transaction type
type TopupsMovedToAvailableSubTotalTransactionType1 string

const (
	TopupsMovedToAvailableSubTotalTransactionType1Payment                           TopupsMovedToAvailableSubTotalTransactionType1 = "payment"
	TopupsMovedToAvailableSubTotalTransactionType1SplitPayment                      TopupsMovedToAvailableSubTotalTransactionType1 = "split-payment"
	TopupsMovedToAvailableSubTotalTransactionType1FailedPayment                     TopupsMovedToAvailableSubTotalTransactionType1 = "failed-payment"
	TopupsMovedToAvailableSubTotalTransactionType1FailedPlatformSplitPayment        TopupsMovedToAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	TopupsMovedToAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    TopupsMovedToAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	TopupsMovedToAvailableSubTotalTransactionType1Capture                           TopupsMovedToAvailableSubTotalTransactionType1 = "capture"
	TopupsMovedToAvailableSubTotalTransactionType1SplitTransaction                  TopupsMovedToAvailableSubTotalTransactionType1 = "split-transaction"
	TopupsMovedToAvailableSubTotalTransactionType1Refund                            TopupsMovedToAvailableSubTotalTransactionType1 = "refund"
	TopupsMovedToAvailableSubTotalTransactionType1PlatformPaymentRefund             TopupsMovedToAvailableSubTotalTransactionType1 = "platform-payment-refund"
	TopupsMovedToAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     TopupsMovedToAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	TopupsMovedToAvailableSubTotalTransactionType1RefundCompensation                TopupsMovedToAvailableSubTotalTransactionType1 = "refund-compensation"
	TopupsMovedToAvailableSubTotalTransactionType1ReturnedRefundCompensation        TopupsMovedToAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	TopupsMovedToAvailableSubTotalTransactionType1ReturnedRefund                    TopupsMovedToAvailableSubTotalTransactionType1 = "returned-refund"
	TopupsMovedToAvailableSubTotalTransactionType1Chargeback                        TopupsMovedToAvailableSubTotalTransactionType1 = "chargeback"
	TopupsMovedToAvailableSubTotalTransactionType1ChargebackReversal                TopupsMovedToAvailableSubTotalTransactionType1 = "chargeback-reversal"
	TopupsMovedToAvailableSubTotalTransactionType1ChargebackCompensation            TopupsMovedToAvailableSubTotalTransactionType1 = "chargeback-compensation"
	TopupsMovedToAvailableSubTotalTransactionType1ReversedChargebackCompensation    TopupsMovedToAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	TopupsMovedToAvailableSubTotalTransactionType1PlatformPaymentChargeback         TopupsMovedToAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	TopupsMovedToAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback TopupsMovedToAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	TopupsMovedToAvailableSubTotalTransactionType1FeePrepayment                     TopupsMovedToAvailableSubTotalTransactionType1 = "fee-prepayment"
	TopupsMovedToAvailableSubTotalTransactionType1OutgoingTransfer                  TopupsMovedToAvailableSubTotalTransactionType1 = "outgoing-transfer"
	TopupsMovedToAvailableSubTotalTransactionType1IncomingTransfer                  TopupsMovedToAvailableSubTotalTransactionType1 = "incoming-transfer"
	TopupsMovedToAvailableSubTotalTransactionType1CanceledTransfer                  TopupsMovedToAvailableSubTotalTransactionType1 = "canceled-transfer"
	TopupsMovedToAvailableSubTotalTransactionType1ReturnedTransfer                  TopupsMovedToAvailableSubTotalTransactionType1 = "returned-transfer"
	TopupsMovedToAvailableSubTotalTransactionType1BalanceReserve                    TopupsMovedToAvailableSubTotalTransactionType1 = "balance-reserve"
	TopupsMovedToAvailableSubTotalTransactionType1BalanceReserveReturn              TopupsMovedToAvailableSubTotalTransactionType1 = "balance-reserve-return"
	TopupsMovedToAvailableSubTotalTransactionType1InvoiceRoundingCompensation       TopupsMovedToAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	TopupsMovedToAvailableSubTotalTransactionType1RollingReserveHold                TopupsMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	TopupsMovedToAvailableSubTotalTransactionType1RollingReserveRelease             TopupsMovedToAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	TopupsMovedToAvailableSubTotalTransactionType1BalanceCorrection                 TopupsMovedToAvailableSubTotalTransactionType1 = "balance-correction"
	TopupsMovedToAvailableSubTotalTransactionType1Repayment                         TopupsMovedToAvailableSubTotalTransactionType1 = "repayment"
	TopupsMovedToAvailableSubTotalTransactionType1Loan                              TopupsMovedToAvailableSubTotalTransactionType1 = "loan"
	TopupsMovedToAvailableSubTotalTransactionType1BalanceTopup                      TopupsMovedToAvailableSubTotalTransactionType1 = "balance-topup"
	TopupsMovedToAvailableSubTotalTransactionType1CashCollateralIssuance            TopupsMovedToAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	TopupsMovedToAvailableSubTotalTransactionType1CashCollateralRelease             TopupsMovedToAvailableSubTotalTransactionType1 = "cash-collateral-release"
	TopupsMovedToAvailableSubTotalTransactionType1PendingRollingReserve             TopupsMovedToAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	TopupsMovedToAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        TopupsMovedToAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	TopupsMovedToAvailableSubTotalTransactionType1HeldRollingReserve                TopupsMovedToAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	TopupsMovedToAvailableSubTotalTransactionType1ReleasedRollingReserve            TopupsMovedToAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e TopupsMovedToAvailableSubTotalTransactionType1) ToPointer() *TopupsMovedToAvailableSubTotalTransactionType1 {
	return &e
}
func (e *TopupsMovedToAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = TopupsMovedToAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsMovedToAvailableSubTotalTransactionType1: %v", v)
	}
}

type TopupsMovedToAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *TopupsMovedToAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *TopupsMovedToAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *TopupsMovedToAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *TopupsMovedToAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *TopupsMovedToAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *TopupsMovedToAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *TopupsMovedToAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *TopupsMovedToAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *TopupsMovedToAvailableSubTotal1) GetMethod() *TopupsMovedToAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *TopupsMovedToAvailableSubTotal1) GetCardIssuer() *TopupsMovedToAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *TopupsMovedToAvailableSubTotal1) GetCardAudience() *TopupsMovedToAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *TopupsMovedToAvailableSubTotal1) GetCardRegion() *TopupsMovedToAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *TopupsMovedToAvailableSubTotal1) GetFeeType() *TopupsMovedToAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *TopupsMovedToAvailableSubTotal1) GetPrepaymentPartType() *TopupsMovedToAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *TopupsMovedToAvailableSubTotal1) GetTransactionType() *TopupsMovedToAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// TopupsMovedToAvailableSubtotalMethod2 - Payment type of the transactions
type TopupsMovedToAvailableSubtotalMethod2 string

const (
	TopupsMovedToAvailableSubtotalMethod2Alma              TopupsMovedToAvailableSubtotalMethod2 = "alma"
	TopupsMovedToAvailableSubtotalMethod2Bacs              TopupsMovedToAvailableSubtotalMethod2 = "bacs"
	TopupsMovedToAvailableSubtotalMethod2Applepay          TopupsMovedToAvailableSubtotalMethod2 = "applepay"
	TopupsMovedToAvailableSubtotalMethod2Bancomatpay       TopupsMovedToAvailableSubtotalMethod2 = "bancomatpay"
	TopupsMovedToAvailableSubtotalMethod2Bancontact        TopupsMovedToAvailableSubtotalMethod2 = "bancontact"
	TopupsMovedToAvailableSubtotalMethod2Banktransfer      TopupsMovedToAvailableSubtotalMethod2 = "banktransfer"
	TopupsMovedToAvailableSubtotalMethod2Belfius           TopupsMovedToAvailableSubtotalMethod2 = "belfius"
	TopupsMovedToAvailableSubtotalMethod2Billie            TopupsMovedToAvailableSubtotalMethod2 = "billie"
	TopupsMovedToAvailableSubtotalMethod2Bizum             TopupsMovedToAvailableSubtotalMethod2 = "bizum"
	TopupsMovedToAvailableSubtotalMethod2Bitcoin           TopupsMovedToAvailableSubtotalMethod2 = "bitcoin"
	TopupsMovedToAvailableSubtotalMethod2Blik              TopupsMovedToAvailableSubtotalMethod2 = "blik"
	TopupsMovedToAvailableSubtotalMethod2Creditcard        TopupsMovedToAvailableSubtotalMethod2 = "creditcard"
	TopupsMovedToAvailableSubtotalMethod2Directdebit       TopupsMovedToAvailableSubtotalMethod2 = "directdebit"
	TopupsMovedToAvailableSubtotalMethod2Eps               TopupsMovedToAvailableSubtotalMethod2 = "eps"
	TopupsMovedToAvailableSubtotalMethod2Giftcard          TopupsMovedToAvailableSubtotalMethod2 = "giftcard"
	TopupsMovedToAvailableSubtotalMethod2Giropay           TopupsMovedToAvailableSubtotalMethod2 = "giropay"
	TopupsMovedToAvailableSubtotalMethod2Googlepay         TopupsMovedToAvailableSubtotalMethod2 = "googlepay"
	TopupsMovedToAvailableSubtotalMethod2Ideal             TopupsMovedToAvailableSubtotalMethod2 = "ideal"
	TopupsMovedToAvailableSubtotalMethod2In3               TopupsMovedToAvailableSubtotalMethod2 = "in3"
	TopupsMovedToAvailableSubtotalMethod2Inghomepay        TopupsMovedToAvailableSubtotalMethod2 = "inghomepay"
	TopupsMovedToAvailableSubtotalMethod2Kbc               TopupsMovedToAvailableSubtotalMethod2 = "kbc"
	TopupsMovedToAvailableSubtotalMethod2Klarnapaylater    TopupsMovedToAvailableSubtotalMethod2 = "klarnapaylater"
	TopupsMovedToAvailableSubtotalMethod2Klarnapaynow      TopupsMovedToAvailableSubtotalMethod2 = "klarnapaynow"
	TopupsMovedToAvailableSubtotalMethod2Klarnasliceit     TopupsMovedToAvailableSubtotalMethod2 = "klarnasliceit"
	TopupsMovedToAvailableSubtotalMethod2Klarna            TopupsMovedToAvailableSubtotalMethod2 = "klarna"
	TopupsMovedToAvailableSubtotalMethod2Mbway             TopupsMovedToAvailableSubtotalMethod2 = "mbway"
	TopupsMovedToAvailableSubtotalMethod2Multibanco        TopupsMovedToAvailableSubtotalMethod2 = "multibanco"
	TopupsMovedToAvailableSubtotalMethod2Mybank            TopupsMovedToAvailableSubtotalMethod2 = "mybank"
	TopupsMovedToAvailableSubtotalMethod2Paybybank         TopupsMovedToAvailableSubtotalMethod2 = "paybybank"
	TopupsMovedToAvailableSubtotalMethod2Payconiq          TopupsMovedToAvailableSubtotalMethod2 = "payconiq"
	TopupsMovedToAvailableSubtotalMethod2Paypal            TopupsMovedToAvailableSubtotalMethod2 = "paypal"
	TopupsMovedToAvailableSubtotalMethod2Paysafecard       TopupsMovedToAvailableSubtotalMethod2 = "paysafecard"
	TopupsMovedToAvailableSubtotalMethod2Przelewy24        TopupsMovedToAvailableSubtotalMethod2 = "przelewy24"
	TopupsMovedToAvailableSubtotalMethod2Riverty           TopupsMovedToAvailableSubtotalMethod2 = "riverty"
	TopupsMovedToAvailableSubtotalMethod2Satispay          TopupsMovedToAvailableSubtotalMethod2 = "satispay"
	TopupsMovedToAvailableSubtotalMethod2Podiumcadeaukaart TopupsMovedToAvailableSubtotalMethod2 = "podiumcadeaukaart"
	TopupsMovedToAvailableSubtotalMethod2Pointofsale       TopupsMovedToAvailableSubtotalMethod2 = "pointofsale"
	TopupsMovedToAvailableSubtotalMethod2Sofort            TopupsMovedToAvailableSubtotalMethod2 = "sofort"
	TopupsMovedToAvailableSubtotalMethod2Swish             TopupsMovedToAvailableSubtotalMethod2 = "swish"
	TopupsMovedToAvailableSubtotalMethod2Trustly           TopupsMovedToAvailableSubtotalMethod2 = "trustly"
	TopupsMovedToAvailableSubtotalMethod2Twint             TopupsMovedToAvailableSubtotalMethod2 = "twint"
	TopupsMovedToAvailableSubtotalMethod2Voucher           TopupsMovedToAvailableSubtotalMethod2 = "voucher"
)

func (e TopupsMovedToAvailableSubtotalMethod2) ToPointer() *TopupsMovedToAvailableSubtotalMethod2 {
	return &e
}
func (e *TopupsMovedToAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = TopupsMovedToAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsMovedToAvailableSubtotalMethod2: %v", v)
	}
}

// TopupsMovedToAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type TopupsMovedToAvailableSubtotalCardIssuer2 string

const (
	TopupsMovedToAvailableSubtotalCardIssuer2Amex          TopupsMovedToAvailableSubtotalCardIssuer2 = "amex"
	TopupsMovedToAvailableSubtotalCardIssuer2Maestro       TopupsMovedToAvailableSubtotalCardIssuer2 = "maestro"
	TopupsMovedToAvailableSubtotalCardIssuer2CarteBancaire TopupsMovedToAvailableSubtotalCardIssuer2 = "carte-bancaire"
	TopupsMovedToAvailableSubtotalCardIssuer2Other         TopupsMovedToAvailableSubtotalCardIssuer2 = "other"
)

func (e TopupsMovedToAvailableSubtotalCardIssuer2) ToPointer() *TopupsMovedToAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *TopupsMovedToAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = TopupsMovedToAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsMovedToAvailableSubtotalCardIssuer2: %v", v)
	}
}

// TopupsMovedToAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type TopupsMovedToAvailableSubtotalCardAudience2 string

const (
	TopupsMovedToAvailableSubtotalCardAudience2Corporate TopupsMovedToAvailableSubtotalCardAudience2 = "corporate"
	TopupsMovedToAvailableSubtotalCardAudience2Other     TopupsMovedToAvailableSubtotalCardAudience2 = "other"
)

func (e TopupsMovedToAvailableSubtotalCardAudience2) ToPointer() *TopupsMovedToAvailableSubtotalCardAudience2 {
	return &e
}
func (e *TopupsMovedToAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = TopupsMovedToAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsMovedToAvailableSubtotalCardAudience2: %v", v)
	}
}

// TopupsMovedToAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type TopupsMovedToAvailableSubtotalCardRegion2 string

const (
	TopupsMovedToAvailableSubtotalCardRegion2IntraEea TopupsMovedToAvailableSubtotalCardRegion2 = "intra-eea"
	TopupsMovedToAvailableSubtotalCardRegion2IntraEu  TopupsMovedToAvailableSubtotalCardRegion2 = "intra-eu"
	TopupsMovedToAvailableSubtotalCardRegion2Domestic TopupsMovedToAvailableSubtotalCardRegion2 = "domestic"
	TopupsMovedToAvailableSubtotalCardRegion2Other    TopupsMovedToAvailableSubtotalCardRegion2 = "other"
)

func (e TopupsMovedToAvailableSubtotalCardRegion2) ToPointer() *TopupsMovedToAvailableSubtotalCardRegion2 {
	return &e
}
func (e *TopupsMovedToAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = TopupsMovedToAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsMovedToAvailableSubtotalCardRegion2: %v", v)
	}
}

// TopupsMovedToAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type TopupsMovedToAvailableSubtotalFeeType2 string

const (
	TopupsMovedToAvailableSubtotalFeeType2PaymentFee                                        TopupsMovedToAvailableSubtotalFeeType2 = "payment-fee"
	TopupsMovedToAvailableSubtotalFeeType2DirectDebitFailureFee                             TopupsMovedToAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	TopupsMovedToAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        TopupsMovedToAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	TopupsMovedToAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  TopupsMovedToAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	TopupsMovedToAvailableSubtotalFeeType2PartnerCommission                                 TopupsMovedToAvailableSubtotalFeeType2 = "partner-commission"
	TopupsMovedToAvailableSubtotalFeeType2ApplicationFee                                    TopupsMovedToAvailableSubtotalFeeType2 = "application-fee"
	TopupsMovedToAvailableSubtotalFeeType2CaptureFee                                        TopupsMovedToAvailableSubtotalFeeType2 = "capture-fee"
	TopupsMovedToAvailableSubtotalFeeType2RefundFee                                         TopupsMovedToAvailableSubtotalFeeType2 = "refund-fee"
	TopupsMovedToAvailableSubtotalFeeType2ChargebackFee                                     TopupsMovedToAvailableSubtotalFeeType2 = "chargeback-fee"
	TopupsMovedToAvailableSubtotalFeeType2PaymentNotificationFee                            TopupsMovedToAvailableSubtotalFeeType2 = "payment-notification-fee"
	TopupsMovedToAvailableSubtotalFeeType2TransferNotificationFee                           TopupsMovedToAvailableSubtotalFeeType2 = "transfer-notification-fee"
	TopupsMovedToAvailableSubtotalFeeType2PayoutFee                                         TopupsMovedToAvailableSubtotalFeeType2 = "payout-fee"
	TopupsMovedToAvailableSubtotalFeeType2FeeDiscount                                       TopupsMovedToAvailableSubtotalFeeType2 = "fee-discount"
	TopupsMovedToAvailableSubtotalFeeType2FeeReimbursement                                  TopupsMovedToAvailableSubtotalFeeType2 = "fee-reimbursement"
	TopupsMovedToAvailableSubtotalFeeType2PlatformVolumeFee                                 TopupsMovedToAvailableSubtotalFeeType2 = "platform-volume-fee"
	TopupsMovedToAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 TopupsMovedToAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	TopupsMovedToAvailableSubtotalFeeType2BalanceChargeFee                                  TopupsMovedToAvailableSubtotalFeeType2 = "balance-charge-fee"
	TopupsMovedToAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   TopupsMovedToAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	TopupsMovedToAvailableSubtotalFeeType2TerminalMonthlyFee                                TopupsMovedToAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	TopupsMovedToAvailableSubtotalFeeType2AcceptanceRiskFee                                 TopupsMovedToAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	TopupsMovedToAvailableSubtotalFeeType2TopUpFee                                          TopupsMovedToAvailableSubtotalFeeType2 = "top-up-fee"
	TopupsMovedToAvailableSubtotalFeeType2PaymentGatewayFee                                 TopupsMovedToAvailableSubtotalFeeType2 = "payment-gateway-fee"
	TopupsMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   TopupsMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	TopupsMovedToAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee TopupsMovedToAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	TopupsMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             TopupsMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	TopupsMovedToAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           TopupsMovedToAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	TopupsMovedToAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           TopupsMovedToAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e TopupsMovedToAvailableSubtotalFeeType2) ToPointer() *TopupsMovedToAvailableSubtotalFeeType2 {
	return &e
}
func (e *TopupsMovedToAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = TopupsMovedToAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsMovedToAvailableSubtotalFeeType2: %v", v)
	}
}

// TopupsMovedToAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type TopupsMovedToAvailableSubtotalPrepaymentPartType2 string

const (
	TopupsMovedToAvailableSubtotalPrepaymentPartType2Fee                     TopupsMovedToAvailableSubtotalPrepaymentPartType2 = "fee"
	TopupsMovedToAvailableSubtotalPrepaymentPartType2FeeReimbursement        TopupsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	TopupsMovedToAvailableSubtotalPrepaymentPartType2FeeDiscount             TopupsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	TopupsMovedToAvailableSubtotalPrepaymentPartType2FeeVat                  TopupsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	TopupsMovedToAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation TopupsMovedToAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e TopupsMovedToAvailableSubtotalPrepaymentPartType2) ToPointer() *TopupsMovedToAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *TopupsMovedToAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = TopupsMovedToAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsMovedToAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// TopupsMovedToAvailableSubtotalTransactionType2 - Represents the transaction type
type TopupsMovedToAvailableSubtotalTransactionType2 string

const (
	TopupsMovedToAvailableSubtotalTransactionType2Payment                           TopupsMovedToAvailableSubtotalTransactionType2 = "payment"
	TopupsMovedToAvailableSubtotalTransactionType2SplitPayment                      TopupsMovedToAvailableSubtotalTransactionType2 = "split-payment"
	TopupsMovedToAvailableSubtotalTransactionType2FailedPayment                     TopupsMovedToAvailableSubtotalTransactionType2 = "failed-payment"
	TopupsMovedToAvailableSubtotalTransactionType2FailedPlatformSplitPayment        TopupsMovedToAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	TopupsMovedToAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    TopupsMovedToAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	TopupsMovedToAvailableSubtotalTransactionType2Capture                           TopupsMovedToAvailableSubtotalTransactionType2 = "capture"
	TopupsMovedToAvailableSubtotalTransactionType2SplitTransaction                  TopupsMovedToAvailableSubtotalTransactionType2 = "split-transaction"
	TopupsMovedToAvailableSubtotalTransactionType2Refund                            TopupsMovedToAvailableSubtotalTransactionType2 = "refund"
	TopupsMovedToAvailableSubtotalTransactionType2PlatformPaymentRefund             TopupsMovedToAvailableSubtotalTransactionType2 = "platform-payment-refund"
	TopupsMovedToAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     TopupsMovedToAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	TopupsMovedToAvailableSubtotalTransactionType2RefundCompensation                TopupsMovedToAvailableSubtotalTransactionType2 = "refund-compensation"
	TopupsMovedToAvailableSubtotalTransactionType2ReturnedRefundCompensation        TopupsMovedToAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	TopupsMovedToAvailableSubtotalTransactionType2ReturnedRefund                    TopupsMovedToAvailableSubtotalTransactionType2 = "returned-refund"
	TopupsMovedToAvailableSubtotalTransactionType2Chargeback                        TopupsMovedToAvailableSubtotalTransactionType2 = "chargeback"
	TopupsMovedToAvailableSubtotalTransactionType2ChargebackReversal                TopupsMovedToAvailableSubtotalTransactionType2 = "chargeback-reversal"
	TopupsMovedToAvailableSubtotalTransactionType2ChargebackCompensation            TopupsMovedToAvailableSubtotalTransactionType2 = "chargeback-compensation"
	TopupsMovedToAvailableSubtotalTransactionType2ReversedChargebackCompensation    TopupsMovedToAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	TopupsMovedToAvailableSubtotalTransactionType2PlatformPaymentChargeback         TopupsMovedToAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	TopupsMovedToAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback TopupsMovedToAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	TopupsMovedToAvailableSubtotalTransactionType2FeePrepayment                     TopupsMovedToAvailableSubtotalTransactionType2 = "fee-prepayment"
	TopupsMovedToAvailableSubtotalTransactionType2OutgoingTransfer                  TopupsMovedToAvailableSubtotalTransactionType2 = "outgoing-transfer"
	TopupsMovedToAvailableSubtotalTransactionType2IncomingTransfer                  TopupsMovedToAvailableSubtotalTransactionType2 = "incoming-transfer"
	TopupsMovedToAvailableSubtotalTransactionType2CanceledTransfer                  TopupsMovedToAvailableSubtotalTransactionType2 = "canceled-transfer"
	TopupsMovedToAvailableSubtotalTransactionType2ReturnedTransfer                  TopupsMovedToAvailableSubtotalTransactionType2 = "returned-transfer"
	TopupsMovedToAvailableSubtotalTransactionType2BalanceReserve                    TopupsMovedToAvailableSubtotalTransactionType2 = "balance-reserve"
	TopupsMovedToAvailableSubtotalTransactionType2BalanceReserveReturn              TopupsMovedToAvailableSubtotalTransactionType2 = "balance-reserve-return"
	TopupsMovedToAvailableSubtotalTransactionType2InvoiceRoundingCompensation       TopupsMovedToAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	TopupsMovedToAvailableSubtotalTransactionType2RollingReserveHold                TopupsMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	TopupsMovedToAvailableSubtotalTransactionType2RollingReserveRelease             TopupsMovedToAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	TopupsMovedToAvailableSubtotalTransactionType2BalanceCorrection                 TopupsMovedToAvailableSubtotalTransactionType2 = "balance-correction"
	TopupsMovedToAvailableSubtotalTransactionType2Repayment                         TopupsMovedToAvailableSubtotalTransactionType2 = "repayment"
	TopupsMovedToAvailableSubtotalTransactionType2Loan                              TopupsMovedToAvailableSubtotalTransactionType2 = "loan"
	TopupsMovedToAvailableSubtotalTransactionType2BalanceTopup                      TopupsMovedToAvailableSubtotalTransactionType2 = "balance-topup"
	TopupsMovedToAvailableSubtotalTransactionType2CashCollateralIssuance            TopupsMovedToAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	TopupsMovedToAvailableSubtotalTransactionType2CashCollateralRelease             TopupsMovedToAvailableSubtotalTransactionType2 = "cash-collateral-release"
	TopupsMovedToAvailableSubtotalTransactionType2PendingRollingReserve             TopupsMovedToAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	TopupsMovedToAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        TopupsMovedToAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	TopupsMovedToAvailableSubtotalTransactionType2HeldRollingReserve                TopupsMovedToAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	TopupsMovedToAvailableSubtotalTransactionType2ReleasedRollingReserve            TopupsMovedToAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e TopupsMovedToAvailableSubtotalTransactionType2) ToPointer() *TopupsMovedToAvailableSubtotalTransactionType2 {
	return &e
}
func (e *TopupsMovedToAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = TopupsMovedToAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsMovedToAvailableSubtotalTransactionType2: %v", v)
	}
}

type TopupsMovedToAvailableSubtotal2 struct {
	SubTotals []TopupsMovedToAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *TopupsMovedToAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *TopupsMovedToAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *TopupsMovedToAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *TopupsMovedToAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *TopupsMovedToAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *TopupsMovedToAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *TopupsMovedToAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *TopupsMovedToAvailableSubtotal2) GetSubTotals() []TopupsMovedToAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *TopupsMovedToAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *TopupsMovedToAvailableSubtotal2) GetMethod() *TopupsMovedToAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *TopupsMovedToAvailableSubtotal2) GetCardIssuer() *TopupsMovedToAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *TopupsMovedToAvailableSubtotal2) GetCardAudience() *TopupsMovedToAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *TopupsMovedToAvailableSubtotal2) GetCardRegion() *TopupsMovedToAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *TopupsMovedToAvailableSubtotal2) GetFeeType() *TopupsMovedToAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *TopupsMovedToAvailableSubtotal2) GetPrepaymentPartType() *TopupsMovedToAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *TopupsMovedToAvailableSubtotal2) GetTransactionType() *TopupsMovedToAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type TopupsMovedToAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *TopupsMovedToAvailableAmount     `json:"amount,omitempty"`
	Subtotals []TopupsMovedToAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *TopupsMovedToAvailable) GetAmount() *TopupsMovedToAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *TopupsMovedToAvailable) GetSubtotals() []TopupsMovedToAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// TopupsImmediatelyAvailableAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type TopupsImmediatelyAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *TopupsImmediatelyAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *TopupsImmediatelyAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// TopupsImmediatelyAvailableSubTotalMethod1 - Payment type of the transactions
type TopupsImmediatelyAvailableSubTotalMethod1 string

const (
	TopupsImmediatelyAvailableSubTotalMethod1Alma              TopupsImmediatelyAvailableSubTotalMethod1 = "alma"
	TopupsImmediatelyAvailableSubTotalMethod1Bacs              TopupsImmediatelyAvailableSubTotalMethod1 = "bacs"
	TopupsImmediatelyAvailableSubTotalMethod1Applepay          TopupsImmediatelyAvailableSubTotalMethod1 = "applepay"
	TopupsImmediatelyAvailableSubTotalMethod1Bancomatpay       TopupsImmediatelyAvailableSubTotalMethod1 = "bancomatpay"
	TopupsImmediatelyAvailableSubTotalMethod1Bancontact        TopupsImmediatelyAvailableSubTotalMethod1 = "bancontact"
	TopupsImmediatelyAvailableSubTotalMethod1Banktransfer      TopupsImmediatelyAvailableSubTotalMethod1 = "banktransfer"
	TopupsImmediatelyAvailableSubTotalMethod1Belfius           TopupsImmediatelyAvailableSubTotalMethod1 = "belfius"
	TopupsImmediatelyAvailableSubTotalMethod1Billie            TopupsImmediatelyAvailableSubTotalMethod1 = "billie"
	TopupsImmediatelyAvailableSubTotalMethod1Bizum             TopupsImmediatelyAvailableSubTotalMethod1 = "bizum"
	TopupsImmediatelyAvailableSubTotalMethod1Bitcoin           TopupsImmediatelyAvailableSubTotalMethod1 = "bitcoin"
	TopupsImmediatelyAvailableSubTotalMethod1Blik              TopupsImmediatelyAvailableSubTotalMethod1 = "blik"
	TopupsImmediatelyAvailableSubTotalMethod1Creditcard        TopupsImmediatelyAvailableSubTotalMethod1 = "creditcard"
	TopupsImmediatelyAvailableSubTotalMethod1Directdebit       TopupsImmediatelyAvailableSubTotalMethod1 = "directdebit"
	TopupsImmediatelyAvailableSubTotalMethod1Eps               TopupsImmediatelyAvailableSubTotalMethod1 = "eps"
	TopupsImmediatelyAvailableSubTotalMethod1Giftcard          TopupsImmediatelyAvailableSubTotalMethod1 = "giftcard"
	TopupsImmediatelyAvailableSubTotalMethod1Giropay           TopupsImmediatelyAvailableSubTotalMethod1 = "giropay"
	TopupsImmediatelyAvailableSubTotalMethod1Googlepay         TopupsImmediatelyAvailableSubTotalMethod1 = "googlepay"
	TopupsImmediatelyAvailableSubTotalMethod1Ideal             TopupsImmediatelyAvailableSubTotalMethod1 = "ideal"
	TopupsImmediatelyAvailableSubTotalMethod1In3               TopupsImmediatelyAvailableSubTotalMethod1 = "in3"
	TopupsImmediatelyAvailableSubTotalMethod1Inghomepay        TopupsImmediatelyAvailableSubTotalMethod1 = "inghomepay"
	TopupsImmediatelyAvailableSubTotalMethod1Kbc               TopupsImmediatelyAvailableSubTotalMethod1 = "kbc"
	TopupsImmediatelyAvailableSubTotalMethod1Klarnapaylater    TopupsImmediatelyAvailableSubTotalMethod1 = "klarnapaylater"
	TopupsImmediatelyAvailableSubTotalMethod1Klarnapaynow      TopupsImmediatelyAvailableSubTotalMethod1 = "klarnapaynow"
	TopupsImmediatelyAvailableSubTotalMethod1Klarnasliceit     TopupsImmediatelyAvailableSubTotalMethod1 = "klarnasliceit"
	TopupsImmediatelyAvailableSubTotalMethod1Klarna            TopupsImmediatelyAvailableSubTotalMethod1 = "klarna"
	TopupsImmediatelyAvailableSubTotalMethod1Mbway             TopupsImmediatelyAvailableSubTotalMethod1 = "mbway"
	TopupsImmediatelyAvailableSubTotalMethod1Multibanco        TopupsImmediatelyAvailableSubTotalMethod1 = "multibanco"
	TopupsImmediatelyAvailableSubTotalMethod1Mybank            TopupsImmediatelyAvailableSubTotalMethod1 = "mybank"
	TopupsImmediatelyAvailableSubTotalMethod1Paybybank         TopupsImmediatelyAvailableSubTotalMethod1 = "paybybank"
	TopupsImmediatelyAvailableSubTotalMethod1Payconiq          TopupsImmediatelyAvailableSubTotalMethod1 = "payconiq"
	TopupsImmediatelyAvailableSubTotalMethod1Paypal            TopupsImmediatelyAvailableSubTotalMethod1 = "paypal"
	TopupsImmediatelyAvailableSubTotalMethod1Paysafecard       TopupsImmediatelyAvailableSubTotalMethod1 = "paysafecard"
	TopupsImmediatelyAvailableSubTotalMethod1Przelewy24        TopupsImmediatelyAvailableSubTotalMethod1 = "przelewy24"
	TopupsImmediatelyAvailableSubTotalMethod1Riverty           TopupsImmediatelyAvailableSubTotalMethod1 = "riverty"
	TopupsImmediatelyAvailableSubTotalMethod1Satispay          TopupsImmediatelyAvailableSubTotalMethod1 = "satispay"
	TopupsImmediatelyAvailableSubTotalMethod1Podiumcadeaukaart TopupsImmediatelyAvailableSubTotalMethod1 = "podiumcadeaukaart"
	TopupsImmediatelyAvailableSubTotalMethod1Pointofsale       TopupsImmediatelyAvailableSubTotalMethod1 = "pointofsale"
	TopupsImmediatelyAvailableSubTotalMethod1Sofort            TopupsImmediatelyAvailableSubTotalMethod1 = "sofort"
	TopupsImmediatelyAvailableSubTotalMethod1Swish             TopupsImmediatelyAvailableSubTotalMethod1 = "swish"
	TopupsImmediatelyAvailableSubTotalMethod1Trustly           TopupsImmediatelyAvailableSubTotalMethod1 = "trustly"
	TopupsImmediatelyAvailableSubTotalMethod1Twint             TopupsImmediatelyAvailableSubTotalMethod1 = "twint"
	TopupsImmediatelyAvailableSubTotalMethod1Voucher           TopupsImmediatelyAvailableSubTotalMethod1 = "voucher"
)

func (e TopupsImmediatelyAvailableSubTotalMethod1) ToPointer() *TopupsImmediatelyAvailableSubTotalMethod1 {
	return &e
}
func (e *TopupsImmediatelyAvailableSubTotalMethod1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = TopupsImmediatelyAvailableSubTotalMethod1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsImmediatelyAvailableSubTotalMethod1: %v", v)
	}
}

// TopupsImmediatelyAvailableSubTotalCardIssuer1 - In case of payments transactions with card, the card issuer will be available
type TopupsImmediatelyAvailableSubTotalCardIssuer1 string

const (
	TopupsImmediatelyAvailableSubTotalCardIssuer1Amex          TopupsImmediatelyAvailableSubTotalCardIssuer1 = "amex"
	TopupsImmediatelyAvailableSubTotalCardIssuer1Maestro       TopupsImmediatelyAvailableSubTotalCardIssuer1 = "maestro"
	TopupsImmediatelyAvailableSubTotalCardIssuer1CarteBancaire TopupsImmediatelyAvailableSubTotalCardIssuer1 = "carte-bancaire"
	TopupsImmediatelyAvailableSubTotalCardIssuer1Other         TopupsImmediatelyAvailableSubTotalCardIssuer1 = "other"
)

func (e TopupsImmediatelyAvailableSubTotalCardIssuer1) ToPointer() *TopupsImmediatelyAvailableSubTotalCardIssuer1 {
	return &e
}
func (e *TopupsImmediatelyAvailableSubTotalCardIssuer1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = TopupsImmediatelyAvailableSubTotalCardIssuer1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsImmediatelyAvailableSubTotalCardIssuer1: %v", v)
	}
}

// TopupsImmediatelyAvailableSubTotalCardAudience1 - In case of payments trnsactions with card, the card audience will be available.
type TopupsImmediatelyAvailableSubTotalCardAudience1 string

const (
	TopupsImmediatelyAvailableSubTotalCardAudience1Corporate TopupsImmediatelyAvailableSubTotalCardAudience1 = "corporate"
	TopupsImmediatelyAvailableSubTotalCardAudience1Other     TopupsImmediatelyAvailableSubTotalCardAudience1 = "other"
)

func (e TopupsImmediatelyAvailableSubTotalCardAudience1) ToPointer() *TopupsImmediatelyAvailableSubTotalCardAudience1 {
	return &e
}
func (e *TopupsImmediatelyAvailableSubTotalCardAudience1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = TopupsImmediatelyAvailableSubTotalCardAudience1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsImmediatelyAvailableSubTotalCardAudience1: %v", v)
	}
}

// TopupsImmediatelyAvailableSubTotalCardRegion1 - In case of payments transactions with card, the card region will be available.
type TopupsImmediatelyAvailableSubTotalCardRegion1 string

const (
	TopupsImmediatelyAvailableSubTotalCardRegion1IntraEea TopupsImmediatelyAvailableSubTotalCardRegion1 = "intra-eea"
	TopupsImmediatelyAvailableSubTotalCardRegion1IntraEu  TopupsImmediatelyAvailableSubTotalCardRegion1 = "intra-eu"
	TopupsImmediatelyAvailableSubTotalCardRegion1Domestic TopupsImmediatelyAvailableSubTotalCardRegion1 = "domestic"
	TopupsImmediatelyAvailableSubTotalCardRegion1Other    TopupsImmediatelyAvailableSubTotalCardRegion1 = "other"
)

func (e TopupsImmediatelyAvailableSubTotalCardRegion1) ToPointer() *TopupsImmediatelyAvailableSubTotalCardRegion1 {
	return &e
}
func (e *TopupsImmediatelyAvailableSubTotalCardRegion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = TopupsImmediatelyAvailableSubTotalCardRegion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsImmediatelyAvailableSubTotalCardRegion1: %v", v)
	}
}

// TopupsImmediatelyAvailableSubTotalFeeType1 - Present when the transaction represents a fee.
type TopupsImmediatelyAvailableSubTotalFeeType1 string

const (
	TopupsImmediatelyAvailableSubTotalFeeType1PaymentFee                                        TopupsImmediatelyAvailableSubTotalFeeType1 = "payment-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1DirectDebitFailureFee                             TopupsImmediatelyAvailableSubTotalFeeType1 = "direct-debit-failure-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1UnauthorizedDirectDebitFee                        TopupsImmediatelyAvailableSubTotalFeeType1 = "unauthorized-direct-debit-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1BankChargedDirectDebitFailureFee                  TopupsImmediatelyAvailableSubTotalFeeType1 = "bank-charged-direct-debit-failure-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1PartnerCommission                                 TopupsImmediatelyAvailableSubTotalFeeType1 = "partner-commission"
	TopupsImmediatelyAvailableSubTotalFeeType1ApplicationFee                                    TopupsImmediatelyAvailableSubTotalFeeType1 = "application-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1CaptureFee                                        TopupsImmediatelyAvailableSubTotalFeeType1 = "capture-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1RefundFee                                         TopupsImmediatelyAvailableSubTotalFeeType1 = "refund-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1ChargebackFee                                     TopupsImmediatelyAvailableSubTotalFeeType1 = "chargeback-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1PaymentNotificationFee                            TopupsImmediatelyAvailableSubTotalFeeType1 = "payment-notification-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1TransferNotificationFee                           TopupsImmediatelyAvailableSubTotalFeeType1 = "transfer-notification-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1PayoutFee                                         TopupsImmediatelyAvailableSubTotalFeeType1 = "payout-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1FeeDiscount                                       TopupsImmediatelyAvailableSubTotalFeeType1 = "fee-discount"
	TopupsImmediatelyAvailableSubTotalFeeType1FeeReimbursement                                  TopupsImmediatelyAvailableSubTotalFeeType1 = "fee-reimbursement"
	TopupsImmediatelyAvailableSubTotalFeeType1PlatformVolumeFee                                 TopupsImmediatelyAvailableSubTotalFeeType1 = "platform-volume-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1PlatformConnectedOrganizationsFee                 TopupsImmediatelyAvailableSubTotalFeeType1 = "platform-connected-organizations-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1BalanceChargeFee                                  TopupsImmediatelyAvailableSubTotalFeeType1 = "balance-charge-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1ThreedsAuthenticationAttemptFee                   TopupsImmediatelyAvailableSubTotalFeeType1 = "3ds-authentication-attempt-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1TerminalMonthlyFee                                TopupsImmediatelyAvailableSubTotalFeeType1 = "terminal-monthly-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1AcceptanceRiskFee                                 TopupsImmediatelyAvailableSubTotalFeeType1 = "acceptance-risk-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1TopUpFee                                          TopupsImmediatelyAvailableSubTotalFeeType1 = "top-up-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1PaymentGatewayFee                                 TopupsImmediatelyAvailableSubTotalFeeType1 = "payment-gateway-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramProcessingFee   TopupsImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-processing-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1MastercardSpecialtyMerchantProgramRegistrationFee TopupsImmediatelyAvailableSubTotalFeeType1 = "mastercard-specialty-merchant-program-registration-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramProcessingFee             TopupsImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-processing-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1VisaIntegrityRiskProgramRegistrationFee           TopupsImmediatelyAvailableSubTotalFeeType1 = "visa-integrity-risk-program-registration-fee"
	TopupsImmediatelyAvailableSubTotalFeeType1MinimumInvoiceAmountFee                           TopupsImmediatelyAvailableSubTotalFeeType1 = "minimum-invoice-amount-fee"
)

func (e TopupsImmediatelyAvailableSubTotalFeeType1) ToPointer() *TopupsImmediatelyAvailableSubTotalFeeType1 {
	return &e
}
func (e *TopupsImmediatelyAvailableSubTotalFeeType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = TopupsImmediatelyAvailableSubTotalFeeType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsImmediatelyAvailableSubTotalFeeType1: %v", v)
	}
}

// TopupsImmediatelyAvailableSubTotalPrepaymentPartType1 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type TopupsImmediatelyAvailableSubTotalPrepaymentPartType1 string

const (
	TopupsImmediatelyAvailableSubTotalPrepaymentPartType1Fee                     TopupsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee"
	TopupsImmediatelyAvailableSubTotalPrepaymentPartType1FeeReimbursement        TopupsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-reimbursement"
	TopupsImmediatelyAvailableSubTotalPrepaymentPartType1FeeDiscount             TopupsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-discount"
	TopupsImmediatelyAvailableSubTotalPrepaymentPartType1FeeVat                  TopupsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-vat"
	TopupsImmediatelyAvailableSubTotalPrepaymentPartType1FeeRoundingCompensation TopupsImmediatelyAvailableSubTotalPrepaymentPartType1 = "fee-rounding-compensation"
)

func (e TopupsImmediatelyAvailableSubTotalPrepaymentPartType1) ToPointer() *TopupsImmediatelyAvailableSubTotalPrepaymentPartType1 {
	return &e
}
func (e *TopupsImmediatelyAvailableSubTotalPrepaymentPartType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = TopupsImmediatelyAvailableSubTotalPrepaymentPartType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsImmediatelyAvailableSubTotalPrepaymentPartType1: %v", v)
	}
}

// TopupsImmediatelyAvailableSubTotalTransactionType1 - Represents the transaction type
type TopupsImmediatelyAvailableSubTotalTransactionType1 string

const (
	TopupsImmediatelyAvailableSubTotalTransactionType1Payment                           TopupsImmediatelyAvailableSubTotalTransactionType1 = "payment"
	TopupsImmediatelyAvailableSubTotalTransactionType1SplitPayment                      TopupsImmediatelyAvailableSubTotalTransactionType1 = "split-payment"
	TopupsImmediatelyAvailableSubTotalTransactionType1FailedPayment                     TopupsImmediatelyAvailableSubTotalTransactionType1 = "failed-payment"
	TopupsImmediatelyAvailableSubTotalTransactionType1FailedPlatformSplitPayment        TopupsImmediatelyAvailableSubTotalTransactionType1 = "failed-platform-split-payment"
	TopupsImmediatelyAvailableSubTotalTransactionType1FailedSplitPaymentCompensation    TopupsImmediatelyAvailableSubTotalTransactionType1 = "failed-split-payment-compensation"
	TopupsImmediatelyAvailableSubTotalTransactionType1Capture                           TopupsImmediatelyAvailableSubTotalTransactionType1 = "capture"
	TopupsImmediatelyAvailableSubTotalTransactionType1SplitTransaction                  TopupsImmediatelyAvailableSubTotalTransactionType1 = "split-transaction"
	TopupsImmediatelyAvailableSubTotalTransactionType1Refund                            TopupsImmediatelyAvailableSubTotalTransactionType1 = "refund"
	TopupsImmediatelyAvailableSubTotalTransactionType1PlatformPaymentRefund             TopupsImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-refund"
	TopupsImmediatelyAvailableSubTotalTransactionType1ReturnedPlatformPaymentRefund     TopupsImmediatelyAvailableSubTotalTransactionType1 = "returned-platform-payment-refund"
	TopupsImmediatelyAvailableSubTotalTransactionType1RefundCompensation                TopupsImmediatelyAvailableSubTotalTransactionType1 = "refund-compensation"
	TopupsImmediatelyAvailableSubTotalTransactionType1ReturnedRefundCompensation        TopupsImmediatelyAvailableSubTotalTransactionType1 = "returned-refund-compensation"
	TopupsImmediatelyAvailableSubTotalTransactionType1ReturnedRefund                    TopupsImmediatelyAvailableSubTotalTransactionType1 = "returned-refund"
	TopupsImmediatelyAvailableSubTotalTransactionType1Chargeback                        TopupsImmediatelyAvailableSubTotalTransactionType1 = "chargeback"
	TopupsImmediatelyAvailableSubTotalTransactionType1ChargebackReversal                TopupsImmediatelyAvailableSubTotalTransactionType1 = "chargeback-reversal"
	TopupsImmediatelyAvailableSubTotalTransactionType1ChargebackCompensation            TopupsImmediatelyAvailableSubTotalTransactionType1 = "chargeback-compensation"
	TopupsImmediatelyAvailableSubTotalTransactionType1ReversedChargebackCompensation    TopupsImmediatelyAvailableSubTotalTransactionType1 = "reversed-chargeback-compensation"
	TopupsImmediatelyAvailableSubTotalTransactionType1PlatformPaymentChargeback         TopupsImmediatelyAvailableSubTotalTransactionType1 = "platform-payment-chargeback"
	TopupsImmediatelyAvailableSubTotalTransactionType1ReversedPlatformPaymentChargeback TopupsImmediatelyAvailableSubTotalTransactionType1 = "reversed-platform-payment-chargeback"
	TopupsImmediatelyAvailableSubTotalTransactionType1FeePrepayment                     TopupsImmediatelyAvailableSubTotalTransactionType1 = "fee-prepayment"
	TopupsImmediatelyAvailableSubTotalTransactionType1OutgoingTransfer                  TopupsImmediatelyAvailableSubTotalTransactionType1 = "outgoing-transfer"
	TopupsImmediatelyAvailableSubTotalTransactionType1IncomingTransfer                  TopupsImmediatelyAvailableSubTotalTransactionType1 = "incoming-transfer"
	TopupsImmediatelyAvailableSubTotalTransactionType1CanceledTransfer                  TopupsImmediatelyAvailableSubTotalTransactionType1 = "canceled-transfer"
	TopupsImmediatelyAvailableSubTotalTransactionType1ReturnedTransfer                  TopupsImmediatelyAvailableSubTotalTransactionType1 = "returned-transfer"
	TopupsImmediatelyAvailableSubTotalTransactionType1BalanceReserve                    TopupsImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve"
	TopupsImmediatelyAvailableSubTotalTransactionType1BalanceReserveReturn              TopupsImmediatelyAvailableSubTotalTransactionType1 = "balance-reserve-return"
	TopupsImmediatelyAvailableSubTotalTransactionType1InvoiceRoundingCompensation       TopupsImmediatelyAvailableSubTotalTransactionType1 = "invoice-rounding-compensation"
	TopupsImmediatelyAvailableSubTotalTransactionType1RollingReserveHold                TopupsImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-hold"
	TopupsImmediatelyAvailableSubTotalTransactionType1RollingReserveRelease             TopupsImmediatelyAvailableSubTotalTransactionType1 = "rolling-reserve-release"
	TopupsImmediatelyAvailableSubTotalTransactionType1BalanceCorrection                 TopupsImmediatelyAvailableSubTotalTransactionType1 = "balance-correction"
	TopupsImmediatelyAvailableSubTotalTransactionType1Repayment                         TopupsImmediatelyAvailableSubTotalTransactionType1 = "repayment"
	TopupsImmediatelyAvailableSubTotalTransactionType1Loan                              TopupsImmediatelyAvailableSubTotalTransactionType1 = "loan"
	TopupsImmediatelyAvailableSubTotalTransactionType1BalanceTopup                      TopupsImmediatelyAvailableSubTotalTransactionType1 = "balance-topup"
	TopupsImmediatelyAvailableSubTotalTransactionType1CashCollateralIssuance            TopupsImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-issuance';"
	TopupsImmediatelyAvailableSubTotalTransactionType1CashCollateralRelease             TopupsImmediatelyAvailableSubTotalTransactionType1 = "cash-collateral-release"
	TopupsImmediatelyAvailableSubTotalTransactionType1PendingRollingReserve             TopupsImmediatelyAvailableSubTotalTransactionType1 = "pending-rolling-reserve"
	TopupsImmediatelyAvailableSubTotalTransactionType1ToBeReleasedRollingReserve        TopupsImmediatelyAvailableSubTotalTransactionType1 = "to-be-released-rolling-reserve"
	TopupsImmediatelyAvailableSubTotalTransactionType1HeldRollingReserve                TopupsImmediatelyAvailableSubTotalTransactionType1 = "held-rolling-reserve"
	TopupsImmediatelyAvailableSubTotalTransactionType1ReleasedRollingReserve            TopupsImmediatelyAvailableSubTotalTransactionType1 = "released-rolling-reserve"
)

func (e TopupsImmediatelyAvailableSubTotalTransactionType1) ToPointer() *TopupsImmediatelyAvailableSubTotalTransactionType1 {
	return &e
}
func (e *TopupsImmediatelyAvailableSubTotalTransactionType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = TopupsImmediatelyAvailableSubTotalTransactionType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsImmediatelyAvailableSubTotalTransactionType1: %v", v)
	}
}

type TopupsImmediatelyAvailableSubTotal1 struct {
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *TopupsImmediatelyAvailableSubTotalMethod1 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *TopupsImmediatelyAvailableSubTotalCardIssuer1 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *TopupsImmediatelyAvailableSubTotalCardAudience1 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *TopupsImmediatelyAvailableSubTotalCardRegion1 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *TopupsImmediatelyAvailableSubTotalFeeType1 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *TopupsImmediatelyAvailableSubTotalPrepaymentPartType1 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *TopupsImmediatelyAvailableSubTotalTransactionType1 `json:"transactionType,omitempty"`
}

func (o *TopupsImmediatelyAvailableSubTotal1) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *TopupsImmediatelyAvailableSubTotal1) GetMethod() *TopupsImmediatelyAvailableSubTotalMethod1 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *TopupsImmediatelyAvailableSubTotal1) GetCardIssuer() *TopupsImmediatelyAvailableSubTotalCardIssuer1 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *TopupsImmediatelyAvailableSubTotal1) GetCardAudience() *TopupsImmediatelyAvailableSubTotalCardAudience1 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *TopupsImmediatelyAvailableSubTotal1) GetCardRegion() *TopupsImmediatelyAvailableSubTotalCardRegion1 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *TopupsImmediatelyAvailableSubTotal1) GetFeeType() *TopupsImmediatelyAvailableSubTotalFeeType1 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *TopupsImmediatelyAvailableSubTotal1) GetPrepaymentPartType() *TopupsImmediatelyAvailableSubTotalPrepaymentPartType1 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *TopupsImmediatelyAvailableSubTotal1) GetTransactionType() *TopupsImmediatelyAvailableSubTotalTransactionType1 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

// TopupsImmediatelyAvailableSubtotalMethod2 - Payment type of the transactions
type TopupsImmediatelyAvailableSubtotalMethod2 string

const (
	TopupsImmediatelyAvailableSubtotalMethod2Alma              TopupsImmediatelyAvailableSubtotalMethod2 = "alma"
	TopupsImmediatelyAvailableSubtotalMethod2Bacs              TopupsImmediatelyAvailableSubtotalMethod2 = "bacs"
	TopupsImmediatelyAvailableSubtotalMethod2Applepay          TopupsImmediatelyAvailableSubtotalMethod2 = "applepay"
	TopupsImmediatelyAvailableSubtotalMethod2Bancomatpay       TopupsImmediatelyAvailableSubtotalMethod2 = "bancomatpay"
	TopupsImmediatelyAvailableSubtotalMethod2Bancontact        TopupsImmediatelyAvailableSubtotalMethod2 = "bancontact"
	TopupsImmediatelyAvailableSubtotalMethod2Banktransfer      TopupsImmediatelyAvailableSubtotalMethod2 = "banktransfer"
	TopupsImmediatelyAvailableSubtotalMethod2Belfius           TopupsImmediatelyAvailableSubtotalMethod2 = "belfius"
	TopupsImmediatelyAvailableSubtotalMethod2Billie            TopupsImmediatelyAvailableSubtotalMethod2 = "billie"
	TopupsImmediatelyAvailableSubtotalMethod2Bizum             TopupsImmediatelyAvailableSubtotalMethod2 = "bizum"
	TopupsImmediatelyAvailableSubtotalMethod2Bitcoin           TopupsImmediatelyAvailableSubtotalMethod2 = "bitcoin"
	TopupsImmediatelyAvailableSubtotalMethod2Blik              TopupsImmediatelyAvailableSubtotalMethod2 = "blik"
	TopupsImmediatelyAvailableSubtotalMethod2Creditcard        TopupsImmediatelyAvailableSubtotalMethod2 = "creditcard"
	TopupsImmediatelyAvailableSubtotalMethod2Directdebit       TopupsImmediatelyAvailableSubtotalMethod2 = "directdebit"
	TopupsImmediatelyAvailableSubtotalMethod2Eps               TopupsImmediatelyAvailableSubtotalMethod2 = "eps"
	TopupsImmediatelyAvailableSubtotalMethod2Giftcard          TopupsImmediatelyAvailableSubtotalMethod2 = "giftcard"
	TopupsImmediatelyAvailableSubtotalMethod2Giropay           TopupsImmediatelyAvailableSubtotalMethod2 = "giropay"
	TopupsImmediatelyAvailableSubtotalMethod2Googlepay         TopupsImmediatelyAvailableSubtotalMethod2 = "googlepay"
	TopupsImmediatelyAvailableSubtotalMethod2Ideal             TopupsImmediatelyAvailableSubtotalMethod2 = "ideal"
	TopupsImmediatelyAvailableSubtotalMethod2In3               TopupsImmediatelyAvailableSubtotalMethod2 = "in3"
	TopupsImmediatelyAvailableSubtotalMethod2Inghomepay        TopupsImmediatelyAvailableSubtotalMethod2 = "inghomepay"
	TopupsImmediatelyAvailableSubtotalMethod2Kbc               TopupsImmediatelyAvailableSubtotalMethod2 = "kbc"
	TopupsImmediatelyAvailableSubtotalMethod2Klarnapaylater    TopupsImmediatelyAvailableSubtotalMethod2 = "klarnapaylater"
	TopupsImmediatelyAvailableSubtotalMethod2Klarnapaynow      TopupsImmediatelyAvailableSubtotalMethod2 = "klarnapaynow"
	TopupsImmediatelyAvailableSubtotalMethod2Klarnasliceit     TopupsImmediatelyAvailableSubtotalMethod2 = "klarnasliceit"
	TopupsImmediatelyAvailableSubtotalMethod2Klarna            TopupsImmediatelyAvailableSubtotalMethod2 = "klarna"
	TopupsImmediatelyAvailableSubtotalMethod2Mbway             TopupsImmediatelyAvailableSubtotalMethod2 = "mbway"
	TopupsImmediatelyAvailableSubtotalMethod2Multibanco        TopupsImmediatelyAvailableSubtotalMethod2 = "multibanco"
	TopupsImmediatelyAvailableSubtotalMethod2Mybank            TopupsImmediatelyAvailableSubtotalMethod2 = "mybank"
	TopupsImmediatelyAvailableSubtotalMethod2Paybybank         TopupsImmediatelyAvailableSubtotalMethod2 = "paybybank"
	TopupsImmediatelyAvailableSubtotalMethod2Payconiq          TopupsImmediatelyAvailableSubtotalMethod2 = "payconiq"
	TopupsImmediatelyAvailableSubtotalMethod2Paypal            TopupsImmediatelyAvailableSubtotalMethod2 = "paypal"
	TopupsImmediatelyAvailableSubtotalMethod2Paysafecard       TopupsImmediatelyAvailableSubtotalMethod2 = "paysafecard"
	TopupsImmediatelyAvailableSubtotalMethod2Przelewy24        TopupsImmediatelyAvailableSubtotalMethod2 = "przelewy24"
	TopupsImmediatelyAvailableSubtotalMethod2Riverty           TopupsImmediatelyAvailableSubtotalMethod2 = "riverty"
	TopupsImmediatelyAvailableSubtotalMethod2Satispay          TopupsImmediatelyAvailableSubtotalMethod2 = "satispay"
	TopupsImmediatelyAvailableSubtotalMethod2Podiumcadeaukaart TopupsImmediatelyAvailableSubtotalMethod2 = "podiumcadeaukaart"
	TopupsImmediatelyAvailableSubtotalMethod2Pointofsale       TopupsImmediatelyAvailableSubtotalMethod2 = "pointofsale"
	TopupsImmediatelyAvailableSubtotalMethod2Sofort            TopupsImmediatelyAvailableSubtotalMethod2 = "sofort"
	TopupsImmediatelyAvailableSubtotalMethod2Swish             TopupsImmediatelyAvailableSubtotalMethod2 = "swish"
	TopupsImmediatelyAvailableSubtotalMethod2Trustly           TopupsImmediatelyAvailableSubtotalMethod2 = "trustly"
	TopupsImmediatelyAvailableSubtotalMethod2Twint             TopupsImmediatelyAvailableSubtotalMethod2 = "twint"
	TopupsImmediatelyAvailableSubtotalMethod2Voucher           TopupsImmediatelyAvailableSubtotalMethod2 = "voucher"
)

func (e TopupsImmediatelyAvailableSubtotalMethod2) ToPointer() *TopupsImmediatelyAvailableSubtotalMethod2 {
	return &e
}
func (e *TopupsImmediatelyAvailableSubtotalMethod2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "bacs":
		fallthrough
	case "applepay":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "bitcoin":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "giropay":
		fallthrough
	case "googlepay":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "inghomepay":
		fallthrough
	case "kbc":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "klarna":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "podiumcadeaukaart":
		fallthrough
	case "pointofsale":
		fallthrough
	case "sofort":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = TopupsImmediatelyAvailableSubtotalMethod2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsImmediatelyAvailableSubtotalMethod2: %v", v)
	}
}

// TopupsImmediatelyAvailableSubtotalCardIssuer2 - In case of payments transactions with card, the card issuer will be available
type TopupsImmediatelyAvailableSubtotalCardIssuer2 string

const (
	TopupsImmediatelyAvailableSubtotalCardIssuer2Amex          TopupsImmediatelyAvailableSubtotalCardIssuer2 = "amex"
	TopupsImmediatelyAvailableSubtotalCardIssuer2Maestro       TopupsImmediatelyAvailableSubtotalCardIssuer2 = "maestro"
	TopupsImmediatelyAvailableSubtotalCardIssuer2CarteBancaire TopupsImmediatelyAvailableSubtotalCardIssuer2 = "carte-bancaire"
	TopupsImmediatelyAvailableSubtotalCardIssuer2Other         TopupsImmediatelyAvailableSubtotalCardIssuer2 = "other"
)

func (e TopupsImmediatelyAvailableSubtotalCardIssuer2) ToPointer() *TopupsImmediatelyAvailableSubtotalCardIssuer2 {
	return &e
}
func (e *TopupsImmediatelyAvailableSubtotalCardIssuer2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amex":
		fallthrough
	case "maestro":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "other":
		*e = TopupsImmediatelyAvailableSubtotalCardIssuer2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsImmediatelyAvailableSubtotalCardIssuer2: %v", v)
	}
}

// TopupsImmediatelyAvailableSubtotalCardAudience2 - In case of payments trnsactions with card, the card audience will be available.
type TopupsImmediatelyAvailableSubtotalCardAudience2 string

const (
	TopupsImmediatelyAvailableSubtotalCardAudience2Corporate TopupsImmediatelyAvailableSubtotalCardAudience2 = "corporate"
	TopupsImmediatelyAvailableSubtotalCardAudience2Other     TopupsImmediatelyAvailableSubtotalCardAudience2 = "other"
)

func (e TopupsImmediatelyAvailableSubtotalCardAudience2) ToPointer() *TopupsImmediatelyAvailableSubtotalCardAudience2 {
	return &e
}
func (e *TopupsImmediatelyAvailableSubtotalCardAudience2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate":
		fallthrough
	case "other":
		*e = TopupsImmediatelyAvailableSubtotalCardAudience2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsImmediatelyAvailableSubtotalCardAudience2: %v", v)
	}
}

// TopupsImmediatelyAvailableSubtotalCardRegion2 - In case of payments transactions with card, the card region will be available.
type TopupsImmediatelyAvailableSubtotalCardRegion2 string

const (
	TopupsImmediatelyAvailableSubtotalCardRegion2IntraEea TopupsImmediatelyAvailableSubtotalCardRegion2 = "intra-eea"
	TopupsImmediatelyAvailableSubtotalCardRegion2IntraEu  TopupsImmediatelyAvailableSubtotalCardRegion2 = "intra-eu"
	TopupsImmediatelyAvailableSubtotalCardRegion2Domestic TopupsImmediatelyAvailableSubtotalCardRegion2 = "domestic"
	TopupsImmediatelyAvailableSubtotalCardRegion2Other    TopupsImmediatelyAvailableSubtotalCardRegion2 = "other"
)

func (e TopupsImmediatelyAvailableSubtotalCardRegion2) ToPointer() *TopupsImmediatelyAvailableSubtotalCardRegion2 {
	return &e
}
func (e *TopupsImmediatelyAvailableSubtotalCardRegion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intra-eea":
		fallthrough
	case "intra-eu":
		fallthrough
	case "domestic":
		fallthrough
	case "other":
		*e = TopupsImmediatelyAvailableSubtotalCardRegion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsImmediatelyAvailableSubtotalCardRegion2: %v", v)
	}
}

// TopupsImmediatelyAvailableSubtotalFeeType2 - Present when the transaction represents a fee.
type TopupsImmediatelyAvailableSubtotalFeeType2 string

const (
	TopupsImmediatelyAvailableSubtotalFeeType2PaymentFee                                        TopupsImmediatelyAvailableSubtotalFeeType2 = "payment-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2DirectDebitFailureFee                             TopupsImmediatelyAvailableSubtotalFeeType2 = "direct-debit-failure-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2UnauthorizedDirectDebitFee                        TopupsImmediatelyAvailableSubtotalFeeType2 = "unauthorized-direct-debit-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2BankChargedDirectDebitFailureFee                  TopupsImmediatelyAvailableSubtotalFeeType2 = "bank-charged-direct-debit-failure-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2PartnerCommission                                 TopupsImmediatelyAvailableSubtotalFeeType2 = "partner-commission"
	TopupsImmediatelyAvailableSubtotalFeeType2ApplicationFee                                    TopupsImmediatelyAvailableSubtotalFeeType2 = "application-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2CaptureFee                                        TopupsImmediatelyAvailableSubtotalFeeType2 = "capture-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2RefundFee                                         TopupsImmediatelyAvailableSubtotalFeeType2 = "refund-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2ChargebackFee                                     TopupsImmediatelyAvailableSubtotalFeeType2 = "chargeback-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2PaymentNotificationFee                            TopupsImmediatelyAvailableSubtotalFeeType2 = "payment-notification-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2TransferNotificationFee                           TopupsImmediatelyAvailableSubtotalFeeType2 = "transfer-notification-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2PayoutFee                                         TopupsImmediatelyAvailableSubtotalFeeType2 = "payout-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2FeeDiscount                                       TopupsImmediatelyAvailableSubtotalFeeType2 = "fee-discount"
	TopupsImmediatelyAvailableSubtotalFeeType2FeeReimbursement                                  TopupsImmediatelyAvailableSubtotalFeeType2 = "fee-reimbursement"
	TopupsImmediatelyAvailableSubtotalFeeType2PlatformVolumeFee                                 TopupsImmediatelyAvailableSubtotalFeeType2 = "platform-volume-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2PlatformConnectedOrganizationsFee                 TopupsImmediatelyAvailableSubtotalFeeType2 = "platform-connected-organizations-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2BalanceChargeFee                                  TopupsImmediatelyAvailableSubtotalFeeType2 = "balance-charge-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2ThreedsAuthenticationAttemptFee                   TopupsImmediatelyAvailableSubtotalFeeType2 = "3ds-authentication-attempt-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2TerminalMonthlyFee                                TopupsImmediatelyAvailableSubtotalFeeType2 = "terminal-monthly-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2AcceptanceRiskFee                                 TopupsImmediatelyAvailableSubtotalFeeType2 = "acceptance-risk-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2TopUpFee                                          TopupsImmediatelyAvailableSubtotalFeeType2 = "top-up-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2PaymentGatewayFee                                 TopupsImmediatelyAvailableSubtotalFeeType2 = "payment-gateway-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramProcessingFee   TopupsImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-processing-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2MastercardSpecialtyMerchantProgramRegistrationFee TopupsImmediatelyAvailableSubtotalFeeType2 = "mastercard-specialty-merchant-program-registration-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramProcessingFee             TopupsImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-processing-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2VisaIntegrityRiskProgramRegistrationFee           TopupsImmediatelyAvailableSubtotalFeeType2 = "visa-integrity-risk-program-registration-fee"
	TopupsImmediatelyAvailableSubtotalFeeType2MinimumInvoiceAmountFee                           TopupsImmediatelyAvailableSubtotalFeeType2 = "minimum-invoice-amount-fee"
)

func (e TopupsImmediatelyAvailableSubtotalFeeType2) ToPointer() *TopupsImmediatelyAvailableSubtotalFeeType2 {
	return &e
}
func (e *TopupsImmediatelyAvailableSubtotalFeeType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-fee":
		fallthrough
	case "direct-debit-failure-fee":
		fallthrough
	case "unauthorized-direct-debit-fee":
		fallthrough
	case "bank-charged-direct-debit-failure-fee":
		fallthrough
	case "partner-commission":
		fallthrough
	case "application-fee":
		fallthrough
	case "capture-fee":
		fallthrough
	case "refund-fee":
		fallthrough
	case "chargeback-fee":
		fallthrough
	case "payment-notification-fee":
		fallthrough
	case "transfer-notification-fee":
		fallthrough
	case "payout-fee":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "platform-volume-fee":
		fallthrough
	case "platform-connected-organizations-fee":
		fallthrough
	case "balance-charge-fee":
		fallthrough
	case "3ds-authentication-attempt-fee":
		fallthrough
	case "terminal-monthly-fee":
		fallthrough
	case "acceptance-risk-fee":
		fallthrough
	case "top-up-fee":
		fallthrough
	case "payment-gateway-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-processing-fee":
		fallthrough
	case "mastercard-specialty-merchant-program-registration-fee":
		fallthrough
	case "visa-integrity-risk-program-processing-fee":
		fallthrough
	case "visa-integrity-risk-program-registration-fee":
		fallthrough
	case "minimum-invoice-amount-fee":
		*e = TopupsImmediatelyAvailableSubtotalFeeType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsImmediatelyAvailableSubtotalFeeType2: %v", v)
	}
}

// TopupsImmediatelyAvailableSubtotalPrepaymentPartType2 - Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
type TopupsImmediatelyAvailableSubtotalPrepaymentPartType2 string

const (
	TopupsImmediatelyAvailableSubtotalPrepaymentPartType2Fee                     TopupsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee"
	TopupsImmediatelyAvailableSubtotalPrepaymentPartType2FeeReimbursement        TopupsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-reimbursement"
	TopupsImmediatelyAvailableSubtotalPrepaymentPartType2FeeDiscount             TopupsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-discount"
	TopupsImmediatelyAvailableSubtotalPrepaymentPartType2FeeVat                  TopupsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-vat"
	TopupsImmediatelyAvailableSubtotalPrepaymentPartType2FeeRoundingCompensation TopupsImmediatelyAvailableSubtotalPrepaymentPartType2 = "fee-rounding-compensation"
)

func (e TopupsImmediatelyAvailableSubtotalPrepaymentPartType2) ToPointer() *TopupsImmediatelyAvailableSubtotalPrepaymentPartType2 {
	return &e
}
func (e *TopupsImmediatelyAvailableSubtotalPrepaymentPartType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fee":
		fallthrough
	case "fee-reimbursement":
		fallthrough
	case "fee-discount":
		fallthrough
	case "fee-vat":
		fallthrough
	case "fee-rounding-compensation":
		*e = TopupsImmediatelyAvailableSubtotalPrepaymentPartType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsImmediatelyAvailableSubtotalPrepaymentPartType2: %v", v)
	}
}

// TopupsImmediatelyAvailableSubtotalTransactionType2 - Represents the transaction type
type TopupsImmediatelyAvailableSubtotalTransactionType2 string

const (
	TopupsImmediatelyAvailableSubtotalTransactionType2Payment                           TopupsImmediatelyAvailableSubtotalTransactionType2 = "payment"
	TopupsImmediatelyAvailableSubtotalTransactionType2SplitPayment                      TopupsImmediatelyAvailableSubtotalTransactionType2 = "split-payment"
	TopupsImmediatelyAvailableSubtotalTransactionType2FailedPayment                     TopupsImmediatelyAvailableSubtotalTransactionType2 = "failed-payment"
	TopupsImmediatelyAvailableSubtotalTransactionType2FailedPlatformSplitPayment        TopupsImmediatelyAvailableSubtotalTransactionType2 = "failed-platform-split-payment"
	TopupsImmediatelyAvailableSubtotalTransactionType2FailedSplitPaymentCompensation    TopupsImmediatelyAvailableSubtotalTransactionType2 = "failed-split-payment-compensation"
	TopupsImmediatelyAvailableSubtotalTransactionType2Capture                           TopupsImmediatelyAvailableSubtotalTransactionType2 = "capture"
	TopupsImmediatelyAvailableSubtotalTransactionType2SplitTransaction                  TopupsImmediatelyAvailableSubtotalTransactionType2 = "split-transaction"
	TopupsImmediatelyAvailableSubtotalTransactionType2Refund                            TopupsImmediatelyAvailableSubtotalTransactionType2 = "refund"
	TopupsImmediatelyAvailableSubtotalTransactionType2PlatformPaymentRefund             TopupsImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-refund"
	TopupsImmediatelyAvailableSubtotalTransactionType2ReturnedPlatformPaymentRefund     TopupsImmediatelyAvailableSubtotalTransactionType2 = "returned-platform-payment-refund"
	TopupsImmediatelyAvailableSubtotalTransactionType2RefundCompensation                TopupsImmediatelyAvailableSubtotalTransactionType2 = "refund-compensation"
	TopupsImmediatelyAvailableSubtotalTransactionType2ReturnedRefundCompensation        TopupsImmediatelyAvailableSubtotalTransactionType2 = "returned-refund-compensation"
	TopupsImmediatelyAvailableSubtotalTransactionType2ReturnedRefund                    TopupsImmediatelyAvailableSubtotalTransactionType2 = "returned-refund"
	TopupsImmediatelyAvailableSubtotalTransactionType2Chargeback                        TopupsImmediatelyAvailableSubtotalTransactionType2 = "chargeback"
	TopupsImmediatelyAvailableSubtotalTransactionType2ChargebackReversal                TopupsImmediatelyAvailableSubtotalTransactionType2 = "chargeback-reversal"
	TopupsImmediatelyAvailableSubtotalTransactionType2ChargebackCompensation            TopupsImmediatelyAvailableSubtotalTransactionType2 = "chargeback-compensation"
	TopupsImmediatelyAvailableSubtotalTransactionType2ReversedChargebackCompensation    TopupsImmediatelyAvailableSubtotalTransactionType2 = "reversed-chargeback-compensation"
	TopupsImmediatelyAvailableSubtotalTransactionType2PlatformPaymentChargeback         TopupsImmediatelyAvailableSubtotalTransactionType2 = "platform-payment-chargeback"
	TopupsImmediatelyAvailableSubtotalTransactionType2ReversedPlatformPaymentChargeback TopupsImmediatelyAvailableSubtotalTransactionType2 = "reversed-platform-payment-chargeback"
	TopupsImmediatelyAvailableSubtotalTransactionType2FeePrepayment                     TopupsImmediatelyAvailableSubtotalTransactionType2 = "fee-prepayment"
	TopupsImmediatelyAvailableSubtotalTransactionType2OutgoingTransfer                  TopupsImmediatelyAvailableSubtotalTransactionType2 = "outgoing-transfer"
	TopupsImmediatelyAvailableSubtotalTransactionType2IncomingTransfer                  TopupsImmediatelyAvailableSubtotalTransactionType2 = "incoming-transfer"
	TopupsImmediatelyAvailableSubtotalTransactionType2CanceledTransfer                  TopupsImmediatelyAvailableSubtotalTransactionType2 = "canceled-transfer"
	TopupsImmediatelyAvailableSubtotalTransactionType2ReturnedTransfer                  TopupsImmediatelyAvailableSubtotalTransactionType2 = "returned-transfer"
	TopupsImmediatelyAvailableSubtotalTransactionType2BalanceReserve                    TopupsImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve"
	TopupsImmediatelyAvailableSubtotalTransactionType2BalanceReserveReturn              TopupsImmediatelyAvailableSubtotalTransactionType2 = "balance-reserve-return"
	TopupsImmediatelyAvailableSubtotalTransactionType2InvoiceRoundingCompensation       TopupsImmediatelyAvailableSubtotalTransactionType2 = "invoice-rounding-compensation"
	TopupsImmediatelyAvailableSubtotalTransactionType2RollingReserveHold                TopupsImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-hold"
	TopupsImmediatelyAvailableSubtotalTransactionType2RollingReserveRelease             TopupsImmediatelyAvailableSubtotalTransactionType2 = "rolling-reserve-release"
	TopupsImmediatelyAvailableSubtotalTransactionType2BalanceCorrection                 TopupsImmediatelyAvailableSubtotalTransactionType2 = "balance-correction"
	TopupsImmediatelyAvailableSubtotalTransactionType2Repayment                         TopupsImmediatelyAvailableSubtotalTransactionType2 = "repayment"
	TopupsImmediatelyAvailableSubtotalTransactionType2Loan                              TopupsImmediatelyAvailableSubtotalTransactionType2 = "loan"
	TopupsImmediatelyAvailableSubtotalTransactionType2BalanceTopup                      TopupsImmediatelyAvailableSubtotalTransactionType2 = "balance-topup"
	TopupsImmediatelyAvailableSubtotalTransactionType2CashCollateralIssuance            TopupsImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-issuance';"
	TopupsImmediatelyAvailableSubtotalTransactionType2CashCollateralRelease             TopupsImmediatelyAvailableSubtotalTransactionType2 = "cash-collateral-release"
	TopupsImmediatelyAvailableSubtotalTransactionType2PendingRollingReserve             TopupsImmediatelyAvailableSubtotalTransactionType2 = "pending-rolling-reserve"
	TopupsImmediatelyAvailableSubtotalTransactionType2ToBeReleasedRollingReserve        TopupsImmediatelyAvailableSubtotalTransactionType2 = "to-be-released-rolling-reserve"
	TopupsImmediatelyAvailableSubtotalTransactionType2HeldRollingReserve                TopupsImmediatelyAvailableSubtotalTransactionType2 = "held-rolling-reserve"
	TopupsImmediatelyAvailableSubtotalTransactionType2ReleasedRollingReserve            TopupsImmediatelyAvailableSubtotalTransactionType2 = "released-rolling-reserve"
)

func (e TopupsImmediatelyAvailableSubtotalTransactionType2) ToPointer() *TopupsImmediatelyAvailableSubtotalTransactionType2 {
	return &e
}
func (e *TopupsImmediatelyAvailableSubtotalTransactionType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "split-payment":
		fallthrough
	case "failed-payment":
		fallthrough
	case "failed-platform-split-payment":
		fallthrough
	case "failed-split-payment-compensation":
		fallthrough
	case "capture":
		fallthrough
	case "split-transaction":
		fallthrough
	case "refund":
		fallthrough
	case "platform-payment-refund":
		fallthrough
	case "returned-platform-payment-refund":
		fallthrough
	case "refund-compensation":
		fallthrough
	case "returned-refund-compensation":
		fallthrough
	case "returned-refund":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargeback-reversal":
		fallthrough
	case "chargeback-compensation":
		fallthrough
	case "reversed-chargeback-compensation":
		fallthrough
	case "platform-payment-chargeback":
		fallthrough
	case "reversed-platform-payment-chargeback":
		fallthrough
	case "fee-prepayment":
		fallthrough
	case "outgoing-transfer":
		fallthrough
	case "incoming-transfer":
		fallthrough
	case "canceled-transfer":
		fallthrough
	case "returned-transfer":
		fallthrough
	case "balance-reserve":
		fallthrough
	case "balance-reserve-return":
		fallthrough
	case "invoice-rounding-compensation":
		fallthrough
	case "rolling-reserve-hold":
		fallthrough
	case "rolling-reserve-release":
		fallthrough
	case "balance-correction":
		fallthrough
	case "repayment":
		fallthrough
	case "loan":
		fallthrough
	case "balance-topup":
		fallthrough
	case "cash-collateral-issuance';":
		fallthrough
	case "cash-collateral-release":
		fallthrough
	case "pending-rolling-reserve":
		fallthrough
	case "to-be-released-rolling-reserve":
		fallthrough
	case "held-rolling-reserve":
		fallthrough
	case "released-rolling-reserve":
		*e = TopupsImmediatelyAvailableSubtotalTransactionType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopupsImmediatelyAvailableSubtotalTransactionType2: %v", v)
	}
}

type TopupsImmediatelyAvailableSubtotal2 struct {
	SubTotals []TopupsImmediatelyAvailableSubTotal1 `json:"sub-totals,omitempty"`
	// Number of transactions of this type
	Count *int64 `json:"count,omitempty"`
	// Payment type of the transactions
	Method *TopupsImmediatelyAvailableSubtotalMethod2 `json:"method,omitempty"`
	// In case of payments transactions with card, the card issuer will be available
	CardIssuer *TopupsImmediatelyAvailableSubtotalCardIssuer2 `json:"cardIssuer,omitempty"`
	// In case of payments trnsactions with card, the card audience will be available.
	CardAudience *TopupsImmediatelyAvailableSubtotalCardAudience2 `json:"cardAudience,omitempty"`
	// In case of payments transactions with card, the card region will be available.
	CardRegion *TopupsImmediatelyAvailableSubtotalCardRegion2 `json:"cardRegion,omitempty"`
	// Present when the transaction represents a fee.
	FeeType *TopupsImmediatelyAvailableSubtotalFeeType2 `json:"feeType,omitempty"`
	// Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
	PrepaymentPartType *TopupsImmediatelyAvailableSubtotalPrepaymentPartType2 `json:"prepaymentPartType,omitempty"`
	// Represents the transaction type
	TransactionType *TopupsImmediatelyAvailableSubtotalTransactionType2 `json:"transactionType,omitempty"`
}

func (o *TopupsImmediatelyAvailableSubtotal2) GetSubTotals() []TopupsImmediatelyAvailableSubTotal1 {
	if o == nil {
		return nil
	}
	return o.SubTotals
}

func (o *TopupsImmediatelyAvailableSubtotal2) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *TopupsImmediatelyAvailableSubtotal2) GetMethod() *TopupsImmediatelyAvailableSubtotalMethod2 {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *TopupsImmediatelyAvailableSubtotal2) GetCardIssuer() *TopupsImmediatelyAvailableSubtotalCardIssuer2 {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *TopupsImmediatelyAvailableSubtotal2) GetCardAudience() *TopupsImmediatelyAvailableSubtotalCardAudience2 {
	if o == nil {
		return nil
	}
	return o.CardAudience
}

func (o *TopupsImmediatelyAvailableSubtotal2) GetCardRegion() *TopupsImmediatelyAvailableSubtotalCardRegion2 {
	if o == nil {
		return nil
	}
	return o.CardRegion
}

func (o *TopupsImmediatelyAvailableSubtotal2) GetFeeType() *TopupsImmediatelyAvailableSubtotalFeeType2 {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *TopupsImmediatelyAvailableSubtotal2) GetPrepaymentPartType() *TopupsImmediatelyAvailableSubtotalPrepaymentPartType2 {
	if o == nil {
		return nil
	}
	return o.PrepaymentPartType
}

func (o *TopupsImmediatelyAvailableSubtotal2) GetTransactionType() *TopupsImmediatelyAvailableSubtotalTransactionType2 {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type TopupsImmediatelyAvailable struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount    *TopupsImmediatelyAvailableAmount     `json:"amount,omitempty"`
	Subtotals []TopupsImmediatelyAvailableSubtotal2 `json:"subtotals,omitempty"`
}

func (o *TopupsImmediatelyAvailable) GetAmount() *TopupsImmediatelyAvailableAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *TopupsImmediatelyAvailable) GetSubtotals() []TopupsImmediatelyAvailableSubtotal2 {
	if o == nil {
		return nil
	}
	return o.Subtotals
}

// Topups - Only available on `transaction-categories` grouping.
type Topups struct {
	Pending              *TopupsPending              `json:"pending,omitempty"`
	MovedToAvailable     *TopupsMovedToAvailable     `json:"movedToAvailable,omitempty"`
	ImmediatelyAvailable *TopupsImmediatelyAvailable `json:"immediatelyAvailable,omitempty"`
}

func (o *Topups) GetPending() *TopupsPending {
	if o == nil {
		return nil
	}
	return o.Pending
}

func (o *Topups) GetMovedToAvailable() *TopupsMovedToAvailable {
	if o == nil {
		return nil
	}
	return o.MovedToAvailable
}

func (o *Topups) GetImmediatelyAvailable() *TopupsImmediatelyAvailable {
	if o == nil {
		return nil
	}
	return o.ImmediatelyAvailable
}

// Totals are grouped according to the chosen grouping rule. The example response should give a good idea of what a
// typical grouping looks like.
//
// If grouping `status-balances` is chosen, the main grouping is as follows:
//
// * `pendingBalance` containing an `open`, `pending`, `movedToAvailable`, and `close` sub-group
// * `availableBalance` containing an `open`, `movedFromPending`, `immediatelyAvailable`, and `close` sub-group
//
// If grouping `transaction-categories` is chosen, the main grouping is as follows:
//
// * `open` and `close` groups, each containing a `pending` and `available` sub-group
// * Transaction type groups such as `payments`, `refunds`, `chargebacks`, `capital`, `transfers`, `fee-prepayments`, `corrections`, `topups`
// each containing a `pending`, `movedToAvailable`, and
// `immediatelyAvailable` sub-group
//
// Each sub-group typically has:
//
// * An `amount` object containing the group's total amount
// * A `count` integer if relevant (for example, counting the number of refunds)
// * A `subtotals` array containing more sub-group objects if applicable
type Totals struct {
	// The pending balance. Only available if grouping is `status-balances`.
	PendingBalance *PendingBalance `json:"pendingBalance,omitempty"`
	// The available balance. Only available if grouping is `status-balances`.
	AvailableBalance *AvailableBalance `json:"availableBalance,omitempty"`
	// Only available on `transaction-categories` grouping.
	Open *Open `json:"open,omitempty"`
	// Only available on `transaction-categories` grouping.
	Close *Close `json:"close,omitempty"`
	// Only available on `transaction-categories` grouping.
	Payments *GetBalanceReportPayments `json:"payments,omitempty"`
	// Only available on `transaction-categories` grouping.
	Refunds *GetBalanceReportRefunds `json:"refunds,omitempty"`
	// Only available on `transaction-categories` grouping.
	Chargebacks *GetBalanceReportChargebacks `json:"chargebacks,omitempty"`
	// Only available on `transaction-categories` grouping.
	Capital *Capital `json:"capital,omitempty"`
	// Only available on `transaction-categories` grouping.
	Transfers *Transfers `json:"transfers,omitempty"`
	// Only available on `transaction-categories` grouping.
	FeePrepayments *FeePrepayments `json:"fee-prepayments,omitempty"`
	// Only available on `transaction-categories` grouping.
	Corrections *Corrections `json:"corrections,omitempty"`
	// Only available on `transaction-categories` grouping.
	Topups *Topups `json:"topups,omitempty"`
}

func (o *Totals) GetPendingBalance() *PendingBalance {
	if o == nil {
		return nil
	}
	return o.PendingBalance
}

func (o *Totals) GetAvailableBalance() *AvailableBalance {
	if o == nil {
		return nil
	}
	return o.AvailableBalance
}

func (o *Totals) GetOpen() *Open {
	if o == nil {
		return nil
	}
	return o.Open
}

func (o *Totals) GetClose() *Close {
	if o == nil {
		return nil
	}
	return o.Close
}

func (o *Totals) GetPayments() *GetBalanceReportPayments {
	if o == nil {
		return nil
	}
	return o.Payments
}

func (o *Totals) GetRefunds() *GetBalanceReportRefunds {
	if o == nil {
		return nil
	}
	return o.Refunds
}

func (o *Totals) GetChargebacks() *GetBalanceReportChargebacks {
	if o == nil {
		return nil
	}
	return o.Chargebacks
}

func (o *Totals) GetCapital() *Capital {
	if o == nil {
		return nil
	}
	return o.Capital
}

func (o *Totals) GetTransfers() *Transfers {
	if o == nil {
		return nil
	}
	return o.Transfers
}

func (o *Totals) GetFeePrepayments() *FeePrepayments {
	if o == nil {
		return nil
	}
	return o.FeePrepayments
}

func (o *Totals) GetCorrections() *Corrections {
	if o == nil {
		return nil
	}
	return o.Corrections
}

func (o *Totals) GetTopups() *Topups {
	if o == nil {
		return nil
	}
	return o.Topups
}

// GetBalanceReportSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetBalanceReportSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetBalanceReportSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetBalanceReportSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetBalanceReportDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetBalanceReportDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetBalanceReportDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetBalanceReportDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetBalanceReportLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetBalanceReportLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *GetBalanceReportSelf `json:"self,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *GetBalanceReportDocumentation `json:"documentation,omitempty"`
}

func (o *GetBalanceReportLinks) GetSelf() *GetBalanceReportSelf {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *GetBalanceReportLinks) GetDocumentation() *GetBalanceReportDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

// GetBalanceReportResponseBody - The balance report object.
type GetBalanceReportResponseBody struct {
	// Indicates the response contains a balance report object. Will always contain the string `balance-report` for this
	// endpoint.
	Resource *string `json:"resource,omitempty"`
	// The ID of the balance this report is generated for.
	BalanceID *string `json:"balanceId,omitempty"`
	// The time zone used for the from and until parameters. Currently only time zone `Europe/Amsterdam` is supported.
	TimeZone *string `json:"timeZone,omitempty"`
	// The start date of the report, in `YYYY-MM-DD` format. The from date is 'inclusive', and in Central European Time.
	// This means a report with for example `from=2024-01-01` will include movements of 2024-01-01 00:00:00 CET and
	// onwards.
	From *string `json:"from,omitempty"`
	// The end date of the report, in `YYYY-MM-DD` format. The until date is 'exclusive', and in Central European Time.
	// This means a report with for example `until=2024-02-01` will include movements up until 2024-01-31 23:59:59 CET.
	Until *string `json:"until,omitempty"`
	// You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped by
	// status (e.g. `pending`, `available`), then by direction of movement (e.g. moved from pending to available), then
	// by transaction type, and then by other sub-groupings where available (e.g. payment method).
	//
	// With the `transaction-categories` format, transactions are grouped by transaction type, then by direction of
	// movement, and then again by other sub-groupings where available.
	//
	// Both reporting formats will always contain opening and closing amounts that correspond to the start and end dates
	// of the report.
	Grouping *GroupingResponse `json:"grouping,omitempty"`
	// Totals are grouped according to the chosen grouping rule. The example response should give a good idea of what a
	// typical grouping looks like.
	//
	// If grouping `status-balances` is chosen, the main grouping is as follows:
	//
	// * `pendingBalance` containing an `open`, `pending`, `movedToAvailable`, and `close` sub-group
	// * `availableBalance` containing an `open`, `movedFromPending`, `immediatelyAvailable`, and `close` sub-group
	//
	// If grouping `transaction-categories` is chosen, the main grouping is as follows:
	//
	// * `open` and `close` groups, each containing a `pending` and `available` sub-group
	// * Transaction type groups such as `payments`, `refunds`, `chargebacks`, `capital`, `transfers`, `fee-prepayments`, `corrections`, `topups`
	// each containing a `pending`, `movedToAvailable`, and
	// `immediatelyAvailable` sub-group
	//
	// Each sub-group typically has:
	//
	// * An `amount` object containing the group's total amount
	// * A `count` integer if relevant (for example, counting the number of refunds)
	// * A `subtotals` array containing more sub-group objects if applicable
	Totals *Totals `json:"totals,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *GetBalanceReportLinks `json:"_links,omitempty"`
}

func (o *GetBalanceReportResponseBody) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *GetBalanceReportResponseBody) GetBalanceID() *string {
	if o == nil {
		return nil
	}
	return o.BalanceID
}

func (o *GetBalanceReportResponseBody) GetTimeZone() *string {
	if o == nil {
		return nil
	}
	return o.TimeZone
}

func (o *GetBalanceReportResponseBody) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *GetBalanceReportResponseBody) GetUntil() *string {
	if o == nil {
		return nil
	}
	return o.Until
}

func (o *GetBalanceReportResponseBody) GetGrouping() *GroupingResponse {
	if o == nil {
		return nil
	}
	return o.Grouping
}

func (o *GetBalanceReportResponseBody) GetTotals() *Totals {
	if o == nil {
		return nil
	}
	return o.Totals
}

func (o *GetBalanceReportResponseBody) GetLinks() *GetBalanceReportLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type GetBalanceReportResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The balance report object.
	Object *GetBalanceReportResponseBody
}

func (o *GetBalanceReportResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetBalanceReportResponse) GetObject() *GetBalanceReportResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
