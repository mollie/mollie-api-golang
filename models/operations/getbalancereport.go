// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type GetBalanceReportGlobals struct {
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (g *GetBalanceReportGlobals) GetTestmode() *bool {
	if g == nil {
		return nil
	}
	return g.Testmode
}

type GetBalanceReportRequest struct {
	// Provide the ID of the related balance.
	BalanceID string `pathParam:"style=simple,explode=false,name=balanceId"`
	// The start date of the report, in `YYYY-MM-DD` format. The from date is
	// 'inclusive', and in Central European Time. This means a report with for example `from=2024-01-01` will
	// include transactions from 2024-01-01 0:00:00 CET and onwards.
	From string `queryParam:"style=form,explode=true,name=from"`
	// The end date of the report, in `YYYY-MM-DD` format. The until date is 'exclusive', and in Central European Time.
	// This means a report with for example `until=2024-02-01` will include transactions up until
	// 2024-01-31 23:59:59 CET.
	Until string `queryParam:"style=form,explode=true,name=until"`
	// You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped
	// by status (e.g. `pending`, `available`), then by transaction type, and then by other sub-groupings where
	// available (e.g. payment method).
	//
	// With the `transaction-categories` format, transactions are grouped by
	// transaction type, then by status, and then again by other sub-groupings where available.
	Grouping *components.BalanceReportGrouping `queryParam:"style=form,explode=true,name=grouping"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
	// A unique key to ensure idempotent requests. This key should be a UUID v4 string.
	IdempotencyKey *string `header:"style=simple,explode=false,name=idempotency-key"`
}

func (g *GetBalanceReportRequest) GetBalanceID() string {
	if g == nil {
		return ""
	}
	return g.BalanceID
}

func (g *GetBalanceReportRequest) GetFrom() string {
	if g == nil {
		return ""
	}
	return g.From
}

func (g *GetBalanceReportRequest) GetUntil() string {
	if g == nil {
		return ""
	}
	return g.Until
}

func (g *GetBalanceReportRequest) GetGrouping() *components.BalanceReportGrouping {
	if g == nil {
		return nil
	}
	return g.Grouping
}

func (g *GetBalanceReportRequest) GetTestmode() *bool {
	if g == nil {
		return nil
	}
	return g.Testmode
}

func (g *GetBalanceReportRequest) GetIdempotencyKey() *string {
	if g == nil {
		return nil
	}
	return g.IdempotencyKey
}

type GetBalanceReportResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The balance report object.
	EntityBalanceReport *components.EntityBalanceReport
}

func (g *GetBalanceReportResponse) GetHTTPMeta() components.HTTPMetadata {
	if g == nil {
		return components.HTTPMetadata{}
	}
	return g.HTTPMeta
}

func (g *GetBalanceReportResponse) GetEntityBalanceReport() *components.EntityBalanceReport {
	if g == nil {
		return nil
	}
	return g.EntityBalanceReport
}
