// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
	"github.com/mollie/mollie-api-golang/types"
)

// GetPaymentLinkPaymentsSort - Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
// newest to oldest.
type GetPaymentLinkPaymentsSort string

const (
	GetPaymentLinkPaymentsSortAsc  GetPaymentLinkPaymentsSort = "asc"
	GetPaymentLinkPaymentsSortDesc GetPaymentLinkPaymentsSort = "desc"
)

func (e GetPaymentLinkPaymentsSort) ToPointer() *GetPaymentLinkPaymentsSort {
	return &e
}
func (e *GetPaymentLinkPaymentsSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetPaymentLinkPaymentsSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsSort: %v", v)
	}
}

type GetPaymentLinkPaymentsRequest struct {
	// Provide the ID of the related payment link.
	PaymentLinkID string `pathParam:"style=simple,explode=false,name=paymentLinkId"`
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
	// result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
	// newest to oldest.
	Sort *GetPaymentLinkPaymentsSort `queryParam:"style=form,explode=true,name=sort"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *GetPaymentLinkPaymentsRequest) GetPaymentLinkID() string {
	if o == nil {
		return ""
	}
	return o.PaymentLinkID
}

func (o *GetPaymentLinkPaymentsRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *GetPaymentLinkPaymentsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetPaymentLinkPaymentsRequest) GetSort() *GetPaymentLinkPaymentsSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *GetPaymentLinkPaymentsRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// GetPaymentLinkPaymentsBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type GetPaymentLinkPaymentsBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetPaymentLinkPaymentsBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetPaymentLinkPaymentsBadRequestDocumentation `json:"documentation"`
}

func (o *GetPaymentLinkPaymentsBadRequestLinks) GetDocumentation() GetPaymentLinkPaymentsBadRequestDocumentation {
	if o == nil {
		return GetPaymentLinkPaymentsBadRequestDocumentation{}
	}
	return o.Documentation
}

// GetPaymentLinkPaymentsMode - Whether this entity was created in live mode or in test mode.
type GetPaymentLinkPaymentsMode string

const (
	GetPaymentLinkPaymentsModeLive GetPaymentLinkPaymentsMode = "live"
	GetPaymentLinkPaymentsModeTest GetPaymentLinkPaymentsMode = "test"
)

func (e GetPaymentLinkPaymentsMode) ToPointer() *GetPaymentLinkPaymentsMode {
	return &e
}
func (e *GetPaymentLinkPaymentsMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = GetPaymentLinkPaymentsMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsMode: %v", v)
	}
}

// GetPaymentLinkPaymentsAmount - The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge â‚¬1000.00.
//
// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
// retrieved using the Get method endpoint.
//
// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
// tip amount.
type GetPaymentLinkPaymentsAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkPaymentsAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkPaymentsAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkPaymentsAmountRefunded - The total amount that is already refunded. Only available when refunds are available for this payment. For some
// payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
// costs for a return shipment to the customer.
type GetPaymentLinkPaymentsAmountRefunded struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkPaymentsAmountRefunded) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkPaymentsAmountRefunded) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkPaymentsAmountRemaining - The remaining amount that can be refunded. Only available when refunds are available for this payment.
type GetPaymentLinkPaymentsAmountRemaining struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkPaymentsAmountRemaining) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkPaymentsAmountRemaining) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkPaymentsAmountCaptured - The total amount that is already captured for this payment. Only available when this payment supports captures.
type GetPaymentLinkPaymentsAmountCaptured struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkPaymentsAmountCaptured) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkPaymentsAmountCaptured) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkPaymentsAmountChargedBack - The total amount that was charged back for this payment. Only available when the total charged back amount is not
// zero.
type GetPaymentLinkPaymentsAmountChargedBack struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkPaymentsAmountChargedBack) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkPaymentsAmountChargedBack) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkPaymentsSettlementAmount - This optional field will contain the approximate amount that will be settled to your account, converted to the
// currency your account is settled in.
//
// Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
// settled by Mollie the `settlementAmount` is omitted from the response.
//
// Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
// using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
type GetPaymentLinkPaymentsSettlementAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkPaymentsSettlementAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkPaymentsSettlementAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkPaymentsLineType - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type GetPaymentLinkPaymentsLineType string

const (
	GetPaymentLinkPaymentsLineTypePhysical    GetPaymentLinkPaymentsLineType = "physical"
	GetPaymentLinkPaymentsLineTypeDigital     GetPaymentLinkPaymentsLineType = "digital"
	GetPaymentLinkPaymentsLineTypeShippingFee GetPaymentLinkPaymentsLineType = "shipping_fee"
	GetPaymentLinkPaymentsLineTypeDiscount    GetPaymentLinkPaymentsLineType = "discount"
	GetPaymentLinkPaymentsLineTypeStoreCredit GetPaymentLinkPaymentsLineType = "store_credit"
	GetPaymentLinkPaymentsLineTypeGiftCard    GetPaymentLinkPaymentsLineType = "gift_card"
	GetPaymentLinkPaymentsLineTypeSurcharge   GetPaymentLinkPaymentsLineType = "surcharge"
	GetPaymentLinkPaymentsLineTypeTip         GetPaymentLinkPaymentsLineType = "tip"
)

func (e GetPaymentLinkPaymentsLineType) ToPointer() *GetPaymentLinkPaymentsLineType {
	return &e
}
func (e *GetPaymentLinkPaymentsLineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "physical":
		fallthrough
	case "digital":
		fallthrough
	case "shipping_fee":
		fallthrough
	case "discount":
		fallthrough
	case "store_credit":
		fallthrough
	case "gift_card":
		fallthrough
	case "surcharge":
		fallthrough
	case "tip":
		*e = GetPaymentLinkPaymentsLineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsLineType: %v", v)
	}
}

// GetPaymentLinkPaymentsUnitPrice - The price of a single item including VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs â‚¬89.00 each.
//
// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
//
// The unit price can be zero in case of free items.
type GetPaymentLinkPaymentsUnitPrice struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkPaymentsUnitPrice) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkPaymentsUnitPrice) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkPaymentsDiscountAmount - Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
// type.
type GetPaymentLinkPaymentsDiscountAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkPaymentsDiscountAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkPaymentsDiscountAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkPaymentsTotalAmount - The total amount of the line, including VAT and discounts.
//
// Should match the following formula: `(unitPrice Ã— quantity) - discountAmount`.
//
// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
type GetPaymentLinkPaymentsTotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkPaymentsTotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkPaymentsTotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkPaymentsVatAmount - The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
// calculated with the formula `totalAmount Ã— (vatRate / (100 + vatRate))`.
//
// Any deviations from this will result in an error.
//
// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
// `SEK 100.00 Ã— (25 / 125) = SEK 20.00`.
type GetPaymentLinkPaymentsVatAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkPaymentsVatAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkPaymentsVatAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetPaymentLinkPaymentsCategory string

const (
	GetPaymentLinkPaymentsCategoryMeal         GetPaymentLinkPaymentsCategory = "meal"
	GetPaymentLinkPaymentsCategoryEco          GetPaymentLinkPaymentsCategory = "eco"
	GetPaymentLinkPaymentsCategoryGift         GetPaymentLinkPaymentsCategory = "gift"
	GetPaymentLinkPaymentsCategorySportCulture GetPaymentLinkPaymentsCategory = "sport_culture"
)

func (e GetPaymentLinkPaymentsCategory) ToPointer() *GetPaymentLinkPaymentsCategory {
	return &e
}
func (e *GetPaymentLinkPaymentsCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "meal":
		fallthrough
	case "eco":
		fallthrough
	case "gift":
		fallthrough
	case "sport_culture":
		*e = GetPaymentLinkPaymentsCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsCategory: %v", v)
	}
}

// GetPaymentLinkPaymentsRecurringAmount - Total amount and currency of the recurring item.
type GetPaymentLinkPaymentsRecurringAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkPaymentsRecurringAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkPaymentsRecurringAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkPaymentsRecurring - The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
// to inform the shopper of the details for recurring products in the payments.
type GetPaymentLinkPaymentsRecurring struct {
	// A description of the recurring item. If not present, the main description of the item will be used.
	Description *string `json:"description,omitempty"`
	// Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval string `json:"interval"`
	// Total amount and currency of the recurring item.
	Amount *GetPaymentLinkPaymentsRecurringAmount `json:"amount,omitempty"`
	// Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
	Times *int64 `json:"times,omitempty"`
	// The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
	StartDate *string `json:"startDate,omitempty"`
}

func (o *GetPaymentLinkPaymentsRecurring) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetPaymentLinkPaymentsRecurring) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *GetPaymentLinkPaymentsRecurring) GetAmount() *GetPaymentLinkPaymentsRecurringAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *GetPaymentLinkPaymentsRecurring) GetTimes() *int64 {
	if o == nil {
		return nil
	}
	return o.Times
}

func (o *GetPaymentLinkPaymentsRecurring) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

type GetPaymentLinkPaymentsLine struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *GetPaymentLinkPaymentsLineType `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// The price of a single item including VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs â‚¬89.00 each.
	//
	// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
	//
	// The unit price can be zero in case of free items.
	UnitPrice GetPaymentLinkPaymentsUnitPrice `json:"unitPrice"`
	// Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
	// type.
	DiscountAmount *GetPaymentLinkPaymentsDiscountAmount `json:"discountAmount,omitempty"`
	// The total amount of the line, including VAT and discounts.
	//
	// Should match the following formula: `(unitPrice Ã— quantity) - discountAmount`.
	//
	// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
	TotalAmount GetPaymentLinkPaymentsTotalAmount `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
	// calculated with the formula `totalAmount Ã— (vatRate / (100 + vatRate))`.
	//
	// Any deviations from this will result in an error.
	//
	// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
	// `SEK 100.00 Ã— (25 / 125) = SEK 20.00`.
	VatAmount *GetPaymentLinkPaymentsVatAmount `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []GetPaymentLinkPaymentsCategory `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string `json:"productUrl,omitempty"`
	// The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
	// to inform the shopper of the details for recurring products in the payments.
	Recurring *GetPaymentLinkPaymentsRecurring `json:"recurring,omitempty"`
}

func (o *GetPaymentLinkPaymentsLine) GetType() *GetPaymentLinkPaymentsLineType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetPaymentLinkPaymentsLine) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *GetPaymentLinkPaymentsLine) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *GetPaymentLinkPaymentsLine) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *GetPaymentLinkPaymentsLine) GetUnitPrice() GetPaymentLinkPaymentsUnitPrice {
	if o == nil {
		return GetPaymentLinkPaymentsUnitPrice{}
	}
	return o.UnitPrice
}

func (o *GetPaymentLinkPaymentsLine) GetDiscountAmount() *GetPaymentLinkPaymentsDiscountAmount {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *GetPaymentLinkPaymentsLine) GetTotalAmount() GetPaymentLinkPaymentsTotalAmount {
	if o == nil {
		return GetPaymentLinkPaymentsTotalAmount{}
	}
	return o.TotalAmount
}

func (o *GetPaymentLinkPaymentsLine) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *GetPaymentLinkPaymentsLine) GetVatAmount() *GetPaymentLinkPaymentsVatAmount {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *GetPaymentLinkPaymentsLine) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *GetPaymentLinkPaymentsLine) GetCategories() []GetPaymentLinkPaymentsCategory {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *GetPaymentLinkPaymentsLine) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *GetPaymentLinkPaymentsLine) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}

func (o *GetPaymentLinkPaymentsLine) GetRecurring() *GetPaymentLinkPaymentsRecurring {
	if o == nil {
		return nil
	}
	return o.Recurring
}

// GetPaymentLinkPaymentsBillingAddress - The customer's billing address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
//
// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
type GetPaymentLinkPaymentsBillingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *GetPaymentLinkPaymentsBillingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *GetPaymentLinkPaymentsBillingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *GetPaymentLinkPaymentsBillingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *GetPaymentLinkPaymentsBillingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *GetPaymentLinkPaymentsBillingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *GetPaymentLinkPaymentsBillingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *GetPaymentLinkPaymentsBillingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *GetPaymentLinkPaymentsBillingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetPaymentLinkPaymentsBillingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *GetPaymentLinkPaymentsBillingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *GetPaymentLinkPaymentsBillingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *GetPaymentLinkPaymentsBillingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// GetPaymentLinkPaymentsShippingAddress - The customer's shipping address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
type GetPaymentLinkPaymentsShippingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *GetPaymentLinkPaymentsShippingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *GetPaymentLinkPaymentsShippingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *GetPaymentLinkPaymentsShippingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *GetPaymentLinkPaymentsShippingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *GetPaymentLinkPaymentsShippingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *GetPaymentLinkPaymentsShippingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *GetPaymentLinkPaymentsShippingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *GetPaymentLinkPaymentsShippingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetPaymentLinkPaymentsShippingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *GetPaymentLinkPaymentsShippingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *GetPaymentLinkPaymentsShippingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *GetPaymentLinkPaymentsShippingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// GetPaymentLinkPaymentsLocale - Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
// locale, but our hosted payment pages currently only support the specified languages.
//
// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
// customer use a local bank account greatly increases the conversion and speed of payment.
type GetPaymentLinkPaymentsLocale string

const (
	GetPaymentLinkPaymentsLocaleEnUs GetPaymentLinkPaymentsLocale = "en_US"
	GetPaymentLinkPaymentsLocaleEnGb GetPaymentLinkPaymentsLocale = "en_GB"
	GetPaymentLinkPaymentsLocaleNlNl GetPaymentLinkPaymentsLocale = "nl_NL"
	GetPaymentLinkPaymentsLocaleNlBe GetPaymentLinkPaymentsLocale = "nl_BE"
	GetPaymentLinkPaymentsLocaleDeDe GetPaymentLinkPaymentsLocale = "de_DE"
	GetPaymentLinkPaymentsLocaleDeAt GetPaymentLinkPaymentsLocale = "de_AT"
	GetPaymentLinkPaymentsLocaleDeCh GetPaymentLinkPaymentsLocale = "de_CH"
	GetPaymentLinkPaymentsLocaleFrFr GetPaymentLinkPaymentsLocale = "fr_FR"
	GetPaymentLinkPaymentsLocaleFrBe GetPaymentLinkPaymentsLocale = "fr_BE"
	GetPaymentLinkPaymentsLocaleEsEs GetPaymentLinkPaymentsLocale = "es_ES"
	GetPaymentLinkPaymentsLocaleCaEs GetPaymentLinkPaymentsLocale = "ca_ES"
	GetPaymentLinkPaymentsLocalePtPt GetPaymentLinkPaymentsLocale = "pt_PT"
	GetPaymentLinkPaymentsLocaleItIt GetPaymentLinkPaymentsLocale = "it_IT"
	GetPaymentLinkPaymentsLocaleNbNo GetPaymentLinkPaymentsLocale = "nb_NO"
	GetPaymentLinkPaymentsLocaleSvSe GetPaymentLinkPaymentsLocale = "sv_SE"
	GetPaymentLinkPaymentsLocaleFiFi GetPaymentLinkPaymentsLocale = "fi_FI"
	GetPaymentLinkPaymentsLocaleDaDk GetPaymentLinkPaymentsLocale = "da_DK"
	GetPaymentLinkPaymentsLocaleIsIs GetPaymentLinkPaymentsLocale = "is_IS"
	GetPaymentLinkPaymentsLocaleHuHu GetPaymentLinkPaymentsLocale = "hu_HU"
	GetPaymentLinkPaymentsLocalePlPl GetPaymentLinkPaymentsLocale = "pl_PL"
	GetPaymentLinkPaymentsLocaleLvLv GetPaymentLinkPaymentsLocale = "lv_LV"
	GetPaymentLinkPaymentsLocaleLtLt GetPaymentLinkPaymentsLocale = "lt_LT"
)

func (e GetPaymentLinkPaymentsLocale) ToPointer() *GetPaymentLinkPaymentsLocale {
	return &e
}
func (e *GetPaymentLinkPaymentsLocale) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		fallthrough
	case "es_ES":
		fallthrough
	case "ca_ES":
		fallthrough
	case "pt_PT":
		fallthrough
	case "it_IT":
		fallthrough
	case "nb_NO":
		fallthrough
	case "sv_SE":
		fallthrough
	case "fi_FI":
		fallthrough
	case "da_DK":
		fallthrough
	case "is_IS":
		fallthrough
	case "hu_HU":
		fallthrough
	case "pl_PL":
		fallthrough
	case "lv_LV":
		fallthrough
	case "lt_LT":
		*e = GetPaymentLinkPaymentsLocale(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsLocale: %v", v)
	}
}

// GetPaymentLinkPaymentsMethod - The payment method used for this transaction. If a specific method was selected during payment initialization,
// this field reflects that choice.
type GetPaymentLinkPaymentsMethod string

const (
	GetPaymentLinkPaymentsMethodAlma           GetPaymentLinkPaymentsMethod = "alma"
	GetPaymentLinkPaymentsMethodApplepay       GetPaymentLinkPaymentsMethod = "applepay"
	GetPaymentLinkPaymentsMethodBacs           GetPaymentLinkPaymentsMethod = "bacs"
	GetPaymentLinkPaymentsMethodBancomatpay    GetPaymentLinkPaymentsMethod = "bancomatpay"
	GetPaymentLinkPaymentsMethodBancontact     GetPaymentLinkPaymentsMethod = "bancontact"
	GetPaymentLinkPaymentsMethodBanktransfer   GetPaymentLinkPaymentsMethod = "banktransfer"
	GetPaymentLinkPaymentsMethodBelfius        GetPaymentLinkPaymentsMethod = "belfius"
	GetPaymentLinkPaymentsMethodBillie         GetPaymentLinkPaymentsMethod = "billie"
	GetPaymentLinkPaymentsMethodBizum          GetPaymentLinkPaymentsMethod = "bizum"
	GetPaymentLinkPaymentsMethodBlik           GetPaymentLinkPaymentsMethod = "blik"
	GetPaymentLinkPaymentsMethodCreditcard     GetPaymentLinkPaymentsMethod = "creditcard"
	GetPaymentLinkPaymentsMethodDirectdebit    GetPaymentLinkPaymentsMethod = "directdebit"
	GetPaymentLinkPaymentsMethodEps            GetPaymentLinkPaymentsMethod = "eps"
	GetPaymentLinkPaymentsMethodGiftcard       GetPaymentLinkPaymentsMethod = "giftcard"
	GetPaymentLinkPaymentsMethodIdeal          GetPaymentLinkPaymentsMethod = "ideal"
	GetPaymentLinkPaymentsMethodIn3            GetPaymentLinkPaymentsMethod = "in3"
	GetPaymentLinkPaymentsMethodKbc            GetPaymentLinkPaymentsMethod = "kbc"
	GetPaymentLinkPaymentsMethodKlarna         GetPaymentLinkPaymentsMethod = "klarna"
	GetPaymentLinkPaymentsMethodKlarnapaylater GetPaymentLinkPaymentsMethod = "klarnapaylater"
	GetPaymentLinkPaymentsMethodKlarnapaynow   GetPaymentLinkPaymentsMethod = "klarnapaynow"
	GetPaymentLinkPaymentsMethodKlarnasliceit  GetPaymentLinkPaymentsMethod = "klarnasliceit"
	GetPaymentLinkPaymentsMethodMbway          GetPaymentLinkPaymentsMethod = "mbway"
	GetPaymentLinkPaymentsMethodMultibanco     GetPaymentLinkPaymentsMethod = "multibanco"
	GetPaymentLinkPaymentsMethodMybank         GetPaymentLinkPaymentsMethod = "mybank"
	GetPaymentLinkPaymentsMethodPaybybank      GetPaymentLinkPaymentsMethod = "paybybank"
	GetPaymentLinkPaymentsMethodPayconiq       GetPaymentLinkPaymentsMethod = "payconiq"
	GetPaymentLinkPaymentsMethodPaypal         GetPaymentLinkPaymentsMethod = "paypal"
	GetPaymentLinkPaymentsMethodPaysafecard    GetPaymentLinkPaymentsMethod = "paysafecard"
	GetPaymentLinkPaymentsMethodPointofsale    GetPaymentLinkPaymentsMethod = "pointofsale"
	GetPaymentLinkPaymentsMethodPrzelewy24     GetPaymentLinkPaymentsMethod = "przelewy24"
	GetPaymentLinkPaymentsMethodRiverty        GetPaymentLinkPaymentsMethod = "riverty"
	GetPaymentLinkPaymentsMethodSatispay       GetPaymentLinkPaymentsMethod = "satispay"
	GetPaymentLinkPaymentsMethodSwish          GetPaymentLinkPaymentsMethod = "swish"
	GetPaymentLinkPaymentsMethodTrustly        GetPaymentLinkPaymentsMethod = "trustly"
	GetPaymentLinkPaymentsMethodTwint          GetPaymentLinkPaymentsMethod = "twint"
	GetPaymentLinkPaymentsMethodVoucher        GetPaymentLinkPaymentsMethod = "voucher"
)

func (e GetPaymentLinkPaymentsMethod) ToPointer() *GetPaymentLinkPaymentsMethod {
	return &e
}
func (e *GetPaymentLinkPaymentsMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "applepay":
		fallthrough
	case "bacs":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "kbc":
		fallthrough
	case "klarna":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "pointofsale":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = GetPaymentLinkPaymentsMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsMethod: %v", v)
	}
}

type GetPaymentLinkPaymentsMetadataType string

const (
	GetPaymentLinkPaymentsMetadataTypeStr        GetPaymentLinkPaymentsMetadataType = "str"
	GetPaymentLinkPaymentsMetadataTypeMapOfAny   GetPaymentLinkPaymentsMetadataType = "mapOfAny"
	GetPaymentLinkPaymentsMetadataTypeArrayOfStr GetPaymentLinkPaymentsMetadataType = "arrayOfStr"
)

// GetPaymentLinkPaymentsMetadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type GetPaymentLinkPaymentsMetadata struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type GetPaymentLinkPaymentsMetadataType
}

func CreateGetPaymentLinkPaymentsMetadataStr(str string) GetPaymentLinkPaymentsMetadata {
	typ := GetPaymentLinkPaymentsMetadataTypeStr

	return GetPaymentLinkPaymentsMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetPaymentLinkPaymentsMetadataMapOfAny(mapOfAny map[string]any) GetPaymentLinkPaymentsMetadata {
	typ := GetPaymentLinkPaymentsMetadataTypeMapOfAny

	return GetPaymentLinkPaymentsMetadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateGetPaymentLinkPaymentsMetadataArrayOfStr(arrayOfStr []string) GetPaymentLinkPaymentsMetadata {
	typ := GetPaymentLinkPaymentsMetadataTypeArrayOfStr

	return GetPaymentLinkPaymentsMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *GetPaymentLinkPaymentsMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = GetPaymentLinkPaymentsMetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = GetPaymentLinkPaymentsMetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetPaymentLinkPaymentsMetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetPaymentLinkPaymentsMetadata", string(data))
}

func (u GetPaymentLinkPaymentsMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type GetPaymentLinkPaymentsMetadata: all fields are null")
}

// GetPaymentLinkPaymentsCaptureMode - Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
// and capture at a later time.
//
// This field needs to be set to `manual` for method `riverty`.
type GetPaymentLinkPaymentsCaptureMode string

const (
	GetPaymentLinkPaymentsCaptureModeAutomatic GetPaymentLinkPaymentsCaptureMode = "automatic"
	GetPaymentLinkPaymentsCaptureModeManual    GetPaymentLinkPaymentsCaptureMode = "manual"
)

func (e GetPaymentLinkPaymentsCaptureMode) ToPointer() *GetPaymentLinkPaymentsCaptureMode {
	return &e
}
func (e *GetPaymentLinkPaymentsCaptureMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automatic":
		fallthrough
	case "manual":
		*e = GetPaymentLinkPaymentsCaptureMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsCaptureMode: %v", v)
	}
}

// GetPaymentLinkPaymentsApplicationFeeAmount - The fee that you wish to charge.
//
// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
// a â‚¬0.99 fee on a â‚¬1.00 payment.
type GetPaymentLinkPaymentsApplicationFeeAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkPaymentsApplicationFeeAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkPaymentsApplicationFeeAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkPaymentsApplicationFee - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
//
// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
// `routing` parameter.
type GetPaymentLinkPaymentsApplicationFee struct {
	// The fee that you wish to charge.
	//
	// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
	// a â‚¬0.99 fee on a â‚¬1.00 payment.
	Amount *GetPaymentLinkPaymentsApplicationFeeAmount `json:"amount,omitempty"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description *string `json:"description,omitempty"`
}

func (o *GetPaymentLinkPaymentsApplicationFee) GetAmount() *GetPaymentLinkPaymentsApplicationFeeAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *GetPaymentLinkPaymentsApplicationFee) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// GetPaymentLinkPaymentsRoutingMode - Whether this entity was created in live mode or in test mode.
type GetPaymentLinkPaymentsRoutingMode string

const (
	GetPaymentLinkPaymentsRoutingModeLive GetPaymentLinkPaymentsRoutingMode = "live"
	GetPaymentLinkPaymentsRoutingModeTest GetPaymentLinkPaymentsRoutingMode = "test"
)

func (e GetPaymentLinkPaymentsRoutingMode) ToPointer() *GetPaymentLinkPaymentsRoutingMode {
	return &e
}
func (e *GetPaymentLinkPaymentsRoutingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = GetPaymentLinkPaymentsRoutingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsRoutingMode: %v", v)
	}
}

// GetPaymentLinkPaymentsRoutingAmount - The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
type GetPaymentLinkPaymentsRoutingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkPaymentsRoutingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkPaymentsRoutingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkPaymentsRoutingType - The type of destination. Currently only the destination type `organization` is supported.
type GetPaymentLinkPaymentsRoutingType string

const (
	GetPaymentLinkPaymentsRoutingTypeOrganization GetPaymentLinkPaymentsRoutingType = "organization"
)

func (e GetPaymentLinkPaymentsRoutingType) ToPointer() *GetPaymentLinkPaymentsRoutingType {
	return &e
}
func (e *GetPaymentLinkPaymentsRoutingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organization":
		*e = GetPaymentLinkPaymentsRoutingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsRoutingType: %v", v)
	}
}

// GetPaymentLinkPaymentsDestination - The destination of this portion of the payment.
type GetPaymentLinkPaymentsDestination struct {
	// The type of destination. Currently only the destination type `organization` is supported.
	Type GetPaymentLinkPaymentsRoutingType `json:"type"`
	// Required for destination type `organization`. The ID of the connected organization the funds should be
	// routed to.
	OrganizationID string `json:"organizationId"`
}

func (o *GetPaymentLinkPaymentsDestination) GetType() GetPaymentLinkPaymentsRoutingType {
	if o == nil {
		return GetPaymentLinkPaymentsRoutingType("")
	}
	return o.Type
}

func (o *GetPaymentLinkPaymentsDestination) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

// GetPaymentLinkPaymentsRoutingSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetPaymentLinkPaymentsRoutingSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsRoutingSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsRoutingSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsRoutingPayment - The API resource URL of the [payment](get-payment) that belong to this route.
type GetPaymentLinkPaymentsRoutingPayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsRoutingPayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsRoutingPayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsRoutingLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetPaymentLinkPaymentsRoutingLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self GetPaymentLinkPaymentsRoutingSelf `json:"self"`
	// The API resource URL of the [payment](get-payment) that belong to this route.
	Payment GetPaymentLinkPaymentsRoutingPayment `json:"payment"`
}

func (o *GetPaymentLinkPaymentsRoutingLinks) GetSelf() GetPaymentLinkPaymentsRoutingSelf {
	if o == nil {
		return GetPaymentLinkPaymentsRoutingSelf{}
	}
	return o.Self
}

func (o *GetPaymentLinkPaymentsRoutingLinks) GetPayment() GetPaymentLinkPaymentsRoutingPayment {
	if o == nil {
		return GetPaymentLinkPaymentsRoutingPayment{}
	}
	return o.Payment
}

type GetPaymentLinkPaymentsRouting struct {
	// Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this route. Mollie will always refer to the route by this ID.
	// Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode GetPaymentLinkPaymentsRoutingMode `json:"mode"`
	// The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
	Amount GetPaymentLinkPaymentsRoutingAmount `json:"amount"`
	// The destination of this portion of the payment.
	Destination GetPaymentLinkPaymentsDestination `json:"destination"`
	// The date and time when the route was created. The date is given in ISO 8601 format.
	CreatedAt string `json:"createdAt"`
	// Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
	// date must be given in `YYYY-MM-DD` format.
	//
	// If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
	ReleaseDate *string `json:"releaseDate,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links GetPaymentLinkPaymentsRoutingLinks `json:"_links"`
}

func (o *GetPaymentLinkPaymentsRouting) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *GetPaymentLinkPaymentsRouting) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetPaymentLinkPaymentsRouting) GetMode() GetPaymentLinkPaymentsRoutingMode {
	if o == nil {
		return GetPaymentLinkPaymentsRoutingMode("")
	}
	return o.Mode
}

func (o *GetPaymentLinkPaymentsRouting) GetAmount() GetPaymentLinkPaymentsRoutingAmount {
	if o == nil {
		return GetPaymentLinkPaymentsRoutingAmount{}
	}
	return o.Amount
}

func (o *GetPaymentLinkPaymentsRouting) GetDestination() GetPaymentLinkPaymentsDestination {
	if o == nil {
		return GetPaymentLinkPaymentsDestination{}
	}
	return o.Destination
}

func (o *GetPaymentLinkPaymentsRouting) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GetPaymentLinkPaymentsRouting) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *GetPaymentLinkPaymentsRouting) GetLinks() GetPaymentLinkPaymentsRoutingLinks {
	if o == nil {
		return GetPaymentLinkPaymentsRoutingLinks{}
	}
	return o.Links
}

// GetPaymentLinkPaymentsSequenceType - **Only relevant for recurring payments.**
//
// Indicate which part of a recurring sequence this payment is for.
//
// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
// on their account in the future.
//
// If set to `recurring`, the customer's card is charged automatically.
//
// Defaults to `oneoff`, which is a regular non-recurring payment.
//
// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
// are set up correctly for recurring payments.
type GetPaymentLinkPaymentsSequenceType string

const (
	GetPaymentLinkPaymentsSequenceTypeOneoff    GetPaymentLinkPaymentsSequenceType = "oneoff"
	GetPaymentLinkPaymentsSequenceTypeFirst     GetPaymentLinkPaymentsSequenceType = "first"
	GetPaymentLinkPaymentsSequenceTypeRecurring GetPaymentLinkPaymentsSequenceType = "recurring"
)

func (e GetPaymentLinkPaymentsSequenceType) ToPointer() *GetPaymentLinkPaymentsSequenceType {
	return &e
}
func (e *GetPaymentLinkPaymentsSequenceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oneoff":
		fallthrough
	case "first":
		fallthrough
	case "recurring":
		*e = GetPaymentLinkPaymentsSequenceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsSequenceType: %v", v)
	}
}

// GetPaymentLinkPaymentsStatusEnum - The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
// statuses occur at what point.
type GetPaymentLinkPaymentsStatusEnum string

const (
	GetPaymentLinkPaymentsStatusEnumOpen       GetPaymentLinkPaymentsStatusEnum = "open"
	GetPaymentLinkPaymentsStatusEnumPending    GetPaymentLinkPaymentsStatusEnum = "pending"
	GetPaymentLinkPaymentsStatusEnumAuthorized GetPaymentLinkPaymentsStatusEnum = "authorized"
	GetPaymentLinkPaymentsStatusEnumPaid       GetPaymentLinkPaymentsStatusEnum = "paid"
	GetPaymentLinkPaymentsStatusEnumCanceled   GetPaymentLinkPaymentsStatusEnum = "canceled"
	GetPaymentLinkPaymentsStatusEnumExpired    GetPaymentLinkPaymentsStatusEnum = "expired"
	GetPaymentLinkPaymentsStatusEnumFailed     GetPaymentLinkPaymentsStatusEnum = "failed"
)

func (e GetPaymentLinkPaymentsStatusEnum) ToPointer() *GetPaymentLinkPaymentsStatusEnum {
	return &e
}
func (e *GetPaymentLinkPaymentsStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "pending":
		fallthrough
	case "authorized":
		fallthrough
	case "paid":
		fallthrough
	case "canceled":
		fallthrough
	case "expired":
		fallthrough
	case "failed":
		*e = GetPaymentLinkPaymentsStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsStatusEnum: %v", v)
	}
}

// GetPaymentLinkPaymentsCode - A machine-readable code that indicates the reason for the payment's status.
type GetPaymentLinkPaymentsCode string

const (
	GetPaymentLinkPaymentsCodeApprovedOrCompletedSuccessfully             GetPaymentLinkPaymentsCode = "approved_or_completed_successfully"
	GetPaymentLinkPaymentsCodeReferToCardIssuer                           GetPaymentLinkPaymentsCode = "refer_to_card_issuer"
	GetPaymentLinkPaymentsCodeInvalidMerchant                             GetPaymentLinkPaymentsCode = "invalid_merchant"
	GetPaymentLinkPaymentsCodeCaptureCard                                 GetPaymentLinkPaymentsCode = "capture_card"
	GetPaymentLinkPaymentsCodeDoNotHonor                                  GetPaymentLinkPaymentsCode = "do_not_honor"
	GetPaymentLinkPaymentsCodeError                                       GetPaymentLinkPaymentsCode = "error"
	GetPaymentLinkPaymentsCodePartialApproval                             GetPaymentLinkPaymentsCode = "partial_approval"
	GetPaymentLinkPaymentsCodeInvalidTransaction                          GetPaymentLinkPaymentsCode = "invalid_transaction"
	GetPaymentLinkPaymentsCodeInvalidAmount                               GetPaymentLinkPaymentsCode = "invalid_amount"
	GetPaymentLinkPaymentsCodeInvalidIssuer                               GetPaymentLinkPaymentsCode = "invalid_issuer"
	GetPaymentLinkPaymentsCodeLostCard                                    GetPaymentLinkPaymentsCode = "lost_card"
	GetPaymentLinkPaymentsCodeStolenCard                                  GetPaymentLinkPaymentsCode = "stolen_card"
	GetPaymentLinkPaymentsCodeInsufficientFunds                           GetPaymentLinkPaymentsCode = "insufficient_funds"
	GetPaymentLinkPaymentsCodeExpiredCard                                 GetPaymentLinkPaymentsCode = "expired_card"
	GetPaymentLinkPaymentsCodeInvalidPin                                  GetPaymentLinkPaymentsCode = "invalid_pin"
	GetPaymentLinkPaymentsCodeTransactionNotPermittedToCardholder         GetPaymentLinkPaymentsCode = "transaction_not_permitted_to_cardholder"
	GetPaymentLinkPaymentsCodeTransactionNotAllowedAtTerminal             GetPaymentLinkPaymentsCode = "transaction_not_allowed_at_terminal"
	GetPaymentLinkPaymentsCodeExceedsWithdrawalAmountLimit                GetPaymentLinkPaymentsCode = "exceeds_withdrawal_amount_limit"
	GetPaymentLinkPaymentsCodeRestrictedCard                              GetPaymentLinkPaymentsCode = "restricted_card"
	GetPaymentLinkPaymentsCodeSecurityViolation                           GetPaymentLinkPaymentsCode = "security_violation"
	GetPaymentLinkPaymentsCodeExceedsWithdrawalCountLimit                 GetPaymentLinkPaymentsCode = "exceeds_withdrawal_count_limit"
	GetPaymentLinkPaymentsCodeAllowableNumberOfPinTriesExceeded           GetPaymentLinkPaymentsCode = "allowable_number_of_pin_tries_exceeded"
	GetPaymentLinkPaymentsCodeNoReasonToDecline                           GetPaymentLinkPaymentsCode = "no_reason_to_decline"
	GetPaymentLinkPaymentsCodeCannotVerifyPin                             GetPaymentLinkPaymentsCode = "cannot_verify_pin"
	GetPaymentLinkPaymentsCodeIssuerUnavailable                           GetPaymentLinkPaymentsCode = "issuer_unavailable"
	GetPaymentLinkPaymentsCodeUnableToRouteTransaction                    GetPaymentLinkPaymentsCode = "unable_to_route_transaction"
	GetPaymentLinkPaymentsCodeDuplicateTransaction                        GetPaymentLinkPaymentsCode = "duplicate_transaction"
	GetPaymentLinkPaymentsCodeSystemMalfunction                           GetPaymentLinkPaymentsCode = "system_malfunction"
	GetPaymentLinkPaymentsCodeHonorWithID                                 GetPaymentLinkPaymentsCode = "honor_with_id"
	GetPaymentLinkPaymentsCodeInvalidCardNumber                           GetPaymentLinkPaymentsCode = "invalid_card_number"
	GetPaymentLinkPaymentsCodeFormatError                                 GetPaymentLinkPaymentsCode = "format_error"
	GetPaymentLinkPaymentsCodeContactCardIssuer                           GetPaymentLinkPaymentsCode = "contact_card_issuer"
	GetPaymentLinkPaymentsCodePinNotChanged                               GetPaymentLinkPaymentsCode = "pin_not_changed"
	GetPaymentLinkPaymentsCodeInvalidNonexistentToAccountSpecified        GetPaymentLinkPaymentsCode = "invalid_nonexistent_to_account_specified"
	GetPaymentLinkPaymentsCodeInvalidNonexistentFromAccountSpecified      GetPaymentLinkPaymentsCode = "invalid_nonexistent_from_account_specified"
	GetPaymentLinkPaymentsCodeInvalidNonexistentAccountSpecified          GetPaymentLinkPaymentsCode = "invalid_nonexistent_account_specified"
	GetPaymentLinkPaymentsCodeLifecycleRelated                            GetPaymentLinkPaymentsCode = "lifecycle_related"
	GetPaymentLinkPaymentsCodeDomesticDebitTransactionNotAllowed          GetPaymentLinkPaymentsCode = "domestic_debit_transaction_not_allowed"
	GetPaymentLinkPaymentsCodePolicyRelated                               GetPaymentLinkPaymentsCode = "policy_related"
	GetPaymentLinkPaymentsCodeFraudSecurityRelated                        GetPaymentLinkPaymentsCode = "fraud_security_related"
	GetPaymentLinkPaymentsCodeInvalidAuthorizationLifeCycle               GetPaymentLinkPaymentsCode = "invalid_authorization_life_cycle"
	GetPaymentLinkPaymentsCodePurchaseAmountOnlyNoCashBackAllowed         GetPaymentLinkPaymentsCode = "purchase_amount_only_no_cash_back_allowed"
	GetPaymentLinkPaymentsCodeCryptographicFailure                        GetPaymentLinkPaymentsCode = "cryptographic_failure"
	GetPaymentLinkPaymentsCodeUnacceptablePin                             GetPaymentLinkPaymentsCode = "unacceptable_pin"
	GetPaymentLinkPaymentsCodeReferToCardIssuerSpecialCondition           GetPaymentLinkPaymentsCode = "refer_to_card_issuer_special_condition"
	GetPaymentLinkPaymentsCodePickUpCardSpecialCondition                  GetPaymentLinkPaymentsCode = "pick_up_card_special_condition"
	GetPaymentLinkPaymentsCodeVipApproval                                 GetPaymentLinkPaymentsCode = "vip_approval"
	GetPaymentLinkPaymentsCodeInvalidAccountNumber                        GetPaymentLinkPaymentsCode = "invalid_account_number"
	GetPaymentLinkPaymentsCodeReEnterTransaction                          GetPaymentLinkPaymentsCode = "re_enter_transaction"
	GetPaymentLinkPaymentsCodeNoActionTaken                               GetPaymentLinkPaymentsCode = "no_action_taken"
	GetPaymentLinkPaymentsCodeUnableToLocateRecord                        GetPaymentLinkPaymentsCode = "unable_to_locate_record"
	GetPaymentLinkPaymentsCodeFileTemporarilyUnavailable                  GetPaymentLinkPaymentsCode = "file_temporarily_unavailable"
	GetPaymentLinkPaymentsCodeNoCreditAccount                             GetPaymentLinkPaymentsCode = "no_credit_account"
	GetPaymentLinkPaymentsCodeClosedAccount                               GetPaymentLinkPaymentsCode = "closed_account"
	GetPaymentLinkPaymentsCodeNoCheckingAccount                           GetPaymentLinkPaymentsCode = "no_checking_account"
	GetPaymentLinkPaymentsCodeNoSavingsAccount                            GetPaymentLinkPaymentsCode = "no_savings_account"
	GetPaymentLinkPaymentsCodeSuspectedFraud                              GetPaymentLinkPaymentsCode = "suspected_fraud"
	GetPaymentLinkPaymentsCodeTransactionDoesNotFulfillAmlRequirement     GetPaymentLinkPaymentsCode = "transaction_does_not_fulfill_aml_requirement"
	GetPaymentLinkPaymentsCodePinDataRequired                             GetPaymentLinkPaymentsCode = "pin_data_required"
	GetPaymentLinkPaymentsCodeUnableToLocatePreviousMessage               GetPaymentLinkPaymentsCode = "unable_to_locate_previous_message"
	GetPaymentLinkPaymentsCodePreviousMessageLocatedInconsistentData      GetPaymentLinkPaymentsCode = "previous_message_located_inconsistent_data"
	GetPaymentLinkPaymentsCodeBlockedFirstUsed                            GetPaymentLinkPaymentsCode = "blocked_first_used"
	GetPaymentLinkPaymentsCodeTransactionReversed                         GetPaymentLinkPaymentsCode = "transaction_reversed"
	GetPaymentLinkPaymentsCodeCreditIssuerUnavailable                     GetPaymentLinkPaymentsCode = "credit_issuer_unavailable"
	GetPaymentLinkPaymentsCodePinCryptographicErrorFound                  GetPaymentLinkPaymentsCode = "pin_cryptographic_error_found"
	GetPaymentLinkPaymentsCodeNegativeOnlineCamResult                     GetPaymentLinkPaymentsCode = "negative_online_cam_result"
	GetPaymentLinkPaymentsCodeViolationOfLaw                              GetPaymentLinkPaymentsCode = "violation_of_law"
	GetPaymentLinkPaymentsCodeForceStip                                   GetPaymentLinkPaymentsCode = "force_stip"
	GetPaymentLinkPaymentsCodeCashServiceNotAvailable                     GetPaymentLinkPaymentsCode = "cash_service_not_available"
	GetPaymentLinkPaymentsCodeCashbackRequestExceedsIssuerLimit           GetPaymentLinkPaymentsCode = "cashback_request_exceeds_issuer_limit"
	GetPaymentLinkPaymentsCodeDeclineForCvv2Failure                       GetPaymentLinkPaymentsCode = "decline_for_cvv2_failure"
	GetPaymentLinkPaymentsCodeTransactionAmountExceedsPreAuthorizedAmount GetPaymentLinkPaymentsCode = "transaction_amount_exceeds_pre_authorized_amount"
	GetPaymentLinkPaymentsCodeInvalidBillerInformation                    GetPaymentLinkPaymentsCode = "invalid_biller_information"
	GetPaymentLinkPaymentsCodePinChangeUnblockRequestDeclined             GetPaymentLinkPaymentsCode = "pin_change_unblock_request_declined"
	GetPaymentLinkPaymentsCodeUnsafePin                                   GetPaymentLinkPaymentsCode = "unsafe_pin"
	GetPaymentLinkPaymentsCodeCardAuthenticationFailed                    GetPaymentLinkPaymentsCode = "card_authentication_failed"
	GetPaymentLinkPaymentsCodeStopPaymentOrder                            GetPaymentLinkPaymentsCode = "stop_payment_order"
	GetPaymentLinkPaymentsCodeRevocationOfAuthorization                   GetPaymentLinkPaymentsCode = "revocation_of_authorization"
	GetPaymentLinkPaymentsCodeRevocationOfAllAuthorizations               GetPaymentLinkPaymentsCode = "revocation_of_all_authorizations"
	GetPaymentLinkPaymentsCodeForwardToIssuerXa                           GetPaymentLinkPaymentsCode = "forward_to_issuer_xa"
	GetPaymentLinkPaymentsCodeForwardToIssuerXd                           GetPaymentLinkPaymentsCode = "forward_to_issuer_xd"
	GetPaymentLinkPaymentsCodeUnableToGoOnline                            GetPaymentLinkPaymentsCode = "unable_to_go_online"
	GetPaymentLinkPaymentsCodeAdditionalCustomerAuthenticationRequired    GetPaymentLinkPaymentsCode = "additional_customer_authentication_required"
	GetPaymentLinkPaymentsCodeMerchantIDNotFound                          GetPaymentLinkPaymentsCode = "merchant_id_not_found"
	GetPaymentLinkPaymentsCodeMerchantAccountClosed                       GetPaymentLinkPaymentsCode = "merchant_account_closed"
	GetPaymentLinkPaymentsCodeTerminalIDNotFound                          GetPaymentLinkPaymentsCode = "terminal_id_not_found"
	GetPaymentLinkPaymentsCodeTerminalClosed                              GetPaymentLinkPaymentsCode = "terminal_closed"
	GetPaymentLinkPaymentsCodeInvalidCategoryCode                         GetPaymentLinkPaymentsCode = "invalid_category_code"
	GetPaymentLinkPaymentsCodeInvalidCurrency                             GetPaymentLinkPaymentsCode = "invalid_currency"
	GetPaymentLinkPaymentsCodeMissingCvv2Cvc2                             GetPaymentLinkPaymentsCode = "missing_cvv2_cvc2"
	GetPaymentLinkPaymentsCodeCvv2NotAllowed                              GetPaymentLinkPaymentsCode = "cvv2_not_allowed"
	GetPaymentLinkPaymentsCodeMerchantNotRegisteredVbv                    GetPaymentLinkPaymentsCode = "merchant_not_registered_vbv"
	GetPaymentLinkPaymentsCodeMerchantNotRegisteredForAmex                GetPaymentLinkPaymentsCode = "merchant_not_registered_for_amex"
	GetPaymentLinkPaymentsCodeTransactionNotPermittedAtTerminal           GetPaymentLinkPaymentsCode = "transaction_not_permitted_at_terminal"
	GetPaymentLinkPaymentsCodeAgreementTerminalNotRelated                 GetPaymentLinkPaymentsCode = "agreement_terminal_not_related"
	GetPaymentLinkPaymentsCodeInvalidProcessorID                          GetPaymentLinkPaymentsCode = "invalid_processor_id"
	GetPaymentLinkPaymentsCodeInvalidMerchantData                         GetPaymentLinkPaymentsCode = "invalid_merchant_data"
	GetPaymentLinkPaymentsCodeSubMerchantAccountClosed                    GetPaymentLinkPaymentsCode = "sub_merchant_account_closed"
	GetPaymentLinkPaymentsCodeTerminalBusy                                GetPaymentLinkPaymentsCode = "terminal_busy"
	GetPaymentLinkPaymentsCodeTerminalUnreachable                         GetPaymentLinkPaymentsCode = "terminal_unreachable"
	GetPaymentLinkPaymentsCodeServiceFailed                               GetPaymentLinkPaymentsCode = "service_failed"
	GetPaymentLinkPaymentsCodeInvalidOperation                            GetPaymentLinkPaymentsCode = "invalid_operation"
	GetPaymentLinkPaymentsCodeAuthorizationError                          GetPaymentLinkPaymentsCode = "authorization_error"
	GetPaymentLinkPaymentsCodeLoginFailedWithoutReason                    GetPaymentLinkPaymentsCode = "login_failed_without_reason"
	GetPaymentLinkPaymentsCodeInvalidRetailer                             GetPaymentLinkPaymentsCode = "invalid_retailer"
	GetPaymentLinkPaymentsCodeCardDoesNotExist                            GetPaymentLinkPaymentsCode = "card_does_not_exist"
	GetPaymentLinkPaymentsCodeCardIsBlocked                               GetPaymentLinkPaymentsCode = "card_is_blocked"
	GetPaymentLinkPaymentsCodeInvalidCardID                               GetPaymentLinkPaymentsCode = "invalid_card_id"
	GetPaymentLinkPaymentsCodeCardIsTransferred                           GetPaymentLinkPaymentsCode = "card_is_transferred"
	GetPaymentLinkPaymentsCodeCardIsNotActive                             GetPaymentLinkPaymentsCode = "card_is_not_active"
	GetPaymentLinkPaymentsCodeIncorrectPurchaseValue                      GetPaymentLinkPaymentsCode = "incorrect_purchase_value"
	GetPaymentLinkPaymentsCodeCardNotAvailable                            GetPaymentLinkPaymentsCode = "card_not_available"
	GetPaymentLinkPaymentsCodeWrongCurrency                               GetPaymentLinkPaymentsCode = "wrong_currency"
	GetPaymentLinkPaymentsCodeLoginFailedUnknownUser                      GetPaymentLinkPaymentsCode = "login_failed_unknown_user"
	GetPaymentLinkPaymentsCodeLoginFailedInvalidPassword                  GetPaymentLinkPaymentsCode = "login_failed_invalid_password"
	GetPaymentLinkPaymentsCodeInvalidEanCode                              GetPaymentLinkPaymentsCode = "invalid_ean_code"
)

func (e GetPaymentLinkPaymentsCode) ToPointer() *GetPaymentLinkPaymentsCode {
	return &e
}
func (e *GetPaymentLinkPaymentsCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved_or_completed_successfully":
		fallthrough
	case "refer_to_card_issuer":
		fallthrough
	case "invalid_merchant":
		fallthrough
	case "capture_card":
		fallthrough
	case "do_not_honor":
		fallthrough
	case "error":
		fallthrough
	case "partial_approval":
		fallthrough
	case "invalid_transaction":
		fallthrough
	case "invalid_amount":
		fallthrough
	case "invalid_issuer":
		fallthrough
	case "lost_card":
		fallthrough
	case "stolen_card":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "expired_card":
		fallthrough
	case "invalid_pin":
		fallthrough
	case "transaction_not_permitted_to_cardholder":
		fallthrough
	case "transaction_not_allowed_at_terminal":
		fallthrough
	case "exceeds_withdrawal_amount_limit":
		fallthrough
	case "restricted_card":
		fallthrough
	case "security_violation":
		fallthrough
	case "exceeds_withdrawal_count_limit":
		fallthrough
	case "allowable_number_of_pin_tries_exceeded":
		fallthrough
	case "no_reason_to_decline":
		fallthrough
	case "cannot_verify_pin":
		fallthrough
	case "issuer_unavailable":
		fallthrough
	case "unable_to_route_transaction":
		fallthrough
	case "duplicate_transaction":
		fallthrough
	case "system_malfunction":
		fallthrough
	case "honor_with_id":
		fallthrough
	case "invalid_card_number":
		fallthrough
	case "format_error":
		fallthrough
	case "contact_card_issuer":
		fallthrough
	case "pin_not_changed":
		fallthrough
	case "invalid_nonexistent_to_account_specified":
		fallthrough
	case "invalid_nonexistent_from_account_specified":
		fallthrough
	case "invalid_nonexistent_account_specified":
		fallthrough
	case "lifecycle_related":
		fallthrough
	case "domestic_debit_transaction_not_allowed":
		fallthrough
	case "policy_related":
		fallthrough
	case "fraud_security_related":
		fallthrough
	case "invalid_authorization_life_cycle":
		fallthrough
	case "purchase_amount_only_no_cash_back_allowed":
		fallthrough
	case "cryptographic_failure":
		fallthrough
	case "unacceptable_pin":
		fallthrough
	case "refer_to_card_issuer_special_condition":
		fallthrough
	case "pick_up_card_special_condition":
		fallthrough
	case "vip_approval":
		fallthrough
	case "invalid_account_number":
		fallthrough
	case "re_enter_transaction":
		fallthrough
	case "no_action_taken":
		fallthrough
	case "unable_to_locate_record":
		fallthrough
	case "file_temporarily_unavailable":
		fallthrough
	case "no_credit_account":
		fallthrough
	case "closed_account":
		fallthrough
	case "no_checking_account":
		fallthrough
	case "no_savings_account":
		fallthrough
	case "suspected_fraud":
		fallthrough
	case "transaction_does_not_fulfill_aml_requirement":
		fallthrough
	case "pin_data_required":
		fallthrough
	case "unable_to_locate_previous_message":
		fallthrough
	case "previous_message_located_inconsistent_data":
		fallthrough
	case "blocked_first_used":
		fallthrough
	case "transaction_reversed":
		fallthrough
	case "credit_issuer_unavailable":
		fallthrough
	case "pin_cryptographic_error_found":
		fallthrough
	case "negative_online_cam_result":
		fallthrough
	case "violation_of_law":
		fallthrough
	case "force_stip":
		fallthrough
	case "cash_service_not_available":
		fallthrough
	case "cashback_request_exceeds_issuer_limit":
		fallthrough
	case "decline_for_cvv2_failure":
		fallthrough
	case "transaction_amount_exceeds_pre_authorized_amount":
		fallthrough
	case "invalid_biller_information":
		fallthrough
	case "pin_change_unblock_request_declined":
		fallthrough
	case "unsafe_pin":
		fallthrough
	case "card_authentication_failed":
		fallthrough
	case "stop_payment_order":
		fallthrough
	case "revocation_of_authorization":
		fallthrough
	case "revocation_of_all_authorizations":
		fallthrough
	case "forward_to_issuer_xa":
		fallthrough
	case "forward_to_issuer_xd":
		fallthrough
	case "unable_to_go_online":
		fallthrough
	case "additional_customer_authentication_required":
		fallthrough
	case "merchant_id_not_found":
		fallthrough
	case "merchant_account_closed":
		fallthrough
	case "terminal_id_not_found":
		fallthrough
	case "terminal_closed":
		fallthrough
	case "invalid_category_code":
		fallthrough
	case "invalid_currency":
		fallthrough
	case "missing_cvv2_cvc2":
		fallthrough
	case "cvv2_not_allowed":
		fallthrough
	case "merchant_not_registered_vbv":
		fallthrough
	case "merchant_not_registered_for_amex":
		fallthrough
	case "transaction_not_permitted_at_terminal":
		fallthrough
	case "agreement_terminal_not_related":
		fallthrough
	case "invalid_processor_id":
		fallthrough
	case "invalid_merchant_data":
		fallthrough
	case "sub_merchant_account_closed":
		fallthrough
	case "terminal_busy":
		fallthrough
	case "terminal_unreachable":
		fallthrough
	case "service_failed":
		fallthrough
	case "invalid_operation":
		fallthrough
	case "authorization_error":
		fallthrough
	case "login_failed_without_reason":
		fallthrough
	case "invalid_retailer":
		fallthrough
	case "card_does_not_exist":
		fallthrough
	case "card_is_blocked":
		fallthrough
	case "invalid_card_id":
		fallthrough
	case "card_is_transferred":
		fallthrough
	case "card_is_not_active":
		fallthrough
	case "incorrect_purchase_value":
		fallthrough
	case "card_not_available":
		fallthrough
	case "wrong_currency":
		fallthrough
	case "login_failed_unknown_user":
		fallthrough
	case "login_failed_invalid_password":
		fallthrough
	case "invalid_ean_code":
		*e = GetPaymentLinkPaymentsCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsCode: %v", v)
	}
}

// GetPaymentLinkPaymentsStatusReason - This object offers details about the status of a payment. Currently it is only available for point-of-sale
// payments.
//
// You can find more information about the possible values of this object on
// [this page](status-reasons).**
type GetPaymentLinkPaymentsStatusReason struct {
	Code GetPaymentLinkPaymentsCode `json:"code"`
	// A description of the status reason, localized according to the payment `locale`.
	Message string `json:"message"`
}

func (o *GetPaymentLinkPaymentsStatusReason) GetCode() GetPaymentLinkPaymentsCode {
	if o == nil {
		return GetPaymentLinkPaymentsCode("")
	}
	return o.Code
}

func (o *GetPaymentLinkPaymentsStatusReason) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

// GetPaymentLinkPaymentsCardAudition - The card's target audience, if known.
type GetPaymentLinkPaymentsCardAudition string

const (
	GetPaymentLinkPaymentsCardAuditionConsumer GetPaymentLinkPaymentsCardAudition = "consumer"
	GetPaymentLinkPaymentsCardAuditionBusiness GetPaymentLinkPaymentsCardAudition = "business"
)

func (e GetPaymentLinkPaymentsCardAudition) ToPointer() *GetPaymentLinkPaymentsCardAudition {
	return &e
}
func (e *GetPaymentLinkPaymentsCardAudition) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "business":
		*e = GetPaymentLinkPaymentsCardAudition(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsCardAudition: %v", v)
	}
}

// GetPaymentLinkPaymentsCardLabel - The card's label, if known.
type GetPaymentLinkPaymentsCardLabel string

const (
	GetPaymentLinkPaymentsCardLabelAmericanExpress GetPaymentLinkPaymentsCardLabel = "American Express"
	GetPaymentLinkPaymentsCardLabelCartaSi         GetPaymentLinkPaymentsCardLabel = "Carta Si"
	GetPaymentLinkPaymentsCardLabelCarteBleue      GetPaymentLinkPaymentsCardLabel = "Carte Bleue"
	GetPaymentLinkPaymentsCardLabelDankort         GetPaymentLinkPaymentsCardLabel = "Dankort"
	GetPaymentLinkPaymentsCardLabelDinersClub      GetPaymentLinkPaymentsCardLabel = "Diners Club"
	GetPaymentLinkPaymentsCardLabelDiscover        GetPaymentLinkPaymentsCardLabel = "Discover"
	GetPaymentLinkPaymentsCardLabelJcb             GetPaymentLinkPaymentsCardLabel = "JCB"
	GetPaymentLinkPaymentsCardLabelLaser           GetPaymentLinkPaymentsCardLabel = "Laser"
	GetPaymentLinkPaymentsCardLabelMaestro         GetPaymentLinkPaymentsCardLabel = "Maestro"
	GetPaymentLinkPaymentsCardLabelMastercard      GetPaymentLinkPaymentsCardLabel = "Mastercard"
	GetPaymentLinkPaymentsCardLabelUnionpay        GetPaymentLinkPaymentsCardLabel = "Unionpay"
	GetPaymentLinkPaymentsCardLabelVisa            GetPaymentLinkPaymentsCardLabel = "Visa"
	GetPaymentLinkPaymentsCardLabelVpay            GetPaymentLinkPaymentsCardLabel = "Vpay"
)

func (e GetPaymentLinkPaymentsCardLabel) ToPointer() *GetPaymentLinkPaymentsCardLabel {
	return &e
}
func (e *GetPaymentLinkPaymentsCardLabel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "American Express":
		fallthrough
	case "Carta Si":
		fallthrough
	case "Carte Bleue":
		fallthrough
	case "Dankort":
		fallthrough
	case "Diners Club":
		fallthrough
	case "Discover":
		fallthrough
	case "JCB":
		fallthrough
	case "Laser":
		fallthrough
	case "Maestro":
		fallthrough
	case "Mastercard":
		fallthrough
	case "Unionpay":
		fallthrough
	case "Visa":
		fallthrough
	case "Vpay":
		*e = GetPaymentLinkPaymentsCardLabel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsCardLabel: %v", v)
	}
}

// GetPaymentLinkPaymentsCardFunding - The card type.
type GetPaymentLinkPaymentsCardFunding string

const (
	GetPaymentLinkPaymentsCardFundingDebit         GetPaymentLinkPaymentsCardFunding = "debit"
	GetPaymentLinkPaymentsCardFundingCredit        GetPaymentLinkPaymentsCardFunding = "credit"
	GetPaymentLinkPaymentsCardFundingPrepaid       GetPaymentLinkPaymentsCardFunding = "prepaid"
	GetPaymentLinkPaymentsCardFundingDeferredDebit GetPaymentLinkPaymentsCardFunding = "deferred-debit"
)

func (e GetPaymentLinkPaymentsCardFunding) ToPointer() *GetPaymentLinkPaymentsCardFunding {
	return &e
}
func (e *GetPaymentLinkPaymentsCardFunding) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debit":
		fallthrough
	case "credit":
		fallthrough
	case "prepaid":
		fallthrough
	case "deferred-debit":
		*e = GetPaymentLinkPaymentsCardFunding(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsCardFunding: %v", v)
	}
}

// GetPaymentLinkPaymentsCardSecurity - The level of security applied during card processing.
type GetPaymentLinkPaymentsCardSecurity string

const (
	GetPaymentLinkPaymentsCardSecurityNormal       GetPaymentLinkPaymentsCardSecurity = "normal"
	GetPaymentLinkPaymentsCardSecurityThreedsecure GetPaymentLinkPaymentsCardSecurity = "3dsecure"
)

func (e GetPaymentLinkPaymentsCardSecurity) ToPointer() *GetPaymentLinkPaymentsCardSecurity {
	return &e
}
func (e *GetPaymentLinkPaymentsCardSecurity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "normal":
		fallthrough
	case "3dsecure":
		*e = GetPaymentLinkPaymentsCardSecurity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsCardSecurity: %v", v)
	}
}

// GetPaymentLinkPaymentsFeeRegion - The applicable card fee region.
type GetPaymentLinkPaymentsFeeRegion string

const (
	GetPaymentLinkPaymentsFeeRegionAmericanExpress  GetPaymentLinkPaymentsFeeRegion = "american-express"
	GetPaymentLinkPaymentsFeeRegionAmexIntraEea     GetPaymentLinkPaymentsFeeRegion = "amex-intra-eea"
	GetPaymentLinkPaymentsFeeRegionCarteBancaire    GetPaymentLinkPaymentsFeeRegion = "carte-bancaire"
	GetPaymentLinkPaymentsFeeRegionIntraEu          GetPaymentLinkPaymentsFeeRegion = "intra-eu"
	GetPaymentLinkPaymentsFeeRegionIntraEuCorporate GetPaymentLinkPaymentsFeeRegion = "intra-eu-corporate"
	GetPaymentLinkPaymentsFeeRegionDomestic         GetPaymentLinkPaymentsFeeRegion = "domestic"
	GetPaymentLinkPaymentsFeeRegionMaestro          GetPaymentLinkPaymentsFeeRegion = "maestro"
	GetPaymentLinkPaymentsFeeRegionOther            GetPaymentLinkPaymentsFeeRegion = "other"
	GetPaymentLinkPaymentsFeeRegionInter            GetPaymentLinkPaymentsFeeRegion = "inter"
	GetPaymentLinkPaymentsFeeRegionIntraEea         GetPaymentLinkPaymentsFeeRegion = "intra_eea"
)

func (e GetPaymentLinkPaymentsFeeRegion) ToPointer() *GetPaymentLinkPaymentsFeeRegion {
	return &e
}
func (e *GetPaymentLinkPaymentsFeeRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "american-express":
		fallthrough
	case "amex-intra-eea":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "intra-eu":
		fallthrough
	case "intra-eu-corporate":
		fallthrough
	case "domestic":
		fallthrough
	case "maestro":
		fallthrough
	case "other":
		fallthrough
	case "inter":
		fallthrough
	case "intra_eea":
		*e = GetPaymentLinkPaymentsFeeRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsFeeRegion: %v", v)
	}
}

// GetPaymentLinkPaymentsFailureReason - A failure code to help understand why the payment failed.
type GetPaymentLinkPaymentsFailureReason string

const (
	GetPaymentLinkPaymentsFailureReasonAuthenticationAbandoned      GetPaymentLinkPaymentsFailureReason = "authentication_abandoned"
	GetPaymentLinkPaymentsFailureReasonAuthenticationFailed         GetPaymentLinkPaymentsFailureReason = "authentication_failed"
	GetPaymentLinkPaymentsFailureReasonAuthenticationRequired       GetPaymentLinkPaymentsFailureReason = "authentication_required"
	GetPaymentLinkPaymentsFailureReasonAuthenticationUnavailableAcs GetPaymentLinkPaymentsFailureReason = "authentication_unavailable_acs"
	GetPaymentLinkPaymentsFailureReasonCardDeclined                 GetPaymentLinkPaymentsFailureReason = "card_declined"
	GetPaymentLinkPaymentsFailureReasonCardExpired                  GetPaymentLinkPaymentsFailureReason = "card_expired"
	GetPaymentLinkPaymentsFailureReasonInactiveCard                 GetPaymentLinkPaymentsFailureReason = "inactive_card"
	GetPaymentLinkPaymentsFailureReasonInsufficientFunds            GetPaymentLinkPaymentsFailureReason = "insufficient_funds"
	GetPaymentLinkPaymentsFailureReasonInvalidCvv                   GetPaymentLinkPaymentsFailureReason = "invalid_cvv"
	GetPaymentLinkPaymentsFailureReasonInvalidCardHolderName        GetPaymentLinkPaymentsFailureReason = "invalid_card_holder_name"
	GetPaymentLinkPaymentsFailureReasonInvalidCardNumber            GetPaymentLinkPaymentsFailureReason = "invalid_card_number"
	GetPaymentLinkPaymentsFailureReasonInvalidCardType              GetPaymentLinkPaymentsFailureReason = "invalid_card_type"
	GetPaymentLinkPaymentsFailureReasonPossibleFraud                GetPaymentLinkPaymentsFailureReason = "possible_fraud"
	GetPaymentLinkPaymentsFailureReasonRefusedByIssuer              GetPaymentLinkPaymentsFailureReason = "refused_by_issuer"
	GetPaymentLinkPaymentsFailureReasonUnknownReason                GetPaymentLinkPaymentsFailureReason = "unknown_reason"
)

func (e GetPaymentLinkPaymentsFailureReason) ToPointer() *GetPaymentLinkPaymentsFailureReason {
	return &e
}
func (e *GetPaymentLinkPaymentsFailureReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "authentication_abandoned":
		fallthrough
	case "authentication_failed":
		fallthrough
	case "authentication_required":
		fallthrough
	case "authentication_unavailable_acs":
		fallthrough
	case "card_declined":
		fallthrough
	case "card_expired":
		fallthrough
	case "inactive_card":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "invalid_cvv":
		fallthrough
	case "invalid_card_holder_name":
		fallthrough
	case "invalid_card_number":
		fallthrough
	case "invalid_card_type":
		fallthrough
	case "possible_fraud":
		fallthrough
	case "refused_by_issuer":
		fallthrough
	case "unknown_reason":
		*e = GetPaymentLinkPaymentsFailureReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsFailureReason: %v", v)
	}
}

// GetPaymentLinkPaymentsWallet - The wallet used when creating the payment.
type GetPaymentLinkPaymentsWallet string

const (
	GetPaymentLinkPaymentsWalletApplepay GetPaymentLinkPaymentsWallet = "applepay"
)

func (e GetPaymentLinkPaymentsWallet) ToPointer() *GetPaymentLinkPaymentsWallet {
	return &e
}
func (e *GetPaymentLinkPaymentsWallet) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "applepay":
		*e = GetPaymentLinkPaymentsWallet(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsWallet: %v", v)
	}
}

// GetPaymentLinkPaymentsSellerProtection - Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
// payments, and if the information is made available by PayPal.
type GetPaymentLinkPaymentsSellerProtection string

const (
	GetPaymentLinkPaymentsSellerProtectionEligible                          GetPaymentLinkPaymentsSellerProtection = "Eligible"
	GetPaymentLinkPaymentsSellerProtectionIneligible                        GetPaymentLinkPaymentsSellerProtection = "Ineligible"
	GetPaymentLinkPaymentsSellerProtectionPartiallyEligibleInrOnly          GetPaymentLinkPaymentsSellerProtection = "Partially Eligible - INR Only"
	GetPaymentLinkPaymentsSellerProtectionPartiallyEligibleUnauthOnly       GetPaymentLinkPaymentsSellerProtection = "Partially Eligible - Unauth Only"
	GetPaymentLinkPaymentsSellerProtectionPartiallyEligible                 GetPaymentLinkPaymentsSellerProtection = "Partially Eligible"
	GetPaymentLinkPaymentsSellerProtectionNone                              GetPaymentLinkPaymentsSellerProtection = "None"
	GetPaymentLinkPaymentsSellerProtectionActive                            GetPaymentLinkPaymentsSellerProtection = "Active"
	GetPaymentLinkPaymentsSellerProtectionFraudControlUnauthPremiumEligible GetPaymentLinkPaymentsSellerProtection = "Fraud Control - Unauth Premium Eligible"
)

func (e GetPaymentLinkPaymentsSellerProtection) ToPointer() *GetPaymentLinkPaymentsSellerProtection {
	return &e
}
func (e *GetPaymentLinkPaymentsSellerProtection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Eligible":
		fallthrough
	case "Ineligible":
		fallthrough
	case "Partially Eligible - INR Only":
		fallthrough
	case "Partially Eligible - Unauth Only":
		fallthrough
	case "Partially Eligible":
		fallthrough
	case "None":
		fallthrough
	case "Active":
		fallthrough
	case "Fraud Control - Unauth Premium Eligible":
		*e = GetPaymentLinkPaymentsSellerProtection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsSellerProtection: %v", v)
	}
}

// GetPaymentLinkPaymentsPaypalFee - An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
// PayPal will not charge a fee for this transaction.
type GetPaymentLinkPaymentsPaypalFee struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkPaymentsPaypalFee) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkPaymentsPaypalFee) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkPaymentsCardReadMethod - The method by which the card was read by the terminal.
type GetPaymentLinkPaymentsCardReadMethod string

const (
	GetPaymentLinkPaymentsCardReadMethodChip                   GetPaymentLinkPaymentsCardReadMethod = "chip"
	GetPaymentLinkPaymentsCardReadMethodMagneticStripe         GetPaymentLinkPaymentsCardReadMethod = "magnetic-stripe"
	GetPaymentLinkPaymentsCardReadMethodNearFieldCommunication GetPaymentLinkPaymentsCardReadMethod = "near-field-communication"
	GetPaymentLinkPaymentsCardReadMethodContactless            GetPaymentLinkPaymentsCardReadMethod = "contactless"
	GetPaymentLinkPaymentsCardReadMethodMoto                   GetPaymentLinkPaymentsCardReadMethod = "moto"
)

func (e GetPaymentLinkPaymentsCardReadMethod) ToPointer() *GetPaymentLinkPaymentsCardReadMethod {
	return &e
}
func (e *GetPaymentLinkPaymentsCardReadMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "chip":
		fallthrough
	case "magnetic-stripe":
		fallthrough
	case "near-field-communication":
		fallthrough
	case "contactless":
		fallthrough
	case "moto":
		*e = GetPaymentLinkPaymentsCardReadMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsCardReadMethod: %v", v)
	}
}

// GetPaymentLinkPaymentsCardVerificationMethod - The method used to verify the cardholder's identity.
type GetPaymentLinkPaymentsCardVerificationMethod string

const (
	GetPaymentLinkPaymentsCardVerificationMethodNoCvmRequired         GetPaymentLinkPaymentsCardVerificationMethod = "no-cvm-required"
	GetPaymentLinkPaymentsCardVerificationMethodOnlinePin             GetPaymentLinkPaymentsCardVerificationMethod = "online-pin"
	GetPaymentLinkPaymentsCardVerificationMethodOfflinePin            GetPaymentLinkPaymentsCardVerificationMethod = "offline-pin"
	GetPaymentLinkPaymentsCardVerificationMethodConsumerDevice        GetPaymentLinkPaymentsCardVerificationMethod = "consumer-device"
	GetPaymentLinkPaymentsCardVerificationMethodSignature             GetPaymentLinkPaymentsCardVerificationMethod = "signature"
	GetPaymentLinkPaymentsCardVerificationMethodSignatureAndOnlinePin GetPaymentLinkPaymentsCardVerificationMethod = "signature-and-online-pin"
	GetPaymentLinkPaymentsCardVerificationMethodOnlinePinAndSignature GetPaymentLinkPaymentsCardVerificationMethod = "online-pin-and-signature"
	GetPaymentLinkPaymentsCardVerificationMethodNone                  GetPaymentLinkPaymentsCardVerificationMethod = "none"
	GetPaymentLinkPaymentsCardVerificationMethodFailed                GetPaymentLinkPaymentsCardVerificationMethod = "failed"
)

func (e GetPaymentLinkPaymentsCardVerificationMethod) ToPointer() *GetPaymentLinkPaymentsCardVerificationMethod {
	return &e
}
func (e *GetPaymentLinkPaymentsCardVerificationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "no-cvm-required":
		fallthrough
	case "online-pin":
		fallthrough
	case "offline-pin":
		fallthrough
	case "consumer-device":
		fallthrough
	case "signature":
		fallthrough
	case "signature-and-online-pin":
		fallthrough
	case "online-pin-and-signature":
		fallthrough
	case "none":
		fallthrough
	case "failed":
		*e = GetPaymentLinkPaymentsCardVerificationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentLinkPaymentsCardVerificationMethod: %v", v)
	}
}

// GetPaymentLinkPaymentsReceipt - The Point of sale receipt object.
type GetPaymentLinkPaymentsReceipt struct {
	// A unique code provided by the cardholderâ€™s bank to confirm that the transaction was successfully approved.
	AuthorizationCode *string `json:"authorizationCode,omitempty"`
	// The unique number that identifies a specific payment application on a chip card.
	ApplicationIdentifier *string `json:"applicationIdentifier,omitempty"`
	// The method by which the card was read by the terminal.
	CardReadMethod *GetPaymentLinkPaymentsCardReadMethod `json:"cardReadMethod,omitempty"`
	// The method used to verify the cardholder's identity.
	CardVerificationMethod *GetPaymentLinkPaymentsCardVerificationMethod `json:"cardVerificationMethod,omitempty"`
}

func (o *GetPaymentLinkPaymentsReceipt) GetAuthorizationCode() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizationCode
}

func (o *GetPaymentLinkPaymentsReceipt) GetApplicationIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationIdentifier
}

func (o *GetPaymentLinkPaymentsReceipt) GetCardReadMethod() *GetPaymentLinkPaymentsCardReadMethod {
	if o == nil {
		return nil
	}
	return o.CardReadMethod
}

func (o *GetPaymentLinkPaymentsReceipt) GetCardVerificationMethod() *GetPaymentLinkPaymentsCardVerificationMethod {
	if o == nil {
		return nil
	}
	return o.CardVerificationMethod
}

// GetPaymentLinkPaymentsQrCode - Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
// the QR code details will be available in this object.
//
// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
// Bancontact QR payments can be completed by the customer using the Bancontact app.
type GetPaymentLinkPaymentsQrCode struct {
	// The height of the QR code image in pixels.
	Height *int64 `json:"height,omitempty"`
	// The width of the QR code image in pixels.
	Width *int64 `json:"width,omitempty"`
	// The URL to the QR code image. The image is a PNG file, and can be displayed directly in the browser or
	// downloaded.
	Src *string `json:"src,omitempty"`
}

func (o *GetPaymentLinkPaymentsQrCode) GetHeight() *int64 {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *GetPaymentLinkPaymentsQrCode) GetWidth() *int64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *GetPaymentLinkPaymentsQrCode) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

// GetPaymentLinkPaymentsRemainderAmount - An amount object for the amount that remained after all gift cards or vouchers were applied.
type GetPaymentLinkPaymentsRemainderAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkPaymentsRemainderAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkPaymentsRemainderAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkPaymentsDetails - An object containing payment details collected during the payment process. For example, details may include the
// customer's card or bank details and a payment reference. For the full list of details, please refer to the
// [method-specific parameters](extra-payment-parameters) guide.
type GetPaymentLinkPaymentsDetails struct {
	// The customer's name, if made available by the payment method. For card payments, refer to details.cardHolder.
	ConsumerName *string `json:"consumerName,omitempty"`
	// The customer's account reference.
	//
	// For banking-based payment methods â€” such as iDEAL â€” this is normally either an IBAN or a domestic bank account
	// number.
	//
	// For PayPal, the account reference is an email address.
	//
	// For card and Bancontact payments, refer to details.cardNumber.
	ConsumerAccount *string `json:"consumerAccount,omitempty"`
	// The BIC of the customer's bank account, if applicable.
	ConsumerBic *string `json:"consumerBic,omitempty"`
	// For wallet payment methods â€” such as Apple Pay and PayPal â€” the shipping address is often already known by the
	// wallet provider. In these cases the shipping address may be available as a payment detail.
	ShippingAddress map[string]any `json:"shippingAddress,omitempty"`
	// For bancontact, it will be the customer's masked card number. For cards, it will be the last 4-digit of the
	// PAN. For Point-of-sale, it will be the the last 4 digits of the customer's masked card number.
	CardNumber *string `json:"cardNumber,omitempty"`
	// The name of the bank that the customer will need to make the bank transfer payment towards.
	BankName *string `json:"bankName,omitempty"`
	// The bank account number the customer will need to make the bank transfer payment towards.
	BankAccount *string `json:"bankAccount,omitempty"`
	// The BIC of the bank the customer will need to make the bank transfer payment towards.
	BankBic *string `json:"bankBic,omitempty"`
	// The Mollie-generated reference the customer needs to use when transfering the amount. Do not apply any
	// formatting here; show it to the customer as-is.
	TransferReference *string `json:"transferReference,omitempty"`
	// A unique fingerprint for a specific card. Can be used to identify returning customers.
	//
	// In the case of Point-of-sale payments, it's a unique identifier assigned to a cardholder's payment account,
	// linking multiple transactions from wallets and physical card to a single account, also across payment methods
	// or when the card is reissued.
	CardFingerprint *string `json:"cardFingerprint,omitempty"`
	// The customer's name as shown on their card.
	CardHolder *string `json:"cardHolder,omitempty"`
	// The card's target audience, if known.
	CardAudition *GetPaymentLinkPaymentsCardAudition `json:"cardAudition,omitempty"`
	// The card's label, if known.
	CardLabel *GetPaymentLinkPaymentsCardLabel `json:"cardLabel,omitempty"`
	// The ISO 3166-1 alpha-2 country code of the country the card was issued in.
	CardCountryCode *string `json:"cardCountryCode,omitempty"`
	// The expiry date (MM/YY) of the card as displayed on the card.
	CardExpiryDate *string `json:"cardExpiryDate,omitempty"`
	// The card type.
	CardFunding *GetPaymentLinkPaymentsCardFunding `json:"cardFunding,omitempty"`
	// The level of security applied during card processing.
	CardSecurity *GetPaymentLinkPaymentsCardSecurity `json:"cardSecurity,omitempty"`
	// The applicable card fee region.
	FeeRegion *GetPaymentLinkPaymentsFeeRegion `json:"feeRegion,omitempty"`
	// The first 6 and last 4 digits of the card number.
	CardMaskedNumber *string `json:"cardMaskedNumber,omitempty"`
	// The outcome of authentication attempted on transactions enforced by 3DS (ie valid only for oneoff and first).
	Card3dsEci *string `json:"card3dsEci,omitempty"`
	// The first 6 digit of the card bank identification number.
	CardBin *string `json:"cardBin,omitempty"`
	// The issuer of the Card.
	CardIssuer *string `json:"cardIssuer,omitempty"`
	// A failure code to help understand why the payment failed.
	FailureReason *GetPaymentLinkPaymentsFailureReason `json:"failureReason,omitempty"`
	// A human-friendly failure message that can be shown to the customer. The message is translated in accordance
	// with the payment's locale setting.
	FailureMessage *string `json:"failureMessage,omitempty"`
	// The wallet used when creating the payment.
	Wallet *GetPaymentLinkPaymentsWallet `json:"wallet,omitempty"`
	// PayPal's reference for the payment.
	PaypalReference *string `json:"paypalReference,omitempty"`
	// ID of the customer's PayPal account.
	PaypalPayerID *string `json:"paypalPayerId,omitempty"`
	// Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
	// payments, and if the information is made available by PayPal.
	SellerProtection *GetPaymentLinkPaymentsSellerProtection `json:"sellerProtection,omitempty"`
	// An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
	// PayPal will not charge a fee for this transaction.
	PaypalFee *GetPaymentLinkPaymentsPaypalFee `json:"paypalFee,omitempty"`
	// The paysafecard customer reference either provided via the API or otherwise auto-generated by Mollie.
	CustomerReference *string `json:"customerReference,omitempty"`
	// The ID of the terminal device where the payment took place on.
	TerminalID *string `json:"terminalId,omitempty"`
	// The first 6 digits & last 4 digits of the customer's masked card number.
	MaskedNumber *string `json:"maskedNumber,omitempty"`
	// The Point of sale receipt object.
	Receipt *GetPaymentLinkPaymentsReceipt `json:"receipt,omitempty"`
	// The creditor identifier indicates who is authorized to execute the payment. In this case, it is a
	// reference to Mollie.
	CreditorIdentifier *string `json:"creditorIdentifier,omitempty"`
	// Estimated date the payment is debited from the customer's bank account, in YYYY-MM-DD format.
	DueDate *types.Date `json:"dueDate,omitempty"`
	// Date the payment has been signed by the customer, in YYYY-MM-DD format. Only available if the payment
	// has been signed.
	SignatureDate *types.Date `json:"signatureDate,omitempty"`
	// The official reason why this payment has failed. A detailed description of each reason is available on the
	// website of the European Payments Council.
	BankReasonCode *string `json:"bankReasonCode,omitempty"`
	// A human-friendly description of the failure reason.
	BankReason *string `json:"bankReason,omitempty"`
	// The end-to-end identifier you provided in the batch file.
	EndToEndIdentifier *string `json:"endToEndIdentifier,omitempty"`
	// The mandate reference you provided in the batch file.
	MandateReference *string `json:"mandateReference,omitempty"`
	// The batch reference you provided in the batch file.
	BatchReference *string `json:"batchReference,omitempty"`
	// The file reference you provided in the batch file.
	FileReference *string `json:"fileReference,omitempty"`
	// Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
	// the QR code details will be available in this object.
	//
	// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
	// Bancontact QR payments can be completed by the customer using the Bancontact app.
	QrCode *GetPaymentLinkPaymentsQrCode `json:"qrCode,omitempty"`
	// For payments with gift cards: the masked gift card number of the first gift card applied to the payment.
	VoucherNumber *string `json:"voucherNumber,omitempty"`
	// An array of detail objects for each gift card that was used on this payment, if any.
	Giftcards []map[string]any `json:"giftcards,omitempty"`
	// For payments with vouchers: the brand name of the first voucher applied.
	Issuer *string `json:"issuer,omitempty"`
	// An array of detail objects for each voucher that was used on this payment, if any.
	Vouchers []map[string]any `json:"vouchers,omitempty"`
	// An amount object for the amount that remained after all gift cards or vouchers were applied.
	RemainderAmount *GetPaymentLinkPaymentsRemainderAmount `json:"remainderAmount,omitempty"`
	// The payment method used to pay the remainder amount, after all gift cards or vouchers were applied.
	RemainderMethod *string `json:"remainderMethod,omitempty"`
	// Optional include. The full payment method details of the remainder payment.
	RemainderDetails map[string]any `json:"remainderDetails,omitempty"`
}

func (g GetPaymentLinkPaymentsDetails) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetPaymentLinkPaymentsDetails) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetPaymentLinkPaymentsDetails) GetConsumerName() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerName
}

func (o *GetPaymentLinkPaymentsDetails) GetConsumerAccount() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerAccount
}

func (o *GetPaymentLinkPaymentsDetails) GetConsumerBic() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerBic
}

func (o *GetPaymentLinkPaymentsDetails) GetShippingAddress() map[string]any {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *GetPaymentLinkPaymentsDetails) GetCardNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardNumber
}

func (o *GetPaymentLinkPaymentsDetails) GetBankName() *string {
	if o == nil {
		return nil
	}
	return o.BankName
}

func (o *GetPaymentLinkPaymentsDetails) GetBankAccount() *string {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *GetPaymentLinkPaymentsDetails) GetBankBic() *string {
	if o == nil {
		return nil
	}
	return o.BankBic
}

func (o *GetPaymentLinkPaymentsDetails) GetTransferReference() *string {
	if o == nil {
		return nil
	}
	return o.TransferReference
}

func (o *GetPaymentLinkPaymentsDetails) GetCardFingerprint() *string {
	if o == nil {
		return nil
	}
	return o.CardFingerprint
}

func (o *GetPaymentLinkPaymentsDetails) GetCardHolder() *string {
	if o == nil {
		return nil
	}
	return o.CardHolder
}

func (o *GetPaymentLinkPaymentsDetails) GetCardAudition() *GetPaymentLinkPaymentsCardAudition {
	if o == nil {
		return nil
	}
	return o.CardAudition
}

func (o *GetPaymentLinkPaymentsDetails) GetCardLabel() *GetPaymentLinkPaymentsCardLabel {
	if o == nil {
		return nil
	}
	return o.CardLabel
}

func (o *GetPaymentLinkPaymentsDetails) GetCardCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CardCountryCode
}

func (o *GetPaymentLinkPaymentsDetails) GetCardExpiryDate() *string {
	if o == nil {
		return nil
	}
	return o.CardExpiryDate
}

func (o *GetPaymentLinkPaymentsDetails) GetCardFunding() *GetPaymentLinkPaymentsCardFunding {
	if o == nil {
		return nil
	}
	return o.CardFunding
}

func (o *GetPaymentLinkPaymentsDetails) GetCardSecurity() *GetPaymentLinkPaymentsCardSecurity {
	if o == nil {
		return nil
	}
	return o.CardSecurity
}

func (o *GetPaymentLinkPaymentsDetails) GetFeeRegion() *GetPaymentLinkPaymentsFeeRegion {
	if o == nil {
		return nil
	}
	return o.FeeRegion
}

func (o *GetPaymentLinkPaymentsDetails) GetCardMaskedNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardMaskedNumber
}

func (o *GetPaymentLinkPaymentsDetails) GetCard3dsEci() *string {
	if o == nil {
		return nil
	}
	return o.Card3dsEci
}

func (o *GetPaymentLinkPaymentsDetails) GetCardBin() *string {
	if o == nil {
		return nil
	}
	return o.CardBin
}

func (o *GetPaymentLinkPaymentsDetails) GetCardIssuer() *string {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *GetPaymentLinkPaymentsDetails) GetFailureReason() *GetPaymentLinkPaymentsFailureReason {
	if o == nil {
		return nil
	}
	return o.FailureReason
}

func (o *GetPaymentLinkPaymentsDetails) GetFailureMessage() *string {
	if o == nil {
		return nil
	}
	return o.FailureMessage
}

func (o *GetPaymentLinkPaymentsDetails) GetWallet() *GetPaymentLinkPaymentsWallet {
	if o == nil {
		return nil
	}
	return o.Wallet
}

func (o *GetPaymentLinkPaymentsDetails) GetPaypalReference() *string {
	if o == nil {
		return nil
	}
	return o.PaypalReference
}

func (o *GetPaymentLinkPaymentsDetails) GetPaypalPayerID() *string {
	if o == nil {
		return nil
	}
	return o.PaypalPayerID
}

func (o *GetPaymentLinkPaymentsDetails) GetSellerProtection() *GetPaymentLinkPaymentsSellerProtection {
	if o == nil {
		return nil
	}
	return o.SellerProtection
}

func (o *GetPaymentLinkPaymentsDetails) GetPaypalFee() *GetPaymentLinkPaymentsPaypalFee {
	if o == nil {
		return nil
	}
	return o.PaypalFee
}

func (o *GetPaymentLinkPaymentsDetails) GetCustomerReference() *string {
	if o == nil {
		return nil
	}
	return o.CustomerReference
}

func (o *GetPaymentLinkPaymentsDetails) GetTerminalID() *string {
	if o == nil {
		return nil
	}
	return o.TerminalID
}

func (o *GetPaymentLinkPaymentsDetails) GetMaskedNumber() *string {
	if o == nil {
		return nil
	}
	return o.MaskedNumber
}

func (o *GetPaymentLinkPaymentsDetails) GetReceipt() *GetPaymentLinkPaymentsReceipt {
	if o == nil {
		return nil
	}
	return o.Receipt
}

func (o *GetPaymentLinkPaymentsDetails) GetCreditorIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.CreditorIdentifier
}

func (o *GetPaymentLinkPaymentsDetails) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *GetPaymentLinkPaymentsDetails) GetSignatureDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.SignatureDate
}

func (o *GetPaymentLinkPaymentsDetails) GetBankReasonCode() *string {
	if o == nil {
		return nil
	}
	return o.BankReasonCode
}

func (o *GetPaymentLinkPaymentsDetails) GetBankReason() *string {
	if o == nil {
		return nil
	}
	return o.BankReason
}

func (o *GetPaymentLinkPaymentsDetails) GetEndToEndIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.EndToEndIdentifier
}

func (o *GetPaymentLinkPaymentsDetails) GetMandateReference() *string {
	if o == nil {
		return nil
	}
	return o.MandateReference
}

func (o *GetPaymentLinkPaymentsDetails) GetBatchReference() *string {
	if o == nil {
		return nil
	}
	return o.BatchReference
}

func (o *GetPaymentLinkPaymentsDetails) GetFileReference() *string {
	if o == nil {
		return nil
	}
	return o.FileReference
}

func (o *GetPaymentLinkPaymentsDetails) GetQrCode() *GetPaymentLinkPaymentsQrCode {
	if o == nil {
		return nil
	}
	return o.QrCode
}

func (o *GetPaymentLinkPaymentsDetails) GetVoucherNumber() *string {
	if o == nil {
		return nil
	}
	return o.VoucherNumber
}

func (o *GetPaymentLinkPaymentsDetails) GetGiftcards() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Giftcards
}

func (o *GetPaymentLinkPaymentsDetails) GetIssuer() *string {
	if o == nil {
		return nil
	}
	return o.Issuer
}

func (o *GetPaymentLinkPaymentsDetails) GetVouchers() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Vouchers
}

func (o *GetPaymentLinkPaymentsDetails) GetRemainderAmount() *GetPaymentLinkPaymentsRemainderAmount {
	if o == nil {
		return nil
	}
	return o.RemainderAmount
}

func (o *GetPaymentLinkPaymentsDetails) GetRemainderMethod() *string {
	if o == nil {
		return nil
	}
	return o.RemainderMethod
}

func (o *GetPaymentLinkPaymentsDetails) GetRemainderDetails() map[string]any {
	if o == nil {
		return nil
	}
	return o.RemainderDetails
}

// GetPaymentLinkPaymentsPaymentSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetPaymentLinkPaymentsPaymentSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsPaymentSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsPaymentSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsCheckout - The URL your customer should visit to make the payment. This is where you should redirect the customer to.
type GetPaymentLinkPaymentsCheckout struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsCheckout) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsCheckout) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsMobileAppCheckout - The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
type GetPaymentLinkPaymentsMobileAppCheckout struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsMobileAppCheckout) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsMobileAppCheckout) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsChangePaymentState - For test mode payments in certain scenarios, a hosted interface is available to help you test different
// payment states.
//
// Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
// payments are executed without any user interaction.
//
// Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
// chargeback for the test payment.
type GetPaymentLinkPaymentsChangePaymentState struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsChangePaymentState) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsChangePaymentState) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsDashboard - Direct link to the payment in the Mollie Dashboard.
type GetPaymentLinkPaymentsDashboard struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsDashboard) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsDashboard) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsRefunds - The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
type GetPaymentLinkPaymentsRefunds struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsRefunds) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsRefunds) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsChargebacks - The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
// payment.
type GetPaymentLinkPaymentsChargebacks struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsChargebacks) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsChargebacks) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsCaptures - The API resource URL of the [captures](list-payment-captures) that belong to this payment.
type GetPaymentLinkPaymentsCaptures struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsCaptures) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsCaptures) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsSettlement - The API resource URL of the [settlement](get-settlement) this payment has been settled with.
// Not present if not yet settled.
type GetPaymentLinkPaymentsSettlement struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsSettlement) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsSettlement) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsCustomer - The API resource URL of the [customer](get-customer).
type GetPaymentLinkPaymentsCustomer struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsCustomer) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsCustomer) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsMandate - The API resource URL of the [mandate](get-mandate).
type GetPaymentLinkPaymentsMandate struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsMandate) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsMandate) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsSubscription - The API resource URL of the [subscription](get-subscription).
type GetPaymentLinkPaymentsSubscription struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsSubscription) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsSubscription) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsOrder - The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
// order.
type GetPaymentLinkPaymentsOrder struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsOrder) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsOrder) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsTerminal - The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
// point-of-sale payments.
type GetPaymentLinkPaymentsTerminal struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsTerminal) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsTerminal) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsPaymentDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetPaymentLinkPaymentsPaymentDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsPaymentDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsPaymentDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsLinksStatus - Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
// successful).
type GetPaymentLinkPaymentsLinksStatus struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsLinksStatus) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsLinksStatus) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsPayOnline - Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
// bank transfer.
type GetPaymentLinkPaymentsPayOnline struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsPayOnline) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsPayOnline) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsPaymentLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetPaymentLinkPaymentsPaymentLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self GetPaymentLinkPaymentsPaymentSelf `json:"self"`
	// The URL your customer should visit to make the payment. This is where you should redirect the customer to.
	Checkout *GetPaymentLinkPaymentsCheckout `json:"checkout,omitempty"`
	// The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
	MobileAppCheckout *GetPaymentLinkPaymentsMobileAppCheckout `json:"mobileAppCheckout,omitempty"`
	// For test mode payments in certain scenarios, a hosted interface is available to help you test different
	// payment states.
	//
	// Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
	// payments are executed without any user interaction.
	//
	// Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
	// chargeback for the test payment.
	ChangePaymentState *GetPaymentLinkPaymentsChangePaymentState `json:"changePaymentState,omitempty"`
	// Direct link to the payment in the Mollie Dashboard.
	Dashboard GetPaymentLinkPaymentsDashboard `json:"dashboard"`
	// The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
	Refunds *GetPaymentLinkPaymentsRefunds `json:"refunds,omitempty"`
	// The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
	// payment.
	Chargebacks *GetPaymentLinkPaymentsChargebacks `json:"chargebacks,omitempty"`
	// The API resource URL of the [captures](list-payment-captures) that belong to this payment.
	Captures *GetPaymentLinkPaymentsCaptures `json:"captures,omitempty"`
	// The API resource URL of the [settlement](get-settlement) this payment has been settled with.
	// Not present if not yet settled.
	Settlement *GetPaymentLinkPaymentsSettlement `json:"settlement,omitempty"`
	// The API resource URL of the [customer](get-customer).
	Customer *GetPaymentLinkPaymentsCustomer `json:"customer,omitempty"`
	// The API resource URL of the [mandate](get-mandate).
	Mandate *GetPaymentLinkPaymentsMandate `json:"mandate,omitempty"`
	// The API resource URL of the [subscription](get-subscription).
	Subscription *GetPaymentLinkPaymentsSubscription `json:"subscription,omitempty"`
	// The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
	// order.
	Order *GetPaymentLinkPaymentsOrder `json:"order,omitempty"`
	// The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
	// point-of-sale payments.
	Terminal *GetPaymentLinkPaymentsTerminal `json:"terminal,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *GetPaymentLinkPaymentsPaymentDocumentation `json:"documentation,omitempty"`
	// Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
	// successful).
	Status *GetPaymentLinkPaymentsLinksStatus `json:"status,omitempty"`
	// Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
	// bank transfer.
	PayOnline *GetPaymentLinkPaymentsPayOnline `json:"payOnline,omitempty"`
}

func (o *GetPaymentLinkPaymentsPaymentLinks) GetSelf() GetPaymentLinkPaymentsPaymentSelf {
	if o == nil {
		return GetPaymentLinkPaymentsPaymentSelf{}
	}
	return o.Self
}

func (o *GetPaymentLinkPaymentsPaymentLinks) GetCheckout() *GetPaymentLinkPaymentsCheckout {
	if o == nil {
		return nil
	}
	return o.Checkout
}

func (o *GetPaymentLinkPaymentsPaymentLinks) GetMobileAppCheckout() *GetPaymentLinkPaymentsMobileAppCheckout {
	if o == nil {
		return nil
	}
	return o.MobileAppCheckout
}

func (o *GetPaymentLinkPaymentsPaymentLinks) GetChangePaymentState() *GetPaymentLinkPaymentsChangePaymentState {
	if o == nil {
		return nil
	}
	return o.ChangePaymentState
}

func (o *GetPaymentLinkPaymentsPaymentLinks) GetDashboard() GetPaymentLinkPaymentsDashboard {
	if o == nil {
		return GetPaymentLinkPaymentsDashboard{}
	}
	return o.Dashboard
}

func (o *GetPaymentLinkPaymentsPaymentLinks) GetRefunds() *GetPaymentLinkPaymentsRefunds {
	if o == nil {
		return nil
	}
	return o.Refunds
}

func (o *GetPaymentLinkPaymentsPaymentLinks) GetChargebacks() *GetPaymentLinkPaymentsChargebacks {
	if o == nil {
		return nil
	}
	return o.Chargebacks
}

func (o *GetPaymentLinkPaymentsPaymentLinks) GetCaptures() *GetPaymentLinkPaymentsCaptures {
	if o == nil {
		return nil
	}
	return o.Captures
}

func (o *GetPaymentLinkPaymentsPaymentLinks) GetSettlement() *GetPaymentLinkPaymentsSettlement {
	if o == nil {
		return nil
	}
	return o.Settlement
}

func (o *GetPaymentLinkPaymentsPaymentLinks) GetCustomer() *GetPaymentLinkPaymentsCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *GetPaymentLinkPaymentsPaymentLinks) GetMandate() *GetPaymentLinkPaymentsMandate {
	if o == nil {
		return nil
	}
	return o.Mandate
}

func (o *GetPaymentLinkPaymentsPaymentLinks) GetSubscription() *GetPaymentLinkPaymentsSubscription {
	if o == nil {
		return nil
	}
	return o.Subscription
}

func (o *GetPaymentLinkPaymentsPaymentLinks) GetOrder() *GetPaymentLinkPaymentsOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *GetPaymentLinkPaymentsPaymentLinks) GetTerminal() *GetPaymentLinkPaymentsTerminal {
	if o == nil {
		return nil
	}
	return o.Terminal
}

func (o *GetPaymentLinkPaymentsPaymentLinks) GetDocumentation() *GetPaymentLinkPaymentsPaymentDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

func (o *GetPaymentLinkPaymentsPaymentLinks) GetStatus() *GetPaymentLinkPaymentsLinksStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetPaymentLinkPaymentsPaymentLinks) GetPayOnline() *GetPaymentLinkPaymentsPayOnline {
	if o == nil {
		return nil
	}
	return o.PayOnline
}

type GetPaymentLinkPaymentsPaymentOutput struct {
	// Indicates the response contains a payment object. Will always contain the string `payment` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this payment. Mollie assigns this identifier at payment creation time. Mollie
	// will always refer to the payment by this ID. Example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode GetPaymentLinkPaymentsMode `json:"mode"`
	// The description of the payment. This will be shown to your customer on their card or bank statement when possible.
	// We truncate the description automatically according to the limits of the used payment method. The description is
	// also visible in any exports you generate.
	//
	// We recommend you use a unique identifier so that you can always link the payment to the order in your back office.
	// This is particularly useful for bookkeeping.
	//
	// The maximum length of the description field differs per payment method, with the absolute maximum being 255
	// characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
	Description string `json:"description"`
	// The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge â‚¬1000.00.
	//
	// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
	// retrieved using the Get method endpoint.
	//
	// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
	// tip amount.
	Amount GetPaymentLinkPaymentsAmount `json:"amount"`
	// The total amount that is already refunded. Only available when refunds are available for this payment. For some
	// payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
	// costs for a return shipment to the customer.
	AmountRefunded *GetPaymentLinkPaymentsAmountRefunded `json:"amountRefunded,omitempty"`
	// The remaining amount that can be refunded. Only available when refunds are available for this payment.
	AmountRemaining *GetPaymentLinkPaymentsAmountRemaining `json:"amountRemaining,omitempty"`
	// The total amount that is already captured for this payment. Only available when this payment supports captures.
	AmountCaptured *GetPaymentLinkPaymentsAmountCaptured `json:"amountCaptured,omitempty"`
	// The total amount that was charged back for this payment. Only available when the total charged back amount is not
	// zero.
	AmountChargedBack *GetPaymentLinkPaymentsAmountChargedBack `json:"amountChargedBack,omitempty"`
	// This optional field will contain the approximate amount that will be settled to your account, converted to the
	// currency your account is settled in.
	//
	// Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
	// settled by Mollie the `settlementAmount` is omitted from the response.
	//
	// Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
	// using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
	SettlementAmount *GetPaymentLinkPaymentsSettlementAmount `json:"settlementAmount,omitempty"`
	// The URL your customer will be redirected to after the payment process.
	//
	// It could make sense for the redirectUrl to contain a unique identifier â€“ like your order ID â€“ so you can show the
	// right page referencing the order when your customer returns.
	//
	// The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for
	// Apple Pay payments with an `applePayPaymentToken`.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not
	// provided, the customer will be redirected to the `redirectUrl` instead â€” see above.
	//
	// Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is
	// therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle
	// payment cancellations.
	CancelURL *string `json:"cancelUrl,omitempty"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines []GetPaymentLinkPaymentsLine `json:"lines,omitempty"`
	// The customer's billing address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	//
	// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
	BillingAddress *GetPaymentLinkPaymentsBillingAddress `json:"billingAddress,omitempty"`
	// The customer's shipping address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	ShippingAddress *GetPaymentLinkPaymentsShippingAddress `json:"shippingAddress,omitempty"`
	// Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
	// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
	// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
	// locale, but our hosted payment pages currently only support the specified languages.
	//
	// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
	// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
	// customer use a local bank account greatly increases the conversion and speed of payment.
	Locale *GetPaymentLinkPaymentsLocale `json:"locale,omitempty"`
	// This optional field contains your customer's ISO 3166-1 alpha-2 country code, detected by us during checkout. This
	// field is omitted if the country code was not detected.
	CountryCode *string `json:"countryCode,omitempty"`
	// The payment method used for this transaction. If a specific method was selected during payment initialization,
	// this field reflects that choice.
	Method *GetPaymentLinkPaymentsMethod `json:"method,omitempty"`
	// For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT
	// rates you have used for the order to ensure your customer's country matches the VAT country.
	//
	// Use this parameter to restrict the payment methods available to your customer to those from a single country.
	//
	// If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
	//
	// The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
	RestrictPaymentMethodsToCountry *string `json:"restrictPaymentMethodsToCountry,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *GetPaymentLinkPaymentsMetadata `json:"metadata,omitempty"`
	// Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
	// and capture at a later time.
	//
	// This field needs to be set to `manual` for method `riverty`.
	CaptureMode *GetPaymentLinkPaymentsCaptureMode `json:"captureMode,omitempty"`
	// **Only relevant if you wish to manage authorization and capturing separately.**
	//
	// Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a
	// later point either be 'captured' or canceled.
	//
	// By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a
	// capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For
	// example `8 hours` or `2 days`.
	//
	// To schedule an automatic capture, the `captureMode` must be set to `automatic`.
	//
	// The maximum delay is 7 days (168 hours).
	//
	// Possible values: `... hours` `... days`
	CaptureDelay *string `json:"captureDelay,omitempty"`
	// Indicates the date before which the payment needs to be captured, in ISO 8601 format. From this date onwards we
	// can no longer guarantee a successful capture. The parameter is omitted if the payment is not authorized (yet).
	CaptureBefore *string `json:"captureBefore,omitempty"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	//
	// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
	// `routing` parameter.
	ApplicationFee *GetPaymentLinkPaymentsApplicationFee `json:"applicationFee,omitempty"`
	// *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
	//
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you create payments on your own account that you want to split between yourself and one or more connected
	// merchants, you can use this `routing` parameter to route the payment accordingly.
	//
	// The `routing` parameter should contain an array of objects, with each object describing the destination for a
	// specific portion of the payment.
	//
	// It is not necessary to indicate in the array which portion goes to yourself. After all portions of the total
	// payment amount have been routed, the amount left will be routed to the current organization automatically.
	//
	// If instead you use OAuth to create payments on a connected merchant's account, refer to the `applicationFee`
	// parameter.
	Routing []GetPaymentLinkPaymentsRouting `json:"routing,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// Indicate which part of a recurring sequence this payment is for.
	//
	// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
	// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
	// on their account in the future.
	//
	// If set to `recurring`, the customer's card is charged automatically.
	//
	// Defaults to `oneoff`, which is a regular non-recurring payment.
	//
	// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
	// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
	// are set up correctly for recurring payments.
	SequenceType *GetPaymentLinkPaymentsSequenceType `json:"sequenceType"`
	// If the payment was automatically created via a subscription, the ID of the [subscription](get-subscription) will
	// be added to the response.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// When creating recurring payments, the ID of a specific [mandate](get-mandate) can be supplied to indicate which of
	// the customer's accounts should be credited.
	MandateID *string `json:"mandateId,omitempty"`
	// The ID of the [customer](get-customer) the payment is being created for. This is used primarily for recurring
	// payments, but can also be used on regular payments to enable single-click payments.
	//
	// If `sequenceType` is set to `recurring`, this field is required.
	CustomerID *string `json:"customerId,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// When using an API Key, the `profileId` can be omitted since it is linked to the key. However, for OAuth and
	// Organization tokens, the `profileId` is required.
	//
	// For more information, see [Authentication](authentication).
	ProfileID string `json:"profileId"`
	// The identifier referring to the [settlement](get-settlement) this payment was settled with.
	SettlementID *string `json:"settlementId,omitempty"`
	// If the payment was created for an [order](get-order), the ID of that order will be part of the response.
	OrderID *string `json:"orderId,omitempty"`
	// The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
	// statuses occur at what point.
	Status GetPaymentLinkPaymentsStatusEnum `json:"status"`
	// This object offers details about the status of a payment. Currently it is only available for point-of-sale
	// payments.
	//
	// You can find more information about the possible values of this object on
	// [this page](status-reasons).**
	StatusReason *GetPaymentLinkPaymentsStatusReason `json:"statusReason,omitempty"`
	// Whether the payment can be canceled. This parameter is omitted if the payment reaches a final state.
	IsCancelable *bool `json:"isCancelable,omitempty"`
	// An object containing payment details collected during the payment process. For example, details may include the
	// customer's card or bank details and a payment reference. For the full list of details, please refer to the
	// [method-specific parameters](extra-payment-parameters) guide.
	Details *GetPaymentLinkPaymentsDetails `json:"details,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The date and time the payment became authorized, in ISO 8601 format. This parameter is omitted if the payment is
	// not authorized (yet).
	AuthorizedAt *string `json:"authorizedAt,omitempty"`
	// The date and time the payment became paid, in ISO 8601 format. This parameter is omitted if the payment is not
	// completed (yet).
	PaidAt *string `json:"paidAt,omitempty"`
	// The date and time the payment was canceled, in ISO 8601 format. This parameter is omitted if the payment is not
	// canceled (yet).
	CanceledAt *string `json:"canceledAt,omitempty"`
	// The date and time the payment will expire, in ISO 8601 format. This parameter is omitted if the payment can no
	// longer expire.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The date and time the payment was expired, in ISO 8601 format. This parameter is omitted if the payment did not
	// expire (yet).
	ExpiredAt *string `json:"expiredAt,omitempty"`
	// The date and time the payment failed, in ISO 8601 format. This parameter is omitted if the payment did not fail
	// (yet).
	FailedAt *string `json:"failedAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links GetPaymentLinkPaymentsPaymentLinks `json:"_links"`
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetMode() GetPaymentLinkPaymentsMode {
	if o == nil {
		return GetPaymentLinkPaymentsMode("")
	}
	return o.Mode
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetAmount() GetPaymentLinkPaymentsAmount {
	if o == nil {
		return GetPaymentLinkPaymentsAmount{}
	}
	return o.Amount
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetAmountRefunded() *GetPaymentLinkPaymentsAmountRefunded {
	if o == nil {
		return nil
	}
	return o.AmountRefunded
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetAmountRemaining() *GetPaymentLinkPaymentsAmountRemaining {
	if o == nil {
		return nil
	}
	return o.AmountRemaining
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetAmountCaptured() *GetPaymentLinkPaymentsAmountCaptured {
	if o == nil {
		return nil
	}
	return o.AmountCaptured
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetAmountChargedBack() *GetPaymentLinkPaymentsAmountChargedBack {
	if o == nil {
		return nil
	}
	return o.AmountChargedBack
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetSettlementAmount() *GetPaymentLinkPaymentsSettlementAmount {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetCancelURL() *string {
	if o == nil {
		return nil
	}
	return o.CancelURL
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetLines() []GetPaymentLinkPaymentsLine {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetBillingAddress() *GetPaymentLinkPaymentsBillingAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetShippingAddress() *GetPaymentLinkPaymentsShippingAddress {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetLocale() *GetPaymentLinkPaymentsLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CountryCode
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetMethod() *GetPaymentLinkPaymentsMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetRestrictPaymentMethodsToCountry() *string {
	if o == nil {
		return nil
	}
	return o.RestrictPaymentMethodsToCountry
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetMetadata() *GetPaymentLinkPaymentsMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetCaptureMode() *GetPaymentLinkPaymentsCaptureMode {
	if o == nil {
		return nil
	}
	return o.CaptureMode
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetCaptureDelay() *string {
	if o == nil {
		return nil
	}
	return o.CaptureDelay
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetCaptureBefore() *string {
	if o == nil {
		return nil
	}
	return o.CaptureBefore
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetApplicationFee() *GetPaymentLinkPaymentsApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetRouting() []GetPaymentLinkPaymentsRouting {
	if o == nil {
		return nil
	}
	return o.Routing
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetSequenceType() *GetPaymentLinkPaymentsSequenceType {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetSubscriptionID() *string {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetProfileID() string {
	if o == nil {
		return ""
	}
	return o.ProfileID
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetStatus() GetPaymentLinkPaymentsStatusEnum {
	if o == nil {
		return GetPaymentLinkPaymentsStatusEnum("")
	}
	return o.Status
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetStatusReason() *GetPaymentLinkPaymentsStatusReason {
	if o == nil {
		return nil
	}
	return o.StatusReason
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetIsCancelable() *bool {
	if o == nil {
		return nil
	}
	return o.IsCancelable
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetDetails() *GetPaymentLinkPaymentsDetails {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetAuthorizedAt() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizedAt
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetCanceledAt() *string {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetExpiredAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredAt
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetFailedAt() *string {
	if o == nil {
		return nil
	}
	return o.FailedAt
}

func (o *GetPaymentLinkPaymentsPaymentOutput) GetLinks() GetPaymentLinkPaymentsPaymentLinks {
	if o == nil {
		return GetPaymentLinkPaymentsPaymentLinks{}
	}
	return o.Links
}

type GetPaymentLinkPaymentsEmbedded struct {
	// An array of payment objects.
	Payments []GetPaymentLinkPaymentsPaymentOutput `json:"payments,omitempty"`
}

func (o *GetPaymentLinkPaymentsEmbedded) GetPayments() []GetPaymentLinkPaymentsPaymentOutput {
	if o == nil {
		return nil
	}
	return o.Payments
}

// GetPaymentLinkPaymentsSelf - The URL to the current set of items.
type GetPaymentLinkPaymentsSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsPrevious - The previous set of items, if available.
type GetPaymentLinkPaymentsPrevious struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *GetPaymentLinkPaymentsPrevious) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsPrevious) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// GetPaymentLinkPaymentsNext - The next set of items, if available.
type GetPaymentLinkPaymentsNext struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *GetPaymentLinkPaymentsNext) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsNext) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// GetPaymentLinkPaymentsDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetPaymentLinkPaymentsDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentsDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentsDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentsLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
type GetPaymentLinkPaymentsLinks struct {
	// The URL to the current set of items.
	Self GetPaymentLinkPaymentsSelf `json:"self"`
	// The previous set of items, if available.
	Previous *GetPaymentLinkPaymentsPrevious `json:"previous"`
	// The next set of items, if available.
	Next *GetPaymentLinkPaymentsNext `json:"next"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation GetPaymentLinkPaymentsDocumentation `json:"documentation"`
}

func (o *GetPaymentLinkPaymentsLinks) GetSelf() GetPaymentLinkPaymentsSelf {
	if o == nil {
		return GetPaymentLinkPaymentsSelf{}
	}
	return o.Self
}

func (o *GetPaymentLinkPaymentsLinks) GetPrevious() *GetPaymentLinkPaymentsPrevious {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *GetPaymentLinkPaymentsLinks) GetNext() *GetPaymentLinkPaymentsNext {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetPaymentLinkPaymentsLinks) GetDocumentation() GetPaymentLinkPaymentsDocumentation {
	if o == nil {
		return GetPaymentLinkPaymentsDocumentation{}
	}
	return o.Documentation
}

// GetPaymentLinkPaymentsResponseBody - A list of payment objects.
type GetPaymentLinkPaymentsResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    int64                          `json:"count"`
	Embedded GetPaymentLinkPaymentsEmbedded `json:"_embedded"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links GetPaymentLinkPaymentsLinks `json:"_links"`
}

func (o *GetPaymentLinkPaymentsResponseBody) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *GetPaymentLinkPaymentsResponseBody) GetEmbedded() GetPaymentLinkPaymentsEmbedded {
	if o == nil {
		return GetPaymentLinkPaymentsEmbedded{}
	}
	return o.Embedded
}

func (o *GetPaymentLinkPaymentsResponseBody) GetLinks() GetPaymentLinkPaymentsLinks {
	if o == nil {
		return GetPaymentLinkPaymentsLinks{}
	}
	return o.Links
}

type GetPaymentLinkPaymentsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of payment objects.
	Object *GetPaymentLinkPaymentsResponseBody
}

func (o *GetPaymentLinkPaymentsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetPaymentLinkPaymentsResponse) GetObject() *GetPaymentLinkPaymentsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
