// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type UpdateSubscriptionRequestBody struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount *components.Amount `json:"amount,omitempty"`
	// The subscription's description will be used as the description of the resulting individual payments and so showing
	// up on the bank statement of the consumer.
	//
	// **Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
	Description *string `json:"description,omitempty"`
	// Interval to wait between payments, for example `1 month` or `14 days`.
	//
	// The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval *string `json:"interval,omitempty"`
	// The start date of the subscription in `YYYY-MM-DD` format.
	StartDate *string `json:"startDate,omitempty"`
	// Total number of payments for the subscription. Once this number of payments is reached, the subscription is
	// considered completed.
	//
	// Test mode subscriptions will get canceled automatically after 10 payments.
	Times *int64 `json:"times,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *components.Metadata `json:"metadata,omitempty"`
	// We will call this URL for any payment status changes of payments resulting from this subscription.
	//
	// This webhook will receive **all** events for the subscription's payments. This may include payment
	// failures as well. Be sure to verify the payment's subscription ID and its status.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	MandateID  *string `json:"mandateId,omitempty"`
	// Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
	// such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `json:"testmode,omitempty"`
}

func (u *UpdateSubscriptionRequestBody) GetAmount() *components.Amount {
	if u == nil {
		return nil
	}
	return u.Amount
}

func (u *UpdateSubscriptionRequestBody) GetDescription() *string {
	if u == nil {
		return nil
	}
	return u.Description
}

func (u *UpdateSubscriptionRequestBody) GetInterval() *string {
	if u == nil {
		return nil
	}
	return u.Interval
}

func (u *UpdateSubscriptionRequestBody) GetStartDate() *string {
	if u == nil {
		return nil
	}
	return u.StartDate
}

func (u *UpdateSubscriptionRequestBody) GetTimes() *int64 {
	if u == nil {
		return nil
	}
	return u.Times
}

func (u *UpdateSubscriptionRequestBody) GetMetadata() *components.Metadata {
	if u == nil {
		return nil
	}
	return u.Metadata
}

func (u *UpdateSubscriptionRequestBody) GetWebhookURL() *string {
	if u == nil {
		return nil
	}
	return u.WebhookURL
}

func (u *UpdateSubscriptionRequestBody) GetMandateID() *string {
	if u == nil {
		return nil
	}
	return u.MandateID
}

func (u *UpdateSubscriptionRequestBody) GetTestmode() *bool {
	if u == nil {
		return nil
	}
	return u.Testmode
}

type UpdateSubscriptionRequest struct {
	// Provide the ID of the related customer.
	CustomerID string `pathParam:"style=simple,explode=false,name=customerId"`
	// Provide the ID of the related subscription.
	SubscriptionID string `pathParam:"style=simple,explode=false,name=subscriptionId"`
	// A unique key to ensure idempotent requests. This key should be a UUID v4 string.
	IdempotencyKey *string                        `header:"style=simple,explode=false,name=idempotency-key"`
	RequestBody    *UpdateSubscriptionRequestBody `request:"mediaType=application/json"`
}

func (u *UpdateSubscriptionRequest) GetCustomerID() string {
	if u == nil {
		return ""
	}
	return u.CustomerID
}

func (u *UpdateSubscriptionRequest) GetSubscriptionID() string {
	if u == nil {
		return ""
	}
	return u.SubscriptionID
}

func (u *UpdateSubscriptionRequest) GetIdempotencyKey() *string {
	if u == nil {
		return nil
	}
	return u.IdempotencyKey
}

func (u *UpdateSubscriptionRequest) GetRequestBody() *UpdateSubscriptionRequestBody {
	if u == nil {
		return nil
	}
	return u.RequestBody
}

type UpdateSubscriptionResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The updated subscription object.
	SubscriptionResponse *components.SubscriptionResponse
}

func (u *UpdateSubscriptionResponse) GetHTTPMeta() components.HTTPMetadata {
	if u == nil {
		return components.HTTPMetadata{}
	}
	return u.HTTPMeta
}

func (u *UpdateSubscriptionResponse) GetSubscriptionResponse() *components.SubscriptionResponse {
	if u == nil {
		return nil
	}
	return u.SubscriptionResponse
}
