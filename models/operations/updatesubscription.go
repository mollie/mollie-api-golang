// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
)

// UpdateSubscriptionAmountRequest - Update the amount for future payments of this subscription.
type UpdateSubscriptionAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdateSubscriptionAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdateSubscriptionAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateSubscriptionMetadataRequestType string

const (
	UpdateSubscriptionMetadataRequestTypeStr        UpdateSubscriptionMetadataRequestType = "str"
	UpdateSubscriptionMetadataRequestTypeMapOfAny   UpdateSubscriptionMetadataRequestType = "mapOfAny"
	UpdateSubscriptionMetadataRequestTypeArrayOfStr UpdateSubscriptionMetadataRequestType = "arrayOfStr"
)

// UpdateSubscriptionMetadataRequest - Provide any data you like, for example a string or a JSON object. We will save the data alongside the
// entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to
// approximately 1kB.
//
// Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
type UpdateSubscriptionMetadataRequest struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type UpdateSubscriptionMetadataRequestType
}

func CreateUpdateSubscriptionMetadataRequestStr(str string) UpdateSubscriptionMetadataRequest {
	typ := UpdateSubscriptionMetadataRequestTypeStr

	return UpdateSubscriptionMetadataRequest{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateSubscriptionMetadataRequestMapOfAny(mapOfAny map[string]any) UpdateSubscriptionMetadataRequest {
	typ := UpdateSubscriptionMetadataRequestTypeMapOfAny

	return UpdateSubscriptionMetadataRequest{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateUpdateSubscriptionMetadataRequestArrayOfStr(arrayOfStr []string) UpdateSubscriptionMetadataRequest {
	typ := UpdateSubscriptionMetadataRequestTypeArrayOfStr

	return UpdateSubscriptionMetadataRequest{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *UpdateSubscriptionMetadataRequest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = UpdateSubscriptionMetadataRequestTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = UpdateSubscriptionMetadataRequestTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpdateSubscriptionMetadataRequestTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateSubscriptionMetadataRequest", string(data))
}

func (u UpdateSubscriptionMetadataRequest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateSubscriptionMetadataRequest: all fields are null")
}

type UpdateSubscriptionRequestBody struct {
	// Update the amount for future payments of this subscription.
	Amount *UpdateSubscriptionAmountRequest `json:"amount,omitempty"`
	// The subscription's description will be used as the description of the resulting individual payments and so showing
	// up on the bank statement of the consumer.
	//
	// **Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
	Description *string `json:"description,omitempty"`
	// Interval to wait between payments, for example `1 month` or `14 days`.
	//
	// The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval *string `json:"interval,omitempty"`
	// The start date of the subscription in `YYYY-MM-DD` format.
	StartDate *string `json:"startDate,omitempty"`
	// Total number of payments for the subscription. Once this number of payments is reached, the subscription is
	// considered completed.
	//
	// Test mode subscriptions will get canceled automatically after 10 payments.
	Times *int64 `json:"times,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the
	// entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to
	// approximately 1kB.
	//
	// Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
	Metadata *UpdateSubscriptionMetadataRequest `json:"metadata,omitempty"`
	// We will call this URL for any payment status changes of payments resulting from this subscription.
	//
	// This webhook will receive **all** events for the subscription's payments. This may include payment
	// failures as well. Be sure to verify the payment's subscription ID and its status.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	// The mandate used for this subscription, if any.
	MandateID *string `json:"mandateId,omitempty"`
	// Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
	// such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `json:"testmode,omitempty"`
}

func (o *UpdateSubscriptionRequestBody) GetAmount() *UpdateSubscriptionAmountRequest {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *UpdateSubscriptionRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateSubscriptionRequestBody) GetInterval() *string {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *UpdateSubscriptionRequestBody) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *UpdateSubscriptionRequestBody) GetTimes() *int64 {
	if o == nil {
		return nil
	}
	return o.Times
}

func (o *UpdateSubscriptionRequestBody) GetMetadata() *UpdateSubscriptionMetadataRequest {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *UpdateSubscriptionRequestBody) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *UpdateSubscriptionRequestBody) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *UpdateSubscriptionRequestBody) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

type UpdateSubscriptionRequest struct {
	// Provide the ID of the related customer.
	CustomerID string `pathParam:"style=simple,explode=false,name=customerId"`
	// Provide the ID of the related subscription.
	SubscriptionID string                         `pathParam:"style=simple,explode=false,name=subscriptionId"`
	RequestBody    *UpdateSubscriptionRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateSubscriptionRequest) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *UpdateSubscriptionRequest) GetSubscriptionID() string {
	if o == nil {
		return ""
	}
	return o.SubscriptionID
}

func (o *UpdateSubscriptionRequest) GetRequestBody() *UpdateSubscriptionRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// UpdateSubscriptionNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type UpdateSubscriptionNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *UpdateSubscriptionNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateSubscriptionNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type UpdateSubscriptionNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation UpdateSubscriptionNotFoundDocumentation `json:"documentation"`
}

func (o *UpdateSubscriptionNotFoundLinks) GetDocumentation() UpdateSubscriptionNotFoundDocumentation {
	if o == nil {
		return UpdateSubscriptionNotFoundDocumentation{}
	}
	return o.Documentation
}

// UpdateSubscriptionMode - Whether this entity was created in live mode or in test mode.
type UpdateSubscriptionMode string

const (
	UpdateSubscriptionModeLive UpdateSubscriptionMode = "live"
	UpdateSubscriptionModeTest UpdateSubscriptionMode = "test"
)

func (e UpdateSubscriptionMode) ToPointer() *UpdateSubscriptionMode {
	return &e
}
func (e *UpdateSubscriptionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = UpdateSubscriptionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSubscriptionMode: %v", v)
	}
}

// UpdateSubscriptionStatus - The subscription's current status is directly related to the status of the underlying customer or mandate that is
// enabling the subscription.
type UpdateSubscriptionStatus string

const (
	UpdateSubscriptionStatusPending   UpdateSubscriptionStatus = "pending"
	UpdateSubscriptionStatusActive    UpdateSubscriptionStatus = "active"
	UpdateSubscriptionStatusCanceled  UpdateSubscriptionStatus = "canceled"
	UpdateSubscriptionStatusSuspended UpdateSubscriptionStatus = "suspended"
	UpdateSubscriptionStatusCompleted UpdateSubscriptionStatus = "completed"
)

func (e UpdateSubscriptionStatus) ToPointer() *UpdateSubscriptionStatus {
	return &e
}
func (e *UpdateSubscriptionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "active":
		fallthrough
	case "canceled":
		fallthrough
	case "suspended":
		fallthrough
	case "completed":
		*e = UpdateSubscriptionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSubscriptionStatus: %v", v)
	}
}

// UpdateSubscriptionAmountResponse - The amount for each individual payment that is charged with this subscription. For example, for a monthly
// subscription of €10, the subscription amount should be set to €10.
type UpdateSubscriptionAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdateSubscriptionAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdateSubscriptionAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdateSubscriptionMethod - The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
type UpdateSubscriptionMethod string

const (
	UpdateSubscriptionMethodCreditcard  UpdateSubscriptionMethod = "creditcard"
	UpdateSubscriptionMethodDirectdebit UpdateSubscriptionMethod = "directdebit"
	UpdateSubscriptionMethodPaypal      UpdateSubscriptionMethod = "paypal"
)

func (e UpdateSubscriptionMethod) ToPointer() *UpdateSubscriptionMethod {
	return &e
}
func (e *UpdateSubscriptionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "paypal":
		*e = UpdateSubscriptionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSubscriptionMethod: %v", v)
	}
}

// UpdateSubscriptionApplicationFeeAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type UpdateSubscriptionApplicationFeeAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdateSubscriptionApplicationFeeAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdateSubscriptionApplicationFeeAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdateSubscriptionApplicationFee - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
//
// Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
// information.
type UpdateSubscriptionApplicationFee struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount      UpdateSubscriptionApplicationFeeAmount `json:"amount"`
	Description string                                 `json:"description"`
}

func (o *UpdateSubscriptionApplicationFee) GetAmount() UpdateSubscriptionApplicationFeeAmount {
	if o == nil {
		return UpdateSubscriptionApplicationFeeAmount{}
	}
	return o.Amount
}

func (o *UpdateSubscriptionApplicationFee) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

type UpdateSubscriptionMetadataResponseType string

const (
	UpdateSubscriptionMetadataResponseTypeStr        UpdateSubscriptionMetadataResponseType = "str"
	UpdateSubscriptionMetadataResponseTypeMapOfAny   UpdateSubscriptionMetadataResponseType = "mapOfAny"
	UpdateSubscriptionMetadataResponseTypeArrayOfStr UpdateSubscriptionMetadataResponseType = "arrayOfStr"
)

// UpdateSubscriptionMetadataResponse - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
// Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
// 1kB.
//
// Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
type UpdateSubscriptionMetadataResponse struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type UpdateSubscriptionMetadataResponseType
}

func CreateUpdateSubscriptionMetadataResponseStr(str string) UpdateSubscriptionMetadataResponse {
	typ := UpdateSubscriptionMetadataResponseTypeStr

	return UpdateSubscriptionMetadataResponse{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateSubscriptionMetadataResponseMapOfAny(mapOfAny map[string]any) UpdateSubscriptionMetadataResponse {
	typ := UpdateSubscriptionMetadataResponseTypeMapOfAny

	return UpdateSubscriptionMetadataResponse{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateUpdateSubscriptionMetadataResponseArrayOfStr(arrayOfStr []string) UpdateSubscriptionMetadataResponse {
	typ := UpdateSubscriptionMetadataResponseTypeArrayOfStr

	return UpdateSubscriptionMetadataResponse{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *UpdateSubscriptionMetadataResponse) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = UpdateSubscriptionMetadataResponseTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = UpdateSubscriptionMetadataResponseTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpdateSubscriptionMetadataResponseTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateSubscriptionMetadataResponse", string(data))
}

func (u UpdateSubscriptionMetadataResponse) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateSubscriptionMetadataResponse: all fields are null")
}

// UpdateSubscriptionSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type UpdateSubscriptionSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdateSubscriptionSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateSubscriptionSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdateSubscriptionCustomer - The API resource URL of the [customer](get-customer) this subscription was created for.
type UpdateSubscriptionCustomer struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *UpdateSubscriptionCustomer) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *UpdateSubscriptionCustomer) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// UpdateSubscriptionMandate - The API resource URL of the [mandate](get-mandate) this subscription was created for.
type UpdateSubscriptionMandate struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *UpdateSubscriptionMandate) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *UpdateSubscriptionMandate) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// UpdateSubscriptionProfile - The API resource URL of the [profile](get-profile) this subscription was created for.
type UpdateSubscriptionProfile struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *UpdateSubscriptionProfile) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *UpdateSubscriptionProfile) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// UpdateSubscriptionPayments - The API resource URL of the [payments](list-payments) created for this subscription. Omitted if no such
// payments exist (yet).
type UpdateSubscriptionPayments struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *UpdateSubscriptionPayments) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *UpdateSubscriptionPayments) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// UpdateSubscriptionDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type UpdateSubscriptionDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdateSubscriptionDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateSubscriptionDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdateSubscriptionLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type UpdateSubscriptionLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self UpdateSubscriptionSelf `json:"self"`
	// The API resource URL of the [customer](get-customer) this subscription was created for.
	Customer *UpdateSubscriptionCustomer `json:"customer"`
	// The API resource URL of the [mandate](get-mandate) this subscription was created for.
	Mandate *UpdateSubscriptionMandate `json:"mandate,omitempty"`
	// The API resource URL of the [profile](get-profile) this subscription was created for.
	Profile *UpdateSubscriptionProfile `json:"profile"`
	// The API resource URL of the [payments](list-payments) created for this subscription. Omitted if no such
	// payments exist (yet).
	Payments *UpdateSubscriptionPayments `json:"payments,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation UpdateSubscriptionDocumentation `json:"documentation"`
}

func (o *UpdateSubscriptionLinks) GetSelf() UpdateSubscriptionSelf {
	if o == nil {
		return UpdateSubscriptionSelf{}
	}
	return o.Self
}

func (o *UpdateSubscriptionLinks) GetCustomer() *UpdateSubscriptionCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *UpdateSubscriptionLinks) GetMandate() *UpdateSubscriptionMandate {
	if o == nil {
		return nil
	}
	return o.Mandate
}

func (o *UpdateSubscriptionLinks) GetProfile() *UpdateSubscriptionProfile {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *UpdateSubscriptionLinks) GetPayments() *UpdateSubscriptionPayments {
	if o == nil {
		return nil
	}
	return o.Payments
}

func (o *UpdateSubscriptionLinks) GetDocumentation() UpdateSubscriptionDocumentation {
	if o == nil {
		return UpdateSubscriptionDocumentation{}
	}
	return o.Documentation
}

// UpdateSubscriptionResponseBody - The updated subscription object.
type UpdateSubscriptionResponseBody struct {
	// Indicates the response contains a subscription object. Will always contain the string `subscription` for this
	// endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this subscription. Example: `sub_rVKGtNd6s3`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode UpdateSubscriptionMode `json:"mode"`
	// The subscription's current status is directly related to the status of the underlying customer or mandate that is
	// enabling the subscription.
	Status UpdateSubscriptionStatus `json:"status"`
	// The amount for each individual payment that is charged with this subscription. For example, for a monthly
	// subscription of €10, the subscription amount should be set to €10.
	Amount UpdateSubscriptionAmountResponse `json:"amount"`
	// Total number of payments for the subscription. Once this number of payments is reached, the subscription is
	// considered completed.
	//
	// Test mode subscriptions will get canceled automatically after 10 payments.
	Times *int64 `json:"times"`
	// Number of payments left for the subscription.
	TimesRemaining *int64 `json:"timesRemaining"`
	// Interval to wait between payments, for example `1 month` or `14 days`.
	//
	// The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval string `json:"interval"`
	// The start date of the subscription in `YYYY-MM-DD` format.
	StartDate string `json:"startDate"`
	// The date of the next scheduled payment in `YYYY-MM-DD` format. If the subscription has been completed or canceled,
	// this parameter will not be returned.
	NextPaymentDate *string `json:"nextPaymentDate,omitempty"`
	// The subscription's description will be used as the description of the resulting individual payments and so showing
	// up on the bank statement of the consumer.
	//
	// **Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
	Description string `json:"description"`
	// The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
	Method *UpdateSubscriptionMethod `json:"method"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
	//
	// Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
	// information.
	ApplicationFee *UpdateSubscriptionApplicationFee `json:"applicationFee,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
	// Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
	// 1kB.
	//
	// Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
	Metadata *UpdateSubscriptionMetadataResponse `json:"metadata"`
	// We will call this URL for any payment status changes of payments resulting from this subscription.
	//
	// This webhook will receive **all** events for the subscription's payments. This may include payment failures as
	// well. Be sure to verify the payment's subscription ID and its status.
	WebhookURL string `json:"webhookUrl"`
	// The customer this subscription belongs to.
	CustomerID string `json:"customerId"`
	// The mandate used for this subscription, if any.
	MandateID *string `json:"mandateId,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The subscription's date and time of cancellation, in ISO 8601 format. This parameter is omitted if the
	// subscription is not canceled (yet).
	CanceledAt *string `json:"canceledAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links UpdateSubscriptionLinks `json:"_links"`
}

func (o *UpdateSubscriptionResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *UpdateSubscriptionResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateSubscriptionResponseBody) GetMode() UpdateSubscriptionMode {
	if o == nil {
		return UpdateSubscriptionMode("")
	}
	return o.Mode
}

func (o *UpdateSubscriptionResponseBody) GetStatus() UpdateSubscriptionStatus {
	if o == nil {
		return UpdateSubscriptionStatus("")
	}
	return o.Status
}

func (o *UpdateSubscriptionResponseBody) GetAmount() UpdateSubscriptionAmountResponse {
	if o == nil {
		return UpdateSubscriptionAmountResponse{}
	}
	return o.Amount
}

func (o *UpdateSubscriptionResponseBody) GetTimes() *int64 {
	if o == nil {
		return nil
	}
	return o.Times
}

func (o *UpdateSubscriptionResponseBody) GetTimesRemaining() *int64 {
	if o == nil {
		return nil
	}
	return o.TimesRemaining
}

func (o *UpdateSubscriptionResponseBody) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *UpdateSubscriptionResponseBody) GetStartDate() string {
	if o == nil {
		return ""
	}
	return o.StartDate
}

func (o *UpdateSubscriptionResponseBody) GetNextPaymentDate() *string {
	if o == nil {
		return nil
	}
	return o.NextPaymentDate
}

func (o *UpdateSubscriptionResponseBody) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *UpdateSubscriptionResponseBody) GetMethod() *UpdateSubscriptionMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *UpdateSubscriptionResponseBody) GetApplicationFee() *UpdateSubscriptionApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *UpdateSubscriptionResponseBody) GetMetadata() *UpdateSubscriptionMetadataResponse {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *UpdateSubscriptionResponseBody) GetWebhookURL() string {
	if o == nil {
		return ""
	}
	return o.WebhookURL
}

func (o *UpdateSubscriptionResponseBody) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *UpdateSubscriptionResponseBody) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *UpdateSubscriptionResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *UpdateSubscriptionResponseBody) GetCanceledAt() *string {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdateSubscriptionResponseBody) GetLinks() UpdateSubscriptionLinks {
	if o == nil {
		return UpdateSubscriptionLinks{}
	}
	return o.Links
}

type UpdateSubscriptionResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The updated subscription object.
	Object *UpdateSubscriptionResponseBody
}

func (o *UpdateSubscriptionResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateSubscriptionResponse) GetObject() *UpdateSubscriptionResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
