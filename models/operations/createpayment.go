// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
	"github.com/mollie/mollie-api-golang/types"
)

// CreatePaymentInclude - This endpoint allows you to include additional information via the `include` query string parameter.
type CreatePaymentInclude string

const (
	CreatePaymentIncludeDetailsQrCode CreatePaymentInclude = "details.qrCode"
)

func (e CreatePaymentInclude) ToPointer() *CreatePaymentInclude {
	return &e
}
func (e *CreatePaymentInclude) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "details.qrCode":
		*e = CreatePaymentInclude(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentInclude: %v", v)
	}
}

// CreatePaymentAmountRequest - The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
//
// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
// retrieved using the Get method endpoint.
//
// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
// tip amount.
type CreatePaymentAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentLineTypeRequest - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type CreatePaymentLineTypeRequest string

const (
	CreatePaymentLineTypeRequestPhysical    CreatePaymentLineTypeRequest = "physical"
	CreatePaymentLineTypeRequestDigital     CreatePaymentLineTypeRequest = "digital"
	CreatePaymentLineTypeRequestShippingFee CreatePaymentLineTypeRequest = "shipping_fee"
	CreatePaymentLineTypeRequestDiscount    CreatePaymentLineTypeRequest = "discount"
	CreatePaymentLineTypeRequestStoreCredit CreatePaymentLineTypeRequest = "store_credit"
	CreatePaymentLineTypeRequestGiftCard    CreatePaymentLineTypeRequest = "gift_card"
	CreatePaymentLineTypeRequestSurcharge   CreatePaymentLineTypeRequest = "surcharge"
	CreatePaymentLineTypeRequestTip         CreatePaymentLineTypeRequest = "tip"
)

func (e CreatePaymentLineTypeRequest) ToPointer() *CreatePaymentLineTypeRequest {
	return &e
}
func (e *CreatePaymentLineTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "physical":
		fallthrough
	case "digital":
		fallthrough
	case "shipping_fee":
		fallthrough
	case "discount":
		fallthrough
	case "store_credit":
		fallthrough
	case "gift_card":
		fallthrough
	case "surcharge":
		fallthrough
	case "tip":
		*e = CreatePaymentLineTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentLineTypeRequest: %v", v)
	}
}

// CreatePaymentUnitPriceRequest - The price of a single item including VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
//
// The unit price can be zero in case of free items.
type CreatePaymentUnitPriceRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentUnitPriceRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentUnitPriceRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentDiscountAmountRequest - Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
// type.
type CreatePaymentDiscountAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentDiscountAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentDiscountAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentTotalAmountRequest - The total amount of the line, including VAT and discounts.
//
// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
//
// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
type CreatePaymentTotalAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentTotalAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentTotalAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentVatAmountRequest - The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
//
// Any deviations from this will result in an error.
//
// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
// `SEK 100.00 × (25 / 125) = SEK 20.00`.
type CreatePaymentVatAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentVatAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentVatAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreatePaymentCategoryRequest string

const (
	CreatePaymentCategoryRequestMeal         CreatePaymentCategoryRequest = "meal"
	CreatePaymentCategoryRequestEco          CreatePaymentCategoryRequest = "eco"
	CreatePaymentCategoryRequestGift         CreatePaymentCategoryRequest = "gift"
	CreatePaymentCategoryRequestSportCulture CreatePaymentCategoryRequest = "sport_culture"
)

func (e CreatePaymentCategoryRequest) ToPointer() *CreatePaymentCategoryRequest {
	return &e
}
func (e *CreatePaymentCategoryRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "meal":
		fallthrough
	case "eco":
		fallthrough
	case "gift":
		fallthrough
	case "sport_culture":
		*e = CreatePaymentCategoryRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentCategoryRequest: %v", v)
	}
}

// CreatePaymentRecurringAmountRequest - Total amount and currency of the recurring item.
type CreatePaymentRecurringAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentRecurringAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentRecurringAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentRecurringRequest - The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
// to inform the shopper of the details for recurring products in the payments.
type CreatePaymentRecurringRequest struct {
	// A description of the recurring item. If not present, the main description of the item will be used.
	Description *string `json:"description,omitempty"`
	// Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval string `json:"interval"`
	// Total amount and currency of the recurring item.
	Amount *CreatePaymentRecurringAmountRequest `json:"amount,omitempty"`
	// Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
	Times *int64 `json:"times,omitempty"`
	// The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
	StartDate *string `json:"startDate,omitempty"`
}

func (o *CreatePaymentRecurringRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreatePaymentRecurringRequest) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *CreatePaymentRecurringRequest) GetAmount() *CreatePaymentRecurringAmountRequest {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CreatePaymentRecurringRequest) GetTimes() *int64 {
	if o == nil {
		return nil
	}
	return o.Times
}

func (o *CreatePaymentRecurringRequest) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

type CreatePaymentLineRequest struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *CreatePaymentLineTypeRequest `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// The price of a single item including VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
	//
	// The unit price can be zero in case of free items.
	UnitPrice CreatePaymentUnitPriceRequest `json:"unitPrice"`
	// Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
	// type.
	DiscountAmount *CreatePaymentDiscountAmountRequest `json:"discountAmount,omitempty"`
	// The total amount of the line, including VAT and discounts.
	//
	// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
	//
	// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
	TotalAmount CreatePaymentTotalAmountRequest `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
	// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
	//
	// Any deviations from this will result in an error.
	//
	// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
	// `SEK 100.00 × (25 / 125) = SEK 20.00`.
	VatAmount *CreatePaymentVatAmountRequest `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []CreatePaymentCategoryRequest `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string `json:"productUrl,omitempty"`
	// The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
	// to inform the shopper of the details for recurring products in the payments.
	Recurring *CreatePaymentRecurringRequest `json:"recurring,omitempty"`
}

func (o *CreatePaymentLineRequest) GetType() *CreatePaymentLineTypeRequest {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreatePaymentLineRequest) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CreatePaymentLineRequest) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *CreatePaymentLineRequest) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *CreatePaymentLineRequest) GetUnitPrice() CreatePaymentUnitPriceRequest {
	if o == nil {
		return CreatePaymentUnitPriceRequest{}
	}
	return o.UnitPrice
}

func (o *CreatePaymentLineRequest) GetDiscountAmount() *CreatePaymentDiscountAmountRequest {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *CreatePaymentLineRequest) GetTotalAmount() CreatePaymentTotalAmountRequest {
	if o == nil {
		return CreatePaymentTotalAmountRequest{}
	}
	return o.TotalAmount
}

func (o *CreatePaymentLineRequest) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *CreatePaymentLineRequest) GetVatAmount() *CreatePaymentVatAmountRequest {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *CreatePaymentLineRequest) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *CreatePaymentLineRequest) GetCategories() []CreatePaymentCategoryRequest {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *CreatePaymentLineRequest) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *CreatePaymentLineRequest) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}

func (o *CreatePaymentLineRequest) GetRecurring() *CreatePaymentRecurringRequest {
	if o == nil {
		return nil
	}
	return o.Recurring
}

// CreatePaymentBillingAddressRequest - The customer's billing address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
//
// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
type CreatePaymentBillingAddressRequest struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *CreatePaymentBillingAddressRequest) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CreatePaymentBillingAddressRequest) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *CreatePaymentBillingAddressRequest) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *CreatePaymentBillingAddressRequest) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *CreatePaymentBillingAddressRequest) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *CreatePaymentBillingAddressRequest) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *CreatePaymentBillingAddressRequest) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *CreatePaymentBillingAddressRequest) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreatePaymentBillingAddressRequest) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *CreatePaymentBillingAddressRequest) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *CreatePaymentBillingAddressRequest) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *CreatePaymentBillingAddressRequest) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// CreatePaymentShippingAddressRequest - The customer's shipping address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
type CreatePaymentShippingAddressRequest struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *CreatePaymentShippingAddressRequest) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CreatePaymentShippingAddressRequest) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *CreatePaymentShippingAddressRequest) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *CreatePaymentShippingAddressRequest) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *CreatePaymentShippingAddressRequest) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *CreatePaymentShippingAddressRequest) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *CreatePaymentShippingAddressRequest) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *CreatePaymentShippingAddressRequest) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreatePaymentShippingAddressRequest) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *CreatePaymentShippingAddressRequest) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *CreatePaymentShippingAddressRequest) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *CreatePaymentShippingAddressRequest) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// CreatePaymentLocaleRequest - Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
// locale, but our hosted payment pages currently only support the specified languages.
//
// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
// customer use a local bank account greatly increases the conversion and speed of payment.
type CreatePaymentLocaleRequest string

const (
	CreatePaymentLocaleRequestEnUs CreatePaymentLocaleRequest = "en_US"
	CreatePaymentLocaleRequestEnGb CreatePaymentLocaleRequest = "en_GB"
	CreatePaymentLocaleRequestNlNl CreatePaymentLocaleRequest = "nl_NL"
	CreatePaymentLocaleRequestNlBe CreatePaymentLocaleRequest = "nl_BE"
	CreatePaymentLocaleRequestDeDe CreatePaymentLocaleRequest = "de_DE"
	CreatePaymentLocaleRequestDeAt CreatePaymentLocaleRequest = "de_AT"
	CreatePaymentLocaleRequestDeCh CreatePaymentLocaleRequest = "de_CH"
	CreatePaymentLocaleRequestFrFr CreatePaymentLocaleRequest = "fr_FR"
	CreatePaymentLocaleRequestFrBe CreatePaymentLocaleRequest = "fr_BE"
	CreatePaymentLocaleRequestEsEs CreatePaymentLocaleRequest = "es_ES"
	CreatePaymentLocaleRequestCaEs CreatePaymentLocaleRequest = "ca_ES"
	CreatePaymentLocaleRequestPtPt CreatePaymentLocaleRequest = "pt_PT"
	CreatePaymentLocaleRequestItIt CreatePaymentLocaleRequest = "it_IT"
	CreatePaymentLocaleRequestNbNo CreatePaymentLocaleRequest = "nb_NO"
	CreatePaymentLocaleRequestSvSe CreatePaymentLocaleRequest = "sv_SE"
	CreatePaymentLocaleRequestFiFi CreatePaymentLocaleRequest = "fi_FI"
	CreatePaymentLocaleRequestDaDk CreatePaymentLocaleRequest = "da_DK"
	CreatePaymentLocaleRequestIsIs CreatePaymentLocaleRequest = "is_IS"
	CreatePaymentLocaleRequestHuHu CreatePaymentLocaleRequest = "hu_HU"
	CreatePaymentLocaleRequestPlPl CreatePaymentLocaleRequest = "pl_PL"
	CreatePaymentLocaleRequestLvLv CreatePaymentLocaleRequest = "lv_LV"
	CreatePaymentLocaleRequestLtLt CreatePaymentLocaleRequest = "lt_LT"
)

func (e CreatePaymentLocaleRequest) ToPointer() *CreatePaymentLocaleRequest {
	return &e
}
func (e *CreatePaymentLocaleRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		fallthrough
	case "es_ES":
		fallthrough
	case "ca_ES":
		fallthrough
	case "pt_PT":
		fallthrough
	case "it_IT":
		fallthrough
	case "nb_NO":
		fallthrough
	case "sv_SE":
		fallthrough
	case "fi_FI":
		fallthrough
	case "da_DK":
		fallthrough
	case "is_IS":
		fallthrough
	case "hu_HU":
		fallthrough
	case "pl_PL":
		fallthrough
	case "lv_LV":
		fallthrough
	case "lt_LT":
		*e = CreatePaymentLocaleRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentLocaleRequest: %v", v)
	}
}

// CreatePaymentMethodRequest - Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment
// method and your customer will skip the selection screen and is sent directly to the chosen payment method. The
// parameter enables you to fully integrate the payment method selection into your website.
//
// You can also specify the methods in an array. By doing so we will still show the payment method selection screen
// but will only show the methods specified in the array. For example, you can use this functionality to only show
// payment methods from a specific country to your customer `['bancontact', 'belfius']`.
type CreatePaymentMethodRequest string

const (
	CreatePaymentMethodRequestAlma           CreatePaymentMethodRequest = "alma"
	CreatePaymentMethodRequestApplepay       CreatePaymentMethodRequest = "applepay"
	CreatePaymentMethodRequestBacs           CreatePaymentMethodRequest = "bacs"
	CreatePaymentMethodRequestBancomatpay    CreatePaymentMethodRequest = "bancomatpay"
	CreatePaymentMethodRequestBancontact     CreatePaymentMethodRequest = "bancontact"
	CreatePaymentMethodRequestBanktransfer   CreatePaymentMethodRequest = "banktransfer"
	CreatePaymentMethodRequestBelfius        CreatePaymentMethodRequest = "belfius"
	CreatePaymentMethodRequestBillie         CreatePaymentMethodRequest = "billie"
	CreatePaymentMethodRequestBizum          CreatePaymentMethodRequest = "bizum"
	CreatePaymentMethodRequestBlik           CreatePaymentMethodRequest = "blik"
	CreatePaymentMethodRequestCreditcard     CreatePaymentMethodRequest = "creditcard"
	CreatePaymentMethodRequestDirectdebit    CreatePaymentMethodRequest = "directdebit"
	CreatePaymentMethodRequestEps            CreatePaymentMethodRequest = "eps"
	CreatePaymentMethodRequestGiftcard       CreatePaymentMethodRequest = "giftcard"
	CreatePaymentMethodRequestIdeal          CreatePaymentMethodRequest = "ideal"
	CreatePaymentMethodRequestIn3            CreatePaymentMethodRequest = "in3"
	CreatePaymentMethodRequestKbc            CreatePaymentMethodRequest = "kbc"
	CreatePaymentMethodRequestKlarna         CreatePaymentMethodRequest = "klarna"
	CreatePaymentMethodRequestKlarnapaylater CreatePaymentMethodRequest = "klarnapaylater"
	CreatePaymentMethodRequestKlarnapaynow   CreatePaymentMethodRequest = "klarnapaynow"
	CreatePaymentMethodRequestKlarnasliceit  CreatePaymentMethodRequest = "klarnasliceit"
	CreatePaymentMethodRequestMbway          CreatePaymentMethodRequest = "mbway"
	CreatePaymentMethodRequestMultibanco     CreatePaymentMethodRequest = "multibanco"
	CreatePaymentMethodRequestMybank         CreatePaymentMethodRequest = "mybank"
	CreatePaymentMethodRequestPaybybank      CreatePaymentMethodRequest = "paybybank"
	CreatePaymentMethodRequestPayconiq       CreatePaymentMethodRequest = "payconiq"
	CreatePaymentMethodRequestPaypal         CreatePaymentMethodRequest = "paypal"
	CreatePaymentMethodRequestPaysafecard    CreatePaymentMethodRequest = "paysafecard"
	CreatePaymentMethodRequestPointofsale    CreatePaymentMethodRequest = "pointofsale"
	CreatePaymentMethodRequestPrzelewy24     CreatePaymentMethodRequest = "przelewy24"
	CreatePaymentMethodRequestRiverty        CreatePaymentMethodRequest = "riverty"
	CreatePaymentMethodRequestSatispay       CreatePaymentMethodRequest = "satispay"
	CreatePaymentMethodRequestSwish          CreatePaymentMethodRequest = "swish"
	CreatePaymentMethodRequestTrustly        CreatePaymentMethodRequest = "trustly"
	CreatePaymentMethodRequestTwint          CreatePaymentMethodRequest = "twint"
	CreatePaymentMethodRequestVoucher        CreatePaymentMethodRequest = "voucher"
)

func (e CreatePaymentMethodRequest) ToPointer() *CreatePaymentMethodRequest {
	return &e
}
func (e *CreatePaymentMethodRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "applepay":
		fallthrough
	case "bacs":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "kbc":
		fallthrough
	case "klarna":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "pointofsale":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = CreatePaymentMethodRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentMethodRequest: %v", v)
	}
}

type CreatePaymentMetadataRequestType string

const (
	CreatePaymentMetadataRequestTypeStr        CreatePaymentMetadataRequestType = "str"
	CreatePaymentMetadataRequestTypeMapOfAny   CreatePaymentMetadataRequestType = "mapOfAny"
	CreatePaymentMetadataRequestTypeArrayOfStr CreatePaymentMetadataRequestType = "arrayOfStr"
)

// CreatePaymentMetadataRequest - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type CreatePaymentMetadataRequest struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type CreatePaymentMetadataRequestType
}

func CreateCreatePaymentMetadataRequestStr(str string) CreatePaymentMetadataRequest {
	typ := CreatePaymentMetadataRequestTypeStr

	return CreatePaymentMetadataRequest{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreatePaymentMetadataRequestMapOfAny(mapOfAny map[string]any) CreatePaymentMetadataRequest {
	typ := CreatePaymentMetadataRequestTypeMapOfAny

	return CreatePaymentMetadataRequest{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateCreatePaymentMetadataRequestArrayOfStr(arrayOfStr []string) CreatePaymentMetadataRequest {
	typ := CreatePaymentMetadataRequestTypeArrayOfStr

	return CreatePaymentMetadataRequest{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreatePaymentMetadataRequest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CreatePaymentMetadataRequestTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CreatePaymentMetadataRequestTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreatePaymentMetadataRequestTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreatePaymentMetadataRequest", string(data))
}

func (u CreatePaymentMetadataRequest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreatePaymentMetadataRequest: all fields are null")
}

// CreatePaymentCaptureModeRequest - Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
// and capture at a later time.
//
// This field needs to be set to `manual` for method `riverty`.
type CreatePaymentCaptureModeRequest string

const (
	CreatePaymentCaptureModeRequestAutomatic CreatePaymentCaptureModeRequest = "automatic"
	CreatePaymentCaptureModeRequestManual    CreatePaymentCaptureModeRequest = "manual"
)

func (e CreatePaymentCaptureModeRequest) ToPointer() *CreatePaymentCaptureModeRequest {
	return &e
}
func (e *CreatePaymentCaptureModeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automatic":
		fallthrough
	case "manual":
		*e = CreatePaymentCaptureModeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentCaptureModeRequest: %v", v)
	}
}

// CreatePaymentApplicationFeeAmountRequest - The fee that you wish to charge.
//
// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
// a €0.99 fee on a €1.00 payment.
type CreatePaymentApplicationFeeAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentApplicationFeeAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentApplicationFeeAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentApplicationFeeRequest - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
//
// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
// `routing` parameter.
type CreatePaymentApplicationFeeRequest struct {
	// The fee that you wish to charge.
	//
	// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
	// a €0.99 fee on a €1.00 payment.
	Amount *CreatePaymentApplicationFeeAmountRequest `json:"amount,omitempty"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description *string `json:"description,omitempty"`
}

func (o *CreatePaymentApplicationFeeRequest) GetAmount() *CreatePaymentApplicationFeeAmountRequest {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CreatePaymentApplicationFeeRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// CreatePaymentRoutingAmountRequest - The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
type CreatePaymentRoutingAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentRoutingAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentRoutingAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentRoutingTypeRequest - The type of destination. Currently only the destination type `organization` is supported.
type CreatePaymentRoutingTypeRequest string

const (
	CreatePaymentRoutingTypeRequestOrganization CreatePaymentRoutingTypeRequest = "organization"
)

func (e CreatePaymentRoutingTypeRequest) ToPointer() *CreatePaymentRoutingTypeRequest {
	return &e
}
func (e *CreatePaymentRoutingTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organization":
		*e = CreatePaymentRoutingTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentRoutingTypeRequest: %v", v)
	}
}

// CreatePaymentDestinationRequest - The destination of this portion of the payment.
type CreatePaymentDestinationRequest struct {
	// The type of destination. Currently only the destination type `organization` is supported.
	Type CreatePaymentRoutingTypeRequest `json:"type"`
	// Required for destination type `organization`. The ID of the connected organization the funds should be
	// routed to.
	OrganizationID string `json:"organizationId"`
}

func (o *CreatePaymentDestinationRequest) GetType() CreatePaymentRoutingTypeRequest {
	if o == nil {
		return CreatePaymentRoutingTypeRequest("")
	}
	return o.Type
}

func (o *CreatePaymentDestinationRequest) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

// CreatePaymentSelfRequest - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CreatePaymentSelfRequest struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentSelfRequest) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentSelfRequest) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentPaymentRequest - The API resource URL of the [payment](get-payment) that belong to this route.
type CreatePaymentPaymentRequest struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentPaymentRequest) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentPaymentRequest) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentLinksRequest - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type CreatePaymentLinksRequest struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self CreatePaymentSelfRequest `json:"self"`
	// The API resource URL of the [payment](get-payment) that belong to this route.
	Payment CreatePaymentPaymentRequest `json:"payment"`
}

func (o *CreatePaymentLinksRequest) GetSelf() CreatePaymentSelfRequest {
	if o == nil {
		return CreatePaymentSelfRequest{}
	}
	return o.Self
}

func (o *CreatePaymentLinksRequest) GetPayment() CreatePaymentPaymentRequest {
	if o == nil {
		return CreatePaymentPaymentRequest{}
	}
	return o.Payment
}

type CreatePaymentRoutingRequest struct {
	// The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
	Amount CreatePaymentRoutingAmountRequest `json:"amount"`
	// The destination of this portion of the payment.
	Destination CreatePaymentDestinationRequest `json:"destination"`
	// Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
	// date must be given in `YYYY-MM-DD` format.
	//
	// If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
	ReleaseDate *string `json:"releaseDate,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links CreatePaymentLinksRequest `json:"_links"`
}

func (o *CreatePaymentRoutingRequest) GetAmount() CreatePaymentRoutingAmountRequest {
	if o == nil {
		return CreatePaymentRoutingAmountRequest{}
	}
	return o.Amount
}

func (o *CreatePaymentRoutingRequest) GetDestination() CreatePaymentDestinationRequest {
	if o == nil {
		return CreatePaymentDestinationRequest{}
	}
	return o.Destination
}

func (o *CreatePaymentRoutingRequest) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *CreatePaymentRoutingRequest) GetLinks() CreatePaymentLinksRequest {
	if o == nil {
		return CreatePaymentLinksRequest{}
	}
	return o.Links
}

// CreatePaymentSequenceTypeRequest - **Only relevant for recurring payments.**
//
// Indicate which part of a recurring sequence this payment is for.
//
// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
// on their account in the future.
//
// If set to `recurring`, the customer's card is charged automatically.
//
// Defaults to `oneoff`, which is a regular non-recurring payment.
//
// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
// are set up correctly for recurring payments.
type CreatePaymentSequenceTypeRequest string

const (
	CreatePaymentSequenceTypeRequestOneoff    CreatePaymentSequenceTypeRequest = "oneoff"
	CreatePaymentSequenceTypeRequestFirst     CreatePaymentSequenceTypeRequest = "first"
	CreatePaymentSequenceTypeRequestRecurring CreatePaymentSequenceTypeRequest = "recurring"
)

func (e CreatePaymentSequenceTypeRequest) ToPointer() *CreatePaymentSequenceTypeRequest {
	return &e
}
func (e *CreatePaymentSequenceTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oneoff":
		fallthrough
	case "first":
		fallthrough
	case "recurring":
		*e = CreatePaymentSequenceTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentSequenceTypeRequest: %v", v)
	}
}

// CreatePaymentCompany - Billie is a business-to-business (B2B) payment method. It requires extra information to identify the organization
// that is completing the payment. It is recommended to include these parameters up front for a seamless flow.
// Otherwise, Billie will ask the customer to complete the missing fields during checkout.
type CreatePaymentCompany struct {
	// The organization's registration number.
	RegistrationNumber *string `json:"registrationNumber,omitempty"`
	// The organization's VAT number.
	VatNumber *string `json:"vatNumber,omitempty"`
	// The organization's entity type.
	EntityType *string `json:"entityType,omitempty"`
}

func (o *CreatePaymentCompany) GetRegistrationNumber() *string {
	if o == nil {
		return nil
	}
	return o.RegistrationNumber
}

func (o *CreatePaymentCompany) GetVatNumber() *string {
	if o == nil {
		return nil
	}
	return o.VatNumber
}

func (o *CreatePaymentCompany) GetEntityType() *string {
	if o == nil {
		return nil
	}
	return o.EntityType
}

type CreatePaymentRequestBody struct {
	// The description of the payment. This will be shown to your customer on their card or bank statement when possible.
	// We truncate the description automatically according to the limits of the used payment method. The description is
	// also visible in any exports you generate.
	//
	// We recommend you use a unique identifier so that you can always link the payment to the order in your back office.
	// This is particularly useful for bookkeeping.
	//
	// The maximum length of the description field differs per payment method, with the absolute maximum being 255
	// characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
	Description string `json:"description"`
	// The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
	//
	// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
	// retrieved using the Get method endpoint.
	//
	// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
	// tip amount.
	Amount CreatePaymentAmountRequest `json:"amount"`
	// The URL your customer will be redirected to after the payment process.
	//
	// It could make sense for the redirectUrl to contain a unique identifier – like your order ID – so you can show the
	// right page referencing the order when your customer returns.
	//
	// The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for
	// Apple Pay payments with an `applePayPaymentToken`.
	RedirectURL *string `json:"redirectUrl"`
	// The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not
	// provided, the customer will be redirected to the `redirectUrl` instead — see above.
	//
	// Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is
	// therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle
	// payment cancellations.
	CancelURL *string `json:"cancelUrl,omitempty"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines []CreatePaymentLineRequest `json:"lines,omitempty"`
	// The customer's billing address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	//
	// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
	BillingAddress *CreatePaymentBillingAddressRequest `json:"billingAddress,omitempty"`
	// The customer's shipping address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	ShippingAddress *CreatePaymentShippingAddressRequest `json:"shippingAddress,omitempty"`
	// Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
	// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
	// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
	// locale, but our hosted payment pages currently only support the specified languages.
	//
	// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
	// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
	// customer use a local bank account greatly increases the conversion and speed of payment.
	Locale *CreatePaymentLocaleRequest `json:"locale,omitempty"`
	// Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment
	// method and your customer will skip the selection screen and is sent directly to the chosen payment method. The
	// parameter enables you to fully integrate the payment method selection into your website.
	//
	// You can also specify the methods in an array. By doing so we will still show the payment method selection screen
	// but will only show the methods specified in the array. For example, you can use this functionality to only show
	// payment methods from a specific country to your customer `['bancontact', 'belfius']`.
	Method *CreatePaymentMethodRequest `json:"method,omitempty"`
	// **Only relevant for iDEAL, KBC/CBC, gift card, and voucher payments.**
	//
	// **⚠️ With the introduction of iDEAL 2 in 2025, this field will be ignored for iDEAL payments. For more information
	// on the migration, refer to our [help center](https://help.mollie.com/hc/articles/19100313768338-iDEAL-2-0).**
	//
	// Some payment methods are a network of connected banks or card issuers. In these cases, after selecting the payment
	// method, the customer may still need to select the appropriate issuer before the payment can proceed.
	//
	// We provide hosted issuer selection screens, but these screens can be skipped by providing the `issuer` via the API
	// up front.
	//
	// The full list of issuers for a specific method can be retrieved via the Methods API by using the optional
	// `issuers` include.
	//
	// A valid issuer for iDEAL is for example `ideal_INGBNL2A` (for ING Bank).
	Issuer *string `json:"issuer,omitempty"`
	// For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT
	// rates you have used for the order to ensure your customer's country matches the VAT country.
	//
	// Use this parameter to restrict the payment methods available to your customer to those from a single country.
	//
	// If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
	//
	// The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
	RestrictPaymentMethodsToCountry *string `json:"restrictPaymentMethodsToCountry,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *CreatePaymentMetadataRequest `json:"metadata,omitempty"`
	// Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
	// and capture at a later time.
	//
	// This field needs to be set to `manual` for method `riverty`.
	CaptureMode *CreatePaymentCaptureModeRequest `json:"captureMode,omitempty"`
	// **Only relevant if you wish to manage authorization and capturing separately.**
	//
	// Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a
	// later point either be 'captured' or canceled.
	//
	// By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a
	// capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For
	// example `8 hours` or `2 days`.
	//
	// To schedule an automatic capture, the `captureMode` must be set to `automatic`.
	//
	// The maximum delay is 7 days (168 hours).
	//
	// Possible values: `... hours` `... days`
	CaptureDelay *string `json:"captureDelay,omitempty"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	//
	// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
	// `routing` parameter.
	ApplicationFee *CreatePaymentApplicationFeeRequest `json:"applicationFee,omitempty"`
	// *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
	//
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you create payments on your own account that you want to split between yourself and one or more connected
	// merchants, you can use this `routing` parameter to route the payment accordingly.
	//
	// The `routing` parameter should contain an array of objects, with each object describing the destination for a
	// specific portion of the payment.
	//
	// It is not necessary to indicate in the array which portion goes to yourself. After all portions of the total
	// payment amount have been routed, the amount left will be routed to the current organization automatically.
	//
	// If instead you use OAuth to create payments on a connected merchant's account, refer to the `applicationFee`
	// parameter.
	Routing []CreatePaymentRoutingRequest `json:"routing,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// Indicate which part of a recurring sequence this payment is for.
	//
	// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
	// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
	// on their account in the future.
	//
	// If set to `recurring`, the customer's card is charged automatically.
	//
	// Defaults to `oneoff`, which is a regular non-recurring payment.
	//
	// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
	// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
	// are set up correctly for recurring payments.
	SequenceType *CreatePaymentSequenceTypeRequest `json:"sequenceType,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// When creating recurring payments, the ID of a specific [mandate](get-mandate) can be supplied to indicate which of
	// the customer's accounts should be credited.
	MandateID *string `json:"mandateId,omitempty"`
	// The ID of the [customer](get-customer) the payment is being created for. This is used primarily for recurring
	// payments, but can also be used on regular payments to enable single-click payments.
	//
	// If `sequenceType` is set to `recurring`, this field is required.
	CustomerID *string `json:"customerId,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// When using an API Key, the `profileId` can be omitted since it is linked to the key. However, for OAuth and
	// Organization tokens, the `profileId` is required.
	//
	// For more information, see [Authentication](authentication).
	ProfileID *string `json:"profileId,omitempty"`
	// The date by which the payment should be completed in `YYYY-MM-DD` format
	DueDate *string `json:"dueDate,omitempty"`
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
	// The Apple Pay Payment token object (encoded as JSON) that is part of the result of authorizing a payment request.
	// The token contains the payment information needed to authorize the payment.
	//
	// The object should be passed encoded in a JSON string.
	ApplePayPaymentToken *string `json:"applePayPaymentToken,omitempty"`
	// Billie is a business-to-business (B2B) payment method. It requires extra information to identify the organization
	// that is completing the payment. It is recommended to include these parameters up front for a seamless flow.
	// Otherwise, Billie will ask the customer to complete the missing fields during checkout.
	Company *CreatePaymentCompany `json:"company,omitempty"`
	// When creating credit card payments using Mollie Components, you need to provide the card token you received from
	// the card component in this field. The token represents the customer's card information needed to complete the
	// payment. Note: field only valid for oneoff and first payments. For recurring payments, the customerId alone is
	// enough.
	CardToken *string `json:"cardToken,omitempty"`
	// The card token you received from the card component of Mollie Components. The token represents the customer's card
	// information needed to complete the payment.
	VoucherNumber *string `json:"voucherNumber,omitempty"`
	// The PIN on the gift card. You can supply this to prefill the PIN, if the card has any.
	VoucherPin *string `json:"voucherPin,omitempty"`
	// The customer's date of birth. If not provided via the API, iDeal in3 will ask the customer to provide it during
	// the payment process.
	ConsumerDateOfBirth *types.Date `json:"consumerDateOfBirth,omitempty"`
	// For some industries, additional purchase information can be sent to Klarna to increase the authorization rate.
	// You can submit your extra data in this field if you have agreed upon this with Klarna. This field should be an
	// object containing any of the allowed keys and sub-objects described at the Klarna Developer Documentation.
	ExtraMerchantData map[string]any `json:"extraMerchantData,omitempty"`
	// The unique ID you have used for the PayPal fraud library. You should include this if you use PayPal for an
	// on-demand payment.
	SessionID *string `json:"sessionId,omitempty"`
	// Indicate if you are about to deliver digital goods, such as for example a software license. Setting this parameter
	// can have consequences for your PayPal Seller Protection. Refer to PayPal's documentation for more information.
	DigitalGoods *bool `json:"digitalGoods,omitempty"`
	// Used by paysafecard for customer identification across payments. When you generate a customer reference yourself,
	// make sure not to put personal identifiable information or IP addresses in the customer reference directly.
	CustomerReference *string `json:"customerReference,omitempty"`
	// The ID of the terminal device where you want to initiate the payment on.
	TerminalID *string `json:"terminalId,omitempty"`
}

func (c CreatePaymentRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePaymentRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"description", "amount", "redirectUrl"}); err != nil {
		return err
	}
	return nil
}

func (o *CreatePaymentRequestBody) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CreatePaymentRequestBody) GetAmount() CreatePaymentAmountRequest {
	if o == nil {
		return CreatePaymentAmountRequest{}
	}
	return o.Amount
}

func (o *CreatePaymentRequestBody) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *CreatePaymentRequestBody) GetCancelURL() *string {
	if o == nil {
		return nil
	}
	return o.CancelURL
}

func (o *CreatePaymentRequestBody) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *CreatePaymentRequestBody) GetLines() []CreatePaymentLineRequest {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *CreatePaymentRequestBody) GetBillingAddress() *CreatePaymentBillingAddressRequest {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *CreatePaymentRequestBody) GetShippingAddress() *CreatePaymentShippingAddressRequest {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *CreatePaymentRequestBody) GetLocale() *CreatePaymentLocaleRequest {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *CreatePaymentRequestBody) GetMethod() *CreatePaymentMethodRequest {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CreatePaymentRequestBody) GetIssuer() *string {
	if o == nil {
		return nil
	}
	return o.Issuer
}

func (o *CreatePaymentRequestBody) GetRestrictPaymentMethodsToCountry() *string {
	if o == nil {
		return nil
	}
	return o.RestrictPaymentMethodsToCountry
}

func (o *CreatePaymentRequestBody) GetMetadata() *CreatePaymentMetadataRequest {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreatePaymentRequestBody) GetCaptureMode() *CreatePaymentCaptureModeRequest {
	if o == nil {
		return nil
	}
	return o.CaptureMode
}

func (o *CreatePaymentRequestBody) GetCaptureDelay() *string {
	if o == nil {
		return nil
	}
	return o.CaptureDelay
}

func (o *CreatePaymentRequestBody) GetApplicationFee() *CreatePaymentApplicationFeeRequest {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *CreatePaymentRequestBody) GetRouting() []CreatePaymentRoutingRequest {
	if o == nil {
		return nil
	}
	return o.Routing
}

func (o *CreatePaymentRequestBody) GetSequenceType() *CreatePaymentSequenceTypeRequest {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *CreatePaymentRequestBody) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *CreatePaymentRequestBody) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *CreatePaymentRequestBody) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *CreatePaymentRequestBody) GetDueDate() *string {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *CreatePaymentRequestBody) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

func (o *CreatePaymentRequestBody) GetApplePayPaymentToken() *string {
	if o == nil {
		return nil
	}
	return o.ApplePayPaymentToken
}

func (o *CreatePaymentRequestBody) GetCompany() *CreatePaymentCompany {
	if o == nil {
		return nil
	}
	return o.Company
}

func (o *CreatePaymentRequestBody) GetCardToken() *string {
	if o == nil {
		return nil
	}
	return o.CardToken
}

func (o *CreatePaymentRequestBody) GetVoucherNumber() *string {
	if o == nil {
		return nil
	}
	return o.VoucherNumber
}

func (o *CreatePaymentRequestBody) GetVoucherPin() *string {
	if o == nil {
		return nil
	}
	return o.VoucherPin
}

func (o *CreatePaymentRequestBody) GetConsumerDateOfBirth() *types.Date {
	if o == nil {
		return nil
	}
	return o.ConsumerDateOfBirth
}

func (o *CreatePaymentRequestBody) GetExtraMerchantData() map[string]any {
	if o == nil {
		return nil
	}
	return o.ExtraMerchantData
}

func (o *CreatePaymentRequestBody) GetSessionID() *string {
	if o == nil {
		return nil
	}
	return o.SessionID
}

func (o *CreatePaymentRequestBody) GetDigitalGoods() *bool {
	if o == nil {
		return nil
	}
	return o.DigitalGoods
}

func (o *CreatePaymentRequestBody) GetCustomerReference() *string {
	if o == nil {
		return nil
	}
	return o.CustomerReference
}

func (o *CreatePaymentRequestBody) GetTerminalID() *string {
	if o == nil {
		return nil
	}
	return o.TerminalID
}

type CreatePaymentRequest struct {
	// This endpoint allows you to include additional information via the `include` query string parameter.
	Include     *CreatePaymentInclude     `queryParam:"style=form,explode=true,name=include"`
	RequestBody *CreatePaymentRequestBody `request:"mediaType=application/json"`
}

func (o *CreatePaymentRequest) GetInclude() *CreatePaymentInclude {
	if o == nil {
		return nil
	}
	return o.Include
}

func (o *CreatePaymentRequest) GetRequestBody() *CreatePaymentRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// CreatePaymentServiceUnavailableDocumentation - The URL to the generic Mollie API error handling guide.
type CreatePaymentServiceUnavailableDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *CreatePaymentServiceUnavailableDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentServiceUnavailableDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CreatePaymentServiceUnavailableLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation CreatePaymentServiceUnavailableDocumentation `json:"documentation"`
}

func (o *CreatePaymentServiceUnavailableLinks) GetDocumentation() CreatePaymentServiceUnavailableDocumentation {
	if o == nil {
		return CreatePaymentServiceUnavailableDocumentation{}
	}
	return o.Documentation
}

// CreatePaymentUnprocessableEntityDocumentation - The URL to the generic Mollie API error handling guide.
type CreatePaymentUnprocessableEntityDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *CreatePaymentUnprocessableEntityDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentUnprocessableEntityDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CreatePaymentUnprocessableEntityLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation CreatePaymentUnprocessableEntityDocumentation `json:"documentation"`
}

func (o *CreatePaymentUnprocessableEntityLinks) GetDocumentation() CreatePaymentUnprocessableEntityDocumentation {
	if o == nil {
		return CreatePaymentUnprocessableEntityDocumentation{}
	}
	return o.Documentation
}

// CreatePaymentMode - Whether this entity was created in live mode or in test mode.
type CreatePaymentMode string

const (
	CreatePaymentModeLive CreatePaymentMode = "live"
	CreatePaymentModeTest CreatePaymentMode = "test"
)

func (e CreatePaymentMode) ToPointer() *CreatePaymentMode {
	return &e
}
func (e *CreatePaymentMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = CreatePaymentMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentMode: %v", v)
	}
}

// CreatePaymentAmountResponse - The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
//
// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
// retrieved using the Get method endpoint.
//
// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
// tip amount.
type CreatePaymentAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentAmountRefunded - The total amount that is already refunded. Only available when refunds are available for this payment. For some
// payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
// costs for a return shipment to the customer.
type CreatePaymentAmountRefunded struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentAmountRefunded) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentAmountRefunded) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentAmountRemaining - The remaining amount that can be refunded. Only available when refunds are available for this payment.
type CreatePaymentAmountRemaining struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentAmountRemaining) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentAmountRemaining) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentAmountCaptured - The total amount that is already captured for this payment. Only available when this payment supports captures.
type CreatePaymentAmountCaptured struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentAmountCaptured) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentAmountCaptured) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentAmountChargedBack - The total amount that was charged back for this payment. Only available when the total charged back amount is not
// zero.
type CreatePaymentAmountChargedBack struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentAmountChargedBack) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentAmountChargedBack) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentSettlementAmount - This optional field will contain the approximate amount that will be settled to your account, converted to the
// currency your account is settled in.
//
// Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
// settled by Mollie the `settlementAmount` is omitted from the response.
//
// Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
// using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
type CreatePaymentSettlementAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentSettlementAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentSettlementAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentLineTypeResponse - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type CreatePaymentLineTypeResponse string

const (
	CreatePaymentLineTypeResponsePhysical    CreatePaymentLineTypeResponse = "physical"
	CreatePaymentLineTypeResponseDigital     CreatePaymentLineTypeResponse = "digital"
	CreatePaymentLineTypeResponseShippingFee CreatePaymentLineTypeResponse = "shipping_fee"
	CreatePaymentLineTypeResponseDiscount    CreatePaymentLineTypeResponse = "discount"
	CreatePaymentLineTypeResponseStoreCredit CreatePaymentLineTypeResponse = "store_credit"
	CreatePaymentLineTypeResponseGiftCard    CreatePaymentLineTypeResponse = "gift_card"
	CreatePaymentLineTypeResponseSurcharge   CreatePaymentLineTypeResponse = "surcharge"
	CreatePaymentLineTypeResponseTip         CreatePaymentLineTypeResponse = "tip"
)

func (e CreatePaymentLineTypeResponse) ToPointer() *CreatePaymentLineTypeResponse {
	return &e
}
func (e *CreatePaymentLineTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "physical":
		fallthrough
	case "digital":
		fallthrough
	case "shipping_fee":
		fallthrough
	case "discount":
		fallthrough
	case "store_credit":
		fallthrough
	case "gift_card":
		fallthrough
	case "surcharge":
		fallthrough
	case "tip":
		*e = CreatePaymentLineTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentLineTypeResponse: %v", v)
	}
}

// CreatePaymentUnitPriceResponse - The price of a single item including VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
//
// The unit price can be zero in case of free items.
type CreatePaymentUnitPriceResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentUnitPriceResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentUnitPriceResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentDiscountAmountResponse - Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
// type.
type CreatePaymentDiscountAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentDiscountAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentDiscountAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentTotalAmountResponse - The total amount of the line, including VAT and discounts.
//
// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
//
// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
type CreatePaymentTotalAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentTotalAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentTotalAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentVatAmountResponse - The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
//
// Any deviations from this will result in an error.
//
// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
// `SEK 100.00 × (25 / 125) = SEK 20.00`.
type CreatePaymentVatAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentVatAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentVatAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreatePaymentCategoryResponse string

const (
	CreatePaymentCategoryResponseMeal         CreatePaymentCategoryResponse = "meal"
	CreatePaymentCategoryResponseEco          CreatePaymentCategoryResponse = "eco"
	CreatePaymentCategoryResponseGift         CreatePaymentCategoryResponse = "gift"
	CreatePaymentCategoryResponseSportCulture CreatePaymentCategoryResponse = "sport_culture"
)

func (e CreatePaymentCategoryResponse) ToPointer() *CreatePaymentCategoryResponse {
	return &e
}
func (e *CreatePaymentCategoryResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "meal":
		fallthrough
	case "eco":
		fallthrough
	case "gift":
		fallthrough
	case "sport_culture":
		*e = CreatePaymentCategoryResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentCategoryResponse: %v", v)
	}
}

// CreatePaymentRecurringAmountResponse - Total amount and currency of the recurring item.
type CreatePaymentRecurringAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentRecurringAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentRecurringAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentRecurringResponse - The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
// to inform the shopper of the details for recurring products in the payments.
type CreatePaymentRecurringResponse struct {
	// A description of the recurring item. If not present, the main description of the item will be used.
	Description *string `json:"description,omitempty"`
	// Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval string `json:"interval"`
	// Total amount and currency of the recurring item.
	Amount *CreatePaymentRecurringAmountResponse `json:"amount,omitempty"`
	// Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
	Times *int64 `json:"times,omitempty"`
	// The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
	StartDate *string `json:"startDate,omitempty"`
}

func (o *CreatePaymentRecurringResponse) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreatePaymentRecurringResponse) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *CreatePaymentRecurringResponse) GetAmount() *CreatePaymentRecurringAmountResponse {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CreatePaymentRecurringResponse) GetTimes() *int64 {
	if o == nil {
		return nil
	}
	return o.Times
}

func (o *CreatePaymentRecurringResponse) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

type CreatePaymentLineResponse struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *CreatePaymentLineTypeResponse `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// The price of a single item including VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
	//
	// The unit price can be zero in case of free items.
	UnitPrice CreatePaymentUnitPriceResponse `json:"unitPrice"`
	// Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
	// type.
	DiscountAmount *CreatePaymentDiscountAmountResponse `json:"discountAmount,omitempty"`
	// The total amount of the line, including VAT and discounts.
	//
	// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
	//
	// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
	TotalAmount CreatePaymentTotalAmountResponse `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
	// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
	//
	// Any deviations from this will result in an error.
	//
	// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
	// `SEK 100.00 × (25 / 125) = SEK 20.00`.
	VatAmount *CreatePaymentVatAmountResponse `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []CreatePaymentCategoryResponse `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string `json:"productUrl,omitempty"`
	// The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
	// to inform the shopper of the details for recurring products in the payments.
	Recurring *CreatePaymentRecurringResponse `json:"recurring,omitempty"`
}

func (o *CreatePaymentLineResponse) GetType() *CreatePaymentLineTypeResponse {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreatePaymentLineResponse) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CreatePaymentLineResponse) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *CreatePaymentLineResponse) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *CreatePaymentLineResponse) GetUnitPrice() CreatePaymentUnitPriceResponse {
	if o == nil {
		return CreatePaymentUnitPriceResponse{}
	}
	return o.UnitPrice
}

func (o *CreatePaymentLineResponse) GetDiscountAmount() *CreatePaymentDiscountAmountResponse {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *CreatePaymentLineResponse) GetTotalAmount() CreatePaymentTotalAmountResponse {
	if o == nil {
		return CreatePaymentTotalAmountResponse{}
	}
	return o.TotalAmount
}

func (o *CreatePaymentLineResponse) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *CreatePaymentLineResponse) GetVatAmount() *CreatePaymentVatAmountResponse {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *CreatePaymentLineResponse) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *CreatePaymentLineResponse) GetCategories() []CreatePaymentCategoryResponse {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *CreatePaymentLineResponse) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *CreatePaymentLineResponse) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}

func (o *CreatePaymentLineResponse) GetRecurring() *CreatePaymentRecurringResponse {
	if o == nil {
		return nil
	}
	return o.Recurring
}

// CreatePaymentBillingAddressResponse - The customer's billing address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
//
// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
type CreatePaymentBillingAddressResponse struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *CreatePaymentBillingAddressResponse) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CreatePaymentBillingAddressResponse) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *CreatePaymentBillingAddressResponse) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *CreatePaymentBillingAddressResponse) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *CreatePaymentBillingAddressResponse) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *CreatePaymentBillingAddressResponse) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *CreatePaymentBillingAddressResponse) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *CreatePaymentBillingAddressResponse) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreatePaymentBillingAddressResponse) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *CreatePaymentBillingAddressResponse) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *CreatePaymentBillingAddressResponse) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *CreatePaymentBillingAddressResponse) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// CreatePaymentShippingAddressResponse - The customer's shipping address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
type CreatePaymentShippingAddressResponse struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *CreatePaymentShippingAddressResponse) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CreatePaymentShippingAddressResponse) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *CreatePaymentShippingAddressResponse) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *CreatePaymentShippingAddressResponse) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *CreatePaymentShippingAddressResponse) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *CreatePaymentShippingAddressResponse) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *CreatePaymentShippingAddressResponse) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *CreatePaymentShippingAddressResponse) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreatePaymentShippingAddressResponse) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *CreatePaymentShippingAddressResponse) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *CreatePaymentShippingAddressResponse) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *CreatePaymentShippingAddressResponse) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// CreatePaymentLocaleResponse - Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
// locale, but our hosted payment pages currently only support the specified languages.
//
// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
// customer use a local bank account greatly increases the conversion and speed of payment.
type CreatePaymentLocaleResponse string

const (
	CreatePaymentLocaleResponseEnUs CreatePaymentLocaleResponse = "en_US"
	CreatePaymentLocaleResponseEnGb CreatePaymentLocaleResponse = "en_GB"
	CreatePaymentLocaleResponseNlNl CreatePaymentLocaleResponse = "nl_NL"
	CreatePaymentLocaleResponseNlBe CreatePaymentLocaleResponse = "nl_BE"
	CreatePaymentLocaleResponseDeDe CreatePaymentLocaleResponse = "de_DE"
	CreatePaymentLocaleResponseDeAt CreatePaymentLocaleResponse = "de_AT"
	CreatePaymentLocaleResponseDeCh CreatePaymentLocaleResponse = "de_CH"
	CreatePaymentLocaleResponseFrFr CreatePaymentLocaleResponse = "fr_FR"
	CreatePaymentLocaleResponseFrBe CreatePaymentLocaleResponse = "fr_BE"
	CreatePaymentLocaleResponseEsEs CreatePaymentLocaleResponse = "es_ES"
	CreatePaymentLocaleResponseCaEs CreatePaymentLocaleResponse = "ca_ES"
	CreatePaymentLocaleResponsePtPt CreatePaymentLocaleResponse = "pt_PT"
	CreatePaymentLocaleResponseItIt CreatePaymentLocaleResponse = "it_IT"
	CreatePaymentLocaleResponseNbNo CreatePaymentLocaleResponse = "nb_NO"
	CreatePaymentLocaleResponseSvSe CreatePaymentLocaleResponse = "sv_SE"
	CreatePaymentLocaleResponseFiFi CreatePaymentLocaleResponse = "fi_FI"
	CreatePaymentLocaleResponseDaDk CreatePaymentLocaleResponse = "da_DK"
	CreatePaymentLocaleResponseIsIs CreatePaymentLocaleResponse = "is_IS"
	CreatePaymentLocaleResponseHuHu CreatePaymentLocaleResponse = "hu_HU"
	CreatePaymentLocaleResponsePlPl CreatePaymentLocaleResponse = "pl_PL"
	CreatePaymentLocaleResponseLvLv CreatePaymentLocaleResponse = "lv_LV"
	CreatePaymentLocaleResponseLtLt CreatePaymentLocaleResponse = "lt_LT"
)

func (e CreatePaymentLocaleResponse) ToPointer() *CreatePaymentLocaleResponse {
	return &e
}
func (e *CreatePaymentLocaleResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		fallthrough
	case "es_ES":
		fallthrough
	case "ca_ES":
		fallthrough
	case "pt_PT":
		fallthrough
	case "it_IT":
		fallthrough
	case "nb_NO":
		fallthrough
	case "sv_SE":
		fallthrough
	case "fi_FI":
		fallthrough
	case "da_DK":
		fallthrough
	case "is_IS":
		fallthrough
	case "hu_HU":
		fallthrough
	case "pl_PL":
		fallthrough
	case "lv_LV":
		fallthrough
	case "lt_LT":
		*e = CreatePaymentLocaleResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentLocaleResponse: %v", v)
	}
}

// CreatePaymentMethodResponse - The payment method used for this transaction. If a specific method was selected during payment initialization,
// this field reflects that choice.
type CreatePaymentMethodResponse string

const (
	CreatePaymentMethodResponseAlma           CreatePaymentMethodResponse = "alma"
	CreatePaymentMethodResponseApplepay       CreatePaymentMethodResponse = "applepay"
	CreatePaymentMethodResponseBacs           CreatePaymentMethodResponse = "bacs"
	CreatePaymentMethodResponseBancomatpay    CreatePaymentMethodResponse = "bancomatpay"
	CreatePaymentMethodResponseBancontact     CreatePaymentMethodResponse = "bancontact"
	CreatePaymentMethodResponseBanktransfer   CreatePaymentMethodResponse = "banktransfer"
	CreatePaymentMethodResponseBelfius        CreatePaymentMethodResponse = "belfius"
	CreatePaymentMethodResponseBillie         CreatePaymentMethodResponse = "billie"
	CreatePaymentMethodResponseBizum          CreatePaymentMethodResponse = "bizum"
	CreatePaymentMethodResponseBlik           CreatePaymentMethodResponse = "blik"
	CreatePaymentMethodResponseCreditcard     CreatePaymentMethodResponse = "creditcard"
	CreatePaymentMethodResponseDirectdebit    CreatePaymentMethodResponse = "directdebit"
	CreatePaymentMethodResponseEps            CreatePaymentMethodResponse = "eps"
	CreatePaymentMethodResponseGiftcard       CreatePaymentMethodResponse = "giftcard"
	CreatePaymentMethodResponseIdeal          CreatePaymentMethodResponse = "ideal"
	CreatePaymentMethodResponseIn3            CreatePaymentMethodResponse = "in3"
	CreatePaymentMethodResponseKbc            CreatePaymentMethodResponse = "kbc"
	CreatePaymentMethodResponseKlarna         CreatePaymentMethodResponse = "klarna"
	CreatePaymentMethodResponseKlarnapaylater CreatePaymentMethodResponse = "klarnapaylater"
	CreatePaymentMethodResponseKlarnapaynow   CreatePaymentMethodResponse = "klarnapaynow"
	CreatePaymentMethodResponseKlarnasliceit  CreatePaymentMethodResponse = "klarnasliceit"
	CreatePaymentMethodResponseMbway          CreatePaymentMethodResponse = "mbway"
	CreatePaymentMethodResponseMultibanco     CreatePaymentMethodResponse = "multibanco"
	CreatePaymentMethodResponseMybank         CreatePaymentMethodResponse = "mybank"
	CreatePaymentMethodResponsePaybybank      CreatePaymentMethodResponse = "paybybank"
	CreatePaymentMethodResponsePayconiq       CreatePaymentMethodResponse = "payconiq"
	CreatePaymentMethodResponsePaypal         CreatePaymentMethodResponse = "paypal"
	CreatePaymentMethodResponsePaysafecard    CreatePaymentMethodResponse = "paysafecard"
	CreatePaymentMethodResponsePointofsale    CreatePaymentMethodResponse = "pointofsale"
	CreatePaymentMethodResponsePrzelewy24     CreatePaymentMethodResponse = "przelewy24"
	CreatePaymentMethodResponseRiverty        CreatePaymentMethodResponse = "riverty"
	CreatePaymentMethodResponseSatispay       CreatePaymentMethodResponse = "satispay"
	CreatePaymentMethodResponseSwish          CreatePaymentMethodResponse = "swish"
	CreatePaymentMethodResponseTrustly        CreatePaymentMethodResponse = "trustly"
	CreatePaymentMethodResponseTwint          CreatePaymentMethodResponse = "twint"
	CreatePaymentMethodResponseVoucher        CreatePaymentMethodResponse = "voucher"
)

func (e CreatePaymentMethodResponse) ToPointer() *CreatePaymentMethodResponse {
	return &e
}
func (e *CreatePaymentMethodResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "applepay":
		fallthrough
	case "bacs":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "kbc":
		fallthrough
	case "klarna":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "pointofsale":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = CreatePaymentMethodResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentMethodResponse: %v", v)
	}
}

type CreatePaymentMetadataResponseType string

const (
	CreatePaymentMetadataResponseTypeStr        CreatePaymentMetadataResponseType = "str"
	CreatePaymentMetadataResponseTypeMapOfAny   CreatePaymentMetadataResponseType = "mapOfAny"
	CreatePaymentMetadataResponseTypeArrayOfStr CreatePaymentMetadataResponseType = "arrayOfStr"
)

// CreatePaymentMetadataResponse - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type CreatePaymentMetadataResponse struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type CreatePaymentMetadataResponseType
}

func CreateCreatePaymentMetadataResponseStr(str string) CreatePaymentMetadataResponse {
	typ := CreatePaymentMetadataResponseTypeStr

	return CreatePaymentMetadataResponse{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreatePaymentMetadataResponseMapOfAny(mapOfAny map[string]any) CreatePaymentMetadataResponse {
	typ := CreatePaymentMetadataResponseTypeMapOfAny

	return CreatePaymentMetadataResponse{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateCreatePaymentMetadataResponseArrayOfStr(arrayOfStr []string) CreatePaymentMetadataResponse {
	typ := CreatePaymentMetadataResponseTypeArrayOfStr

	return CreatePaymentMetadataResponse{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreatePaymentMetadataResponse) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CreatePaymentMetadataResponseTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CreatePaymentMetadataResponseTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreatePaymentMetadataResponseTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreatePaymentMetadataResponse", string(data))
}

func (u CreatePaymentMetadataResponse) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreatePaymentMetadataResponse: all fields are null")
}

// CreatePaymentCaptureModeResponse - Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
// and capture at a later time.
//
// This field needs to be set to `manual` for method `riverty`.
type CreatePaymentCaptureModeResponse string

const (
	CreatePaymentCaptureModeResponseAutomatic CreatePaymentCaptureModeResponse = "automatic"
	CreatePaymentCaptureModeResponseManual    CreatePaymentCaptureModeResponse = "manual"
)

func (e CreatePaymentCaptureModeResponse) ToPointer() *CreatePaymentCaptureModeResponse {
	return &e
}
func (e *CreatePaymentCaptureModeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automatic":
		fallthrough
	case "manual":
		*e = CreatePaymentCaptureModeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentCaptureModeResponse: %v", v)
	}
}

// CreatePaymentApplicationFeeAmountResponse - The fee that you wish to charge.
//
// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
// a €0.99 fee on a €1.00 payment.
type CreatePaymentApplicationFeeAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentApplicationFeeAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentApplicationFeeAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentApplicationFeeResponse - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
//
// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
// `routing` parameter.
type CreatePaymentApplicationFeeResponse struct {
	// The fee that you wish to charge.
	//
	// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
	// a €0.99 fee on a €1.00 payment.
	Amount *CreatePaymentApplicationFeeAmountResponse `json:"amount,omitempty"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description *string `json:"description,omitempty"`
}

func (o *CreatePaymentApplicationFeeResponse) GetAmount() *CreatePaymentApplicationFeeAmountResponse {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CreatePaymentApplicationFeeResponse) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// CreatePaymentRoutingMode - Whether this entity was created in live mode or in test mode.
type CreatePaymentRoutingMode string

const (
	CreatePaymentRoutingModeLive CreatePaymentRoutingMode = "live"
	CreatePaymentRoutingModeTest CreatePaymentRoutingMode = "test"
)

func (e CreatePaymentRoutingMode) ToPointer() *CreatePaymentRoutingMode {
	return &e
}
func (e *CreatePaymentRoutingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = CreatePaymentRoutingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentRoutingMode: %v", v)
	}
}

// CreatePaymentRoutingAmountResponse - The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
type CreatePaymentRoutingAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentRoutingAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentRoutingAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentRoutingTypeResponse - The type of destination. Currently only the destination type `organization` is supported.
type CreatePaymentRoutingTypeResponse string

const (
	CreatePaymentRoutingTypeResponseOrganization CreatePaymentRoutingTypeResponse = "organization"
)

func (e CreatePaymentRoutingTypeResponse) ToPointer() *CreatePaymentRoutingTypeResponse {
	return &e
}
func (e *CreatePaymentRoutingTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organization":
		*e = CreatePaymentRoutingTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentRoutingTypeResponse: %v", v)
	}
}

// CreatePaymentDestinationResponse - The destination of this portion of the payment.
type CreatePaymentDestinationResponse struct {
	// The type of destination. Currently only the destination type `organization` is supported.
	Type CreatePaymentRoutingTypeResponse `json:"type"`
	// Required for destination type `organization`. The ID of the connected organization the funds should be
	// routed to.
	OrganizationID string `json:"organizationId"`
}

func (o *CreatePaymentDestinationResponse) GetType() CreatePaymentRoutingTypeResponse {
	if o == nil {
		return CreatePaymentRoutingTypeResponse("")
	}
	return o.Type
}

func (o *CreatePaymentDestinationResponse) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

// CreatePaymentRoutingSelfResponse - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CreatePaymentRoutingSelfResponse struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentRoutingSelfResponse) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentRoutingSelfResponse) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentPaymentResponse - The API resource URL of the [payment](get-payment) that belong to this route.
type CreatePaymentPaymentResponse struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentPaymentResponse) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentPaymentResponse) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentRoutingLinksResponse - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type CreatePaymentRoutingLinksResponse struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self CreatePaymentRoutingSelfResponse `json:"self"`
	// The API resource URL of the [payment](get-payment) that belong to this route.
	Payment CreatePaymentPaymentResponse `json:"payment"`
}

func (o *CreatePaymentRoutingLinksResponse) GetSelf() CreatePaymentRoutingSelfResponse {
	if o == nil {
		return CreatePaymentRoutingSelfResponse{}
	}
	return o.Self
}

func (o *CreatePaymentRoutingLinksResponse) GetPayment() CreatePaymentPaymentResponse {
	if o == nil {
		return CreatePaymentPaymentResponse{}
	}
	return o.Payment
}

type CreatePaymentRoutingResponse struct {
	// Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this route. Mollie will always refer to the route by this ID.
	// Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode CreatePaymentRoutingMode `json:"mode"`
	// The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
	Amount CreatePaymentRoutingAmountResponse `json:"amount"`
	// The destination of this portion of the payment.
	Destination CreatePaymentDestinationResponse `json:"destination"`
	// The date and time when the route was created. The date is given in ISO 8601 format.
	CreatedAt string `json:"createdAt"`
	// Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
	// date must be given in `YYYY-MM-DD` format.
	//
	// If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
	ReleaseDate *string `json:"releaseDate,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links CreatePaymentRoutingLinksResponse `json:"_links"`
}

func (o *CreatePaymentRoutingResponse) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *CreatePaymentRoutingResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreatePaymentRoutingResponse) GetMode() CreatePaymentRoutingMode {
	if o == nil {
		return CreatePaymentRoutingMode("")
	}
	return o.Mode
}

func (o *CreatePaymentRoutingResponse) GetAmount() CreatePaymentRoutingAmountResponse {
	if o == nil {
		return CreatePaymentRoutingAmountResponse{}
	}
	return o.Amount
}

func (o *CreatePaymentRoutingResponse) GetDestination() CreatePaymentDestinationResponse {
	if o == nil {
		return CreatePaymentDestinationResponse{}
	}
	return o.Destination
}

func (o *CreatePaymentRoutingResponse) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreatePaymentRoutingResponse) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *CreatePaymentRoutingResponse) GetLinks() CreatePaymentRoutingLinksResponse {
	if o == nil {
		return CreatePaymentRoutingLinksResponse{}
	}
	return o.Links
}

// CreatePaymentSequenceTypeResponse - **Only relevant for recurring payments.**
//
// Indicate which part of a recurring sequence this payment is for.
//
// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
// on their account in the future.
//
// If set to `recurring`, the customer's card is charged automatically.
//
// Defaults to `oneoff`, which is a regular non-recurring payment.
//
// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
// are set up correctly for recurring payments.
type CreatePaymentSequenceTypeResponse string

const (
	CreatePaymentSequenceTypeResponseOneoff    CreatePaymentSequenceTypeResponse = "oneoff"
	CreatePaymentSequenceTypeResponseFirst     CreatePaymentSequenceTypeResponse = "first"
	CreatePaymentSequenceTypeResponseRecurring CreatePaymentSequenceTypeResponse = "recurring"
)

func (e CreatePaymentSequenceTypeResponse) ToPointer() *CreatePaymentSequenceTypeResponse {
	return &e
}
func (e *CreatePaymentSequenceTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oneoff":
		fallthrough
	case "first":
		fallthrough
	case "recurring":
		*e = CreatePaymentSequenceTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentSequenceTypeResponse: %v", v)
	}
}

// CreatePaymentStatusEnum - The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
// statuses occur at what point.
type CreatePaymentStatusEnum string

const (
	CreatePaymentStatusEnumOpen       CreatePaymentStatusEnum = "open"
	CreatePaymentStatusEnumPending    CreatePaymentStatusEnum = "pending"
	CreatePaymentStatusEnumAuthorized CreatePaymentStatusEnum = "authorized"
	CreatePaymentStatusEnumPaid       CreatePaymentStatusEnum = "paid"
	CreatePaymentStatusEnumCanceled   CreatePaymentStatusEnum = "canceled"
	CreatePaymentStatusEnumExpired    CreatePaymentStatusEnum = "expired"
	CreatePaymentStatusEnumFailed     CreatePaymentStatusEnum = "failed"
)

func (e CreatePaymentStatusEnum) ToPointer() *CreatePaymentStatusEnum {
	return &e
}
func (e *CreatePaymentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "pending":
		fallthrough
	case "authorized":
		fallthrough
	case "paid":
		fallthrough
	case "canceled":
		fallthrough
	case "expired":
		fallthrough
	case "failed":
		*e = CreatePaymentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentStatusEnum: %v", v)
	}
}

// CreatePaymentCode - A machine-readable code that indicates the reason for the payment's status.
type CreatePaymentCode string

const (
	CreatePaymentCodeApprovedOrCompletedSuccessfully             CreatePaymentCode = "approved_or_completed_successfully"
	CreatePaymentCodeReferToCardIssuer                           CreatePaymentCode = "refer_to_card_issuer"
	CreatePaymentCodeInvalidMerchant                             CreatePaymentCode = "invalid_merchant"
	CreatePaymentCodeCaptureCard                                 CreatePaymentCode = "capture_card"
	CreatePaymentCodeDoNotHonor                                  CreatePaymentCode = "do_not_honor"
	CreatePaymentCodeError                                       CreatePaymentCode = "error"
	CreatePaymentCodePartialApproval                             CreatePaymentCode = "partial_approval"
	CreatePaymentCodeInvalidTransaction                          CreatePaymentCode = "invalid_transaction"
	CreatePaymentCodeInvalidAmount                               CreatePaymentCode = "invalid_amount"
	CreatePaymentCodeInvalidIssuer                               CreatePaymentCode = "invalid_issuer"
	CreatePaymentCodeLostCard                                    CreatePaymentCode = "lost_card"
	CreatePaymentCodeStolenCard                                  CreatePaymentCode = "stolen_card"
	CreatePaymentCodeInsufficientFunds                           CreatePaymentCode = "insufficient_funds"
	CreatePaymentCodeExpiredCard                                 CreatePaymentCode = "expired_card"
	CreatePaymentCodeInvalidPin                                  CreatePaymentCode = "invalid_pin"
	CreatePaymentCodeTransactionNotPermittedToCardholder         CreatePaymentCode = "transaction_not_permitted_to_cardholder"
	CreatePaymentCodeTransactionNotAllowedAtTerminal             CreatePaymentCode = "transaction_not_allowed_at_terminal"
	CreatePaymentCodeExceedsWithdrawalAmountLimit                CreatePaymentCode = "exceeds_withdrawal_amount_limit"
	CreatePaymentCodeRestrictedCard                              CreatePaymentCode = "restricted_card"
	CreatePaymentCodeSecurityViolation                           CreatePaymentCode = "security_violation"
	CreatePaymentCodeExceedsWithdrawalCountLimit                 CreatePaymentCode = "exceeds_withdrawal_count_limit"
	CreatePaymentCodeAllowableNumberOfPinTriesExceeded           CreatePaymentCode = "allowable_number_of_pin_tries_exceeded"
	CreatePaymentCodeNoReasonToDecline                           CreatePaymentCode = "no_reason_to_decline"
	CreatePaymentCodeCannotVerifyPin                             CreatePaymentCode = "cannot_verify_pin"
	CreatePaymentCodeIssuerUnavailable                           CreatePaymentCode = "issuer_unavailable"
	CreatePaymentCodeUnableToRouteTransaction                    CreatePaymentCode = "unable_to_route_transaction"
	CreatePaymentCodeDuplicateTransaction                        CreatePaymentCode = "duplicate_transaction"
	CreatePaymentCodeSystemMalfunction                           CreatePaymentCode = "system_malfunction"
	CreatePaymentCodeHonorWithID                                 CreatePaymentCode = "honor_with_id"
	CreatePaymentCodeInvalidCardNumber                           CreatePaymentCode = "invalid_card_number"
	CreatePaymentCodeFormatError                                 CreatePaymentCode = "format_error"
	CreatePaymentCodeContactCardIssuer                           CreatePaymentCode = "contact_card_issuer"
	CreatePaymentCodePinNotChanged                               CreatePaymentCode = "pin_not_changed"
	CreatePaymentCodeInvalidNonexistentToAccountSpecified        CreatePaymentCode = "invalid_nonexistent_to_account_specified"
	CreatePaymentCodeInvalidNonexistentFromAccountSpecified      CreatePaymentCode = "invalid_nonexistent_from_account_specified"
	CreatePaymentCodeInvalidNonexistentAccountSpecified          CreatePaymentCode = "invalid_nonexistent_account_specified"
	CreatePaymentCodeLifecycleRelated                            CreatePaymentCode = "lifecycle_related"
	CreatePaymentCodeDomesticDebitTransactionNotAllowed          CreatePaymentCode = "domestic_debit_transaction_not_allowed"
	CreatePaymentCodePolicyRelated                               CreatePaymentCode = "policy_related"
	CreatePaymentCodeFraudSecurityRelated                        CreatePaymentCode = "fraud_security_related"
	CreatePaymentCodeInvalidAuthorizationLifeCycle               CreatePaymentCode = "invalid_authorization_life_cycle"
	CreatePaymentCodePurchaseAmountOnlyNoCashBackAllowed         CreatePaymentCode = "purchase_amount_only_no_cash_back_allowed"
	CreatePaymentCodeCryptographicFailure                        CreatePaymentCode = "cryptographic_failure"
	CreatePaymentCodeUnacceptablePin                             CreatePaymentCode = "unacceptable_pin"
	CreatePaymentCodeReferToCardIssuerSpecialCondition           CreatePaymentCode = "refer_to_card_issuer_special_condition"
	CreatePaymentCodePickUpCardSpecialCondition                  CreatePaymentCode = "pick_up_card_special_condition"
	CreatePaymentCodeVipApproval                                 CreatePaymentCode = "vip_approval"
	CreatePaymentCodeInvalidAccountNumber                        CreatePaymentCode = "invalid_account_number"
	CreatePaymentCodeReEnterTransaction                          CreatePaymentCode = "re_enter_transaction"
	CreatePaymentCodeNoActionTaken                               CreatePaymentCode = "no_action_taken"
	CreatePaymentCodeUnableToLocateRecord                        CreatePaymentCode = "unable_to_locate_record"
	CreatePaymentCodeFileTemporarilyUnavailable                  CreatePaymentCode = "file_temporarily_unavailable"
	CreatePaymentCodeNoCreditAccount                             CreatePaymentCode = "no_credit_account"
	CreatePaymentCodeClosedAccount                               CreatePaymentCode = "closed_account"
	CreatePaymentCodeNoCheckingAccount                           CreatePaymentCode = "no_checking_account"
	CreatePaymentCodeNoSavingsAccount                            CreatePaymentCode = "no_savings_account"
	CreatePaymentCodeSuspectedFraud                              CreatePaymentCode = "suspected_fraud"
	CreatePaymentCodeTransactionDoesNotFulfillAmlRequirement     CreatePaymentCode = "transaction_does_not_fulfill_aml_requirement"
	CreatePaymentCodePinDataRequired                             CreatePaymentCode = "pin_data_required"
	CreatePaymentCodeUnableToLocatePreviousMessage               CreatePaymentCode = "unable_to_locate_previous_message"
	CreatePaymentCodePreviousMessageLocatedInconsistentData      CreatePaymentCode = "previous_message_located_inconsistent_data"
	CreatePaymentCodeBlockedFirstUsed                            CreatePaymentCode = "blocked_first_used"
	CreatePaymentCodeTransactionReversed                         CreatePaymentCode = "transaction_reversed"
	CreatePaymentCodeCreditIssuerUnavailable                     CreatePaymentCode = "credit_issuer_unavailable"
	CreatePaymentCodePinCryptographicErrorFound                  CreatePaymentCode = "pin_cryptographic_error_found"
	CreatePaymentCodeNegativeOnlineCamResult                     CreatePaymentCode = "negative_online_cam_result"
	CreatePaymentCodeViolationOfLaw                              CreatePaymentCode = "violation_of_law"
	CreatePaymentCodeForceStip                                   CreatePaymentCode = "force_stip"
	CreatePaymentCodeCashServiceNotAvailable                     CreatePaymentCode = "cash_service_not_available"
	CreatePaymentCodeCashbackRequestExceedsIssuerLimit           CreatePaymentCode = "cashback_request_exceeds_issuer_limit"
	CreatePaymentCodeDeclineForCvv2Failure                       CreatePaymentCode = "decline_for_cvv2_failure"
	CreatePaymentCodeTransactionAmountExceedsPreAuthorizedAmount CreatePaymentCode = "transaction_amount_exceeds_pre_authorized_amount"
	CreatePaymentCodeInvalidBillerInformation                    CreatePaymentCode = "invalid_biller_information"
	CreatePaymentCodePinChangeUnblockRequestDeclined             CreatePaymentCode = "pin_change_unblock_request_declined"
	CreatePaymentCodeUnsafePin                                   CreatePaymentCode = "unsafe_pin"
	CreatePaymentCodeCardAuthenticationFailed                    CreatePaymentCode = "card_authentication_failed"
	CreatePaymentCodeStopPaymentOrder                            CreatePaymentCode = "stop_payment_order"
	CreatePaymentCodeRevocationOfAuthorization                   CreatePaymentCode = "revocation_of_authorization"
	CreatePaymentCodeRevocationOfAllAuthorizations               CreatePaymentCode = "revocation_of_all_authorizations"
	CreatePaymentCodeForwardToIssuerXa                           CreatePaymentCode = "forward_to_issuer_xa"
	CreatePaymentCodeForwardToIssuerXd                           CreatePaymentCode = "forward_to_issuer_xd"
	CreatePaymentCodeUnableToGoOnline                            CreatePaymentCode = "unable_to_go_online"
	CreatePaymentCodeAdditionalCustomerAuthenticationRequired    CreatePaymentCode = "additional_customer_authentication_required"
	CreatePaymentCodeMerchantIDNotFound                          CreatePaymentCode = "merchant_id_not_found"
	CreatePaymentCodeMerchantAccountClosed                       CreatePaymentCode = "merchant_account_closed"
	CreatePaymentCodeTerminalIDNotFound                          CreatePaymentCode = "terminal_id_not_found"
	CreatePaymentCodeTerminalClosed                              CreatePaymentCode = "terminal_closed"
	CreatePaymentCodeInvalidCategoryCode                         CreatePaymentCode = "invalid_category_code"
	CreatePaymentCodeInvalidCurrency                             CreatePaymentCode = "invalid_currency"
	CreatePaymentCodeMissingCvv2Cvc2                             CreatePaymentCode = "missing_cvv2_cvc2"
	CreatePaymentCodeCvv2NotAllowed                              CreatePaymentCode = "cvv2_not_allowed"
	CreatePaymentCodeMerchantNotRegisteredVbv                    CreatePaymentCode = "merchant_not_registered_vbv"
	CreatePaymentCodeMerchantNotRegisteredForAmex                CreatePaymentCode = "merchant_not_registered_for_amex"
	CreatePaymentCodeTransactionNotPermittedAtTerminal           CreatePaymentCode = "transaction_not_permitted_at_terminal"
	CreatePaymentCodeAgreementTerminalNotRelated                 CreatePaymentCode = "agreement_terminal_not_related"
	CreatePaymentCodeInvalidProcessorID                          CreatePaymentCode = "invalid_processor_id"
	CreatePaymentCodeInvalidMerchantData                         CreatePaymentCode = "invalid_merchant_data"
	CreatePaymentCodeSubMerchantAccountClosed                    CreatePaymentCode = "sub_merchant_account_closed"
	CreatePaymentCodeTerminalBusy                                CreatePaymentCode = "terminal_busy"
	CreatePaymentCodeTerminalUnreachable                         CreatePaymentCode = "terminal_unreachable"
	CreatePaymentCodeServiceFailed                               CreatePaymentCode = "service_failed"
	CreatePaymentCodeInvalidOperation                            CreatePaymentCode = "invalid_operation"
	CreatePaymentCodeAuthorizationError                          CreatePaymentCode = "authorization_error"
	CreatePaymentCodeLoginFailedWithoutReason                    CreatePaymentCode = "login_failed_without_reason"
	CreatePaymentCodeInvalidRetailer                             CreatePaymentCode = "invalid_retailer"
	CreatePaymentCodeCardDoesNotExist                            CreatePaymentCode = "card_does_not_exist"
	CreatePaymentCodeCardIsBlocked                               CreatePaymentCode = "card_is_blocked"
	CreatePaymentCodeInvalidCardID                               CreatePaymentCode = "invalid_card_id"
	CreatePaymentCodeCardIsTransferred                           CreatePaymentCode = "card_is_transferred"
	CreatePaymentCodeCardIsNotActive                             CreatePaymentCode = "card_is_not_active"
	CreatePaymentCodeIncorrectPurchaseValue                      CreatePaymentCode = "incorrect_purchase_value"
	CreatePaymentCodeCardNotAvailable                            CreatePaymentCode = "card_not_available"
	CreatePaymentCodeWrongCurrency                               CreatePaymentCode = "wrong_currency"
	CreatePaymentCodeLoginFailedUnknownUser                      CreatePaymentCode = "login_failed_unknown_user"
	CreatePaymentCodeLoginFailedInvalidPassword                  CreatePaymentCode = "login_failed_invalid_password"
	CreatePaymentCodeInvalidEanCode                              CreatePaymentCode = "invalid_ean_code"
)

func (e CreatePaymentCode) ToPointer() *CreatePaymentCode {
	return &e
}
func (e *CreatePaymentCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved_or_completed_successfully":
		fallthrough
	case "refer_to_card_issuer":
		fallthrough
	case "invalid_merchant":
		fallthrough
	case "capture_card":
		fallthrough
	case "do_not_honor":
		fallthrough
	case "error":
		fallthrough
	case "partial_approval":
		fallthrough
	case "invalid_transaction":
		fallthrough
	case "invalid_amount":
		fallthrough
	case "invalid_issuer":
		fallthrough
	case "lost_card":
		fallthrough
	case "stolen_card":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "expired_card":
		fallthrough
	case "invalid_pin":
		fallthrough
	case "transaction_not_permitted_to_cardholder":
		fallthrough
	case "transaction_not_allowed_at_terminal":
		fallthrough
	case "exceeds_withdrawal_amount_limit":
		fallthrough
	case "restricted_card":
		fallthrough
	case "security_violation":
		fallthrough
	case "exceeds_withdrawal_count_limit":
		fallthrough
	case "allowable_number_of_pin_tries_exceeded":
		fallthrough
	case "no_reason_to_decline":
		fallthrough
	case "cannot_verify_pin":
		fallthrough
	case "issuer_unavailable":
		fallthrough
	case "unable_to_route_transaction":
		fallthrough
	case "duplicate_transaction":
		fallthrough
	case "system_malfunction":
		fallthrough
	case "honor_with_id":
		fallthrough
	case "invalid_card_number":
		fallthrough
	case "format_error":
		fallthrough
	case "contact_card_issuer":
		fallthrough
	case "pin_not_changed":
		fallthrough
	case "invalid_nonexistent_to_account_specified":
		fallthrough
	case "invalid_nonexistent_from_account_specified":
		fallthrough
	case "invalid_nonexistent_account_specified":
		fallthrough
	case "lifecycle_related":
		fallthrough
	case "domestic_debit_transaction_not_allowed":
		fallthrough
	case "policy_related":
		fallthrough
	case "fraud_security_related":
		fallthrough
	case "invalid_authorization_life_cycle":
		fallthrough
	case "purchase_amount_only_no_cash_back_allowed":
		fallthrough
	case "cryptographic_failure":
		fallthrough
	case "unacceptable_pin":
		fallthrough
	case "refer_to_card_issuer_special_condition":
		fallthrough
	case "pick_up_card_special_condition":
		fallthrough
	case "vip_approval":
		fallthrough
	case "invalid_account_number":
		fallthrough
	case "re_enter_transaction":
		fallthrough
	case "no_action_taken":
		fallthrough
	case "unable_to_locate_record":
		fallthrough
	case "file_temporarily_unavailable":
		fallthrough
	case "no_credit_account":
		fallthrough
	case "closed_account":
		fallthrough
	case "no_checking_account":
		fallthrough
	case "no_savings_account":
		fallthrough
	case "suspected_fraud":
		fallthrough
	case "transaction_does_not_fulfill_aml_requirement":
		fallthrough
	case "pin_data_required":
		fallthrough
	case "unable_to_locate_previous_message":
		fallthrough
	case "previous_message_located_inconsistent_data":
		fallthrough
	case "blocked_first_used":
		fallthrough
	case "transaction_reversed":
		fallthrough
	case "credit_issuer_unavailable":
		fallthrough
	case "pin_cryptographic_error_found":
		fallthrough
	case "negative_online_cam_result":
		fallthrough
	case "violation_of_law":
		fallthrough
	case "force_stip":
		fallthrough
	case "cash_service_not_available":
		fallthrough
	case "cashback_request_exceeds_issuer_limit":
		fallthrough
	case "decline_for_cvv2_failure":
		fallthrough
	case "transaction_amount_exceeds_pre_authorized_amount":
		fallthrough
	case "invalid_biller_information":
		fallthrough
	case "pin_change_unblock_request_declined":
		fallthrough
	case "unsafe_pin":
		fallthrough
	case "card_authentication_failed":
		fallthrough
	case "stop_payment_order":
		fallthrough
	case "revocation_of_authorization":
		fallthrough
	case "revocation_of_all_authorizations":
		fallthrough
	case "forward_to_issuer_xa":
		fallthrough
	case "forward_to_issuer_xd":
		fallthrough
	case "unable_to_go_online":
		fallthrough
	case "additional_customer_authentication_required":
		fallthrough
	case "merchant_id_not_found":
		fallthrough
	case "merchant_account_closed":
		fallthrough
	case "terminal_id_not_found":
		fallthrough
	case "terminal_closed":
		fallthrough
	case "invalid_category_code":
		fallthrough
	case "invalid_currency":
		fallthrough
	case "missing_cvv2_cvc2":
		fallthrough
	case "cvv2_not_allowed":
		fallthrough
	case "merchant_not_registered_vbv":
		fallthrough
	case "merchant_not_registered_for_amex":
		fallthrough
	case "transaction_not_permitted_at_terminal":
		fallthrough
	case "agreement_terminal_not_related":
		fallthrough
	case "invalid_processor_id":
		fallthrough
	case "invalid_merchant_data":
		fallthrough
	case "sub_merchant_account_closed":
		fallthrough
	case "terminal_busy":
		fallthrough
	case "terminal_unreachable":
		fallthrough
	case "service_failed":
		fallthrough
	case "invalid_operation":
		fallthrough
	case "authorization_error":
		fallthrough
	case "login_failed_without_reason":
		fallthrough
	case "invalid_retailer":
		fallthrough
	case "card_does_not_exist":
		fallthrough
	case "card_is_blocked":
		fallthrough
	case "invalid_card_id":
		fallthrough
	case "card_is_transferred":
		fallthrough
	case "card_is_not_active":
		fallthrough
	case "incorrect_purchase_value":
		fallthrough
	case "card_not_available":
		fallthrough
	case "wrong_currency":
		fallthrough
	case "login_failed_unknown_user":
		fallthrough
	case "login_failed_invalid_password":
		fallthrough
	case "invalid_ean_code":
		*e = CreatePaymentCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentCode: %v", v)
	}
}

// CreatePaymentStatusReason - This object offers details about the status of a payment. Currently it is only available for point-of-sale
// payments.
//
// You can find more information about the possible values of this object on
// [this page](status-reasons).**
type CreatePaymentStatusReason struct {
	Code CreatePaymentCode `json:"code"`
	// A description of the status reason, localized according to the payment `locale`.
	Message string `json:"message"`
}

func (o *CreatePaymentStatusReason) GetCode() CreatePaymentCode {
	if o == nil {
		return CreatePaymentCode("")
	}
	return o.Code
}

func (o *CreatePaymentStatusReason) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

// CreatePaymentCardAudition - The card's target audience, if known.
type CreatePaymentCardAudition string

const (
	CreatePaymentCardAuditionConsumer CreatePaymentCardAudition = "consumer"
	CreatePaymentCardAuditionBusiness CreatePaymentCardAudition = "business"
)

func (e CreatePaymentCardAudition) ToPointer() *CreatePaymentCardAudition {
	return &e
}
func (e *CreatePaymentCardAudition) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "business":
		*e = CreatePaymentCardAudition(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentCardAudition: %v", v)
	}
}

// CreatePaymentCardLabel - The card's label, if known.
type CreatePaymentCardLabel string

const (
	CreatePaymentCardLabelAmericanExpress CreatePaymentCardLabel = "American Express"
	CreatePaymentCardLabelCartaSi         CreatePaymentCardLabel = "Carta Si"
	CreatePaymentCardLabelCarteBleue      CreatePaymentCardLabel = "Carte Bleue"
	CreatePaymentCardLabelDankort         CreatePaymentCardLabel = "Dankort"
	CreatePaymentCardLabelDinersClub      CreatePaymentCardLabel = "Diners Club"
	CreatePaymentCardLabelDiscover        CreatePaymentCardLabel = "Discover"
	CreatePaymentCardLabelJcb             CreatePaymentCardLabel = "JCB"
	CreatePaymentCardLabelLaser           CreatePaymentCardLabel = "Laser"
	CreatePaymentCardLabelMaestro         CreatePaymentCardLabel = "Maestro"
	CreatePaymentCardLabelMastercard      CreatePaymentCardLabel = "Mastercard"
	CreatePaymentCardLabelUnionpay        CreatePaymentCardLabel = "Unionpay"
	CreatePaymentCardLabelVisa            CreatePaymentCardLabel = "Visa"
	CreatePaymentCardLabelVpay            CreatePaymentCardLabel = "Vpay"
)

func (e CreatePaymentCardLabel) ToPointer() *CreatePaymentCardLabel {
	return &e
}
func (e *CreatePaymentCardLabel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "American Express":
		fallthrough
	case "Carta Si":
		fallthrough
	case "Carte Bleue":
		fallthrough
	case "Dankort":
		fallthrough
	case "Diners Club":
		fallthrough
	case "Discover":
		fallthrough
	case "JCB":
		fallthrough
	case "Laser":
		fallthrough
	case "Maestro":
		fallthrough
	case "Mastercard":
		fallthrough
	case "Unionpay":
		fallthrough
	case "Visa":
		fallthrough
	case "Vpay":
		*e = CreatePaymentCardLabel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentCardLabel: %v", v)
	}
}

// CreatePaymentCardFunding - The card type.
type CreatePaymentCardFunding string

const (
	CreatePaymentCardFundingDebit         CreatePaymentCardFunding = "debit"
	CreatePaymentCardFundingCredit        CreatePaymentCardFunding = "credit"
	CreatePaymentCardFundingPrepaid       CreatePaymentCardFunding = "prepaid"
	CreatePaymentCardFundingDeferredDebit CreatePaymentCardFunding = "deferred-debit"
)

func (e CreatePaymentCardFunding) ToPointer() *CreatePaymentCardFunding {
	return &e
}
func (e *CreatePaymentCardFunding) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debit":
		fallthrough
	case "credit":
		fallthrough
	case "prepaid":
		fallthrough
	case "deferred-debit":
		*e = CreatePaymentCardFunding(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentCardFunding: %v", v)
	}
}

// CreatePaymentCardSecurity - The level of security applied during card processing.
type CreatePaymentCardSecurity string

const (
	CreatePaymentCardSecurityNormal       CreatePaymentCardSecurity = "normal"
	CreatePaymentCardSecurityThreedsecure CreatePaymentCardSecurity = "3dsecure"
)

func (e CreatePaymentCardSecurity) ToPointer() *CreatePaymentCardSecurity {
	return &e
}
func (e *CreatePaymentCardSecurity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "normal":
		fallthrough
	case "3dsecure":
		*e = CreatePaymentCardSecurity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentCardSecurity: %v", v)
	}
}

// CreatePaymentFeeRegion - The applicable card fee region.
type CreatePaymentFeeRegion string

const (
	CreatePaymentFeeRegionAmericanExpress  CreatePaymentFeeRegion = "american-express"
	CreatePaymentFeeRegionAmexIntraEea     CreatePaymentFeeRegion = "amex-intra-eea"
	CreatePaymentFeeRegionCarteBancaire    CreatePaymentFeeRegion = "carte-bancaire"
	CreatePaymentFeeRegionIntraEu          CreatePaymentFeeRegion = "intra-eu"
	CreatePaymentFeeRegionIntraEuCorporate CreatePaymentFeeRegion = "intra-eu-corporate"
	CreatePaymentFeeRegionDomestic         CreatePaymentFeeRegion = "domestic"
	CreatePaymentFeeRegionMaestro          CreatePaymentFeeRegion = "maestro"
	CreatePaymentFeeRegionOther            CreatePaymentFeeRegion = "other"
	CreatePaymentFeeRegionInter            CreatePaymentFeeRegion = "inter"
	CreatePaymentFeeRegionIntraEea         CreatePaymentFeeRegion = "intra_eea"
)

func (e CreatePaymentFeeRegion) ToPointer() *CreatePaymentFeeRegion {
	return &e
}
func (e *CreatePaymentFeeRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "american-express":
		fallthrough
	case "amex-intra-eea":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "intra-eu":
		fallthrough
	case "intra-eu-corporate":
		fallthrough
	case "domestic":
		fallthrough
	case "maestro":
		fallthrough
	case "other":
		fallthrough
	case "inter":
		fallthrough
	case "intra_eea":
		*e = CreatePaymentFeeRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentFeeRegion: %v", v)
	}
}

// CreatePaymentFailureReason - A failure code to help understand why the payment failed.
type CreatePaymentFailureReason string

const (
	CreatePaymentFailureReasonAuthenticationAbandoned      CreatePaymentFailureReason = "authentication_abandoned"
	CreatePaymentFailureReasonAuthenticationFailed         CreatePaymentFailureReason = "authentication_failed"
	CreatePaymentFailureReasonAuthenticationRequired       CreatePaymentFailureReason = "authentication_required"
	CreatePaymentFailureReasonAuthenticationUnavailableAcs CreatePaymentFailureReason = "authentication_unavailable_acs"
	CreatePaymentFailureReasonCardDeclined                 CreatePaymentFailureReason = "card_declined"
	CreatePaymentFailureReasonCardExpired                  CreatePaymentFailureReason = "card_expired"
	CreatePaymentFailureReasonInactiveCard                 CreatePaymentFailureReason = "inactive_card"
	CreatePaymentFailureReasonInsufficientFunds            CreatePaymentFailureReason = "insufficient_funds"
	CreatePaymentFailureReasonInvalidCvv                   CreatePaymentFailureReason = "invalid_cvv"
	CreatePaymentFailureReasonInvalidCardHolderName        CreatePaymentFailureReason = "invalid_card_holder_name"
	CreatePaymentFailureReasonInvalidCardNumber            CreatePaymentFailureReason = "invalid_card_number"
	CreatePaymentFailureReasonInvalidCardType              CreatePaymentFailureReason = "invalid_card_type"
	CreatePaymentFailureReasonPossibleFraud                CreatePaymentFailureReason = "possible_fraud"
	CreatePaymentFailureReasonRefusedByIssuer              CreatePaymentFailureReason = "refused_by_issuer"
	CreatePaymentFailureReasonUnknownReason                CreatePaymentFailureReason = "unknown_reason"
)

func (e CreatePaymentFailureReason) ToPointer() *CreatePaymentFailureReason {
	return &e
}
func (e *CreatePaymentFailureReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "authentication_abandoned":
		fallthrough
	case "authentication_failed":
		fallthrough
	case "authentication_required":
		fallthrough
	case "authentication_unavailable_acs":
		fallthrough
	case "card_declined":
		fallthrough
	case "card_expired":
		fallthrough
	case "inactive_card":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "invalid_cvv":
		fallthrough
	case "invalid_card_holder_name":
		fallthrough
	case "invalid_card_number":
		fallthrough
	case "invalid_card_type":
		fallthrough
	case "possible_fraud":
		fallthrough
	case "refused_by_issuer":
		fallthrough
	case "unknown_reason":
		*e = CreatePaymentFailureReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentFailureReason: %v", v)
	}
}

// CreatePaymentWallet - The wallet used when creating the payment.
type CreatePaymentWallet string

const (
	CreatePaymentWalletApplepay CreatePaymentWallet = "applepay"
)

func (e CreatePaymentWallet) ToPointer() *CreatePaymentWallet {
	return &e
}
func (e *CreatePaymentWallet) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "applepay":
		*e = CreatePaymentWallet(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentWallet: %v", v)
	}
}

// CreatePaymentSellerProtection - Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
// payments, and if the information is made available by PayPal.
type CreatePaymentSellerProtection string

const (
	CreatePaymentSellerProtectionEligible                          CreatePaymentSellerProtection = "Eligible"
	CreatePaymentSellerProtectionIneligible                        CreatePaymentSellerProtection = "Ineligible"
	CreatePaymentSellerProtectionPartiallyEligibleInrOnly          CreatePaymentSellerProtection = "Partially Eligible - INR Only"
	CreatePaymentSellerProtectionPartiallyEligibleUnauthOnly       CreatePaymentSellerProtection = "Partially Eligible - Unauth Only"
	CreatePaymentSellerProtectionPartiallyEligible                 CreatePaymentSellerProtection = "Partially Eligible"
	CreatePaymentSellerProtectionNone                              CreatePaymentSellerProtection = "None"
	CreatePaymentSellerProtectionActive                            CreatePaymentSellerProtection = "Active"
	CreatePaymentSellerProtectionFraudControlUnauthPremiumEligible CreatePaymentSellerProtection = "Fraud Control - Unauth Premium Eligible"
)

func (e CreatePaymentSellerProtection) ToPointer() *CreatePaymentSellerProtection {
	return &e
}
func (e *CreatePaymentSellerProtection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Eligible":
		fallthrough
	case "Ineligible":
		fallthrough
	case "Partially Eligible - INR Only":
		fallthrough
	case "Partially Eligible - Unauth Only":
		fallthrough
	case "Partially Eligible":
		fallthrough
	case "None":
		fallthrough
	case "Active":
		fallthrough
	case "Fraud Control - Unauth Premium Eligible":
		*e = CreatePaymentSellerProtection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentSellerProtection: %v", v)
	}
}

// CreatePaymentPaypalFee - An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
// PayPal will not charge a fee for this transaction.
type CreatePaymentPaypalFee struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentPaypalFee) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentPaypalFee) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentCardReadMethod - The method by which the card was read by the terminal.
type CreatePaymentCardReadMethod string

const (
	CreatePaymentCardReadMethodChip                   CreatePaymentCardReadMethod = "chip"
	CreatePaymentCardReadMethodMagneticStripe         CreatePaymentCardReadMethod = "magnetic-stripe"
	CreatePaymentCardReadMethodNearFieldCommunication CreatePaymentCardReadMethod = "near-field-communication"
	CreatePaymentCardReadMethodContactless            CreatePaymentCardReadMethod = "contactless"
	CreatePaymentCardReadMethodMoto                   CreatePaymentCardReadMethod = "moto"
)

func (e CreatePaymentCardReadMethod) ToPointer() *CreatePaymentCardReadMethod {
	return &e
}
func (e *CreatePaymentCardReadMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "chip":
		fallthrough
	case "magnetic-stripe":
		fallthrough
	case "near-field-communication":
		fallthrough
	case "contactless":
		fallthrough
	case "moto":
		*e = CreatePaymentCardReadMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentCardReadMethod: %v", v)
	}
}

// CreatePaymentCardVerificationMethod - The method used to verify the cardholder's identity.
type CreatePaymentCardVerificationMethod string

const (
	CreatePaymentCardVerificationMethodNoCvmRequired         CreatePaymentCardVerificationMethod = "no-cvm-required"
	CreatePaymentCardVerificationMethodOnlinePin             CreatePaymentCardVerificationMethod = "online-pin"
	CreatePaymentCardVerificationMethodOfflinePin            CreatePaymentCardVerificationMethod = "offline-pin"
	CreatePaymentCardVerificationMethodConsumerDevice        CreatePaymentCardVerificationMethod = "consumer-device"
	CreatePaymentCardVerificationMethodSignature             CreatePaymentCardVerificationMethod = "signature"
	CreatePaymentCardVerificationMethodSignatureAndOnlinePin CreatePaymentCardVerificationMethod = "signature-and-online-pin"
	CreatePaymentCardVerificationMethodOnlinePinAndSignature CreatePaymentCardVerificationMethod = "online-pin-and-signature"
	CreatePaymentCardVerificationMethodNone                  CreatePaymentCardVerificationMethod = "none"
	CreatePaymentCardVerificationMethodFailed                CreatePaymentCardVerificationMethod = "failed"
)

func (e CreatePaymentCardVerificationMethod) ToPointer() *CreatePaymentCardVerificationMethod {
	return &e
}
func (e *CreatePaymentCardVerificationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "no-cvm-required":
		fallthrough
	case "online-pin":
		fallthrough
	case "offline-pin":
		fallthrough
	case "consumer-device":
		fallthrough
	case "signature":
		fallthrough
	case "signature-and-online-pin":
		fallthrough
	case "online-pin-and-signature":
		fallthrough
	case "none":
		fallthrough
	case "failed":
		*e = CreatePaymentCardVerificationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentCardVerificationMethod: %v", v)
	}
}

// CreatePaymentReceipt - The Point of sale receipt object.
type CreatePaymentReceipt struct {
	// A unique code provided by the cardholder’s bank to confirm that the transaction was successfully approved.
	AuthorizationCode *string `json:"authorizationCode,omitempty"`
	// The unique number that identifies a specific payment application on a chip card.
	ApplicationIdentifier *string `json:"applicationIdentifier,omitempty"`
	// The method by which the card was read by the terminal.
	CardReadMethod *CreatePaymentCardReadMethod `json:"cardReadMethod,omitempty"`
	// The method used to verify the cardholder's identity.
	CardVerificationMethod *CreatePaymentCardVerificationMethod `json:"cardVerificationMethod,omitempty"`
}

func (o *CreatePaymentReceipt) GetAuthorizationCode() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizationCode
}

func (o *CreatePaymentReceipt) GetApplicationIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationIdentifier
}

func (o *CreatePaymentReceipt) GetCardReadMethod() *CreatePaymentCardReadMethod {
	if o == nil {
		return nil
	}
	return o.CardReadMethod
}

func (o *CreatePaymentReceipt) GetCardVerificationMethod() *CreatePaymentCardVerificationMethod {
	if o == nil {
		return nil
	}
	return o.CardVerificationMethod
}

// CreatePaymentQrCode - Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
// the QR code details will be available in this object.
//
// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
// Bancontact QR payments can be completed by the customer using the Bancontact app.
type CreatePaymentQrCode struct {
	// The height of the QR code image in pixels.
	Height *int64 `json:"height,omitempty"`
	// The width of the QR code image in pixels.
	Width *int64 `json:"width,omitempty"`
	// The URL to the QR code image. The image is a PNG file, and can be displayed directly in the browser or
	// downloaded.
	Src *string `json:"src,omitempty"`
}

func (o *CreatePaymentQrCode) GetHeight() *int64 {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *CreatePaymentQrCode) GetWidth() *int64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *CreatePaymentQrCode) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

// CreatePaymentRemainderAmount - An amount object for the amount that remained after all gift cards or vouchers were applied.
type CreatePaymentRemainderAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentRemainderAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentRemainderAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentDetails - An object containing payment details collected during the payment process. For example, details may include the
// customer's card or bank details and a payment reference. For the full list of details, please refer to the
// [method-specific parameters](extra-payment-parameters) guide.
type CreatePaymentDetails struct {
	// The customer's name, if made available by the payment method. For card payments, refer to details.cardHolder.
	ConsumerName *string `json:"consumerName,omitempty"`
	// The customer's account reference.
	//
	// For banking-based payment methods — such as iDEAL — this is normally either an IBAN or a domestic bank account
	// number.
	//
	// For PayPal, the account reference is an email address.
	//
	// For card and Bancontact payments, refer to details.cardNumber.
	ConsumerAccount *string `json:"consumerAccount,omitempty"`
	// The BIC of the customer's bank account, if applicable.
	ConsumerBic *string `json:"consumerBic,omitempty"`
	// For wallet payment methods — such as Apple Pay and PayPal — the shipping address is often already known by the
	// wallet provider. In these cases the shipping address may be available as a payment detail.
	ShippingAddress map[string]any `json:"shippingAddress,omitempty"`
	// For bancontact, it will be the customer's masked card number. For cards, it will be the last 4-digit of the
	// PAN. For Point-of-sale, it will be the the last 4 digits of the customer's masked card number.
	CardNumber *string `json:"cardNumber,omitempty"`
	// The name of the bank that the customer will need to make the bank transfer payment towards.
	BankName *string `json:"bankName,omitempty"`
	// The bank account number the customer will need to make the bank transfer payment towards.
	BankAccount *string `json:"bankAccount,omitempty"`
	// The BIC of the bank the customer will need to make the bank transfer payment towards.
	BankBic *string `json:"bankBic,omitempty"`
	// The Mollie-generated reference the customer needs to use when transfering the amount. Do not apply any
	// formatting here; show it to the customer as-is.
	TransferReference *string `json:"transferReference,omitempty"`
	// A unique fingerprint for a specific card. Can be used to identify returning customers.
	//
	// In the case of Point-of-sale payments, it's a unique identifier assigned to a cardholder's payment account,
	// linking multiple transactions from wallets and physical card to a single account, also across payment methods
	// or when the card is reissued.
	CardFingerprint *string `json:"cardFingerprint,omitempty"`
	// The customer's name as shown on their card.
	CardHolder *string `json:"cardHolder,omitempty"`
	// The card's target audience, if known.
	CardAudition *CreatePaymentCardAudition `json:"cardAudition,omitempty"`
	// The card's label, if known.
	CardLabel *CreatePaymentCardLabel `json:"cardLabel,omitempty"`
	// The ISO 3166-1 alpha-2 country code of the country the card was issued in.
	CardCountryCode *string `json:"cardCountryCode,omitempty"`
	// The expiry date (MM/YY) of the card as displayed on the card.
	CardExpiryDate *string `json:"cardExpiryDate,omitempty"`
	// The card type.
	CardFunding *CreatePaymentCardFunding `json:"cardFunding,omitempty"`
	// The level of security applied during card processing.
	CardSecurity *CreatePaymentCardSecurity `json:"cardSecurity,omitempty"`
	// The applicable card fee region.
	FeeRegion *CreatePaymentFeeRegion `json:"feeRegion,omitempty"`
	// The first 6 and last 4 digits of the card number.
	CardMaskedNumber *string `json:"cardMaskedNumber,omitempty"`
	// The outcome of authentication attempted on transactions enforced by 3DS (ie valid only for oneoff and first).
	Card3dsEci *string `json:"card3dsEci,omitempty"`
	// The first 6 digit of the card bank identification number.
	CardBin *string `json:"cardBin,omitempty"`
	// The issuer of the Card.
	CardIssuer *string `json:"cardIssuer,omitempty"`
	// A failure code to help understand why the payment failed.
	FailureReason *CreatePaymentFailureReason `json:"failureReason,omitempty"`
	// A human-friendly failure message that can be shown to the customer. The message is translated in accordance
	// with the payment's locale setting.
	FailureMessage *string `json:"failureMessage,omitempty"`
	// The wallet used when creating the payment.
	Wallet *CreatePaymentWallet `json:"wallet,omitempty"`
	// PayPal's reference for the payment.
	PaypalReference *string `json:"paypalReference,omitempty"`
	// ID of the customer's PayPal account.
	PaypalPayerID *string `json:"paypalPayerId,omitempty"`
	// Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
	// payments, and if the information is made available by PayPal.
	SellerProtection *CreatePaymentSellerProtection `json:"sellerProtection,omitempty"`
	// An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
	// PayPal will not charge a fee for this transaction.
	PaypalFee *CreatePaymentPaypalFee `json:"paypalFee,omitempty"`
	// The paysafecard customer reference either provided via the API or otherwise auto-generated by Mollie.
	CustomerReference *string `json:"customerReference,omitempty"`
	// The ID of the terminal device where the payment took place on.
	TerminalID *string `json:"terminalId,omitempty"`
	// The first 6 digits & last 4 digits of the customer's masked card number.
	MaskedNumber *string `json:"maskedNumber,omitempty"`
	// The Point of sale receipt object.
	Receipt *CreatePaymentReceipt `json:"receipt,omitempty"`
	// The creditor identifier indicates who is authorized to execute the payment. In this case, it is a
	// reference to Mollie.
	CreditorIdentifier *string `json:"creditorIdentifier,omitempty"`
	// Estimated date the payment is debited from the customer's bank account, in YYYY-MM-DD format.
	DueDate *types.Date `json:"dueDate,omitempty"`
	// Date the payment has been signed by the customer, in YYYY-MM-DD format. Only available if the payment
	// has been signed.
	SignatureDate *types.Date `json:"signatureDate,omitempty"`
	// The official reason why this payment has failed. A detailed description of each reason is available on the
	// website of the European Payments Council.
	BankReasonCode *string `json:"bankReasonCode,omitempty"`
	// A human-friendly description of the failure reason.
	BankReason *string `json:"bankReason,omitempty"`
	// The end-to-end identifier you provided in the batch file.
	EndToEndIdentifier *string `json:"endToEndIdentifier,omitempty"`
	// The mandate reference you provided in the batch file.
	MandateReference *string `json:"mandateReference,omitempty"`
	// The batch reference you provided in the batch file.
	BatchReference *string `json:"batchReference,omitempty"`
	// The file reference you provided in the batch file.
	FileReference *string `json:"fileReference,omitempty"`
	// Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
	// the QR code details will be available in this object.
	//
	// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
	// Bancontact QR payments can be completed by the customer using the Bancontact app.
	QrCode *CreatePaymentQrCode `json:"qrCode,omitempty"`
	// For payments with gift cards: the masked gift card number of the first gift card applied to the payment.
	VoucherNumber *string `json:"voucherNumber,omitempty"`
	// An array of detail objects for each gift card that was used on this payment, if any.
	Giftcards []map[string]any `json:"giftcards,omitempty"`
	// For payments with vouchers: the brand name of the first voucher applied.
	Issuer *string `json:"issuer,omitempty"`
	// An array of detail objects for each voucher that was used on this payment, if any.
	Vouchers []map[string]any `json:"vouchers,omitempty"`
	// An amount object for the amount that remained after all gift cards or vouchers were applied.
	RemainderAmount *CreatePaymentRemainderAmount `json:"remainderAmount,omitempty"`
	// The payment method used to pay the remainder amount, after all gift cards or vouchers were applied.
	RemainderMethod *string `json:"remainderMethod,omitempty"`
	// Optional include. The full payment method details of the remainder payment.
	RemainderDetails map[string]any `json:"remainderDetails,omitempty"`
}

func (c CreatePaymentDetails) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePaymentDetails) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CreatePaymentDetails) GetConsumerName() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerName
}

func (o *CreatePaymentDetails) GetConsumerAccount() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerAccount
}

func (o *CreatePaymentDetails) GetConsumerBic() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerBic
}

func (o *CreatePaymentDetails) GetShippingAddress() map[string]any {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *CreatePaymentDetails) GetCardNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardNumber
}

func (o *CreatePaymentDetails) GetBankName() *string {
	if o == nil {
		return nil
	}
	return o.BankName
}

func (o *CreatePaymentDetails) GetBankAccount() *string {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *CreatePaymentDetails) GetBankBic() *string {
	if o == nil {
		return nil
	}
	return o.BankBic
}

func (o *CreatePaymentDetails) GetTransferReference() *string {
	if o == nil {
		return nil
	}
	return o.TransferReference
}

func (o *CreatePaymentDetails) GetCardFingerprint() *string {
	if o == nil {
		return nil
	}
	return o.CardFingerprint
}

func (o *CreatePaymentDetails) GetCardHolder() *string {
	if o == nil {
		return nil
	}
	return o.CardHolder
}

func (o *CreatePaymentDetails) GetCardAudition() *CreatePaymentCardAudition {
	if o == nil {
		return nil
	}
	return o.CardAudition
}

func (o *CreatePaymentDetails) GetCardLabel() *CreatePaymentCardLabel {
	if o == nil {
		return nil
	}
	return o.CardLabel
}

func (o *CreatePaymentDetails) GetCardCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CardCountryCode
}

func (o *CreatePaymentDetails) GetCardExpiryDate() *string {
	if o == nil {
		return nil
	}
	return o.CardExpiryDate
}

func (o *CreatePaymentDetails) GetCardFunding() *CreatePaymentCardFunding {
	if o == nil {
		return nil
	}
	return o.CardFunding
}

func (o *CreatePaymentDetails) GetCardSecurity() *CreatePaymentCardSecurity {
	if o == nil {
		return nil
	}
	return o.CardSecurity
}

func (o *CreatePaymentDetails) GetFeeRegion() *CreatePaymentFeeRegion {
	if o == nil {
		return nil
	}
	return o.FeeRegion
}

func (o *CreatePaymentDetails) GetCardMaskedNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardMaskedNumber
}

func (o *CreatePaymentDetails) GetCard3dsEci() *string {
	if o == nil {
		return nil
	}
	return o.Card3dsEci
}

func (o *CreatePaymentDetails) GetCardBin() *string {
	if o == nil {
		return nil
	}
	return o.CardBin
}

func (o *CreatePaymentDetails) GetCardIssuer() *string {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *CreatePaymentDetails) GetFailureReason() *CreatePaymentFailureReason {
	if o == nil {
		return nil
	}
	return o.FailureReason
}

func (o *CreatePaymentDetails) GetFailureMessage() *string {
	if o == nil {
		return nil
	}
	return o.FailureMessage
}

func (o *CreatePaymentDetails) GetWallet() *CreatePaymentWallet {
	if o == nil {
		return nil
	}
	return o.Wallet
}

func (o *CreatePaymentDetails) GetPaypalReference() *string {
	if o == nil {
		return nil
	}
	return o.PaypalReference
}

func (o *CreatePaymentDetails) GetPaypalPayerID() *string {
	if o == nil {
		return nil
	}
	return o.PaypalPayerID
}

func (o *CreatePaymentDetails) GetSellerProtection() *CreatePaymentSellerProtection {
	if o == nil {
		return nil
	}
	return o.SellerProtection
}

func (o *CreatePaymentDetails) GetPaypalFee() *CreatePaymentPaypalFee {
	if o == nil {
		return nil
	}
	return o.PaypalFee
}

func (o *CreatePaymentDetails) GetCustomerReference() *string {
	if o == nil {
		return nil
	}
	return o.CustomerReference
}

func (o *CreatePaymentDetails) GetTerminalID() *string {
	if o == nil {
		return nil
	}
	return o.TerminalID
}

func (o *CreatePaymentDetails) GetMaskedNumber() *string {
	if o == nil {
		return nil
	}
	return o.MaskedNumber
}

func (o *CreatePaymentDetails) GetReceipt() *CreatePaymentReceipt {
	if o == nil {
		return nil
	}
	return o.Receipt
}

func (o *CreatePaymentDetails) GetCreditorIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.CreditorIdentifier
}

func (o *CreatePaymentDetails) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *CreatePaymentDetails) GetSignatureDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.SignatureDate
}

func (o *CreatePaymentDetails) GetBankReasonCode() *string {
	if o == nil {
		return nil
	}
	return o.BankReasonCode
}

func (o *CreatePaymentDetails) GetBankReason() *string {
	if o == nil {
		return nil
	}
	return o.BankReason
}

func (o *CreatePaymentDetails) GetEndToEndIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.EndToEndIdentifier
}

func (o *CreatePaymentDetails) GetMandateReference() *string {
	if o == nil {
		return nil
	}
	return o.MandateReference
}

func (o *CreatePaymentDetails) GetBatchReference() *string {
	if o == nil {
		return nil
	}
	return o.BatchReference
}

func (o *CreatePaymentDetails) GetFileReference() *string {
	if o == nil {
		return nil
	}
	return o.FileReference
}

func (o *CreatePaymentDetails) GetQrCode() *CreatePaymentQrCode {
	if o == nil {
		return nil
	}
	return o.QrCode
}

func (o *CreatePaymentDetails) GetVoucherNumber() *string {
	if o == nil {
		return nil
	}
	return o.VoucherNumber
}

func (o *CreatePaymentDetails) GetGiftcards() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Giftcards
}

func (o *CreatePaymentDetails) GetIssuer() *string {
	if o == nil {
		return nil
	}
	return o.Issuer
}

func (o *CreatePaymentDetails) GetVouchers() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Vouchers
}

func (o *CreatePaymentDetails) GetRemainderAmount() *CreatePaymentRemainderAmount {
	if o == nil {
		return nil
	}
	return o.RemainderAmount
}

func (o *CreatePaymentDetails) GetRemainderMethod() *string {
	if o == nil {
		return nil
	}
	return o.RemainderMethod
}

func (o *CreatePaymentDetails) GetRemainderDetails() map[string]any {
	if o == nil {
		return nil
	}
	return o.RemainderDetails
}

// CreatePaymentSelfResponse - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CreatePaymentSelfResponse struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentSelfResponse) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentSelfResponse) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentCheckout - The URL your customer should visit to make the payment. This is where you should redirect the customer to.
type CreatePaymentCheckout struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentCheckout) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentCheckout) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentMobileAppCheckout - The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
type CreatePaymentMobileAppCheckout struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentMobileAppCheckout) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentMobileAppCheckout) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentChangePaymentState - For test mode payments in certain scenarios, a hosted interface is available to help you test different
// payment states.
//
// Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
// payments are executed without any user interaction.
//
// Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
// chargeback for the test payment.
type CreatePaymentChangePaymentState struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentChangePaymentState) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentChangePaymentState) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentDashboard - Direct link to the payment in the Mollie Dashboard.
type CreatePaymentDashboard struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentDashboard) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentDashboard) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentRefunds - The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
type CreatePaymentRefunds struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentRefunds) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentRefunds) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentChargebacks - The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
// payment.
type CreatePaymentChargebacks struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentChargebacks) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentChargebacks) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentCaptures - The API resource URL of the [captures](list-payment-captures) that belong to this payment.
type CreatePaymentCaptures struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentCaptures) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentCaptures) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentSettlement - The API resource URL of the [settlement](get-settlement) this payment has been settled with.
// Not present if not yet settled.
type CreatePaymentSettlement struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentSettlement) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentSettlement) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentCustomer - The API resource URL of the [customer](get-customer).
type CreatePaymentCustomer struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentCustomer) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentCustomer) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentMandate - The API resource URL of the [mandate](get-mandate).
type CreatePaymentMandate struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentMandate) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentMandate) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentSubscription - The API resource URL of the [subscription](get-subscription).
type CreatePaymentSubscription struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentSubscription) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentSubscription) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentOrder - The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
// order.
type CreatePaymentOrder struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentOrder) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentOrder) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentTerminal - The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
// point-of-sale payments.
type CreatePaymentTerminal struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentTerminal) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentTerminal) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CreatePaymentDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentLinksStatus - Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
// successful).
type CreatePaymentLinksStatus struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentLinksStatus) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentLinksStatus) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentPayOnline - Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
// bank transfer.
type CreatePaymentPayOnline struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentPayOnline) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentPayOnline) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentLinksResponse - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type CreatePaymentLinksResponse struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self CreatePaymentSelfResponse `json:"self"`
	// The URL your customer should visit to make the payment. This is where you should redirect the customer to.
	Checkout *CreatePaymentCheckout `json:"checkout,omitempty"`
	// The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
	MobileAppCheckout *CreatePaymentMobileAppCheckout `json:"mobileAppCheckout,omitempty"`
	// For test mode payments in certain scenarios, a hosted interface is available to help you test different
	// payment states.
	//
	// Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
	// payments are executed without any user interaction.
	//
	// Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
	// chargeback for the test payment.
	ChangePaymentState *CreatePaymentChangePaymentState `json:"changePaymentState,omitempty"`
	// Direct link to the payment in the Mollie Dashboard.
	Dashboard CreatePaymentDashboard `json:"dashboard"`
	// The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
	Refunds *CreatePaymentRefunds `json:"refunds,omitempty"`
	// The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
	// payment.
	Chargebacks *CreatePaymentChargebacks `json:"chargebacks,omitempty"`
	// The API resource URL of the [captures](list-payment-captures) that belong to this payment.
	Captures *CreatePaymentCaptures `json:"captures,omitempty"`
	// The API resource URL of the [settlement](get-settlement) this payment has been settled with.
	// Not present if not yet settled.
	Settlement *CreatePaymentSettlement `json:"settlement,omitempty"`
	// The API resource URL of the [customer](get-customer).
	Customer *CreatePaymentCustomer `json:"customer,omitempty"`
	// The API resource URL of the [mandate](get-mandate).
	Mandate *CreatePaymentMandate `json:"mandate,omitempty"`
	// The API resource URL of the [subscription](get-subscription).
	Subscription *CreatePaymentSubscription `json:"subscription,omitempty"`
	// The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
	// order.
	Order *CreatePaymentOrder `json:"order,omitempty"`
	// The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
	// point-of-sale payments.
	Terminal *CreatePaymentTerminal `json:"terminal,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *CreatePaymentDocumentation `json:"documentation,omitempty"`
	// Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
	// successful).
	Status *CreatePaymentLinksStatus `json:"status,omitempty"`
	// Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
	// bank transfer.
	PayOnline *CreatePaymentPayOnline `json:"payOnline,omitempty"`
}

func (o *CreatePaymentLinksResponse) GetSelf() CreatePaymentSelfResponse {
	if o == nil {
		return CreatePaymentSelfResponse{}
	}
	return o.Self
}

func (o *CreatePaymentLinksResponse) GetCheckout() *CreatePaymentCheckout {
	if o == nil {
		return nil
	}
	return o.Checkout
}

func (o *CreatePaymentLinksResponse) GetMobileAppCheckout() *CreatePaymentMobileAppCheckout {
	if o == nil {
		return nil
	}
	return o.MobileAppCheckout
}

func (o *CreatePaymentLinksResponse) GetChangePaymentState() *CreatePaymentChangePaymentState {
	if o == nil {
		return nil
	}
	return o.ChangePaymentState
}

func (o *CreatePaymentLinksResponse) GetDashboard() CreatePaymentDashboard {
	if o == nil {
		return CreatePaymentDashboard{}
	}
	return o.Dashboard
}

func (o *CreatePaymentLinksResponse) GetRefunds() *CreatePaymentRefunds {
	if o == nil {
		return nil
	}
	return o.Refunds
}

func (o *CreatePaymentLinksResponse) GetChargebacks() *CreatePaymentChargebacks {
	if o == nil {
		return nil
	}
	return o.Chargebacks
}

func (o *CreatePaymentLinksResponse) GetCaptures() *CreatePaymentCaptures {
	if o == nil {
		return nil
	}
	return o.Captures
}

func (o *CreatePaymentLinksResponse) GetSettlement() *CreatePaymentSettlement {
	if o == nil {
		return nil
	}
	return o.Settlement
}

func (o *CreatePaymentLinksResponse) GetCustomer() *CreatePaymentCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *CreatePaymentLinksResponse) GetMandate() *CreatePaymentMandate {
	if o == nil {
		return nil
	}
	return o.Mandate
}

func (o *CreatePaymentLinksResponse) GetSubscription() *CreatePaymentSubscription {
	if o == nil {
		return nil
	}
	return o.Subscription
}

func (o *CreatePaymentLinksResponse) GetOrder() *CreatePaymentOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *CreatePaymentLinksResponse) GetTerminal() *CreatePaymentTerminal {
	if o == nil {
		return nil
	}
	return o.Terminal
}

func (o *CreatePaymentLinksResponse) GetDocumentation() *CreatePaymentDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

func (o *CreatePaymentLinksResponse) GetStatus() *CreatePaymentLinksStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreatePaymentLinksResponse) GetPayOnline() *CreatePaymentPayOnline {
	if o == nil {
		return nil
	}
	return o.PayOnline
}

// CreatePaymentResponseBody - The newly created payment object.
type CreatePaymentResponseBody struct {
	// Indicates the response contains a payment object. Will always contain the string `payment` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this payment. Mollie assigns this identifier at payment creation time. Mollie
	// will always refer to the payment by this ID. Example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode CreatePaymentMode `json:"mode"`
	// The description of the payment. This will be shown to your customer on their card or bank statement when possible.
	// We truncate the description automatically according to the limits of the used payment method. The description is
	// also visible in any exports you generate.
	//
	// We recommend you use a unique identifier so that you can always link the payment to the order in your back office.
	// This is particularly useful for bookkeeping.
	//
	// The maximum length of the description field differs per payment method, with the absolute maximum being 255
	// characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
	Description string `json:"description"`
	// The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
	//
	// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
	// retrieved using the Get method endpoint.
	//
	// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
	// tip amount.
	Amount CreatePaymentAmountResponse `json:"amount"`
	// The total amount that is already refunded. Only available when refunds are available for this payment. For some
	// payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
	// costs for a return shipment to the customer.
	AmountRefunded *CreatePaymentAmountRefunded `json:"amountRefunded,omitempty"`
	// The remaining amount that can be refunded. Only available when refunds are available for this payment.
	AmountRemaining *CreatePaymentAmountRemaining `json:"amountRemaining,omitempty"`
	// The total amount that is already captured for this payment. Only available when this payment supports captures.
	AmountCaptured *CreatePaymentAmountCaptured `json:"amountCaptured,omitempty"`
	// The total amount that was charged back for this payment. Only available when the total charged back amount is not
	// zero.
	AmountChargedBack *CreatePaymentAmountChargedBack `json:"amountChargedBack,omitempty"`
	// This optional field will contain the approximate amount that will be settled to your account, converted to the
	// currency your account is settled in.
	//
	// Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
	// settled by Mollie the `settlementAmount` is omitted from the response.
	//
	// Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
	// using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
	SettlementAmount *CreatePaymentSettlementAmount `json:"settlementAmount,omitempty"`
	// The URL your customer will be redirected to after the payment process.
	//
	// It could make sense for the redirectUrl to contain a unique identifier – like your order ID – so you can show the
	// right page referencing the order when your customer returns.
	//
	// The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for
	// Apple Pay payments with an `applePayPaymentToken`.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not
	// provided, the customer will be redirected to the `redirectUrl` instead — see above.
	//
	// Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is
	// therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle
	// payment cancellations.
	CancelURL *string `json:"cancelUrl,omitempty"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines []CreatePaymentLineResponse `json:"lines,omitempty"`
	// The customer's billing address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	//
	// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
	BillingAddress *CreatePaymentBillingAddressResponse `json:"billingAddress,omitempty"`
	// The customer's shipping address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	ShippingAddress *CreatePaymentShippingAddressResponse `json:"shippingAddress,omitempty"`
	// Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
	// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
	// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
	// locale, but our hosted payment pages currently only support the specified languages.
	//
	// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
	// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
	// customer use a local bank account greatly increases the conversion and speed of payment.
	Locale *CreatePaymentLocaleResponse `json:"locale,omitempty"`
	// This optional field contains your customer's ISO 3166-1 alpha-2 country code, detected by us during checkout. This
	// field is omitted if the country code was not detected.
	CountryCode *string `json:"countryCode,omitempty"`
	// The payment method used for this transaction. If a specific method was selected during payment initialization,
	// this field reflects that choice.
	Method *CreatePaymentMethodResponse `json:"method,omitempty"`
	// For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT
	// rates you have used for the order to ensure your customer's country matches the VAT country.
	//
	// Use this parameter to restrict the payment methods available to your customer to those from a single country.
	//
	// If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
	//
	// The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
	RestrictPaymentMethodsToCountry *string `json:"restrictPaymentMethodsToCountry,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *CreatePaymentMetadataResponse `json:"metadata,omitempty"`
	// Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
	// and capture at a later time.
	//
	// This field needs to be set to `manual` for method `riverty`.
	CaptureMode *CreatePaymentCaptureModeResponse `json:"captureMode,omitempty"`
	// **Only relevant if you wish to manage authorization and capturing separately.**
	//
	// Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a
	// later point either be 'captured' or canceled.
	//
	// By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a
	// capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For
	// example `8 hours` or `2 days`.
	//
	// To schedule an automatic capture, the `captureMode` must be set to `automatic`.
	//
	// The maximum delay is 7 days (168 hours).
	//
	// Possible values: `... hours` `... days`
	CaptureDelay *string `json:"captureDelay,omitempty"`
	// Indicates the date before which the payment needs to be captured, in ISO 8601 format. From this date onwards we
	// can no longer guarantee a successful capture. The parameter is omitted if the payment is not authorized (yet).
	CaptureBefore *string `json:"captureBefore,omitempty"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	//
	// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
	// `routing` parameter.
	ApplicationFee *CreatePaymentApplicationFeeResponse `json:"applicationFee,omitempty"`
	// *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
	//
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you create payments on your own account that you want to split between yourself and one or more connected
	// merchants, you can use this `routing` parameter to route the payment accordingly.
	//
	// The `routing` parameter should contain an array of objects, with each object describing the destination for a
	// specific portion of the payment.
	//
	// It is not necessary to indicate in the array which portion goes to yourself. After all portions of the total
	// payment amount have been routed, the amount left will be routed to the current organization automatically.
	//
	// If instead you use OAuth to create payments on a connected merchant's account, refer to the `applicationFee`
	// parameter.
	Routing []CreatePaymentRoutingResponse `json:"routing,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// Indicate which part of a recurring sequence this payment is for.
	//
	// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
	// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
	// on their account in the future.
	//
	// If set to `recurring`, the customer's card is charged automatically.
	//
	// Defaults to `oneoff`, which is a regular non-recurring payment.
	//
	// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
	// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
	// are set up correctly for recurring payments.
	SequenceType *CreatePaymentSequenceTypeResponse `json:"sequenceType"`
	// If the payment was automatically created via a subscription, the ID of the [subscription](get-subscription) will
	// be added to the response.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// When creating recurring payments, the ID of a specific [mandate](get-mandate) can be supplied to indicate which of
	// the customer's accounts should be credited.
	MandateID *string `json:"mandateId,omitempty"`
	// The ID of the [customer](get-customer) the payment is being created for. This is used primarily for recurring
	// payments, but can also be used on regular payments to enable single-click payments.
	//
	// If `sequenceType` is set to `recurring`, this field is required.
	CustomerID *string `json:"customerId,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// When using an API Key, the `profileId` can be omitted since it is linked to the key. However, for OAuth and
	// Organization tokens, the `profileId` is required.
	//
	// For more information, see [Authentication](authentication).
	ProfileID string `json:"profileId"`
	// The identifier referring to the [settlement](get-settlement) this payment was settled with.
	SettlementID *string `json:"settlementId,omitempty"`
	// If the payment was created for an [order](get-order), the ID of that order will be part of the response.
	OrderID *string `json:"orderId,omitempty"`
	// The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
	// statuses occur at what point.
	Status CreatePaymentStatusEnum `json:"status"`
	// This object offers details about the status of a payment. Currently it is only available for point-of-sale
	// payments.
	//
	// You can find more information about the possible values of this object on
	// [this page](status-reasons).**
	StatusReason *CreatePaymentStatusReason `json:"statusReason,omitempty"`
	// Whether the payment can be canceled. This parameter is omitted if the payment reaches a final state.
	IsCancelable *bool `json:"isCancelable,omitempty"`
	// An object containing payment details collected during the payment process. For example, details may include the
	// customer's card or bank details and a payment reference. For the full list of details, please refer to the
	// [method-specific parameters](extra-payment-parameters) guide.
	Details *CreatePaymentDetails `json:"details,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The date and time the payment became authorized, in ISO 8601 format. This parameter is omitted if the payment is
	// not authorized (yet).
	AuthorizedAt *string `json:"authorizedAt,omitempty"`
	// The date and time the payment became paid, in ISO 8601 format. This parameter is omitted if the payment is not
	// completed (yet).
	PaidAt *string `json:"paidAt,omitempty"`
	// The date and time the payment was canceled, in ISO 8601 format. This parameter is omitted if the payment is not
	// canceled (yet).
	CanceledAt *string `json:"canceledAt,omitempty"`
	// The date and time the payment will expire, in ISO 8601 format. This parameter is omitted if the payment can no
	// longer expire.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The date and time the payment was expired, in ISO 8601 format. This parameter is omitted if the payment did not
	// expire (yet).
	ExpiredAt *string `json:"expiredAt,omitempty"`
	// The date and time the payment failed, in ISO 8601 format. This parameter is omitted if the payment did not fail
	// (yet).
	FailedAt *string `json:"failedAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links CreatePaymentLinksResponse `json:"_links"`
}

func (o *CreatePaymentResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *CreatePaymentResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreatePaymentResponseBody) GetMode() CreatePaymentMode {
	if o == nil {
		return CreatePaymentMode("")
	}
	return o.Mode
}

func (o *CreatePaymentResponseBody) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CreatePaymentResponseBody) GetAmount() CreatePaymentAmountResponse {
	if o == nil {
		return CreatePaymentAmountResponse{}
	}
	return o.Amount
}

func (o *CreatePaymentResponseBody) GetAmountRefunded() *CreatePaymentAmountRefunded {
	if o == nil {
		return nil
	}
	return o.AmountRefunded
}

func (o *CreatePaymentResponseBody) GetAmountRemaining() *CreatePaymentAmountRemaining {
	if o == nil {
		return nil
	}
	return o.AmountRemaining
}

func (o *CreatePaymentResponseBody) GetAmountCaptured() *CreatePaymentAmountCaptured {
	if o == nil {
		return nil
	}
	return o.AmountCaptured
}

func (o *CreatePaymentResponseBody) GetAmountChargedBack() *CreatePaymentAmountChargedBack {
	if o == nil {
		return nil
	}
	return o.AmountChargedBack
}

func (o *CreatePaymentResponseBody) GetSettlementAmount() *CreatePaymentSettlementAmount {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *CreatePaymentResponseBody) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *CreatePaymentResponseBody) GetCancelURL() *string {
	if o == nil {
		return nil
	}
	return o.CancelURL
}

func (o *CreatePaymentResponseBody) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *CreatePaymentResponseBody) GetLines() []CreatePaymentLineResponse {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *CreatePaymentResponseBody) GetBillingAddress() *CreatePaymentBillingAddressResponse {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *CreatePaymentResponseBody) GetShippingAddress() *CreatePaymentShippingAddressResponse {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *CreatePaymentResponseBody) GetLocale() *CreatePaymentLocaleResponse {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *CreatePaymentResponseBody) GetCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CountryCode
}

func (o *CreatePaymentResponseBody) GetMethod() *CreatePaymentMethodResponse {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CreatePaymentResponseBody) GetRestrictPaymentMethodsToCountry() *string {
	if o == nil {
		return nil
	}
	return o.RestrictPaymentMethodsToCountry
}

func (o *CreatePaymentResponseBody) GetMetadata() *CreatePaymentMetadataResponse {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreatePaymentResponseBody) GetCaptureMode() *CreatePaymentCaptureModeResponse {
	if o == nil {
		return nil
	}
	return o.CaptureMode
}

func (o *CreatePaymentResponseBody) GetCaptureDelay() *string {
	if o == nil {
		return nil
	}
	return o.CaptureDelay
}

func (o *CreatePaymentResponseBody) GetCaptureBefore() *string {
	if o == nil {
		return nil
	}
	return o.CaptureBefore
}

func (o *CreatePaymentResponseBody) GetApplicationFee() *CreatePaymentApplicationFeeResponse {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *CreatePaymentResponseBody) GetRouting() []CreatePaymentRoutingResponse {
	if o == nil {
		return nil
	}
	return o.Routing
}

func (o *CreatePaymentResponseBody) GetSequenceType() *CreatePaymentSequenceTypeResponse {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *CreatePaymentResponseBody) GetSubscriptionID() *string {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

func (o *CreatePaymentResponseBody) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *CreatePaymentResponseBody) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *CreatePaymentResponseBody) GetProfileID() string {
	if o == nil {
		return ""
	}
	return o.ProfileID
}

func (o *CreatePaymentResponseBody) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *CreatePaymentResponseBody) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *CreatePaymentResponseBody) GetStatus() CreatePaymentStatusEnum {
	if o == nil {
		return CreatePaymentStatusEnum("")
	}
	return o.Status
}

func (o *CreatePaymentResponseBody) GetStatusReason() *CreatePaymentStatusReason {
	if o == nil {
		return nil
	}
	return o.StatusReason
}

func (o *CreatePaymentResponseBody) GetIsCancelable() *bool {
	if o == nil {
		return nil
	}
	return o.IsCancelable
}

func (o *CreatePaymentResponseBody) GetDetails() *CreatePaymentDetails {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *CreatePaymentResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreatePaymentResponseBody) GetAuthorizedAt() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizedAt
}

func (o *CreatePaymentResponseBody) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *CreatePaymentResponseBody) GetCanceledAt() *string {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CreatePaymentResponseBody) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *CreatePaymentResponseBody) GetExpiredAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredAt
}

func (o *CreatePaymentResponseBody) GetFailedAt() *string {
	if o == nil {
		return nil
	}
	return o.FailedAt
}

func (o *CreatePaymentResponseBody) GetLinks() CreatePaymentLinksResponse {
	if o == nil {
		return CreatePaymentLinksResponse{}
	}
	return o.Links
}

type CreatePaymentResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The newly created payment object.
	Object *CreatePaymentResponseBody
}

func (o *CreatePaymentResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreatePaymentResponse) GetObject() *CreatePaymentResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
