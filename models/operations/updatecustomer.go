// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
)

// UpdateCustomerLocaleRequest - Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
// absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
type UpdateCustomerLocaleRequest string

const (
	UpdateCustomerLocaleRequestEnUs UpdateCustomerLocaleRequest = "en_US"
	UpdateCustomerLocaleRequestEnGb UpdateCustomerLocaleRequest = "en_GB"
	UpdateCustomerLocaleRequestNlNl UpdateCustomerLocaleRequest = "nl_NL"
	UpdateCustomerLocaleRequestNlBe UpdateCustomerLocaleRequest = "nl_BE"
	UpdateCustomerLocaleRequestDeDe UpdateCustomerLocaleRequest = "de_DE"
	UpdateCustomerLocaleRequestDeAt UpdateCustomerLocaleRequest = "de_AT"
	UpdateCustomerLocaleRequestDeCh UpdateCustomerLocaleRequest = "de_CH"
	UpdateCustomerLocaleRequestFrFr UpdateCustomerLocaleRequest = "fr_FR"
	UpdateCustomerLocaleRequestFrBe UpdateCustomerLocaleRequest = "fr_BE"
	UpdateCustomerLocaleRequestEsEs UpdateCustomerLocaleRequest = "es_ES"
	UpdateCustomerLocaleRequestCaEs UpdateCustomerLocaleRequest = "ca_ES"
	UpdateCustomerLocaleRequestPtPt UpdateCustomerLocaleRequest = "pt_PT"
	UpdateCustomerLocaleRequestItIt UpdateCustomerLocaleRequest = "it_IT"
	UpdateCustomerLocaleRequestNbNo UpdateCustomerLocaleRequest = "nb_NO"
	UpdateCustomerLocaleRequestSvSe UpdateCustomerLocaleRequest = "sv_SE"
	UpdateCustomerLocaleRequestFiFi UpdateCustomerLocaleRequest = "fi_FI"
	UpdateCustomerLocaleRequestDaDk UpdateCustomerLocaleRequest = "da_DK"
	UpdateCustomerLocaleRequestIsIs UpdateCustomerLocaleRequest = "is_IS"
	UpdateCustomerLocaleRequestHuHu UpdateCustomerLocaleRequest = "hu_HU"
	UpdateCustomerLocaleRequestPlPl UpdateCustomerLocaleRequest = "pl_PL"
	UpdateCustomerLocaleRequestLvLv UpdateCustomerLocaleRequest = "lv_LV"
	UpdateCustomerLocaleRequestLtLt UpdateCustomerLocaleRequest = "lt_LT"
)

func (e UpdateCustomerLocaleRequest) ToPointer() *UpdateCustomerLocaleRequest {
	return &e
}
func (e *UpdateCustomerLocaleRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		fallthrough
	case "es_ES":
		fallthrough
	case "ca_ES":
		fallthrough
	case "pt_PT":
		fallthrough
	case "it_IT":
		fallthrough
	case "nb_NO":
		fallthrough
	case "sv_SE":
		fallthrough
	case "fi_FI":
		fallthrough
	case "da_DK":
		fallthrough
	case "is_IS":
		fallthrough
	case "hu_HU":
		fallthrough
	case "pl_PL":
		fallthrough
	case "lv_LV":
		fallthrough
	case "lt_LT":
		*e = UpdateCustomerLocaleRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomerLocaleRequest: %v", v)
	}
}

type UpdateCustomerMetadataRequestType string

const (
	UpdateCustomerMetadataRequestTypeStr        UpdateCustomerMetadataRequestType = "str"
	UpdateCustomerMetadataRequestTypeMapOfAny   UpdateCustomerMetadataRequestType = "mapOfAny"
	UpdateCustomerMetadataRequestTypeArrayOfStr UpdateCustomerMetadataRequestType = "arrayOfStr"
)

// UpdateCustomerMetadataRequest - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type UpdateCustomerMetadataRequest struct {
	Str        *string        `queryParam:"inline"`
	MapOfAny   map[string]any `queryParam:"inline"`
	ArrayOfStr []string       `queryParam:"inline"`

	Type UpdateCustomerMetadataRequestType
}

func CreateUpdateCustomerMetadataRequestStr(str string) UpdateCustomerMetadataRequest {
	typ := UpdateCustomerMetadataRequestTypeStr

	return UpdateCustomerMetadataRequest{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateCustomerMetadataRequestMapOfAny(mapOfAny map[string]any) UpdateCustomerMetadataRequest {
	typ := UpdateCustomerMetadataRequestTypeMapOfAny

	return UpdateCustomerMetadataRequest{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateUpdateCustomerMetadataRequestArrayOfStr(arrayOfStr []string) UpdateCustomerMetadataRequest {
	typ := UpdateCustomerMetadataRequestTypeArrayOfStr

	return UpdateCustomerMetadataRequest{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *UpdateCustomerMetadataRequest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = UpdateCustomerMetadataRequestTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = UpdateCustomerMetadataRequestTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpdateCustomerMetadataRequestTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateCustomerMetadataRequest", string(data))
}

func (u UpdateCustomerMetadataRequest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateCustomerMetadataRequest: all fields are null")
}

type UpdateCustomerRequestBody struct {
	// The full name of the customer.
	Name *string `json:"name,omitempty"`
	// The email address of the customer.
	Email *string `json:"email,omitempty"`
	// Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
	// absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
	Locale *UpdateCustomerLocaleRequest `json:"locale,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *UpdateCustomerMetadataRequest `json:"metadata,omitempty"`
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
}

func (o *UpdateCustomerRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateCustomerRequestBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UpdateCustomerRequestBody) GetLocale() *UpdateCustomerLocaleRequest {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *UpdateCustomerRequestBody) GetMetadata() *UpdateCustomerMetadataRequest {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *UpdateCustomerRequestBody) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

type UpdateCustomerRequest struct {
	// Provide the ID of the related customer.
	CustomerID  string                     `pathParam:"style=simple,explode=false,name=customerId"`
	RequestBody *UpdateCustomerRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateCustomerRequest) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *UpdateCustomerRequest) GetRequestBody() *UpdateCustomerRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// UpdateCustomerNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type UpdateCustomerNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *UpdateCustomerNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateCustomerNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type UpdateCustomerNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation UpdateCustomerNotFoundDocumentation `json:"documentation"`
}

func (o *UpdateCustomerNotFoundLinks) GetDocumentation() UpdateCustomerNotFoundDocumentation {
	if o == nil {
		return UpdateCustomerNotFoundDocumentation{}
	}
	return o.Documentation
}

// UpdateCustomerMode - Whether this entity was created in live mode or in test mode.
type UpdateCustomerMode string

const (
	UpdateCustomerModeLive UpdateCustomerMode = "live"
	UpdateCustomerModeTest UpdateCustomerMode = "test"
)

func (e UpdateCustomerMode) ToPointer() *UpdateCustomerMode {
	return &e
}

// UpdateCustomerLocaleResponse - Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
// absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
type UpdateCustomerLocaleResponse string

const (
	UpdateCustomerLocaleResponseEnUs UpdateCustomerLocaleResponse = "en_US"
	UpdateCustomerLocaleResponseEnGb UpdateCustomerLocaleResponse = "en_GB"
	UpdateCustomerLocaleResponseNlNl UpdateCustomerLocaleResponse = "nl_NL"
	UpdateCustomerLocaleResponseNlBe UpdateCustomerLocaleResponse = "nl_BE"
	UpdateCustomerLocaleResponseDeDe UpdateCustomerLocaleResponse = "de_DE"
	UpdateCustomerLocaleResponseDeAt UpdateCustomerLocaleResponse = "de_AT"
	UpdateCustomerLocaleResponseDeCh UpdateCustomerLocaleResponse = "de_CH"
	UpdateCustomerLocaleResponseFrFr UpdateCustomerLocaleResponse = "fr_FR"
	UpdateCustomerLocaleResponseFrBe UpdateCustomerLocaleResponse = "fr_BE"
	UpdateCustomerLocaleResponseEsEs UpdateCustomerLocaleResponse = "es_ES"
	UpdateCustomerLocaleResponseCaEs UpdateCustomerLocaleResponse = "ca_ES"
	UpdateCustomerLocaleResponsePtPt UpdateCustomerLocaleResponse = "pt_PT"
	UpdateCustomerLocaleResponseItIt UpdateCustomerLocaleResponse = "it_IT"
	UpdateCustomerLocaleResponseNbNo UpdateCustomerLocaleResponse = "nb_NO"
	UpdateCustomerLocaleResponseSvSe UpdateCustomerLocaleResponse = "sv_SE"
	UpdateCustomerLocaleResponseFiFi UpdateCustomerLocaleResponse = "fi_FI"
	UpdateCustomerLocaleResponseDaDk UpdateCustomerLocaleResponse = "da_DK"
	UpdateCustomerLocaleResponseIsIs UpdateCustomerLocaleResponse = "is_IS"
	UpdateCustomerLocaleResponseHuHu UpdateCustomerLocaleResponse = "hu_HU"
	UpdateCustomerLocaleResponsePlPl UpdateCustomerLocaleResponse = "pl_PL"
	UpdateCustomerLocaleResponseLvLv UpdateCustomerLocaleResponse = "lv_LV"
	UpdateCustomerLocaleResponseLtLt UpdateCustomerLocaleResponse = "lt_LT"
)

func (e UpdateCustomerLocaleResponse) ToPointer() *UpdateCustomerLocaleResponse {
	return &e
}

type UpdateCustomerMetadataResponseType string

const (
	UpdateCustomerMetadataResponseTypeStr        UpdateCustomerMetadataResponseType = "str"
	UpdateCustomerMetadataResponseTypeMapOfAny   UpdateCustomerMetadataResponseType = "mapOfAny"
	UpdateCustomerMetadataResponseTypeArrayOfStr UpdateCustomerMetadataResponseType = "arrayOfStr"
)

// UpdateCustomerMetadataResponse - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type UpdateCustomerMetadataResponse struct {
	Str        *string        `queryParam:"inline"`
	MapOfAny   map[string]any `queryParam:"inline"`
	ArrayOfStr []string       `queryParam:"inline"`

	Type UpdateCustomerMetadataResponseType
}

func CreateUpdateCustomerMetadataResponseStr(str string) UpdateCustomerMetadataResponse {
	typ := UpdateCustomerMetadataResponseTypeStr

	return UpdateCustomerMetadataResponse{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateCustomerMetadataResponseMapOfAny(mapOfAny map[string]any) UpdateCustomerMetadataResponse {
	typ := UpdateCustomerMetadataResponseTypeMapOfAny

	return UpdateCustomerMetadataResponse{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateUpdateCustomerMetadataResponseArrayOfStr(arrayOfStr []string) UpdateCustomerMetadataResponse {
	typ := UpdateCustomerMetadataResponseTypeArrayOfStr

	return UpdateCustomerMetadataResponse{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *UpdateCustomerMetadataResponse) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = UpdateCustomerMetadataResponseTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = UpdateCustomerMetadataResponseTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpdateCustomerMetadataResponseTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateCustomerMetadataResponse", string(data))
}

func (u UpdateCustomerMetadataResponse) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateCustomerMetadataResponse: all fields are null")
}

// UpdateCustomerSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type UpdateCustomerSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdateCustomerSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateCustomerSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdateCustomerDashboard - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type UpdateCustomerDashboard struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdateCustomerDashboard) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateCustomerDashboard) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdateCustomerPayments - The API resource URL of the [payments](list-payments) linked to this customer. Omitted if no such payments
// exist (yet).
type UpdateCustomerPayments struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *UpdateCustomerPayments) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *UpdateCustomerPayments) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// UpdateCustomerMandates - The API resource URL of the [mandates](list-mandates) linked to this customer. Omitted if no such mandates
// exist (yet).
type UpdateCustomerMandates struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *UpdateCustomerMandates) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *UpdateCustomerMandates) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// UpdateCustomerSubscriptions - The API resource URL of the [subscriptions](list-subscriptions) linked to this customer. Omitted if no such
// subscriptions exist (yet).
type UpdateCustomerSubscriptions struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *UpdateCustomerSubscriptions) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *UpdateCustomerSubscriptions) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// UpdateCustomerDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type UpdateCustomerDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdateCustomerDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateCustomerDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdateCustomerLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type UpdateCustomerLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self UpdateCustomerSelf `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Dashboard UpdateCustomerDashboard `json:"dashboard"`
	// The API resource URL of the [payments](list-payments) linked to this customer. Omitted if no such payments
	// exist (yet).
	Payments *UpdateCustomerPayments `json:"payments,omitempty"`
	// The API resource URL of the [mandates](list-mandates) linked to this customer. Omitted if no such mandates
	// exist (yet).
	Mandates *UpdateCustomerMandates `json:"mandates,omitempty"`
	// The API resource URL of the [subscriptions](list-subscriptions) linked to this customer. Omitted if no such
	// subscriptions exist (yet).
	Subscriptions *UpdateCustomerSubscriptions `json:"subscriptions,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation UpdateCustomerDocumentation `json:"documentation"`
}

func (o *UpdateCustomerLinks) GetSelf() UpdateCustomerSelf {
	if o == nil {
		return UpdateCustomerSelf{}
	}
	return o.Self
}

func (o *UpdateCustomerLinks) GetDashboard() UpdateCustomerDashboard {
	if o == nil {
		return UpdateCustomerDashboard{}
	}
	return o.Dashboard
}

func (o *UpdateCustomerLinks) GetPayments() *UpdateCustomerPayments {
	if o == nil {
		return nil
	}
	return o.Payments
}

func (o *UpdateCustomerLinks) GetMandates() *UpdateCustomerMandates {
	if o == nil {
		return nil
	}
	return o.Mandates
}

func (o *UpdateCustomerLinks) GetSubscriptions() *UpdateCustomerSubscriptions {
	if o == nil {
		return nil
	}
	return o.Subscriptions
}

func (o *UpdateCustomerLinks) GetDocumentation() UpdateCustomerDocumentation {
	if o == nil {
		return UpdateCustomerDocumentation{}
	}
	return o.Documentation
}

// UpdateCustomerResponseBody - The updated customer object.
type UpdateCustomerResponseBody struct {
	// Indicates the response contains a customer object. Will always contain the string `customer` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this customer. Example: `cst_vsKJpSsabw`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode UpdateCustomerMode `json:"mode"`
	// The full name of the customer.
	Name *string `json:"name"`
	// The email address of the customer.
	Email *string `json:"email"`
	// Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
	// absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
	Locale *UpdateCustomerLocaleResponse `json:"locale"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *UpdateCustomerMetadataResponse `json:"metadata"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links UpdateCustomerLinks `json:"_links"`
}

func (o *UpdateCustomerResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *UpdateCustomerResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateCustomerResponseBody) GetMode() UpdateCustomerMode {
	if o == nil {
		return UpdateCustomerMode("")
	}
	return o.Mode
}

func (o *UpdateCustomerResponseBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateCustomerResponseBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UpdateCustomerResponseBody) GetLocale() *UpdateCustomerLocaleResponse {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *UpdateCustomerResponseBody) GetMetadata() *UpdateCustomerMetadataResponse {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *UpdateCustomerResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *UpdateCustomerResponseBody) GetLinks() UpdateCustomerLinks {
	if o == nil {
		return UpdateCustomerLinks{}
	}
	return o.Links
}

type UpdateCustomerResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The updated customer object.
	Object *UpdateCustomerResponseBody
}

func (o *UpdateCustomerResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateCustomerResponse) GetObject() *UpdateCustomerResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
