// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
	"github.com/mollie/mollie-api-golang/types"
)

// ListSettlementPaymentsSort - Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
// newest to oldest.
type ListSettlementPaymentsSort string

const (
	ListSettlementPaymentsSortAsc  ListSettlementPaymentsSort = "asc"
	ListSettlementPaymentsSortDesc ListSettlementPaymentsSort = "desc"
)

func (e ListSettlementPaymentsSort) ToPointer() *ListSettlementPaymentsSort {
	return &e
}
func (e *ListSettlementPaymentsSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = ListSettlementPaymentsSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsSort: %v", v)
	}
}

type ListSettlementPaymentsRequest struct {
	// Provide the ID of the related settlement.
	SettlementID string `pathParam:"style=simple,explode=false,name=settlementId"`
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate
	// the result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
	// newest to oldest.
	Sort *ListSettlementPaymentsSort `queryParam:"style=form,explode=true,name=sort"`
	// The identifier referring to the [profile](get-profile) you wish to
	// retrieve the resources for.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
	// organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
	ProfileID *string `queryParam:"style=form,explode=true,name=profileId"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *ListSettlementPaymentsRequest) GetSettlementID() string {
	if o == nil {
		return ""
	}
	return o.SettlementID
}

func (o *ListSettlementPaymentsRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListSettlementPaymentsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListSettlementPaymentsRequest) GetSort() *ListSettlementPaymentsSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListSettlementPaymentsRequest) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *ListSettlementPaymentsRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// ListSettlementPaymentsBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type ListSettlementPaymentsBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListSettlementPaymentsBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListSettlementPaymentsBadRequestDocumentation `json:"documentation"`
}

func (o *ListSettlementPaymentsBadRequestLinks) GetDocumentation() ListSettlementPaymentsBadRequestDocumentation {
	if o == nil {
		return ListSettlementPaymentsBadRequestDocumentation{}
	}
	return o.Documentation
}

// ListSettlementPaymentsMode - Whether this entity was created in live mode or in test mode.
type ListSettlementPaymentsMode string

const (
	ListSettlementPaymentsModeLive ListSettlementPaymentsMode = "live"
	ListSettlementPaymentsModeTest ListSettlementPaymentsMode = "test"
)

func (e ListSettlementPaymentsMode) ToPointer() *ListSettlementPaymentsMode {
	return &e
}
func (e *ListSettlementPaymentsMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = ListSettlementPaymentsMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsMode: %v", v)
	}
}

// ListSettlementPaymentsAmount - The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge â‚¬1000.00.
//
// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
// retrieved using the Get method endpoint.
//
// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
// tip amount.
type ListSettlementPaymentsAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementPaymentsAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementPaymentsAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementPaymentsAmountRefunded - The total amount that is already refunded. Only available when refunds are available for this payment. For some
// payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
// costs for a return shipment to the customer.
type ListSettlementPaymentsAmountRefunded struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementPaymentsAmountRefunded) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementPaymentsAmountRefunded) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementPaymentsAmountRemaining - The remaining amount that can be refunded. Only available when refunds are available for this payment.
type ListSettlementPaymentsAmountRemaining struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementPaymentsAmountRemaining) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementPaymentsAmountRemaining) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementPaymentsAmountCaptured - The total amount that is already captured for this payment. Only available when this payment supports captures.
type ListSettlementPaymentsAmountCaptured struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementPaymentsAmountCaptured) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementPaymentsAmountCaptured) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementPaymentsAmountChargedBack - The total amount that was charged back for this payment. Only available when the total charged back amount is not
// zero.
type ListSettlementPaymentsAmountChargedBack struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementPaymentsAmountChargedBack) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementPaymentsAmountChargedBack) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementPaymentsSettlementAmount - This optional field will contain the approximate amount that will be settled to your account, converted to the
// currency your account is settled in.
//
// Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
// settled by Mollie the `settlementAmount` is omitted from the response.
//
// Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
// using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
type ListSettlementPaymentsSettlementAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementPaymentsSettlementAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementPaymentsSettlementAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementPaymentsLineType - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type ListSettlementPaymentsLineType string

const (
	ListSettlementPaymentsLineTypePhysical    ListSettlementPaymentsLineType = "physical"
	ListSettlementPaymentsLineTypeDigital     ListSettlementPaymentsLineType = "digital"
	ListSettlementPaymentsLineTypeShippingFee ListSettlementPaymentsLineType = "shipping_fee"
	ListSettlementPaymentsLineTypeDiscount    ListSettlementPaymentsLineType = "discount"
	ListSettlementPaymentsLineTypeStoreCredit ListSettlementPaymentsLineType = "store_credit"
	ListSettlementPaymentsLineTypeGiftCard    ListSettlementPaymentsLineType = "gift_card"
	ListSettlementPaymentsLineTypeSurcharge   ListSettlementPaymentsLineType = "surcharge"
	ListSettlementPaymentsLineTypeTip         ListSettlementPaymentsLineType = "tip"
)

func (e ListSettlementPaymentsLineType) ToPointer() *ListSettlementPaymentsLineType {
	return &e
}
func (e *ListSettlementPaymentsLineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "physical":
		fallthrough
	case "digital":
		fallthrough
	case "shipping_fee":
		fallthrough
	case "discount":
		fallthrough
	case "store_credit":
		fallthrough
	case "gift_card":
		fallthrough
	case "surcharge":
		fallthrough
	case "tip":
		*e = ListSettlementPaymentsLineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsLineType: %v", v)
	}
}

// ListSettlementPaymentsUnitPrice - The price of a single item including VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs â‚¬89.00 each.
//
// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
//
// The unit price can be zero in case of free items.
type ListSettlementPaymentsUnitPrice struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementPaymentsUnitPrice) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementPaymentsUnitPrice) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementPaymentsDiscountAmount - Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
// type.
type ListSettlementPaymentsDiscountAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementPaymentsDiscountAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementPaymentsDiscountAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementPaymentsTotalAmount - The total amount of the line, including VAT and discounts.
//
// Should match the following formula: `(unitPrice Ã— quantity) - discountAmount`.
//
// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
type ListSettlementPaymentsTotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementPaymentsTotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementPaymentsTotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementPaymentsVatAmount - The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
// calculated with the formula `totalAmount Ã— (vatRate / (100 + vatRate))`.
//
// Any deviations from this will result in an error.
//
// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
// `SEK 100.00 Ã— (25 / 125) = SEK 20.00`.
type ListSettlementPaymentsVatAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementPaymentsVatAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementPaymentsVatAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type ListSettlementPaymentsCategory string

const (
	ListSettlementPaymentsCategoryMeal         ListSettlementPaymentsCategory = "meal"
	ListSettlementPaymentsCategoryEco          ListSettlementPaymentsCategory = "eco"
	ListSettlementPaymentsCategoryGift         ListSettlementPaymentsCategory = "gift"
	ListSettlementPaymentsCategorySportCulture ListSettlementPaymentsCategory = "sport_culture"
)

func (e ListSettlementPaymentsCategory) ToPointer() *ListSettlementPaymentsCategory {
	return &e
}
func (e *ListSettlementPaymentsCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "meal":
		fallthrough
	case "eco":
		fallthrough
	case "gift":
		fallthrough
	case "sport_culture":
		*e = ListSettlementPaymentsCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsCategory: %v", v)
	}
}

// ListSettlementPaymentsRecurringAmount - Total amount and currency of the recurring item.
type ListSettlementPaymentsRecurringAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementPaymentsRecurringAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementPaymentsRecurringAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementPaymentsRecurring - The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
// to inform the shopper of the details for recurring products in the payments.
type ListSettlementPaymentsRecurring struct {
	// A description of the recurring item. If not present, the main description of the item will be used.
	Description *string `json:"description,omitempty"`
	// Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval string `json:"interval"`
	// Total amount and currency of the recurring item.
	Amount *ListSettlementPaymentsRecurringAmount `json:"amount,omitempty"`
	// Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
	Times *int64 `json:"times,omitempty"`
	// The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
	StartDate *string `json:"startDate,omitempty"`
}

func (o *ListSettlementPaymentsRecurring) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListSettlementPaymentsRecurring) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *ListSettlementPaymentsRecurring) GetAmount() *ListSettlementPaymentsRecurringAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListSettlementPaymentsRecurring) GetTimes() *int64 {
	if o == nil {
		return nil
	}
	return o.Times
}

func (o *ListSettlementPaymentsRecurring) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

type ListSettlementPaymentsLine struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *ListSettlementPaymentsLineType `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// The price of a single item including VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs â‚¬89.00 each.
	//
	// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
	//
	// The unit price can be zero in case of free items.
	UnitPrice ListSettlementPaymentsUnitPrice `json:"unitPrice"`
	// Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
	// type.
	DiscountAmount *ListSettlementPaymentsDiscountAmount `json:"discountAmount,omitempty"`
	// The total amount of the line, including VAT and discounts.
	//
	// Should match the following formula: `(unitPrice Ã— quantity) - discountAmount`.
	//
	// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
	TotalAmount ListSettlementPaymentsTotalAmount `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
	// calculated with the formula `totalAmount Ã— (vatRate / (100 + vatRate))`.
	//
	// Any deviations from this will result in an error.
	//
	// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
	// `SEK 100.00 Ã— (25 / 125) = SEK 20.00`.
	VatAmount *ListSettlementPaymentsVatAmount `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []ListSettlementPaymentsCategory `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string `json:"productUrl,omitempty"`
	// The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
	// to inform the shopper of the details for recurring products in the payments.
	Recurring *ListSettlementPaymentsRecurring `json:"recurring,omitempty"`
}

func (o *ListSettlementPaymentsLine) GetType() *ListSettlementPaymentsLineType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListSettlementPaymentsLine) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *ListSettlementPaymentsLine) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *ListSettlementPaymentsLine) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *ListSettlementPaymentsLine) GetUnitPrice() ListSettlementPaymentsUnitPrice {
	if o == nil {
		return ListSettlementPaymentsUnitPrice{}
	}
	return o.UnitPrice
}

func (o *ListSettlementPaymentsLine) GetDiscountAmount() *ListSettlementPaymentsDiscountAmount {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *ListSettlementPaymentsLine) GetTotalAmount() ListSettlementPaymentsTotalAmount {
	if o == nil {
		return ListSettlementPaymentsTotalAmount{}
	}
	return o.TotalAmount
}

func (o *ListSettlementPaymentsLine) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *ListSettlementPaymentsLine) GetVatAmount() *ListSettlementPaymentsVatAmount {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *ListSettlementPaymentsLine) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *ListSettlementPaymentsLine) GetCategories() []ListSettlementPaymentsCategory {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *ListSettlementPaymentsLine) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *ListSettlementPaymentsLine) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}

func (o *ListSettlementPaymentsLine) GetRecurring() *ListSettlementPaymentsRecurring {
	if o == nil {
		return nil
	}
	return o.Recurring
}

// ListSettlementPaymentsBillingAddress - The customer's billing address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
//
// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
type ListSettlementPaymentsBillingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *ListSettlementPaymentsBillingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *ListSettlementPaymentsBillingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *ListSettlementPaymentsBillingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *ListSettlementPaymentsBillingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *ListSettlementPaymentsBillingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *ListSettlementPaymentsBillingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *ListSettlementPaymentsBillingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *ListSettlementPaymentsBillingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ListSettlementPaymentsBillingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *ListSettlementPaymentsBillingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *ListSettlementPaymentsBillingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *ListSettlementPaymentsBillingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// ListSettlementPaymentsShippingAddress - The customer's shipping address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
type ListSettlementPaymentsShippingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *ListSettlementPaymentsShippingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *ListSettlementPaymentsShippingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *ListSettlementPaymentsShippingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *ListSettlementPaymentsShippingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *ListSettlementPaymentsShippingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *ListSettlementPaymentsShippingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *ListSettlementPaymentsShippingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *ListSettlementPaymentsShippingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ListSettlementPaymentsShippingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *ListSettlementPaymentsShippingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *ListSettlementPaymentsShippingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *ListSettlementPaymentsShippingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// ListSettlementPaymentsLocale - Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
// locale, but our hosted payment pages currently only support the specified languages.
//
// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
// customer use a local bank account greatly increases the conversion and speed of payment.
type ListSettlementPaymentsLocale string

const (
	ListSettlementPaymentsLocaleEnUs ListSettlementPaymentsLocale = "en_US"
	ListSettlementPaymentsLocaleEnGb ListSettlementPaymentsLocale = "en_GB"
	ListSettlementPaymentsLocaleNlNl ListSettlementPaymentsLocale = "nl_NL"
	ListSettlementPaymentsLocaleNlBe ListSettlementPaymentsLocale = "nl_BE"
	ListSettlementPaymentsLocaleDeDe ListSettlementPaymentsLocale = "de_DE"
	ListSettlementPaymentsLocaleDeAt ListSettlementPaymentsLocale = "de_AT"
	ListSettlementPaymentsLocaleDeCh ListSettlementPaymentsLocale = "de_CH"
	ListSettlementPaymentsLocaleFrFr ListSettlementPaymentsLocale = "fr_FR"
	ListSettlementPaymentsLocaleFrBe ListSettlementPaymentsLocale = "fr_BE"
	ListSettlementPaymentsLocaleEsEs ListSettlementPaymentsLocale = "es_ES"
	ListSettlementPaymentsLocaleCaEs ListSettlementPaymentsLocale = "ca_ES"
	ListSettlementPaymentsLocalePtPt ListSettlementPaymentsLocale = "pt_PT"
	ListSettlementPaymentsLocaleItIt ListSettlementPaymentsLocale = "it_IT"
	ListSettlementPaymentsLocaleNbNo ListSettlementPaymentsLocale = "nb_NO"
	ListSettlementPaymentsLocaleSvSe ListSettlementPaymentsLocale = "sv_SE"
	ListSettlementPaymentsLocaleFiFi ListSettlementPaymentsLocale = "fi_FI"
	ListSettlementPaymentsLocaleDaDk ListSettlementPaymentsLocale = "da_DK"
	ListSettlementPaymentsLocaleIsIs ListSettlementPaymentsLocale = "is_IS"
	ListSettlementPaymentsLocaleHuHu ListSettlementPaymentsLocale = "hu_HU"
	ListSettlementPaymentsLocalePlPl ListSettlementPaymentsLocale = "pl_PL"
	ListSettlementPaymentsLocaleLvLv ListSettlementPaymentsLocale = "lv_LV"
	ListSettlementPaymentsLocaleLtLt ListSettlementPaymentsLocale = "lt_LT"
)

func (e ListSettlementPaymentsLocale) ToPointer() *ListSettlementPaymentsLocale {
	return &e
}
func (e *ListSettlementPaymentsLocale) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		fallthrough
	case "es_ES":
		fallthrough
	case "ca_ES":
		fallthrough
	case "pt_PT":
		fallthrough
	case "it_IT":
		fallthrough
	case "nb_NO":
		fallthrough
	case "sv_SE":
		fallthrough
	case "fi_FI":
		fallthrough
	case "da_DK":
		fallthrough
	case "is_IS":
		fallthrough
	case "hu_HU":
		fallthrough
	case "pl_PL":
		fallthrough
	case "lv_LV":
		fallthrough
	case "lt_LT":
		*e = ListSettlementPaymentsLocale(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsLocale: %v", v)
	}
}

// ListSettlementPaymentsMethod - The payment method used for this transaction. If a specific method was selected during payment initialization,
// this field reflects that choice.
type ListSettlementPaymentsMethod string

const (
	ListSettlementPaymentsMethodAlma           ListSettlementPaymentsMethod = "alma"
	ListSettlementPaymentsMethodApplepay       ListSettlementPaymentsMethod = "applepay"
	ListSettlementPaymentsMethodBacs           ListSettlementPaymentsMethod = "bacs"
	ListSettlementPaymentsMethodBancomatpay    ListSettlementPaymentsMethod = "bancomatpay"
	ListSettlementPaymentsMethodBancontact     ListSettlementPaymentsMethod = "bancontact"
	ListSettlementPaymentsMethodBanktransfer   ListSettlementPaymentsMethod = "banktransfer"
	ListSettlementPaymentsMethodBelfius        ListSettlementPaymentsMethod = "belfius"
	ListSettlementPaymentsMethodBillie         ListSettlementPaymentsMethod = "billie"
	ListSettlementPaymentsMethodBizum          ListSettlementPaymentsMethod = "bizum"
	ListSettlementPaymentsMethodBlik           ListSettlementPaymentsMethod = "blik"
	ListSettlementPaymentsMethodCreditcard     ListSettlementPaymentsMethod = "creditcard"
	ListSettlementPaymentsMethodDirectdebit    ListSettlementPaymentsMethod = "directdebit"
	ListSettlementPaymentsMethodEps            ListSettlementPaymentsMethod = "eps"
	ListSettlementPaymentsMethodGiftcard       ListSettlementPaymentsMethod = "giftcard"
	ListSettlementPaymentsMethodIdeal          ListSettlementPaymentsMethod = "ideal"
	ListSettlementPaymentsMethodIn3            ListSettlementPaymentsMethod = "in3"
	ListSettlementPaymentsMethodKbc            ListSettlementPaymentsMethod = "kbc"
	ListSettlementPaymentsMethodKlarna         ListSettlementPaymentsMethod = "klarna"
	ListSettlementPaymentsMethodKlarnapaylater ListSettlementPaymentsMethod = "klarnapaylater"
	ListSettlementPaymentsMethodKlarnapaynow   ListSettlementPaymentsMethod = "klarnapaynow"
	ListSettlementPaymentsMethodKlarnasliceit  ListSettlementPaymentsMethod = "klarnasliceit"
	ListSettlementPaymentsMethodMbway          ListSettlementPaymentsMethod = "mbway"
	ListSettlementPaymentsMethodMultibanco     ListSettlementPaymentsMethod = "multibanco"
	ListSettlementPaymentsMethodMybank         ListSettlementPaymentsMethod = "mybank"
	ListSettlementPaymentsMethodPaybybank      ListSettlementPaymentsMethod = "paybybank"
	ListSettlementPaymentsMethodPayconiq       ListSettlementPaymentsMethod = "payconiq"
	ListSettlementPaymentsMethodPaypal         ListSettlementPaymentsMethod = "paypal"
	ListSettlementPaymentsMethodPaysafecard    ListSettlementPaymentsMethod = "paysafecard"
	ListSettlementPaymentsMethodPointofsale    ListSettlementPaymentsMethod = "pointofsale"
	ListSettlementPaymentsMethodPrzelewy24     ListSettlementPaymentsMethod = "przelewy24"
	ListSettlementPaymentsMethodRiverty        ListSettlementPaymentsMethod = "riverty"
	ListSettlementPaymentsMethodSatispay       ListSettlementPaymentsMethod = "satispay"
	ListSettlementPaymentsMethodSwish          ListSettlementPaymentsMethod = "swish"
	ListSettlementPaymentsMethodTrustly        ListSettlementPaymentsMethod = "trustly"
	ListSettlementPaymentsMethodTwint          ListSettlementPaymentsMethod = "twint"
	ListSettlementPaymentsMethodVoucher        ListSettlementPaymentsMethod = "voucher"
)

func (e ListSettlementPaymentsMethod) ToPointer() *ListSettlementPaymentsMethod {
	return &e
}
func (e *ListSettlementPaymentsMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "applepay":
		fallthrough
	case "bacs":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "kbc":
		fallthrough
	case "klarna":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "pointofsale":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = ListSettlementPaymentsMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsMethod: %v", v)
	}
}

type ListSettlementPaymentsMetadataType string

const (
	ListSettlementPaymentsMetadataTypeStr        ListSettlementPaymentsMetadataType = "str"
	ListSettlementPaymentsMetadataTypeMapOfAny   ListSettlementPaymentsMetadataType = "mapOfAny"
	ListSettlementPaymentsMetadataTypeArrayOfStr ListSettlementPaymentsMetadataType = "arrayOfStr"
)

// ListSettlementPaymentsMetadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type ListSettlementPaymentsMetadata struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type ListSettlementPaymentsMetadataType
}

func CreateListSettlementPaymentsMetadataStr(str string) ListSettlementPaymentsMetadata {
	typ := ListSettlementPaymentsMetadataTypeStr

	return ListSettlementPaymentsMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateListSettlementPaymentsMetadataMapOfAny(mapOfAny map[string]any) ListSettlementPaymentsMetadata {
	typ := ListSettlementPaymentsMetadataTypeMapOfAny

	return ListSettlementPaymentsMetadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateListSettlementPaymentsMetadataArrayOfStr(arrayOfStr []string) ListSettlementPaymentsMetadata {
	typ := ListSettlementPaymentsMetadataTypeArrayOfStr

	return ListSettlementPaymentsMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ListSettlementPaymentsMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = ListSettlementPaymentsMetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ListSettlementPaymentsMetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ListSettlementPaymentsMetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListSettlementPaymentsMetadata", string(data))
}

func (u ListSettlementPaymentsMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ListSettlementPaymentsMetadata: all fields are null")
}

// ListSettlementPaymentsCaptureMode - Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
// and capture at a later time.
//
// This field needs to be set to `manual` for method `riverty`.
type ListSettlementPaymentsCaptureMode string

const (
	ListSettlementPaymentsCaptureModeAutomatic ListSettlementPaymentsCaptureMode = "automatic"
	ListSettlementPaymentsCaptureModeManual    ListSettlementPaymentsCaptureMode = "manual"
)

func (e ListSettlementPaymentsCaptureMode) ToPointer() *ListSettlementPaymentsCaptureMode {
	return &e
}
func (e *ListSettlementPaymentsCaptureMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automatic":
		fallthrough
	case "manual":
		*e = ListSettlementPaymentsCaptureMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsCaptureMode: %v", v)
	}
}

// ListSettlementPaymentsApplicationFeeAmount - The fee that you wish to charge.
//
// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
// a â‚¬0.99 fee on a â‚¬1.00 payment.
type ListSettlementPaymentsApplicationFeeAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementPaymentsApplicationFeeAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementPaymentsApplicationFeeAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementPaymentsApplicationFee - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
//
// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
// `routing` parameter.
type ListSettlementPaymentsApplicationFee struct {
	// The fee that you wish to charge.
	//
	// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
	// a â‚¬0.99 fee on a â‚¬1.00 payment.
	Amount *ListSettlementPaymentsApplicationFeeAmount `json:"amount,omitempty"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description *string `json:"description,omitempty"`
}

func (o *ListSettlementPaymentsApplicationFee) GetAmount() *ListSettlementPaymentsApplicationFeeAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListSettlementPaymentsApplicationFee) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// ListSettlementPaymentsRoutingMode - Whether this entity was created in live mode or in test mode.
type ListSettlementPaymentsRoutingMode string

const (
	ListSettlementPaymentsRoutingModeLive ListSettlementPaymentsRoutingMode = "live"
	ListSettlementPaymentsRoutingModeTest ListSettlementPaymentsRoutingMode = "test"
)

func (e ListSettlementPaymentsRoutingMode) ToPointer() *ListSettlementPaymentsRoutingMode {
	return &e
}
func (e *ListSettlementPaymentsRoutingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = ListSettlementPaymentsRoutingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsRoutingMode: %v", v)
	}
}

// ListSettlementPaymentsRoutingAmount - The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
type ListSettlementPaymentsRoutingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementPaymentsRoutingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementPaymentsRoutingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementPaymentsRoutingType - The type of destination. Currently only the destination type `organization` is supported.
type ListSettlementPaymentsRoutingType string

const (
	ListSettlementPaymentsRoutingTypeOrganization ListSettlementPaymentsRoutingType = "organization"
)

func (e ListSettlementPaymentsRoutingType) ToPointer() *ListSettlementPaymentsRoutingType {
	return &e
}
func (e *ListSettlementPaymentsRoutingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organization":
		*e = ListSettlementPaymentsRoutingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsRoutingType: %v", v)
	}
}

// ListSettlementPaymentsDestination - The destination of this portion of the payment.
type ListSettlementPaymentsDestination struct {
	// The type of destination. Currently only the destination type `organization` is supported.
	Type ListSettlementPaymentsRoutingType `json:"type"`
	// Required for destination type `organization`. The ID of the connected organization the funds should be
	// routed to.
	OrganizationID string `json:"organizationId"`
}

func (o *ListSettlementPaymentsDestination) GetType() ListSettlementPaymentsRoutingType {
	if o == nil {
		return ListSettlementPaymentsRoutingType("")
	}
	return o.Type
}

func (o *ListSettlementPaymentsDestination) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

// ListSettlementPaymentsRoutingSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListSettlementPaymentsRoutingSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsRoutingSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsRoutingSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsRoutingPayment - The API resource URL of the [payment](get-payment) that belong to this route.
type ListSettlementPaymentsRoutingPayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsRoutingPayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsRoutingPayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsRoutingLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type ListSettlementPaymentsRoutingLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self ListSettlementPaymentsRoutingSelf `json:"self"`
	// The API resource URL of the [payment](get-payment) that belong to this route.
	Payment ListSettlementPaymentsRoutingPayment `json:"payment"`
}

func (o *ListSettlementPaymentsRoutingLinks) GetSelf() ListSettlementPaymentsRoutingSelf {
	if o == nil {
		return ListSettlementPaymentsRoutingSelf{}
	}
	return o.Self
}

func (o *ListSettlementPaymentsRoutingLinks) GetPayment() ListSettlementPaymentsRoutingPayment {
	if o == nil {
		return ListSettlementPaymentsRoutingPayment{}
	}
	return o.Payment
}

type ListSettlementPaymentsRouting struct {
	// Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this route. Mollie will always refer to the route by this ID.
	// Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode ListSettlementPaymentsRoutingMode `json:"mode"`
	// The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
	Amount ListSettlementPaymentsRoutingAmount `json:"amount"`
	// The destination of this portion of the payment.
	Destination ListSettlementPaymentsDestination `json:"destination"`
	// The date and time when the route was created. The date is given in ISO 8601 format.
	CreatedAt string `json:"createdAt"`
	// Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
	// date must be given in `YYYY-MM-DD` format.
	//
	// If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
	ReleaseDate *string `json:"releaseDate,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links ListSettlementPaymentsRoutingLinks `json:"_links"`
}

func (o *ListSettlementPaymentsRouting) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *ListSettlementPaymentsRouting) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListSettlementPaymentsRouting) GetMode() ListSettlementPaymentsRoutingMode {
	if o == nil {
		return ListSettlementPaymentsRoutingMode("")
	}
	return o.Mode
}

func (o *ListSettlementPaymentsRouting) GetAmount() ListSettlementPaymentsRoutingAmount {
	if o == nil {
		return ListSettlementPaymentsRoutingAmount{}
	}
	return o.Amount
}

func (o *ListSettlementPaymentsRouting) GetDestination() ListSettlementPaymentsDestination {
	if o == nil {
		return ListSettlementPaymentsDestination{}
	}
	return o.Destination
}

func (o *ListSettlementPaymentsRouting) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListSettlementPaymentsRouting) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *ListSettlementPaymentsRouting) GetLinks() ListSettlementPaymentsRoutingLinks {
	if o == nil {
		return ListSettlementPaymentsRoutingLinks{}
	}
	return o.Links
}

// ListSettlementPaymentsSequenceType - **Only relevant for recurring payments.**
//
// Indicate which part of a recurring sequence this payment is for.
//
// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
// on their account in the future.
//
// If set to `recurring`, the customer's card is charged automatically.
//
// Defaults to `oneoff`, which is a regular non-recurring payment.
//
// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
// are set up correctly for recurring payments.
type ListSettlementPaymentsSequenceType string

const (
	ListSettlementPaymentsSequenceTypeOneoff    ListSettlementPaymentsSequenceType = "oneoff"
	ListSettlementPaymentsSequenceTypeFirst     ListSettlementPaymentsSequenceType = "first"
	ListSettlementPaymentsSequenceTypeRecurring ListSettlementPaymentsSequenceType = "recurring"
)

func (e ListSettlementPaymentsSequenceType) ToPointer() *ListSettlementPaymentsSequenceType {
	return &e
}
func (e *ListSettlementPaymentsSequenceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oneoff":
		fallthrough
	case "first":
		fallthrough
	case "recurring":
		*e = ListSettlementPaymentsSequenceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsSequenceType: %v", v)
	}
}

// ListSettlementPaymentsStatusEnum - The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
// statuses occur at what point.
type ListSettlementPaymentsStatusEnum string

const (
	ListSettlementPaymentsStatusEnumOpen       ListSettlementPaymentsStatusEnum = "open"
	ListSettlementPaymentsStatusEnumPending    ListSettlementPaymentsStatusEnum = "pending"
	ListSettlementPaymentsStatusEnumAuthorized ListSettlementPaymentsStatusEnum = "authorized"
	ListSettlementPaymentsStatusEnumPaid       ListSettlementPaymentsStatusEnum = "paid"
	ListSettlementPaymentsStatusEnumCanceled   ListSettlementPaymentsStatusEnum = "canceled"
	ListSettlementPaymentsStatusEnumExpired    ListSettlementPaymentsStatusEnum = "expired"
	ListSettlementPaymentsStatusEnumFailed     ListSettlementPaymentsStatusEnum = "failed"
)

func (e ListSettlementPaymentsStatusEnum) ToPointer() *ListSettlementPaymentsStatusEnum {
	return &e
}
func (e *ListSettlementPaymentsStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "pending":
		fallthrough
	case "authorized":
		fallthrough
	case "paid":
		fallthrough
	case "canceled":
		fallthrough
	case "expired":
		fallthrough
	case "failed":
		*e = ListSettlementPaymentsStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsStatusEnum: %v", v)
	}
}

// ListSettlementPaymentsCode - A machine-readable code that indicates the reason for the payment's status.
type ListSettlementPaymentsCode string

const (
	ListSettlementPaymentsCodeApprovedOrCompletedSuccessfully             ListSettlementPaymentsCode = "approved_or_completed_successfully"
	ListSettlementPaymentsCodeReferToCardIssuer                           ListSettlementPaymentsCode = "refer_to_card_issuer"
	ListSettlementPaymentsCodeInvalidMerchant                             ListSettlementPaymentsCode = "invalid_merchant"
	ListSettlementPaymentsCodeCaptureCard                                 ListSettlementPaymentsCode = "capture_card"
	ListSettlementPaymentsCodeDoNotHonor                                  ListSettlementPaymentsCode = "do_not_honor"
	ListSettlementPaymentsCodeError                                       ListSettlementPaymentsCode = "error"
	ListSettlementPaymentsCodePartialApproval                             ListSettlementPaymentsCode = "partial_approval"
	ListSettlementPaymentsCodeInvalidTransaction                          ListSettlementPaymentsCode = "invalid_transaction"
	ListSettlementPaymentsCodeInvalidAmount                               ListSettlementPaymentsCode = "invalid_amount"
	ListSettlementPaymentsCodeInvalidIssuer                               ListSettlementPaymentsCode = "invalid_issuer"
	ListSettlementPaymentsCodeLostCard                                    ListSettlementPaymentsCode = "lost_card"
	ListSettlementPaymentsCodeStolenCard                                  ListSettlementPaymentsCode = "stolen_card"
	ListSettlementPaymentsCodeInsufficientFunds                           ListSettlementPaymentsCode = "insufficient_funds"
	ListSettlementPaymentsCodeExpiredCard                                 ListSettlementPaymentsCode = "expired_card"
	ListSettlementPaymentsCodeInvalidPin                                  ListSettlementPaymentsCode = "invalid_pin"
	ListSettlementPaymentsCodeTransactionNotPermittedToCardholder         ListSettlementPaymentsCode = "transaction_not_permitted_to_cardholder"
	ListSettlementPaymentsCodeTransactionNotAllowedAtTerminal             ListSettlementPaymentsCode = "transaction_not_allowed_at_terminal"
	ListSettlementPaymentsCodeExceedsWithdrawalAmountLimit                ListSettlementPaymentsCode = "exceeds_withdrawal_amount_limit"
	ListSettlementPaymentsCodeRestrictedCard                              ListSettlementPaymentsCode = "restricted_card"
	ListSettlementPaymentsCodeSecurityViolation                           ListSettlementPaymentsCode = "security_violation"
	ListSettlementPaymentsCodeExceedsWithdrawalCountLimit                 ListSettlementPaymentsCode = "exceeds_withdrawal_count_limit"
	ListSettlementPaymentsCodeAllowableNumberOfPinTriesExceeded           ListSettlementPaymentsCode = "allowable_number_of_pin_tries_exceeded"
	ListSettlementPaymentsCodeNoReasonToDecline                           ListSettlementPaymentsCode = "no_reason_to_decline"
	ListSettlementPaymentsCodeCannotVerifyPin                             ListSettlementPaymentsCode = "cannot_verify_pin"
	ListSettlementPaymentsCodeIssuerUnavailable                           ListSettlementPaymentsCode = "issuer_unavailable"
	ListSettlementPaymentsCodeUnableToRouteTransaction                    ListSettlementPaymentsCode = "unable_to_route_transaction"
	ListSettlementPaymentsCodeDuplicateTransaction                        ListSettlementPaymentsCode = "duplicate_transaction"
	ListSettlementPaymentsCodeSystemMalfunction                           ListSettlementPaymentsCode = "system_malfunction"
	ListSettlementPaymentsCodeHonorWithID                                 ListSettlementPaymentsCode = "honor_with_id"
	ListSettlementPaymentsCodeInvalidCardNumber                           ListSettlementPaymentsCode = "invalid_card_number"
	ListSettlementPaymentsCodeFormatError                                 ListSettlementPaymentsCode = "format_error"
	ListSettlementPaymentsCodeContactCardIssuer                           ListSettlementPaymentsCode = "contact_card_issuer"
	ListSettlementPaymentsCodePinNotChanged                               ListSettlementPaymentsCode = "pin_not_changed"
	ListSettlementPaymentsCodeInvalidNonexistentToAccountSpecified        ListSettlementPaymentsCode = "invalid_nonexistent_to_account_specified"
	ListSettlementPaymentsCodeInvalidNonexistentFromAccountSpecified      ListSettlementPaymentsCode = "invalid_nonexistent_from_account_specified"
	ListSettlementPaymentsCodeInvalidNonexistentAccountSpecified          ListSettlementPaymentsCode = "invalid_nonexistent_account_specified"
	ListSettlementPaymentsCodeLifecycleRelated                            ListSettlementPaymentsCode = "lifecycle_related"
	ListSettlementPaymentsCodeDomesticDebitTransactionNotAllowed          ListSettlementPaymentsCode = "domestic_debit_transaction_not_allowed"
	ListSettlementPaymentsCodePolicyRelated                               ListSettlementPaymentsCode = "policy_related"
	ListSettlementPaymentsCodeFraudSecurityRelated                        ListSettlementPaymentsCode = "fraud_security_related"
	ListSettlementPaymentsCodeInvalidAuthorizationLifeCycle               ListSettlementPaymentsCode = "invalid_authorization_life_cycle"
	ListSettlementPaymentsCodePurchaseAmountOnlyNoCashBackAllowed         ListSettlementPaymentsCode = "purchase_amount_only_no_cash_back_allowed"
	ListSettlementPaymentsCodeCryptographicFailure                        ListSettlementPaymentsCode = "cryptographic_failure"
	ListSettlementPaymentsCodeUnacceptablePin                             ListSettlementPaymentsCode = "unacceptable_pin"
	ListSettlementPaymentsCodeReferToCardIssuerSpecialCondition           ListSettlementPaymentsCode = "refer_to_card_issuer_special_condition"
	ListSettlementPaymentsCodePickUpCardSpecialCondition                  ListSettlementPaymentsCode = "pick_up_card_special_condition"
	ListSettlementPaymentsCodeVipApproval                                 ListSettlementPaymentsCode = "vip_approval"
	ListSettlementPaymentsCodeInvalidAccountNumber                        ListSettlementPaymentsCode = "invalid_account_number"
	ListSettlementPaymentsCodeReEnterTransaction                          ListSettlementPaymentsCode = "re_enter_transaction"
	ListSettlementPaymentsCodeNoActionTaken                               ListSettlementPaymentsCode = "no_action_taken"
	ListSettlementPaymentsCodeUnableToLocateRecord                        ListSettlementPaymentsCode = "unable_to_locate_record"
	ListSettlementPaymentsCodeFileTemporarilyUnavailable                  ListSettlementPaymentsCode = "file_temporarily_unavailable"
	ListSettlementPaymentsCodeNoCreditAccount                             ListSettlementPaymentsCode = "no_credit_account"
	ListSettlementPaymentsCodeClosedAccount                               ListSettlementPaymentsCode = "closed_account"
	ListSettlementPaymentsCodeNoCheckingAccount                           ListSettlementPaymentsCode = "no_checking_account"
	ListSettlementPaymentsCodeNoSavingsAccount                            ListSettlementPaymentsCode = "no_savings_account"
	ListSettlementPaymentsCodeSuspectedFraud                              ListSettlementPaymentsCode = "suspected_fraud"
	ListSettlementPaymentsCodeTransactionDoesNotFulfillAmlRequirement     ListSettlementPaymentsCode = "transaction_does_not_fulfill_aml_requirement"
	ListSettlementPaymentsCodePinDataRequired                             ListSettlementPaymentsCode = "pin_data_required"
	ListSettlementPaymentsCodeUnableToLocatePreviousMessage               ListSettlementPaymentsCode = "unable_to_locate_previous_message"
	ListSettlementPaymentsCodePreviousMessageLocatedInconsistentData      ListSettlementPaymentsCode = "previous_message_located_inconsistent_data"
	ListSettlementPaymentsCodeBlockedFirstUsed                            ListSettlementPaymentsCode = "blocked_first_used"
	ListSettlementPaymentsCodeTransactionReversed                         ListSettlementPaymentsCode = "transaction_reversed"
	ListSettlementPaymentsCodeCreditIssuerUnavailable                     ListSettlementPaymentsCode = "credit_issuer_unavailable"
	ListSettlementPaymentsCodePinCryptographicErrorFound                  ListSettlementPaymentsCode = "pin_cryptographic_error_found"
	ListSettlementPaymentsCodeNegativeOnlineCamResult                     ListSettlementPaymentsCode = "negative_online_cam_result"
	ListSettlementPaymentsCodeViolationOfLaw                              ListSettlementPaymentsCode = "violation_of_law"
	ListSettlementPaymentsCodeForceStip                                   ListSettlementPaymentsCode = "force_stip"
	ListSettlementPaymentsCodeCashServiceNotAvailable                     ListSettlementPaymentsCode = "cash_service_not_available"
	ListSettlementPaymentsCodeCashbackRequestExceedsIssuerLimit           ListSettlementPaymentsCode = "cashback_request_exceeds_issuer_limit"
	ListSettlementPaymentsCodeDeclineForCvv2Failure                       ListSettlementPaymentsCode = "decline_for_cvv2_failure"
	ListSettlementPaymentsCodeTransactionAmountExceedsPreAuthorizedAmount ListSettlementPaymentsCode = "transaction_amount_exceeds_pre_authorized_amount"
	ListSettlementPaymentsCodeInvalidBillerInformation                    ListSettlementPaymentsCode = "invalid_biller_information"
	ListSettlementPaymentsCodePinChangeUnblockRequestDeclined             ListSettlementPaymentsCode = "pin_change_unblock_request_declined"
	ListSettlementPaymentsCodeUnsafePin                                   ListSettlementPaymentsCode = "unsafe_pin"
	ListSettlementPaymentsCodeCardAuthenticationFailed                    ListSettlementPaymentsCode = "card_authentication_failed"
	ListSettlementPaymentsCodeStopPaymentOrder                            ListSettlementPaymentsCode = "stop_payment_order"
	ListSettlementPaymentsCodeRevocationOfAuthorization                   ListSettlementPaymentsCode = "revocation_of_authorization"
	ListSettlementPaymentsCodeRevocationOfAllAuthorizations               ListSettlementPaymentsCode = "revocation_of_all_authorizations"
	ListSettlementPaymentsCodeForwardToIssuerXa                           ListSettlementPaymentsCode = "forward_to_issuer_xa"
	ListSettlementPaymentsCodeForwardToIssuerXd                           ListSettlementPaymentsCode = "forward_to_issuer_xd"
	ListSettlementPaymentsCodeUnableToGoOnline                            ListSettlementPaymentsCode = "unable_to_go_online"
	ListSettlementPaymentsCodeAdditionalCustomerAuthenticationRequired    ListSettlementPaymentsCode = "additional_customer_authentication_required"
	ListSettlementPaymentsCodeMerchantIDNotFound                          ListSettlementPaymentsCode = "merchant_id_not_found"
	ListSettlementPaymentsCodeMerchantAccountClosed                       ListSettlementPaymentsCode = "merchant_account_closed"
	ListSettlementPaymentsCodeTerminalIDNotFound                          ListSettlementPaymentsCode = "terminal_id_not_found"
	ListSettlementPaymentsCodeTerminalClosed                              ListSettlementPaymentsCode = "terminal_closed"
	ListSettlementPaymentsCodeInvalidCategoryCode                         ListSettlementPaymentsCode = "invalid_category_code"
	ListSettlementPaymentsCodeInvalidCurrency                             ListSettlementPaymentsCode = "invalid_currency"
	ListSettlementPaymentsCodeMissingCvv2Cvc2                             ListSettlementPaymentsCode = "missing_cvv2_cvc2"
	ListSettlementPaymentsCodeCvv2NotAllowed                              ListSettlementPaymentsCode = "cvv2_not_allowed"
	ListSettlementPaymentsCodeMerchantNotRegisteredVbv                    ListSettlementPaymentsCode = "merchant_not_registered_vbv"
	ListSettlementPaymentsCodeMerchantNotRegisteredForAmex                ListSettlementPaymentsCode = "merchant_not_registered_for_amex"
	ListSettlementPaymentsCodeTransactionNotPermittedAtTerminal           ListSettlementPaymentsCode = "transaction_not_permitted_at_terminal"
	ListSettlementPaymentsCodeAgreementTerminalNotRelated                 ListSettlementPaymentsCode = "agreement_terminal_not_related"
	ListSettlementPaymentsCodeInvalidProcessorID                          ListSettlementPaymentsCode = "invalid_processor_id"
	ListSettlementPaymentsCodeInvalidMerchantData                         ListSettlementPaymentsCode = "invalid_merchant_data"
	ListSettlementPaymentsCodeSubMerchantAccountClosed                    ListSettlementPaymentsCode = "sub_merchant_account_closed"
	ListSettlementPaymentsCodeTerminalBusy                                ListSettlementPaymentsCode = "terminal_busy"
	ListSettlementPaymentsCodeTerminalUnreachable                         ListSettlementPaymentsCode = "terminal_unreachable"
	ListSettlementPaymentsCodeServiceFailed                               ListSettlementPaymentsCode = "service_failed"
	ListSettlementPaymentsCodeInvalidOperation                            ListSettlementPaymentsCode = "invalid_operation"
	ListSettlementPaymentsCodeAuthorizationError                          ListSettlementPaymentsCode = "authorization_error"
	ListSettlementPaymentsCodeLoginFailedWithoutReason                    ListSettlementPaymentsCode = "login_failed_without_reason"
	ListSettlementPaymentsCodeInvalidRetailer                             ListSettlementPaymentsCode = "invalid_retailer"
	ListSettlementPaymentsCodeCardDoesNotExist                            ListSettlementPaymentsCode = "card_does_not_exist"
	ListSettlementPaymentsCodeCardIsBlocked                               ListSettlementPaymentsCode = "card_is_blocked"
	ListSettlementPaymentsCodeInvalidCardID                               ListSettlementPaymentsCode = "invalid_card_id"
	ListSettlementPaymentsCodeCardIsTransferred                           ListSettlementPaymentsCode = "card_is_transferred"
	ListSettlementPaymentsCodeCardIsNotActive                             ListSettlementPaymentsCode = "card_is_not_active"
	ListSettlementPaymentsCodeIncorrectPurchaseValue                      ListSettlementPaymentsCode = "incorrect_purchase_value"
	ListSettlementPaymentsCodeCardNotAvailable                            ListSettlementPaymentsCode = "card_not_available"
	ListSettlementPaymentsCodeWrongCurrency                               ListSettlementPaymentsCode = "wrong_currency"
	ListSettlementPaymentsCodeLoginFailedUnknownUser                      ListSettlementPaymentsCode = "login_failed_unknown_user"
	ListSettlementPaymentsCodeLoginFailedInvalidPassword                  ListSettlementPaymentsCode = "login_failed_invalid_password"
	ListSettlementPaymentsCodeInvalidEanCode                              ListSettlementPaymentsCode = "invalid_ean_code"
)

func (e ListSettlementPaymentsCode) ToPointer() *ListSettlementPaymentsCode {
	return &e
}
func (e *ListSettlementPaymentsCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved_or_completed_successfully":
		fallthrough
	case "refer_to_card_issuer":
		fallthrough
	case "invalid_merchant":
		fallthrough
	case "capture_card":
		fallthrough
	case "do_not_honor":
		fallthrough
	case "error":
		fallthrough
	case "partial_approval":
		fallthrough
	case "invalid_transaction":
		fallthrough
	case "invalid_amount":
		fallthrough
	case "invalid_issuer":
		fallthrough
	case "lost_card":
		fallthrough
	case "stolen_card":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "expired_card":
		fallthrough
	case "invalid_pin":
		fallthrough
	case "transaction_not_permitted_to_cardholder":
		fallthrough
	case "transaction_not_allowed_at_terminal":
		fallthrough
	case "exceeds_withdrawal_amount_limit":
		fallthrough
	case "restricted_card":
		fallthrough
	case "security_violation":
		fallthrough
	case "exceeds_withdrawal_count_limit":
		fallthrough
	case "allowable_number_of_pin_tries_exceeded":
		fallthrough
	case "no_reason_to_decline":
		fallthrough
	case "cannot_verify_pin":
		fallthrough
	case "issuer_unavailable":
		fallthrough
	case "unable_to_route_transaction":
		fallthrough
	case "duplicate_transaction":
		fallthrough
	case "system_malfunction":
		fallthrough
	case "honor_with_id":
		fallthrough
	case "invalid_card_number":
		fallthrough
	case "format_error":
		fallthrough
	case "contact_card_issuer":
		fallthrough
	case "pin_not_changed":
		fallthrough
	case "invalid_nonexistent_to_account_specified":
		fallthrough
	case "invalid_nonexistent_from_account_specified":
		fallthrough
	case "invalid_nonexistent_account_specified":
		fallthrough
	case "lifecycle_related":
		fallthrough
	case "domestic_debit_transaction_not_allowed":
		fallthrough
	case "policy_related":
		fallthrough
	case "fraud_security_related":
		fallthrough
	case "invalid_authorization_life_cycle":
		fallthrough
	case "purchase_amount_only_no_cash_back_allowed":
		fallthrough
	case "cryptographic_failure":
		fallthrough
	case "unacceptable_pin":
		fallthrough
	case "refer_to_card_issuer_special_condition":
		fallthrough
	case "pick_up_card_special_condition":
		fallthrough
	case "vip_approval":
		fallthrough
	case "invalid_account_number":
		fallthrough
	case "re_enter_transaction":
		fallthrough
	case "no_action_taken":
		fallthrough
	case "unable_to_locate_record":
		fallthrough
	case "file_temporarily_unavailable":
		fallthrough
	case "no_credit_account":
		fallthrough
	case "closed_account":
		fallthrough
	case "no_checking_account":
		fallthrough
	case "no_savings_account":
		fallthrough
	case "suspected_fraud":
		fallthrough
	case "transaction_does_not_fulfill_aml_requirement":
		fallthrough
	case "pin_data_required":
		fallthrough
	case "unable_to_locate_previous_message":
		fallthrough
	case "previous_message_located_inconsistent_data":
		fallthrough
	case "blocked_first_used":
		fallthrough
	case "transaction_reversed":
		fallthrough
	case "credit_issuer_unavailable":
		fallthrough
	case "pin_cryptographic_error_found":
		fallthrough
	case "negative_online_cam_result":
		fallthrough
	case "violation_of_law":
		fallthrough
	case "force_stip":
		fallthrough
	case "cash_service_not_available":
		fallthrough
	case "cashback_request_exceeds_issuer_limit":
		fallthrough
	case "decline_for_cvv2_failure":
		fallthrough
	case "transaction_amount_exceeds_pre_authorized_amount":
		fallthrough
	case "invalid_biller_information":
		fallthrough
	case "pin_change_unblock_request_declined":
		fallthrough
	case "unsafe_pin":
		fallthrough
	case "card_authentication_failed":
		fallthrough
	case "stop_payment_order":
		fallthrough
	case "revocation_of_authorization":
		fallthrough
	case "revocation_of_all_authorizations":
		fallthrough
	case "forward_to_issuer_xa":
		fallthrough
	case "forward_to_issuer_xd":
		fallthrough
	case "unable_to_go_online":
		fallthrough
	case "additional_customer_authentication_required":
		fallthrough
	case "merchant_id_not_found":
		fallthrough
	case "merchant_account_closed":
		fallthrough
	case "terminal_id_not_found":
		fallthrough
	case "terminal_closed":
		fallthrough
	case "invalid_category_code":
		fallthrough
	case "invalid_currency":
		fallthrough
	case "missing_cvv2_cvc2":
		fallthrough
	case "cvv2_not_allowed":
		fallthrough
	case "merchant_not_registered_vbv":
		fallthrough
	case "merchant_not_registered_for_amex":
		fallthrough
	case "transaction_not_permitted_at_terminal":
		fallthrough
	case "agreement_terminal_not_related":
		fallthrough
	case "invalid_processor_id":
		fallthrough
	case "invalid_merchant_data":
		fallthrough
	case "sub_merchant_account_closed":
		fallthrough
	case "terminal_busy":
		fallthrough
	case "terminal_unreachable":
		fallthrough
	case "service_failed":
		fallthrough
	case "invalid_operation":
		fallthrough
	case "authorization_error":
		fallthrough
	case "login_failed_without_reason":
		fallthrough
	case "invalid_retailer":
		fallthrough
	case "card_does_not_exist":
		fallthrough
	case "card_is_blocked":
		fallthrough
	case "invalid_card_id":
		fallthrough
	case "card_is_transferred":
		fallthrough
	case "card_is_not_active":
		fallthrough
	case "incorrect_purchase_value":
		fallthrough
	case "card_not_available":
		fallthrough
	case "wrong_currency":
		fallthrough
	case "login_failed_unknown_user":
		fallthrough
	case "login_failed_invalid_password":
		fallthrough
	case "invalid_ean_code":
		*e = ListSettlementPaymentsCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsCode: %v", v)
	}
}

// ListSettlementPaymentsStatusReason - This object offers details about the status of a payment. Currently it is only available for point-of-sale
// payments.
//
// You can find more information about the possible values of this object on
// [this page](status-reasons).**
type ListSettlementPaymentsStatusReason struct {
	Code ListSettlementPaymentsCode `json:"code"`
	// A description of the status reason, localized according to the payment `locale`.
	Message string `json:"message"`
}

func (o *ListSettlementPaymentsStatusReason) GetCode() ListSettlementPaymentsCode {
	if o == nil {
		return ListSettlementPaymentsCode("")
	}
	return o.Code
}

func (o *ListSettlementPaymentsStatusReason) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

// ListSettlementPaymentsCardAudition - The card's target audience, if known.
type ListSettlementPaymentsCardAudition string

const (
	ListSettlementPaymentsCardAuditionConsumer ListSettlementPaymentsCardAudition = "consumer"
	ListSettlementPaymentsCardAuditionBusiness ListSettlementPaymentsCardAudition = "business"
)

func (e ListSettlementPaymentsCardAudition) ToPointer() *ListSettlementPaymentsCardAudition {
	return &e
}
func (e *ListSettlementPaymentsCardAudition) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "business":
		*e = ListSettlementPaymentsCardAudition(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsCardAudition: %v", v)
	}
}

// ListSettlementPaymentsCardLabel - The card's label, if known.
type ListSettlementPaymentsCardLabel string

const (
	ListSettlementPaymentsCardLabelAmericanExpress ListSettlementPaymentsCardLabel = "American Express"
	ListSettlementPaymentsCardLabelCartaSi         ListSettlementPaymentsCardLabel = "Carta Si"
	ListSettlementPaymentsCardLabelCarteBleue      ListSettlementPaymentsCardLabel = "Carte Bleue"
	ListSettlementPaymentsCardLabelDankort         ListSettlementPaymentsCardLabel = "Dankort"
	ListSettlementPaymentsCardLabelDinersClub      ListSettlementPaymentsCardLabel = "Diners Club"
	ListSettlementPaymentsCardLabelDiscover        ListSettlementPaymentsCardLabel = "Discover"
	ListSettlementPaymentsCardLabelJcb             ListSettlementPaymentsCardLabel = "JCB"
	ListSettlementPaymentsCardLabelLaser           ListSettlementPaymentsCardLabel = "Laser"
	ListSettlementPaymentsCardLabelMaestro         ListSettlementPaymentsCardLabel = "Maestro"
	ListSettlementPaymentsCardLabelMastercard      ListSettlementPaymentsCardLabel = "Mastercard"
	ListSettlementPaymentsCardLabelUnionpay        ListSettlementPaymentsCardLabel = "Unionpay"
	ListSettlementPaymentsCardLabelVisa            ListSettlementPaymentsCardLabel = "Visa"
	ListSettlementPaymentsCardLabelVpay            ListSettlementPaymentsCardLabel = "Vpay"
)

func (e ListSettlementPaymentsCardLabel) ToPointer() *ListSettlementPaymentsCardLabel {
	return &e
}
func (e *ListSettlementPaymentsCardLabel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "American Express":
		fallthrough
	case "Carta Si":
		fallthrough
	case "Carte Bleue":
		fallthrough
	case "Dankort":
		fallthrough
	case "Diners Club":
		fallthrough
	case "Discover":
		fallthrough
	case "JCB":
		fallthrough
	case "Laser":
		fallthrough
	case "Maestro":
		fallthrough
	case "Mastercard":
		fallthrough
	case "Unionpay":
		fallthrough
	case "Visa":
		fallthrough
	case "Vpay":
		*e = ListSettlementPaymentsCardLabel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsCardLabel: %v", v)
	}
}

// ListSettlementPaymentsCardFunding - The card type.
type ListSettlementPaymentsCardFunding string

const (
	ListSettlementPaymentsCardFundingDebit         ListSettlementPaymentsCardFunding = "debit"
	ListSettlementPaymentsCardFundingCredit        ListSettlementPaymentsCardFunding = "credit"
	ListSettlementPaymentsCardFundingPrepaid       ListSettlementPaymentsCardFunding = "prepaid"
	ListSettlementPaymentsCardFundingDeferredDebit ListSettlementPaymentsCardFunding = "deferred-debit"
)

func (e ListSettlementPaymentsCardFunding) ToPointer() *ListSettlementPaymentsCardFunding {
	return &e
}
func (e *ListSettlementPaymentsCardFunding) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debit":
		fallthrough
	case "credit":
		fallthrough
	case "prepaid":
		fallthrough
	case "deferred-debit":
		*e = ListSettlementPaymentsCardFunding(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsCardFunding: %v", v)
	}
}

// ListSettlementPaymentsCardSecurity - The level of security applied during card processing.
type ListSettlementPaymentsCardSecurity string

const (
	ListSettlementPaymentsCardSecurityNormal       ListSettlementPaymentsCardSecurity = "normal"
	ListSettlementPaymentsCardSecurityThreedsecure ListSettlementPaymentsCardSecurity = "3dsecure"
)

func (e ListSettlementPaymentsCardSecurity) ToPointer() *ListSettlementPaymentsCardSecurity {
	return &e
}
func (e *ListSettlementPaymentsCardSecurity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "normal":
		fallthrough
	case "3dsecure":
		*e = ListSettlementPaymentsCardSecurity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsCardSecurity: %v", v)
	}
}

// ListSettlementPaymentsFeeRegion - The applicable card fee region.
type ListSettlementPaymentsFeeRegion string

const (
	ListSettlementPaymentsFeeRegionAmericanExpress  ListSettlementPaymentsFeeRegion = "american-express"
	ListSettlementPaymentsFeeRegionAmexIntraEea     ListSettlementPaymentsFeeRegion = "amex-intra-eea"
	ListSettlementPaymentsFeeRegionCarteBancaire    ListSettlementPaymentsFeeRegion = "carte-bancaire"
	ListSettlementPaymentsFeeRegionIntraEu          ListSettlementPaymentsFeeRegion = "intra-eu"
	ListSettlementPaymentsFeeRegionIntraEuCorporate ListSettlementPaymentsFeeRegion = "intra-eu-corporate"
	ListSettlementPaymentsFeeRegionDomestic         ListSettlementPaymentsFeeRegion = "domestic"
	ListSettlementPaymentsFeeRegionMaestro          ListSettlementPaymentsFeeRegion = "maestro"
	ListSettlementPaymentsFeeRegionOther            ListSettlementPaymentsFeeRegion = "other"
	ListSettlementPaymentsFeeRegionInter            ListSettlementPaymentsFeeRegion = "inter"
	ListSettlementPaymentsFeeRegionIntraEea         ListSettlementPaymentsFeeRegion = "intra_eea"
)

func (e ListSettlementPaymentsFeeRegion) ToPointer() *ListSettlementPaymentsFeeRegion {
	return &e
}
func (e *ListSettlementPaymentsFeeRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "american-express":
		fallthrough
	case "amex-intra-eea":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "intra-eu":
		fallthrough
	case "intra-eu-corporate":
		fallthrough
	case "domestic":
		fallthrough
	case "maestro":
		fallthrough
	case "other":
		fallthrough
	case "inter":
		fallthrough
	case "intra_eea":
		*e = ListSettlementPaymentsFeeRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsFeeRegion: %v", v)
	}
}

// ListSettlementPaymentsFailureReason - A failure code to help understand why the payment failed.
type ListSettlementPaymentsFailureReason string

const (
	ListSettlementPaymentsFailureReasonAuthenticationAbandoned      ListSettlementPaymentsFailureReason = "authentication_abandoned"
	ListSettlementPaymentsFailureReasonAuthenticationFailed         ListSettlementPaymentsFailureReason = "authentication_failed"
	ListSettlementPaymentsFailureReasonAuthenticationRequired       ListSettlementPaymentsFailureReason = "authentication_required"
	ListSettlementPaymentsFailureReasonAuthenticationUnavailableAcs ListSettlementPaymentsFailureReason = "authentication_unavailable_acs"
	ListSettlementPaymentsFailureReasonCardDeclined                 ListSettlementPaymentsFailureReason = "card_declined"
	ListSettlementPaymentsFailureReasonCardExpired                  ListSettlementPaymentsFailureReason = "card_expired"
	ListSettlementPaymentsFailureReasonInactiveCard                 ListSettlementPaymentsFailureReason = "inactive_card"
	ListSettlementPaymentsFailureReasonInsufficientFunds            ListSettlementPaymentsFailureReason = "insufficient_funds"
	ListSettlementPaymentsFailureReasonInvalidCvv                   ListSettlementPaymentsFailureReason = "invalid_cvv"
	ListSettlementPaymentsFailureReasonInvalidCardHolderName        ListSettlementPaymentsFailureReason = "invalid_card_holder_name"
	ListSettlementPaymentsFailureReasonInvalidCardNumber            ListSettlementPaymentsFailureReason = "invalid_card_number"
	ListSettlementPaymentsFailureReasonInvalidCardType              ListSettlementPaymentsFailureReason = "invalid_card_type"
	ListSettlementPaymentsFailureReasonPossibleFraud                ListSettlementPaymentsFailureReason = "possible_fraud"
	ListSettlementPaymentsFailureReasonRefusedByIssuer              ListSettlementPaymentsFailureReason = "refused_by_issuer"
	ListSettlementPaymentsFailureReasonUnknownReason                ListSettlementPaymentsFailureReason = "unknown_reason"
)

func (e ListSettlementPaymentsFailureReason) ToPointer() *ListSettlementPaymentsFailureReason {
	return &e
}
func (e *ListSettlementPaymentsFailureReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "authentication_abandoned":
		fallthrough
	case "authentication_failed":
		fallthrough
	case "authentication_required":
		fallthrough
	case "authentication_unavailable_acs":
		fallthrough
	case "card_declined":
		fallthrough
	case "card_expired":
		fallthrough
	case "inactive_card":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "invalid_cvv":
		fallthrough
	case "invalid_card_holder_name":
		fallthrough
	case "invalid_card_number":
		fallthrough
	case "invalid_card_type":
		fallthrough
	case "possible_fraud":
		fallthrough
	case "refused_by_issuer":
		fallthrough
	case "unknown_reason":
		*e = ListSettlementPaymentsFailureReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsFailureReason: %v", v)
	}
}

// ListSettlementPaymentsWallet - The wallet used when creating the payment.
type ListSettlementPaymentsWallet string

const (
	ListSettlementPaymentsWalletApplepay ListSettlementPaymentsWallet = "applepay"
)

func (e ListSettlementPaymentsWallet) ToPointer() *ListSettlementPaymentsWallet {
	return &e
}
func (e *ListSettlementPaymentsWallet) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "applepay":
		*e = ListSettlementPaymentsWallet(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsWallet: %v", v)
	}
}

// ListSettlementPaymentsSellerProtection - Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
// payments, and if the information is made available by PayPal.
type ListSettlementPaymentsSellerProtection string

const (
	ListSettlementPaymentsSellerProtectionEligible                          ListSettlementPaymentsSellerProtection = "Eligible"
	ListSettlementPaymentsSellerProtectionIneligible                        ListSettlementPaymentsSellerProtection = "Ineligible"
	ListSettlementPaymentsSellerProtectionPartiallyEligibleInrOnly          ListSettlementPaymentsSellerProtection = "Partially Eligible - INR Only"
	ListSettlementPaymentsSellerProtectionPartiallyEligibleUnauthOnly       ListSettlementPaymentsSellerProtection = "Partially Eligible - Unauth Only"
	ListSettlementPaymentsSellerProtectionPartiallyEligible                 ListSettlementPaymentsSellerProtection = "Partially Eligible"
	ListSettlementPaymentsSellerProtectionNone                              ListSettlementPaymentsSellerProtection = "None"
	ListSettlementPaymentsSellerProtectionActive                            ListSettlementPaymentsSellerProtection = "Active"
	ListSettlementPaymentsSellerProtectionFraudControlUnauthPremiumEligible ListSettlementPaymentsSellerProtection = "Fraud Control - Unauth Premium Eligible"
)

func (e ListSettlementPaymentsSellerProtection) ToPointer() *ListSettlementPaymentsSellerProtection {
	return &e
}
func (e *ListSettlementPaymentsSellerProtection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Eligible":
		fallthrough
	case "Ineligible":
		fallthrough
	case "Partially Eligible - INR Only":
		fallthrough
	case "Partially Eligible - Unauth Only":
		fallthrough
	case "Partially Eligible":
		fallthrough
	case "None":
		fallthrough
	case "Active":
		fallthrough
	case "Fraud Control - Unauth Premium Eligible":
		*e = ListSettlementPaymentsSellerProtection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsSellerProtection: %v", v)
	}
}

// ListSettlementPaymentsPaypalFee - An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
// PayPal will not charge a fee for this transaction.
type ListSettlementPaymentsPaypalFee struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementPaymentsPaypalFee) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementPaymentsPaypalFee) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementPaymentsCardReadMethod - The method by which the card was read by the terminal.
type ListSettlementPaymentsCardReadMethod string

const (
	ListSettlementPaymentsCardReadMethodChip                   ListSettlementPaymentsCardReadMethod = "chip"
	ListSettlementPaymentsCardReadMethodMagneticStripe         ListSettlementPaymentsCardReadMethod = "magnetic-stripe"
	ListSettlementPaymentsCardReadMethodNearFieldCommunication ListSettlementPaymentsCardReadMethod = "near-field-communication"
	ListSettlementPaymentsCardReadMethodContactless            ListSettlementPaymentsCardReadMethod = "contactless"
	ListSettlementPaymentsCardReadMethodMoto                   ListSettlementPaymentsCardReadMethod = "moto"
)

func (e ListSettlementPaymentsCardReadMethod) ToPointer() *ListSettlementPaymentsCardReadMethod {
	return &e
}
func (e *ListSettlementPaymentsCardReadMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "chip":
		fallthrough
	case "magnetic-stripe":
		fallthrough
	case "near-field-communication":
		fallthrough
	case "contactless":
		fallthrough
	case "moto":
		*e = ListSettlementPaymentsCardReadMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsCardReadMethod: %v", v)
	}
}

// ListSettlementPaymentsCardVerificationMethod - The method used to verify the cardholder's identity.
type ListSettlementPaymentsCardVerificationMethod string

const (
	ListSettlementPaymentsCardVerificationMethodNoCvmRequired         ListSettlementPaymentsCardVerificationMethod = "no-cvm-required"
	ListSettlementPaymentsCardVerificationMethodOnlinePin             ListSettlementPaymentsCardVerificationMethod = "online-pin"
	ListSettlementPaymentsCardVerificationMethodOfflinePin            ListSettlementPaymentsCardVerificationMethod = "offline-pin"
	ListSettlementPaymentsCardVerificationMethodConsumerDevice        ListSettlementPaymentsCardVerificationMethod = "consumer-device"
	ListSettlementPaymentsCardVerificationMethodSignature             ListSettlementPaymentsCardVerificationMethod = "signature"
	ListSettlementPaymentsCardVerificationMethodSignatureAndOnlinePin ListSettlementPaymentsCardVerificationMethod = "signature-and-online-pin"
	ListSettlementPaymentsCardVerificationMethodOnlinePinAndSignature ListSettlementPaymentsCardVerificationMethod = "online-pin-and-signature"
	ListSettlementPaymentsCardVerificationMethodNone                  ListSettlementPaymentsCardVerificationMethod = "none"
	ListSettlementPaymentsCardVerificationMethodFailed                ListSettlementPaymentsCardVerificationMethod = "failed"
)

func (e ListSettlementPaymentsCardVerificationMethod) ToPointer() *ListSettlementPaymentsCardVerificationMethod {
	return &e
}
func (e *ListSettlementPaymentsCardVerificationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "no-cvm-required":
		fallthrough
	case "online-pin":
		fallthrough
	case "offline-pin":
		fallthrough
	case "consumer-device":
		fallthrough
	case "signature":
		fallthrough
	case "signature-and-online-pin":
		fallthrough
	case "online-pin-and-signature":
		fallthrough
	case "none":
		fallthrough
	case "failed":
		*e = ListSettlementPaymentsCardVerificationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementPaymentsCardVerificationMethod: %v", v)
	}
}

// ListSettlementPaymentsReceipt - The Point of sale receipt object.
type ListSettlementPaymentsReceipt struct {
	// A unique code provided by the cardholderâ€™s bank to confirm that the transaction was successfully approved.
	AuthorizationCode *string `json:"authorizationCode,omitempty"`
	// The unique number that identifies a specific payment application on a chip card.
	ApplicationIdentifier *string `json:"applicationIdentifier,omitempty"`
	// The method by which the card was read by the terminal.
	CardReadMethod *ListSettlementPaymentsCardReadMethod `json:"cardReadMethod,omitempty"`
	// The method used to verify the cardholder's identity.
	CardVerificationMethod *ListSettlementPaymentsCardVerificationMethod `json:"cardVerificationMethod,omitempty"`
}

func (o *ListSettlementPaymentsReceipt) GetAuthorizationCode() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizationCode
}

func (o *ListSettlementPaymentsReceipt) GetApplicationIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationIdentifier
}

func (o *ListSettlementPaymentsReceipt) GetCardReadMethod() *ListSettlementPaymentsCardReadMethod {
	if o == nil {
		return nil
	}
	return o.CardReadMethod
}

func (o *ListSettlementPaymentsReceipt) GetCardVerificationMethod() *ListSettlementPaymentsCardVerificationMethod {
	if o == nil {
		return nil
	}
	return o.CardVerificationMethod
}

// ListSettlementPaymentsQrCode - Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
// the QR code details will be available in this object.
//
// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
// Bancontact QR payments can be completed by the customer using the Bancontact app.
type ListSettlementPaymentsQrCode struct {
	// The height of the QR code image in pixels.
	Height *int64 `json:"height,omitempty"`
	// The width of the QR code image in pixels.
	Width *int64 `json:"width,omitempty"`
	// The URL to the QR code image. The image is a PNG file, and can be displayed directly in the browser or
	// downloaded.
	Src *string `json:"src,omitempty"`
}

func (o *ListSettlementPaymentsQrCode) GetHeight() *int64 {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *ListSettlementPaymentsQrCode) GetWidth() *int64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *ListSettlementPaymentsQrCode) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

// ListSettlementPaymentsRemainderAmount - An amount object for the amount that remained after all gift cards or vouchers were applied.
type ListSettlementPaymentsRemainderAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementPaymentsRemainderAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementPaymentsRemainderAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSettlementPaymentsDetails - An object containing payment details collected during the payment process. For example, details may include the
// customer's card or bank details and a payment reference. For the full list of details, please refer to the
// [method-specific parameters](extra-payment-parameters) guide.
type ListSettlementPaymentsDetails struct {
	// The customer's name, if made available by the payment method. For card payments, refer to details.cardHolder.
	ConsumerName *string `json:"consumerName,omitempty"`
	// The customer's account reference.
	//
	// For banking-based payment methods â€” such as iDEAL â€” this is normally either an IBAN or a domestic bank account
	// number.
	//
	// For PayPal, the account reference is an email address.
	//
	// For card and Bancontact payments, refer to details.cardNumber.
	ConsumerAccount *string `json:"consumerAccount,omitempty"`
	// The BIC of the customer's bank account, if applicable.
	ConsumerBic *string `json:"consumerBic,omitempty"`
	// For wallet payment methods â€” such as Apple Pay and PayPal â€” the shipping address is often already known by the
	// wallet provider. In these cases the shipping address may be available as a payment detail.
	ShippingAddress map[string]any `json:"shippingAddress,omitempty"`
	// For bancontact, it will be the customer's masked card number. For cards, it will be the last 4-digit of the
	// PAN. For Point-of-sale, it will be the the last 4 digits of the customer's masked card number.
	CardNumber *string `json:"cardNumber,omitempty"`
	// The name of the bank that the customer will need to make the bank transfer payment towards.
	BankName *string `json:"bankName,omitempty"`
	// The bank account number the customer will need to make the bank transfer payment towards.
	BankAccount *string `json:"bankAccount,omitempty"`
	// The BIC of the bank the customer will need to make the bank transfer payment towards.
	BankBic *string `json:"bankBic,omitempty"`
	// The Mollie-generated reference the customer needs to use when transfering the amount. Do not apply any
	// formatting here; show it to the customer as-is.
	TransferReference *string `json:"transferReference,omitempty"`
	// A unique fingerprint for a specific card. Can be used to identify returning customers.
	//
	// In the case of Point-of-sale payments, it's a unique identifier assigned to a cardholder's payment account,
	// linking multiple transactions from wallets and physical card to a single account, also across payment methods
	// or when the card is reissued.
	CardFingerprint *string `json:"cardFingerprint,omitempty"`
	// The customer's name as shown on their card.
	CardHolder *string `json:"cardHolder,omitempty"`
	// The card's target audience, if known.
	CardAudition *ListSettlementPaymentsCardAudition `json:"cardAudition,omitempty"`
	// The card's label, if known.
	CardLabel *ListSettlementPaymentsCardLabel `json:"cardLabel,omitempty"`
	// The ISO 3166-1 alpha-2 country code of the country the card was issued in.
	CardCountryCode *string `json:"cardCountryCode,omitempty"`
	// The expiry date (MM/YY) of the card as displayed on the card.
	CardExpiryDate *string `json:"cardExpiryDate,omitempty"`
	// The card type.
	CardFunding *ListSettlementPaymentsCardFunding `json:"cardFunding,omitempty"`
	// The level of security applied during card processing.
	CardSecurity *ListSettlementPaymentsCardSecurity `json:"cardSecurity,omitempty"`
	// The applicable card fee region.
	FeeRegion *ListSettlementPaymentsFeeRegion `json:"feeRegion,omitempty"`
	// The first 6 and last 4 digits of the card number.
	CardMaskedNumber *string `json:"cardMaskedNumber,omitempty"`
	// The outcome of authentication attempted on transactions enforced by 3DS (ie valid only for oneoff and first).
	Card3dsEci *string `json:"card3dsEci,omitempty"`
	// The first 6 digit of the card bank identification number.
	CardBin *string `json:"cardBin,omitempty"`
	// The issuer of the Card.
	CardIssuer *string `json:"cardIssuer,omitempty"`
	// A failure code to help understand why the payment failed.
	FailureReason *ListSettlementPaymentsFailureReason `json:"failureReason,omitempty"`
	// A human-friendly failure message that can be shown to the customer. The message is translated in accordance
	// with the payment's locale setting.
	FailureMessage *string `json:"failureMessage,omitempty"`
	// The wallet used when creating the payment.
	Wallet *ListSettlementPaymentsWallet `json:"wallet,omitempty"`
	// PayPal's reference for the payment.
	PaypalReference *string `json:"paypalReference,omitempty"`
	// ID of the customer's PayPal account.
	PaypalPayerID *string `json:"paypalPayerId,omitempty"`
	// Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
	// payments, and if the information is made available by PayPal.
	SellerProtection *ListSettlementPaymentsSellerProtection `json:"sellerProtection,omitempty"`
	// An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
	// PayPal will not charge a fee for this transaction.
	PaypalFee *ListSettlementPaymentsPaypalFee `json:"paypalFee,omitempty"`
	// The paysafecard customer reference either provided via the API or otherwise auto-generated by Mollie.
	CustomerReference *string `json:"customerReference,omitempty"`
	// The ID of the terminal device where the payment took place on.
	TerminalID *string `json:"terminalId,omitempty"`
	// The first 6 digits & last 4 digits of the customer's masked card number.
	MaskedNumber *string `json:"maskedNumber,omitempty"`
	// The Point of sale receipt object.
	Receipt *ListSettlementPaymentsReceipt `json:"receipt,omitempty"`
	// The creditor identifier indicates who is authorized to execute the payment. In this case, it is a
	// reference to Mollie.
	CreditorIdentifier *string `json:"creditorIdentifier,omitempty"`
	// Estimated date the payment is debited from the customer's bank account, in YYYY-MM-DD format.
	DueDate *types.Date `json:"dueDate,omitempty"`
	// Date the payment has been signed by the customer, in YYYY-MM-DD format. Only available if the payment
	// has been signed.
	SignatureDate *types.Date `json:"signatureDate,omitempty"`
	// The official reason why this payment has failed. A detailed description of each reason is available on the
	// website of the European Payments Council.
	BankReasonCode *string `json:"bankReasonCode,omitempty"`
	// A human-friendly description of the failure reason.
	BankReason *string `json:"bankReason,omitempty"`
	// The end-to-end identifier you provided in the batch file.
	EndToEndIdentifier *string `json:"endToEndIdentifier,omitempty"`
	// The mandate reference you provided in the batch file.
	MandateReference *string `json:"mandateReference,omitempty"`
	// The batch reference you provided in the batch file.
	BatchReference *string `json:"batchReference,omitempty"`
	// The file reference you provided in the batch file.
	FileReference *string `json:"fileReference,omitempty"`
	// Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
	// the QR code details will be available in this object.
	//
	// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
	// Bancontact QR payments can be completed by the customer using the Bancontact app.
	QrCode *ListSettlementPaymentsQrCode `json:"qrCode,omitempty"`
	// For payments with gift cards: the masked gift card number of the first gift card applied to the payment.
	VoucherNumber *string `json:"voucherNumber,omitempty"`
	// An array of detail objects for each gift card that was used on this payment, if any.
	Giftcards []map[string]any `json:"giftcards,omitempty"`
	// For payments with vouchers: the brand name of the first voucher applied.
	Issuer *string `json:"issuer,omitempty"`
	// An array of detail objects for each voucher that was used on this payment, if any.
	Vouchers []map[string]any `json:"vouchers,omitempty"`
	// An amount object for the amount that remained after all gift cards or vouchers were applied.
	RemainderAmount *ListSettlementPaymentsRemainderAmount `json:"remainderAmount,omitempty"`
	// The payment method used to pay the remainder amount, after all gift cards or vouchers were applied.
	RemainderMethod *string `json:"remainderMethod,omitempty"`
	// Optional include. The full payment method details of the remainder payment.
	RemainderDetails map[string]any `json:"remainderDetails,omitempty"`
}

func (l ListSettlementPaymentsDetails) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListSettlementPaymentsDetails) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *ListSettlementPaymentsDetails) GetConsumerName() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerName
}

func (o *ListSettlementPaymentsDetails) GetConsumerAccount() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerAccount
}

func (o *ListSettlementPaymentsDetails) GetConsumerBic() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerBic
}

func (o *ListSettlementPaymentsDetails) GetShippingAddress() map[string]any {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *ListSettlementPaymentsDetails) GetCardNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardNumber
}

func (o *ListSettlementPaymentsDetails) GetBankName() *string {
	if o == nil {
		return nil
	}
	return o.BankName
}

func (o *ListSettlementPaymentsDetails) GetBankAccount() *string {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *ListSettlementPaymentsDetails) GetBankBic() *string {
	if o == nil {
		return nil
	}
	return o.BankBic
}

func (o *ListSettlementPaymentsDetails) GetTransferReference() *string {
	if o == nil {
		return nil
	}
	return o.TransferReference
}

func (o *ListSettlementPaymentsDetails) GetCardFingerprint() *string {
	if o == nil {
		return nil
	}
	return o.CardFingerprint
}

func (o *ListSettlementPaymentsDetails) GetCardHolder() *string {
	if o == nil {
		return nil
	}
	return o.CardHolder
}

func (o *ListSettlementPaymentsDetails) GetCardAudition() *ListSettlementPaymentsCardAudition {
	if o == nil {
		return nil
	}
	return o.CardAudition
}

func (o *ListSettlementPaymentsDetails) GetCardLabel() *ListSettlementPaymentsCardLabel {
	if o == nil {
		return nil
	}
	return o.CardLabel
}

func (o *ListSettlementPaymentsDetails) GetCardCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CardCountryCode
}

func (o *ListSettlementPaymentsDetails) GetCardExpiryDate() *string {
	if o == nil {
		return nil
	}
	return o.CardExpiryDate
}

func (o *ListSettlementPaymentsDetails) GetCardFunding() *ListSettlementPaymentsCardFunding {
	if o == nil {
		return nil
	}
	return o.CardFunding
}

func (o *ListSettlementPaymentsDetails) GetCardSecurity() *ListSettlementPaymentsCardSecurity {
	if o == nil {
		return nil
	}
	return o.CardSecurity
}

func (o *ListSettlementPaymentsDetails) GetFeeRegion() *ListSettlementPaymentsFeeRegion {
	if o == nil {
		return nil
	}
	return o.FeeRegion
}

func (o *ListSettlementPaymentsDetails) GetCardMaskedNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardMaskedNumber
}

func (o *ListSettlementPaymentsDetails) GetCard3dsEci() *string {
	if o == nil {
		return nil
	}
	return o.Card3dsEci
}

func (o *ListSettlementPaymentsDetails) GetCardBin() *string {
	if o == nil {
		return nil
	}
	return o.CardBin
}

func (o *ListSettlementPaymentsDetails) GetCardIssuer() *string {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *ListSettlementPaymentsDetails) GetFailureReason() *ListSettlementPaymentsFailureReason {
	if o == nil {
		return nil
	}
	return o.FailureReason
}

func (o *ListSettlementPaymentsDetails) GetFailureMessage() *string {
	if o == nil {
		return nil
	}
	return o.FailureMessage
}

func (o *ListSettlementPaymentsDetails) GetWallet() *ListSettlementPaymentsWallet {
	if o == nil {
		return nil
	}
	return o.Wallet
}

func (o *ListSettlementPaymentsDetails) GetPaypalReference() *string {
	if o == nil {
		return nil
	}
	return o.PaypalReference
}

func (o *ListSettlementPaymentsDetails) GetPaypalPayerID() *string {
	if o == nil {
		return nil
	}
	return o.PaypalPayerID
}

func (o *ListSettlementPaymentsDetails) GetSellerProtection() *ListSettlementPaymentsSellerProtection {
	if o == nil {
		return nil
	}
	return o.SellerProtection
}

func (o *ListSettlementPaymentsDetails) GetPaypalFee() *ListSettlementPaymentsPaypalFee {
	if o == nil {
		return nil
	}
	return o.PaypalFee
}

func (o *ListSettlementPaymentsDetails) GetCustomerReference() *string {
	if o == nil {
		return nil
	}
	return o.CustomerReference
}

func (o *ListSettlementPaymentsDetails) GetTerminalID() *string {
	if o == nil {
		return nil
	}
	return o.TerminalID
}

func (o *ListSettlementPaymentsDetails) GetMaskedNumber() *string {
	if o == nil {
		return nil
	}
	return o.MaskedNumber
}

func (o *ListSettlementPaymentsDetails) GetReceipt() *ListSettlementPaymentsReceipt {
	if o == nil {
		return nil
	}
	return o.Receipt
}

func (o *ListSettlementPaymentsDetails) GetCreditorIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.CreditorIdentifier
}

func (o *ListSettlementPaymentsDetails) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *ListSettlementPaymentsDetails) GetSignatureDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.SignatureDate
}

func (o *ListSettlementPaymentsDetails) GetBankReasonCode() *string {
	if o == nil {
		return nil
	}
	return o.BankReasonCode
}

func (o *ListSettlementPaymentsDetails) GetBankReason() *string {
	if o == nil {
		return nil
	}
	return o.BankReason
}

func (o *ListSettlementPaymentsDetails) GetEndToEndIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.EndToEndIdentifier
}

func (o *ListSettlementPaymentsDetails) GetMandateReference() *string {
	if o == nil {
		return nil
	}
	return o.MandateReference
}

func (o *ListSettlementPaymentsDetails) GetBatchReference() *string {
	if o == nil {
		return nil
	}
	return o.BatchReference
}

func (o *ListSettlementPaymentsDetails) GetFileReference() *string {
	if o == nil {
		return nil
	}
	return o.FileReference
}

func (o *ListSettlementPaymentsDetails) GetQrCode() *ListSettlementPaymentsQrCode {
	if o == nil {
		return nil
	}
	return o.QrCode
}

func (o *ListSettlementPaymentsDetails) GetVoucherNumber() *string {
	if o == nil {
		return nil
	}
	return o.VoucherNumber
}

func (o *ListSettlementPaymentsDetails) GetGiftcards() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Giftcards
}

func (o *ListSettlementPaymentsDetails) GetIssuer() *string {
	if o == nil {
		return nil
	}
	return o.Issuer
}

func (o *ListSettlementPaymentsDetails) GetVouchers() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Vouchers
}

func (o *ListSettlementPaymentsDetails) GetRemainderAmount() *ListSettlementPaymentsRemainderAmount {
	if o == nil {
		return nil
	}
	return o.RemainderAmount
}

func (o *ListSettlementPaymentsDetails) GetRemainderMethod() *string {
	if o == nil {
		return nil
	}
	return o.RemainderMethod
}

func (o *ListSettlementPaymentsDetails) GetRemainderDetails() map[string]any {
	if o == nil {
		return nil
	}
	return o.RemainderDetails
}

// ListSettlementPaymentsPaymentSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListSettlementPaymentsPaymentSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsPaymentSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsPaymentSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsCheckout - The URL your customer should visit to make the payment. This is where you should redirect the customer to.
type ListSettlementPaymentsCheckout struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsCheckout) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsCheckout) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsMobileAppCheckout - The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
type ListSettlementPaymentsMobileAppCheckout struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsMobileAppCheckout) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsMobileAppCheckout) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsChangePaymentState - For test mode payments in certain scenarios, a hosted interface is available to help you test different
// payment states.
//
// Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
// payments are executed without any user interaction.
//
// Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
// chargeback for the test payment.
type ListSettlementPaymentsChangePaymentState struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsChangePaymentState) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsChangePaymentState) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsDashboard - Direct link to the payment in the Mollie Dashboard.
type ListSettlementPaymentsDashboard struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsDashboard) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsDashboard) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsRefunds - The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
type ListSettlementPaymentsRefunds struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsRefunds) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsRefunds) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsChargebacks - The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
// payment.
type ListSettlementPaymentsChargebacks struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsChargebacks) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsChargebacks) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsCaptures - The API resource URL of the [captures](list-payment-captures) that belong to this payment.
type ListSettlementPaymentsCaptures struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsCaptures) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsCaptures) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsSettlement - The API resource URL of the [settlement](get-settlement) this payment has been settled with.
// Not present if not yet settled.
type ListSettlementPaymentsSettlement struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsSettlement) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsSettlement) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsCustomer - The API resource URL of the [customer](get-customer).
type ListSettlementPaymentsCustomer struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsCustomer) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsCustomer) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsMandate - The API resource URL of the [mandate](get-mandate).
type ListSettlementPaymentsMandate struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsMandate) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsMandate) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsSubscription - The API resource URL of the [subscription](get-subscription).
type ListSettlementPaymentsSubscription struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsSubscription) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsSubscription) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsOrder - The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
// order.
type ListSettlementPaymentsOrder struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsOrder) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsOrder) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsTerminal - The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
// point-of-sale payments.
type ListSettlementPaymentsTerminal struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsTerminal) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsTerminal) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsPaymentDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListSettlementPaymentsPaymentDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsPaymentDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsPaymentDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsLinksStatus - Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
// successful).
type ListSettlementPaymentsLinksStatus struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsLinksStatus) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsLinksStatus) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsPayOnline - Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
// bank transfer.
type ListSettlementPaymentsPayOnline struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsPayOnline) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsPayOnline) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsPaymentLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type ListSettlementPaymentsPaymentLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self ListSettlementPaymentsPaymentSelf `json:"self"`
	// The URL your customer should visit to make the payment. This is where you should redirect the customer to.
	Checkout *ListSettlementPaymentsCheckout `json:"checkout,omitempty"`
	// The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
	MobileAppCheckout *ListSettlementPaymentsMobileAppCheckout `json:"mobileAppCheckout,omitempty"`
	// For test mode payments in certain scenarios, a hosted interface is available to help you test different
	// payment states.
	//
	// Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
	// payments are executed without any user interaction.
	//
	// Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
	// chargeback for the test payment.
	ChangePaymentState *ListSettlementPaymentsChangePaymentState `json:"changePaymentState,omitempty"`
	// Direct link to the payment in the Mollie Dashboard.
	Dashboard ListSettlementPaymentsDashboard `json:"dashboard"`
	// The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
	Refunds *ListSettlementPaymentsRefunds `json:"refunds,omitempty"`
	// The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
	// payment.
	Chargebacks *ListSettlementPaymentsChargebacks `json:"chargebacks,omitempty"`
	// The API resource URL of the [captures](list-payment-captures) that belong to this payment.
	Captures *ListSettlementPaymentsCaptures `json:"captures,omitempty"`
	// The API resource URL of the [settlement](get-settlement) this payment has been settled with.
	// Not present if not yet settled.
	Settlement *ListSettlementPaymentsSettlement `json:"settlement,omitempty"`
	// The API resource URL of the [customer](get-customer).
	Customer *ListSettlementPaymentsCustomer `json:"customer,omitempty"`
	// The API resource URL of the [mandate](get-mandate).
	Mandate *ListSettlementPaymentsMandate `json:"mandate,omitempty"`
	// The API resource URL of the [subscription](get-subscription).
	Subscription *ListSettlementPaymentsSubscription `json:"subscription,omitempty"`
	// The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
	// order.
	Order *ListSettlementPaymentsOrder `json:"order,omitempty"`
	// The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
	// point-of-sale payments.
	Terminal *ListSettlementPaymentsTerminal `json:"terminal,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *ListSettlementPaymentsPaymentDocumentation `json:"documentation,omitempty"`
	// Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
	// successful).
	Status *ListSettlementPaymentsLinksStatus `json:"status,omitempty"`
	// Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
	// bank transfer.
	PayOnline *ListSettlementPaymentsPayOnline `json:"payOnline,omitempty"`
}

func (o *ListSettlementPaymentsPaymentLinks) GetSelf() ListSettlementPaymentsPaymentSelf {
	if o == nil {
		return ListSettlementPaymentsPaymentSelf{}
	}
	return o.Self
}

func (o *ListSettlementPaymentsPaymentLinks) GetCheckout() *ListSettlementPaymentsCheckout {
	if o == nil {
		return nil
	}
	return o.Checkout
}

func (o *ListSettlementPaymentsPaymentLinks) GetMobileAppCheckout() *ListSettlementPaymentsMobileAppCheckout {
	if o == nil {
		return nil
	}
	return o.MobileAppCheckout
}

func (o *ListSettlementPaymentsPaymentLinks) GetChangePaymentState() *ListSettlementPaymentsChangePaymentState {
	if o == nil {
		return nil
	}
	return o.ChangePaymentState
}

func (o *ListSettlementPaymentsPaymentLinks) GetDashboard() ListSettlementPaymentsDashboard {
	if o == nil {
		return ListSettlementPaymentsDashboard{}
	}
	return o.Dashboard
}

func (o *ListSettlementPaymentsPaymentLinks) GetRefunds() *ListSettlementPaymentsRefunds {
	if o == nil {
		return nil
	}
	return o.Refunds
}

func (o *ListSettlementPaymentsPaymentLinks) GetChargebacks() *ListSettlementPaymentsChargebacks {
	if o == nil {
		return nil
	}
	return o.Chargebacks
}

func (o *ListSettlementPaymentsPaymentLinks) GetCaptures() *ListSettlementPaymentsCaptures {
	if o == nil {
		return nil
	}
	return o.Captures
}

func (o *ListSettlementPaymentsPaymentLinks) GetSettlement() *ListSettlementPaymentsSettlement {
	if o == nil {
		return nil
	}
	return o.Settlement
}

func (o *ListSettlementPaymentsPaymentLinks) GetCustomer() *ListSettlementPaymentsCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *ListSettlementPaymentsPaymentLinks) GetMandate() *ListSettlementPaymentsMandate {
	if o == nil {
		return nil
	}
	return o.Mandate
}

func (o *ListSettlementPaymentsPaymentLinks) GetSubscription() *ListSettlementPaymentsSubscription {
	if o == nil {
		return nil
	}
	return o.Subscription
}

func (o *ListSettlementPaymentsPaymentLinks) GetOrder() *ListSettlementPaymentsOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListSettlementPaymentsPaymentLinks) GetTerminal() *ListSettlementPaymentsTerminal {
	if o == nil {
		return nil
	}
	return o.Terminal
}

func (o *ListSettlementPaymentsPaymentLinks) GetDocumentation() *ListSettlementPaymentsPaymentDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

func (o *ListSettlementPaymentsPaymentLinks) GetStatus() *ListSettlementPaymentsLinksStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListSettlementPaymentsPaymentLinks) GetPayOnline() *ListSettlementPaymentsPayOnline {
	if o == nil {
		return nil
	}
	return o.PayOnline
}

type ListSettlementPaymentsPaymentOutput struct {
	// Indicates the response contains a payment object. Will always contain the string `payment` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this payment. Mollie assigns this identifier at payment creation time. Mollie
	// will always refer to the payment by this ID. Example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode ListSettlementPaymentsMode `json:"mode"`
	// The description of the payment. This will be shown to your customer on their card or bank statement when possible.
	// We truncate the description automatically according to the limits of the used payment method. The description is
	// also visible in any exports you generate.
	//
	// We recommend you use a unique identifier so that you can always link the payment to the order in your back office.
	// This is particularly useful for bookkeeping.
	//
	// The maximum length of the description field differs per payment method, with the absolute maximum being 255
	// characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
	Description string `json:"description"`
	// The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge â‚¬1000.00.
	//
	// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
	// retrieved using the Get method endpoint.
	//
	// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
	// tip amount.
	Amount ListSettlementPaymentsAmount `json:"amount"`
	// The total amount that is already refunded. Only available when refunds are available for this payment. For some
	// payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
	// costs for a return shipment to the customer.
	AmountRefunded *ListSettlementPaymentsAmountRefunded `json:"amountRefunded,omitempty"`
	// The remaining amount that can be refunded. Only available when refunds are available for this payment.
	AmountRemaining *ListSettlementPaymentsAmountRemaining `json:"amountRemaining,omitempty"`
	// The total amount that is already captured for this payment. Only available when this payment supports captures.
	AmountCaptured *ListSettlementPaymentsAmountCaptured `json:"amountCaptured,omitempty"`
	// The total amount that was charged back for this payment. Only available when the total charged back amount is not
	// zero.
	AmountChargedBack *ListSettlementPaymentsAmountChargedBack `json:"amountChargedBack,omitempty"`
	// This optional field will contain the approximate amount that will be settled to your account, converted to the
	// currency your account is settled in.
	//
	// Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
	// settled by Mollie the `settlementAmount` is omitted from the response.
	//
	// Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
	// using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
	SettlementAmount *ListSettlementPaymentsSettlementAmount `json:"settlementAmount,omitempty"`
	// The URL your customer will be redirected to after the payment process.
	//
	// It could make sense for the redirectUrl to contain a unique identifier â€“ like your order ID â€“ so you can show the
	// right page referencing the order when your customer returns.
	//
	// The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for
	// Apple Pay payments with an `applePayPaymentToken`.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not
	// provided, the customer will be redirected to the `redirectUrl` instead â€” see above.
	//
	// Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is
	// therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle
	// payment cancellations.
	CancelURL *string `json:"cancelUrl,omitempty"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines []ListSettlementPaymentsLine `json:"lines,omitempty"`
	// The customer's billing address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	//
	// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
	BillingAddress *ListSettlementPaymentsBillingAddress `json:"billingAddress,omitempty"`
	// The customer's shipping address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	ShippingAddress *ListSettlementPaymentsShippingAddress `json:"shippingAddress,omitempty"`
	// Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
	// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
	// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
	// locale, but our hosted payment pages currently only support the specified languages.
	//
	// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
	// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
	// customer use a local bank account greatly increases the conversion and speed of payment.
	Locale *ListSettlementPaymentsLocale `json:"locale,omitempty"`
	// This optional field contains your customer's ISO 3166-1 alpha-2 country code, detected by us during checkout. This
	// field is omitted if the country code was not detected.
	CountryCode *string `json:"countryCode,omitempty"`
	// The payment method used for this transaction. If a specific method was selected during payment initialization,
	// this field reflects that choice.
	Method *ListSettlementPaymentsMethod `json:"method,omitempty"`
	// For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT
	// rates you have used for the order to ensure your customer's country matches the VAT country.
	//
	// Use this parameter to restrict the payment methods available to your customer to those from a single country.
	//
	// If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
	//
	// The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
	RestrictPaymentMethodsToCountry *string `json:"restrictPaymentMethodsToCountry,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *ListSettlementPaymentsMetadata `json:"metadata,omitempty"`
	// Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
	// and capture at a later time.
	//
	// This field needs to be set to `manual` for method `riverty`.
	CaptureMode *ListSettlementPaymentsCaptureMode `json:"captureMode,omitempty"`
	// **Only relevant if you wish to manage authorization and capturing separately.**
	//
	// Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a
	// later point either be 'captured' or canceled.
	//
	// By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a
	// capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For
	// example `8 hours` or `2 days`.
	//
	// To schedule an automatic capture, the `captureMode` must be set to `automatic`.
	//
	// The maximum delay is 7 days (168 hours).
	//
	// Possible values: `... hours` `... days`
	CaptureDelay *string `json:"captureDelay,omitempty"`
	// Indicates the date before which the payment needs to be captured, in ISO 8601 format. From this date onwards we
	// can no longer guarantee a successful capture. The parameter is omitted if the payment is not authorized (yet).
	CaptureBefore *string `json:"captureBefore,omitempty"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	//
	// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
	// `routing` parameter.
	ApplicationFee *ListSettlementPaymentsApplicationFee `json:"applicationFee,omitempty"`
	// *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
	//
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you create payments on your own account that you want to split between yourself and one or more connected
	// merchants, you can use this `routing` parameter to route the payment accordingly.
	//
	// The `routing` parameter should contain an array of objects, with each object describing the destination for a
	// specific portion of the payment.
	//
	// It is not necessary to indicate in the array which portion goes to yourself. After all portions of the total
	// payment amount have been routed, the amount left will be routed to the current organization automatically.
	//
	// If instead you use OAuth to create payments on a connected merchant's account, refer to the `applicationFee`
	// parameter.
	Routing []ListSettlementPaymentsRouting `json:"routing,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// Indicate which part of a recurring sequence this payment is for.
	//
	// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
	// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
	// on their account in the future.
	//
	// If set to `recurring`, the customer's card is charged automatically.
	//
	// Defaults to `oneoff`, which is a regular non-recurring payment.
	//
	// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
	// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
	// are set up correctly for recurring payments.
	SequenceType *ListSettlementPaymentsSequenceType `json:"sequenceType"`
	// If the payment was automatically created via a subscription, the ID of the [subscription](get-subscription) will
	// be added to the response.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// When creating recurring payments, the ID of a specific [mandate](get-mandate) can be supplied to indicate which of
	// the customer's accounts should be credited.
	MandateID *string `json:"mandateId,omitempty"`
	// The ID of the [customer](get-customer) the payment is being created for. This is used primarily for recurring
	// payments, but can also be used on regular payments to enable single-click payments.
	//
	// If `sequenceType` is set to `recurring`, this field is required.
	CustomerID *string `json:"customerId,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// When using an API Key, the `profileId` can be omitted since it is linked to the key. However, for OAuth and
	// Organization tokens, the `profileId` is required.
	//
	// For more information, see [Authentication](authentication).
	ProfileID string `json:"profileId"`
	// The identifier referring to the [settlement](get-settlement) this payment was settled with.
	SettlementID *string `json:"settlementId,omitempty"`
	// If the payment was created for an [order](get-order), the ID of that order will be part of the response.
	OrderID *string `json:"orderId,omitempty"`
	// The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
	// statuses occur at what point.
	Status ListSettlementPaymentsStatusEnum `json:"status"`
	// This object offers details about the status of a payment. Currently it is only available for point-of-sale
	// payments.
	//
	// You can find more information about the possible values of this object on
	// [this page](status-reasons).**
	StatusReason *ListSettlementPaymentsStatusReason `json:"statusReason,omitempty"`
	// Whether the payment can be canceled. This parameter is omitted if the payment reaches a final state.
	IsCancelable *bool `json:"isCancelable,omitempty"`
	// An object containing payment details collected during the payment process. For example, details may include the
	// customer's card or bank details and a payment reference. For the full list of details, please refer to the
	// [method-specific parameters](extra-payment-parameters) guide.
	Details *ListSettlementPaymentsDetails `json:"details,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The date and time the payment became authorized, in ISO 8601 format. This parameter is omitted if the payment is
	// not authorized (yet).
	AuthorizedAt *string `json:"authorizedAt,omitempty"`
	// The date and time the payment became paid, in ISO 8601 format. This parameter is omitted if the payment is not
	// completed (yet).
	PaidAt *string `json:"paidAt,omitempty"`
	// The date and time the payment was canceled, in ISO 8601 format. This parameter is omitted if the payment is not
	// canceled (yet).
	CanceledAt *string `json:"canceledAt,omitempty"`
	// The date and time the payment will expire, in ISO 8601 format. This parameter is omitted if the payment can no
	// longer expire.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The date and time the payment was expired, in ISO 8601 format. This parameter is omitted if the payment did not
	// expire (yet).
	ExpiredAt *string `json:"expiredAt,omitempty"`
	// The date and time the payment failed, in ISO 8601 format. This parameter is omitted if the payment did not fail
	// (yet).
	FailedAt *string `json:"failedAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links ListSettlementPaymentsPaymentLinks `json:"_links"`
}

func (o *ListSettlementPaymentsPaymentOutput) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *ListSettlementPaymentsPaymentOutput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListSettlementPaymentsPaymentOutput) GetMode() ListSettlementPaymentsMode {
	if o == nil {
		return ListSettlementPaymentsMode("")
	}
	return o.Mode
}

func (o *ListSettlementPaymentsPaymentOutput) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *ListSettlementPaymentsPaymentOutput) GetAmount() ListSettlementPaymentsAmount {
	if o == nil {
		return ListSettlementPaymentsAmount{}
	}
	return o.Amount
}

func (o *ListSettlementPaymentsPaymentOutput) GetAmountRefunded() *ListSettlementPaymentsAmountRefunded {
	if o == nil {
		return nil
	}
	return o.AmountRefunded
}

func (o *ListSettlementPaymentsPaymentOutput) GetAmountRemaining() *ListSettlementPaymentsAmountRemaining {
	if o == nil {
		return nil
	}
	return o.AmountRemaining
}

func (o *ListSettlementPaymentsPaymentOutput) GetAmountCaptured() *ListSettlementPaymentsAmountCaptured {
	if o == nil {
		return nil
	}
	return o.AmountCaptured
}

func (o *ListSettlementPaymentsPaymentOutput) GetAmountChargedBack() *ListSettlementPaymentsAmountChargedBack {
	if o == nil {
		return nil
	}
	return o.AmountChargedBack
}

func (o *ListSettlementPaymentsPaymentOutput) GetSettlementAmount() *ListSettlementPaymentsSettlementAmount {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *ListSettlementPaymentsPaymentOutput) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *ListSettlementPaymentsPaymentOutput) GetCancelURL() *string {
	if o == nil {
		return nil
	}
	return o.CancelURL
}

func (o *ListSettlementPaymentsPaymentOutput) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *ListSettlementPaymentsPaymentOutput) GetLines() []ListSettlementPaymentsLine {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *ListSettlementPaymentsPaymentOutput) GetBillingAddress() *ListSettlementPaymentsBillingAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *ListSettlementPaymentsPaymentOutput) GetShippingAddress() *ListSettlementPaymentsShippingAddress {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *ListSettlementPaymentsPaymentOutput) GetLocale() *ListSettlementPaymentsLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *ListSettlementPaymentsPaymentOutput) GetCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CountryCode
}

func (o *ListSettlementPaymentsPaymentOutput) GetMethod() *ListSettlementPaymentsMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *ListSettlementPaymentsPaymentOutput) GetRestrictPaymentMethodsToCountry() *string {
	if o == nil {
		return nil
	}
	return o.RestrictPaymentMethodsToCountry
}

func (o *ListSettlementPaymentsPaymentOutput) GetMetadata() *ListSettlementPaymentsMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ListSettlementPaymentsPaymentOutput) GetCaptureMode() *ListSettlementPaymentsCaptureMode {
	if o == nil {
		return nil
	}
	return o.CaptureMode
}

func (o *ListSettlementPaymentsPaymentOutput) GetCaptureDelay() *string {
	if o == nil {
		return nil
	}
	return o.CaptureDelay
}

func (o *ListSettlementPaymentsPaymentOutput) GetCaptureBefore() *string {
	if o == nil {
		return nil
	}
	return o.CaptureBefore
}

func (o *ListSettlementPaymentsPaymentOutput) GetApplicationFee() *ListSettlementPaymentsApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *ListSettlementPaymentsPaymentOutput) GetRouting() []ListSettlementPaymentsRouting {
	if o == nil {
		return nil
	}
	return o.Routing
}

func (o *ListSettlementPaymentsPaymentOutput) GetSequenceType() *ListSettlementPaymentsSequenceType {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *ListSettlementPaymentsPaymentOutput) GetSubscriptionID() *string {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

func (o *ListSettlementPaymentsPaymentOutput) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *ListSettlementPaymentsPaymentOutput) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *ListSettlementPaymentsPaymentOutput) GetProfileID() string {
	if o == nil {
		return ""
	}
	return o.ProfileID
}

func (o *ListSettlementPaymentsPaymentOutput) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *ListSettlementPaymentsPaymentOutput) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *ListSettlementPaymentsPaymentOutput) GetStatus() ListSettlementPaymentsStatusEnum {
	if o == nil {
		return ListSettlementPaymentsStatusEnum("")
	}
	return o.Status
}

func (o *ListSettlementPaymentsPaymentOutput) GetStatusReason() *ListSettlementPaymentsStatusReason {
	if o == nil {
		return nil
	}
	return o.StatusReason
}

func (o *ListSettlementPaymentsPaymentOutput) GetIsCancelable() *bool {
	if o == nil {
		return nil
	}
	return o.IsCancelable
}

func (o *ListSettlementPaymentsPaymentOutput) GetDetails() *ListSettlementPaymentsDetails {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *ListSettlementPaymentsPaymentOutput) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListSettlementPaymentsPaymentOutput) GetAuthorizedAt() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizedAt
}

func (o *ListSettlementPaymentsPaymentOutput) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *ListSettlementPaymentsPaymentOutput) GetCanceledAt() *string {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *ListSettlementPaymentsPaymentOutput) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *ListSettlementPaymentsPaymentOutput) GetExpiredAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredAt
}

func (o *ListSettlementPaymentsPaymentOutput) GetFailedAt() *string {
	if o == nil {
		return nil
	}
	return o.FailedAt
}

func (o *ListSettlementPaymentsPaymentOutput) GetLinks() ListSettlementPaymentsPaymentLinks {
	if o == nil {
		return ListSettlementPaymentsPaymentLinks{}
	}
	return o.Links
}

type ListSettlementPaymentsEmbedded struct {
	// An array of payment objects.
	Payments []ListSettlementPaymentsPaymentOutput `json:"payments,omitempty"`
}

func (o *ListSettlementPaymentsEmbedded) GetPayments() []ListSettlementPaymentsPaymentOutput {
	if o == nil {
		return nil
	}
	return o.Payments
}

// ListSettlementPaymentsSelf - The URL to the current set of items.
type ListSettlementPaymentsSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsPrevious - The previous set of items, if available.
type ListSettlementPaymentsPrevious struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSettlementPaymentsPrevious) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSettlementPaymentsPrevious) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSettlementPaymentsNext - The next set of items, if available.
type ListSettlementPaymentsNext struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSettlementPaymentsNext) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSettlementPaymentsNext) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSettlementPaymentsDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListSettlementPaymentsDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementPaymentsDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementPaymentsDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementPaymentsLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
type ListSettlementPaymentsLinks struct {
	// The URL to the current set of items.
	Self ListSettlementPaymentsSelf `json:"self"`
	// The previous set of items, if available.
	Previous *ListSettlementPaymentsPrevious `json:"previous"`
	// The next set of items, if available.
	Next *ListSettlementPaymentsNext `json:"next"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListSettlementPaymentsDocumentation `json:"documentation"`
}

func (o *ListSettlementPaymentsLinks) GetSelf() ListSettlementPaymentsSelf {
	if o == nil {
		return ListSettlementPaymentsSelf{}
	}
	return o.Self
}

func (o *ListSettlementPaymentsLinks) GetPrevious() *ListSettlementPaymentsPrevious {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *ListSettlementPaymentsLinks) GetNext() *ListSettlementPaymentsNext {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListSettlementPaymentsLinks) GetDocumentation() ListSettlementPaymentsDocumentation {
	if o == nil {
		return ListSettlementPaymentsDocumentation{}
	}
	return o.Documentation
}

// ListSettlementPaymentsResponseBody - A list of payment objects.
type ListSettlementPaymentsResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    int64                          `json:"count"`
	Embedded ListSettlementPaymentsEmbedded `json:"_embedded"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links ListSettlementPaymentsLinks `json:"_links"`
}

func (o *ListSettlementPaymentsResponseBody) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListSettlementPaymentsResponseBody) GetEmbedded() ListSettlementPaymentsEmbedded {
	if o == nil {
		return ListSettlementPaymentsEmbedded{}
	}
	return o.Embedded
}

func (o *ListSettlementPaymentsResponseBody) GetLinks() ListSettlementPaymentsLinks {
	if o == nil {
		return ListSettlementPaymentsLinks{}
	}
	return o.Links
}

type ListSettlementPaymentsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of payment objects.
	Object *ListSettlementPaymentsResponseBody
}

func (o *ListSettlementPaymentsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListSettlementPaymentsResponse) GetObject() *ListSettlementPaymentsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
