// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

type ListBalancesRequest struct {
	// Optionally only return balances with the given currency. For example: `EUR`.
	Currency *string `queryParam:"style=form,explode=true,name=currency"`
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
	// result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *ListBalancesRequest) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *ListBalancesRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListBalancesRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListBalancesRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// ListBalancesNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type ListBalancesNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListBalancesNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListBalancesNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListBalancesNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListBalancesNotFoundDocumentation `json:"documentation"`
}

func (o *ListBalancesNotFoundLinks) GetDocumentation() ListBalancesNotFoundDocumentation {
	if o == nil {
		return ListBalancesNotFoundDocumentation{}
	}
	return o.Documentation
}

// ListBalancesBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type ListBalancesBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListBalancesBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListBalancesBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListBalancesBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListBalancesBadRequestDocumentation `json:"documentation"`
}

func (o *ListBalancesBadRequestLinks) GetDocumentation() ListBalancesBadRequestDocumentation {
	if o == nil {
		return ListBalancesBadRequestDocumentation{}
	}
	return o.Documentation
}

// ListBalancesMode - Whether this entity was created in live mode or in test mode.
type ListBalancesMode string

const (
	ListBalancesModeLive ListBalancesMode = "live"
	ListBalancesModeTest ListBalancesMode = "test"
)

func (e ListBalancesMode) ToPointer() *ListBalancesMode {
	return &e
}
func (e *ListBalancesMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = ListBalancesMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBalancesMode: %v", v)
	}
}

// ListBalancesCurrency - The balance's ISO 4217 currency code.
type ListBalancesCurrency string

const (
	ListBalancesCurrencyEur ListBalancesCurrency = "EUR"
	ListBalancesCurrencyGbp ListBalancesCurrency = "GBP"
	ListBalancesCurrencyChf ListBalancesCurrency = "CHF"
	ListBalancesCurrencyDkk ListBalancesCurrency = "DKK"
	ListBalancesCurrencyNok ListBalancesCurrency = "NOK"
	ListBalancesCurrencyPln ListBalancesCurrency = "PLN"
	ListBalancesCurrencySek ListBalancesCurrency = "SEK"
	ListBalancesCurrencyUsd ListBalancesCurrency = "USD"
	ListBalancesCurrencyCzk ListBalancesCurrency = "CZK"
	ListBalancesCurrencyHuf ListBalancesCurrency = "HUF"
	ListBalancesCurrencyAud ListBalancesCurrency = "AUD"
	ListBalancesCurrencyCad ListBalancesCurrency = "CAD"
)

func (e ListBalancesCurrency) ToPointer() *ListBalancesCurrency {
	return &e
}
func (e *ListBalancesCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "CHF":
		fallthrough
	case "DKK":
		fallthrough
	case "NOK":
		fallthrough
	case "PLN":
		fallthrough
	case "SEK":
		fallthrough
	case "USD":
		fallthrough
	case "CZK":
		fallthrough
	case "HUF":
		fallthrough
	case "AUD":
		fallthrough
	case "CAD":
		*e = ListBalancesCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBalancesCurrency: %v", v)
	}
}

// ListBalancesStatus - The status of the balance.
type ListBalancesStatus string

const (
	ListBalancesStatusActive   ListBalancesStatus = "active"
	ListBalancesStatusInactive ListBalancesStatus = "inactive"
)

func (e ListBalancesStatus) ToPointer() *ListBalancesStatus {
	return &e
}
func (e *ListBalancesStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		*e = ListBalancesStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBalancesStatus: %v", v)
	}
}

// ListBalancesTransferFrequency - The frequency with which the available amount on the balance will be settled to the configured transfer
// destination.
//
// Settlements created during weekends or on bank holidays will take place on the next business day.
type ListBalancesTransferFrequency string

const (
	ListBalancesTransferFrequencyDaily          ListBalancesTransferFrequency = "daily"
	ListBalancesTransferFrequencyEveryMonday    ListBalancesTransferFrequency = "every-monday"
	ListBalancesTransferFrequencyEveryTuesday   ListBalancesTransferFrequency = "every-tuesday"
	ListBalancesTransferFrequencyEveryWednesday ListBalancesTransferFrequency = "every-wednesday"
	ListBalancesTransferFrequencyEveryThursday  ListBalancesTransferFrequency = "every-thursday"
	ListBalancesTransferFrequencyEveryFriday    ListBalancesTransferFrequency = "every-friday"
	ListBalancesTransferFrequencyMonthly        ListBalancesTransferFrequency = "monthly"
	ListBalancesTransferFrequencyNever          ListBalancesTransferFrequency = "never"
)

func (e ListBalancesTransferFrequency) ToPointer() *ListBalancesTransferFrequency {
	return &e
}
func (e *ListBalancesTransferFrequency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "daily":
		fallthrough
	case "every-monday":
		fallthrough
	case "every-tuesday":
		fallthrough
	case "every-wednesday":
		fallthrough
	case "every-thursday":
		fallthrough
	case "every-friday":
		fallthrough
	case "monthly":
		fallthrough
	case "never":
		*e = ListBalancesTransferFrequency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBalancesTransferFrequency: %v", v)
	}
}

// ListBalancesTransferThreshold - The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds
// this threshold, the complete balance will be paid out to the transfer destination according to the configured
// frequency.
type ListBalancesTransferThreshold struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListBalancesTransferThreshold) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListBalancesTransferThreshold) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListBalancesType - The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
//
// * `bank-account` — Transfer the balance amount to an external bank account
type ListBalancesType string

const (
	ListBalancesTypeBankAccount ListBalancesType = "bank-account"
)

func (e ListBalancesType) ToPointer() *ListBalancesType {
	return &e
}
func (e *ListBalancesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bank-account":
		*e = ListBalancesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBalancesType: %v", v)
	}
}

// ListBalancesTransferDestination - The destination where the available amount will be automatically transferred to according to the configured
// transfer frequency.
type ListBalancesTransferDestination struct {
	// The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
	//
	// * `bank-account` — Transfer the balance amount to an external bank account
	Type *ListBalancesType `json:"type,omitempty"`
	// The configured bank account number of the beneficiary the balance amount is to be transferred to.
	BankAccount *string `json:"bankAccount,omitempty"`
	// The full name of the beneficiary the balance amount is to be transferred to.
	BeneficiaryName *string `json:"beneficiaryName,omitempty"`
}

func (o *ListBalancesTransferDestination) GetType() *ListBalancesType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListBalancesTransferDestination) GetBankAccount() *string {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *ListBalancesTransferDestination) GetBeneficiaryName() *string {
	if o == nil {
		return nil
	}
	return o.BeneficiaryName
}

// ListBalancesAvailableAmount - The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
type ListBalancesAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListBalancesAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListBalancesAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListBalancesPendingAmount - The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a
// few days to clear.
type ListBalancesPendingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListBalancesPendingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListBalancesPendingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// BalanceSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type BalanceSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *BalanceSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *BalanceSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// BalanceDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type BalanceDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *BalanceDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *BalanceDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// BalanceLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type BalanceLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *BalanceSelf `json:"self,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *BalanceDocumentation `json:"documentation,omitempty"`
}

func (o *BalanceLinks) GetSelf() *BalanceSelf {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *BalanceLinks) GetDocumentation() *BalanceDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

type Balance struct {
	// Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this balance.
	ID *string `json:"id,omitempty"`
	// Whether this entity was created in live mode or in test mode.
	Mode *ListBalancesMode `json:"mode,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The balance's ISO 4217 currency code.
	Currency *ListBalancesCurrency `json:"currency,omitempty"`
	// The description or name of the balance. Can be used to denote the purpose of the balance.
	Description *string `json:"description,omitempty"`
	// The status of the balance.
	Status *ListBalancesStatus `json:"status,omitempty"`
	// The frequency with which the available amount on the balance will be settled to the configured transfer
	// destination.
	//
	// Settlements created during weekends or on bank holidays will take place on the next business day.
	TransferFrequency *ListBalancesTransferFrequency `json:"transferFrequency,omitempty"`
	// The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds
	// this threshold, the complete balance will be paid out to the transfer destination according to the configured
	// frequency.
	TransferThreshold *ListBalancesTransferThreshold `json:"transferThreshold,omitempty"`
	// The transfer reference set to be included in all the transfers for this balance.
	TransferReference *string `json:"transferReference,omitempty"`
	// The destination where the available amount will be automatically transferred to according to the configured
	// transfer frequency.
	TransferDestination *ListBalancesTransferDestination `json:"transferDestination,omitempty"`
	// The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
	AvailableAmount *ListBalancesAvailableAmount `json:"availableAmount,omitempty"`
	// The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a
	// few days to clear.
	PendingAmount *ListBalancesPendingAmount `json:"pendingAmount,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *BalanceLinks `json:"_links,omitempty"`
}

func (o *Balance) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *Balance) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Balance) GetMode() *ListBalancesMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *Balance) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Balance) GetCurrency() *ListBalancesCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *Balance) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Balance) GetStatus() *ListBalancesStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Balance) GetTransferFrequency() *ListBalancesTransferFrequency {
	if o == nil {
		return nil
	}
	return o.TransferFrequency
}

func (o *Balance) GetTransferThreshold() *ListBalancesTransferThreshold {
	if o == nil {
		return nil
	}
	return o.TransferThreshold
}

func (o *Balance) GetTransferReference() *string {
	if o == nil {
		return nil
	}
	return o.TransferReference
}

func (o *Balance) GetTransferDestination() *ListBalancesTransferDestination {
	if o == nil {
		return nil
	}
	return o.TransferDestination
}

func (o *Balance) GetAvailableAmount() *ListBalancesAvailableAmount {
	if o == nil {
		return nil
	}
	return o.AvailableAmount
}

func (o *Balance) GetPendingAmount() *ListBalancesPendingAmount {
	if o == nil {
		return nil
	}
	return o.PendingAmount
}

func (o *Balance) GetLinks() *BalanceLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type ListBalancesEmbedded struct {
	// An array of balance objects. For a complete reference of
	// the balance object, refer to the [Get balance endpoint](get-balance) documentation.
	Balances []Balance `json:"balances,omitempty"`
}

func (o *ListBalancesEmbedded) GetBalances() []Balance {
	if o == nil {
		return nil
	}
	return o.Balances
}

// ListBalancesSelf - The URL to the current set of items.
type ListBalancesSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListBalancesSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListBalancesSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListBalancesPrevious - The previous set of items, if available.
type ListBalancesPrevious struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListBalancesPrevious) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListBalancesPrevious) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListBalancesNext - The next set of items, if available.
type ListBalancesNext struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListBalancesNext) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListBalancesNext) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListBalancesDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListBalancesDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListBalancesDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListBalancesDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListBalancesLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
type ListBalancesLinks struct {
	// The URL to the current set of items.
	Self ListBalancesSelf `json:"self"`
	// The previous set of items, if available.
	Previous *ListBalancesPrevious `json:"previous"`
	// The next set of items, if available.
	Next *ListBalancesNext `json:"next"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListBalancesDocumentation `json:"documentation"`
}

func (o *ListBalancesLinks) GetSelf() ListBalancesSelf {
	if o == nil {
		return ListBalancesSelf{}
	}
	return o.Self
}

func (o *ListBalancesLinks) GetPrevious() *ListBalancesPrevious {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *ListBalancesLinks) GetNext() *ListBalancesNext {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListBalancesLinks) GetDocumentation() ListBalancesDocumentation {
	if o == nil {
		return ListBalancesDocumentation{}
	}
	return o.Documentation
}

// ListBalancesResponseBody - A list of balance objects. For a complete reference of the balance
// object, refer to the [Get balance endpoint](get-balance) documentation.
type ListBalancesResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    *int64                `json:"count,omitempty"`
	Embedded *ListBalancesEmbedded `json:"_embedded,omitempty"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links *ListBalancesLinks `json:"_links,omitempty"`
}

func (o *ListBalancesResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ListBalancesResponseBody) GetEmbedded() *ListBalancesEmbedded {
	if o == nil {
		return nil
	}
	return o.Embedded
}

func (o *ListBalancesResponseBody) GetLinks() *ListBalancesLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type ListBalancesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of balance objects. For a complete reference of the balance
	// object, refer to the [Get balance endpoint](get-balance) documentation.
	Object *ListBalancesResponseBody
}

func (o *ListBalancesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListBalancesResponse) GetObject() *ListBalancesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
