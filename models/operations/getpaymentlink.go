// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type GetPaymentLinkRequest struct {
	// Provide the ID of the related payment link.
	PaymentLinkID string `pathParam:"style=simple,explode=false,name=paymentLinkId"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *GetPaymentLinkRequest) GetPaymentLinkID() string {
	if o == nil {
		return ""
	}
	return o.PaymentLinkID
}

func (o *GetPaymentLinkRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// GetPaymentLinkDocumentation - The URL to the generic Mollie API error handling guide.
type GetPaymentLinkDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetPaymentLinkDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetPaymentLinkNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetPaymentLinkDocumentation `json:"documentation"`
}

func (o *GetPaymentLinkNotFoundLinks) GetDocumentation() GetPaymentLinkDocumentation {
	if o == nil {
		return GetPaymentLinkDocumentation{}
	}
	return o.Documentation
}

// GetPaymentLinkMode - Whether this entity was created in live mode or in test mode.
type GetPaymentLinkMode string

const (
	GetPaymentLinkModeLive GetPaymentLinkMode = "live"
	GetPaymentLinkModeTest GetPaymentLinkMode = "test"
)

func (e GetPaymentLinkMode) ToPointer() *GetPaymentLinkMode {
	return &e
}

// GetPaymentLinkAmount - The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
// amount.
type GetPaymentLinkAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkMinimumAmount - The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
// customer will be prompted to enter a value greater than or equal to the minimum amount.
type GetPaymentLinkMinimumAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkMinimumAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkMinimumAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkType - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type GetPaymentLinkType string

const (
	GetPaymentLinkTypePhysical    GetPaymentLinkType = "physical"
	GetPaymentLinkTypeDigital     GetPaymentLinkType = "digital"
	GetPaymentLinkTypeShippingFee GetPaymentLinkType = "shipping_fee"
	GetPaymentLinkTypeDiscount    GetPaymentLinkType = "discount"
	GetPaymentLinkTypeStoreCredit GetPaymentLinkType = "store_credit"
	GetPaymentLinkTypeGiftCard    GetPaymentLinkType = "gift_card"
	GetPaymentLinkTypeSurcharge   GetPaymentLinkType = "surcharge"
	GetPaymentLinkTypeTip         GetPaymentLinkType = "tip"
)

func (e GetPaymentLinkType) ToPointer() *GetPaymentLinkType {
	return &e
}

// GetPaymentLinkUnitPrice - The price of a single item including VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
//
// The unit price can be zero in case of free items.
type GetPaymentLinkUnitPrice struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkUnitPrice) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkUnitPrice) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkDiscountAmount - Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
// type.
type GetPaymentLinkDiscountAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkDiscountAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkDiscountAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkTotalAmount - The total amount of the line, including VAT and discounts.
//
// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
//
// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
type GetPaymentLinkTotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkTotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkTotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkVatAmount - The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
//
// Any deviations from this will result in an error.
//
// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
// `SEK 100.00 × (25 / 125) = SEK 20.00`.
type GetPaymentLinkVatAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkVatAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkVatAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetPaymentLinkCategory string

const (
	GetPaymentLinkCategoryMeal         GetPaymentLinkCategory = "meal"
	GetPaymentLinkCategoryEco          GetPaymentLinkCategory = "eco"
	GetPaymentLinkCategoryGift         GetPaymentLinkCategory = "gift"
	GetPaymentLinkCategorySportCulture GetPaymentLinkCategory = "sport_culture"
)

func (e GetPaymentLinkCategory) ToPointer() *GetPaymentLinkCategory {
	return &e
}

type GetPaymentLinkLine struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *GetPaymentLinkType `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// The price of a single item including VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
	//
	// The unit price can be zero in case of free items.
	UnitPrice GetPaymentLinkUnitPrice `json:"unitPrice"`
	// Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
	// type.
	DiscountAmount *GetPaymentLinkDiscountAmount `json:"discountAmount,omitempty"`
	// The total amount of the line, including VAT and discounts.
	//
	// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
	//
	// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
	TotalAmount GetPaymentLinkTotalAmount `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
	// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
	//
	// Any deviations from this will result in an error.
	//
	// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
	// `SEK 100.00 × (25 / 125) = SEK 20.00`.
	VatAmount *GetPaymentLinkVatAmount `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []GetPaymentLinkCategory `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string `json:"productUrl,omitempty"`
}

func (o *GetPaymentLinkLine) GetType() *GetPaymentLinkType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetPaymentLinkLine) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *GetPaymentLinkLine) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *GetPaymentLinkLine) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *GetPaymentLinkLine) GetUnitPrice() GetPaymentLinkUnitPrice {
	if o == nil {
		return GetPaymentLinkUnitPrice{}
	}
	return o.UnitPrice
}

func (o *GetPaymentLinkLine) GetDiscountAmount() *GetPaymentLinkDiscountAmount {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *GetPaymentLinkLine) GetTotalAmount() GetPaymentLinkTotalAmount {
	if o == nil {
		return GetPaymentLinkTotalAmount{}
	}
	return o.TotalAmount
}

func (o *GetPaymentLinkLine) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *GetPaymentLinkLine) GetVatAmount() *GetPaymentLinkVatAmount {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *GetPaymentLinkLine) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *GetPaymentLinkLine) GetCategories() []GetPaymentLinkCategory {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *GetPaymentLinkLine) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *GetPaymentLinkLine) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}

// GetPaymentLinkBillingAddress - The customer's billing address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
//
// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
type GetPaymentLinkBillingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *GetPaymentLinkBillingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *GetPaymentLinkBillingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *GetPaymentLinkBillingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *GetPaymentLinkBillingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *GetPaymentLinkBillingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *GetPaymentLinkBillingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *GetPaymentLinkBillingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *GetPaymentLinkBillingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetPaymentLinkBillingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *GetPaymentLinkBillingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *GetPaymentLinkBillingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *GetPaymentLinkBillingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// GetPaymentLinkShippingAddress - The customer's shipping address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
type GetPaymentLinkShippingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *GetPaymentLinkShippingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *GetPaymentLinkShippingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *GetPaymentLinkShippingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *GetPaymentLinkShippingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *GetPaymentLinkShippingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *GetPaymentLinkShippingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *GetPaymentLinkShippingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *GetPaymentLinkShippingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetPaymentLinkShippingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *GetPaymentLinkShippingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *GetPaymentLinkShippingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *GetPaymentLinkShippingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// GetPaymentLinkApplicationFeeAmount - The fee that you wish to charge.
//
// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
// a €0.99 fee on a €1.00 payment.
type GetPaymentLinkApplicationFeeAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetPaymentLinkApplicationFeeAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetPaymentLinkApplicationFeeAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetPaymentLinkApplicationFee - With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
type GetPaymentLinkApplicationFee struct {
	// The fee that you wish to charge.
	//
	// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
	// a €0.99 fee on a €1.00 payment.
	Amount GetPaymentLinkApplicationFeeAmount `json:"amount"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description string `json:"description"`
}

func (o *GetPaymentLinkApplicationFee) GetAmount() GetPaymentLinkApplicationFeeAmount {
	if o == nil {
		return GetPaymentLinkApplicationFeeAmount{}
	}
	return o.Amount
}

func (o *GetPaymentLinkApplicationFee) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

// GetPaymentLinkSequenceType - If set to `first`, a payment mandate is established right after a payment is made by the customer.
//
// Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
//
// The mandate ID can be retrieved by making a call to the
// [Payment Link Payments Endpoint](get-payment-link-payments).
type GetPaymentLinkSequenceType string

const (
	GetPaymentLinkSequenceTypeOneoff GetPaymentLinkSequenceType = "oneoff"
	GetPaymentLinkSequenceTypeFirst  GetPaymentLinkSequenceType = "first"
)

func (e GetPaymentLinkSequenceType) ToPointer() *GetPaymentLinkSequenceType {
	return &e
}

// GetPaymentLinkSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetPaymentLinkSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkPaymentLink - The URL your customer should visit to make the payment. This is where you should redirect the customer to.
type GetPaymentLinkPaymentLink struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPaymentLinkPaymentLink) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPaymentLinkPaymentLink) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPaymentLinkLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetPaymentLinkLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self GetPaymentLinkSelf `json:"self"`
	// The URL your customer should visit to make the payment. This is where you should redirect the customer to.
	PaymentLink GetPaymentLinkPaymentLink `json:"paymentLink"`
}

func (o *GetPaymentLinkLinks) GetSelf() GetPaymentLinkSelf {
	if o == nil {
		return GetPaymentLinkSelf{}
	}
	return o.Self
}

func (o *GetPaymentLinkLinks) GetPaymentLink() GetPaymentLinkPaymentLink {
	if o == nil {
		return GetPaymentLinkPaymentLink{}
	}
	return o.PaymentLink
}

// GetPaymentLinkResponseBody - The payment link object.
type GetPaymentLinkResponseBody struct {
	// Indicates the response contains a payment link object. Will always contain the string `payment-link` for this
	// endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this payment link. Example: `pl_4Y0eZitmBnQ6IDoMqZQKh`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode GetPaymentLinkMode `json:"mode"`
	// A short description of the payment link. The description is visible in the Dashboard and will be shown on the
	// customer's bank or card statement when possible.
	Description string `json:"description"`
	// The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
	// amount.
	Amount *GetPaymentLinkAmount `json:"amount"`
	// The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
	// customer will be prompted to enter a value greater than or equal to the minimum amount.
	MinimumAmount *GetPaymentLinkMinimumAmount `json:"minimumAmount,omitempty"`
	// Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
	Archived bool `json:"archived"`
	// The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
	// the customer will be shown a generic message after completing the payment.
	RedirectURL *string `json:"redirectUrl"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
	// resulting from the payment link.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines []GetPaymentLinkLine `json:"lines,omitempty"`
	// The customer's billing address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	//
	// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
	BillingAddress *GetPaymentLinkBillingAddress `json:"billingAddress,omitempty"`
	// The customer's shipping address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	ShippingAddress *GetPaymentLinkShippingAddress `json:"shippingAddress,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
	// request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
	// required.
	ProfileID *string `json:"profileId"`
	// Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
	// payments using the same link.
	//
	// If no value is specified, the field defaults to `false`, allowing only a single payment per link.
	Reusable *bool `json:"reusable"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The date and time the payment link became paid, in ISO 8601 format.
	PaidAt *string `json:"paidAt"`
	// The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
	// the payment link will not expire automatically.
	ExpiresAt *string `json:"expiresAt"`
	// An array of payment methods that are allowed to be used for this payment link. When this parameter is
	// not provided or is an empty array, all enabled payment methods will be available.
	//
	// Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
	// 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
	// 'in3', 'riverty', 'klarna', 'billie'.
	AllowedMethods []string `json:"allowedMethods"`
	// With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	ApplicationFee *GetPaymentLinkApplicationFee `json:"applicationFee,omitempty"`
	// If set to `first`, a payment mandate is established right after a payment is made by the customer.
	//
	// Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
	//
	// The mandate ID can be retrieved by making a call to the
	// [Payment Link Payments Endpoint](get-payment-link-payments).
	SequenceType *GetPaymentLinkSequenceType `json:"sequenceType,omitempty"`
	// **Only relevant when `sequenceType` is set to `first`**
	//
	// The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
	// the customer will be required to input relevant information which will be used to establish a mandate after
	// the payment is made.
	CustomerID *string `json:"customerId,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links GetPaymentLinkLinks `json:"_links"`
}

func (o *GetPaymentLinkResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *GetPaymentLinkResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetPaymentLinkResponseBody) GetMode() GetPaymentLinkMode {
	if o == nil {
		return GetPaymentLinkMode("")
	}
	return o.Mode
}

func (o *GetPaymentLinkResponseBody) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *GetPaymentLinkResponseBody) GetAmount() *GetPaymentLinkAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *GetPaymentLinkResponseBody) GetMinimumAmount() *GetPaymentLinkMinimumAmount {
	if o == nil {
		return nil
	}
	return o.MinimumAmount
}

func (o *GetPaymentLinkResponseBody) GetArchived() bool {
	if o == nil {
		return false
	}
	return o.Archived
}

func (o *GetPaymentLinkResponseBody) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *GetPaymentLinkResponseBody) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *GetPaymentLinkResponseBody) GetLines() []GetPaymentLinkLine {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *GetPaymentLinkResponseBody) GetBillingAddress() *GetPaymentLinkBillingAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *GetPaymentLinkResponseBody) GetShippingAddress() *GetPaymentLinkShippingAddress {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *GetPaymentLinkResponseBody) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *GetPaymentLinkResponseBody) GetReusable() *bool {
	if o == nil {
		return nil
	}
	return o.Reusable
}

func (o *GetPaymentLinkResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GetPaymentLinkResponseBody) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *GetPaymentLinkResponseBody) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *GetPaymentLinkResponseBody) GetAllowedMethods() []string {
	if o == nil {
		return nil
	}
	return o.AllowedMethods
}

func (o *GetPaymentLinkResponseBody) GetApplicationFee() *GetPaymentLinkApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *GetPaymentLinkResponseBody) GetSequenceType() *GetPaymentLinkSequenceType {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *GetPaymentLinkResponseBody) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *GetPaymentLinkResponseBody) GetLinks() GetPaymentLinkLinks {
	if o == nil {
		return GetPaymentLinkLinks{}
	}
	return o.Links
}

type GetPaymentLinkResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The payment link object.
	Object *GetPaymentLinkResponseBody
}

func (o *GetPaymentLinkResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetPaymentLinkResponse) GetObject() *GetPaymentLinkResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
