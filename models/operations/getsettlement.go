// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

type GetSettlementRequest struct {
	// Provide the ID of the item you want to perform this operation on.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *GetSettlementRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// GetSettlementNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type GetSettlementNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetSettlementNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetSettlementNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetSettlementNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetSettlementNotFoundDocumentation `json:"documentation"`
}

func (o *GetSettlementNotFoundLinks) GetDocumentation() GetSettlementNotFoundDocumentation {
	if o == nil {
		return GetSettlementNotFoundDocumentation{}
	}
	return o.Documentation
}

// GetSettlementStatus - The status of the settlement.
type GetSettlementStatus string

const (
	GetSettlementStatusOpen    GetSettlementStatus = "open"
	GetSettlementStatusPending GetSettlementStatus = "pending"
	GetSettlementStatusPaidout GetSettlementStatus = "paidout"
	GetSettlementStatusFailed  GetSettlementStatus = "failed"
)

func (e GetSettlementStatus) ToPointer() *GetSettlementStatus {
	return &e
}
func (e *GetSettlementStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "pending":
		fallthrough
	case "paidout":
		fallthrough
	case "failed":
		*e = GetSettlementStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSettlementStatus: %v", v)
	}
}

// GetSettlementAmount - The total amount of the settlement.
type GetSettlementAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetSettlementAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetSettlementAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetSettlementSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetSettlementSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetSettlementSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetSettlementSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetSettlementPayments - The API resource URL of the [payments](list-payments) included in this settlement.
type GetSettlementPayments struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetSettlementPayments) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetSettlementPayments) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetSettlementCaptures - The API resource URL of the [captures](list-captures) included in this settlement.
type GetSettlementCaptures struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetSettlementCaptures) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetSettlementCaptures) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetSettlementRefunds - The API resource URL of the [refunds](list-refunds) deducted from this settlement.
type GetSettlementRefunds struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetSettlementRefunds) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetSettlementRefunds) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetSettlementChargebacks - The API resource URL of the [chargebacks](list-chargebacks) deducted from this settlement.
type GetSettlementChargebacks struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetSettlementChargebacks) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetSettlementChargebacks) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetSettlementInvoice - The API resource URL of the [invoice](list-invoices).
type GetSettlementInvoice struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *GetSettlementInvoice) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *GetSettlementInvoice) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// GetSettlementDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetSettlementDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetSettlementDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetSettlementDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetSettlementLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetSettlementLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *GetSettlementSelf `json:"self,omitempty"`
	// The API resource URL of the [payments](list-payments) included in this settlement.
	Payments *GetSettlementPayments `json:"payments,omitempty"`
	// The API resource URL of the [captures](list-captures) included in this settlement.
	Captures *GetSettlementCaptures `json:"captures,omitempty"`
	// The API resource URL of the [refunds](list-refunds) deducted from this settlement.
	Refunds *GetSettlementRefunds `json:"refunds,omitempty"`
	// The API resource URL of the [chargebacks](list-chargebacks) deducted from this settlement.
	Chargebacks *GetSettlementChargebacks `json:"chargebacks,omitempty"`
	// The API resource URL of the [invoice](list-invoices).
	Invoice *GetSettlementInvoice `json:"invoice,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *GetSettlementDocumentation `json:"documentation,omitempty"`
}

func (o *GetSettlementLinks) GetSelf() *GetSettlementSelf {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *GetSettlementLinks) GetPayments() *GetSettlementPayments {
	if o == nil {
		return nil
	}
	return o.Payments
}

func (o *GetSettlementLinks) GetCaptures() *GetSettlementCaptures {
	if o == nil {
		return nil
	}
	return o.Captures
}

func (o *GetSettlementLinks) GetRefunds() *GetSettlementRefunds {
	if o == nil {
		return nil
	}
	return o.Refunds
}

func (o *GetSettlementLinks) GetChargebacks() *GetSettlementChargebacks {
	if o == nil {
		return nil
	}
	return o.Chargebacks
}

func (o *GetSettlementLinks) GetInvoice() *GetSettlementInvoice {
	if o == nil {
		return nil
	}
	return o.Invoice
}

func (o *GetSettlementLinks) GetDocumentation() *GetSettlementDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

// GetSettlementResponseBody - The settlement object.
type GetSettlementResponseBody struct {
	// Indicates the response contains a settlement object. Will always contain the string `settlement` for this
	// endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this settlement.
	ID *string `json:"id,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The settlement's bank reference, as found in your Mollie account and on your bank statement.
	Reference *string `json:"reference,omitempty"`
	// The date on which the settlement was settled, in ISO 8601 format.
	//
	// For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement
	// date is available.
	SettledAt *string `json:"settledAt,omitempty"`
	// The status of the settlement.
	Status *GetSettlementStatus `json:"status,omitempty"`
	// The total amount of the settlement.
	Amount *GetSettlementAmount `json:"amount,omitempty"`
	// The balance token that the settlement was settled to.
	BalanceID *string `json:"balanceId,omitempty"`
	// The ID of the oldest invoice created for all the periods, if the invoice has been created yet.
	InvoiceID *string `json:"invoiceId,omitempty"`
	// For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
	// transactions are grouped into 'period' objects â€” one for each calendar month.
	//
	// For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
	// all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
	//
	// Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
	// look as follows: `{"2024": {"04": {...}, "05": {...}}}`. The year and month in this documentation are referred as `<year>` and `<month>`.
	//
	// The example response should give a good idea of what this looks like in practise.
	Periods map[string]any `json:"periods,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *GetSettlementLinks `json:"_links,omitempty"`
}

func (o *GetSettlementResponseBody) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *GetSettlementResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetSettlementResponseBody) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetSettlementResponseBody) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *GetSettlementResponseBody) GetSettledAt() *string {
	if o == nil {
		return nil
	}
	return o.SettledAt
}

func (o *GetSettlementResponseBody) GetStatus() *GetSettlementStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetSettlementResponseBody) GetAmount() *GetSettlementAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *GetSettlementResponseBody) GetBalanceID() *string {
	if o == nil {
		return nil
	}
	return o.BalanceID
}

func (o *GetSettlementResponseBody) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *GetSettlementResponseBody) GetPeriods() map[string]any {
	if o == nil {
		return nil
	}
	return o.Periods
}

func (o *GetSettlementResponseBody) GetLinks() *GetSettlementLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type GetSettlementResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The settlement object.
	Object *GetSettlementResponseBody
}

func (o *GetSettlementResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetSettlementResponse) GetObject() *GetSettlementResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
