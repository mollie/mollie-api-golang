// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// Currencies - Provides the currencies to retrieve the settlements. It accepts multiple currencies in a comma-separated format.
type Currencies string

const (
	CurrenciesEur Currencies = "EUR"
	CurrenciesGbp Currencies = "GBP"
	CurrenciesChf Currencies = "CHF"
	CurrenciesDkk Currencies = "DKK"
	CurrenciesNok Currencies = "NOK"
	CurrenciesPln Currencies = "PLN"
	CurrenciesSek Currencies = "SEK"
	CurrenciesUsd Currencies = "USD"
	CurrenciesCzk Currencies = "CZK"
	CurrenciesHuf Currencies = "HUF"
	CurrenciesAud Currencies = "AUD"
	CurrenciesCad Currencies = "CAD"
)

func (e Currencies) ToPointer() *Currencies {
	return &e
}
func (e *Currencies) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "CHF":
		fallthrough
	case "DKK":
		fallthrough
	case "NOK":
		fallthrough
	case "PLN":
		fallthrough
	case "SEK":
		fallthrough
	case "USD":
		fallthrough
	case "CZK":
		fallthrough
	case "HUF":
		fallthrough
	case "AUD":
		fallthrough
	case "CAD":
		*e = Currencies(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Currencies: %v", v)
	}
}

type ListSettlementsRequest struct {
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
	// result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Provide the token of the balance to filter the settlements by. This is
	// the balance token that the settlement was settled to.
	BalanceID *string `queryParam:"style=form,explode=true,name=balanceId"`
	// Provide the year to query the settlements. Must be used combined with `month` parameter
	Year *string `queryParam:"style=form,explode=true,name=year"`
	// Provide the month to query the settlements. Must be used combined with `year` parameter
	Month *string `queryParam:"style=form,explode=true,name=month"`
	// Provides the currencies to retrieve the settlements. It accepts multiple currencies in a comma-separated format.
	Currencies *Currencies `queryParam:"style=form,explode=true,name=currencies"`
}

func (o *ListSettlementsRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListSettlementsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListSettlementsRequest) GetBalanceID() *string {
	if o == nil {
		return nil
	}
	return o.BalanceID
}

func (o *ListSettlementsRequest) GetYear() *string {
	if o == nil {
		return nil
	}
	return o.Year
}

func (o *ListSettlementsRequest) GetMonth() *string {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ListSettlementsRequest) GetCurrencies() *Currencies {
	if o == nil {
		return nil
	}
	return o.Currencies
}

// ListSettlementsNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type ListSettlementsNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListSettlementsNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementsNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListSettlementsNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListSettlementsNotFoundDocumentation `json:"documentation"`
}

func (o *ListSettlementsNotFoundLinks) GetDocumentation() ListSettlementsNotFoundDocumentation {
	if o == nil {
		return ListSettlementsNotFoundDocumentation{}
	}
	return o.Documentation
}

// ListSettlementsBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type ListSettlementsBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListSettlementsBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementsBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListSettlementsBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListSettlementsBadRequestDocumentation `json:"documentation"`
}

func (o *ListSettlementsBadRequestLinks) GetDocumentation() ListSettlementsBadRequestDocumentation {
	if o == nil {
		return ListSettlementsBadRequestDocumentation{}
	}
	return o.Documentation
}

// ListSettlementsStatus - The status of the settlement.
type ListSettlementsStatus string

const (
	ListSettlementsStatusOpen    ListSettlementsStatus = "open"
	ListSettlementsStatusPending ListSettlementsStatus = "pending"
	ListSettlementsStatusPaidout ListSettlementsStatus = "paidout"
	ListSettlementsStatusFailed  ListSettlementsStatus = "failed"
)

func (e ListSettlementsStatus) ToPointer() *ListSettlementsStatus {
	return &e
}
func (e *ListSettlementsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "pending":
		fallthrough
	case "paidout":
		fallthrough
	case "failed":
		*e = ListSettlementsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSettlementsStatus: %v", v)
	}
}

// ListSettlementsAmount - The total amount of the settlement.
type ListSettlementsAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSettlementsAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSettlementsAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// SettlementSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type SettlementSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *SettlementSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *SettlementSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementsPayments - The API resource URL of the [payments](list-payments) included in this settlement.
type ListSettlementsPayments struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementsPayments) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementsPayments) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementsCaptures - The API resource URL of the [captures](list-captures) included in this settlement.
type ListSettlementsCaptures struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementsCaptures) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementsCaptures) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementsRefunds - The API resource URL of the [refunds](list-refunds) deducted from this settlement.
type ListSettlementsRefunds struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementsRefunds) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementsRefunds) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementsChargebacks - The API resource URL of the [chargebacks](list-chargebacks) deducted from this settlement.
type ListSettlementsChargebacks struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementsChargebacks) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementsChargebacks) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementsInvoice - The API resource URL of the [invoice](list-invoices).
type ListSettlementsInvoice struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSettlementsInvoice) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSettlementsInvoice) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// SettlementDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type SettlementDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *SettlementDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *SettlementDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// SettlementLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type SettlementLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *SettlementSelf `json:"self,omitempty"`
	// The API resource URL of the [payments](list-payments) included in this settlement.
	Payments *ListSettlementsPayments `json:"payments,omitempty"`
	// The API resource URL of the [captures](list-captures) included in this settlement.
	Captures *ListSettlementsCaptures `json:"captures,omitempty"`
	// The API resource URL of the [refunds](list-refunds) deducted from this settlement.
	Refunds *ListSettlementsRefunds `json:"refunds,omitempty"`
	// The API resource URL of the [chargebacks](list-chargebacks) deducted from this settlement.
	Chargebacks *ListSettlementsChargebacks `json:"chargebacks,omitempty"`
	// The API resource URL of the [invoice](list-invoices).
	Invoice *ListSettlementsInvoice `json:"invoice,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *SettlementDocumentation `json:"documentation,omitempty"`
}

func (o *SettlementLinks) GetSelf() *SettlementSelf {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *SettlementLinks) GetPayments() *ListSettlementsPayments {
	if o == nil {
		return nil
	}
	return o.Payments
}

func (o *SettlementLinks) GetCaptures() *ListSettlementsCaptures {
	if o == nil {
		return nil
	}
	return o.Captures
}

func (o *SettlementLinks) GetRefunds() *ListSettlementsRefunds {
	if o == nil {
		return nil
	}
	return o.Refunds
}

func (o *SettlementLinks) GetChargebacks() *ListSettlementsChargebacks {
	if o == nil {
		return nil
	}
	return o.Chargebacks
}

func (o *SettlementLinks) GetInvoice() *ListSettlementsInvoice {
	if o == nil {
		return nil
	}
	return o.Invoice
}

func (o *SettlementLinks) GetDocumentation() *SettlementDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

type ListSettlementsSettlement struct {
	// Indicates the response contains a settlement object. Will always contain the string `settlement` for this
	// endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this settlement.
	ID *string `json:"id,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The settlement's bank reference, as found in your Mollie account and on your bank statement.
	Reference *string `json:"reference,omitempty"`
	// The date on which the settlement was settled, in ISO 8601 format.
	//
	// For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement
	// date is available.
	SettledAt *string `json:"settledAt,omitempty"`
	// The status of the settlement.
	Status *ListSettlementsStatus `json:"status,omitempty"`
	// The total amount of the settlement.
	Amount *ListSettlementsAmount `json:"amount,omitempty"`
	// The balance token that the settlement was settled to.
	BalanceID *string `json:"balanceId,omitempty"`
	// The ID of the oldest invoice created for all the periods, if the invoice has been created yet.
	InvoiceID *string `json:"invoiceId,omitempty"`
	// For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
	// transactions are grouped into 'period' objects — one for each calendar month.
	//
	// For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
	// all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
	//
	// Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
	// look as follows: `{"2024": {"04": {...}, "05": {...}}}`. The year and month in this documentation are referred as `<year>` and `<month>`.
	//
	// The example response should give a good idea of what this looks like in practise.
	Periods map[string]any `json:"periods,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *SettlementLinks `json:"_links,omitempty"`
}

func (o *ListSettlementsSettlement) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *ListSettlementsSettlement) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ListSettlementsSettlement) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ListSettlementsSettlement) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *ListSettlementsSettlement) GetSettledAt() *string {
	if o == nil {
		return nil
	}
	return o.SettledAt
}

func (o *ListSettlementsSettlement) GetStatus() *ListSettlementsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListSettlementsSettlement) GetAmount() *ListSettlementsAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListSettlementsSettlement) GetBalanceID() *string {
	if o == nil {
		return nil
	}
	return o.BalanceID
}

func (o *ListSettlementsSettlement) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *ListSettlementsSettlement) GetPeriods() map[string]any {
	if o == nil {
		return nil
	}
	return o.Periods
}

func (o *ListSettlementsSettlement) GetLinks() *SettlementLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type ListSettlementsEmbedded struct {
	// An array of settlement objects. For a complete reference
	// of the settlement object, refer to the [Get settlement endpoint](get-settlement) documentation.
	Settlements []ListSettlementsSettlement `json:"settlements,omitempty"`
}

func (o *ListSettlementsEmbedded) GetSettlements() []ListSettlementsSettlement {
	if o == nil {
		return nil
	}
	return o.Settlements
}

// ListSettlementsSelf - The URL to the current set of items.
type ListSettlementsSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementsSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementsSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementsPrevious - The previous set of items, if available.
type ListSettlementsPrevious struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSettlementsPrevious) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSettlementsPrevious) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSettlementsNext - The next set of items, if available.
type ListSettlementsNext struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSettlementsNext) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSettlementsNext) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSettlementsDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListSettlementsDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSettlementsDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSettlementsDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSettlementsLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
type ListSettlementsLinks struct {
	// The URL to the current set of items.
	Self ListSettlementsSelf `json:"self"`
	// The previous set of items, if available.
	Previous *ListSettlementsPrevious `json:"previous"`
	// The next set of items, if available.
	Next *ListSettlementsNext `json:"next"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListSettlementsDocumentation `json:"documentation"`
}

func (o *ListSettlementsLinks) GetSelf() ListSettlementsSelf {
	if o == nil {
		return ListSettlementsSelf{}
	}
	return o.Self
}

func (o *ListSettlementsLinks) GetPrevious() *ListSettlementsPrevious {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *ListSettlementsLinks) GetNext() *ListSettlementsNext {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListSettlementsLinks) GetDocumentation() ListSettlementsDocumentation {
	if o == nil {
		return ListSettlementsDocumentation{}
	}
	return o.Documentation
}

// ListSettlementsResponseBody - A list of settlement objects. For a complete reference of the settlement
// object, refer to the [Get settlement endpoint](get-settlement) documentation.
type ListSettlementsResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    *int64                   `json:"count,omitempty"`
	Embedded *ListSettlementsEmbedded `json:"_embedded,omitempty"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links *ListSettlementsLinks `json:"_links,omitempty"`
}

func (o *ListSettlementsResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ListSettlementsResponseBody) GetEmbedded() *ListSettlementsEmbedded {
	if o == nil {
		return nil
	}
	return o.Embedded
}

func (o *ListSettlementsResponseBody) GetLinks() *ListSettlementsLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type ListSettlementsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of settlement objects. For a complete reference of the settlement
	// object, refer to the [Get settlement endpoint](get-settlement) documentation.
	Object *ListSettlementsResponseBody
}

func (o *ListSettlementsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListSettlementsResponse) GetObject() *ListSettlementsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
