// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

// ApplicationFee - With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
type ApplicationFee struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount components.Amount `json:"amount"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description string `json:"description"`
}

func (o *ApplicationFee) GetAmount() components.Amount {
	if o == nil {
		return components.Amount{}
	}
	return o.Amount
}

func (o *ApplicationFee) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

type CreatePaymentLinkRequest struct {
	ID *string `json:"id,omitempty"`
	// A short description of the payment link. The description is visible in the Dashboard and will be shown on the
	// customer's bank or card statement when possible.
	Description string `json:"description"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount *components.AmountNullable `json:"amount,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	MinimumAmount *components.AmountNullable `json:"minimumAmount,omitempty"`
	// The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
	// the customer will be shown a generic message after completing the payment.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
	// resulting from the payment link.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines           []components.PaymentLineItem `json:"lines,omitempty"`
	BillingAddress  *components.PaymentAddress   `json:"billingAddress,omitempty"`
	ShippingAddress *components.PaymentAddress   `json:"shippingAddress,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
	// request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
	// required.
	ProfileID *string `json:"profileId,omitempty"`
	// Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
	// payments using the same link.
	//
	// If no value is specified, the field defaults to `false`, allowing only a single payment per link.
	Reusable *bool `json:"reusable,omitempty"`
	// The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
	// the payment link will not expire automatically.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// An array of payment methods that are allowed to be used for this payment link. When this parameter is
	// not provided or is an empty array, all enabled payment methods will be available.
	//
	// Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
	// 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
	// 'in3', 'riverty', 'klarna', 'billie'.
	AllowedMethods []string `json:"allowedMethods,omitempty"`
	// With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	ApplicationFee *ApplicationFee                     `json:"applicationFee,omitempty"`
	SequenceType   *components.PaymentLinkSequenceType `json:"sequenceType,omitempty"`
	// **Only relevant when `sequenceType` is set to `first`**
	//
	// The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
	// the customer will be required to input relevant information which will be used to establish a mandate after
	// the payment is made.
	CustomerID *string `json:"customerId,omitempty"`
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
}

func (o *CreatePaymentLinkRequest) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreatePaymentLinkRequest) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CreatePaymentLinkRequest) GetAmount() *components.AmountNullable {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CreatePaymentLinkRequest) GetMinimumAmount() *components.AmountNullable {
	if o == nil {
		return nil
	}
	return o.MinimumAmount
}

func (o *CreatePaymentLinkRequest) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *CreatePaymentLinkRequest) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *CreatePaymentLinkRequest) GetLines() []components.PaymentLineItem {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *CreatePaymentLinkRequest) GetBillingAddress() *components.PaymentAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *CreatePaymentLinkRequest) GetShippingAddress() *components.PaymentAddress {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *CreatePaymentLinkRequest) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *CreatePaymentLinkRequest) GetReusable() *bool {
	if o == nil {
		return nil
	}
	return o.Reusable
}

func (o *CreatePaymentLinkRequest) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *CreatePaymentLinkRequest) GetAllowedMethods() []string {
	if o == nil {
		return nil
	}
	return o.AllowedMethods
}

func (o *CreatePaymentLinkRequest) GetApplicationFee() *ApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *CreatePaymentLinkRequest) GetSequenceType() *components.PaymentLinkSequenceType {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *CreatePaymentLinkRequest) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *CreatePaymentLinkRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

type CreatePaymentLinkResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The newly created payment link object.
	PaymentLinkResponse *components.PaymentLinkResponse
}

func (o *CreatePaymentLinkResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreatePaymentLinkResponse) GetPaymentLinkResponse() *components.PaymentLinkResponse {
	if o == nil {
		return nil
	}
	return o.PaymentLinkResponse
}
