// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// CreatePaymentLinkAmountRequest - The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
// amount.
type CreatePaymentLinkAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentLinkAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentLinkAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentLinkMinimumAmountRequest - The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
// customer will be prompted to enter a value greater than or equal to the minimum amount.
type CreatePaymentLinkMinimumAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentLinkMinimumAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentLinkMinimumAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentLinkTypeRequest - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type CreatePaymentLinkTypeRequest string

const (
	CreatePaymentLinkTypeRequestPhysical    CreatePaymentLinkTypeRequest = "physical"
	CreatePaymentLinkTypeRequestDigital     CreatePaymentLinkTypeRequest = "digital"
	CreatePaymentLinkTypeRequestShippingFee CreatePaymentLinkTypeRequest = "shipping_fee"
	CreatePaymentLinkTypeRequestDiscount    CreatePaymentLinkTypeRequest = "discount"
	CreatePaymentLinkTypeRequestStoreCredit CreatePaymentLinkTypeRequest = "store_credit"
	CreatePaymentLinkTypeRequestGiftCard    CreatePaymentLinkTypeRequest = "gift_card"
	CreatePaymentLinkTypeRequestSurcharge   CreatePaymentLinkTypeRequest = "surcharge"
	CreatePaymentLinkTypeRequestTip         CreatePaymentLinkTypeRequest = "tip"
)

func (e CreatePaymentLinkTypeRequest) ToPointer() *CreatePaymentLinkTypeRequest {
	return &e
}
func (e *CreatePaymentLinkTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "physical":
		fallthrough
	case "digital":
		fallthrough
	case "shipping_fee":
		fallthrough
	case "discount":
		fallthrough
	case "store_credit":
		fallthrough
	case "gift_card":
		fallthrough
	case "surcharge":
		fallthrough
	case "tip":
		*e = CreatePaymentLinkTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentLinkTypeRequest: %v", v)
	}
}

// CreatePaymentLinkUnitPriceRequest - The price of a single item including VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
//
// The unit price can be zero in case of free items.
type CreatePaymentLinkUnitPriceRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentLinkUnitPriceRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentLinkUnitPriceRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentLinkDiscountAmountRequest - Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
// type.
type CreatePaymentLinkDiscountAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentLinkDiscountAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentLinkDiscountAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentLinkTotalAmountRequest - The total amount of the line, including VAT and discounts.
//
// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
//
// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
type CreatePaymentLinkTotalAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentLinkTotalAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentLinkTotalAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentLinkVatAmountRequest - The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
//
// Any deviations from this will result in an error.
//
// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
// `SEK 100.00 × (25 / 125) = SEK 20.00`.
type CreatePaymentLinkVatAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentLinkVatAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentLinkVatAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreatePaymentLinkCategoryRequest string

const (
	CreatePaymentLinkCategoryRequestMeal         CreatePaymentLinkCategoryRequest = "meal"
	CreatePaymentLinkCategoryRequestEco          CreatePaymentLinkCategoryRequest = "eco"
	CreatePaymentLinkCategoryRequestGift         CreatePaymentLinkCategoryRequest = "gift"
	CreatePaymentLinkCategoryRequestSportCulture CreatePaymentLinkCategoryRequest = "sport_culture"
)

func (e CreatePaymentLinkCategoryRequest) ToPointer() *CreatePaymentLinkCategoryRequest {
	return &e
}
func (e *CreatePaymentLinkCategoryRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "meal":
		fallthrough
	case "eco":
		fallthrough
	case "gift":
		fallthrough
	case "sport_culture":
		*e = CreatePaymentLinkCategoryRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentLinkCategoryRequest: %v", v)
	}
}

type CreatePaymentLinkLineRequest struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *CreatePaymentLinkTypeRequest `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// The price of a single item including VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
	//
	// The unit price can be zero in case of free items.
	UnitPrice CreatePaymentLinkUnitPriceRequest `json:"unitPrice"`
	// Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
	// type.
	DiscountAmount *CreatePaymentLinkDiscountAmountRequest `json:"discountAmount,omitempty"`
	// The total amount of the line, including VAT and discounts.
	//
	// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
	//
	// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
	TotalAmount CreatePaymentLinkTotalAmountRequest `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
	// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
	//
	// Any deviations from this will result in an error.
	//
	// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
	// `SEK 100.00 × (25 / 125) = SEK 20.00`.
	VatAmount *CreatePaymentLinkVatAmountRequest `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []CreatePaymentLinkCategoryRequest `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string `json:"productUrl,omitempty"`
}

func (o *CreatePaymentLinkLineRequest) GetType() *CreatePaymentLinkTypeRequest {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreatePaymentLinkLineRequest) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CreatePaymentLinkLineRequest) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *CreatePaymentLinkLineRequest) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *CreatePaymentLinkLineRequest) GetUnitPrice() CreatePaymentLinkUnitPriceRequest {
	if o == nil {
		return CreatePaymentLinkUnitPriceRequest{}
	}
	return o.UnitPrice
}

func (o *CreatePaymentLinkLineRequest) GetDiscountAmount() *CreatePaymentLinkDiscountAmountRequest {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *CreatePaymentLinkLineRequest) GetTotalAmount() CreatePaymentLinkTotalAmountRequest {
	if o == nil {
		return CreatePaymentLinkTotalAmountRequest{}
	}
	return o.TotalAmount
}

func (o *CreatePaymentLinkLineRequest) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *CreatePaymentLinkLineRequest) GetVatAmount() *CreatePaymentLinkVatAmountRequest {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *CreatePaymentLinkLineRequest) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *CreatePaymentLinkLineRequest) GetCategories() []CreatePaymentLinkCategoryRequest {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *CreatePaymentLinkLineRequest) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *CreatePaymentLinkLineRequest) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}

// CreatePaymentLinkBillingAddressRequest - The customer's billing address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
//
// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
type CreatePaymentLinkBillingAddressRequest struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *CreatePaymentLinkBillingAddressRequest) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CreatePaymentLinkBillingAddressRequest) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *CreatePaymentLinkBillingAddressRequest) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *CreatePaymentLinkBillingAddressRequest) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *CreatePaymentLinkBillingAddressRequest) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *CreatePaymentLinkBillingAddressRequest) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *CreatePaymentLinkBillingAddressRequest) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *CreatePaymentLinkBillingAddressRequest) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreatePaymentLinkBillingAddressRequest) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *CreatePaymentLinkBillingAddressRequest) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *CreatePaymentLinkBillingAddressRequest) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *CreatePaymentLinkBillingAddressRequest) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// CreatePaymentLinkShippingAddressRequest - The customer's shipping address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
type CreatePaymentLinkShippingAddressRequest struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *CreatePaymentLinkShippingAddressRequest) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CreatePaymentLinkShippingAddressRequest) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *CreatePaymentLinkShippingAddressRequest) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *CreatePaymentLinkShippingAddressRequest) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *CreatePaymentLinkShippingAddressRequest) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *CreatePaymentLinkShippingAddressRequest) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *CreatePaymentLinkShippingAddressRequest) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *CreatePaymentLinkShippingAddressRequest) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreatePaymentLinkShippingAddressRequest) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *CreatePaymentLinkShippingAddressRequest) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *CreatePaymentLinkShippingAddressRequest) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *CreatePaymentLinkShippingAddressRequest) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// CreatePaymentLinkApplicationFeeAmountRequest - The fee that you wish to charge.
//
// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
// a €0.99 fee on a €1.00 payment.
type CreatePaymentLinkApplicationFeeAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentLinkApplicationFeeAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentLinkApplicationFeeAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentLinkApplicationFeeRequest - With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
type CreatePaymentLinkApplicationFeeRequest struct {
	// The fee that you wish to charge.
	//
	// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
	// a €0.99 fee on a €1.00 payment.
	Amount CreatePaymentLinkApplicationFeeAmountRequest `json:"amount"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description string `json:"description"`
}

func (o *CreatePaymentLinkApplicationFeeRequest) GetAmount() CreatePaymentLinkApplicationFeeAmountRequest {
	if o == nil {
		return CreatePaymentLinkApplicationFeeAmountRequest{}
	}
	return o.Amount
}

func (o *CreatePaymentLinkApplicationFeeRequest) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

// CreatePaymentLinkSequenceTypeRequest - If set to `first`, a payment mandate is established right after a payment is made by the customer.
//
// Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
//
// The mandate ID can be retrieved by making a call to the
// [Payment Link Payments Endpoint](get-payment-link-payments).
type CreatePaymentLinkSequenceTypeRequest string

const (
	CreatePaymentLinkSequenceTypeRequestOneoff CreatePaymentLinkSequenceTypeRequest = "oneoff"
	CreatePaymentLinkSequenceTypeRequestFirst  CreatePaymentLinkSequenceTypeRequest = "first"
)

func (e CreatePaymentLinkSequenceTypeRequest) ToPointer() *CreatePaymentLinkSequenceTypeRequest {
	return &e
}
func (e *CreatePaymentLinkSequenceTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oneoff":
		fallthrough
	case "first":
		*e = CreatePaymentLinkSequenceTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentLinkSequenceTypeRequest: %v", v)
	}
}

type CreatePaymentLinkRequest struct {
	// A short description of the payment link. The description is visible in the Dashboard and will be shown on the
	// customer's bank or card statement when possible.
	Description string `json:"description"`
	// The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
	// amount.
	Amount *CreatePaymentLinkAmountRequest `json:"amount,omitempty"`
	// The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
	// customer will be prompted to enter a value greater than or equal to the minimum amount.
	MinimumAmount *CreatePaymentLinkMinimumAmountRequest `json:"minimumAmount,omitempty"`
	// The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
	// the customer will be shown a generic message after completing the payment.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
	// resulting from the payment link.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines []CreatePaymentLinkLineRequest `json:"lines,omitempty"`
	// The customer's billing address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	//
	// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
	BillingAddress *CreatePaymentLinkBillingAddressRequest `json:"billingAddress,omitempty"`
	// The customer's shipping address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	ShippingAddress *CreatePaymentLinkShippingAddressRequest `json:"shippingAddress,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
	// request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
	// required.
	ProfileID *string `json:"profileId,omitempty"`
	// Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
	// payments using the same link.
	//
	// If no value is specified, the field defaults to `false`, allowing only a single payment per link.
	Reusable *bool `json:"reusable,omitempty"`
	// The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
	// the payment link will not expire automatically.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// An array of payment methods that are allowed to be used for this payment link. When this parameter is
	// not provided or is an empty array, all enabled payment methods will be available.
	//
	// Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
	// 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
	// 'in3', 'riverty', 'klarna', 'billie'.
	AllowedMethods []string `json:"allowedMethods,omitempty"`
	// With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	ApplicationFee *CreatePaymentLinkApplicationFeeRequest `json:"applicationFee,omitempty"`
	// If set to `first`, a payment mandate is established right after a payment is made by the customer.
	//
	// Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
	//
	// The mandate ID can be retrieved by making a call to the
	// [Payment Link Payments Endpoint](get-payment-link-payments).
	SequenceType *CreatePaymentLinkSequenceTypeRequest `json:"sequenceType,omitempty"`
	// **Only relevant when `sequenceType` is set to `first`**
	//
	// The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
	// the customer will be required to input relevant information which will be used to establish a mandate after
	// the payment is made.
	CustomerID *string `json:"customerId,omitempty"`
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
}

func (o *CreatePaymentLinkRequest) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CreatePaymentLinkRequest) GetAmount() *CreatePaymentLinkAmountRequest {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CreatePaymentLinkRequest) GetMinimumAmount() *CreatePaymentLinkMinimumAmountRequest {
	if o == nil {
		return nil
	}
	return o.MinimumAmount
}

func (o *CreatePaymentLinkRequest) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *CreatePaymentLinkRequest) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *CreatePaymentLinkRequest) GetLines() []CreatePaymentLinkLineRequest {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *CreatePaymentLinkRequest) GetBillingAddress() *CreatePaymentLinkBillingAddressRequest {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *CreatePaymentLinkRequest) GetShippingAddress() *CreatePaymentLinkShippingAddressRequest {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *CreatePaymentLinkRequest) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *CreatePaymentLinkRequest) GetReusable() *bool {
	if o == nil {
		return nil
	}
	return o.Reusable
}

func (o *CreatePaymentLinkRequest) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *CreatePaymentLinkRequest) GetAllowedMethods() []string {
	if o == nil {
		return nil
	}
	return o.AllowedMethods
}

func (o *CreatePaymentLinkRequest) GetApplicationFee() *CreatePaymentLinkApplicationFeeRequest {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *CreatePaymentLinkRequest) GetSequenceType() *CreatePaymentLinkSequenceTypeRequest {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *CreatePaymentLinkRequest) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *CreatePaymentLinkRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// CreatePaymentLinkUnprocessableEntityDocumentation - The URL to the generic Mollie API error handling guide.
type CreatePaymentLinkUnprocessableEntityDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *CreatePaymentLinkUnprocessableEntityDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentLinkUnprocessableEntityDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CreatePaymentLinkUnprocessableEntityLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation CreatePaymentLinkUnprocessableEntityDocumentation `json:"documentation"`
}

func (o *CreatePaymentLinkUnprocessableEntityLinks) GetDocumentation() CreatePaymentLinkUnprocessableEntityDocumentation {
	if o == nil {
		return CreatePaymentLinkUnprocessableEntityDocumentation{}
	}
	return o.Documentation
}

// CreatePaymentLinkNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type CreatePaymentLinkNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *CreatePaymentLinkNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentLinkNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CreatePaymentLinkNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation CreatePaymentLinkNotFoundDocumentation `json:"documentation"`
}

func (o *CreatePaymentLinkNotFoundLinks) GetDocumentation() CreatePaymentLinkNotFoundDocumentation {
	if o == nil {
		return CreatePaymentLinkNotFoundDocumentation{}
	}
	return o.Documentation
}

// CreatePaymentLinkMode - Whether this entity was created in live mode or in test mode.
type CreatePaymentLinkMode string

const (
	CreatePaymentLinkModeLive CreatePaymentLinkMode = "live"
	CreatePaymentLinkModeTest CreatePaymentLinkMode = "test"
)

func (e CreatePaymentLinkMode) ToPointer() *CreatePaymentLinkMode {
	return &e
}
func (e *CreatePaymentLinkMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = CreatePaymentLinkMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentLinkMode: %v", v)
	}
}

// CreatePaymentLinkAmountResponse - The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
// amount.
type CreatePaymentLinkAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentLinkAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentLinkAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentLinkMinimumAmountResponse - The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
// customer will be prompted to enter a value greater than or equal to the minimum amount.
type CreatePaymentLinkMinimumAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentLinkMinimumAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentLinkMinimumAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentLinkTypeResponse - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type CreatePaymentLinkTypeResponse string

const (
	CreatePaymentLinkTypeResponsePhysical    CreatePaymentLinkTypeResponse = "physical"
	CreatePaymentLinkTypeResponseDigital     CreatePaymentLinkTypeResponse = "digital"
	CreatePaymentLinkTypeResponseShippingFee CreatePaymentLinkTypeResponse = "shipping_fee"
	CreatePaymentLinkTypeResponseDiscount    CreatePaymentLinkTypeResponse = "discount"
	CreatePaymentLinkTypeResponseStoreCredit CreatePaymentLinkTypeResponse = "store_credit"
	CreatePaymentLinkTypeResponseGiftCard    CreatePaymentLinkTypeResponse = "gift_card"
	CreatePaymentLinkTypeResponseSurcharge   CreatePaymentLinkTypeResponse = "surcharge"
	CreatePaymentLinkTypeResponseTip         CreatePaymentLinkTypeResponse = "tip"
)

func (e CreatePaymentLinkTypeResponse) ToPointer() *CreatePaymentLinkTypeResponse {
	return &e
}
func (e *CreatePaymentLinkTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "physical":
		fallthrough
	case "digital":
		fallthrough
	case "shipping_fee":
		fallthrough
	case "discount":
		fallthrough
	case "store_credit":
		fallthrough
	case "gift_card":
		fallthrough
	case "surcharge":
		fallthrough
	case "tip":
		*e = CreatePaymentLinkTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentLinkTypeResponse: %v", v)
	}
}

// CreatePaymentLinkUnitPriceResponse - The price of a single item including VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
//
// The unit price can be zero in case of free items.
type CreatePaymentLinkUnitPriceResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentLinkUnitPriceResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentLinkUnitPriceResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentLinkDiscountAmountResponse - Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
// type.
type CreatePaymentLinkDiscountAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentLinkDiscountAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentLinkDiscountAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentLinkTotalAmountResponse - The total amount of the line, including VAT and discounts.
//
// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
//
// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
type CreatePaymentLinkTotalAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentLinkTotalAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentLinkTotalAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentLinkVatAmountResponse - The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
//
// Any deviations from this will result in an error.
//
// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
// `SEK 100.00 × (25 / 125) = SEK 20.00`.
type CreatePaymentLinkVatAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentLinkVatAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentLinkVatAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreatePaymentLinkCategoryResponse string

const (
	CreatePaymentLinkCategoryResponseMeal         CreatePaymentLinkCategoryResponse = "meal"
	CreatePaymentLinkCategoryResponseEco          CreatePaymentLinkCategoryResponse = "eco"
	CreatePaymentLinkCategoryResponseGift         CreatePaymentLinkCategoryResponse = "gift"
	CreatePaymentLinkCategoryResponseSportCulture CreatePaymentLinkCategoryResponse = "sport_culture"
)

func (e CreatePaymentLinkCategoryResponse) ToPointer() *CreatePaymentLinkCategoryResponse {
	return &e
}
func (e *CreatePaymentLinkCategoryResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "meal":
		fallthrough
	case "eco":
		fallthrough
	case "gift":
		fallthrough
	case "sport_culture":
		*e = CreatePaymentLinkCategoryResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentLinkCategoryResponse: %v", v)
	}
}

type CreatePaymentLinkLineResponse struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *CreatePaymentLinkTypeResponse `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// The price of a single item including VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
	//
	// The unit price can be zero in case of free items.
	UnitPrice CreatePaymentLinkUnitPriceResponse `json:"unitPrice"`
	// Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
	// type.
	DiscountAmount *CreatePaymentLinkDiscountAmountResponse `json:"discountAmount,omitempty"`
	// The total amount of the line, including VAT and discounts.
	//
	// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
	//
	// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
	TotalAmount CreatePaymentLinkTotalAmountResponse `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
	// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
	//
	// Any deviations from this will result in an error.
	//
	// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
	// `SEK 100.00 × (25 / 125) = SEK 20.00`.
	VatAmount *CreatePaymentLinkVatAmountResponse `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []CreatePaymentLinkCategoryResponse `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string `json:"productUrl,omitempty"`
}

func (o *CreatePaymentLinkLineResponse) GetType() *CreatePaymentLinkTypeResponse {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreatePaymentLinkLineResponse) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CreatePaymentLinkLineResponse) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *CreatePaymentLinkLineResponse) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *CreatePaymentLinkLineResponse) GetUnitPrice() CreatePaymentLinkUnitPriceResponse {
	if o == nil {
		return CreatePaymentLinkUnitPriceResponse{}
	}
	return o.UnitPrice
}

func (o *CreatePaymentLinkLineResponse) GetDiscountAmount() *CreatePaymentLinkDiscountAmountResponse {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *CreatePaymentLinkLineResponse) GetTotalAmount() CreatePaymentLinkTotalAmountResponse {
	if o == nil {
		return CreatePaymentLinkTotalAmountResponse{}
	}
	return o.TotalAmount
}

func (o *CreatePaymentLinkLineResponse) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *CreatePaymentLinkLineResponse) GetVatAmount() *CreatePaymentLinkVatAmountResponse {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *CreatePaymentLinkLineResponse) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *CreatePaymentLinkLineResponse) GetCategories() []CreatePaymentLinkCategoryResponse {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *CreatePaymentLinkLineResponse) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *CreatePaymentLinkLineResponse) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}

// CreatePaymentLinkBillingAddressResponse - The customer's billing address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
//
// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
type CreatePaymentLinkBillingAddressResponse struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *CreatePaymentLinkBillingAddressResponse) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CreatePaymentLinkBillingAddressResponse) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *CreatePaymentLinkBillingAddressResponse) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *CreatePaymentLinkBillingAddressResponse) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *CreatePaymentLinkBillingAddressResponse) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *CreatePaymentLinkBillingAddressResponse) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *CreatePaymentLinkBillingAddressResponse) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *CreatePaymentLinkBillingAddressResponse) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreatePaymentLinkBillingAddressResponse) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *CreatePaymentLinkBillingAddressResponse) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *CreatePaymentLinkBillingAddressResponse) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *CreatePaymentLinkBillingAddressResponse) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// CreatePaymentLinkShippingAddressResponse - The customer's shipping address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
type CreatePaymentLinkShippingAddressResponse struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *CreatePaymentLinkShippingAddressResponse) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CreatePaymentLinkShippingAddressResponse) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *CreatePaymentLinkShippingAddressResponse) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *CreatePaymentLinkShippingAddressResponse) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *CreatePaymentLinkShippingAddressResponse) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *CreatePaymentLinkShippingAddressResponse) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *CreatePaymentLinkShippingAddressResponse) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *CreatePaymentLinkShippingAddressResponse) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreatePaymentLinkShippingAddressResponse) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *CreatePaymentLinkShippingAddressResponse) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *CreatePaymentLinkShippingAddressResponse) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *CreatePaymentLinkShippingAddressResponse) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// CreatePaymentLinkApplicationFeeAmountResponse - The fee that you wish to charge.
//
// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
// a €0.99 fee on a €1.00 payment.
type CreatePaymentLinkApplicationFeeAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreatePaymentLinkApplicationFeeAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreatePaymentLinkApplicationFeeAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreatePaymentLinkApplicationFeeResponse - With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
type CreatePaymentLinkApplicationFeeResponse struct {
	// The fee that you wish to charge.
	//
	// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
	// a €0.99 fee on a €1.00 payment.
	Amount CreatePaymentLinkApplicationFeeAmountResponse `json:"amount"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description string `json:"description"`
}

func (o *CreatePaymentLinkApplicationFeeResponse) GetAmount() CreatePaymentLinkApplicationFeeAmountResponse {
	if o == nil {
		return CreatePaymentLinkApplicationFeeAmountResponse{}
	}
	return o.Amount
}

func (o *CreatePaymentLinkApplicationFeeResponse) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

// CreatePaymentLinkSequenceTypeResponse - If set to `first`, a payment mandate is established right after a payment is made by the customer.
//
// Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
//
// The mandate ID can be retrieved by making a call to the
// [Payment Link Payments Endpoint](get-payment-link-payments).
type CreatePaymentLinkSequenceTypeResponse string

const (
	CreatePaymentLinkSequenceTypeResponseOneoff CreatePaymentLinkSequenceTypeResponse = "oneoff"
	CreatePaymentLinkSequenceTypeResponseFirst  CreatePaymentLinkSequenceTypeResponse = "first"
)

func (e CreatePaymentLinkSequenceTypeResponse) ToPointer() *CreatePaymentLinkSequenceTypeResponse {
	return &e
}
func (e *CreatePaymentLinkSequenceTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oneoff":
		fallthrough
	case "first":
		*e = CreatePaymentLinkSequenceTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePaymentLinkSequenceTypeResponse: %v", v)
	}
}

// CreatePaymentLinkSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CreatePaymentLinkSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentLinkSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentLinkSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentLinkPaymentLink - The URL your customer should visit to make the payment. This is where you should redirect the customer to.
type CreatePaymentLinkPaymentLink struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreatePaymentLinkPaymentLink) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreatePaymentLinkPaymentLink) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreatePaymentLinkLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type CreatePaymentLinkLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self CreatePaymentLinkSelf `json:"self"`
	// The URL your customer should visit to make the payment. This is where you should redirect the customer to.
	PaymentLink CreatePaymentLinkPaymentLink `json:"paymentLink"`
}

func (o *CreatePaymentLinkLinks) GetSelf() CreatePaymentLinkSelf {
	if o == nil {
		return CreatePaymentLinkSelf{}
	}
	return o.Self
}

func (o *CreatePaymentLinkLinks) GetPaymentLink() CreatePaymentLinkPaymentLink {
	if o == nil {
		return CreatePaymentLinkPaymentLink{}
	}
	return o.PaymentLink
}

// CreatePaymentLinkResponseBody - The newly created payment link object.
type CreatePaymentLinkResponseBody struct {
	// Indicates the response contains a payment link object. Will always contain the string `payment-link` for this
	// endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this payment link. Example: `pl_4Y0eZitmBnQ6IDoMqZQKh`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode CreatePaymentLinkMode `json:"mode"`
	// A short description of the payment link. The description is visible in the Dashboard and will be shown on the
	// customer's bank or card statement when possible.
	Description string `json:"description"`
	// The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
	// amount.
	Amount *CreatePaymentLinkAmountResponse `json:"amount"`
	// The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
	// customer will be prompted to enter a value greater than or equal to the minimum amount.
	MinimumAmount *CreatePaymentLinkMinimumAmountResponse `json:"minimumAmount,omitempty"`
	// Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
	Archived bool `json:"archived"`
	// The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
	// the customer will be shown a generic message after completing the payment.
	RedirectURL *string `json:"redirectUrl"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
	// resulting from the payment link.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines []CreatePaymentLinkLineResponse `json:"lines,omitempty"`
	// The customer's billing address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	//
	// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
	BillingAddress *CreatePaymentLinkBillingAddressResponse `json:"billingAddress,omitempty"`
	// The customer's shipping address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	ShippingAddress *CreatePaymentLinkShippingAddressResponse `json:"shippingAddress,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
	// request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
	// required.
	ProfileID *string `json:"profileId"`
	// Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
	// payments using the same link.
	//
	// If no value is specified, the field defaults to `false`, allowing only a single payment per link.
	Reusable *bool `json:"reusable"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The date and time the payment link became paid, in ISO 8601 format.
	PaidAt *string `json:"paidAt"`
	// The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
	// the payment link will not expire automatically.
	ExpiresAt *string `json:"expiresAt"`
	// An array of payment methods that are allowed to be used for this payment link. When this parameter is
	// not provided or is an empty array, all enabled payment methods will be available.
	//
	// Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
	// 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
	// 'in3', 'riverty', 'klarna', 'billie'.
	AllowedMethods []string `json:"allowedMethods"`
	// With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	ApplicationFee *CreatePaymentLinkApplicationFeeResponse `json:"applicationFee,omitempty"`
	// If set to `first`, a payment mandate is established right after a payment is made by the customer.
	//
	// Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
	//
	// The mandate ID can be retrieved by making a call to the
	// [Payment Link Payments Endpoint](get-payment-link-payments).
	SequenceType *CreatePaymentLinkSequenceTypeResponse `json:"sequenceType,omitempty"`
	// **Only relevant when `sequenceType` is set to `first`**
	//
	// The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
	// the customer will be required to input relevant information which will be used to establish a mandate after
	// the payment is made.
	CustomerID *string `json:"customerId,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links CreatePaymentLinkLinks `json:"_links"`
}

func (o *CreatePaymentLinkResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *CreatePaymentLinkResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreatePaymentLinkResponseBody) GetMode() CreatePaymentLinkMode {
	if o == nil {
		return CreatePaymentLinkMode("")
	}
	return o.Mode
}

func (o *CreatePaymentLinkResponseBody) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CreatePaymentLinkResponseBody) GetAmount() *CreatePaymentLinkAmountResponse {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CreatePaymentLinkResponseBody) GetMinimumAmount() *CreatePaymentLinkMinimumAmountResponse {
	if o == nil {
		return nil
	}
	return o.MinimumAmount
}

func (o *CreatePaymentLinkResponseBody) GetArchived() bool {
	if o == nil {
		return false
	}
	return o.Archived
}

func (o *CreatePaymentLinkResponseBody) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *CreatePaymentLinkResponseBody) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *CreatePaymentLinkResponseBody) GetLines() []CreatePaymentLinkLineResponse {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *CreatePaymentLinkResponseBody) GetBillingAddress() *CreatePaymentLinkBillingAddressResponse {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *CreatePaymentLinkResponseBody) GetShippingAddress() *CreatePaymentLinkShippingAddressResponse {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *CreatePaymentLinkResponseBody) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *CreatePaymentLinkResponseBody) GetReusable() *bool {
	if o == nil {
		return nil
	}
	return o.Reusable
}

func (o *CreatePaymentLinkResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreatePaymentLinkResponseBody) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *CreatePaymentLinkResponseBody) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *CreatePaymentLinkResponseBody) GetAllowedMethods() []string {
	if o == nil {
		return nil
	}
	return o.AllowedMethods
}

func (o *CreatePaymentLinkResponseBody) GetApplicationFee() *CreatePaymentLinkApplicationFeeResponse {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *CreatePaymentLinkResponseBody) GetSequenceType() *CreatePaymentLinkSequenceTypeResponse {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *CreatePaymentLinkResponseBody) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *CreatePaymentLinkResponseBody) GetLinks() CreatePaymentLinkLinks {
	if o == nil {
		return CreatePaymentLinkLinks{}
	}
	return o.Links
}

type CreatePaymentLinkResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The newly created payment link object.
	Object *CreatePaymentLinkResponseBody
}

func (o *CreatePaymentLinkResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreatePaymentLinkResponse) GetObject() *CreatePaymentLinkResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
