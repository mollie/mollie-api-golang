// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
	"github.com/mollie/mollie-api-golang/types"
)

type CancelPaymentRequestBody struct {
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
}

func (o *CancelPaymentRequestBody) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

type CancelPaymentRequest struct {
	// Provide the ID of the related payment.
	PaymentID   string                    `pathParam:"style=simple,explode=false,name=paymentId"`
	RequestBody *CancelPaymentRequestBody `request:"mediaType=application/json"`
}

func (o *CancelPaymentRequest) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *CancelPaymentRequest) GetRequestBody() *CancelPaymentRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// CancelPaymentUnprocessableEntityDocumentation - The URL to the generic Mollie API error handling guide.
type CancelPaymentUnprocessableEntityDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *CancelPaymentUnprocessableEntityDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentUnprocessableEntityDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CancelPaymentUnprocessableEntityLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation CancelPaymentUnprocessableEntityDocumentation `json:"documentation"`
}

func (o *CancelPaymentUnprocessableEntityLinks) GetDocumentation() CancelPaymentUnprocessableEntityDocumentation {
	if o == nil {
		return CancelPaymentUnprocessableEntityDocumentation{}
	}
	return o.Documentation
}

// CancelPaymentNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type CancelPaymentNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *CancelPaymentNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CancelPaymentNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation CancelPaymentNotFoundDocumentation `json:"documentation"`
}

func (o *CancelPaymentNotFoundLinks) GetDocumentation() CancelPaymentNotFoundDocumentation {
	if o == nil {
		return CancelPaymentNotFoundDocumentation{}
	}
	return o.Documentation
}

// CancelPaymentMode - Whether this entity was created in live mode or in test mode.
type CancelPaymentMode string

const (
	CancelPaymentModeLive CancelPaymentMode = "live"
	CancelPaymentModeTest CancelPaymentMode = "test"
)

func (e CancelPaymentMode) ToPointer() *CancelPaymentMode {
	return &e
}
func (e *CancelPaymentMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = CancelPaymentMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentMode: %v", v)
	}
}

// CancelPaymentAmount - The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
//
// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
// retrieved using the Get method endpoint.
//
// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
// tip amount.
type CancelPaymentAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CancelPaymentAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CancelPaymentAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CancelPaymentAmountRefunded - The total amount that is already refunded. Only available when refunds are available for this payment. For some
// payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
// costs for a return shipment to the customer.
type CancelPaymentAmountRefunded struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CancelPaymentAmountRefunded) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CancelPaymentAmountRefunded) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CancelPaymentAmountRemaining - The remaining amount that can be refunded. Only available when refunds are available for this payment.
type CancelPaymentAmountRemaining struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CancelPaymentAmountRemaining) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CancelPaymentAmountRemaining) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CancelPaymentAmountCaptured - The total amount that is already captured for this payment. Only available when this payment supports captures.
type CancelPaymentAmountCaptured struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CancelPaymentAmountCaptured) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CancelPaymentAmountCaptured) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CancelPaymentAmountChargedBack - The total amount that was charged back for this payment. Only available when the total charged back amount is not
// zero.
type CancelPaymentAmountChargedBack struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CancelPaymentAmountChargedBack) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CancelPaymentAmountChargedBack) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CancelPaymentSettlementAmount - This optional field will contain the approximate amount that will be settled to your account, converted to the
// currency your account is settled in.
//
// Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
// settled by Mollie the `settlementAmount` is omitted from the response.
//
// Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
// using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
type CancelPaymentSettlementAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CancelPaymentSettlementAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CancelPaymentSettlementAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CancelPaymentLineType - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type CancelPaymentLineType string

const (
	CancelPaymentLineTypePhysical    CancelPaymentLineType = "physical"
	CancelPaymentLineTypeDigital     CancelPaymentLineType = "digital"
	CancelPaymentLineTypeShippingFee CancelPaymentLineType = "shipping_fee"
	CancelPaymentLineTypeDiscount    CancelPaymentLineType = "discount"
	CancelPaymentLineTypeStoreCredit CancelPaymentLineType = "store_credit"
	CancelPaymentLineTypeGiftCard    CancelPaymentLineType = "gift_card"
	CancelPaymentLineTypeSurcharge   CancelPaymentLineType = "surcharge"
	CancelPaymentLineTypeTip         CancelPaymentLineType = "tip"
)

func (e CancelPaymentLineType) ToPointer() *CancelPaymentLineType {
	return &e
}
func (e *CancelPaymentLineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "physical":
		fallthrough
	case "digital":
		fallthrough
	case "shipping_fee":
		fallthrough
	case "discount":
		fallthrough
	case "store_credit":
		fallthrough
	case "gift_card":
		fallthrough
	case "surcharge":
		fallthrough
	case "tip":
		*e = CancelPaymentLineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentLineType: %v", v)
	}
}

// CancelPaymentUnitPrice - The price of a single item including VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
//
// The unit price can be zero in case of free items.
type CancelPaymentUnitPrice struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CancelPaymentUnitPrice) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CancelPaymentUnitPrice) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CancelPaymentDiscountAmount - Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
// type.
type CancelPaymentDiscountAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CancelPaymentDiscountAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CancelPaymentDiscountAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CancelPaymentTotalAmount - The total amount of the line, including VAT and discounts.
//
// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
//
// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
type CancelPaymentTotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CancelPaymentTotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CancelPaymentTotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CancelPaymentVatAmount - The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
//
// Any deviations from this will result in an error.
//
// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
// `SEK 100.00 × (25 / 125) = SEK 20.00`.
type CancelPaymentVatAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CancelPaymentVatAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CancelPaymentVatAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CancelPaymentCategory string

const (
	CancelPaymentCategoryMeal         CancelPaymentCategory = "meal"
	CancelPaymentCategoryEco          CancelPaymentCategory = "eco"
	CancelPaymentCategoryGift         CancelPaymentCategory = "gift"
	CancelPaymentCategorySportCulture CancelPaymentCategory = "sport_culture"
)

func (e CancelPaymentCategory) ToPointer() *CancelPaymentCategory {
	return &e
}
func (e *CancelPaymentCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "meal":
		fallthrough
	case "eco":
		fallthrough
	case "gift":
		fallthrough
	case "sport_culture":
		*e = CancelPaymentCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentCategory: %v", v)
	}
}

// CancelPaymentRecurringAmount - Total amount and currency of the recurring item.
type CancelPaymentRecurringAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CancelPaymentRecurringAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CancelPaymentRecurringAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CancelPaymentRecurring - The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
// to inform the shopper of the details for recurring products in the payments.
type CancelPaymentRecurring struct {
	// A description of the recurring item. If not present, the main description of the item will be used.
	Description *string `json:"description,omitempty"`
	// Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval string `json:"interval"`
	// Total amount and currency of the recurring item.
	Amount *CancelPaymentRecurringAmount `json:"amount,omitempty"`
	// Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
	Times *int64 `json:"times,omitempty"`
	// The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
	StartDate *string `json:"startDate,omitempty"`
}

func (o *CancelPaymentRecurring) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CancelPaymentRecurring) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *CancelPaymentRecurring) GetAmount() *CancelPaymentRecurringAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CancelPaymentRecurring) GetTimes() *int64 {
	if o == nil {
		return nil
	}
	return o.Times
}

func (o *CancelPaymentRecurring) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

type CancelPaymentLine struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *CancelPaymentLineType `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// The price of a single item including VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
	//
	// The unit price can be zero in case of free items.
	UnitPrice CancelPaymentUnitPrice `json:"unitPrice"`
	// Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
	// type.
	DiscountAmount *CancelPaymentDiscountAmount `json:"discountAmount,omitempty"`
	// The total amount of the line, including VAT and discounts.
	//
	// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
	//
	// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
	TotalAmount CancelPaymentTotalAmount `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
	// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
	//
	// Any deviations from this will result in an error.
	//
	// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
	// `SEK 100.00 × (25 / 125) = SEK 20.00`.
	VatAmount *CancelPaymentVatAmount `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []CancelPaymentCategory `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string `json:"productUrl,omitempty"`
	// The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
	// to inform the shopper of the details for recurring products in the payments.
	Recurring *CancelPaymentRecurring `json:"recurring,omitempty"`
}

func (o *CancelPaymentLine) GetType() *CancelPaymentLineType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CancelPaymentLine) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CancelPaymentLine) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *CancelPaymentLine) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *CancelPaymentLine) GetUnitPrice() CancelPaymentUnitPrice {
	if o == nil {
		return CancelPaymentUnitPrice{}
	}
	return o.UnitPrice
}

func (o *CancelPaymentLine) GetDiscountAmount() *CancelPaymentDiscountAmount {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *CancelPaymentLine) GetTotalAmount() CancelPaymentTotalAmount {
	if o == nil {
		return CancelPaymentTotalAmount{}
	}
	return o.TotalAmount
}

func (o *CancelPaymentLine) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *CancelPaymentLine) GetVatAmount() *CancelPaymentVatAmount {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *CancelPaymentLine) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *CancelPaymentLine) GetCategories() []CancelPaymentCategory {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *CancelPaymentLine) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *CancelPaymentLine) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}

func (o *CancelPaymentLine) GetRecurring() *CancelPaymentRecurring {
	if o == nil {
		return nil
	}
	return o.Recurring
}

// CancelPaymentBillingAddress - The customer's billing address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
//
// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
type CancelPaymentBillingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *CancelPaymentBillingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CancelPaymentBillingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *CancelPaymentBillingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *CancelPaymentBillingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *CancelPaymentBillingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *CancelPaymentBillingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *CancelPaymentBillingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *CancelPaymentBillingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CancelPaymentBillingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *CancelPaymentBillingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *CancelPaymentBillingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *CancelPaymentBillingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// CancelPaymentShippingAddress - The customer's shipping address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
type CancelPaymentShippingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *CancelPaymentShippingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CancelPaymentShippingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *CancelPaymentShippingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *CancelPaymentShippingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *CancelPaymentShippingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *CancelPaymentShippingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *CancelPaymentShippingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *CancelPaymentShippingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CancelPaymentShippingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *CancelPaymentShippingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *CancelPaymentShippingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *CancelPaymentShippingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// CancelPaymentLocale - Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
// locale, but our hosted payment pages currently only support the specified languages.
//
// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
// customer use a local bank account greatly increases the conversion and speed of payment.
type CancelPaymentLocale string

const (
	CancelPaymentLocaleEnUs CancelPaymentLocale = "en_US"
	CancelPaymentLocaleEnGb CancelPaymentLocale = "en_GB"
	CancelPaymentLocaleNlNl CancelPaymentLocale = "nl_NL"
	CancelPaymentLocaleNlBe CancelPaymentLocale = "nl_BE"
	CancelPaymentLocaleDeDe CancelPaymentLocale = "de_DE"
	CancelPaymentLocaleDeAt CancelPaymentLocale = "de_AT"
	CancelPaymentLocaleDeCh CancelPaymentLocale = "de_CH"
	CancelPaymentLocaleFrFr CancelPaymentLocale = "fr_FR"
	CancelPaymentLocaleFrBe CancelPaymentLocale = "fr_BE"
	CancelPaymentLocaleEsEs CancelPaymentLocale = "es_ES"
	CancelPaymentLocaleCaEs CancelPaymentLocale = "ca_ES"
	CancelPaymentLocalePtPt CancelPaymentLocale = "pt_PT"
	CancelPaymentLocaleItIt CancelPaymentLocale = "it_IT"
	CancelPaymentLocaleNbNo CancelPaymentLocale = "nb_NO"
	CancelPaymentLocaleSvSe CancelPaymentLocale = "sv_SE"
	CancelPaymentLocaleFiFi CancelPaymentLocale = "fi_FI"
	CancelPaymentLocaleDaDk CancelPaymentLocale = "da_DK"
	CancelPaymentLocaleIsIs CancelPaymentLocale = "is_IS"
	CancelPaymentLocaleHuHu CancelPaymentLocale = "hu_HU"
	CancelPaymentLocalePlPl CancelPaymentLocale = "pl_PL"
	CancelPaymentLocaleLvLv CancelPaymentLocale = "lv_LV"
	CancelPaymentLocaleLtLt CancelPaymentLocale = "lt_LT"
)

func (e CancelPaymentLocale) ToPointer() *CancelPaymentLocale {
	return &e
}
func (e *CancelPaymentLocale) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		fallthrough
	case "es_ES":
		fallthrough
	case "ca_ES":
		fallthrough
	case "pt_PT":
		fallthrough
	case "it_IT":
		fallthrough
	case "nb_NO":
		fallthrough
	case "sv_SE":
		fallthrough
	case "fi_FI":
		fallthrough
	case "da_DK":
		fallthrough
	case "is_IS":
		fallthrough
	case "hu_HU":
		fallthrough
	case "pl_PL":
		fallthrough
	case "lv_LV":
		fallthrough
	case "lt_LT":
		*e = CancelPaymentLocale(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentLocale: %v", v)
	}
}

// CancelPaymentMethod - The payment method used for this transaction. If a specific method was selected during payment initialization,
// this field reflects that choice.
type CancelPaymentMethod string

const (
	CancelPaymentMethodAlma           CancelPaymentMethod = "alma"
	CancelPaymentMethodApplepay       CancelPaymentMethod = "applepay"
	CancelPaymentMethodBacs           CancelPaymentMethod = "bacs"
	CancelPaymentMethodBancomatpay    CancelPaymentMethod = "bancomatpay"
	CancelPaymentMethodBancontact     CancelPaymentMethod = "bancontact"
	CancelPaymentMethodBanktransfer   CancelPaymentMethod = "banktransfer"
	CancelPaymentMethodBelfius        CancelPaymentMethod = "belfius"
	CancelPaymentMethodBillie         CancelPaymentMethod = "billie"
	CancelPaymentMethodBizum          CancelPaymentMethod = "bizum"
	CancelPaymentMethodBlik           CancelPaymentMethod = "blik"
	CancelPaymentMethodCreditcard     CancelPaymentMethod = "creditcard"
	CancelPaymentMethodDirectdebit    CancelPaymentMethod = "directdebit"
	CancelPaymentMethodEps            CancelPaymentMethod = "eps"
	CancelPaymentMethodGiftcard       CancelPaymentMethod = "giftcard"
	CancelPaymentMethodIdeal          CancelPaymentMethod = "ideal"
	CancelPaymentMethodIn3            CancelPaymentMethod = "in3"
	CancelPaymentMethodKbc            CancelPaymentMethod = "kbc"
	CancelPaymentMethodKlarna         CancelPaymentMethod = "klarna"
	CancelPaymentMethodKlarnapaylater CancelPaymentMethod = "klarnapaylater"
	CancelPaymentMethodKlarnapaynow   CancelPaymentMethod = "klarnapaynow"
	CancelPaymentMethodKlarnasliceit  CancelPaymentMethod = "klarnasliceit"
	CancelPaymentMethodMbway          CancelPaymentMethod = "mbway"
	CancelPaymentMethodMultibanco     CancelPaymentMethod = "multibanco"
	CancelPaymentMethodMybank         CancelPaymentMethod = "mybank"
	CancelPaymentMethodPaybybank      CancelPaymentMethod = "paybybank"
	CancelPaymentMethodPayconiq       CancelPaymentMethod = "payconiq"
	CancelPaymentMethodPaypal         CancelPaymentMethod = "paypal"
	CancelPaymentMethodPaysafecard    CancelPaymentMethod = "paysafecard"
	CancelPaymentMethodPointofsale    CancelPaymentMethod = "pointofsale"
	CancelPaymentMethodPrzelewy24     CancelPaymentMethod = "przelewy24"
	CancelPaymentMethodRiverty        CancelPaymentMethod = "riverty"
	CancelPaymentMethodSatispay       CancelPaymentMethod = "satispay"
	CancelPaymentMethodSwish          CancelPaymentMethod = "swish"
	CancelPaymentMethodTrustly        CancelPaymentMethod = "trustly"
	CancelPaymentMethodTwint          CancelPaymentMethod = "twint"
	CancelPaymentMethodVoucher        CancelPaymentMethod = "voucher"
)

func (e CancelPaymentMethod) ToPointer() *CancelPaymentMethod {
	return &e
}
func (e *CancelPaymentMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "applepay":
		fallthrough
	case "bacs":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "kbc":
		fallthrough
	case "klarna":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "pointofsale":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = CancelPaymentMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentMethod: %v", v)
	}
}

type CancelPaymentMetadataType string

const (
	CancelPaymentMetadataTypeStr        CancelPaymentMetadataType = "str"
	CancelPaymentMetadataTypeMapOfAny   CancelPaymentMetadataType = "mapOfAny"
	CancelPaymentMetadataTypeArrayOfStr CancelPaymentMetadataType = "arrayOfStr"
)

// CancelPaymentMetadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type CancelPaymentMetadata struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type CancelPaymentMetadataType
}

func CreateCancelPaymentMetadataStr(str string) CancelPaymentMetadata {
	typ := CancelPaymentMetadataTypeStr

	return CancelPaymentMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelPaymentMetadataMapOfAny(mapOfAny map[string]any) CancelPaymentMetadata {
	typ := CancelPaymentMetadataTypeMapOfAny

	return CancelPaymentMetadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateCancelPaymentMetadataArrayOfStr(arrayOfStr []string) CancelPaymentMetadata {
	typ := CancelPaymentMetadataTypeArrayOfStr

	return CancelPaymentMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CancelPaymentMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CancelPaymentMetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CancelPaymentMetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CancelPaymentMetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelPaymentMetadata", string(data))
}

func (u CancelPaymentMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CancelPaymentMetadata: all fields are null")
}

// CancelPaymentCaptureMode - Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
// and capture at a later time.
//
// This field needs to be set to `manual` for method `riverty`.
type CancelPaymentCaptureMode string

const (
	CancelPaymentCaptureModeAutomatic CancelPaymentCaptureMode = "automatic"
	CancelPaymentCaptureModeManual    CancelPaymentCaptureMode = "manual"
)

func (e CancelPaymentCaptureMode) ToPointer() *CancelPaymentCaptureMode {
	return &e
}
func (e *CancelPaymentCaptureMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automatic":
		fallthrough
	case "manual":
		*e = CancelPaymentCaptureMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentCaptureMode: %v", v)
	}
}

// CancelPaymentApplicationFeeAmount - The fee that you wish to charge.
//
// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
// a €0.99 fee on a €1.00 payment.
type CancelPaymentApplicationFeeAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CancelPaymentApplicationFeeAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CancelPaymentApplicationFeeAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CancelPaymentApplicationFee - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
//
// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
// `routing` parameter.
type CancelPaymentApplicationFee struct {
	// The fee that you wish to charge.
	//
	// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
	// a €0.99 fee on a €1.00 payment.
	Amount *CancelPaymentApplicationFeeAmount `json:"amount,omitempty"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description *string `json:"description,omitempty"`
}

func (o *CancelPaymentApplicationFee) GetAmount() *CancelPaymentApplicationFeeAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CancelPaymentApplicationFee) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// CancelPaymentRoutingMode - Whether this entity was created in live mode or in test mode.
type CancelPaymentRoutingMode string

const (
	CancelPaymentRoutingModeLive CancelPaymentRoutingMode = "live"
	CancelPaymentRoutingModeTest CancelPaymentRoutingMode = "test"
)

func (e CancelPaymentRoutingMode) ToPointer() *CancelPaymentRoutingMode {
	return &e
}
func (e *CancelPaymentRoutingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = CancelPaymentRoutingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentRoutingMode: %v", v)
	}
}

// CancelPaymentRoutingAmount - The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
type CancelPaymentRoutingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CancelPaymentRoutingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CancelPaymentRoutingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CancelPaymentRoutingType - The type of destination. Currently only the destination type `organization` is supported.
type CancelPaymentRoutingType string

const (
	CancelPaymentRoutingTypeOrganization CancelPaymentRoutingType = "organization"
)

func (e CancelPaymentRoutingType) ToPointer() *CancelPaymentRoutingType {
	return &e
}
func (e *CancelPaymentRoutingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organization":
		*e = CancelPaymentRoutingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentRoutingType: %v", v)
	}
}

// CancelPaymentDestination - The destination of this portion of the payment.
type CancelPaymentDestination struct {
	// The type of destination. Currently only the destination type `organization` is supported.
	Type CancelPaymentRoutingType `json:"type"`
	// Required for destination type `organization`. The ID of the connected organization the funds should be
	// routed to.
	OrganizationID string `json:"organizationId"`
}

func (o *CancelPaymentDestination) GetType() CancelPaymentRoutingType {
	if o == nil {
		return CancelPaymentRoutingType("")
	}
	return o.Type
}

func (o *CancelPaymentDestination) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

// CancelPaymentRoutingSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CancelPaymentRoutingSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentRoutingSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentRoutingSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentPayment - The API resource URL of the [payment](get-payment) that belong to this route.
type CancelPaymentPayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentPayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentPayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentRoutingLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type CancelPaymentRoutingLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self CancelPaymentRoutingSelf `json:"self"`
	// The API resource URL of the [payment](get-payment) that belong to this route.
	Payment CancelPaymentPayment `json:"payment"`
}

func (o *CancelPaymentRoutingLinks) GetSelf() CancelPaymentRoutingSelf {
	if o == nil {
		return CancelPaymentRoutingSelf{}
	}
	return o.Self
}

func (o *CancelPaymentRoutingLinks) GetPayment() CancelPaymentPayment {
	if o == nil {
		return CancelPaymentPayment{}
	}
	return o.Payment
}

type CancelPaymentRouting struct {
	// Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this route. Mollie will always refer to the route by this ID.
	// Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode CancelPaymentRoutingMode `json:"mode"`
	// The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
	Amount CancelPaymentRoutingAmount `json:"amount"`
	// The destination of this portion of the payment.
	Destination CancelPaymentDestination `json:"destination"`
	// The date and time when the route was created. The date is given in ISO 8601 format.
	CreatedAt string `json:"createdAt"`
	// Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
	// date must be given in `YYYY-MM-DD` format.
	//
	// If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
	ReleaseDate *string `json:"releaseDate,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links CancelPaymentRoutingLinks `json:"_links"`
}

func (o *CancelPaymentRouting) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *CancelPaymentRouting) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelPaymentRouting) GetMode() CancelPaymentRoutingMode {
	if o == nil {
		return CancelPaymentRoutingMode("")
	}
	return o.Mode
}

func (o *CancelPaymentRouting) GetAmount() CancelPaymentRoutingAmount {
	if o == nil {
		return CancelPaymentRoutingAmount{}
	}
	return o.Amount
}

func (o *CancelPaymentRouting) GetDestination() CancelPaymentDestination {
	if o == nil {
		return CancelPaymentDestination{}
	}
	return o.Destination
}

func (o *CancelPaymentRouting) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CancelPaymentRouting) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *CancelPaymentRouting) GetLinks() CancelPaymentRoutingLinks {
	if o == nil {
		return CancelPaymentRoutingLinks{}
	}
	return o.Links
}

// CancelPaymentSequenceType - **Only relevant for recurring payments.**
//
// Indicate which part of a recurring sequence this payment is for.
//
// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
// on their account in the future.
//
// If set to `recurring`, the customer's card is charged automatically.
//
// Defaults to `oneoff`, which is a regular non-recurring payment.
//
// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
// are set up correctly for recurring payments.
type CancelPaymentSequenceType string

const (
	CancelPaymentSequenceTypeOneoff    CancelPaymentSequenceType = "oneoff"
	CancelPaymentSequenceTypeFirst     CancelPaymentSequenceType = "first"
	CancelPaymentSequenceTypeRecurring CancelPaymentSequenceType = "recurring"
)

func (e CancelPaymentSequenceType) ToPointer() *CancelPaymentSequenceType {
	return &e
}
func (e *CancelPaymentSequenceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oneoff":
		fallthrough
	case "first":
		fallthrough
	case "recurring":
		*e = CancelPaymentSequenceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentSequenceType: %v", v)
	}
}

// CancelPaymentStatusEnum - The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
// statuses occur at what point.
type CancelPaymentStatusEnum string

const (
	CancelPaymentStatusEnumOpen       CancelPaymentStatusEnum = "open"
	CancelPaymentStatusEnumPending    CancelPaymentStatusEnum = "pending"
	CancelPaymentStatusEnumAuthorized CancelPaymentStatusEnum = "authorized"
	CancelPaymentStatusEnumPaid       CancelPaymentStatusEnum = "paid"
	CancelPaymentStatusEnumCanceled   CancelPaymentStatusEnum = "canceled"
	CancelPaymentStatusEnumExpired    CancelPaymentStatusEnum = "expired"
	CancelPaymentStatusEnumFailed     CancelPaymentStatusEnum = "failed"
)

func (e CancelPaymentStatusEnum) ToPointer() *CancelPaymentStatusEnum {
	return &e
}
func (e *CancelPaymentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "pending":
		fallthrough
	case "authorized":
		fallthrough
	case "paid":
		fallthrough
	case "canceled":
		fallthrough
	case "expired":
		fallthrough
	case "failed":
		*e = CancelPaymentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentStatusEnum: %v", v)
	}
}

// CancelPaymentCode - A machine-readable code that indicates the reason for the payment's status.
type CancelPaymentCode string

const (
	CancelPaymentCodeApprovedOrCompletedSuccessfully             CancelPaymentCode = "approved_or_completed_successfully"
	CancelPaymentCodeReferToCardIssuer                           CancelPaymentCode = "refer_to_card_issuer"
	CancelPaymentCodeInvalidMerchant                             CancelPaymentCode = "invalid_merchant"
	CancelPaymentCodeCaptureCard                                 CancelPaymentCode = "capture_card"
	CancelPaymentCodeDoNotHonor                                  CancelPaymentCode = "do_not_honor"
	CancelPaymentCodeError                                       CancelPaymentCode = "error"
	CancelPaymentCodePartialApproval                             CancelPaymentCode = "partial_approval"
	CancelPaymentCodeInvalidTransaction                          CancelPaymentCode = "invalid_transaction"
	CancelPaymentCodeInvalidAmount                               CancelPaymentCode = "invalid_amount"
	CancelPaymentCodeInvalidIssuer                               CancelPaymentCode = "invalid_issuer"
	CancelPaymentCodeLostCard                                    CancelPaymentCode = "lost_card"
	CancelPaymentCodeStolenCard                                  CancelPaymentCode = "stolen_card"
	CancelPaymentCodeInsufficientFunds                           CancelPaymentCode = "insufficient_funds"
	CancelPaymentCodeExpiredCard                                 CancelPaymentCode = "expired_card"
	CancelPaymentCodeInvalidPin                                  CancelPaymentCode = "invalid_pin"
	CancelPaymentCodeTransactionNotPermittedToCardholder         CancelPaymentCode = "transaction_not_permitted_to_cardholder"
	CancelPaymentCodeTransactionNotAllowedAtTerminal             CancelPaymentCode = "transaction_not_allowed_at_terminal"
	CancelPaymentCodeExceedsWithdrawalAmountLimit                CancelPaymentCode = "exceeds_withdrawal_amount_limit"
	CancelPaymentCodeRestrictedCard                              CancelPaymentCode = "restricted_card"
	CancelPaymentCodeSecurityViolation                           CancelPaymentCode = "security_violation"
	CancelPaymentCodeExceedsWithdrawalCountLimit                 CancelPaymentCode = "exceeds_withdrawal_count_limit"
	CancelPaymentCodeAllowableNumberOfPinTriesExceeded           CancelPaymentCode = "allowable_number_of_pin_tries_exceeded"
	CancelPaymentCodeNoReasonToDecline                           CancelPaymentCode = "no_reason_to_decline"
	CancelPaymentCodeCannotVerifyPin                             CancelPaymentCode = "cannot_verify_pin"
	CancelPaymentCodeIssuerUnavailable                           CancelPaymentCode = "issuer_unavailable"
	CancelPaymentCodeUnableToRouteTransaction                    CancelPaymentCode = "unable_to_route_transaction"
	CancelPaymentCodeDuplicateTransaction                        CancelPaymentCode = "duplicate_transaction"
	CancelPaymentCodeSystemMalfunction                           CancelPaymentCode = "system_malfunction"
	CancelPaymentCodeHonorWithID                                 CancelPaymentCode = "honor_with_id"
	CancelPaymentCodeInvalidCardNumber                           CancelPaymentCode = "invalid_card_number"
	CancelPaymentCodeFormatError                                 CancelPaymentCode = "format_error"
	CancelPaymentCodeContactCardIssuer                           CancelPaymentCode = "contact_card_issuer"
	CancelPaymentCodePinNotChanged                               CancelPaymentCode = "pin_not_changed"
	CancelPaymentCodeInvalidNonexistentToAccountSpecified        CancelPaymentCode = "invalid_nonexistent_to_account_specified"
	CancelPaymentCodeInvalidNonexistentFromAccountSpecified      CancelPaymentCode = "invalid_nonexistent_from_account_specified"
	CancelPaymentCodeInvalidNonexistentAccountSpecified          CancelPaymentCode = "invalid_nonexistent_account_specified"
	CancelPaymentCodeLifecycleRelated                            CancelPaymentCode = "lifecycle_related"
	CancelPaymentCodeDomesticDebitTransactionNotAllowed          CancelPaymentCode = "domestic_debit_transaction_not_allowed"
	CancelPaymentCodePolicyRelated                               CancelPaymentCode = "policy_related"
	CancelPaymentCodeFraudSecurityRelated                        CancelPaymentCode = "fraud_security_related"
	CancelPaymentCodeInvalidAuthorizationLifeCycle               CancelPaymentCode = "invalid_authorization_life_cycle"
	CancelPaymentCodePurchaseAmountOnlyNoCashBackAllowed         CancelPaymentCode = "purchase_amount_only_no_cash_back_allowed"
	CancelPaymentCodeCryptographicFailure                        CancelPaymentCode = "cryptographic_failure"
	CancelPaymentCodeUnacceptablePin                             CancelPaymentCode = "unacceptable_pin"
	CancelPaymentCodeReferToCardIssuerSpecialCondition           CancelPaymentCode = "refer_to_card_issuer_special_condition"
	CancelPaymentCodePickUpCardSpecialCondition                  CancelPaymentCode = "pick_up_card_special_condition"
	CancelPaymentCodeVipApproval                                 CancelPaymentCode = "vip_approval"
	CancelPaymentCodeInvalidAccountNumber                        CancelPaymentCode = "invalid_account_number"
	CancelPaymentCodeReEnterTransaction                          CancelPaymentCode = "re_enter_transaction"
	CancelPaymentCodeNoActionTaken                               CancelPaymentCode = "no_action_taken"
	CancelPaymentCodeUnableToLocateRecord                        CancelPaymentCode = "unable_to_locate_record"
	CancelPaymentCodeFileTemporarilyUnavailable                  CancelPaymentCode = "file_temporarily_unavailable"
	CancelPaymentCodeNoCreditAccount                             CancelPaymentCode = "no_credit_account"
	CancelPaymentCodeClosedAccount                               CancelPaymentCode = "closed_account"
	CancelPaymentCodeNoCheckingAccount                           CancelPaymentCode = "no_checking_account"
	CancelPaymentCodeNoSavingsAccount                            CancelPaymentCode = "no_savings_account"
	CancelPaymentCodeSuspectedFraud                              CancelPaymentCode = "suspected_fraud"
	CancelPaymentCodeTransactionDoesNotFulfillAmlRequirement     CancelPaymentCode = "transaction_does_not_fulfill_aml_requirement"
	CancelPaymentCodePinDataRequired                             CancelPaymentCode = "pin_data_required"
	CancelPaymentCodeUnableToLocatePreviousMessage               CancelPaymentCode = "unable_to_locate_previous_message"
	CancelPaymentCodePreviousMessageLocatedInconsistentData      CancelPaymentCode = "previous_message_located_inconsistent_data"
	CancelPaymentCodeBlockedFirstUsed                            CancelPaymentCode = "blocked_first_used"
	CancelPaymentCodeTransactionReversed                         CancelPaymentCode = "transaction_reversed"
	CancelPaymentCodeCreditIssuerUnavailable                     CancelPaymentCode = "credit_issuer_unavailable"
	CancelPaymentCodePinCryptographicErrorFound                  CancelPaymentCode = "pin_cryptographic_error_found"
	CancelPaymentCodeNegativeOnlineCamResult                     CancelPaymentCode = "negative_online_cam_result"
	CancelPaymentCodeViolationOfLaw                              CancelPaymentCode = "violation_of_law"
	CancelPaymentCodeForceStip                                   CancelPaymentCode = "force_stip"
	CancelPaymentCodeCashServiceNotAvailable                     CancelPaymentCode = "cash_service_not_available"
	CancelPaymentCodeCashbackRequestExceedsIssuerLimit           CancelPaymentCode = "cashback_request_exceeds_issuer_limit"
	CancelPaymentCodeDeclineForCvv2Failure                       CancelPaymentCode = "decline_for_cvv2_failure"
	CancelPaymentCodeTransactionAmountExceedsPreAuthorizedAmount CancelPaymentCode = "transaction_amount_exceeds_pre_authorized_amount"
	CancelPaymentCodeInvalidBillerInformation                    CancelPaymentCode = "invalid_biller_information"
	CancelPaymentCodePinChangeUnblockRequestDeclined             CancelPaymentCode = "pin_change_unblock_request_declined"
	CancelPaymentCodeUnsafePin                                   CancelPaymentCode = "unsafe_pin"
	CancelPaymentCodeCardAuthenticationFailed                    CancelPaymentCode = "card_authentication_failed"
	CancelPaymentCodeStopPaymentOrder                            CancelPaymentCode = "stop_payment_order"
	CancelPaymentCodeRevocationOfAuthorization                   CancelPaymentCode = "revocation_of_authorization"
	CancelPaymentCodeRevocationOfAllAuthorizations               CancelPaymentCode = "revocation_of_all_authorizations"
	CancelPaymentCodeForwardToIssuerXa                           CancelPaymentCode = "forward_to_issuer_xa"
	CancelPaymentCodeForwardToIssuerXd                           CancelPaymentCode = "forward_to_issuer_xd"
	CancelPaymentCodeUnableToGoOnline                            CancelPaymentCode = "unable_to_go_online"
	CancelPaymentCodeAdditionalCustomerAuthenticationRequired    CancelPaymentCode = "additional_customer_authentication_required"
	CancelPaymentCodeMerchantIDNotFound                          CancelPaymentCode = "merchant_id_not_found"
	CancelPaymentCodeMerchantAccountClosed                       CancelPaymentCode = "merchant_account_closed"
	CancelPaymentCodeTerminalIDNotFound                          CancelPaymentCode = "terminal_id_not_found"
	CancelPaymentCodeTerminalClosed                              CancelPaymentCode = "terminal_closed"
	CancelPaymentCodeInvalidCategoryCode                         CancelPaymentCode = "invalid_category_code"
	CancelPaymentCodeInvalidCurrency                             CancelPaymentCode = "invalid_currency"
	CancelPaymentCodeMissingCvv2Cvc2                             CancelPaymentCode = "missing_cvv2_cvc2"
	CancelPaymentCodeCvv2NotAllowed                              CancelPaymentCode = "cvv2_not_allowed"
	CancelPaymentCodeMerchantNotRegisteredVbv                    CancelPaymentCode = "merchant_not_registered_vbv"
	CancelPaymentCodeMerchantNotRegisteredForAmex                CancelPaymentCode = "merchant_not_registered_for_amex"
	CancelPaymentCodeTransactionNotPermittedAtTerminal           CancelPaymentCode = "transaction_not_permitted_at_terminal"
	CancelPaymentCodeAgreementTerminalNotRelated                 CancelPaymentCode = "agreement_terminal_not_related"
	CancelPaymentCodeInvalidProcessorID                          CancelPaymentCode = "invalid_processor_id"
	CancelPaymentCodeInvalidMerchantData                         CancelPaymentCode = "invalid_merchant_data"
	CancelPaymentCodeSubMerchantAccountClosed                    CancelPaymentCode = "sub_merchant_account_closed"
	CancelPaymentCodeTerminalBusy                                CancelPaymentCode = "terminal_busy"
	CancelPaymentCodeTerminalUnreachable                         CancelPaymentCode = "terminal_unreachable"
	CancelPaymentCodeServiceFailed                               CancelPaymentCode = "service_failed"
	CancelPaymentCodeInvalidOperation                            CancelPaymentCode = "invalid_operation"
	CancelPaymentCodeAuthorizationError                          CancelPaymentCode = "authorization_error"
	CancelPaymentCodeLoginFailedWithoutReason                    CancelPaymentCode = "login_failed_without_reason"
	CancelPaymentCodeInvalidRetailer                             CancelPaymentCode = "invalid_retailer"
	CancelPaymentCodeCardDoesNotExist                            CancelPaymentCode = "card_does_not_exist"
	CancelPaymentCodeCardIsBlocked                               CancelPaymentCode = "card_is_blocked"
	CancelPaymentCodeInvalidCardID                               CancelPaymentCode = "invalid_card_id"
	CancelPaymentCodeCardIsTransferred                           CancelPaymentCode = "card_is_transferred"
	CancelPaymentCodeCardIsNotActive                             CancelPaymentCode = "card_is_not_active"
	CancelPaymentCodeIncorrectPurchaseValue                      CancelPaymentCode = "incorrect_purchase_value"
	CancelPaymentCodeCardNotAvailable                            CancelPaymentCode = "card_not_available"
	CancelPaymentCodeWrongCurrency                               CancelPaymentCode = "wrong_currency"
	CancelPaymentCodeLoginFailedUnknownUser                      CancelPaymentCode = "login_failed_unknown_user"
	CancelPaymentCodeLoginFailedInvalidPassword                  CancelPaymentCode = "login_failed_invalid_password"
	CancelPaymentCodeInvalidEanCode                              CancelPaymentCode = "invalid_ean_code"
)

func (e CancelPaymentCode) ToPointer() *CancelPaymentCode {
	return &e
}
func (e *CancelPaymentCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved_or_completed_successfully":
		fallthrough
	case "refer_to_card_issuer":
		fallthrough
	case "invalid_merchant":
		fallthrough
	case "capture_card":
		fallthrough
	case "do_not_honor":
		fallthrough
	case "error":
		fallthrough
	case "partial_approval":
		fallthrough
	case "invalid_transaction":
		fallthrough
	case "invalid_amount":
		fallthrough
	case "invalid_issuer":
		fallthrough
	case "lost_card":
		fallthrough
	case "stolen_card":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "expired_card":
		fallthrough
	case "invalid_pin":
		fallthrough
	case "transaction_not_permitted_to_cardholder":
		fallthrough
	case "transaction_not_allowed_at_terminal":
		fallthrough
	case "exceeds_withdrawal_amount_limit":
		fallthrough
	case "restricted_card":
		fallthrough
	case "security_violation":
		fallthrough
	case "exceeds_withdrawal_count_limit":
		fallthrough
	case "allowable_number_of_pin_tries_exceeded":
		fallthrough
	case "no_reason_to_decline":
		fallthrough
	case "cannot_verify_pin":
		fallthrough
	case "issuer_unavailable":
		fallthrough
	case "unable_to_route_transaction":
		fallthrough
	case "duplicate_transaction":
		fallthrough
	case "system_malfunction":
		fallthrough
	case "honor_with_id":
		fallthrough
	case "invalid_card_number":
		fallthrough
	case "format_error":
		fallthrough
	case "contact_card_issuer":
		fallthrough
	case "pin_not_changed":
		fallthrough
	case "invalid_nonexistent_to_account_specified":
		fallthrough
	case "invalid_nonexistent_from_account_specified":
		fallthrough
	case "invalid_nonexistent_account_specified":
		fallthrough
	case "lifecycle_related":
		fallthrough
	case "domestic_debit_transaction_not_allowed":
		fallthrough
	case "policy_related":
		fallthrough
	case "fraud_security_related":
		fallthrough
	case "invalid_authorization_life_cycle":
		fallthrough
	case "purchase_amount_only_no_cash_back_allowed":
		fallthrough
	case "cryptographic_failure":
		fallthrough
	case "unacceptable_pin":
		fallthrough
	case "refer_to_card_issuer_special_condition":
		fallthrough
	case "pick_up_card_special_condition":
		fallthrough
	case "vip_approval":
		fallthrough
	case "invalid_account_number":
		fallthrough
	case "re_enter_transaction":
		fallthrough
	case "no_action_taken":
		fallthrough
	case "unable_to_locate_record":
		fallthrough
	case "file_temporarily_unavailable":
		fallthrough
	case "no_credit_account":
		fallthrough
	case "closed_account":
		fallthrough
	case "no_checking_account":
		fallthrough
	case "no_savings_account":
		fallthrough
	case "suspected_fraud":
		fallthrough
	case "transaction_does_not_fulfill_aml_requirement":
		fallthrough
	case "pin_data_required":
		fallthrough
	case "unable_to_locate_previous_message":
		fallthrough
	case "previous_message_located_inconsistent_data":
		fallthrough
	case "blocked_first_used":
		fallthrough
	case "transaction_reversed":
		fallthrough
	case "credit_issuer_unavailable":
		fallthrough
	case "pin_cryptographic_error_found":
		fallthrough
	case "negative_online_cam_result":
		fallthrough
	case "violation_of_law":
		fallthrough
	case "force_stip":
		fallthrough
	case "cash_service_not_available":
		fallthrough
	case "cashback_request_exceeds_issuer_limit":
		fallthrough
	case "decline_for_cvv2_failure":
		fallthrough
	case "transaction_amount_exceeds_pre_authorized_amount":
		fallthrough
	case "invalid_biller_information":
		fallthrough
	case "pin_change_unblock_request_declined":
		fallthrough
	case "unsafe_pin":
		fallthrough
	case "card_authentication_failed":
		fallthrough
	case "stop_payment_order":
		fallthrough
	case "revocation_of_authorization":
		fallthrough
	case "revocation_of_all_authorizations":
		fallthrough
	case "forward_to_issuer_xa":
		fallthrough
	case "forward_to_issuer_xd":
		fallthrough
	case "unable_to_go_online":
		fallthrough
	case "additional_customer_authentication_required":
		fallthrough
	case "merchant_id_not_found":
		fallthrough
	case "merchant_account_closed":
		fallthrough
	case "terminal_id_not_found":
		fallthrough
	case "terminal_closed":
		fallthrough
	case "invalid_category_code":
		fallthrough
	case "invalid_currency":
		fallthrough
	case "missing_cvv2_cvc2":
		fallthrough
	case "cvv2_not_allowed":
		fallthrough
	case "merchant_not_registered_vbv":
		fallthrough
	case "merchant_not_registered_for_amex":
		fallthrough
	case "transaction_not_permitted_at_terminal":
		fallthrough
	case "agreement_terminal_not_related":
		fallthrough
	case "invalid_processor_id":
		fallthrough
	case "invalid_merchant_data":
		fallthrough
	case "sub_merchant_account_closed":
		fallthrough
	case "terminal_busy":
		fallthrough
	case "terminal_unreachable":
		fallthrough
	case "service_failed":
		fallthrough
	case "invalid_operation":
		fallthrough
	case "authorization_error":
		fallthrough
	case "login_failed_without_reason":
		fallthrough
	case "invalid_retailer":
		fallthrough
	case "card_does_not_exist":
		fallthrough
	case "card_is_blocked":
		fallthrough
	case "invalid_card_id":
		fallthrough
	case "card_is_transferred":
		fallthrough
	case "card_is_not_active":
		fallthrough
	case "incorrect_purchase_value":
		fallthrough
	case "card_not_available":
		fallthrough
	case "wrong_currency":
		fallthrough
	case "login_failed_unknown_user":
		fallthrough
	case "login_failed_invalid_password":
		fallthrough
	case "invalid_ean_code":
		*e = CancelPaymentCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentCode: %v", v)
	}
}

// CancelPaymentStatusReason - This object offers details about the status of a payment. Currently it is only available for point-of-sale
// payments.
//
// You can find more information about the possible values of this object on
// [this page](status-reasons).**
type CancelPaymentStatusReason struct {
	Code CancelPaymentCode `json:"code"`
	// A description of the status reason, localized according to the payment `locale`.
	Message string `json:"message"`
}

func (o *CancelPaymentStatusReason) GetCode() CancelPaymentCode {
	if o == nil {
		return CancelPaymentCode("")
	}
	return o.Code
}

func (o *CancelPaymentStatusReason) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

// CancelPaymentCardAudition - The card's target audience, if known.
type CancelPaymentCardAudition string

const (
	CancelPaymentCardAuditionConsumer CancelPaymentCardAudition = "consumer"
	CancelPaymentCardAuditionBusiness CancelPaymentCardAudition = "business"
)

func (e CancelPaymentCardAudition) ToPointer() *CancelPaymentCardAudition {
	return &e
}
func (e *CancelPaymentCardAudition) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "business":
		*e = CancelPaymentCardAudition(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentCardAudition: %v", v)
	}
}

// CancelPaymentCardLabel - The card's label, if known.
type CancelPaymentCardLabel string

const (
	CancelPaymentCardLabelAmericanExpress CancelPaymentCardLabel = "American Express"
	CancelPaymentCardLabelCartaSi         CancelPaymentCardLabel = "Carta Si"
	CancelPaymentCardLabelCarteBleue      CancelPaymentCardLabel = "Carte Bleue"
	CancelPaymentCardLabelDankort         CancelPaymentCardLabel = "Dankort"
	CancelPaymentCardLabelDinersClub      CancelPaymentCardLabel = "Diners Club"
	CancelPaymentCardLabelDiscover        CancelPaymentCardLabel = "Discover"
	CancelPaymentCardLabelJcb             CancelPaymentCardLabel = "JCB"
	CancelPaymentCardLabelLaser           CancelPaymentCardLabel = "Laser"
	CancelPaymentCardLabelMaestro         CancelPaymentCardLabel = "Maestro"
	CancelPaymentCardLabelMastercard      CancelPaymentCardLabel = "Mastercard"
	CancelPaymentCardLabelUnionpay        CancelPaymentCardLabel = "Unionpay"
	CancelPaymentCardLabelVisa            CancelPaymentCardLabel = "Visa"
	CancelPaymentCardLabelVpay            CancelPaymentCardLabel = "Vpay"
)

func (e CancelPaymentCardLabel) ToPointer() *CancelPaymentCardLabel {
	return &e
}
func (e *CancelPaymentCardLabel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "American Express":
		fallthrough
	case "Carta Si":
		fallthrough
	case "Carte Bleue":
		fallthrough
	case "Dankort":
		fallthrough
	case "Diners Club":
		fallthrough
	case "Discover":
		fallthrough
	case "JCB":
		fallthrough
	case "Laser":
		fallthrough
	case "Maestro":
		fallthrough
	case "Mastercard":
		fallthrough
	case "Unionpay":
		fallthrough
	case "Visa":
		fallthrough
	case "Vpay":
		*e = CancelPaymentCardLabel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentCardLabel: %v", v)
	}
}

// CancelPaymentCardFunding - The card type.
type CancelPaymentCardFunding string

const (
	CancelPaymentCardFundingDebit         CancelPaymentCardFunding = "debit"
	CancelPaymentCardFundingCredit        CancelPaymentCardFunding = "credit"
	CancelPaymentCardFundingPrepaid       CancelPaymentCardFunding = "prepaid"
	CancelPaymentCardFundingDeferredDebit CancelPaymentCardFunding = "deferred-debit"
)

func (e CancelPaymentCardFunding) ToPointer() *CancelPaymentCardFunding {
	return &e
}
func (e *CancelPaymentCardFunding) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debit":
		fallthrough
	case "credit":
		fallthrough
	case "prepaid":
		fallthrough
	case "deferred-debit":
		*e = CancelPaymentCardFunding(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentCardFunding: %v", v)
	}
}

// CancelPaymentCardSecurity - The level of security applied during card processing.
type CancelPaymentCardSecurity string

const (
	CancelPaymentCardSecurityNormal       CancelPaymentCardSecurity = "normal"
	CancelPaymentCardSecurityThreedsecure CancelPaymentCardSecurity = "3dsecure"
)

func (e CancelPaymentCardSecurity) ToPointer() *CancelPaymentCardSecurity {
	return &e
}
func (e *CancelPaymentCardSecurity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "normal":
		fallthrough
	case "3dsecure":
		*e = CancelPaymentCardSecurity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentCardSecurity: %v", v)
	}
}

// CancelPaymentFeeRegion - The applicable card fee region.
type CancelPaymentFeeRegion string

const (
	CancelPaymentFeeRegionAmericanExpress  CancelPaymentFeeRegion = "american-express"
	CancelPaymentFeeRegionAmexIntraEea     CancelPaymentFeeRegion = "amex-intra-eea"
	CancelPaymentFeeRegionCarteBancaire    CancelPaymentFeeRegion = "carte-bancaire"
	CancelPaymentFeeRegionIntraEu          CancelPaymentFeeRegion = "intra-eu"
	CancelPaymentFeeRegionIntraEuCorporate CancelPaymentFeeRegion = "intra-eu-corporate"
	CancelPaymentFeeRegionDomestic         CancelPaymentFeeRegion = "domestic"
	CancelPaymentFeeRegionMaestro          CancelPaymentFeeRegion = "maestro"
	CancelPaymentFeeRegionOther            CancelPaymentFeeRegion = "other"
	CancelPaymentFeeRegionInter            CancelPaymentFeeRegion = "inter"
	CancelPaymentFeeRegionIntraEea         CancelPaymentFeeRegion = "intra_eea"
)

func (e CancelPaymentFeeRegion) ToPointer() *CancelPaymentFeeRegion {
	return &e
}
func (e *CancelPaymentFeeRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "american-express":
		fallthrough
	case "amex-intra-eea":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "intra-eu":
		fallthrough
	case "intra-eu-corporate":
		fallthrough
	case "domestic":
		fallthrough
	case "maestro":
		fallthrough
	case "other":
		fallthrough
	case "inter":
		fallthrough
	case "intra_eea":
		*e = CancelPaymentFeeRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentFeeRegion: %v", v)
	}
}

// CancelPaymentFailureReason - A failure code to help understand why the payment failed.
type CancelPaymentFailureReason string

const (
	CancelPaymentFailureReasonAuthenticationAbandoned      CancelPaymentFailureReason = "authentication_abandoned"
	CancelPaymentFailureReasonAuthenticationFailed         CancelPaymentFailureReason = "authentication_failed"
	CancelPaymentFailureReasonAuthenticationRequired       CancelPaymentFailureReason = "authentication_required"
	CancelPaymentFailureReasonAuthenticationUnavailableAcs CancelPaymentFailureReason = "authentication_unavailable_acs"
	CancelPaymentFailureReasonCardDeclined                 CancelPaymentFailureReason = "card_declined"
	CancelPaymentFailureReasonCardExpired                  CancelPaymentFailureReason = "card_expired"
	CancelPaymentFailureReasonInactiveCard                 CancelPaymentFailureReason = "inactive_card"
	CancelPaymentFailureReasonInsufficientFunds            CancelPaymentFailureReason = "insufficient_funds"
	CancelPaymentFailureReasonInvalidCvv                   CancelPaymentFailureReason = "invalid_cvv"
	CancelPaymentFailureReasonInvalidCardHolderName        CancelPaymentFailureReason = "invalid_card_holder_name"
	CancelPaymentFailureReasonInvalidCardNumber            CancelPaymentFailureReason = "invalid_card_number"
	CancelPaymentFailureReasonInvalidCardType              CancelPaymentFailureReason = "invalid_card_type"
	CancelPaymentFailureReasonPossibleFraud                CancelPaymentFailureReason = "possible_fraud"
	CancelPaymentFailureReasonRefusedByIssuer              CancelPaymentFailureReason = "refused_by_issuer"
	CancelPaymentFailureReasonUnknownReason                CancelPaymentFailureReason = "unknown_reason"
)

func (e CancelPaymentFailureReason) ToPointer() *CancelPaymentFailureReason {
	return &e
}
func (e *CancelPaymentFailureReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "authentication_abandoned":
		fallthrough
	case "authentication_failed":
		fallthrough
	case "authentication_required":
		fallthrough
	case "authentication_unavailable_acs":
		fallthrough
	case "card_declined":
		fallthrough
	case "card_expired":
		fallthrough
	case "inactive_card":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "invalid_cvv":
		fallthrough
	case "invalid_card_holder_name":
		fallthrough
	case "invalid_card_number":
		fallthrough
	case "invalid_card_type":
		fallthrough
	case "possible_fraud":
		fallthrough
	case "refused_by_issuer":
		fallthrough
	case "unknown_reason":
		*e = CancelPaymentFailureReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentFailureReason: %v", v)
	}
}

// CancelPaymentWallet - The wallet used when creating the payment.
type CancelPaymentWallet string

const (
	CancelPaymentWalletApplepay CancelPaymentWallet = "applepay"
)

func (e CancelPaymentWallet) ToPointer() *CancelPaymentWallet {
	return &e
}
func (e *CancelPaymentWallet) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "applepay":
		*e = CancelPaymentWallet(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentWallet: %v", v)
	}
}

// CancelPaymentSellerProtection - Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
// payments, and if the information is made available by PayPal.
type CancelPaymentSellerProtection string

const (
	CancelPaymentSellerProtectionEligible                          CancelPaymentSellerProtection = "Eligible"
	CancelPaymentSellerProtectionIneligible                        CancelPaymentSellerProtection = "Ineligible"
	CancelPaymentSellerProtectionPartiallyEligibleInrOnly          CancelPaymentSellerProtection = "Partially Eligible - INR Only"
	CancelPaymentSellerProtectionPartiallyEligibleUnauthOnly       CancelPaymentSellerProtection = "Partially Eligible - Unauth Only"
	CancelPaymentSellerProtectionPartiallyEligible                 CancelPaymentSellerProtection = "Partially Eligible"
	CancelPaymentSellerProtectionNone                              CancelPaymentSellerProtection = "None"
	CancelPaymentSellerProtectionActive                            CancelPaymentSellerProtection = "Active"
	CancelPaymentSellerProtectionFraudControlUnauthPremiumEligible CancelPaymentSellerProtection = "Fraud Control - Unauth Premium Eligible"
)

func (e CancelPaymentSellerProtection) ToPointer() *CancelPaymentSellerProtection {
	return &e
}
func (e *CancelPaymentSellerProtection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Eligible":
		fallthrough
	case "Ineligible":
		fallthrough
	case "Partially Eligible - INR Only":
		fallthrough
	case "Partially Eligible - Unauth Only":
		fallthrough
	case "Partially Eligible":
		fallthrough
	case "None":
		fallthrough
	case "Active":
		fallthrough
	case "Fraud Control - Unauth Premium Eligible":
		*e = CancelPaymentSellerProtection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentSellerProtection: %v", v)
	}
}

// CancelPaymentPaypalFee - An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
// PayPal will not charge a fee for this transaction.
type CancelPaymentPaypalFee struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CancelPaymentPaypalFee) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CancelPaymentPaypalFee) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CancelPaymentCardReadMethod - The method by which the card was read by the terminal.
type CancelPaymentCardReadMethod string

const (
	CancelPaymentCardReadMethodChip                   CancelPaymentCardReadMethod = "chip"
	CancelPaymentCardReadMethodMagneticStripe         CancelPaymentCardReadMethod = "magnetic-stripe"
	CancelPaymentCardReadMethodNearFieldCommunication CancelPaymentCardReadMethod = "near-field-communication"
	CancelPaymentCardReadMethodContactless            CancelPaymentCardReadMethod = "contactless"
	CancelPaymentCardReadMethodMoto                   CancelPaymentCardReadMethod = "moto"
)

func (e CancelPaymentCardReadMethod) ToPointer() *CancelPaymentCardReadMethod {
	return &e
}
func (e *CancelPaymentCardReadMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "chip":
		fallthrough
	case "magnetic-stripe":
		fallthrough
	case "near-field-communication":
		fallthrough
	case "contactless":
		fallthrough
	case "moto":
		*e = CancelPaymentCardReadMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentCardReadMethod: %v", v)
	}
}

// CancelPaymentCardVerificationMethod - The method used to verify the cardholder's identity.
type CancelPaymentCardVerificationMethod string

const (
	CancelPaymentCardVerificationMethodNoCvmRequired         CancelPaymentCardVerificationMethod = "no-cvm-required"
	CancelPaymentCardVerificationMethodOnlinePin             CancelPaymentCardVerificationMethod = "online-pin"
	CancelPaymentCardVerificationMethodOfflinePin            CancelPaymentCardVerificationMethod = "offline-pin"
	CancelPaymentCardVerificationMethodConsumerDevice        CancelPaymentCardVerificationMethod = "consumer-device"
	CancelPaymentCardVerificationMethodSignature             CancelPaymentCardVerificationMethod = "signature"
	CancelPaymentCardVerificationMethodSignatureAndOnlinePin CancelPaymentCardVerificationMethod = "signature-and-online-pin"
	CancelPaymentCardVerificationMethodOnlinePinAndSignature CancelPaymentCardVerificationMethod = "online-pin-and-signature"
	CancelPaymentCardVerificationMethodNone                  CancelPaymentCardVerificationMethod = "none"
	CancelPaymentCardVerificationMethodFailed                CancelPaymentCardVerificationMethod = "failed"
)

func (e CancelPaymentCardVerificationMethod) ToPointer() *CancelPaymentCardVerificationMethod {
	return &e
}
func (e *CancelPaymentCardVerificationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "no-cvm-required":
		fallthrough
	case "online-pin":
		fallthrough
	case "offline-pin":
		fallthrough
	case "consumer-device":
		fallthrough
	case "signature":
		fallthrough
	case "signature-and-online-pin":
		fallthrough
	case "online-pin-and-signature":
		fallthrough
	case "none":
		fallthrough
	case "failed":
		*e = CancelPaymentCardVerificationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelPaymentCardVerificationMethod: %v", v)
	}
}

// CancelPaymentReceipt - The Point of sale receipt object.
type CancelPaymentReceipt struct {
	// A unique code provided by the cardholder’s bank to confirm that the transaction was successfully approved.
	AuthorizationCode *string `json:"authorizationCode,omitempty"`
	// The unique number that identifies a specific payment application on a chip card.
	ApplicationIdentifier *string `json:"applicationIdentifier,omitempty"`
	// The method by which the card was read by the terminal.
	CardReadMethod *CancelPaymentCardReadMethod `json:"cardReadMethod,omitempty"`
	// The method used to verify the cardholder's identity.
	CardVerificationMethod *CancelPaymentCardVerificationMethod `json:"cardVerificationMethod,omitempty"`
}

func (o *CancelPaymentReceipt) GetAuthorizationCode() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizationCode
}

func (o *CancelPaymentReceipt) GetApplicationIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationIdentifier
}

func (o *CancelPaymentReceipt) GetCardReadMethod() *CancelPaymentCardReadMethod {
	if o == nil {
		return nil
	}
	return o.CardReadMethod
}

func (o *CancelPaymentReceipt) GetCardVerificationMethod() *CancelPaymentCardVerificationMethod {
	if o == nil {
		return nil
	}
	return o.CardVerificationMethod
}

// CancelPaymentQrCode - Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
// the QR code details will be available in this object.
//
// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
// Bancontact QR payments can be completed by the customer using the Bancontact app.
type CancelPaymentQrCode struct {
	// The height of the QR code image in pixels.
	Height *int64 `json:"height,omitempty"`
	// The width of the QR code image in pixels.
	Width *int64 `json:"width,omitempty"`
	// The URL to the QR code image. The image is a PNG file, and can be displayed directly in the browser or
	// downloaded.
	Src *string `json:"src,omitempty"`
}

func (o *CancelPaymentQrCode) GetHeight() *int64 {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *CancelPaymentQrCode) GetWidth() *int64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *CancelPaymentQrCode) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

// CancelPaymentRemainderAmount - An amount object for the amount that remained after all gift cards or vouchers were applied.
type CancelPaymentRemainderAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CancelPaymentRemainderAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CancelPaymentRemainderAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CancelPaymentDetails - An object containing payment details collected during the payment process. For example, details may include the
// customer's card or bank details and a payment reference. For the full list of details, please refer to the
// [method-specific parameters](extra-payment-parameters) guide.
type CancelPaymentDetails struct {
	// The customer's name, if made available by the payment method. For card payments, refer to details.cardHolder.
	ConsumerName *string `json:"consumerName,omitempty"`
	// The customer's account reference.
	//
	// For banking-based payment methods — such as iDEAL — this is normally either an IBAN or a domestic bank account
	// number.
	//
	// For PayPal, the account reference is an email address.
	//
	// For card and Bancontact payments, refer to details.cardNumber.
	ConsumerAccount *string `json:"consumerAccount,omitempty"`
	// The BIC of the customer's bank account, if applicable.
	ConsumerBic *string `json:"consumerBic,omitempty"`
	// For wallet payment methods — such as Apple Pay and PayPal — the shipping address is often already known by the
	// wallet provider. In these cases the shipping address may be available as a payment detail.
	ShippingAddress map[string]any `json:"shippingAddress,omitempty"`
	// For bancontact, it will be the customer's masked card number. For cards, it will be the last 4-digit of the
	// PAN. For Point-of-sale, it will be the the last 4 digits of the customer's masked card number.
	CardNumber *string `json:"cardNumber,omitempty"`
	// The name of the bank that the customer will need to make the bank transfer payment towards.
	BankName *string `json:"bankName,omitempty"`
	// The bank account number the customer will need to make the bank transfer payment towards.
	BankAccount *string `json:"bankAccount,omitempty"`
	// The BIC of the bank the customer will need to make the bank transfer payment towards.
	BankBic *string `json:"bankBic,omitempty"`
	// The Mollie-generated reference the customer needs to use when transfering the amount. Do not apply any
	// formatting here; show it to the customer as-is.
	TransferReference *string `json:"transferReference,omitempty"`
	// A unique fingerprint for a specific card. Can be used to identify returning customers.
	//
	// In the case of Point-of-sale payments, it's a unique identifier assigned to a cardholder's payment account,
	// linking multiple transactions from wallets and physical card to a single account, also across payment methods
	// or when the card is reissued.
	CardFingerprint *string `json:"cardFingerprint,omitempty"`
	// The customer's name as shown on their card.
	CardHolder *string `json:"cardHolder,omitempty"`
	// The card's target audience, if known.
	CardAudition *CancelPaymentCardAudition `json:"cardAudition,omitempty"`
	// The card's label, if known.
	CardLabel *CancelPaymentCardLabel `json:"cardLabel,omitempty"`
	// The ISO 3166-1 alpha-2 country code of the country the card was issued in.
	CardCountryCode *string `json:"cardCountryCode,omitempty"`
	// The expiry date (MM/YY) of the card as displayed on the card.
	CardExpiryDate *string `json:"cardExpiryDate,omitempty"`
	// The card type.
	CardFunding *CancelPaymentCardFunding `json:"cardFunding,omitempty"`
	// The level of security applied during card processing.
	CardSecurity *CancelPaymentCardSecurity `json:"cardSecurity,omitempty"`
	// The applicable card fee region.
	FeeRegion *CancelPaymentFeeRegion `json:"feeRegion,omitempty"`
	// The first 6 and last 4 digits of the card number.
	CardMaskedNumber *string `json:"cardMaskedNumber,omitempty"`
	// The outcome of authentication attempted on transactions enforced by 3DS (ie valid only for oneoff and first).
	Card3dsEci *string `json:"card3dsEci,omitempty"`
	// The first 6 digit of the card bank identification number.
	CardBin *string `json:"cardBin,omitempty"`
	// The issuer of the Card.
	CardIssuer *string `json:"cardIssuer,omitempty"`
	// A failure code to help understand why the payment failed.
	FailureReason *CancelPaymentFailureReason `json:"failureReason,omitempty"`
	// A human-friendly failure message that can be shown to the customer. The message is translated in accordance
	// with the payment's locale setting.
	FailureMessage *string `json:"failureMessage,omitempty"`
	// The wallet used when creating the payment.
	Wallet *CancelPaymentWallet `json:"wallet,omitempty"`
	// PayPal's reference for the payment.
	PaypalReference *string `json:"paypalReference,omitempty"`
	// ID of the customer's PayPal account.
	PaypalPayerID *string `json:"paypalPayerId,omitempty"`
	// Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
	// payments, and if the information is made available by PayPal.
	SellerProtection *CancelPaymentSellerProtection `json:"sellerProtection,omitempty"`
	// An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
	// PayPal will not charge a fee for this transaction.
	PaypalFee *CancelPaymentPaypalFee `json:"paypalFee,omitempty"`
	// The paysafecard customer reference either provided via the API or otherwise auto-generated by Mollie.
	CustomerReference *string `json:"customerReference,omitempty"`
	// The ID of the terminal device where the payment took place on.
	TerminalID *string `json:"terminalId,omitempty"`
	// The first 6 digits & last 4 digits of the customer's masked card number.
	MaskedNumber *string `json:"maskedNumber,omitempty"`
	// The Point of sale receipt object.
	Receipt *CancelPaymentReceipt `json:"receipt,omitempty"`
	// The creditor identifier indicates who is authorized to execute the payment. In this case, it is a
	// reference to Mollie.
	CreditorIdentifier *string `json:"creditorIdentifier,omitempty"`
	// Estimated date the payment is debited from the customer's bank account, in YYYY-MM-DD format.
	DueDate *types.Date `json:"dueDate,omitempty"`
	// Date the payment has been signed by the customer, in YYYY-MM-DD format. Only available if the payment
	// has been signed.
	SignatureDate *types.Date `json:"signatureDate,omitempty"`
	// The official reason why this payment has failed. A detailed description of each reason is available on the
	// website of the European Payments Council.
	BankReasonCode *string `json:"bankReasonCode,omitempty"`
	// A human-friendly description of the failure reason.
	BankReason *string `json:"bankReason,omitempty"`
	// The end-to-end identifier you provided in the batch file.
	EndToEndIdentifier *string `json:"endToEndIdentifier,omitempty"`
	// The mandate reference you provided in the batch file.
	MandateReference *string `json:"mandateReference,omitempty"`
	// The batch reference you provided in the batch file.
	BatchReference *string `json:"batchReference,omitempty"`
	// The file reference you provided in the batch file.
	FileReference *string `json:"fileReference,omitempty"`
	// Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
	// the QR code details will be available in this object.
	//
	// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
	// Bancontact QR payments can be completed by the customer using the Bancontact app.
	QrCode *CancelPaymentQrCode `json:"qrCode,omitempty"`
	// For payments with gift cards: the masked gift card number of the first gift card applied to the payment.
	VoucherNumber *string `json:"voucherNumber,omitempty"`
	// An array of detail objects for each gift card that was used on this payment, if any.
	Giftcards []map[string]any `json:"giftcards,omitempty"`
	// For payments with vouchers: the brand name of the first voucher applied.
	Issuer *string `json:"issuer,omitempty"`
	// An array of detail objects for each voucher that was used on this payment, if any.
	Vouchers []map[string]any `json:"vouchers,omitempty"`
	// An amount object for the amount that remained after all gift cards or vouchers were applied.
	RemainderAmount *CancelPaymentRemainderAmount `json:"remainderAmount,omitempty"`
	// The payment method used to pay the remainder amount, after all gift cards or vouchers were applied.
	RemainderMethod *string `json:"remainderMethod,omitempty"`
	// Optional include. The full payment method details of the remainder payment.
	RemainderDetails map[string]any `json:"remainderDetails,omitempty"`
}

func (c CancelPaymentDetails) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CancelPaymentDetails) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CancelPaymentDetails) GetConsumerName() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerName
}

func (o *CancelPaymentDetails) GetConsumerAccount() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerAccount
}

func (o *CancelPaymentDetails) GetConsumerBic() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerBic
}

func (o *CancelPaymentDetails) GetShippingAddress() map[string]any {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *CancelPaymentDetails) GetCardNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardNumber
}

func (o *CancelPaymentDetails) GetBankName() *string {
	if o == nil {
		return nil
	}
	return o.BankName
}

func (o *CancelPaymentDetails) GetBankAccount() *string {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *CancelPaymentDetails) GetBankBic() *string {
	if o == nil {
		return nil
	}
	return o.BankBic
}

func (o *CancelPaymentDetails) GetTransferReference() *string {
	if o == nil {
		return nil
	}
	return o.TransferReference
}

func (o *CancelPaymentDetails) GetCardFingerprint() *string {
	if o == nil {
		return nil
	}
	return o.CardFingerprint
}

func (o *CancelPaymentDetails) GetCardHolder() *string {
	if o == nil {
		return nil
	}
	return o.CardHolder
}

func (o *CancelPaymentDetails) GetCardAudition() *CancelPaymentCardAudition {
	if o == nil {
		return nil
	}
	return o.CardAudition
}

func (o *CancelPaymentDetails) GetCardLabel() *CancelPaymentCardLabel {
	if o == nil {
		return nil
	}
	return o.CardLabel
}

func (o *CancelPaymentDetails) GetCardCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CardCountryCode
}

func (o *CancelPaymentDetails) GetCardExpiryDate() *string {
	if o == nil {
		return nil
	}
	return o.CardExpiryDate
}

func (o *CancelPaymentDetails) GetCardFunding() *CancelPaymentCardFunding {
	if o == nil {
		return nil
	}
	return o.CardFunding
}

func (o *CancelPaymentDetails) GetCardSecurity() *CancelPaymentCardSecurity {
	if o == nil {
		return nil
	}
	return o.CardSecurity
}

func (o *CancelPaymentDetails) GetFeeRegion() *CancelPaymentFeeRegion {
	if o == nil {
		return nil
	}
	return o.FeeRegion
}

func (o *CancelPaymentDetails) GetCardMaskedNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardMaskedNumber
}

func (o *CancelPaymentDetails) GetCard3dsEci() *string {
	if o == nil {
		return nil
	}
	return o.Card3dsEci
}

func (o *CancelPaymentDetails) GetCardBin() *string {
	if o == nil {
		return nil
	}
	return o.CardBin
}

func (o *CancelPaymentDetails) GetCardIssuer() *string {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *CancelPaymentDetails) GetFailureReason() *CancelPaymentFailureReason {
	if o == nil {
		return nil
	}
	return o.FailureReason
}

func (o *CancelPaymentDetails) GetFailureMessage() *string {
	if o == nil {
		return nil
	}
	return o.FailureMessage
}

func (o *CancelPaymentDetails) GetWallet() *CancelPaymentWallet {
	if o == nil {
		return nil
	}
	return o.Wallet
}

func (o *CancelPaymentDetails) GetPaypalReference() *string {
	if o == nil {
		return nil
	}
	return o.PaypalReference
}

func (o *CancelPaymentDetails) GetPaypalPayerID() *string {
	if o == nil {
		return nil
	}
	return o.PaypalPayerID
}

func (o *CancelPaymentDetails) GetSellerProtection() *CancelPaymentSellerProtection {
	if o == nil {
		return nil
	}
	return o.SellerProtection
}

func (o *CancelPaymentDetails) GetPaypalFee() *CancelPaymentPaypalFee {
	if o == nil {
		return nil
	}
	return o.PaypalFee
}

func (o *CancelPaymentDetails) GetCustomerReference() *string {
	if o == nil {
		return nil
	}
	return o.CustomerReference
}

func (o *CancelPaymentDetails) GetTerminalID() *string {
	if o == nil {
		return nil
	}
	return o.TerminalID
}

func (o *CancelPaymentDetails) GetMaskedNumber() *string {
	if o == nil {
		return nil
	}
	return o.MaskedNumber
}

func (o *CancelPaymentDetails) GetReceipt() *CancelPaymentReceipt {
	if o == nil {
		return nil
	}
	return o.Receipt
}

func (o *CancelPaymentDetails) GetCreditorIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.CreditorIdentifier
}

func (o *CancelPaymentDetails) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *CancelPaymentDetails) GetSignatureDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.SignatureDate
}

func (o *CancelPaymentDetails) GetBankReasonCode() *string {
	if o == nil {
		return nil
	}
	return o.BankReasonCode
}

func (o *CancelPaymentDetails) GetBankReason() *string {
	if o == nil {
		return nil
	}
	return o.BankReason
}

func (o *CancelPaymentDetails) GetEndToEndIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.EndToEndIdentifier
}

func (o *CancelPaymentDetails) GetMandateReference() *string {
	if o == nil {
		return nil
	}
	return o.MandateReference
}

func (o *CancelPaymentDetails) GetBatchReference() *string {
	if o == nil {
		return nil
	}
	return o.BatchReference
}

func (o *CancelPaymentDetails) GetFileReference() *string {
	if o == nil {
		return nil
	}
	return o.FileReference
}

func (o *CancelPaymentDetails) GetQrCode() *CancelPaymentQrCode {
	if o == nil {
		return nil
	}
	return o.QrCode
}

func (o *CancelPaymentDetails) GetVoucherNumber() *string {
	if o == nil {
		return nil
	}
	return o.VoucherNumber
}

func (o *CancelPaymentDetails) GetGiftcards() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Giftcards
}

func (o *CancelPaymentDetails) GetIssuer() *string {
	if o == nil {
		return nil
	}
	return o.Issuer
}

func (o *CancelPaymentDetails) GetVouchers() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Vouchers
}

func (o *CancelPaymentDetails) GetRemainderAmount() *CancelPaymentRemainderAmount {
	if o == nil {
		return nil
	}
	return o.RemainderAmount
}

func (o *CancelPaymentDetails) GetRemainderMethod() *string {
	if o == nil {
		return nil
	}
	return o.RemainderMethod
}

func (o *CancelPaymentDetails) GetRemainderDetails() map[string]any {
	if o == nil {
		return nil
	}
	return o.RemainderDetails
}

// CancelPaymentSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CancelPaymentSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentCheckout - The URL your customer should visit to make the payment. This is where you should redirect the customer to.
type CancelPaymentCheckout struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentCheckout) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentCheckout) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentMobileAppCheckout - The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
type CancelPaymentMobileAppCheckout struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentMobileAppCheckout) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentMobileAppCheckout) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentChangePaymentState - For test mode payments in certain scenarios, a hosted interface is available to help you test different
// payment states.
//
// Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
// payments are executed without any user interaction.
//
// Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
// chargeback for the test payment.
type CancelPaymentChangePaymentState struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentChangePaymentState) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentChangePaymentState) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentDashboard - Direct link to the payment in the Mollie Dashboard.
type CancelPaymentDashboard struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentDashboard) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentDashboard) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentRefunds - The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
type CancelPaymentRefunds struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentRefunds) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentRefunds) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentChargebacks - The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
// payment.
type CancelPaymentChargebacks struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentChargebacks) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentChargebacks) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentCaptures - The API resource URL of the [captures](list-payment-captures) that belong to this payment.
type CancelPaymentCaptures struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentCaptures) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentCaptures) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentSettlement - The API resource URL of the [settlement](get-settlement) this payment has been settled with.
// Not present if not yet settled.
type CancelPaymentSettlement struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentSettlement) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentSettlement) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentCustomer - The API resource URL of the [customer](get-customer).
type CancelPaymentCustomer struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentCustomer) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentCustomer) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentMandate - The API resource URL of the [mandate](get-mandate).
type CancelPaymentMandate struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentMandate) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentMandate) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentSubscription - The API resource URL of the [subscription](get-subscription).
type CancelPaymentSubscription struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentSubscription) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentSubscription) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentOrder - The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
// order.
type CancelPaymentOrder struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentOrder) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentOrder) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentTerminal - The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
// point-of-sale payments.
type CancelPaymentTerminal struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentTerminal) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentTerminal) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CancelPaymentDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentLinksStatus - Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
// successful).
type CancelPaymentLinksStatus struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentLinksStatus) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentLinksStatus) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentPayOnline - Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
// bank transfer.
type CancelPaymentPayOnline struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelPaymentPayOnline) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelPaymentPayOnline) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelPaymentLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type CancelPaymentLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self CancelPaymentSelf `json:"self"`
	// The URL your customer should visit to make the payment. This is where you should redirect the customer to.
	Checkout *CancelPaymentCheckout `json:"checkout,omitempty"`
	// The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
	MobileAppCheckout *CancelPaymentMobileAppCheckout `json:"mobileAppCheckout,omitempty"`
	// For test mode payments in certain scenarios, a hosted interface is available to help you test different
	// payment states.
	//
	// Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
	// payments are executed without any user interaction.
	//
	// Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
	// chargeback for the test payment.
	ChangePaymentState *CancelPaymentChangePaymentState `json:"changePaymentState,omitempty"`
	// Direct link to the payment in the Mollie Dashboard.
	Dashboard CancelPaymentDashboard `json:"dashboard"`
	// The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
	Refunds *CancelPaymentRefunds `json:"refunds,omitempty"`
	// The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
	// payment.
	Chargebacks *CancelPaymentChargebacks `json:"chargebacks,omitempty"`
	// The API resource URL of the [captures](list-payment-captures) that belong to this payment.
	Captures *CancelPaymentCaptures `json:"captures,omitempty"`
	// The API resource URL of the [settlement](get-settlement) this payment has been settled with.
	// Not present if not yet settled.
	Settlement *CancelPaymentSettlement `json:"settlement,omitempty"`
	// The API resource URL of the [customer](get-customer).
	Customer *CancelPaymentCustomer `json:"customer,omitempty"`
	// The API resource URL of the [mandate](get-mandate).
	Mandate *CancelPaymentMandate `json:"mandate,omitempty"`
	// The API resource URL of the [subscription](get-subscription).
	Subscription *CancelPaymentSubscription `json:"subscription,omitempty"`
	// The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
	// order.
	Order *CancelPaymentOrder `json:"order,omitempty"`
	// The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
	// point-of-sale payments.
	Terminal *CancelPaymentTerminal `json:"terminal,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *CancelPaymentDocumentation `json:"documentation,omitempty"`
	// Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
	// successful).
	Status *CancelPaymentLinksStatus `json:"status,omitempty"`
	// Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
	// bank transfer.
	PayOnline *CancelPaymentPayOnline `json:"payOnline,omitempty"`
}

func (o *CancelPaymentLinks) GetSelf() CancelPaymentSelf {
	if o == nil {
		return CancelPaymentSelf{}
	}
	return o.Self
}

func (o *CancelPaymentLinks) GetCheckout() *CancelPaymentCheckout {
	if o == nil {
		return nil
	}
	return o.Checkout
}

func (o *CancelPaymentLinks) GetMobileAppCheckout() *CancelPaymentMobileAppCheckout {
	if o == nil {
		return nil
	}
	return o.MobileAppCheckout
}

func (o *CancelPaymentLinks) GetChangePaymentState() *CancelPaymentChangePaymentState {
	if o == nil {
		return nil
	}
	return o.ChangePaymentState
}

func (o *CancelPaymentLinks) GetDashboard() CancelPaymentDashboard {
	if o == nil {
		return CancelPaymentDashboard{}
	}
	return o.Dashboard
}

func (o *CancelPaymentLinks) GetRefunds() *CancelPaymentRefunds {
	if o == nil {
		return nil
	}
	return o.Refunds
}

func (o *CancelPaymentLinks) GetChargebacks() *CancelPaymentChargebacks {
	if o == nil {
		return nil
	}
	return o.Chargebacks
}

func (o *CancelPaymentLinks) GetCaptures() *CancelPaymentCaptures {
	if o == nil {
		return nil
	}
	return o.Captures
}

func (o *CancelPaymentLinks) GetSettlement() *CancelPaymentSettlement {
	if o == nil {
		return nil
	}
	return o.Settlement
}

func (o *CancelPaymentLinks) GetCustomer() *CancelPaymentCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *CancelPaymentLinks) GetMandate() *CancelPaymentMandate {
	if o == nil {
		return nil
	}
	return o.Mandate
}

func (o *CancelPaymentLinks) GetSubscription() *CancelPaymentSubscription {
	if o == nil {
		return nil
	}
	return o.Subscription
}

func (o *CancelPaymentLinks) GetOrder() *CancelPaymentOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *CancelPaymentLinks) GetTerminal() *CancelPaymentTerminal {
	if o == nil {
		return nil
	}
	return o.Terminal
}

func (o *CancelPaymentLinks) GetDocumentation() *CancelPaymentDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

func (o *CancelPaymentLinks) GetStatus() *CancelPaymentLinksStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CancelPaymentLinks) GetPayOnline() *CancelPaymentPayOnline {
	if o == nil {
		return nil
	}
	return o.PayOnline
}

// CancelPaymentResponseBody - The canceled payment object.
type CancelPaymentResponseBody struct {
	// Indicates the response contains a payment object. Will always contain the string `payment` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this payment. Mollie assigns this identifier at payment creation time. Mollie
	// will always refer to the payment by this ID. Example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode CancelPaymentMode `json:"mode"`
	// The description of the payment. This will be shown to your customer on their card or bank statement when possible.
	// We truncate the description automatically according to the limits of the used payment method. The description is
	// also visible in any exports you generate.
	//
	// We recommend you use a unique identifier so that you can always link the payment to the order in your back office.
	// This is particularly useful for bookkeeping.
	//
	// The maximum length of the description field differs per payment method, with the absolute maximum being 255
	// characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
	Description string `json:"description"`
	// The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
	//
	// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
	// retrieved using the Get method endpoint.
	//
	// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
	// tip amount.
	Amount CancelPaymentAmount `json:"amount"`
	// The total amount that is already refunded. Only available when refunds are available for this payment. For some
	// payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
	// costs for a return shipment to the customer.
	AmountRefunded *CancelPaymentAmountRefunded `json:"amountRefunded,omitempty"`
	// The remaining amount that can be refunded. Only available when refunds are available for this payment.
	AmountRemaining *CancelPaymentAmountRemaining `json:"amountRemaining,omitempty"`
	// The total amount that is already captured for this payment. Only available when this payment supports captures.
	AmountCaptured *CancelPaymentAmountCaptured `json:"amountCaptured,omitempty"`
	// The total amount that was charged back for this payment. Only available when the total charged back amount is not
	// zero.
	AmountChargedBack *CancelPaymentAmountChargedBack `json:"amountChargedBack,omitempty"`
	// This optional field will contain the approximate amount that will be settled to your account, converted to the
	// currency your account is settled in.
	//
	// Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
	// settled by Mollie the `settlementAmount` is omitted from the response.
	//
	// Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
	// using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
	SettlementAmount *CancelPaymentSettlementAmount `json:"settlementAmount,omitempty"`
	// The URL your customer will be redirected to after the payment process.
	//
	// It could make sense for the redirectUrl to contain a unique identifier – like your order ID – so you can show the
	// right page referencing the order when your customer returns.
	//
	// The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for
	// Apple Pay payments with an `applePayPaymentToken`.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not
	// provided, the customer will be redirected to the `redirectUrl` instead — see above.
	//
	// Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is
	// therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle
	// payment cancellations.
	CancelURL *string `json:"cancelUrl,omitempty"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines []CancelPaymentLine `json:"lines,omitempty"`
	// The customer's billing address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	//
	// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
	BillingAddress *CancelPaymentBillingAddress `json:"billingAddress,omitempty"`
	// The customer's shipping address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	ShippingAddress *CancelPaymentShippingAddress `json:"shippingAddress,omitempty"`
	// Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
	// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
	// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
	// locale, but our hosted payment pages currently only support the specified languages.
	//
	// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
	// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
	// customer use a local bank account greatly increases the conversion and speed of payment.
	Locale *CancelPaymentLocale `json:"locale,omitempty"`
	// This optional field contains your customer's ISO 3166-1 alpha-2 country code, detected by us during checkout. This
	// field is omitted if the country code was not detected.
	CountryCode *string `json:"countryCode,omitempty"`
	// The payment method used for this transaction. If a specific method was selected during payment initialization,
	// this field reflects that choice.
	Method *CancelPaymentMethod `json:"method,omitempty"`
	// For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT
	// rates you have used for the order to ensure your customer's country matches the VAT country.
	//
	// Use this parameter to restrict the payment methods available to your customer to those from a single country.
	//
	// If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
	//
	// The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
	RestrictPaymentMethodsToCountry *string `json:"restrictPaymentMethodsToCountry,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *CancelPaymentMetadata `json:"metadata,omitempty"`
	// Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
	// and capture at a later time.
	//
	// This field needs to be set to `manual` for method `riverty`.
	CaptureMode *CancelPaymentCaptureMode `json:"captureMode,omitempty"`
	// **Only relevant if you wish to manage authorization and capturing separately.**
	//
	// Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a
	// later point either be 'captured' or canceled.
	//
	// By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a
	// capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For
	// example `8 hours` or `2 days`.
	//
	// To schedule an automatic capture, the `captureMode` must be set to `automatic`.
	//
	// The maximum delay is 7 days (168 hours).
	//
	// Possible values: `... hours` `... days`
	CaptureDelay *string `json:"captureDelay,omitempty"`
	// Indicates the date before which the payment needs to be captured, in ISO 8601 format. From this date onwards we
	// can no longer guarantee a successful capture. The parameter is omitted if the payment is not authorized (yet).
	CaptureBefore *string `json:"captureBefore,omitempty"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	//
	// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
	// `routing` parameter.
	ApplicationFee *CancelPaymentApplicationFee `json:"applicationFee,omitempty"`
	// *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
	//
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you create payments on your own account that you want to split between yourself and one or more connected
	// merchants, you can use this `routing` parameter to route the payment accordingly.
	//
	// The `routing` parameter should contain an array of objects, with each object describing the destination for a
	// specific portion of the payment.
	//
	// It is not necessary to indicate in the array which portion goes to yourself. After all portions of the total
	// payment amount have been routed, the amount left will be routed to the current organization automatically.
	//
	// If instead you use OAuth to create payments on a connected merchant's account, refer to the `applicationFee`
	// parameter.
	Routing []CancelPaymentRouting `json:"routing,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// Indicate which part of a recurring sequence this payment is for.
	//
	// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
	// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
	// on their account in the future.
	//
	// If set to `recurring`, the customer's card is charged automatically.
	//
	// Defaults to `oneoff`, which is a regular non-recurring payment.
	//
	// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
	// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
	// are set up correctly for recurring payments.
	SequenceType *CancelPaymentSequenceType `json:"sequenceType"`
	// If the payment was automatically created via a subscription, the ID of the [subscription](get-subscription) will
	// be added to the response.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// When creating recurring payments, the ID of a specific [mandate](get-mandate) can be supplied to indicate which of
	// the customer's accounts should be credited.
	MandateID *string `json:"mandateId,omitempty"`
	// The ID of the [customer](get-customer) the payment is being created for. This is used primarily for recurring
	// payments, but can also be used on regular payments to enable single-click payments.
	//
	// If `sequenceType` is set to `recurring`, this field is required.
	CustomerID *string `json:"customerId,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// When using an API Key, the `profileId` can be omitted since it is linked to the key. However, for OAuth and
	// Organization tokens, the `profileId` is required.
	//
	// For more information, see [Authentication](authentication).
	ProfileID string `json:"profileId"`
	// The identifier referring to the [settlement](get-settlement) this payment was settled with.
	SettlementID *string `json:"settlementId,omitempty"`
	// If the payment was created for an [order](get-order), the ID of that order will be part of the response.
	OrderID *string `json:"orderId,omitempty"`
	// The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
	// statuses occur at what point.
	Status CancelPaymentStatusEnum `json:"status"`
	// This object offers details about the status of a payment. Currently it is only available for point-of-sale
	// payments.
	//
	// You can find more information about the possible values of this object on
	// [this page](status-reasons).**
	StatusReason *CancelPaymentStatusReason `json:"statusReason,omitempty"`
	// Whether the payment can be canceled. This parameter is omitted if the payment reaches a final state.
	IsCancelable *bool `json:"isCancelable,omitempty"`
	// An object containing payment details collected during the payment process. For example, details may include the
	// customer's card or bank details and a payment reference. For the full list of details, please refer to the
	// [method-specific parameters](extra-payment-parameters) guide.
	Details *CancelPaymentDetails `json:"details,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The date and time the payment became authorized, in ISO 8601 format. This parameter is omitted if the payment is
	// not authorized (yet).
	AuthorizedAt *string `json:"authorizedAt,omitempty"`
	// The date and time the payment became paid, in ISO 8601 format. This parameter is omitted if the payment is not
	// completed (yet).
	PaidAt *string `json:"paidAt,omitempty"`
	// The date and time the payment was canceled, in ISO 8601 format. This parameter is omitted if the payment is not
	// canceled (yet).
	CanceledAt *string `json:"canceledAt,omitempty"`
	// The date and time the payment will expire, in ISO 8601 format. This parameter is omitted if the payment can no
	// longer expire.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The date and time the payment was expired, in ISO 8601 format. This parameter is omitted if the payment did not
	// expire (yet).
	ExpiredAt *string `json:"expiredAt,omitempty"`
	// The date and time the payment failed, in ISO 8601 format. This parameter is omitted if the payment did not fail
	// (yet).
	FailedAt *string `json:"failedAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links CancelPaymentLinks `json:"_links"`
}

func (o *CancelPaymentResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *CancelPaymentResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelPaymentResponseBody) GetMode() CancelPaymentMode {
	if o == nil {
		return CancelPaymentMode("")
	}
	return o.Mode
}

func (o *CancelPaymentResponseBody) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CancelPaymentResponseBody) GetAmount() CancelPaymentAmount {
	if o == nil {
		return CancelPaymentAmount{}
	}
	return o.Amount
}

func (o *CancelPaymentResponseBody) GetAmountRefunded() *CancelPaymentAmountRefunded {
	if o == nil {
		return nil
	}
	return o.AmountRefunded
}

func (o *CancelPaymentResponseBody) GetAmountRemaining() *CancelPaymentAmountRemaining {
	if o == nil {
		return nil
	}
	return o.AmountRemaining
}

func (o *CancelPaymentResponseBody) GetAmountCaptured() *CancelPaymentAmountCaptured {
	if o == nil {
		return nil
	}
	return o.AmountCaptured
}

func (o *CancelPaymentResponseBody) GetAmountChargedBack() *CancelPaymentAmountChargedBack {
	if o == nil {
		return nil
	}
	return o.AmountChargedBack
}

func (o *CancelPaymentResponseBody) GetSettlementAmount() *CancelPaymentSettlementAmount {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *CancelPaymentResponseBody) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *CancelPaymentResponseBody) GetCancelURL() *string {
	if o == nil {
		return nil
	}
	return o.CancelURL
}

func (o *CancelPaymentResponseBody) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *CancelPaymentResponseBody) GetLines() []CancelPaymentLine {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *CancelPaymentResponseBody) GetBillingAddress() *CancelPaymentBillingAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *CancelPaymentResponseBody) GetShippingAddress() *CancelPaymentShippingAddress {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *CancelPaymentResponseBody) GetLocale() *CancelPaymentLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *CancelPaymentResponseBody) GetCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CountryCode
}

func (o *CancelPaymentResponseBody) GetMethod() *CancelPaymentMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CancelPaymentResponseBody) GetRestrictPaymentMethodsToCountry() *string {
	if o == nil {
		return nil
	}
	return o.RestrictPaymentMethodsToCountry
}

func (o *CancelPaymentResponseBody) GetMetadata() *CancelPaymentMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CancelPaymentResponseBody) GetCaptureMode() *CancelPaymentCaptureMode {
	if o == nil {
		return nil
	}
	return o.CaptureMode
}

func (o *CancelPaymentResponseBody) GetCaptureDelay() *string {
	if o == nil {
		return nil
	}
	return o.CaptureDelay
}

func (o *CancelPaymentResponseBody) GetCaptureBefore() *string {
	if o == nil {
		return nil
	}
	return o.CaptureBefore
}

func (o *CancelPaymentResponseBody) GetApplicationFee() *CancelPaymentApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *CancelPaymentResponseBody) GetRouting() []CancelPaymentRouting {
	if o == nil {
		return nil
	}
	return o.Routing
}

func (o *CancelPaymentResponseBody) GetSequenceType() *CancelPaymentSequenceType {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *CancelPaymentResponseBody) GetSubscriptionID() *string {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

func (o *CancelPaymentResponseBody) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *CancelPaymentResponseBody) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *CancelPaymentResponseBody) GetProfileID() string {
	if o == nil {
		return ""
	}
	return o.ProfileID
}

func (o *CancelPaymentResponseBody) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *CancelPaymentResponseBody) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *CancelPaymentResponseBody) GetStatus() CancelPaymentStatusEnum {
	if o == nil {
		return CancelPaymentStatusEnum("")
	}
	return o.Status
}

func (o *CancelPaymentResponseBody) GetStatusReason() *CancelPaymentStatusReason {
	if o == nil {
		return nil
	}
	return o.StatusReason
}

func (o *CancelPaymentResponseBody) GetIsCancelable() *bool {
	if o == nil {
		return nil
	}
	return o.IsCancelable
}

func (o *CancelPaymentResponseBody) GetDetails() *CancelPaymentDetails {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *CancelPaymentResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CancelPaymentResponseBody) GetAuthorizedAt() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizedAt
}

func (o *CancelPaymentResponseBody) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *CancelPaymentResponseBody) GetCanceledAt() *string {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CancelPaymentResponseBody) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *CancelPaymentResponseBody) GetExpiredAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredAt
}

func (o *CancelPaymentResponseBody) GetFailedAt() *string {
	if o == nil {
		return nil
	}
	return o.FailedAt
}

func (o *CancelPaymentResponseBody) GetLinks() CancelPaymentLinks {
	if o == nil {
		return CancelPaymentLinks{}
	}
	return o.Links
}

type CancelPaymentResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The canceled payment object.
	Object *CancelPaymentResponseBody
}

func (o *CancelPaymentResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CancelPaymentResponse) GetObject() *CancelPaymentResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
