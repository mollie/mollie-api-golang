// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// UpdatePaymentLinkMinimumAmountRequest - The minimum amount of the payment link. This property is only allowed when there is no amount provided.
// The customer will be prompted to enter a value greater than or equal to the minimum amount.
type UpdatePaymentLinkMinimumAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentLinkMinimumAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentLinkMinimumAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentLinkTypeRequest - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type UpdatePaymentLinkTypeRequest string

const (
	UpdatePaymentLinkTypeRequestPhysical    UpdatePaymentLinkTypeRequest = "physical"
	UpdatePaymentLinkTypeRequestDigital     UpdatePaymentLinkTypeRequest = "digital"
	UpdatePaymentLinkTypeRequestShippingFee UpdatePaymentLinkTypeRequest = "shipping_fee"
	UpdatePaymentLinkTypeRequestDiscount    UpdatePaymentLinkTypeRequest = "discount"
	UpdatePaymentLinkTypeRequestStoreCredit UpdatePaymentLinkTypeRequest = "store_credit"
	UpdatePaymentLinkTypeRequestGiftCard    UpdatePaymentLinkTypeRequest = "gift_card"
	UpdatePaymentLinkTypeRequestSurcharge   UpdatePaymentLinkTypeRequest = "surcharge"
	UpdatePaymentLinkTypeRequestTip         UpdatePaymentLinkTypeRequest = "tip"
)

func (e UpdatePaymentLinkTypeRequest) ToPointer() *UpdatePaymentLinkTypeRequest {
	return &e
}
func (e *UpdatePaymentLinkTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "physical":
		fallthrough
	case "digital":
		fallthrough
	case "shipping_fee":
		fallthrough
	case "discount":
		fallthrough
	case "store_credit":
		fallthrough
	case "gift_card":
		fallthrough
	case "surcharge":
		fallthrough
	case "tip":
		*e = UpdatePaymentLinkTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentLinkTypeRequest: %v", v)
	}
}

// UpdatePaymentLinkUnitPriceRequest - The price of a single item including VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
//
// The unit price can be zero in case of free items.
type UpdatePaymentLinkUnitPriceRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentLinkUnitPriceRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentLinkUnitPriceRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentLinkDiscountAmountRequest - Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
// type.
type UpdatePaymentLinkDiscountAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentLinkDiscountAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentLinkDiscountAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentLinkTotalAmountRequest - The total amount of the line, including VAT and discounts.
//
// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
//
// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
type UpdatePaymentLinkTotalAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentLinkTotalAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentLinkTotalAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentLinkVatAmountRequest - The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
//
// Any deviations from this will result in an error.
//
// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
// `SEK 100.00 × (25 / 125) = SEK 20.00`.
type UpdatePaymentLinkVatAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentLinkVatAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentLinkVatAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdatePaymentLinkCategoryRequest string

const (
	UpdatePaymentLinkCategoryRequestMeal         UpdatePaymentLinkCategoryRequest = "meal"
	UpdatePaymentLinkCategoryRequestEco          UpdatePaymentLinkCategoryRequest = "eco"
	UpdatePaymentLinkCategoryRequestGift         UpdatePaymentLinkCategoryRequest = "gift"
	UpdatePaymentLinkCategoryRequestSportCulture UpdatePaymentLinkCategoryRequest = "sport_culture"
)

func (e UpdatePaymentLinkCategoryRequest) ToPointer() *UpdatePaymentLinkCategoryRequest {
	return &e
}
func (e *UpdatePaymentLinkCategoryRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "meal":
		fallthrough
	case "eco":
		fallthrough
	case "gift":
		fallthrough
	case "sport_culture":
		*e = UpdatePaymentLinkCategoryRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentLinkCategoryRequest: %v", v)
	}
}

type UpdatePaymentLinkLineRequest struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *UpdatePaymentLinkTypeRequest `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// The price of a single item including VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
	//
	// The unit price can be zero in case of free items.
	UnitPrice UpdatePaymentLinkUnitPriceRequest `json:"unitPrice"`
	// Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
	// type.
	DiscountAmount *UpdatePaymentLinkDiscountAmountRequest `json:"discountAmount,omitempty"`
	// The total amount of the line, including VAT and discounts.
	//
	// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
	//
	// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
	TotalAmount UpdatePaymentLinkTotalAmountRequest `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
	// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
	//
	// Any deviations from this will result in an error.
	//
	// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
	// `SEK 100.00 × (25 / 125) = SEK 20.00`.
	VatAmount *UpdatePaymentLinkVatAmountRequest `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []UpdatePaymentLinkCategoryRequest `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string `json:"productUrl,omitempty"`
}

func (o *UpdatePaymentLinkLineRequest) GetType() *UpdatePaymentLinkTypeRequest {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdatePaymentLinkLineRequest) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *UpdatePaymentLinkLineRequest) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *UpdatePaymentLinkLineRequest) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *UpdatePaymentLinkLineRequest) GetUnitPrice() UpdatePaymentLinkUnitPriceRequest {
	if o == nil {
		return UpdatePaymentLinkUnitPriceRequest{}
	}
	return o.UnitPrice
}

func (o *UpdatePaymentLinkLineRequest) GetDiscountAmount() *UpdatePaymentLinkDiscountAmountRequest {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *UpdatePaymentLinkLineRequest) GetTotalAmount() UpdatePaymentLinkTotalAmountRequest {
	if o == nil {
		return UpdatePaymentLinkTotalAmountRequest{}
	}
	return o.TotalAmount
}

func (o *UpdatePaymentLinkLineRequest) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *UpdatePaymentLinkLineRequest) GetVatAmount() *UpdatePaymentLinkVatAmountRequest {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *UpdatePaymentLinkLineRequest) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *UpdatePaymentLinkLineRequest) GetCategories() []UpdatePaymentLinkCategoryRequest {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *UpdatePaymentLinkLineRequest) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *UpdatePaymentLinkLineRequest) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}

// UpdatePaymentLinkBillingAddressRequest - The customer's billing address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
//
// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
type UpdatePaymentLinkBillingAddressRequest struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *UpdatePaymentLinkBillingAddressRequest) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *UpdatePaymentLinkBillingAddressRequest) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *UpdatePaymentLinkBillingAddressRequest) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *UpdatePaymentLinkBillingAddressRequest) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *UpdatePaymentLinkBillingAddressRequest) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *UpdatePaymentLinkBillingAddressRequest) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *UpdatePaymentLinkBillingAddressRequest) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *UpdatePaymentLinkBillingAddressRequest) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UpdatePaymentLinkBillingAddressRequest) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *UpdatePaymentLinkBillingAddressRequest) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *UpdatePaymentLinkBillingAddressRequest) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *UpdatePaymentLinkBillingAddressRequest) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// UpdatePaymentLinkShippingAddressRequest - The customer's shipping address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
type UpdatePaymentLinkShippingAddressRequest struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *UpdatePaymentLinkShippingAddressRequest) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *UpdatePaymentLinkShippingAddressRequest) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *UpdatePaymentLinkShippingAddressRequest) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *UpdatePaymentLinkShippingAddressRequest) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *UpdatePaymentLinkShippingAddressRequest) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *UpdatePaymentLinkShippingAddressRequest) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *UpdatePaymentLinkShippingAddressRequest) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *UpdatePaymentLinkShippingAddressRequest) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UpdatePaymentLinkShippingAddressRequest) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *UpdatePaymentLinkShippingAddressRequest) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *UpdatePaymentLinkShippingAddressRequest) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *UpdatePaymentLinkShippingAddressRequest) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

type UpdatePaymentLinkRequestBody struct {
	// A short description of the payment link. The description is visible in the Dashboard and will be shown
	// on the customer's bank or card statement when possible.
	//
	// Updating the description does not affect any previously existing payments created for this payment link.
	Description *string `json:"description,omitempty"`
	// The minimum amount of the payment link. This property is only allowed when there is no amount provided.
	// The customer will be prompted to enter a value greater than or equal to the minimum amount.
	MinimumAmount *UpdatePaymentLinkMinimumAmountRequest `json:"minimumAmount,omitempty"`
	// Whether the payment link is archived. Customers will not be able to complete payments on archived
	// payment links.
	Archived *bool `json:"archived,omitempty"`
	// An array of payment methods that are allowed to be used for this payment link. When this parameter is
	// not provided or is an empty array, all enabled payment methods will be available.
	//
	// Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
	// 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
	// 'in3', 'riverty', 'klarna', 'billie'.
	AllowedMethods []string `json:"allowedMethods,omitempty"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines []UpdatePaymentLinkLineRequest `json:"lines,omitempty"`
	// The customer's billing address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	//
	// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
	BillingAddress *UpdatePaymentLinkBillingAddressRequest `json:"billingAddress,omitempty"`
	// The customer's shipping address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	ShippingAddress *UpdatePaymentLinkShippingAddressRequest `json:"shippingAddress,omitempty"`
	// Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
	// such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `json:"testmode,omitempty"`
}

func (o *UpdatePaymentLinkRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdatePaymentLinkRequestBody) GetMinimumAmount() *UpdatePaymentLinkMinimumAmountRequest {
	if o == nil {
		return nil
	}
	return o.MinimumAmount
}

func (o *UpdatePaymentLinkRequestBody) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *UpdatePaymentLinkRequestBody) GetAllowedMethods() []string {
	if o == nil {
		return nil
	}
	return o.AllowedMethods
}

func (o *UpdatePaymentLinkRequestBody) GetLines() []UpdatePaymentLinkLineRequest {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *UpdatePaymentLinkRequestBody) GetBillingAddress() *UpdatePaymentLinkBillingAddressRequest {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *UpdatePaymentLinkRequestBody) GetShippingAddress() *UpdatePaymentLinkShippingAddressRequest {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *UpdatePaymentLinkRequestBody) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

type UpdatePaymentLinkRequest struct {
	// Provide the ID of the related payment link.
	PaymentLinkID string                        `pathParam:"style=simple,explode=false,name=paymentLinkId"`
	RequestBody   *UpdatePaymentLinkRequestBody `request:"mediaType=application/json"`
}

func (o *UpdatePaymentLinkRequest) GetPaymentLinkID() string {
	if o == nil {
		return ""
	}
	return o.PaymentLinkID
}

func (o *UpdatePaymentLinkRequest) GetRequestBody() *UpdatePaymentLinkRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// UpdatePaymentLinkUnprocessableEntityDocumentation - The URL to the generic Mollie API error handling guide.
type UpdatePaymentLinkUnprocessableEntityDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *UpdatePaymentLinkUnprocessableEntityDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentLinkUnprocessableEntityDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type UpdatePaymentLinkUnprocessableEntityLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation UpdatePaymentLinkUnprocessableEntityDocumentation `json:"documentation"`
}

func (o *UpdatePaymentLinkUnprocessableEntityLinks) GetDocumentation() UpdatePaymentLinkUnprocessableEntityDocumentation {
	if o == nil {
		return UpdatePaymentLinkUnprocessableEntityDocumentation{}
	}
	return o.Documentation
}

// UpdatePaymentLinkNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type UpdatePaymentLinkNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *UpdatePaymentLinkNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentLinkNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type UpdatePaymentLinkNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation UpdatePaymentLinkNotFoundDocumentation `json:"documentation"`
}

func (o *UpdatePaymentLinkNotFoundLinks) GetDocumentation() UpdatePaymentLinkNotFoundDocumentation {
	if o == nil {
		return UpdatePaymentLinkNotFoundDocumentation{}
	}
	return o.Documentation
}

// UpdatePaymentLinkMode - Whether this entity was created in live mode or in test mode.
type UpdatePaymentLinkMode string

const (
	UpdatePaymentLinkModeLive UpdatePaymentLinkMode = "live"
	UpdatePaymentLinkModeTest UpdatePaymentLinkMode = "test"
)

func (e UpdatePaymentLinkMode) ToPointer() *UpdatePaymentLinkMode {
	return &e
}
func (e *UpdatePaymentLinkMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = UpdatePaymentLinkMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentLinkMode: %v", v)
	}
}

// UpdatePaymentLinkAmount - The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
// amount.
type UpdatePaymentLinkAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentLinkAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentLinkAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentLinkMinimumAmountResponse - The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
// customer will be prompted to enter a value greater than or equal to the minimum amount.
type UpdatePaymentLinkMinimumAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentLinkMinimumAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentLinkMinimumAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentLinkTypeResponse - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type UpdatePaymentLinkTypeResponse string

const (
	UpdatePaymentLinkTypeResponsePhysical    UpdatePaymentLinkTypeResponse = "physical"
	UpdatePaymentLinkTypeResponseDigital     UpdatePaymentLinkTypeResponse = "digital"
	UpdatePaymentLinkTypeResponseShippingFee UpdatePaymentLinkTypeResponse = "shipping_fee"
	UpdatePaymentLinkTypeResponseDiscount    UpdatePaymentLinkTypeResponse = "discount"
	UpdatePaymentLinkTypeResponseStoreCredit UpdatePaymentLinkTypeResponse = "store_credit"
	UpdatePaymentLinkTypeResponseGiftCard    UpdatePaymentLinkTypeResponse = "gift_card"
	UpdatePaymentLinkTypeResponseSurcharge   UpdatePaymentLinkTypeResponse = "surcharge"
	UpdatePaymentLinkTypeResponseTip         UpdatePaymentLinkTypeResponse = "tip"
)

func (e UpdatePaymentLinkTypeResponse) ToPointer() *UpdatePaymentLinkTypeResponse {
	return &e
}
func (e *UpdatePaymentLinkTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "physical":
		fallthrough
	case "digital":
		fallthrough
	case "shipping_fee":
		fallthrough
	case "discount":
		fallthrough
	case "store_credit":
		fallthrough
	case "gift_card":
		fallthrough
	case "surcharge":
		fallthrough
	case "tip":
		*e = UpdatePaymentLinkTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentLinkTypeResponse: %v", v)
	}
}

// UpdatePaymentLinkUnitPriceResponse - The price of a single item including VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
//
// The unit price can be zero in case of free items.
type UpdatePaymentLinkUnitPriceResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentLinkUnitPriceResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentLinkUnitPriceResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentLinkDiscountAmountResponse - Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
// type.
type UpdatePaymentLinkDiscountAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentLinkDiscountAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentLinkDiscountAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentLinkTotalAmountResponse - The total amount of the line, including VAT and discounts.
//
// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
//
// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
type UpdatePaymentLinkTotalAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentLinkTotalAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentLinkTotalAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentLinkVatAmountResponse - The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
//
// Any deviations from this will result in an error.
//
// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
// `SEK 100.00 × (25 / 125) = SEK 20.00`.
type UpdatePaymentLinkVatAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentLinkVatAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentLinkVatAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdatePaymentLinkCategoryResponse string

const (
	UpdatePaymentLinkCategoryResponseMeal         UpdatePaymentLinkCategoryResponse = "meal"
	UpdatePaymentLinkCategoryResponseEco          UpdatePaymentLinkCategoryResponse = "eco"
	UpdatePaymentLinkCategoryResponseGift         UpdatePaymentLinkCategoryResponse = "gift"
	UpdatePaymentLinkCategoryResponseSportCulture UpdatePaymentLinkCategoryResponse = "sport_culture"
)

func (e UpdatePaymentLinkCategoryResponse) ToPointer() *UpdatePaymentLinkCategoryResponse {
	return &e
}
func (e *UpdatePaymentLinkCategoryResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "meal":
		fallthrough
	case "eco":
		fallthrough
	case "gift":
		fallthrough
	case "sport_culture":
		*e = UpdatePaymentLinkCategoryResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentLinkCategoryResponse: %v", v)
	}
}

type UpdatePaymentLinkLineResponse struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *UpdatePaymentLinkTypeResponse `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// The price of a single item including VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
	//
	// The unit price can be zero in case of free items.
	UnitPrice UpdatePaymentLinkUnitPriceResponse `json:"unitPrice"`
	// Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
	// type.
	DiscountAmount *UpdatePaymentLinkDiscountAmountResponse `json:"discountAmount,omitempty"`
	// The total amount of the line, including VAT and discounts.
	//
	// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
	//
	// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
	TotalAmount UpdatePaymentLinkTotalAmountResponse `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
	// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
	//
	// Any deviations from this will result in an error.
	//
	// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
	// `SEK 100.00 × (25 / 125) = SEK 20.00`.
	VatAmount *UpdatePaymentLinkVatAmountResponse `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []UpdatePaymentLinkCategoryResponse `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string `json:"productUrl,omitempty"`
}

func (o *UpdatePaymentLinkLineResponse) GetType() *UpdatePaymentLinkTypeResponse {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdatePaymentLinkLineResponse) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *UpdatePaymentLinkLineResponse) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *UpdatePaymentLinkLineResponse) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *UpdatePaymentLinkLineResponse) GetUnitPrice() UpdatePaymentLinkUnitPriceResponse {
	if o == nil {
		return UpdatePaymentLinkUnitPriceResponse{}
	}
	return o.UnitPrice
}

func (o *UpdatePaymentLinkLineResponse) GetDiscountAmount() *UpdatePaymentLinkDiscountAmountResponse {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *UpdatePaymentLinkLineResponse) GetTotalAmount() UpdatePaymentLinkTotalAmountResponse {
	if o == nil {
		return UpdatePaymentLinkTotalAmountResponse{}
	}
	return o.TotalAmount
}

func (o *UpdatePaymentLinkLineResponse) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *UpdatePaymentLinkLineResponse) GetVatAmount() *UpdatePaymentLinkVatAmountResponse {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *UpdatePaymentLinkLineResponse) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *UpdatePaymentLinkLineResponse) GetCategories() []UpdatePaymentLinkCategoryResponse {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *UpdatePaymentLinkLineResponse) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *UpdatePaymentLinkLineResponse) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}

// UpdatePaymentLinkBillingAddressResponse - The customer's billing address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
//
// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
type UpdatePaymentLinkBillingAddressResponse struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *UpdatePaymentLinkBillingAddressResponse) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *UpdatePaymentLinkBillingAddressResponse) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *UpdatePaymentLinkBillingAddressResponse) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *UpdatePaymentLinkBillingAddressResponse) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *UpdatePaymentLinkBillingAddressResponse) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *UpdatePaymentLinkBillingAddressResponse) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *UpdatePaymentLinkBillingAddressResponse) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *UpdatePaymentLinkBillingAddressResponse) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UpdatePaymentLinkBillingAddressResponse) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *UpdatePaymentLinkBillingAddressResponse) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *UpdatePaymentLinkBillingAddressResponse) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *UpdatePaymentLinkBillingAddressResponse) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// UpdatePaymentLinkShippingAddressResponse - The customer's shipping address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
type UpdatePaymentLinkShippingAddressResponse struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *UpdatePaymentLinkShippingAddressResponse) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *UpdatePaymentLinkShippingAddressResponse) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *UpdatePaymentLinkShippingAddressResponse) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *UpdatePaymentLinkShippingAddressResponse) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *UpdatePaymentLinkShippingAddressResponse) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *UpdatePaymentLinkShippingAddressResponse) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *UpdatePaymentLinkShippingAddressResponse) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *UpdatePaymentLinkShippingAddressResponse) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UpdatePaymentLinkShippingAddressResponse) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *UpdatePaymentLinkShippingAddressResponse) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *UpdatePaymentLinkShippingAddressResponse) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *UpdatePaymentLinkShippingAddressResponse) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// UpdatePaymentLinkApplicationFeeAmount - The fee that you wish to charge.
//
// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
// a €0.99 fee on a €1.00 payment.
type UpdatePaymentLinkApplicationFeeAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentLinkApplicationFeeAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentLinkApplicationFeeAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentLinkApplicationFee - With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
type UpdatePaymentLinkApplicationFee struct {
	// The fee that you wish to charge.
	//
	// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
	// a €0.99 fee on a €1.00 payment.
	Amount UpdatePaymentLinkApplicationFeeAmount `json:"amount"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description string `json:"description"`
}

func (o *UpdatePaymentLinkApplicationFee) GetAmount() UpdatePaymentLinkApplicationFeeAmount {
	if o == nil {
		return UpdatePaymentLinkApplicationFeeAmount{}
	}
	return o.Amount
}

func (o *UpdatePaymentLinkApplicationFee) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

// UpdatePaymentLinkSequenceType - If set to `first`, a payment mandate is established right after a payment is made by the customer.
//
// Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
//
// The mandate ID can be retrieved by making a call to the
// [Payment Link Payments Endpoint](get-payment-link-payments).
type UpdatePaymentLinkSequenceType string

const (
	UpdatePaymentLinkSequenceTypeOneoff UpdatePaymentLinkSequenceType = "oneoff"
	UpdatePaymentLinkSequenceTypeFirst  UpdatePaymentLinkSequenceType = "first"
)

func (e UpdatePaymentLinkSequenceType) ToPointer() *UpdatePaymentLinkSequenceType {
	return &e
}
func (e *UpdatePaymentLinkSequenceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oneoff":
		fallthrough
	case "first":
		*e = UpdatePaymentLinkSequenceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentLinkSequenceType: %v", v)
	}
}

// UpdatePaymentLinkSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type UpdatePaymentLinkSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentLinkSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentLinkSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentLinkPaymentLink - The URL your customer should visit to make the payment. This is where you should redirect the customer to.
type UpdatePaymentLinkPaymentLink struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentLinkPaymentLink) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentLinkPaymentLink) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentLinkLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type UpdatePaymentLinkLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self UpdatePaymentLinkSelf `json:"self"`
	// The URL your customer should visit to make the payment. This is where you should redirect the customer to.
	PaymentLink UpdatePaymentLinkPaymentLink `json:"paymentLink"`
}

func (o *UpdatePaymentLinkLinks) GetSelf() UpdatePaymentLinkSelf {
	if o == nil {
		return UpdatePaymentLinkSelf{}
	}
	return o.Self
}

func (o *UpdatePaymentLinkLinks) GetPaymentLink() UpdatePaymentLinkPaymentLink {
	if o == nil {
		return UpdatePaymentLinkPaymentLink{}
	}
	return o.PaymentLink
}

// UpdatePaymentLinkResponseBody - The payment link object.
type UpdatePaymentLinkResponseBody struct {
	// Indicates the response contains a payment link object. Will always contain the string `payment-link` for this
	// endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this payment link. Example: `pl_4Y0eZitmBnQ6IDoMqZQKh`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode UpdatePaymentLinkMode `json:"mode"`
	// A short description of the payment link. The description is visible in the Dashboard and will be shown on the
	// customer's bank or card statement when possible.
	Description string `json:"description"`
	// The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
	// amount.
	Amount *UpdatePaymentLinkAmount `json:"amount"`
	// The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
	// customer will be prompted to enter a value greater than or equal to the minimum amount.
	MinimumAmount *UpdatePaymentLinkMinimumAmountResponse `json:"minimumAmount,omitempty"`
	// Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
	Archived bool `json:"archived"`
	// The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
	// the customer will be shown a generic message after completing the payment.
	RedirectURL *string `json:"redirectUrl"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
	// resulting from the payment link.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines []UpdatePaymentLinkLineResponse `json:"lines,omitempty"`
	// The customer's billing address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	//
	// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
	BillingAddress *UpdatePaymentLinkBillingAddressResponse `json:"billingAddress,omitempty"`
	// The customer's shipping address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	ShippingAddress *UpdatePaymentLinkShippingAddressResponse `json:"shippingAddress,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
	// request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
	// required.
	ProfileID *string `json:"profileId"`
	// Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
	// payments using the same link.
	//
	// If no value is specified, the field defaults to `false`, allowing only a single payment per link.
	Reusable *bool `json:"reusable"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The date and time the payment link became paid, in ISO 8601 format.
	PaidAt *string `json:"paidAt"`
	// The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
	// the payment link will not expire automatically.
	ExpiresAt *string `json:"expiresAt"`
	// An array of payment methods that are allowed to be used for this payment link. When this parameter is
	// not provided or is an empty array, all enabled payment methods will be available.
	//
	// Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
	// 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
	// 'in3', 'riverty', 'klarna', 'billie'.
	AllowedMethods []string `json:"allowedMethods"`
	// With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	ApplicationFee *UpdatePaymentLinkApplicationFee `json:"applicationFee,omitempty"`
	// If set to `first`, a payment mandate is established right after a payment is made by the customer.
	//
	// Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
	//
	// The mandate ID can be retrieved by making a call to the
	// [Payment Link Payments Endpoint](get-payment-link-payments).
	SequenceType *UpdatePaymentLinkSequenceType `json:"sequenceType,omitempty"`
	// **Only relevant when `sequenceType` is set to `first`**
	//
	// The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
	// the customer will be required to input relevant information which will be used to establish a mandate after
	// the payment is made.
	CustomerID *string `json:"customerId,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links UpdatePaymentLinkLinks `json:"_links"`
}

func (o *UpdatePaymentLinkResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *UpdatePaymentLinkResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdatePaymentLinkResponseBody) GetMode() UpdatePaymentLinkMode {
	if o == nil {
		return UpdatePaymentLinkMode("")
	}
	return o.Mode
}

func (o *UpdatePaymentLinkResponseBody) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *UpdatePaymentLinkResponseBody) GetAmount() *UpdatePaymentLinkAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *UpdatePaymentLinkResponseBody) GetMinimumAmount() *UpdatePaymentLinkMinimumAmountResponse {
	if o == nil {
		return nil
	}
	return o.MinimumAmount
}

func (o *UpdatePaymentLinkResponseBody) GetArchived() bool {
	if o == nil {
		return false
	}
	return o.Archived
}

func (o *UpdatePaymentLinkResponseBody) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *UpdatePaymentLinkResponseBody) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *UpdatePaymentLinkResponseBody) GetLines() []UpdatePaymentLinkLineResponse {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *UpdatePaymentLinkResponseBody) GetBillingAddress() *UpdatePaymentLinkBillingAddressResponse {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *UpdatePaymentLinkResponseBody) GetShippingAddress() *UpdatePaymentLinkShippingAddressResponse {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *UpdatePaymentLinkResponseBody) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *UpdatePaymentLinkResponseBody) GetReusable() *bool {
	if o == nil {
		return nil
	}
	return o.Reusable
}

func (o *UpdatePaymentLinkResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *UpdatePaymentLinkResponseBody) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *UpdatePaymentLinkResponseBody) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *UpdatePaymentLinkResponseBody) GetAllowedMethods() []string {
	if o == nil {
		return nil
	}
	return o.AllowedMethods
}

func (o *UpdatePaymentLinkResponseBody) GetApplicationFee() *UpdatePaymentLinkApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *UpdatePaymentLinkResponseBody) GetSequenceType() *UpdatePaymentLinkSequenceType {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *UpdatePaymentLinkResponseBody) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *UpdatePaymentLinkResponseBody) GetLinks() UpdatePaymentLinkLinks {
	if o == nil {
		return UpdatePaymentLinkLinks{}
	}
	return o.Links
}

type UpdatePaymentLinkResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The payment link object.
	Object *UpdatePaymentLinkResponseBody
}

func (o *UpdatePaymentLinkResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdatePaymentLinkResponse) GetObject() *UpdatePaymentLinkResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
