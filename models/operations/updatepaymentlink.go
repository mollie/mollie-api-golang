// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type UpdatePaymentLinkRequestBody struct {
	// A short description of the payment link. The description is visible in the Dashboard and will be shown
	// on the customer's bank or card statement when possible.
	//
	// Updating the description does not affect any previously existing payments created for this payment link.
	Description *string `json:"description,omitempty"`
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	MinimumAmount *components.Amount `json:"minimumAmount,omitempty"`
	// Whether the payment link is archived. Customers will not be able to complete payments on archived
	// payment links.
	Archived *bool `json:"archived,omitempty"`
	// An array of payment methods that are allowed to be used for this payment link. When this parameter is
	// not provided or is an empty array, all enabled payment methods will be available.
	//
	// Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
	// 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
	// 'in3', 'riverty', 'klarna', 'billie'.
	AllowedMethods []string `json:"allowedMethods,omitempty"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines           []components.PaymentLineItem `json:"lines,omitempty"`
	BillingAddress  *components.PaymentAddress   `json:"billingAddress,omitempty"`
	ShippingAddress *components.PaymentAddress   `json:"shippingAddress,omitempty"`
	// Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
	// such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `json:"testmode,omitempty"`
}

func (u *UpdatePaymentLinkRequestBody) GetDescription() *string {
	if u == nil {
		return nil
	}
	return u.Description
}

func (u *UpdatePaymentLinkRequestBody) GetMinimumAmount() *components.Amount {
	if u == nil {
		return nil
	}
	return u.MinimumAmount
}

func (u *UpdatePaymentLinkRequestBody) GetArchived() *bool {
	if u == nil {
		return nil
	}
	return u.Archived
}

func (u *UpdatePaymentLinkRequestBody) GetAllowedMethods() []string {
	if u == nil {
		return nil
	}
	return u.AllowedMethods
}

func (u *UpdatePaymentLinkRequestBody) GetLines() []components.PaymentLineItem {
	if u == nil {
		return nil
	}
	return u.Lines
}

func (u *UpdatePaymentLinkRequestBody) GetBillingAddress() *components.PaymentAddress {
	if u == nil {
		return nil
	}
	return u.BillingAddress
}

func (u *UpdatePaymentLinkRequestBody) GetShippingAddress() *components.PaymentAddress {
	if u == nil {
		return nil
	}
	return u.ShippingAddress
}

func (u *UpdatePaymentLinkRequestBody) GetTestmode() *bool {
	if u == nil {
		return nil
	}
	return u.Testmode
}

type UpdatePaymentLinkRequest struct {
	// Provide the ID of the related payment link.
	PaymentLinkID string `pathParam:"style=simple,explode=false,name=paymentLinkId"`
	// A unique key to ensure idempotent requests. This key should be a UUID v4 string.
	IdempotencyKey *string                       `header:"style=simple,explode=false,name=idempotency-key"`
	RequestBody    *UpdatePaymentLinkRequestBody `request:"mediaType=application/json"`
}

func (u *UpdatePaymentLinkRequest) GetPaymentLinkID() string {
	if u == nil {
		return ""
	}
	return u.PaymentLinkID
}

func (u *UpdatePaymentLinkRequest) GetIdempotencyKey() *string {
	if u == nil {
		return nil
	}
	return u.IdempotencyKey
}

func (u *UpdatePaymentLinkRequest) GetRequestBody() *UpdatePaymentLinkRequestBody {
	if u == nil {
		return nil
	}
	return u.RequestBody
}

type UpdatePaymentLinkResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The payment link object.
	PaymentLinkResponse *components.PaymentLinkResponse
}

func (u *UpdatePaymentLinkResponse) GetHTTPMeta() components.HTTPMetadata {
	if u == nil {
		return components.HTTPMetadata{}
	}
	return u.HTTPMeta
}

func (u *UpdatePaymentLinkResponse) GetPaymentLinkResponse() *components.PaymentLinkResponse {
	if u == nil {
		return nil
	}
	return u.PaymentLinkResponse
}
