// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

type GetInvoiceRequest struct {
	// Provide the ID of the item you want to perform this operation on.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *GetInvoiceRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// GetInvoiceNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type GetInvoiceNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetInvoiceNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetInvoiceNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetInvoiceNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetInvoiceNotFoundDocumentation `json:"documentation"`
}

func (o *GetInvoiceNotFoundLinks) GetDocumentation() GetInvoiceNotFoundDocumentation {
	if o == nil {
		return GetInvoiceNotFoundDocumentation{}
	}
	return o.Documentation
}

// GetInvoiceStatus - Status of the invoice.
//
// * `open` — The invoice is not paid yet.
// * `paid` — The invoice is paid.
// * `overdue` — Payment of the invoice is overdue.
type GetInvoiceStatus string

const (
	GetInvoiceStatusOpen    GetInvoiceStatus = "open"
	GetInvoiceStatusPaid    GetInvoiceStatus = "paid"
	GetInvoiceStatusOverdue GetInvoiceStatus = "overdue"
)

func (e GetInvoiceStatus) ToPointer() *GetInvoiceStatus {
	return &e
}
func (e *GetInvoiceStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "paid":
		fallthrough
	case "overdue":
		*e = GetInvoiceStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetInvoiceStatus: %v", v)
	}
}

// NetAmount - Total amount of the invoice, excluding VAT.
type NetAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *NetAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *NetAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetInvoiceVatAmount - VAT amount of the invoice. Only applicable to merchants registered in the Netherlands. For EU merchants, VAT will
// be shifted to the recipient (as per article 44 and 196 in the EU VAT Directive 2006/112). For merchants outside
// the EU, no VAT will be charged.
type GetInvoiceVatAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetInvoiceVatAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetInvoiceVatAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GrossAmount - Total amount of the invoice, including VAT.
type GrossAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GrossAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GrossAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetInvoiceAmount - Line item amount excluding VAT.
type GetInvoiceAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetInvoiceAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetInvoiceAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetInvoiceLine struct {
	// The administrative period in `YYYY-MM` on which the line should be booked.
	Period *string `json:"period,omitempty"`
	// Description of the product.
	Description *string `json:"description,omitempty"`
	// Number of products invoiced. For example, the number of payments.
	Count *int64 `json:"count,omitempty"`
	// VAT percentage rate that applies to this product.
	VatPercentage *int64 `json:"vatPercentage,omitempty"`
	// Line item amount excluding VAT.
	Amount *GetInvoiceAmount `json:"amount,omitempty"`
}

func (o *GetInvoiceLine) GetPeriod() *string {
	if o == nil {
		return nil
	}
	return o.Period
}

func (o *GetInvoiceLine) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetInvoiceLine) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *GetInvoiceLine) GetVatPercentage() *int64 {
	if o == nil {
		return nil
	}
	return o.VatPercentage
}

func (o *GetInvoiceLine) GetAmount() *GetInvoiceAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

// GetInvoiceSelf - URL to the current invoice resource.
type GetInvoiceSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetInvoiceSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetInvoiceSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// Pdf - URL to a downloadable PDF of the invoice.
type Pdf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *Pdf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *Pdf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetInvoiceDocumentation - URL to the API documentation.
type GetInvoiceDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetInvoiceDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetInvoiceDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetInvoiceLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetInvoiceLinks struct {
	// URL to the current invoice resource.
	Self *GetInvoiceSelf `json:"self,omitempty"`
	// URL to a downloadable PDF of the invoice.
	Pdf *Pdf `json:"pdf,omitempty"`
	// URL to the API documentation.
	Documentation *GetInvoiceDocumentation `json:"documentation,omitempty"`
}

func (o *GetInvoiceLinks) GetSelf() *GetInvoiceSelf {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *GetInvoiceLinks) GetPdf() *Pdf {
	if o == nil {
		return nil
	}
	return o.Pdf
}

func (o *GetInvoiceLinks) GetDocumentation() *GetInvoiceDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

// GetInvoiceResponseBody - The invoice object.
type GetInvoiceResponseBody struct {
	// Indicates that the response contains an invoice object.
	// Will always contain the string `invoice` for this endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this invoice. Example: `inv_FrvewDA3Pr`.
	ID *string `json:"id,omitempty"`
	// The reference number of the invoice. An example value would be: `2024.10000`.
	Reference *string `json:"reference,omitempty"`
	// The VAT number to which the invoice was issued to, if applicable.
	VatNumber *string `json:"vatNumber,omitempty"`
	// Status of the invoice.
	//
	// * `open` — The invoice is not paid yet.
	// * `paid` — The invoice is paid.
	// * `overdue` — Payment of the invoice is overdue.
	Status *GetInvoiceStatus `json:"status,omitempty"`
	// Total amount of the invoice, excluding VAT.
	NetAmount *NetAmount `json:"netAmount,omitempty"`
	// VAT amount of the invoice. Only applicable to merchants registered in the Netherlands. For EU merchants, VAT will
	// be shifted to the recipient (as per article 44 and 196 in the EU VAT Directive 2006/112). For merchants outside
	// the EU, no VAT will be charged.
	VatAmount *GetInvoiceVatAmount `json:"vatAmount,omitempty"`
	// Total amount of the invoice, including VAT.
	GrossAmount *GrossAmount `json:"grossAmount,omitempty"`
	// The collection of products which make up the invoice.
	Lines []GetInvoiceLine `json:"lines,omitempty"`
	// The invoice date in `YYYY-MM-DD` format.
	IssuedAt *string `json:"issuedAt,omitempty"`
	// The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
	PaidAt *string `json:"paidAt,omitempty"`
	// The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
	DueAt *string `json:"dueAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *GetInvoiceLinks `json:"_links,omitempty"`
}

func (o *GetInvoiceResponseBody) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *GetInvoiceResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetInvoiceResponseBody) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *GetInvoiceResponseBody) GetVatNumber() *string {
	if o == nil {
		return nil
	}
	return o.VatNumber
}

func (o *GetInvoiceResponseBody) GetStatus() *GetInvoiceStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetInvoiceResponseBody) GetNetAmount() *NetAmount {
	if o == nil {
		return nil
	}
	return o.NetAmount
}

func (o *GetInvoiceResponseBody) GetVatAmount() *GetInvoiceVatAmount {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *GetInvoiceResponseBody) GetGrossAmount() *GrossAmount {
	if o == nil {
		return nil
	}
	return o.GrossAmount
}

func (o *GetInvoiceResponseBody) GetLines() []GetInvoiceLine {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *GetInvoiceResponseBody) GetIssuedAt() *string {
	if o == nil {
		return nil
	}
	return o.IssuedAt
}

func (o *GetInvoiceResponseBody) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *GetInvoiceResponseBody) GetDueAt() *string {
	if o == nil {
		return nil
	}
	return o.DueAt
}

func (o *GetInvoiceResponseBody) GetLinks() *GetInvoiceLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type GetInvoiceResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The invoice object.
	Object *GetInvoiceResponseBody
}

func (o *GetInvoiceResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetInvoiceResponse) GetObject() *GetInvoiceResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
