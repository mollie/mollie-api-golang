// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// Resource - **⚠️ We no longer recommend using the Orders API. Please refer to the [Payments API](payments-api) instead.**
//
// Indicate if you will use the result for the [Create order](create-order)
// or the [Create payment](create-payment) endpoint.
//
// When passing the value `orders`, the result will include payment methods
// that are only available for payments created via the Orders API.
type Resource string

const (
	ResourcePayments Resource = "payments"
	ResourceOrders   Resource = "orders"
)

func (e Resource) ToPointer() *Resource {
	return &e
}
func (e *Resource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payments":
		fallthrough
	case "orders":
		*e = Resource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Resource: %v", v)
	}
}

// IncludeWallets - A comma-separated list of the wallets you support in your checkout. Wallets often require wallet specific code
// to check if they are available on the shoppers device, hence the need to indicate your support.
type IncludeWallets string

const (
	IncludeWalletsApplepay IncludeWallets = "applepay"
)

func (e IncludeWallets) ToPointer() *IncludeWallets {
	return &e
}
func (e *IncludeWallets) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "applepay":
		*e = IncludeWallets(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IncludeWallets: %v", v)
	}
}

type ListMethodsRequest struct {
	// Set this parameter to `first` to only return the enabled methods that
	// can be used for the first payment of a recurring sequence.
	//
	// Set it to `recurring` to only return enabled methods that can be used for recurring payments or subscriptions.
	SequenceType *components.SequenceType `queryParam:"style=form,explode=true,name=sequenceType"`
	// Response language
	Locale *components.LocaleParameter `queryParam:"style=form,explode=true,name=locale"`
	// If supplied, only payment methods that support the amount and currency
	// are returned.
	//
	// Example: `/v2/methods?amount[value]=100.00&amount[currency]=USD`
	Amount *components.Amount `queryParam:"style=deepObject,explode=true,name=amount"`
	// **⚠️ We no longer recommend using the Orders API. Please refer to the [Payments API](payments-api) instead.**
	//
	// Indicate if you will use the result for the [Create order](create-order)
	// or the [Create payment](create-payment) endpoint.
	//
	// When passing the value `orders`, the result will include payment methods
	// that are only available for payments created via the Orders API.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Resource *Resource `queryParam:"style=form,explode=true,name=resource"`
	// The country taken from your customer's billing address in ISO 3166-1 alpha-2 format. This parameter can be used
	// to check whether your customer is eligible for certain payment methods, for example for Klarna.
	//
	// Example: `/v2/methods?resource=orders&billingCountry=DE`
	BillingCountry *string `queryParam:"style=form,explode=true,name=billingCountry"`
	// A comma-separated list of the wallets you support in your checkout. Wallets often require wallet specific code
	// to check if they are available on the shoppers device, hence the need to indicate your support.
	IncludeWallets *IncludeWallets `queryParam:"style=form,explode=true,name=includeWallets"`
	// A comma-separated list of the line categories you support in your checkout.
	//
	// Example: `/v2/methods?orderLineCategories=eco,meal`
	OrderLineCategories *components.LineCategories `queryParam:"style=form,explode=true,name=orderLineCategories"`
	// The identifier referring to the [profile](get-profile) you wish to
	// retrieve the resources for.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
	// organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
	ProfileID *string `queryParam:"style=form,explode=true,name=profileId"`
	// This endpoint allows you to include additional information via the `include` query string parameter.
	Include *string `queryParam:"style=form,explode=true,name=include"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
	// A unique key to ensure idempotent requests. This key should be a UUID v4 string.
	IdempotencyKey *string `header:"style=simple,explode=false,name=idempotency-key"`
}

func (l *ListMethodsRequest) GetSequenceType() *components.SequenceType {
	if l == nil {
		return nil
	}
	return l.SequenceType
}

func (l *ListMethodsRequest) GetLocale() *components.LocaleParameter {
	if l == nil {
		return nil
	}
	return l.Locale
}

func (l *ListMethodsRequest) GetAmount() *components.Amount {
	if l == nil {
		return nil
	}
	return l.Amount
}

func (l *ListMethodsRequest) GetResource() *Resource {
	if l == nil {
		return nil
	}
	return l.Resource
}

func (l *ListMethodsRequest) GetBillingCountry() *string {
	if l == nil {
		return nil
	}
	return l.BillingCountry
}

func (l *ListMethodsRequest) GetIncludeWallets() *IncludeWallets {
	if l == nil {
		return nil
	}
	return l.IncludeWallets
}

func (l *ListMethodsRequest) GetOrderLineCategories() *components.LineCategories {
	if l == nil {
		return nil
	}
	return l.OrderLineCategories
}

func (l *ListMethodsRequest) GetProfileID() *string {
	if l == nil {
		return nil
	}
	return l.ProfileID
}

func (l *ListMethodsRequest) GetInclude() *string {
	if l == nil {
		return nil
	}
	return l.Include
}

func (l *ListMethodsRequest) GetTestmode() *bool {
	if l == nil {
		return nil
	}
	return l.Testmode
}

func (l *ListMethodsRequest) GetIdempotencyKey() *string {
	if l == nil {
		return nil
	}
	return l.IdempotencyKey
}

type ListMethodsEmbedded struct {
	// An array of payment method objects. For a complete
	// reference of the payment method object, refer
	// to the [Get payment method endpoint](get-method)
	// documentation.
	Methods []components.EntityMethod `json:"methods"`
}

func (l *ListMethodsEmbedded) GetMethods() []components.EntityMethod {
	if l == nil {
		return []components.EntityMethod{}
	}
	return l.Methods
}

type ListMethodsLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self components.URLObj `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation components.URLObj `json:"documentation"`
}

func (l *ListMethodsLinks) GetSelf() components.URLObj {
	if l == nil {
		return components.URLObj{}
	}
	return l.Self
}

func (l *ListMethodsLinks) GetDocumentation() components.URLObj {
	if l == nil {
		return components.URLObj{}
	}
	return l.Documentation
}

// ListMethodsResponseBody - A list of payment method objects. For a complete reference of the
// payment method object, refer to the [Get payment method endpoint](get-method) documentation.
type ListMethodsResponseBody struct {
	// The number of payment method objects in this result set.
	// Results are **not** paginated.
	Count    int64               `json:"count"`
	Embedded ListMethodsEmbedded `json:"_embedded"`
	Links    ListMethodsLinks    `json:"_links"`
}

func (l *ListMethodsResponseBody) GetCount() int64 {
	if l == nil {
		return 0
	}
	return l.Count
}

func (l *ListMethodsResponseBody) GetEmbedded() ListMethodsEmbedded {
	if l == nil {
		return ListMethodsEmbedded{}
	}
	return l.Embedded
}

func (l *ListMethodsResponseBody) GetLinks() ListMethodsLinks {
	if l == nil {
		return ListMethodsLinks{}
	}
	return l.Links
}

type ListMethodsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of payment method objects. For a complete reference of the
	// payment method object, refer to the [Get payment method endpoint](get-method) documentation.
	Object *ListMethodsResponseBody
}

func (l *ListMethodsResponse) GetHTTPMeta() components.HTTPMetadata {
	if l == nil {
		return components.HTTPMetadata{}
	}
	return l.HTTPMeta
}

func (l *ListMethodsResponse) GetObject() *ListMethodsResponseBody {
	if l == nil {
		return nil
	}
	return l.Object
}
