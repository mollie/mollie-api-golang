// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// ListMethodsSequenceType - Set this parameter to `first` to only return the enabled methods that
// can be used for the first payment of a recurring sequence.
//
// Set it to `recurring` to only return enabled methods that can be used for recurring payments or subscriptions.
type ListMethodsSequenceType string

const (
	ListMethodsSequenceTypeOneoff    ListMethodsSequenceType = "oneoff"
	ListMethodsSequenceTypeFirst     ListMethodsSequenceType = "first"
	ListMethodsSequenceTypeRecurring ListMethodsSequenceType = "recurring"
)

func (e ListMethodsSequenceType) ToPointer() *ListMethodsSequenceType {
	return &e
}
func (e *ListMethodsSequenceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oneoff":
		fallthrough
	case "first":
		fallthrough
	case "recurring":
		*e = ListMethodsSequenceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListMethodsSequenceType: %v", v)
	}
}

// ListMethodsLocale - Passing a locale will sort the payment methods in the preferred order
// for the country, and translate the payment method names in the corresponding language.
type ListMethodsLocale string

const (
	ListMethodsLocaleEnUs ListMethodsLocale = "en_US"
	ListMethodsLocaleEnGb ListMethodsLocale = "en_GB"
	ListMethodsLocaleNlNl ListMethodsLocale = "nl_NL"
	ListMethodsLocaleNlBe ListMethodsLocale = "nl_BE"
	ListMethodsLocaleDeDe ListMethodsLocale = "de_DE"
	ListMethodsLocaleDeAt ListMethodsLocale = "de_AT"
	ListMethodsLocaleDeCh ListMethodsLocale = "de_CH"
	ListMethodsLocaleFrFr ListMethodsLocale = "fr_FR"
	ListMethodsLocaleFrBe ListMethodsLocale = "fr_BE"
	ListMethodsLocaleEsEs ListMethodsLocale = "es_ES"
	ListMethodsLocaleCaEs ListMethodsLocale = "ca_ES"
	ListMethodsLocalePtPt ListMethodsLocale = "pt_PT"
	ListMethodsLocaleItIt ListMethodsLocale = "it_IT"
	ListMethodsLocaleNbNo ListMethodsLocale = "nb_NO"
	ListMethodsLocaleSvSe ListMethodsLocale = "sv_SE"
	ListMethodsLocaleFiFi ListMethodsLocale = "fi_FI"
	ListMethodsLocaleDaDk ListMethodsLocale = "da_DK"
	ListMethodsLocaleIsIs ListMethodsLocale = "is_IS"
	ListMethodsLocaleHuHu ListMethodsLocale = "hu_HU"
	ListMethodsLocalePlPl ListMethodsLocale = "pl_PL"
	ListMethodsLocaleLvLv ListMethodsLocale = "lv_LV"
	ListMethodsLocaleLtLt ListMethodsLocale = "lt_LT"
)

func (e ListMethodsLocale) ToPointer() *ListMethodsLocale {
	return &e
}
func (e *ListMethodsLocale) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		fallthrough
	case "es_ES":
		fallthrough
	case "ca_ES":
		fallthrough
	case "pt_PT":
		fallthrough
	case "it_IT":
		fallthrough
	case "nb_NO":
		fallthrough
	case "sv_SE":
		fallthrough
	case "fi_FI":
		fallthrough
	case "da_DK":
		fallthrough
	case "is_IS":
		fallthrough
	case "hu_HU":
		fallthrough
	case "pl_PL":
		fallthrough
	case "lv_LV":
		fallthrough
	case "lt_LT":
		*e = ListMethodsLocale(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListMethodsLocale: %v", v)
	}
}

// ListMethodsAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type ListMethodsAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `queryParam:"name=currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `queryParam:"name=value"`
}

func (o *ListMethodsAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListMethodsAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// Resource - **⚠️ We no longer recommend using the Orders API. Please refer to the [Payments API](payments-api) instead.**
//
// Indicate if you will use the result for the [Create order](create-order)
// or the [Create payment](create-payment) endpoint.
//
// When passing the value `orders`, the result will include payment methods
// that are only available for payments created via the Orders API.
type Resource string

const (
	ResourcePayments Resource = "payments"
	ResourceOrders   Resource = "orders"
)

func (e Resource) ToPointer() *Resource {
	return &e
}
func (e *Resource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payments":
		fallthrough
	case "orders":
		*e = Resource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Resource: %v", v)
	}
}

// IncludeWallets - A comma-separated list of the wallets you support in your checkout. Wallets often require wallet specific code
// to check if they are available on the shoppers device, hence the need to indicate your support.
type IncludeWallets string

const (
	IncludeWalletsApplepay IncludeWallets = "applepay"
)

func (e IncludeWallets) ToPointer() *IncludeWallets {
	return &e
}
func (e *IncludeWallets) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "applepay":
		*e = IncludeWallets(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IncludeWallets: %v", v)
	}
}

// OrderLineCategories - A comma-separated list of the line categories you support in your checkout.
//
// Example: `/v2/methods?orderLineCategories=eco,meal`
type OrderLineCategories string

const (
	OrderLineCategoriesEco          OrderLineCategories = "eco"
	OrderLineCategoriesGift         OrderLineCategories = "gift"
	OrderLineCategoriesMeal         OrderLineCategories = "meal"
	OrderLineCategoriesSportCulture OrderLineCategories = "sport_culture"
	OrderLineCategoriesAdditional   OrderLineCategories = "additional"
	OrderLineCategoriesConsume      OrderLineCategories = "consume"
)

func (e OrderLineCategories) ToPointer() *OrderLineCategories {
	return &e
}
func (e *OrderLineCategories) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "eco":
		fallthrough
	case "gift":
		fallthrough
	case "meal":
		fallthrough
	case "sport_culture":
		fallthrough
	case "additional":
		fallthrough
	case "consume":
		*e = OrderLineCategories(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderLineCategories: %v", v)
	}
}

// ListMethodsInclude - This endpoint allows you to include additional information via the
// `include` query string parameter.
type ListMethodsInclude string

const (
	ListMethodsIncludeIssuers ListMethodsInclude = "issuers"
)

func (e ListMethodsInclude) ToPointer() *ListMethodsInclude {
	return &e
}
func (e *ListMethodsInclude) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "issuers":
		*e = ListMethodsInclude(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListMethodsInclude: %v", v)
	}
}

type ListMethodsRequest struct {
	// Set this parameter to `first` to only return the enabled methods that
	// can be used for the first payment of a recurring sequence.
	//
	// Set it to `recurring` to only return enabled methods that can be used for recurring payments or subscriptions.
	SequenceType *ListMethodsSequenceType `queryParam:"style=form,explode=true,name=sequenceType"`
	// Passing a locale will sort the payment methods in the preferred order
	// for the country, and translate the payment method names in the corresponding language.
	Locale *ListMethodsLocale `queryParam:"style=form,explode=true,name=locale"`
	// If supplied, only payment methods that support the amount and currency
	// are returned.
	//
	// Example: `/v2/methods?amount[value]=100.00&amount[currency]=USD`
	Amount *ListMethodsAmount `queryParam:"style=deepObject,explode=true,name=amount"`
	// **⚠️ We no longer recommend using the Orders API. Please refer to the [Payments API](payments-api) instead.**
	//
	// Indicate if you will use the result for the [Create order](create-order)
	// or the [Create payment](create-payment) endpoint.
	//
	// When passing the value `orders`, the result will include payment methods
	// that are only available for payments created via the Orders API.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Resource *Resource `queryParam:"style=form,explode=true,name=resource"`
	// The country taken from your customer's billing address in ISO 3166-1 alpha-2 format. This parameter can be used
	// to check whether your customer is eligible for certain payment methods, for example for Klarna.
	//
	// Example: `/v2/methods?resource=orders&billingCountry=DE`
	BillingCountry *string `queryParam:"style=form,explode=true,name=billingCountry"`
	// A comma-separated list of the wallets you support in your checkout. Wallets often require wallet specific code
	// to check if they are available on the shoppers device, hence the need to indicate your support.
	IncludeWallets *IncludeWallets `queryParam:"style=form,explode=true,name=includeWallets"`
	// A comma-separated list of the line categories you support in your checkout.
	//
	// Example: `/v2/methods?orderLineCategories=eco,meal`
	OrderLineCategories *OrderLineCategories `queryParam:"style=form,explode=true,name=orderLineCategories"`
	// The identifier referring to the [profile](get-profile) you wish to
	// retrieve the resources for.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
	// organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
	ProfileID *string `queryParam:"style=form,explode=true,name=profileId"`
	// This endpoint allows you to include additional information via the
	// `include` query string parameter.
	Include *ListMethodsInclude `queryParam:"style=form,explode=true,name=include"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *ListMethodsRequest) GetSequenceType() *ListMethodsSequenceType {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *ListMethodsRequest) GetLocale() *ListMethodsLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *ListMethodsRequest) GetAmount() *ListMethodsAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListMethodsRequest) GetResource() *Resource {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *ListMethodsRequest) GetBillingCountry() *string {
	if o == nil {
		return nil
	}
	return o.BillingCountry
}

func (o *ListMethodsRequest) GetIncludeWallets() *IncludeWallets {
	if o == nil {
		return nil
	}
	return o.IncludeWallets
}

func (o *ListMethodsRequest) GetOrderLineCategories() *OrderLineCategories {
	if o == nil {
		return nil
	}
	return o.OrderLineCategories
}

func (o *ListMethodsRequest) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *ListMethodsRequest) GetInclude() *ListMethodsInclude {
	if o == nil {
		return nil
	}
	return o.Include
}

func (o *ListMethodsRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// ListMethodsBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type ListMethodsBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListMethodsBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListMethodsBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListMethodsBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListMethodsBadRequestDocumentation `json:"documentation"`
}

func (o *ListMethodsBadRequestLinks) GetDocumentation() ListMethodsBadRequestDocumentation {
	if o == nil {
		return ListMethodsBadRequestDocumentation{}
	}
	return o.Documentation
}

// ListMethodsID - The unique identifier of the payment method. When used during [payment creation](create-payment), the payment
// method selection screen will be skipped.
type ListMethodsID string

const (
	ListMethodsIDAlma           ListMethodsID = "alma"
	ListMethodsIDApplepay       ListMethodsID = "applepay"
	ListMethodsIDBacs           ListMethodsID = "bacs"
	ListMethodsIDBancomatpay    ListMethodsID = "bancomatpay"
	ListMethodsIDBancontact     ListMethodsID = "bancontact"
	ListMethodsIDBanktransfer   ListMethodsID = "banktransfer"
	ListMethodsIDBelfius        ListMethodsID = "belfius"
	ListMethodsIDBillie         ListMethodsID = "billie"
	ListMethodsIDBizum          ListMethodsID = "bizum"
	ListMethodsIDBlik           ListMethodsID = "blik"
	ListMethodsIDCreditcard     ListMethodsID = "creditcard"
	ListMethodsIDDirectdebit    ListMethodsID = "directdebit"
	ListMethodsIDEps            ListMethodsID = "eps"
	ListMethodsIDGiftcard       ListMethodsID = "giftcard"
	ListMethodsIDIdeal          ListMethodsID = "ideal"
	ListMethodsIDIn3            ListMethodsID = "in3"
	ListMethodsIDKbc            ListMethodsID = "kbc"
	ListMethodsIDKlarna         ListMethodsID = "klarna"
	ListMethodsIDKlarnapaylater ListMethodsID = "klarnapaylater"
	ListMethodsIDKlarnapaynow   ListMethodsID = "klarnapaynow"
	ListMethodsIDKlarnasliceit  ListMethodsID = "klarnasliceit"
	ListMethodsIDMbway          ListMethodsID = "mbway"
	ListMethodsIDMultibanco     ListMethodsID = "multibanco"
	ListMethodsIDMybank         ListMethodsID = "mybank"
	ListMethodsIDPaybybank      ListMethodsID = "paybybank"
	ListMethodsIDPayconiq       ListMethodsID = "payconiq"
	ListMethodsIDPaypal         ListMethodsID = "paypal"
	ListMethodsIDPaysafecard    ListMethodsID = "paysafecard"
	ListMethodsIDPointofsale    ListMethodsID = "pointofsale"
	ListMethodsIDPrzelewy24     ListMethodsID = "przelewy24"
	ListMethodsIDRiverty        ListMethodsID = "riverty"
	ListMethodsIDSatispay       ListMethodsID = "satispay"
	ListMethodsIDSwish          ListMethodsID = "swish"
	ListMethodsIDTrustly        ListMethodsID = "trustly"
	ListMethodsIDTwint          ListMethodsID = "twint"
	ListMethodsIDVoucher        ListMethodsID = "voucher"
)

func (e ListMethodsID) ToPointer() *ListMethodsID {
	return &e
}

// ListMethodsMinimumAmount - The minimum payment amount required to use this payment method.
type ListMethodsMinimumAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListMethodsMinimumAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListMethodsMinimumAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListMethodsMaximumAmount - The maximum payment amount allowed when using this payment method. If there is no method-specific maximum, `null`
// is returned instead.
type ListMethodsMaximumAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListMethodsMaximumAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListMethodsMaximumAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListMethodsImage - URLs of images representing the payment method.
type ListMethodsImage struct {
	// The URL pointing to an icon of 32 by 24 pixels.
	Size1x string `json:"size1x"`
	// The URL pointing to an icon of 64 by 48 pixels.
	Size2x string `json:"size2x"`
	// The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can
	// scale to any desired size without compromising visual quality.
	Svg string `json:"svg"`
}

func (o *ListMethodsImage) GetSize1x() string {
	if o == nil {
		return ""
	}
	return o.Size1x
}

func (o *ListMethodsImage) GetSize2x() string {
	if o == nil {
		return ""
	}
	return o.Size2x
}

func (o *ListMethodsImage) GetSvg() string {
	if o == nil {
		return ""
	}
	return o.Svg
}

// ListMethodsStatus - The payment method's activation status for this profile.
type ListMethodsStatus string

const (
	ListMethodsStatusActivated       ListMethodsStatus = "activated"
	ListMethodsStatusPendingBoarding ListMethodsStatus = "pending-boarding"
	ListMethodsStatusPendingReview   ListMethodsStatus = "pending-review"
	ListMethodsStatusPendingExternal ListMethodsStatus = "pending-external"
	ListMethodsStatusRejected        ListMethodsStatus = "rejected"
)

func (e ListMethodsStatus) ToPointer() *ListMethodsStatus {
	return &e
}

// ListMethodsIssuerImage - URLs of images representing the issuer.
// required:
//   - size1x
//   - size2x
//   - svg
type ListMethodsIssuerImage struct {
	// The URL pointing to an icon of 32 by 24 pixels.
	Size1x *string `json:"size1x,omitempty"`
	// The URL pointing to an icon of 64 by 48 pixels.
	Size2x *string `json:"size2x,omitempty"`
	// The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can
	// scale to any desired size without compromising visual quality.
	Svg *string `json:"svg,omitempty"`
}

func (o *ListMethodsIssuerImage) GetSize1x() *string {
	if o == nil {
		return nil
	}
	return o.Size1x
}

func (o *ListMethodsIssuerImage) GetSize2x() *string {
	if o == nil {
		return nil
	}
	return o.Size2x
}

func (o *ListMethodsIssuerImage) GetSvg() *string {
	if o == nil {
		return nil
	}
	return o.Svg
}

type ListMethodsIssuer struct {
	Resource string `json:"resource"`
	ID       string `json:"id"`
	// The full name of the issuer.
	Name string `json:"name"`
	// URLs of images representing the issuer.
	// required:
	//   - size1x
	//   - size2x
	//   - svg
	Image ListMethodsIssuerImage `json:"image"`
}

func (o *ListMethodsIssuer) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *ListMethodsIssuer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListMethodsIssuer) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListMethodsIssuer) GetImage() ListMethodsIssuerImage {
	if o == nil {
		return ListMethodsIssuerImage{}
	}
	return o.Image
}

// ListMethodsMethodSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListMethodsMethodSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListMethodsMethodSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListMethodsMethodSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListMethodsMethodDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListMethodsMethodDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListMethodsMethodDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListMethodsMethodDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListMethodsMethodLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type ListMethodsMethodLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self ListMethodsMethodSelf `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *ListMethodsMethodDocumentation `json:"documentation,omitempty"`
}

func (o *ListMethodsMethodLinks) GetSelf() ListMethodsMethodSelf {
	if o == nil {
		return ListMethodsMethodSelf{}
	}
	return o.Self
}

func (o *ListMethodsMethodLinks) GetDocumentation() *ListMethodsMethodDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

type ListMethodsMethod struct {
	// Indicates the response contains a payment method object. Will always contain the string `method` for this
	// endpoint.
	Resource string `json:"resource"`
	// The unique identifier of the payment method. When used during [payment creation](create-payment), the payment
	// method selection screen will be skipped.
	ID ListMethodsID `json:"id"`
	// The full name of the payment method.
	//
	// If a `locale` parameter is provided, the name is translated to the given locale if possible.
	Description string `json:"description"`
	// The minimum payment amount required to use this payment method.
	MinimumAmount ListMethodsMinimumAmount `json:"minimumAmount"`
	// The maximum payment amount allowed when using this payment method. If there is no method-specific maximum, `null`
	// is returned instead.
	MaximumAmount *ListMethodsMaximumAmount `json:"maximumAmount"`
	// URLs of images representing the payment method.
	Image ListMethodsImage `json:"image"`
	// The payment method's activation status for this profile.
	Status ListMethodsStatus `json:"status"`
	// **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant
	// for iDEAL, KBC/CBC, gift cards, and vouchers.
	Issuers []ListMethodsIssuer `json:"issuers,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links ListMethodsMethodLinks `json:"_links"`
}

func (o *ListMethodsMethod) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *ListMethodsMethod) GetID() ListMethodsID {
	if o == nil {
		return ListMethodsID("")
	}
	return o.ID
}

func (o *ListMethodsMethod) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *ListMethodsMethod) GetMinimumAmount() ListMethodsMinimumAmount {
	if o == nil {
		return ListMethodsMinimumAmount{}
	}
	return o.MinimumAmount
}

func (o *ListMethodsMethod) GetMaximumAmount() *ListMethodsMaximumAmount {
	if o == nil {
		return nil
	}
	return o.MaximumAmount
}

func (o *ListMethodsMethod) GetImage() ListMethodsImage {
	if o == nil {
		return ListMethodsImage{}
	}
	return o.Image
}

func (o *ListMethodsMethod) GetStatus() ListMethodsStatus {
	if o == nil {
		return ListMethodsStatus("")
	}
	return o.Status
}

func (o *ListMethodsMethod) GetIssuers() []ListMethodsIssuer {
	if o == nil {
		return nil
	}
	return o.Issuers
}

func (o *ListMethodsMethod) GetLinks() ListMethodsMethodLinks {
	if o == nil {
		return ListMethodsMethodLinks{}
	}
	return o.Links
}

type ListMethodsEmbedded struct {
	// An array of payment method objects. For a complete
	// reference of the payment method object, refer
	// to the [Get payment method endpoint](get-method)
	// documentation.
	Methods []ListMethodsMethod `json:"methods"`
}

func (o *ListMethodsEmbedded) GetMethods() []ListMethodsMethod {
	if o == nil {
		return []ListMethodsMethod{}
	}
	return o.Methods
}

// ListMethodsSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListMethodsSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListMethodsSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListMethodsSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListMethodsDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListMethodsDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListMethodsDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListMethodsDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListMethodsLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self ListMethodsSelf `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListMethodsDocumentation `json:"documentation"`
}

func (o *ListMethodsLinks) GetSelf() ListMethodsSelf {
	if o == nil {
		return ListMethodsSelf{}
	}
	return o.Self
}

func (o *ListMethodsLinks) GetDocumentation() ListMethodsDocumentation {
	if o == nil {
		return ListMethodsDocumentation{}
	}
	return o.Documentation
}

// ListMethodsResponseBody - A list of payment method objects. For a complete reference of the
// payment method object, refer to the [Get payment method endpoint](get-method) documentation.
type ListMethodsResponseBody struct {
	// The number of payment method objects in this result set.
	// Results are **not** paginated.
	Count    int64               `json:"count"`
	Embedded ListMethodsEmbedded `json:"_embedded"`
	Links    ListMethodsLinks    `json:"_links"`
}

func (o *ListMethodsResponseBody) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListMethodsResponseBody) GetEmbedded() ListMethodsEmbedded {
	if o == nil {
		return ListMethodsEmbedded{}
	}
	return o.Embedded
}

func (o *ListMethodsResponseBody) GetLinks() ListMethodsLinks {
	if o == nil {
		return ListMethodsLinks{}
	}
	return o.Links
}

type ListMethodsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of payment method objects. For a complete reference of the
	// payment method object, refer to the [Get payment method endpoint](get-method) documentation.
	Object *ListMethodsResponseBody
}

func (o *ListMethodsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListMethodsResponse) GetObject() *ListMethodsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
