// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// ListMandatesSort - Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
// newest to oldest.
type ListMandatesSort string

const (
	ListMandatesSortAsc  ListMandatesSort = "asc"
	ListMandatesSortDesc ListMandatesSort = "desc"
)

func (e ListMandatesSort) ToPointer() *ListMandatesSort {
	return &e
}
func (e *ListMandatesSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = ListMandatesSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListMandatesSort: %v", v)
	}
}

type ListMandatesRequest struct {
	// Provide the ID of the related customer.
	CustomerID string `pathParam:"style=simple,explode=false,name=customerId"`
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
	// result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
	// newest to oldest.
	Sort *ListMandatesSort `queryParam:"style=form,explode=true,name=sort"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *ListMandatesRequest) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *ListMandatesRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListMandatesRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListMandatesRequest) GetSort() *ListMandatesSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListMandatesRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// ListMandatesNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type ListMandatesNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListMandatesNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListMandatesNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListMandatesNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListMandatesNotFoundDocumentation `json:"documentation"`
}

func (o *ListMandatesNotFoundLinks) GetDocumentation() ListMandatesNotFoundDocumentation {
	if o == nil {
		return ListMandatesNotFoundDocumentation{}
	}
	return o.Documentation
}

// ListMandatesBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type ListMandatesBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListMandatesBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListMandatesBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListMandatesBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListMandatesBadRequestDocumentation `json:"documentation"`
}

func (o *ListMandatesBadRequestLinks) GetDocumentation() ListMandatesBadRequestDocumentation {
	if o == nil {
		return ListMandatesBadRequestDocumentation{}
	}
	return o.Documentation
}

// ListMandatesMode - Whether this entity was created in live mode or in test mode.
type ListMandatesMode string

const (
	ListMandatesModeLive ListMandatesMode = "live"
	ListMandatesModeTest ListMandatesMode = "test"
)

func (e ListMandatesMode) ToPointer() *ListMandatesMode {
	return &e
}
func (e *ListMandatesMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = ListMandatesMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListMandatesMode: %v", v)
	}
}

// ListMandatesMethod - Payment method of the mandate.
//
// SEPA Direct Debit and PayPal mandates can be created directly.
type ListMandatesMethod string

const (
	ListMandatesMethodCreditcard  ListMandatesMethod = "creditcard"
	ListMandatesMethodDirectdebit ListMandatesMethod = "directdebit"
	ListMandatesMethodPaypal      ListMandatesMethod = "paypal"
)

func (e ListMandatesMethod) ToPointer() *ListMandatesMethod {
	return &e
}
func (e *ListMandatesMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "paypal":
		*e = ListMandatesMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListMandatesMethod: %v", v)
	}
}

// ListMandatesCardLabel - The card's label. Available for card mandates, if the card label could be detected.
type ListMandatesCardLabel string

const (
	ListMandatesCardLabelAmericanExpress ListMandatesCardLabel = "American Express"
	ListMandatesCardLabelCartaSi         ListMandatesCardLabel = "Carta Si"
	ListMandatesCardLabelCarteBleue      ListMandatesCardLabel = "Carte Bleue"
	ListMandatesCardLabelDankort         ListMandatesCardLabel = "Dankort"
	ListMandatesCardLabelDinersClub      ListMandatesCardLabel = "Diners Club"
	ListMandatesCardLabelDiscover        ListMandatesCardLabel = "Discover"
	ListMandatesCardLabelJcb             ListMandatesCardLabel = "JCB"
	ListMandatesCardLabelLaser           ListMandatesCardLabel = "Laser"
	ListMandatesCardLabelMaestro         ListMandatesCardLabel = "Maestro"
	ListMandatesCardLabelMastercard      ListMandatesCardLabel = "Mastercard"
	ListMandatesCardLabelUnionpay        ListMandatesCardLabel = "Unionpay"
	ListMandatesCardLabelVisa            ListMandatesCardLabel = "Visa"
)

func (e ListMandatesCardLabel) ToPointer() *ListMandatesCardLabel {
	return &e
}
func (e *ListMandatesCardLabel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "American Express":
		fallthrough
	case "Carta Si":
		fallthrough
	case "Carte Bleue":
		fallthrough
	case "Dankort":
		fallthrough
	case "Diners Club":
		fallthrough
	case "Discover":
		fallthrough
	case "JCB":
		fallthrough
	case "Laser":
		fallthrough
	case "Maestro":
		fallthrough
	case "Mastercard":
		fallthrough
	case "Unionpay":
		fallthrough
	case "Visa":
		*e = ListMandatesCardLabel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListMandatesCardLabel: %v", v)
	}
}

type ListMandatesDetails struct {
	// The customer's name. Available for SEPA Direct Debit and PayPal mandates.
	ConsumerName *string `json:"consumerName,omitempty"`
	// The customer's IBAN or email address. Available for SEPA Direct Debit and PayPal mandates.
	ConsumerAccount *string `json:"consumerAccount,omitempty"`
	// The BIC of the customer's bank. Available for SEPA Direct Debit mandates.
	ConsumerBic *string `json:"consumerBic,omitempty"`
	// The card holder's name. Available for card mandates.
	CardHolder *string `json:"cardHolder,omitempty"`
	// The last four digits of the card number. Available for card mandates.
	CardNumber *string `json:"cardNumber,omitempty"`
	// The card's expiry date in `YYYY-MM-DD` format. Available for card mandates.
	CardExpiryDate *string `json:"cardExpiryDate,omitempty"`
	// The card's label. Available for card mandates, if the card label could be detected.
	CardLabel *ListMandatesCardLabel `json:"cardLabel,omitempty"`
	// Unique alphanumeric representation of this specific card. Available for card mandates. Can be used to identify
	// returning customers.
	CardFingerprint *string `json:"cardFingerprint,omitempty"`
}

func (o *ListMandatesDetails) GetConsumerName() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerName
}

func (o *ListMandatesDetails) GetConsumerAccount() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerAccount
}

func (o *ListMandatesDetails) GetConsumerBic() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerBic
}

func (o *ListMandatesDetails) GetCardHolder() *string {
	if o == nil {
		return nil
	}
	return o.CardHolder
}

func (o *ListMandatesDetails) GetCardNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardNumber
}

func (o *ListMandatesDetails) GetCardExpiryDate() *string {
	if o == nil {
		return nil
	}
	return o.CardExpiryDate
}

func (o *ListMandatesDetails) GetCardLabel() *ListMandatesCardLabel {
	if o == nil {
		return nil
	}
	return o.CardLabel
}

func (o *ListMandatesDetails) GetCardFingerprint() *string {
	if o == nil {
		return nil
	}
	return o.CardFingerprint
}

// ListMandatesStatus - The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
// when we did not received the IBAN yet from the first payment.
type ListMandatesStatus string

const (
	ListMandatesStatusValid   ListMandatesStatus = "valid"
	ListMandatesStatusPending ListMandatesStatus = "pending"
	ListMandatesStatusInvalid ListMandatesStatus = "invalid"
)

func (e ListMandatesStatus) ToPointer() *ListMandatesStatus {
	return &e
}
func (e *ListMandatesStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "valid":
		fallthrough
	case "pending":
		fallthrough
	case "invalid":
		*e = ListMandatesStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListMandatesStatus: %v", v)
	}
}

// MandateSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type MandateSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *MandateSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *MandateSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListMandatesCustomer - The API resource URL of the [customer](get-customer) that this mandate belongs to.
type ListMandatesCustomer struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListMandatesCustomer) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListMandatesCustomer) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// MandateDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type MandateDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *MandateDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *MandateDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// MandateLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type MandateLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self MandateSelf `json:"self"`
	// The API resource URL of the [customer](get-customer) that this mandate belongs to.
	Customer ListMandatesCustomer `json:"customer"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation MandateDocumentation `json:"documentation"`
}

func (o *MandateLinks) GetSelf() MandateSelf {
	if o == nil {
		return MandateSelf{}
	}
	return o.Self
}

func (o *MandateLinks) GetCustomer() ListMandatesCustomer {
	if o == nil {
		return ListMandatesCustomer{}
	}
	return o.Customer
}

func (o *MandateLinks) GetDocumentation() MandateDocumentation {
	if o == nil {
		return MandateDocumentation{}
	}
	return o.Documentation
}

type ListMandatesMandate struct {
	// Indicates the response contains a mandate object. Will always contain the string `mandate` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this mandate. Example: `mdt_pWUnw6pkBN`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode ListMandatesMode `json:"mode"`
	// Payment method of the mandate.
	//
	// SEPA Direct Debit and PayPal mandates can be created directly.
	Method  ListMandatesMethod  `json:"method"`
	Details ListMandatesDetails `json:"details"`
	// The date when the mandate was signed in `YYYY-MM-DD` format.
	SignatureDate *string `json:"signatureDate"`
	// A custom mandate reference. For SEPA Direct Debit, it is vital to provide a unique reference. Some banks will
	// decline Direct Debit payments if the mandate reference is not unique.
	MandateReference *string `json:"mandateReference"`
	// The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
	// when we did not received the IBAN yet from the first payment.
	Status ListMandatesStatus `json:"status"`
	// The identifier referring to the [customer](get-customer) this mandate was linked to.
	CustomerID string `json:"customerId"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links MandateLinks `json:"_links"`
}

func (o *ListMandatesMandate) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *ListMandatesMandate) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListMandatesMandate) GetMode() ListMandatesMode {
	if o == nil {
		return ListMandatesMode("")
	}
	return o.Mode
}

func (o *ListMandatesMandate) GetMethod() ListMandatesMethod {
	if o == nil {
		return ListMandatesMethod("")
	}
	return o.Method
}

func (o *ListMandatesMandate) GetDetails() ListMandatesDetails {
	if o == nil {
		return ListMandatesDetails{}
	}
	return o.Details
}

func (o *ListMandatesMandate) GetSignatureDate() *string {
	if o == nil {
		return nil
	}
	return o.SignatureDate
}

func (o *ListMandatesMandate) GetMandateReference() *string {
	if o == nil {
		return nil
	}
	return o.MandateReference
}

func (o *ListMandatesMandate) GetStatus() ListMandatesStatus {
	if o == nil {
		return ListMandatesStatus("")
	}
	return o.Status
}

func (o *ListMandatesMandate) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *ListMandatesMandate) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListMandatesMandate) GetLinks() MandateLinks {
	if o == nil {
		return MandateLinks{}
	}
	return o.Links
}

type ListMandatesEmbedded struct {
	// An array of mandate objects.
	Mandates []ListMandatesMandate `json:"mandates,omitempty"`
}

func (o *ListMandatesEmbedded) GetMandates() []ListMandatesMandate {
	if o == nil {
		return nil
	}
	return o.Mandates
}

// ListMandatesSelf - The URL to the current set of items.
type ListMandatesSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListMandatesSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListMandatesSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListMandatesPrevious - The previous set of items, if available.
type ListMandatesPrevious struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListMandatesPrevious) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListMandatesPrevious) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListMandatesNext - The next set of items, if available.
type ListMandatesNext struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListMandatesNext) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListMandatesNext) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListMandatesDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListMandatesDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListMandatesDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListMandatesDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListMandatesLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
type ListMandatesLinks struct {
	// The URL to the current set of items.
	Self ListMandatesSelf `json:"self"`
	// The previous set of items, if available.
	Previous *ListMandatesPrevious `json:"previous"`
	// The next set of items, if available.
	Next *ListMandatesNext `json:"next"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListMandatesDocumentation `json:"documentation"`
}

func (o *ListMandatesLinks) GetSelf() ListMandatesSelf {
	if o == nil {
		return ListMandatesSelf{}
	}
	return o.Self
}

func (o *ListMandatesLinks) GetPrevious() *ListMandatesPrevious {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *ListMandatesLinks) GetNext() *ListMandatesNext {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListMandatesLinks) GetDocumentation() ListMandatesDocumentation {
	if o == nil {
		return ListMandatesDocumentation{}
	}
	return o.Documentation
}

// ListMandatesResponseBody - A list of mandate objects.
type ListMandatesResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    *int64                `json:"count,omitempty"`
	Embedded *ListMandatesEmbedded `json:"_embedded,omitempty"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links *ListMandatesLinks `json:"_links,omitempty"`
}

func (o *ListMandatesResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ListMandatesResponseBody) GetEmbedded() *ListMandatesEmbedded {
	if o == nil {
		return nil
	}
	return o.Embedded
}

func (o *ListMandatesResponseBody) GetLinks() *ListMandatesLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type ListMandatesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of mandate objects.
	Object *ListMandatesResponseBody
}

func (o *ListMandatesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListMandatesResponse) GetObject() *ListMandatesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
