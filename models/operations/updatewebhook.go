// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// UpdateWebhookEventTypes - The list of events to enable for this webhook. You may specify `'*'` to add all events, except those that require explicit selection. Separate multiple event types with a comma.
type UpdateWebhookEventTypes string

const (
	UpdateWebhookEventTypesPaymentLinkPaid           UpdateWebhookEventTypes = "payment-link.paid"
	UpdateWebhookEventTypesBalanceTransactionCreated UpdateWebhookEventTypes = "balance-transaction.created"
	UpdateWebhookEventTypesSalesInvoiceCreated       UpdateWebhookEventTypes = "sales-invoice.created"
	UpdateWebhookEventTypesSalesInvoiceIssued        UpdateWebhookEventTypes = "sales-invoice.issued"
	UpdateWebhookEventTypesSalesInvoiceCanceled      UpdateWebhookEventTypes = "sales-invoice.canceled"
	UpdateWebhookEventTypesSalesInvoicePaid          UpdateWebhookEventTypes = "sales-invoice.paid"
)

func (e UpdateWebhookEventTypes) ToPointer() *UpdateWebhookEventTypes {
	return &e
}
func (e *UpdateWebhookEventTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-link.paid":
		fallthrough
	case "balance-transaction.created":
		fallthrough
	case "sales-invoice.created":
		fallthrough
	case "sales-invoice.issued":
		fallthrough
	case "sales-invoice.canceled":
		fallthrough
	case "sales-invoice.paid":
		*e = UpdateWebhookEventTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateWebhookEventTypes: %v", v)
	}
}

type UpdateWebhookRequestBody struct {
	// A name that identifies the webhook.
	Name *string `json:"name,omitempty"`
	// The URL Mollie will send the events to. This URL must be publicly accessible.
	URL *string `json:"url,omitempty"`
	// The list of events to enable for this webhook. You may specify `'*'` to add all events, except those that require explicit selection. Separate multiple event types with a comma.
	EventTypes *UpdateWebhookEventTypes `json:"eventTypes,omitempty"`
	// Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
	// such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `json:"testmode,omitempty"`
}

func (o *UpdateWebhookRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateWebhookRequestBody) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *UpdateWebhookRequestBody) GetEventTypes() *UpdateWebhookEventTypes {
	if o == nil {
		return nil
	}
	return o.EventTypes
}

func (o *UpdateWebhookRequestBody) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

type UpdateWebhookRequest struct {
	// Provide the ID of the item you want to perform this operation on.
	ID          string                    `pathParam:"style=simple,explode=false,name=id"`
	RequestBody *UpdateWebhookRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateWebhookRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateWebhookRequest) GetRequestBody() *UpdateWebhookRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// UpdateWebhookUnprocessableEntityDocumentation - The URL to the generic Mollie API error handling guide.
type UpdateWebhookUnprocessableEntityDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *UpdateWebhookUnprocessableEntityDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateWebhookUnprocessableEntityDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type UpdateWebhookUnprocessableEntityLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation UpdateWebhookUnprocessableEntityDocumentation `json:"documentation"`
}

func (o *UpdateWebhookUnprocessableEntityLinks) GetDocumentation() UpdateWebhookUnprocessableEntityDocumentation {
	if o == nil {
		return UpdateWebhookUnprocessableEntityDocumentation{}
	}
	return o.Documentation
}

// UpdateWebhookNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type UpdateWebhookNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *UpdateWebhookNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateWebhookNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type UpdateWebhookNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation UpdateWebhookNotFoundDocumentation `json:"documentation"`
}

func (o *UpdateWebhookNotFoundLinks) GetDocumentation() UpdateWebhookNotFoundDocumentation {
	if o == nil {
		return UpdateWebhookNotFoundDocumentation{}
	}
	return o.Documentation
}

// UpdateWebhookStatus - The subscription's current status.
type UpdateWebhookStatus string

const (
	UpdateWebhookStatusEnabled  UpdateWebhookStatus = "enabled"
	UpdateWebhookStatusBlocked  UpdateWebhookStatus = "blocked"
	UpdateWebhookStatusDisabled UpdateWebhookStatus = "disabled"
	UpdateWebhookStatusDeleted  UpdateWebhookStatus = "deleted"
)

func (e UpdateWebhookStatus) ToPointer() *UpdateWebhookStatus {
	return &e
}

// UpdateWebhookMode - The subscription's mode.
type UpdateWebhookMode string

const (
	UpdateWebhookModeLive UpdateWebhookMode = "live"
	UpdateWebhookModeTest UpdateWebhookMode = "test"
)

func (e UpdateWebhookMode) ToPointer() *UpdateWebhookMode {
	return &e
}

// UpdateWebhookResponseBody - The webhook object.
type UpdateWebhookResponseBody struct {
	// Indicates the response contains a webhook subscription object.
	// Will always contain the string `webhook` for this endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this subscription.
	ID *string `json:"id,omitempty"`
	// The subscription's events destination.
	URL *string `json:"url,omitempty"`
	// The identifier uniquely referring to the profile that created the subscription.
	ProfileID *string `json:"profileId,omitempty"`
	// The subscription's date time of creation.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The subscription's name.
	Name *string `json:"name,omitempty"`
	// The events types that are subscribed.
	EventTypes []string `json:"eventTypes,omitempty"`
	// The subscription's current status.
	Status *UpdateWebhookStatus `json:"status,omitempty"`
	// The subscription's mode.
	Mode *UpdateWebhookMode `json:"mode,omitempty"`
}

func (o *UpdateWebhookResponseBody) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *UpdateWebhookResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateWebhookResponseBody) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *UpdateWebhookResponseBody) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *UpdateWebhookResponseBody) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateWebhookResponseBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateWebhookResponseBody) GetEventTypes() []string {
	if o == nil {
		return nil
	}
	return o.EventTypes
}

func (o *UpdateWebhookResponseBody) GetStatus() *UpdateWebhookStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateWebhookResponseBody) GetMode() *UpdateWebhookMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

type UpdateWebhookResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The webhook object.
	Object *UpdateWebhookResponseBody
}

func (o *UpdateWebhookResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateWebhookResponse) GetObject() *UpdateWebhookResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
