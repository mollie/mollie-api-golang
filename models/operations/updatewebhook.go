// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type UpdateWebhookRequestBody struct {
	// A name that identifies the webhook.
	Name *string `json:"name,omitempty"`
	// The URL Mollie will send the events to. This URL must be publicly accessible.
	URL *string `json:"url,omitempty"`
	// The event's type
	WebhookEventTypes *components.WebhookEventTypes `json:"eventTypes,omitempty"`
	// Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
	// such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `json:"testmode,omitempty"`
}

func (u *UpdateWebhookRequestBody) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateWebhookRequestBody) GetURL() *string {
	if u == nil {
		return nil
	}
	return u.URL
}

func (u *UpdateWebhookRequestBody) GetWebhookEventTypes() *components.WebhookEventTypes {
	if u == nil {
		return nil
	}
	return u.WebhookEventTypes
}

func (u *UpdateWebhookRequestBody) GetTestmode() *bool {
	if u == nil {
		return nil
	}
	return u.Testmode
}

type UpdateWebhookRequest struct {
	// Provide the ID of the item you want to perform this operation on.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// A unique key to ensure idempotent requests. This key should be a UUID v4 string.
	IdempotencyKey *string                   `header:"style=simple,explode=false,name=idempotency-key"`
	RequestBody    *UpdateWebhookRequestBody `request:"mediaType=application/json"`
}

func (u *UpdateWebhookRequest) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

func (u *UpdateWebhookRequest) GetIdempotencyKey() *string {
	if u == nil {
		return nil
	}
	return u.IdempotencyKey
}

func (u *UpdateWebhookRequest) GetRequestBody() *UpdateWebhookRequestBody {
	if u == nil {
		return nil
	}
	return u.RequestBody
}

type UpdateWebhookResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The webhook object.
	EntityWebhook *components.EntityWebhook
}

func (u *UpdateWebhookResponse) GetHTTPMeta() components.HTTPMetadata {
	if u == nil {
		return components.HTTPMetadata{}
	}
	return u.HTTPMeta
}

func (u *UpdateWebhookResponse) GetEntityWebhook() *components.EntityWebhook {
	if u == nil {
		return nil
	}
	return u.EntityWebhook
}
