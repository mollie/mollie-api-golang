// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
)

type CancelSubscriptionRequestBody struct {
	// Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
	// such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `json:"testmode,omitempty"`
}

func (o *CancelSubscriptionRequestBody) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

type CancelSubscriptionRequest struct {
	// Provide the ID of the related customer.
	CustomerID string `pathParam:"style=simple,explode=false,name=customerId"`
	// Provide the ID of the related subscription.
	SubscriptionID string                         `pathParam:"style=simple,explode=false,name=subscriptionId"`
	RequestBody    *CancelSubscriptionRequestBody `request:"mediaType=application/json"`
}

func (o *CancelSubscriptionRequest) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *CancelSubscriptionRequest) GetSubscriptionID() string {
	if o == nil {
		return ""
	}
	return o.SubscriptionID
}

func (o *CancelSubscriptionRequest) GetRequestBody() *CancelSubscriptionRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// CancelSubscriptionNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type CancelSubscriptionNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *CancelSubscriptionNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelSubscriptionNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CancelSubscriptionNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation CancelSubscriptionNotFoundDocumentation `json:"documentation"`
}

func (o *CancelSubscriptionNotFoundLinks) GetDocumentation() CancelSubscriptionNotFoundDocumentation {
	if o == nil {
		return CancelSubscriptionNotFoundDocumentation{}
	}
	return o.Documentation
}

// CancelSubscriptionMode - Whether this entity was created in live mode or in test mode.
type CancelSubscriptionMode string

const (
	CancelSubscriptionModeLive CancelSubscriptionMode = "live"
	CancelSubscriptionModeTest CancelSubscriptionMode = "test"
)

func (e CancelSubscriptionMode) ToPointer() *CancelSubscriptionMode {
	return &e
}
func (e *CancelSubscriptionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = CancelSubscriptionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelSubscriptionMode: %v", v)
	}
}

// CancelSubscriptionStatus - The subscription's current status is directly related to the status of the underlying customer or mandate that is
// enabling the subscription.
type CancelSubscriptionStatus string

const (
	CancelSubscriptionStatusPending   CancelSubscriptionStatus = "pending"
	CancelSubscriptionStatusActive    CancelSubscriptionStatus = "active"
	CancelSubscriptionStatusCanceled  CancelSubscriptionStatus = "canceled"
	CancelSubscriptionStatusSuspended CancelSubscriptionStatus = "suspended"
	CancelSubscriptionStatusCompleted CancelSubscriptionStatus = "completed"
)

func (e CancelSubscriptionStatus) ToPointer() *CancelSubscriptionStatus {
	return &e
}
func (e *CancelSubscriptionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "active":
		fallthrough
	case "canceled":
		fallthrough
	case "suspended":
		fallthrough
	case "completed":
		*e = CancelSubscriptionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelSubscriptionStatus: %v", v)
	}
}

// CancelSubscriptionAmount - The amount for each individual payment that is charged with this subscription. For example, for a monthly
// subscription of €10, the subscription amount should be set to €10.
type CancelSubscriptionAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CancelSubscriptionAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CancelSubscriptionAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CancelSubscriptionMethod - The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
type CancelSubscriptionMethod string

const (
	CancelSubscriptionMethodCreditcard  CancelSubscriptionMethod = "creditcard"
	CancelSubscriptionMethodDirectdebit CancelSubscriptionMethod = "directdebit"
	CancelSubscriptionMethodPaypal      CancelSubscriptionMethod = "paypal"
)

func (e CancelSubscriptionMethod) ToPointer() *CancelSubscriptionMethod {
	return &e
}
func (e *CancelSubscriptionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "paypal":
		*e = CancelSubscriptionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelSubscriptionMethod: %v", v)
	}
}

// CancelSubscriptionApplicationFeeAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type CancelSubscriptionApplicationFeeAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CancelSubscriptionApplicationFeeAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CancelSubscriptionApplicationFeeAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CancelSubscriptionApplicationFee - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
//
// Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
// information.
type CancelSubscriptionApplicationFee struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount      CancelSubscriptionApplicationFeeAmount `json:"amount"`
	Description string                                 `json:"description"`
}

func (o *CancelSubscriptionApplicationFee) GetAmount() CancelSubscriptionApplicationFeeAmount {
	if o == nil {
		return CancelSubscriptionApplicationFeeAmount{}
	}
	return o.Amount
}

func (o *CancelSubscriptionApplicationFee) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

type CancelSubscriptionMetadataType string

const (
	CancelSubscriptionMetadataTypeStr        CancelSubscriptionMetadataType = "str"
	CancelSubscriptionMetadataTypeMapOfAny   CancelSubscriptionMetadataType = "mapOfAny"
	CancelSubscriptionMetadataTypeArrayOfStr CancelSubscriptionMetadataType = "arrayOfStr"
)

// CancelSubscriptionMetadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
// Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
// 1kB.
//
// Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
type CancelSubscriptionMetadata struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type CancelSubscriptionMetadataType
}

func CreateCancelSubscriptionMetadataStr(str string) CancelSubscriptionMetadata {
	typ := CancelSubscriptionMetadataTypeStr

	return CancelSubscriptionMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelSubscriptionMetadataMapOfAny(mapOfAny map[string]any) CancelSubscriptionMetadata {
	typ := CancelSubscriptionMetadataTypeMapOfAny

	return CancelSubscriptionMetadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateCancelSubscriptionMetadataArrayOfStr(arrayOfStr []string) CancelSubscriptionMetadata {
	typ := CancelSubscriptionMetadataTypeArrayOfStr

	return CancelSubscriptionMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CancelSubscriptionMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CancelSubscriptionMetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CancelSubscriptionMetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CancelSubscriptionMetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelSubscriptionMetadata", string(data))
}

func (u CancelSubscriptionMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CancelSubscriptionMetadata: all fields are null")
}

// CancelSubscriptionSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CancelSubscriptionSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelSubscriptionSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelSubscriptionSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelSubscriptionCustomer - The API resource URL of the [customer](get-customer) this subscription was created for.
type CancelSubscriptionCustomer struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *CancelSubscriptionCustomer) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *CancelSubscriptionCustomer) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// CancelSubscriptionMandate - The API resource URL of the [mandate](get-mandate) this subscription was created for.
type CancelSubscriptionMandate struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *CancelSubscriptionMandate) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *CancelSubscriptionMandate) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// CancelSubscriptionProfile - The API resource URL of the [profile](get-profile) this subscription was created for.
type CancelSubscriptionProfile struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *CancelSubscriptionProfile) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *CancelSubscriptionProfile) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// CancelSubscriptionPayments - The API resource URL of the [payments](list-payments) created for this subscription. Omitted if no such
// payments exist (yet).
type CancelSubscriptionPayments struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *CancelSubscriptionPayments) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *CancelSubscriptionPayments) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// CancelSubscriptionDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CancelSubscriptionDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CancelSubscriptionDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CancelSubscriptionDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CancelSubscriptionLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type CancelSubscriptionLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self CancelSubscriptionSelf `json:"self"`
	// The API resource URL of the [customer](get-customer) this subscription was created for.
	Customer *CancelSubscriptionCustomer `json:"customer"`
	// The API resource URL of the [mandate](get-mandate) this subscription was created for.
	Mandate *CancelSubscriptionMandate `json:"mandate,omitempty"`
	// The API resource URL of the [profile](get-profile) this subscription was created for.
	Profile *CancelSubscriptionProfile `json:"profile"`
	// The API resource URL of the [payments](list-payments) created for this subscription. Omitted if no such
	// payments exist (yet).
	Payments *CancelSubscriptionPayments `json:"payments,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation CancelSubscriptionDocumentation `json:"documentation"`
}

func (o *CancelSubscriptionLinks) GetSelf() CancelSubscriptionSelf {
	if o == nil {
		return CancelSubscriptionSelf{}
	}
	return o.Self
}

func (o *CancelSubscriptionLinks) GetCustomer() *CancelSubscriptionCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *CancelSubscriptionLinks) GetMandate() *CancelSubscriptionMandate {
	if o == nil {
		return nil
	}
	return o.Mandate
}

func (o *CancelSubscriptionLinks) GetProfile() *CancelSubscriptionProfile {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *CancelSubscriptionLinks) GetPayments() *CancelSubscriptionPayments {
	if o == nil {
		return nil
	}
	return o.Payments
}

func (o *CancelSubscriptionLinks) GetDocumentation() CancelSubscriptionDocumentation {
	if o == nil {
		return CancelSubscriptionDocumentation{}
	}
	return o.Documentation
}

// CancelSubscriptionResponseBody - The updated subscription object with status `canceled`. For a complete reference of the subscription object,
// refer to the [Get subscription endpoint](get-subscription) documentation.
type CancelSubscriptionResponseBody struct {
	// Indicates the response contains a subscription object. Will always contain the string `subscription` for this
	// endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this subscription. Example: `sub_rVKGtNd6s3`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode CancelSubscriptionMode `json:"mode"`
	// The subscription's current status is directly related to the status of the underlying customer or mandate that is
	// enabling the subscription.
	Status CancelSubscriptionStatus `json:"status"`
	// The amount for each individual payment that is charged with this subscription. For example, for a monthly
	// subscription of €10, the subscription amount should be set to €10.
	Amount CancelSubscriptionAmount `json:"amount"`
	// Total number of payments for the subscription. Once this number of payments is reached, the subscription is
	// considered completed.
	//
	// Test mode subscriptions will get canceled automatically after 10 payments.
	Times *int64 `json:"times"`
	// Number of payments left for the subscription.
	TimesRemaining *int64 `json:"timesRemaining"`
	// Interval to wait between payments, for example `1 month` or `14 days`.
	//
	// The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval string `json:"interval"`
	// The start date of the subscription in `YYYY-MM-DD` format.
	StartDate string `json:"startDate"`
	// The date of the next scheduled payment in `YYYY-MM-DD` format. If the subscription has been completed or canceled,
	// this parameter will not be returned.
	NextPaymentDate *string `json:"nextPaymentDate,omitempty"`
	// The subscription's description will be used as the description of the resulting individual payments and so showing
	// up on the bank statement of the consumer.
	//
	// **Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
	Description string `json:"description"`
	// The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
	Method *CancelSubscriptionMethod `json:"method"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
	//
	// Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
	// information.
	ApplicationFee *CancelSubscriptionApplicationFee `json:"applicationFee,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
	// Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
	// 1kB.
	//
	// Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
	Metadata *CancelSubscriptionMetadata `json:"metadata"`
	// We will call this URL for any payment status changes of payments resulting from this subscription.
	//
	// This webhook will receive **all** events for the subscription's payments. This may include payment failures as
	// well. Be sure to verify the payment's subscription ID and its status.
	WebhookURL string `json:"webhookUrl"`
	// The customer this subscription belongs to.
	CustomerID string `json:"customerId"`
	// The mandate used for this subscription, if any.
	MandateID *string `json:"mandateId,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The subscription's date and time of cancellation, in ISO 8601 format. This parameter is omitted if the
	// subscription is not canceled (yet).
	CanceledAt *string `json:"canceledAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links CancelSubscriptionLinks `json:"_links"`
}

func (o *CancelSubscriptionResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *CancelSubscriptionResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelSubscriptionResponseBody) GetMode() CancelSubscriptionMode {
	if o == nil {
		return CancelSubscriptionMode("")
	}
	return o.Mode
}

func (o *CancelSubscriptionResponseBody) GetStatus() CancelSubscriptionStatus {
	if o == nil {
		return CancelSubscriptionStatus("")
	}
	return o.Status
}

func (o *CancelSubscriptionResponseBody) GetAmount() CancelSubscriptionAmount {
	if o == nil {
		return CancelSubscriptionAmount{}
	}
	return o.Amount
}

func (o *CancelSubscriptionResponseBody) GetTimes() *int64 {
	if o == nil {
		return nil
	}
	return o.Times
}

func (o *CancelSubscriptionResponseBody) GetTimesRemaining() *int64 {
	if o == nil {
		return nil
	}
	return o.TimesRemaining
}

func (o *CancelSubscriptionResponseBody) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *CancelSubscriptionResponseBody) GetStartDate() string {
	if o == nil {
		return ""
	}
	return o.StartDate
}

func (o *CancelSubscriptionResponseBody) GetNextPaymentDate() *string {
	if o == nil {
		return nil
	}
	return o.NextPaymentDate
}

func (o *CancelSubscriptionResponseBody) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CancelSubscriptionResponseBody) GetMethod() *CancelSubscriptionMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CancelSubscriptionResponseBody) GetApplicationFee() *CancelSubscriptionApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *CancelSubscriptionResponseBody) GetMetadata() *CancelSubscriptionMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CancelSubscriptionResponseBody) GetWebhookURL() string {
	if o == nil {
		return ""
	}
	return o.WebhookURL
}

func (o *CancelSubscriptionResponseBody) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *CancelSubscriptionResponseBody) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *CancelSubscriptionResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CancelSubscriptionResponseBody) GetCanceledAt() *string {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CancelSubscriptionResponseBody) GetLinks() CancelSubscriptionLinks {
	if o == nil {
		return CancelSubscriptionLinks{}
	}
	return o.Links
}

type CancelSubscriptionResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The updated subscription object with status `canceled`. For a complete reference of the subscription object,
	// refer to the [Get subscription endpoint](get-subscription) documentation.
	Object *CancelSubscriptionResponseBody
}

func (o *CancelSubscriptionResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CancelSubscriptionResponse) GetObject() *CancelSubscriptionResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
