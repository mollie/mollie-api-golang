// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type ListBalanceTransactionsRequest struct {
	// Provide the ID of the related balance.
	BalanceID string `pathParam:"style=simple,explode=false,name=balanceId"`
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
	// result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *ListBalanceTransactionsRequest) GetBalanceID() string {
	if o == nil {
		return ""
	}
	return o.BalanceID
}

func (o *ListBalanceTransactionsRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListBalanceTransactionsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListBalanceTransactionsRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// TooManyRequestsDocumentation - The URL to the generic Mollie API error handling guide.
type TooManyRequestsDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *TooManyRequestsDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *TooManyRequestsDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type TooManyRequestsLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation TooManyRequestsDocumentation `json:"documentation"`
}

func (o *TooManyRequestsLinks) GetDocumentation() TooManyRequestsDocumentation {
	if o == nil {
		return TooManyRequestsDocumentation{}
	}
	return o.Documentation
}

// ListBalanceTransactionsNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type ListBalanceTransactionsNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListBalanceTransactionsNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListBalanceTransactionsNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListBalanceTransactionsNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListBalanceTransactionsNotFoundDocumentation `json:"documentation"`
}

func (o *ListBalanceTransactionsNotFoundLinks) GetDocumentation() ListBalanceTransactionsNotFoundDocumentation {
	if o == nil {
		return ListBalanceTransactionsNotFoundDocumentation{}
	}
	return o.Documentation
}

// ListBalanceTransactionsBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type ListBalanceTransactionsBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListBalanceTransactionsBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListBalanceTransactionsBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListBalanceTransactionsBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListBalanceTransactionsBadRequestDocumentation `json:"documentation"`
}

func (o *ListBalanceTransactionsBadRequestLinks) GetDocumentation() ListBalanceTransactionsBadRequestDocumentation {
	if o == nil {
		return ListBalanceTransactionsBadRequestDocumentation{}
	}
	return o.Documentation
}

// ListBalanceTransactionsType - The type of transaction, for example `payment` or `refund`. Values include the below examples, although this list
// is not definitive.
//
// * Regular payment processing: `payment` `capture` `unauthorized-direct-debit` `failed-payment`
// * Refunds and chargebacks: `refund` `returned-refund` `chargeback` `chargeback-reversal`
// * Settlements: `outgoing-transfer` `canceled-outgoing-transfer` `returned-transfer`
// * Invoicing: `invoice-compensation` `balance-correction`
// * Mollie Connect: `application-fee` `split-payment` `platform-payment-refund` `platform-payment-chargeback`
type ListBalanceTransactionsType string

const (
	ListBalanceTransactionsTypeApplicationFee                    ListBalanceTransactionsType = "application-fee"
	ListBalanceTransactionsTypeCapture                           ListBalanceTransactionsType = "capture"
	ListBalanceTransactionsTypeChargeback                        ListBalanceTransactionsType = "chargeback"
	ListBalanceTransactionsTypeChargebackReversal                ListBalanceTransactionsType = "chargeback-reversal"
	ListBalanceTransactionsTypeFailedPaymentFee                  ListBalanceTransactionsType = "failed-payment-fee"
	ListBalanceTransactionsTypeFailedPayment                     ListBalanceTransactionsType = "failed-payment"
	ListBalanceTransactionsTypeInvoiceCompensation               ListBalanceTransactionsType = "invoice-compensation"
	ListBalanceTransactionsTypePayment                           ListBalanceTransactionsType = "payment"
	ListBalanceTransactionsTypePaymentFee                        ListBalanceTransactionsType = "payment-fee"
	ListBalanceTransactionsTypePaymentCommission                 ListBalanceTransactionsType = "payment-commission"
	ListBalanceTransactionsTypeRefund                            ListBalanceTransactionsType = "refund"
	ListBalanceTransactionsTypeReturnedRefund                    ListBalanceTransactionsType = "returned-refund"
	ListBalanceTransactionsTypeReturnedTransfer                  ListBalanceTransactionsType = "returned-transfer"
	ListBalanceTransactionsTypeSplitPayment                      ListBalanceTransactionsType = "split-payment"
	ListBalanceTransactionsTypeOutgoingTransfer                  ListBalanceTransactionsType = "outgoing-transfer"
	ListBalanceTransactionsTypeCaptureCommission                 ListBalanceTransactionsType = "capture-commission"
	ListBalanceTransactionsTypeCanceledOutgoingTransfer          ListBalanceTransactionsType = "canceled-outgoing-transfer"
	ListBalanceTransactionsTypeIncomingTransfer                  ListBalanceTransactionsType = "incoming-transfer"
	ListBalanceTransactionsTypeAPIPaymentRollingReserveRelease   ListBalanceTransactionsType = "api-payment-rolling-reserve-release"
	ListBalanceTransactionsTypeCaptureRollingReserveRelease      ListBalanceTransactionsType = "capture-rolling-reserve-release"
	ListBalanceTransactionsTypeReimbursementFee                  ListBalanceTransactionsType = "reimbursement-fee"
	ListBalanceTransactionsTypeBalanceCorrection                 ListBalanceTransactionsType = "balance-correction"
	ListBalanceTransactionsTypeUnauthorizedDirectDebit           ListBalanceTransactionsType = "unauthorized-direct-debit"
	ListBalanceTransactionsTypeBankChargedFailureFee             ListBalanceTransactionsType = "bank-charged-failure-fee"
	ListBalanceTransactionsTypePlatformPaymentRefund             ListBalanceTransactionsType = "platform-payment-refund"
	ListBalanceTransactionsTypeRefundCompensation                ListBalanceTransactionsType = "refund-compensation"
	ListBalanceTransactionsTypeReturnedRefundCompensation        ListBalanceTransactionsType = "returned-refund-compensation"
	ListBalanceTransactionsTypeReturnedPlatformPaymentRefund     ListBalanceTransactionsType = "returned-platform-payment-refund"
	ListBalanceTransactionsTypePlatformPaymentChargeback         ListBalanceTransactionsType = "platform-payment-chargeback"
	ListBalanceTransactionsTypeChargebackCompensation            ListBalanceTransactionsType = "chargeback-compensation"
	ListBalanceTransactionsTypeReversedPlatformPaymentChargeback ListBalanceTransactionsType = "reversed-platform-payment-chargeback"
	ListBalanceTransactionsTypeReversedChargebackCompensation    ListBalanceTransactionsType = "reversed-chargeback-compensation"
	ListBalanceTransactionsTypeFailedSplitPaymentPlatform        ListBalanceTransactionsType = "failed-split-payment-platform"
	ListBalanceTransactionsTypeFailedSplitPaymentCompensation    ListBalanceTransactionsType = "failed-split-payment-compensation"
	ListBalanceTransactionsTypeCashAdvanceLoan                   ListBalanceTransactionsType = "cash-advance-loan"
	ListBalanceTransactionsTypePlatformConnectedOrganizationsFee ListBalanceTransactionsType = "platform-connected-organizations-fee"
	ListBalanceTransactionsTypeSplitTransaction                  ListBalanceTransactionsType = "split-transaction"
	ListBalanceTransactionsTypeManagedFee                        ListBalanceTransactionsType = "managed-fee"
	ListBalanceTransactionsTypeReturnedManagedFee                ListBalanceTransactionsType = "returned-managed-fee"
	ListBalanceTransactionsTypeTopup                             ListBalanceTransactionsType = "topup"
	ListBalanceTransactionsTypeBalanceReserve                    ListBalanceTransactionsType = "balance-reserve"
	ListBalanceTransactionsTypeBalanceReserveReturn              ListBalanceTransactionsType = "balance-reserve-return"
	ListBalanceTransactionsTypeMovement                          ListBalanceTransactionsType = "movement"
	ListBalanceTransactionsTypePostPaymentSplitPayment           ListBalanceTransactionsType = "post-payment-split-payment"
	ListBalanceTransactionsTypeCashCollateralIssuance            ListBalanceTransactionsType = "cash-collateral-issuance"
	ListBalanceTransactionsTypeCashCollateralRelease             ListBalanceTransactionsType = "cash-collateral-release"
)

func (e ListBalanceTransactionsType) ToPointer() *ListBalanceTransactionsType {
	return &e
}

// ResultAmount - The final amount that was moved to or from the balance. If the transaction moves funds away from the balance, for
// example when it concerns a refund, the amount will be negative.
type ResultAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ResultAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ResultAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// InitialAmount - The amount that was to be moved to or from the balance, excluding deductions. If the transaction moves funds away
// from the balance, for example when it concerns a refund, the amount will be negative.
type InitialAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *InitialAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *InitialAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// Deductions - The total amount of deductions withheld from the movement. For example, if we charge a €0.29 fee on a €10 payment,
// the deductions amount will be `{"currency":"EUR", "value":"-0.29"}`.
//
// When moving funds to a balance, we always round the deduction to a 'real' amount. Any differences between these
// real-time rounded amounts and the final invoice will be compensated when the invoice is generated.
type Deductions struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *Deductions) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *Deductions) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type ListBalanceTransactionsPayment struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (o *ListBalanceTransactionsPayment) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ListBalanceTransactionsPayment) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

type ListBalanceTransactionsCapture struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	CaptureID          *string `json:"captureId,omitempty"`
	CaptureDescription *string `json:"captureDescription,omitempty"`
}

func (o *ListBalanceTransactionsCapture) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ListBalanceTransactionsCapture) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ListBalanceTransactionsCapture) GetCaptureID() *string {
	if o == nil {
		return nil
	}
	return o.CaptureID
}

func (o *ListBalanceTransactionsCapture) GetCaptureDescription() *string {
	if o == nil {
		return nil
	}
	return o.CaptureDescription
}

type CaptureCommision struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	CaptureID          *string `json:"captureId,omitempty"`
	CaptureDescription *string `json:"captureDescription,omitempty"`
}

func (o *CaptureCommision) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *CaptureCommision) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *CaptureCommision) GetCaptureID() *string {
	if o == nil {
		return nil
	}
	return o.CaptureID
}

func (o *CaptureCommision) GetCaptureDescription() *string {
	if o == nil {
		return nil
	}
	return o.CaptureDescription
}

type CaptureRollingReserveRelease struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	CaptureID          *string `json:"captureId,omitempty"`
	CaptureDescription *string `json:"captureDescription,omitempty"`
}

func (o *CaptureRollingReserveRelease) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *CaptureRollingReserveRelease) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *CaptureRollingReserveRelease) GetCaptureID() *string {
	if o == nil {
		return nil
	}
	return o.CaptureID
}

func (o *CaptureRollingReserveRelease) GetCaptureDescription() *string {
	if o == nil {
		return nil
	}
	return o.CaptureDescription
}

type UnauthorizedDirectDebit struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (o *UnauthorizedDirectDebit) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *UnauthorizedDirectDebit) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

type FailedPayment struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (o *FailedPayment) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *FailedPayment) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

type ListBalanceTransactionsRefund struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (o *ListBalanceTransactionsRefund) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ListBalanceTransactionsRefund) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ListBalanceTransactionsRefund) GetRefundID() *string {
	if o == nil {
		return nil
	}
	return o.RefundID
}

func (o *ListBalanceTransactionsRefund) GetRefundDescription() *string {
	if o == nil {
		return nil
	}
	return o.RefundDescription
}

type RefundCompensation struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (o *RefundCompensation) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *RefundCompensation) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *RefundCompensation) GetRefundID() *string {
	if o == nil {
		return nil
	}
	return o.RefundID
}

func (o *RefundCompensation) GetRefundDescription() *string {
	if o == nil {
		return nil
	}
	return o.RefundDescription
}

type ReturnedRefund struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (o *ReturnedRefund) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ReturnedRefund) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ReturnedRefund) GetRefundID() *string {
	if o == nil {
		return nil
	}
	return o.RefundID
}

func (o *ReturnedRefund) GetRefundDescription() *string {
	if o == nil {
		return nil
	}
	return o.RefundDescription
}

type ReturnedRefundCompensation struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (o *ReturnedRefundCompensation) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ReturnedRefundCompensation) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ReturnedRefundCompensation) GetRefundID() *string {
	if o == nil {
		return nil
	}
	return o.RefundID
}

func (o *ReturnedRefundCompensation) GetRefundDescription() *string {
	if o == nil {
		return nil
	}
	return o.RefundDescription
}

type ListBalanceTransactionsChargeback struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (o *ListBalanceTransactionsChargeback) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ListBalanceTransactionsChargeback) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ListBalanceTransactionsChargeback) GetChargebackID() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackID
}

func (o *ListBalanceTransactionsChargeback) GetChargebackDescription() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackDescription
}

type ChargebackReversal struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (o *ChargebackReversal) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ChargebackReversal) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ChargebackReversal) GetChargebackID() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackID
}

func (o *ChargebackReversal) GetChargebackDescription() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackDescription
}

type ChargebackCompensation struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (o *ChargebackCompensation) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ChargebackCompensation) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ChargebackCompensation) GetChargebackID() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackID
}

func (o *ChargebackCompensation) GetChargebackDescription() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackDescription
}

type ReversedChargebackCompensation struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (o *ReversedChargebackCompensation) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ReversedChargebackCompensation) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ReversedChargebackCompensation) GetChargebackID() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackID
}

func (o *ReversedChargebackCompensation) GetChargebackDescription() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackDescription
}

type OutgoingTransfer struct {
	TransferID   *string `json:"transferId,omitempty"`
	SettlementID *string `json:"settlementId,omitempty"`
}

func (o *OutgoingTransfer) GetTransferID() *string {
	if o == nil {
		return nil
	}
	return o.TransferID
}

func (o *OutgoingTransfer) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

type CanceledOutgoingTransfer struct {
	TransferID   *string `json:"transferId,omitempty"`
	SettlementID *string `json:"settlementId,omitempty"`
}

func (o *CanceledOutgoingTransfer) GetTransferID() *string {
	if o == nil {
		return nil
	}
	return o.TransferID
}

func (o *CanceledOutgoingTransfer) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

type ReturnedTransfer struct {
	TransferID   *string `json:"transferId,omitempty"`
	SettlementID *string `json:"settlementId,omitempty"`
}

func (o *ReturnedTransfer) GetTransferID() *string {
	if o == nil {
		return nil
	}
	return o.TransferID
}

func (o *ReturnedTransfer) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

type InvoiceCompensation struct {
	InvoiceID *string `json:"invoiceId,omitempty"`
}

func (o *InvoiceCompensation) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

type ListBalanceTransactionsApplicationFee struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	PayingOwner        *string `json:"payingOwner,omitempty"`
}

func (o *ListBalanceTransactionsApplicationFee) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ListBalanceTransactionsApplicationFee) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ListBalanceTransactionsApplicationFee) GetPayingOwner() *string {
	if o == nil {
		return nil
	}
	return o.PayingOwner
}

type SplitPayment struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	PaymentOnwer       *string `json:"paymentOnwer,omitempty"`
}

func (o *SplitPayment) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *SplitPayment) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *SplitPayment) GetPaymentOnwer() *string {
	if o == nil {
		return nil
	}
	return o.PaymentOnwer
}

type PlatformPaymentRefund struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (o *PlatformPaymentRefund) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *PlatformPaymentRefund) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *PlatformPaymentRefund) GetRefundID() *string {
	if o == nil {
		return nil
	}
	return o.RefundID
}

func (o *PlatformPaymentRefund) GetRefundDescription() *string {
	if o == nil {
		return nil
	}
	return o.RefundDescription
}

type ReturnedPlatformPaymentRefund struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	RefundID           *string `json:"refundId,omitempty"`
	RefundDescription  *string `json:"refundDescription,omitempty"`
}

func (o *ReturnedPlatformPaymentRefund) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ReturnedPlatformPaymentRefund) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ReturnedPlatformPaymentRefund) GetRefundID() *string {
	if o == nil {
		return nil
	}
	return o.RefundID
}

func (o *ReturnedPlatformPaymentRefund) GetRefundDescription() *string {
	if o == nil {
		return nil
	}
	return o.RefundDescription
}

type PlatformPaymentChargeback struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (o *PlatformPaymentChargeback) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *PlatformPaymentChargeback) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *PlatformPaymentChargeback) GetChargebackID() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackID
}

func (o *PlatformPaymentChargeback) GetChargebackDescription() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackDescription
}

type ReversedPlatformPaymentChargeback struct {
	PaymentID             *string `json:"paymentId,omitempty"`
	PaymentDescription    *string `json:"paymentDescription,omitempty"`
	ChargebackID          *string `json:"chargebackId,omitempty"`
	ChargebackDescription *string `json:"chargebackDescription,omitempty"`
}

func (o *ReversedPlatformPaymentChargeback) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ReversedPlatformPaymentChargeback) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *ReversedPlatformPaymentChargeback) GetChargebackID() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackID
}

func (o *ReversedPlatformPaymentChargeback) GetChargebackDescription() *string {
	if o == nil {
		return nil
	}
	return o.ChargebackDescription
}

type PaymentCommission struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
	OrganizationID     *string `json:"organizationId,omitempty"`
}

func (o *PaymentCommission) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *PaymentCommission) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

func (o *PaymentCommission) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

type ReimbursementFee struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (o *ReimbursementFee) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ReimbursementFee) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

type FailedPaymentFee struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (o *FailedPaymentFee) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *FailedPaymentFee) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

type PaymentFee struct {
	PaymentID          *string `json:"paymentId,omitempty"`
	PaymentDescription *string `json:"paymentDescription,omitempty"`
}

func (o *PaymentFee) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *PaymentFee) GetPaymentDescription() *string {
	if o == nil {
		return nil
	}
	return o.PaymentDescription
}

type ManagedFee struct {
	FeeType *string `json:"feeType,omitempty"`
	FeeID   *string `json:"feeId,omitempty"`
}

func (o *ManagedFee) GetFeeType() *string {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *ManagedFee) GetFeeID() *string {
	if o == nil {
		return nil
	}
	return o.FeeID
}

type ReturnedManagedFee struct {
	FeeType *string `json:"feeType,omitempty"`
	FeeID   *string `json:"feeId,omitempty"`
}

func (o *ReturnedManagedFee) GetFeeType() *string {
	if o == nil {
		return nil
	}
	return o.FeeType
}

func (o *ReturnedManagedFee) GetFeeID() *string {
	if o == nil {
		return nil
	}
	return o.FeeID
}

type PostPaymentSplitPayment struct {
	PaymentID *string `json:"paymentId,omitempty"`
}

func (o *PostPaymentSplitPayment) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

// Context - Depending on the type of the balance transaction, we will try to give more context about the specific event that
// triggered it. For example, the context object for a payment transaction will look like
// `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo", "paymentDescription": "Description"}`.
//
// Below is a complete list of the context values that each type of transaction will have.
//
// * Type `payment`: `paymentId`, `paymentDescription`
// * Type `capture`: `paymentId` `captureId`, `paymentDescription`, `captureDescription`
// * Type `capture-commission`: `paymentId`, `paymentDescription`, `organizationId`
// * Type `capture-rolling-reserve-release`: `paymentId`, `paymentDescription`, `captureId`, `captureDescription`
// * Type `unauthorized-direct-debit`: `paymentId`, `paymentDescription`
// * Type `failed-payment`: `paymentId`, `paymentDescription`
// * Type `refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `returned-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `returned-refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `chargeback-reversal`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `reversed-chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `outgoing-transfer`: `settlementId` `transferId`
// * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
// * Type `returned-transfer`: `settlementId` `transferId`
// * Type `invoice-compensation`: `invoiceId`
// * Type `balance-correction`: none
// * Type `application-fee`: `paymentId`, `paymentDescription`, `payingOwner`
// * Type `split-payment`: `paymentId`, `paymentDescription`, `paymentOwner`
// * Type `platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `returned-platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
// * Type `platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `reversed-platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
// * Type `payment-commission`: `paymentId`, `paymentDescription`, `organizationId`
// * Type `reimbursement-fee`: `paymentId`, `paymentDescription`
// * Type `failed-payment-fee`: `paymentId`, `paymentDescription`
// * Type `payment-fee`: `paymentId`, `paymentDescription`
// * Type `cash-advance-loan`: none
// * Type `platform-connected-organizations-fee`: none
// * Type `managed-fee`: `feeType`, `<name of the fee>Id`
// * Type `returned-managed-fee`:  `feeType`, `<name of the fee>Id`
// * Type `topup`: none
// * Type `balance-reserve`: none
// * Type `balance-reserve-return`: none
// * Type `movement`: none
// * Type `post-payment-split-payment`: `paymentId`
// * Type `cash-collateral-issuance`: none
// * Type `cash-collateral-release`: none
type Context struct {
	Payment                           *ListBalanceTransactionsPayment        `json:"payment,omitempty"`
	Capture                           *ListBalanceTransactionsCapture        `json:"capture,omitempty"`
	CaptureCommision                  *CaptureCommision                      `json:"capture-commision,omitempty"`
	CaptureRollingReserveRelease      *CaptureRollingReserveRelease          `json:"capture-rolling-reserve-release,omitempty"`
	UnauthorizedDirectDebit           *UnauthorizedDirectDebit               `json:"unauthorized-direct-debit,omitempty"`
	FailedPayment                     *FailedPayment                         `json:"failed-payment,omitempty"`
	Refund                            *ListBalanceTransactionsRefund         `json:"refund,omitempty"`
	RefundCompensation                *RefundCompensation                    `json:"refund-compensation,omitempty"`
	ReturnedRefund                    *ReturnedRefund                        `json:"returned-refund,omitempty"`
	ReturnedRefundCompensation        *ReturnedRefundCompensation            `json:"returned-refund-compensation,omitempty"`
	Chargeback                        *ListBalanceTransactionsChargeback     `json:"chargeback,omitempty"`
	ChargebackReversal                *ChargebackReversal                    `json:"chargeback-reversal,omitempty"`
	ChargebackCompensation            *ChargebackCompensation                `json:"chargeback-compensation,omitempty"`
	ReversedChargebackCompensation    *ReversedChargebackCompensation        `json:"reversed-chargeback-compensation,omitempty"`
	OutgoingTransfer                  *OutgoingTransfer                      `json:"outgoing-transfer,omitempty"`
	CanceledOutgoingTransfer          *CanceledOutgoingTransfer              `json:"canceled-outgoing-transfer,omitempty"`
	ReturnedTransfer                  *ReturnedTransfer                      `json:"returned-transfer,omitempty"`
	InvoiceCompensation               *InvoiceCompensation                   `json:"invoice-compensation,omitempty"`
	ApplicationFee                    *ListBalanceTransactionsApplicationFee `json:"application-fee,omitempty"`
	SplitPayment                      *SplitPayment                          `json:"split-payment,omitempty"`
	PlatformPaymentRefund             *PlatformPaymentRefund                 `json:"platform-payment-refund,omitempty"`
	ReturnedPlatformPaymentRefund     *ReturnedPlatformPaymentRefund         `json:"returned-platform-payment-refund,omitempty"`
	PlatformPaymentChargeback         *PlatformPaymentChargeback             `json:"platform-payment-chargeback,omitempty"`
	ReversedPlatformPaymentChargeback *ReversedPlatformPaymentChargeback     `json:"reversed-platform-payment-chargeback,omitempty"`
	PaymentCommission                 *PaymentCommission                     `json:"payment-commission,omitempty"`
	ReimbursementFee                  *ReimbursementFee                      `json:"reimbursement-fee,omitempty"`
	FailedPaymentFee                  *FailedPaymentFee                      `json:"failed-payment-fee,omitempty"`
	PaymentFee                        *PaymentFee                            `json:"payment-fee,omitempty"`
	ManagedFee                        *ManagedFee                            `json:"managed-fee,omitempty"`
	ReturnedManagedFee                *ReturnedManagedFee                    `json:"returned-managed-fee,omitempty"`
	PostPaymentSplitPayment           *PostPaymentSplitPayment               `json:"post-payment-split-payment,omitempty"`
}

func (o *Context) GetPayment() *ListBalanceTransactionsPayment {
	if o == nil {
		return nil
	}
	return o.Payment
}

func (o *Context) GetCapture() *ListBalanceTransactionsCapture {
	if o == nil {
		return nil
	}
	return o.Capture
}

func (o *Context) GetCaptureCommision() *CaptureCommision {
	if o == nil {
		return nil
	}
	return o.CaptureCommision
}

func (o *Context) GetCaptureRollingReserveRelease() *CaptureRollingReserveRelease {
	if o == nil {
		return nil
	}
	return o.CaptureRollingReserveRelease
}

func (o *Context) GetUnauthorizedDirectDebit() *UnauthorizedDirectDebit {
	if o == nil {
		return nil
	}
	return o.UnauthorizedDirectDebit
}

func (o *Context) GetFailedPayment() *FailedPayment {
	if o == nil {
		return nil
	}
	return o.FailedPayment
}

func (o *Context) GetRefund() *ListBalanceTransactionsRefund {
	if o == nil {
		return nil
	}
	return o.Refund
}

func (o *Context) GetRefundCompensation() *RefundCompensation {
	if o == nil {
		return nil
	}
	return o.RefundCompensation
}

func (o *Context) GetReturnedRefund() *ReturnedRefund {
	if o == nil {
		return nil
	}
	return o.ReturnedRefund
}

func (o *Context) GetReturnedRefundCompensation() *ReturnedRefundCompensation {
	if o == nil {
		return nil
	}
	return o.ReturnedRefundCompensation
}

func (o *Context) GetChargeback() *ListBalanceTransactionsChargeback {
	if o == nil {
		return nil
	}
	return o.Chargeback
}

func (o *Context) GetChargebackReversal() *ChargebackReversal {
	if o == nil {
		return nil
	}
	return o.ChargebackReversal
}

func (o *Context) GetChargebackCompensation() *ChargebackCompensation {
	if o == nil {
		return nil
	}
	return o.ChargebackCompensation
}

func (o *Context) GetReversedChargebackCompensation() *ReversedChargebackCompensation {
	if o == nil {
		return nil
	}
	return o.ReversedChargebackCompensation
}

func (o *Context) GetOutgoingTransfer() *OutgoingTransfer {
	if o == nil {
		return nil
	}
	return o.OutgoingTransfer
}

func (o *Context) GetCanceledOutgoingTransfer() *CanceledOutgoingTransfer {
	if o == nil {
		return nil
	}
	return o.CanceledOutgoingTransfer
}

func (o *Context) GetReturnedTransfer() *ReturnedTransfer {
	if o == nil {
		return nil
	}
	return o.ReturnedTransfer
}

func (o *Context) GetInvoiceCompensation() *InvoiceCompensation {
	if o == nil {
		return nil
	}
	return o.InvoiceCompensation
}

func (o *Context) GetApplicationFee() *ListBalanceTransactionsApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *Context) GetSplitPayment() *SplitPayment {
	if o == nil {
		return nil
	}
	return o.SplitPayment
}

func (o *Context) GetPlatformPaymentRefund() *PlatformPaymentRefund {
	if o == nil {
		return nil
	}
	return o.PlatformPaymentRefund
}

func (o *Context) GetReturnedPlatformPaymentRefund() *ReturnedPlatformPaymentRefund {
	if o == nil {
		return nil
	}
	return o.ReturnedPlatformPaymentRefund
}

func (o *Context) GetPlatformPaymentChargeback() *PlatformPaymentChargeback {
	if o == nil {
		return nil
	}
	return o.PlatformPaymentChargeback
}

func (o *Context) GetReversedPlatformPaymentChargeback() *ReversedPlatformPaymentChargeback {
	if o == nil {
		return nil
	}
	return o.ReversedPlatformPaymentChargeback
}

func (o *Context) GetPaymentCommission() *PaymentCommission {
	if o == nil {
		return nil
	}
	return o.PaymentCommission
}

func (o *Context) GetReimbursementFee() *ReimbursementFee {
	if o == nil {
		return nil
	}
	return o.ReimbursementFee
}

func (o *Context) GetFailedPaymentFee() *FailedPaymentFee {
	if o == nil {
		return nil
	}
	return o.FailedPaymentFee
}

func (o *Context) GetPaymentFee() *PaymentFee {
	if o == nil {
		return nil
	}
	return o.PaymentFee
}

func (o *Context) GetManagedFee() *ManagedFee {
	if o == nil {
		return nil
	}
	return o.ManagedFee
}

func (o *Context) GetReturnedManagedFee() *ReturnedManagedFee {
	if o == nil {
		return nil
	}
	return o.ReturnedManagedFee
}

func (o *Context) GetPostPaymentSplitPayment() *PostPaymentSplitPayment {
	if o == nil {
		return nil
	}
	return o.PostPaymentSplitPayment
}

type BalanceTransaction struct {
	// Indicates the response contains a balance transaction object. Will always contain the string `balance-transaction`
	// for this endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this balance transaction.
	ID *string `json:"id,omitempty"`
	// The type of transaction, for example `payment` or `refund`. Values include the below examples, although this list
	// is not definitive.
	//
	// * Regular payment processing: `payment` `capture` `unauthorized-direct-debit` `failed-payment`
	// * Refunds and chargebacks: `refund` `returned-refund` `chargeback` `chargeback-reversal`
	// * Settlements: `outgoing-transfer` `canceled-outgoing-transfer` `returned-transfer`
	// * Invoicing: `invoice-compensation` `balance-correction`
	// * Mollie Connect: `application-fee` `split-payment` `platform-payment-refund` `platform-payment-chargeback`
	Type *ListBalanceTransactionsType `json:"type,omitempty"`
	// The final amount that was moved to or from the balance. If the transaction moves funds away from the balance, for
	// example when it concerns a refund, the amount will be negative.
	ResultAmount *ResultAmount `json:"resultAmount,omitempty"`
	// The amount that was to be moved to or from the balance, excluding deductions. If the transaction moves funds away
	// from the balance, for example when it concerns a refund, the amount will be negative.
	InitialAmount *InitialAmount `json:"initialAmount,omitempty"`
	// The total amount of deductions withheld from the movement. For example, if we charge a €0.29 fee on a €10 payment,
	// the deductions amount will be `{"currency":"EUR", "value":"-0.29"}`.
	//
	// When moving funds to a balance, we always round the deduction to a 'real' amount. Any differences between these
	// real-time rounded amounts and the final invoice will be compensated when the invoice is generated.
	Deductions *Deductions `json:"deductions,omitempty"`
	// Depending on the type of the balance transaction, we will try to give more context about the specific event that
	// triggered it. For example, the context object for a payment transaction will look like
	// `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo", "paymentDescription": "Description"}`.
	//
	// Below is a complete list of the context values that each type of transaction will have.
	//
	// * Type `payment`: `paymentId`, `paymentDescription`
	// * Type `capture`: `paymentId` `captureId`, `paymentDescription`, `captureDescription`
	// * Type `capture-commission`: `paymentId`, `paymentDescription`, `organizationId`
	// * Type `capture-rolling-reserve-release`: `paymentId`, `paymentDescription`, `captureId`, `captureDescription`
	// * Type `unauthorized-direct-debit`: `paymentId`, `paymentDescription`
	// * Type `failed-payment`: `paymentId`, `paymentDescription`
	// * Type `refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `returned-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `returned-refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `chargeback-reversal`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `reversed-chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `outgoing-transfer`: `settlementId` `transferId`
	// * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
	// * Type `returned-transfer`: `settlementId` `transferId`
	// * Type `invoice-compensation`: `invoiceId`
	// * Type `balance-correction`: none
	// * Type `application-fee`: `paymentId`, `paymentDescription`, `payingOwner`
	// * Type `split-payment`: `paymentId`, `paymentDescription`, `paymentOwner`
	// * Type `platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `returned-platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
	// * Type `platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `reversed-platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
	// * Type `payment-commission`: `paymentId`, `paymentDescription`, `organizationId`
	// * Type `reimbursement-fee`: `paymentId`, `paymentDescription`
	// * Type `failed-payment-fee`: `paymentId`, `paymentDescription`
	// * Type `payment-fee`: `paymentId`, `paymentDescription`
	// * Type `cash-advance-loan`: none
	// * Type `platform-connected-organizations-fee`: none
	// * Type `managed-fee`: `feeType`, `<name of the fee>Id`
	// * Type `returned-managed-fee`:  `feeType`, `<name of the fee>Id`
	// * Type `topup`: none
	// * Type `balance-reserve`: none
	// * Type `balance-reserve-return`: none
	// * Type `movement`: none
	// * Type `post-payment-split-payment`: `paymentId`
	// * Type `cash-collateral-issuance`: none
	// * Type `cash-collateral-release`: none
	Context *Context `json:"context,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
}

func (o *BalanceTransaction) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *BalanceTransaction) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *BalanceTransaction) GetType() *ListBalanceTransactionsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *BalanceTransaction) GetResultAmount() *ResultAmount {
	if o == nil {
		return nil
	}
	return o.ResultAmount
}

func (o *BalanceTransaction) GetInitialAmount() *InitialAmount {
	if o == nil {
		return nil
	}
	return o.InitialAmount
}

func (o *BalanceTransaction) GetDeductions() *Deductions {
	if o == nil {
		return nil
	}
	return o.Deductions
}

func (o *BalanceTransaction) GetContext() *Context {
	if o == nil {
		return nil
	}
	return o.Context
}

func (o *BalanceTransaction) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

type ListBalanceTransactionsEmbedded struct {
	// An array of balance transaction objects.
	BalanceTransactions []BalanceTransaction `json:"balance_transactions,omitempty"`
}

func (o *ListBalanceTransactionsEmbedded) GetBalanceTransactions() []BalanceTransaction {
	if o == nil {
		return nil
	}
	return o.BalanceTransactions
}

// ListBalanceTransactionsSelf - The URL to the current set of items.
type ListBalanceTransactionsSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListBalanceTransactionsSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListBalanceTransactionsSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListBalanceTransactionsPrevious - The previous set of items, if available.
type ListBalanceTransactionsPrevious struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListBalanceTransactionsPrevious) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListBalanceTransactionsPrevious) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListBalanceTransactionsNext - The next set of items, if available.
type ListBalanceTransactionsNext struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListBalanceTransactionsNext) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListBalanceTransactionsNext) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListBalanceTransactionsDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListBalanceTransactionsDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListBalanceTransactionsDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListBalanceTransactionsDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListBalanceTransactionsLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
type ListBalanceTransactionsLinks struct {
	// The URL to the current set of items.
	Self ListBalanceTransactionsSelf `json:"self"`
	// The previous set of items, if available.
	Previous *ListBalanceTransactionsPrevious `json:"previous"`
	// The next set of items, if available.
	Next *ListBalanceTransactionsNext `json:"next"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListBalanceTransactionsDocumentation `json:"documentation"`
}

func (o *ListBalanceTransactionsLinks) GetSelf() ListBalanceTransactionsSelf {
	if o == nil {
		return ListBalanceTransactionsSelf{}
	}
	return o.Self
}

func (o *ListBalanceTransactionsLinks) GetPrevious() *ListBalanceTransactionsPrevious {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *ListBalanceTransactionsLinks) GetNext() *ListBalanceTransactionsNext {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListBalanceTransactionsLinks) GetDocumentation() ListBalanceTransactionsDocumentation {
	if o == nil {
		return ListBalanceTransactionsDocumentation{}
	}
	return o.Documentation
}

// ListBalanceTransactionsResponseBody - A list of balance transaction objects.
type ListBalanceTransactionsResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    *int64                           `json:"count,omitempty"`
	Embedded *ListBalanceTransactionsEmbedded `json:"_embedded,omitempty"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links *ListBalanceTransactionsLinks `json:"_links,omitempty"`
}

func (o *ListBalanceTransactionsResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ListBalanceTransactionsResponseBody) GetEmbedded() *ListBalanceTransactionsEmbedded {
	if o == nil {
		return nil
	}
	return o.Embedded
}

func (o *ListBalanceTransactionsResponseBody) GetLinks() *ListBalanceTransactionsLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type ListBalanceTransactionsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of balance transaction objects.
	Object *ListBalanceTransactionsResponseBody
}

func (o *ListBalanceTransactionsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListBalanceTransactionsResponse) GetObject() *ListBalanceTransactionsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
