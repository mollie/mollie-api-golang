// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// UpdateSalesInvoiceStatusRequest - The status for the invoice to end up in.
//
// Dependent parameters: `paymentDetails` for `paid`, `emailDetails` for `issued` and `paid`.
type UpdateSalesInvoiceStatusRequest string

const (
	UpdateSalesInvoiceStatusRequestDraft  UpdateSalesInvoiceStatusRequest = "draft"
	UpdateSalesInvoiceStatusRequestIssued UpdateSalesInvoiceStatusRequest = "issued"
	UpdateSalesInvoiceStatusRequestPaid   UpdateSalesInvoiceStatusRequest = "paid"
)

func (e UpdateSalesInvoiceStatusRequest) ToPointer() *UpdateSalesInvoiceStatusRequest {
	return &e
}
func (e *UpdateSalesInvoiceStatusRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "issued":
		fallthrough
	case "paid":
		*e = UpdateSalesInvoiceStatusRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSalesInvoiceStatusRequest: %v", v)
	}
}

// UpdateSalesInvoicePaymentTermRequest - The payment term to be set on the invoice.
type UpdateSalesInvoicePaymentTermRequest string

const (
	UpdateSalesInvoicePaymentTermRequestSevendays               UpdateSalesInvoicePaymentTermRequest = "7 days"
	UpdateSalesInvoicePaymentTermRequestFourteendays            UpdateSalesInvoicePaymentTermRequest = "14 days"
	UpdateSalesInvoicePaymentTermRequestThirtydays              UpdateSalesInvoicePaymentTermRequest = "30 days"
	UpdateSalesInvoicePaymentTermRequestFortyFivedays           UpdateSalesInvoicePaymentTermRequest = "45 days"
	UpdateSalesInvoicePaymentTermRequestSixtydays               UpdateSalesInvoicePaymentTermRequest = "60 days"
	UpdateSalesInvoicePaymentTermRequestNinetydays              UpdateSalesInvoicePaymentTermRequest = "90 days"
	UpdateSalesInvoicePaymentTermRequestOneHundredAndTwentydays UpdateSalesInvoicePaymentTermRequest = "120 days"
)

func (e UpdateSalesInvoicePaymentTermRequest) ToPointer() *UpdateSalesInvoicePaymentTermRequest {
	return &e
}
func (e *UpdateSalesInvoicePaymentTermRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "7 days":
		fallthrough
	case "14 days":
		fallthrough
	case "30 days":
		fallthrough
	case "45 days":
		fallthrough
	case "60 days":
		fallthrough
	case "90 days":
		fallthrough
	case "120 days":
		*e = UpdateSalesInvoicePaymentTermRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSalesInvoicePaymentTermRequest: %v", v)
	}
}

// UpdateSalesInvoiceSourceRequest - The way through which the invoice is to be set to paid.
type UpdateSalesInvoiceSourceRequest string

const (
	UpdateSalesInvoiceSourceRequestManual      UpdateSalesInvoiceSourceRequest = "manual"
	UpdateSalesInvoiceSourceRequestPaymentLink UpdateSalesInvoiceSourceRequest = "payment-link"
	UpdateSalesInvoiceSourceRequestPayment     UpdateSalesInvoiceSourceRequest = "payment"
)

func (e UpdateSalesInvoiceSourceRequest) ToPointer() *UpdateSalesInvoiceSourceRequest {
	return &e
}
func (e *UpdateSalesInvoiceSourceRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manual":
		fallthrough
	case "payment-link":
		fallthrough
	case "payment":
		*e = UpdateSalesInvoiceSourceRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSalesInvoiceSourceRequest: %v", v)
	}
}

// UpdateSalesInvoicePaymentDetailsRequest - Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
// provided details. Required for `paid` status.
type UpdateSalesInvoicePaymentDetailsRequest struct {
	// The way through which the invoice is to be set to paid.
	Source UpdateSalesInvoiceSourceRequest `json:"source"`
	// A reference to the payment the sales invoice is paid by. Required for `source` values `payment-link` and
	// `payment`.
	SourceReference *string `json:"sourceReference,omitempty"`
}

func (o *UpdateSalesInvoicePaymentDetailsRequest) GetSource() UpdateSalesInvoiceSourceRequest {
	if o == nil {
		return UpdateSalesInvoiceSourceRequest("")
	}
	return o.Source
}

func (o *UpdateSalesInvoicePaymentDetailsRequest) GetSourceReference() *string {
	if o == nil {
		return nil
	}
	return o.SourceReference
}

// UpdateSalesInvoiceEmailDetailsRequest - Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
// recipient with the provided `subject` and `body`. Required for `issued` status.
type UpdateSalesInvoiceEmailDetailsRequest struct {
	// The subject of the email to be sent.
	Subject string `json:"subject"`
	// The body of the email to be sent. To add newline characters, you can use `\n`.
	Body string `json:"body"`
}

func (o *UpdateSalesInvoiceEmailDetailsRequest) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

func (o *UpdateSalesInvoiceEmailDetailsRequest) GetBody() string {
	if o == nil {
		return ""
	}
	return o.Body
}

// UpdateSalesInvoiceRecipientTypeRequest - The type of recipient, either `consumer` or `business`. This will determine what further fields are
// required on the `recipient` object.
type UpdateSalesInvoiceRecipientTypeRequest string

const (
	UpdateSalesInvoiceRecipientTypeRequestConsumer UpdateSalesInvoiceRecipientTypeRequest = "consumer"
	UpdateSalesInvoiceRecipientTypeRequestBusiness UpdateSalesInvoiceRecipientTypeRequest = "business"
)

func (e UpdateSalesInvoiceRecipientTypeRequest) ToPointer() *UpdateSalesInvoiceRecipientTypeRequest {
	return &e
}
func (e *UpdateSalesInvoiceRecipientTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "business":
		*e = UpdateSalesInvoiceRecipientTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSalesInvoiceRecipientTypeRequest: %v", v)
	}
}

// UpdateSalesInvoiceLocaleRequest - The locale for the recipient, to be used for translations in PDF generation and payment pages.
type UpdateSalesInvoiceLocaleRequest string

const (
	UpdateSalesInvoiceLocaleRequestEnUs UpdateSalesInvoiceLocaleRequest = "en_US"
	UpdateSalesInvoiceLocaleRequestEnGb UpdateSalesInvoiceLocaleRequest = "en_GB"
	UpdateSalesInvoiceLocaleRequestNlNl UpdateSalesInvoiceLocaleRequest = "nl_NL"
	UpdateSalesInvoiceLocaleRequestNlBe UpdateSalesInvoiceLocaleRequest = "nl_BE"
	UpdateSalesInvoiceLocaleRequestDeDe UpdateSalesInvoiceLocaleRequest = "de_DE"
	UpdateSalesInvoiceLocaleRequestDeAt UpdateSalesInvoiceLocaleRequest = "de_AT"
	UpdateSalesInvoiceLocaleRequestDeCh UpdateSalesInvoiceLocaleRequest = "de_CH"
	UpdateSalesInvoiceLocaleRequestFrFr UpdateSalesInvoiceLocaleRequest = "fr_FR"
	UpdateSalesInvoiceLocaleRequestFrBe UpdateSalesInvoiceLocaleRequest = "fr_BE"
)

func (e UpdateSalesInvoiceLocaleRequest) ToPointer() *UpdateSalesInvoiceLocaleRequest {
	return &e
}
func (e *UpdateSalesInvoiceLocaleRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		*e = UpdateSalesInvoiceLocaleRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSalesInvoiceLocaleRequest: %v", v)
	}
}

// UpdateSalesInvoiceRecipientRequest - The recipient object should contain all the information relevant to create an invoice for an intended
// recipient. This data will be stored, updated, and re-used as appropriate, based on the `recipientIdentifier`.
type UpdateSalesInvoiceRecipientRequest struct {
	// The type of recipient, either `consumer` or `business`. This will determine what further fields are
	// required on the `recipient` object.
	Type UpdateSalesInvoiceRecipientTypeRequest `json:"type"`
	// The title of the `consumer` type recipient, for example Mr. or Mrs..
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain
	// only numbers.
	GivenName *string `json:"givenName,omitempty"`
	// The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain
	// only numbers.
	FamilyName *string `json:"familyName,omitempty"`
	// The trading name of the `business` type recipient.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber`
	// has to be provided.
	OrganizationNumber *string `json:"organizationNumber,omitempty"`
	// The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber`
	// has to be provided.
	VatNumber *string `json:"vatNumber,omitempty"`
	// The email address of the recipient.
	Email string `json:"email"`
	// The phone number of the recipient.
	Phone *string `json:"phone,omitempty"`
	// A street and street number.
	StreetAndNumber string `json:"streetAndNumber"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code.
	PostalCode string `json:"postalCode"`
	// The recipient's city.
	City string `json:"city"`
	// The recipient's region.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	Country string `json:"country"`
	// The locale for the recipient, to be used for translations in PDF generation and payment pages.
	Locale UpdateSalesInvoiceLocaleRequest `json:"locale"`
}

func (o *UpdateSalesInvoiceRecipientRequest) GetType() UpdateSalesInvoiceRecipientTypeRequest {
	if o == nil {
		return UpdateSalesInvoiceRecipientTypeRequest("")
	}
	return o.Type
}

func (o *UpdateSalesInvoiceRecipientRequest) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *UpdateSalesInvoiceRecipientRequest) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *UpdateSalesInvoiceRecipientRequest) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *UpdateSalesInvoiceRecipientRequest) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *UpdateSalesInvoiceRecipientRequest) GetOrganizationNumber() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationNumber
}

func (o *UpdateSalesInvoiceRecipientRequest) GetVatNumber() *string {
	if o == nil {
		return nil
	}
	return o.VatNumber
}

func (o *UpdateSalesInvoiceRecipientRequest) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *UpdateSalesInvoiceRecipientRequest) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *UpdateSalesInvoiceRecipientRequest) GetStreetAndNumber() string {
	if o == nil {
		return ""
	}
	return o.StreetAndNumber
}

func (o *UpdateSalesInvoiceRecipientRequest) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *UpdateSalesInvoiceRecipientRequest) GetPostalCode() string {
	if o == nil {
		return ""
	}
	return o.PostalCode
}

func (o *UpdateSalesInvoiceRecipientRequest) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *UpdateSalesInvoiceRecipientRequest) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *UpdateSalesInvoiceRecipientRequest) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *UpdateSalesInvoiceRecipientRequest) GetLocale() UpdateSalesInvoiceLocaleRequest {
	if o == nil {
		return UpdateSalesInvoiceLocaleRequest("")
	}
	return o.Locale
}

// UpdateSalesInvoiceUnitPriceRequest - The price of a single item excluding VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// The unit price can be zero in case of free items.
type UpdateSalesInvoiceUnitPriceRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdateSalesInvoiceUnitPriceRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdateSalesInvoiceUnitPriceRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdateSalesInvoiceLineTypeRequest - The type of discount.
type UpdateSalesInvoiceLineTypeRequest string

const (
	UpdateSalesInvoiceLineTypeRequestAmount     UpdateSalesInvoiceLineTypeRequest = "amount"
	UpdateSalesInvoiceLineTypeRequestPercentage UpdateSalesInvoiceLineTypeRequest = "percentage"
)

func (e UpdateSalesInvoiceLineTypeRequest) ToPointer() *UpdateSalesInvoiceLineTypeRequest {
	return &e
}
func (e *UpdateSalesInvoiceLineTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amount":
		fallthrough
	case "percentage":
		*e = UpdateSalesInvoiceLineTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSalesInvoiceLineTypeRequest: %v", v)
	}
}

// UpdateSalesInvoiceLineDiscountRequest - The discount to be applied to the line item.
type UpdateSalesInvoiceLineDiscountRequest struct {
	// The type of discount.
	Type UpdateSalesInvoiceLineTypeRequest `json:"type"`
	// A string containing an exact monetary amount in the given currency, or the percentage.
	Value string `json:"value"`
}

func (o *UpdateSalesInvoiceLineDiscountRequest) GetType() UpdateSalesInvoiceLineTypeRequest {
	if o == nil {
		return UpdateSalesInvoiceLineTypeRequest("")
	}
	return o.Type
}

func (o *UpdateSalesInvoiceLineDiscountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateSalesInvoiceLineRequest struct {
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The vat rate to be applied to this line item.
	VatRate string `json:"vatRate"`
	// The price of a single item excluding VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// The unit price can be zero in case of free items.
	UnitPrice UpdateSalesInvoiceUnitPriceRequest `json:"unitPrice"`
	// The discount to be applied to the line item.
	Discount *UpdateSalesInvoiceLineDiscountRequest `json:"discount,omitempty"`
}

func (o *UpdateSalesInvoiceLineRequest) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *UpdateSalesInvoiceLineRequest) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *UpdateSalesInvoiceLineRequest) GetVatRate() string {
	if o == nil {
		return ""
	}
	return o.VatRate
}

func (o *UpdateSalesInvoiceLineRequest) GetUnitPrice() UpdateSalesInvoiceUnitPriceRequest {
	if o == nil {
		return UpdateSalesInvoiceUnitPriceRequest{}
	}
	return o.UnitPrice
}

func (o *UpdateSalesInvoiceLineRequest) GetDiscount() *UpdateSalesInvoiceLineDiscountRequest {
	if o == nil {
		return nil
	}
	return o.Discount
}

// UpdateSalesInvoiceDiscountTypeRequest - The type of discount.
type UpdateSalesInvoiceDiscountTypeRequest string

const (
	UpdateSalesInvoiceDiscountTypeRequestAmount     UpdateSalesInvoiceDiscountTypeRequest = "amount"
	UpdateSalesInvoiceDiscountTypeRequestPercentage UpdateSalesInvoiceDiscountTypeRequest = "percentage"
)

func (e UpdateSalesInvoiceDiscountTypeRequest) ToPointer() *UpdateSalesInvoiceDiscountTypeRequest {
	return &e
}
func (e *UpdateSalesInvoiceDiscountTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amount":
		fallthrough
	case "percentage":
		*e = UpdateSalesInvoiceDiscountTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSalesInvoiceDiscountTypeRequest: %v", v)
	}
}

// UpdateSalesInvoiceDiscountRequest - The discount to be applied to the entire invoice, possibly on top of the line item discounts.
type UpdateSalesInvoiceDiscountRequest struct {
	// The type of discount.
	Type UpdateSalesInvoiceDiscountTypeRequest `json:"type"`
	// A string containing an exact monetary amount in the given currency, or the percentage.
	Value string `json:"value"`
}

func (o *UpdateSalesInvoiceDiscountRequest) GetType() UpdateSalesInvoiceDiscountTypeRequest {
	if o == nil {
		return UpdateSalesInvoiceDiscountTypeRequest("")
	}
	return o.Type
}

func (o *UpdateSalesInvoiceDiscountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateSalesInvoiceRequestBody struct {
	// Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
	// such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `json:"testmode,omitempty"`
	// The status for the invoice to end up in.
	//
	// Dependent parameters: `paymentDetails` for `paid`, `emailDetails` for `issued` and `paid`.
	Status *UpdateSalesInvoiceStatusRequest `json:"status,omitempty"`
	// A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
	Memo *string `json:"memo,omitempty"`
	// The payment term to be set on the invoice.
	PaymentTerm *UpdateSalesInvoicePaymentTermRequest `json:"paymentTerm,omitempty"`
	// Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
	// provided details. Required for `paid` status.
	PaymentDetails *UpdateSalesInvoicePaymentDetailsRequest `json:"paymentDetails,omitempty"`
	// Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
	// recipient with the provided `subject` and `body`. Required for `issued` status.
	EmailDetails *UpdateSalesInvoiceEmailDetailsRequest `json:"emailDetails,omitempty"`
	// An identifier tied to the recipient data. This should be a unique value based on data your system contains,
	// so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
	// is not required to send a first invoice to a recipient.
	RecipientIdentifier *string `json:"recipientIdentifier,omitempty"`
	// The recipient object should contain all the information relevant to create an invoice for an intended
	// recipient. This data will be stored, updated, and re-used as appropriate, based on the `recipientIdentifier`.
	Recipient *UpdateSalesInvoiceRecipientRequest `json:"recipient,omitempty"`
	// Provide the line items for the invoice. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the invoice.
	Lines []UpdateSalesInvoiceLineRequest `json:"lines,omitempty"`
	// The discount to be applied to the entire invoice, possibly on top of the line item discounts.
	Discount *UpdateSalesInvoiceDiscountRequest `json:"discount,omitempty"`
}

func (o *UpdateSalesInvoiceRequestBody) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

func (o *UpdateSalesInvoiceRequestBody) GetStatus() *UpdateSalesInvoiceStatusRequest {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateSalesInvoiceRequestBody) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *UpdateSalesInvoiceRequestBody) GetPaymentTerm() *UpdateSalesInvoicePaymentTermRequest {
	if o == nil {
		return nil
	}
	return o.PaymentTerm
}

func (o *UpdateSalesInvoiceRequestBody) GetPaymentDetails() *UpdateSalesInvoicePaymentDetailsRequest {
	if o == nil {
		return nil
	}
	return o.PaymentDetails
}

func (o *UpdateSalesInvoiceRequestBody) GetEmailDetails() *UpdateSalesInvoiceEmailDetailsRequest {
	if o == nil {
		return nil
	}
	return o.EmailDetails
}

func (o *UpdateSalesInvoiceRequestBody) GetRecipientIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.RecipientIdentifier
}

func (o *UpdateSalesInvoiceRequestBody) GetRecipient() *UpdateSalesInvoiceRecipientRequest {
	if o == nil {
		return nil
	}
	return o.Recipient
}

func (o *UpdateSalesInvoiceRequestBody) GetLines() []UpdateSalesInvoiceLineRequest {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *UpdateSalesInvoiceRequestBody) GetDiscount() *UpdateSalesInvoiceDiscountRequest {
	if o == nil {
		return nil
	}
	return o.Discount
}

type UpdateSalesInvoiceRequest struct {
	// Provide the ID of the item you want to perform this operation on.
	ID          string                         `pathParam:"style=simple,explode=false,name=id"`
	RequestBody *UpdateSalesInvoiceRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateSalesInvoiceRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateSalesInvoiceRequest) GetRequestBody() *UpdateSalesInvoiceRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// UpdateSalesInvoiceUnprocessableEntityDocumentation - The URL to the generic Mollie API error handling guide.
type UpdateSalesInvoiceUnprocessableEntityDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *UpdateSalesInvoiceUnprocessableEntityDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateSalesInvoiceUnprocessableEntityDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type UpdateSalesInvoiceUnprocessableEntityLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation UpdateSalesInvoiceUnprocessableEntityDocumentation `json:"documentation"`
}

func (o *UpdateSalesInvoiceUnprocessableEntityLinks) GetDocumentation() UpdateSalesInvoiceUnprocessableEntityDocumentation {
	if o == nil {
		return UpdateSalesInvoiceUnprocessableEntityDocumentation{}
	}
	return o.Documentation
}

// UpdateSalesInvoiceNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type UpdateSalesInvoiceNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *UpdateSalesInvoiceNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateSalesInvoiceNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type UpdateSalesInvoiceNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation UpdateSalesInvoiceNotFoundDocumentation `json:"documentation"`
}

func (o *UpdateSalesInvoiceNotFoundLinks) GetDocumentation() UpdateSalesInvoiceNotFoundDocumentation {
	if o == nil {
		return UpdateSalesInvoiceNotFoundDocumentation{}
	}
	return o.Documentation
}

// UpdateSalesInvoiceStatusResponse - The status for the invoice to end up in.
//
// A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
// the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
// mark it as paid. It can then subsequently be sent as well, same as with `issued`.
//
// A status value that cannot be set but can be returned is `canceled`, for invoices which were
// issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
//
// Dependent parameters:
//   - `paymentDetails` is required if invoice should be set directly to `paid`
//   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
//   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
type UpdateSalesInvoiceStatusResponse string

const (
	UpdateSalesInvoiceStatusResponseDraft  UpdateSalesInvoiceStatusResponse = "draft"
	UpdateSalesInvoiceStatusResponseIssued UpdateSalesInvoiceStatusResponse = "issued"
	UpdateSalesInvoiceStatusResponsePaid   UpdateSalesInvoiceStatusResponse = "paid"
)

func (e UpdateSalesInvoiceStatusResponse) ToPointer() *UpdateSalesInvoiceStatusResponse {
	return &e
}
func (e *UpdateSalesInvoiceStatusResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "issued":
		fallthrough
	case "paid":
		*e = UpdateSalesInvoiceStatusResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSalesInvoiceStatusResponse: %v", v)
	}
}

// UpdateSalesInvoiceVatScheme - The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
type UpdateSalesInvoiceVatScheme string

const (
	UpdateSalesInvoiceVatSchemeStandard    UpdateSalesInvoiceVatScheme = "standard"
	UpdateSalesInvoiceVatSchemeOneStopShop UpdateSalesInvoiceVatScheme = "one-stop-shop"
)

func (e UpdateSalesInvoiceVatScheme) ToPointer() *UpdateSalesInvoiceVatScheme {
	return &e
}
func (e *UpdateSalesInvoiceVatScheme) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "one-stop-shop":
		*e = UpdateSalesInvoiceVatScheme(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSalesInvoiceVatScheme: %v", v)
	}
}

// UpdateSalesInvoiceVatMode - The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
// price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
type UpdateSalesInvoiceVatMode string

const (
	UpdateSalesInvoiceVatModeExclusive UpdateSalesInvoiceVatMode = "exclusive"
	UpdateSalesInvoiceVatModeInclusive UpdateSalesInvoiceVatMode = "inclusive"
)

func (e UpdateSalesInvoiceVatMode) ToPointer() *UpdateSalesInvoiceVatMode {
	return &e
}
func (e *UpdateSalesInvoiceVatMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "exclusive":
		fallthrough
	case "inclusive":
		*e = UpdateSalesInvoiceVatMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSalesInvoiceVatMode: %v", v)
	}
}

// UpdateSalesInvoiceMetadata - Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type UpdateSalesInvoiceMetadata struct {
}

// UpdateSalesInvoicePaymentTermResponse - The payment term to be set on the invoice.
type UpdateSalesInvoicePaymentTermResponse string

const (
	UpdateSalesInvoicePaymentTermResponseSevendays               UpdateSalesInvoicePaymentTermResponse = "7 days"
	UpdateSalesInvoicePaymentTermResponseFourteendays            UpdateSalesInvoicePaymentTermResponse = "14 days"
	UpdateSalesInvoicePaymentTermResponseThirtydays              UpdateSalesInvoicePaymentTermResponse = "30 days"
	UpdateSalesInvoicePaymentTermResponseFortyFivedays           UpdateSalesInvoicePaymentTermResponse = "45 days"
	UpdateSalesInvoicePaymentTermResponseSixtydays               UpdateSalesInvoicePaymentTermResponse = "60 days"
	UpdateSalesInvoicePaymentTermResponseNinetydays              UpdateSalesInvoicePaymentTermResponse = "90 days"
	UpdateSalesInvoicePaymentTermResponseOneHundredAndTwentydays UpdateSalesInvoicePaymentTermResponse = "120 days"
)

func (e UpdateSalesInvoicePaymentTermResponse) ToPointer() *UpdateSalesInvoicePaymentTermResponse {
	return &e
}
func (e *UpdateSalesInvoicePaymentTermResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "7 days":
		fallthrough
	case "14 days":
		fallthrough
	case "30 days":
		fallthrough
	case "45 days":
		fallthrough
	case "60 days":
		fallthrough
	case "90 days":
		fallthrough
	case "120 days":
		*e = UpdateSalesInvoicePaymentTermResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSalesInvoicePaymentTermResponse: %v", v)
	}
}

// UpdateSalesInvoiceSourceResponse - The way through which the invoice is to be set to paid.
type UpdateSalesInvoiceSourceResponse string

const (
	UpdateSalesInvoiceSourceResponseManual      UpdateSalesInvoiceSourceResponse = "manual"
	UpdateSalesInvoiceSourceResponsePaymentLink UpdateSalesInvoiceSourceResponse = "payment-link"
	UpdateSalesInvoiceSourceResponsePayment     UpdateSalesInvoiceSourceResponse = "payment"
)

func (e UpdateSalesInvoiceSourceResponse) ToPointer() *UpdateSalesInvoiceSourceResponse {
	return &e
}
func (e *UpdateSalesInvoiceSourceResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manual":
		fallthrough
	case "payment-link":
		fallthrough
	case "payment":
		*e = UpdateSalesInvoiceSourceResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSalesInvoiceSourceResponse: %v", v)
	}
}

// UpdateSalesInvoicePaymentDetailsResponse - Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
// provided details. Required for `paid` status.
type UpdateSalesInvoicePaymentDetailsResponse struct {
	// The way through which the invoice is to be set to paid.
	Source UpdateSalesInvoiceSourceResponse `json:"source"`
	// A reference to the payment the sales invoice is paid by. Required for `source` values `payment-link` and
	// `payment`.
	SourceReference *string `json:"sourceReference,omitempty"`
}

func (o *UpdateSalesInvoicePaymentDetailsResponse) GetSource() UpdateSalesInvoiceSourceResponse {
	if o == nil {
		return UpdateSalesInvoiceSourceResponse("")
	}
	return o.Source
}

func (o *UpdateSalesInvoicePaymentDetailsResponse) GetSourceReference() *string {
	if o == nil {
		return nil
	}
	return o.SourceReference
}

// UpdateSalesInvoiceEmailDetailsResponse - Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
// recipient with the provided `subject` and `body`. Required for `issued` status.
type UpdateSalesInvoiceEmailDetailsResponse struct {
	// The subject of the email to be sent.
	Subject string `json:"subject"`
	// The body of the email to be sent. To add newline characters, you can use `\n`.
	Body string `json:"body"`
}

func (o *UpdateSalesInvoiceEmailDetailsResponse) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

func (o *UpdateSalesInvoiceEmailDetailsResponse) GetBody() string {
	if o == nil {
		return ""
	}
	return o.Body
}

// UpdateSalesInvoiceRecipientTypeResponse - The type of recipient, either `consumer` or `business`. This will determine what further fields are
// required on the `recipient` object.
type UpdateSalesInvoiceRecipientTypeResponse string

const (
	UpdateSalesInvoiceRecipientTypeResponseConsumer UpdateSalesInvoiceRecipientTypeResponse = "consumer"
	UpdateSalesInvoiceRecipientTypeResponseBusiness UpdateSalesInvoiceRecipientTypeResponse = "business"
)

func (e UpdateSalesInvoiceRecipientTypeResponse) ToPointer() *UpdateSalesInvoiceRecipientTypeResponse {
	return &e
}
func (e *UpdateSalesInvoiceRecipientTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "business":
		*e = UpdateSalesInvoiceRecipientTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSalesInvoiceRecipientTypeResponse: %v", v)
	}
}

// UpdateSalesInvoiceLocaleResponse - The locale for the recipient, to be used for translations in PDF generation and payment pages.
type UpdateSalesInvoiceLocaleResponse string

const (
	UpdateSalesInvoiceLocaleResponseEnUs UpdateSalesInvoiceLocaleResponse = "en_US"
	UpdateSalesInvoiceLocaleResponseEnGb UpdateSalesInvoiceLocaleResponse = "en_GB"
	UpdateSalesInvoiceLocaleResponseNlNl UpdateSalesInvoiceLocaleResponse = "nl_NL"
	UpdateSalesInvoiceLocaleResponseNlBe UpdateSalesInvoiceLocaleResponse = "nl_BE"
	UpdateSalesInvoiceLocaleResponseDeDe UpdateSalesInvoiceLocaleResponse = "de_DE"
	UpdateSalesInvoiceLocaleResponseDeAt UpdateSalesInvoiceLocaleResponse = "de_AT"
	UpdateSalesInvoiceLocaleResponseDeCh UpdateSalesInvoiceLocaleResponse = "de_CH"
	UpdateSalesInvoiceLocaleResponseFrFr UpdateSalesInvoiceLocaleResponse = "fr_FR"
	UpdateSalesInvoiceLocaleResponseFrBe UpdateSalesInvoiceLocaleResponse = "fr_BE"
)

func (e UpdateSalesInvoiceLocaleResponse) ToPointer() *UpdateSalesInvoiceLocaleResponse {
	return &e
}
func (e *UpdateSalesInvoiceLocaleResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		*e = UpdateSalesInvoiceLocaleResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSalesInvoiceLocaleResponse: %v", v)
	}
}

type UpdateSalesInvoiceRecipientResponse struct {
	// The type of recipient, either `consumer` or `business`. This will determine what further fields are
	// required on the `recipient` object.
	Type UpdateSalesInvoiceRecipientTypeResponse `json:"type"`
	// The title of the `consumer` type recipient, for example Mr. or Mrs..
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain
	// only numbers.
	GivenName *string `json:"givenName,omitempty"`
	// The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain
	// only numbers.
	FamilyName *string `json:"familyName,omitempty"`
	// The trading name of the `business` type recipient.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber`
	// has to be provided.
	OrganizationNumber *string `json:"organizationNumber,omitempty"`
	// The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber`
	// has to be provided.
	VatNumber *string `json:"vatNumber,omitempty"`
	// The email address of the recipient.
	Email string `json:"email"`
	// The phone number of the recipient.
	Phone *string `json:"phone,omitempty"`
	// A street and street number.
	StreetAndNumber string `json:"streetAndNumber"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code.
	PostalCode string `json:"postalCode"`
	// The recipient's city.
	City string `json:"city"`
	// The recipient's region.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	Country string `json:"country"`
	// The locale for the recipient, to be used for translations in PDF generation and payment pages.
	Locale UpdateSalesInvoiceLocaleResponse `json:"locale"`
}

func (o *UpdateSalesInvoiceRecipientResponse) GetType() UpdateSalesInvoiceRecipientTypeResponse {
	if o == nil {
		return UpdateSalesInvoiceRecipientTypeResponse("")
	}
	return o.Type
}

func (o *UpdateSalesInvoiceRecipientResponse) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *UpdateSalesInvoiceRecipientResponse) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *UpdateSalesInvoiceRecipientResponse) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *UpdateSalesInvoiceRecipientResponse) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *UpdateSalesInvoiceRecipientResponse) GetOrganizationNumber() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationNumber
}

func (o *UpdateSalesInvoiceRecipientResponse) GetVatNumber() *string {
	if o == nil {
		return nil
	}
	return o.VatNumber
}

func (o *UpdateSalesInvoiceRecipientResponse) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *UpdateSalesInvoiceRecipientResponse) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *UpdateSalesInvoiceRecipientResponse) GetStreetAndNumber() string {
	if o == nil {
		return ""
	}
	return o.StreetAndNumber
}

func (o *UpdateSalesInvoiceRecipientResponse) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *UpdateSalesInvoiceRecipientResponse) GetPostalCode() string {
	if o == nil {
		return ""
	}
	return o.PostalCode
}

func (o *UpdateSalesInvoiceRecipientResponse) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *UpdateSalesInvoiceRecipientResponse) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *UpdateSalesInvoiceRecipientResponse) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *UpdateSalesInvoiceRecipientResponse) GetLocale() UpdateSalesInvoiceLocaleResponse {
	if o == nil {
		return UpdateSalesInvoiceLocaleResponse("")
	}
	return o.Locale
}

// UpdateSalesInvoiceUnitPriceResponse - The price of a single item excluding VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// The unit price can be zero in case of free items.
type UpdateSalesInvoiceUnitPriceResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdateSalesInvoiceUnitPriceResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdateSalesInvoiceUnitPriceResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdateSalesInvoiceLineTypeResponse - The type of discount.
type UpdateSalesInvoiceLineTypeResponse string

const (
	UpdateSalesInvoiceLineTypeResponseAmount     UpdateSalesInvoiceLineTypeResponse = "amount"
	UpdateSalesInvoiceLineTypeResponsePercentage UpdateSalesInvoiceLineTypeResponse = "percentage"
)

func (e UpdateSalesInvoiceLineTypeResponse) ToPointer() *UpdateSalesInvoiceLineTypeResponse {
	return &e
}
func (e *UpdateSalesInvoiceLineTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amount":
		fallthrough
	case "percentage":
		*e = UpdateSalesInvoiceLineTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSalesInvoiceLineTypeResponse: %v", v)
	}
}

// UpdateSalesInvoiceLineDiscountResponse - The discount to be applied to the line item.
type UpdateSalesInvoiceLineDiscountResponse struct {
	// The type of discount.
	Type UpdateSalesInvoiceLineTypeResponse `json:"type"`
	// A string containing an exact monetary amount in the given currency, or the percentage.
	Value string `json:"value"`
}

func (o *UpdateSalesInvoiceLineDiscountResponse) GetType() UpdateSalesInvoiceLineTypeResponse {
	if o == nil {
		return UpdateSalesInvoiceLineTypeResponse("")
	}
	return o.Type
}

func (o *UpdateSalesInvoiceLineDiscountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateSalesInvoiceLineResponse struct {
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The vat rate to be applied to this line item.
	VatRate string `json:"vatRate"`
	// The price of a single item excluding VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// The unit price can be zero in case of free items.
	UnitPrice UpdateSalesInvoiceUnitPriceResponse `json:"unitPrice"`
	// The discount to be applied to the line item.
	Discount *UpdateSalesInvoiceLineDiscountResponse `json:"discount,omitempty"`
}

func (o *UpdateSalesInvoiceLineResponse) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *UpdateSalesInvoiceLineResponse) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *UpdateSalesInvoiceLineResponse) GetVatRate() string {
	if o == nil {
		return ""
	}
	return o.VatRate
}

func (o *UpdateSalesInvoiceLineResponse) GetUnitPrice() UpdateSalesInvoiceUnitPriceResponse {
	if o == nil {
		return UpdateSalesInvoiceUnitPriceResponse{}
	}
	return o.UnitPrice
}

func (o *UpdateSalesInvoiceLineResponse) GetDiscount() *UpdateSalesInvoiceLineDiscountResponse {
	if o == nil {
		return nil
	}
	return o.Discount
}

// UpdateSalesInvoiceDiscountTypeResponse - The type of discount.
type UpdateSalesInvoiceDiscountTypeResponse string

const (
	UpdateSalesInvoiceDiscountTypeResponseAmount     UpdateSalesInvoiceDiscountTypeResponse = "amount"
	UpdateSalesInvoiceDiscountTypeResponsePercentage UpdateSalesInvoiceDiscountTypeResponse = "percentage"
)

func (e UpdateSalesInvoiceDiscountTypeResponse) ToPointer() *UpdateSalesInvoiceDiscountTypeResponse {
	return &e
}
func (e *UpdateSalesInvoiceDiscountTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amount":
		fallthrough
	case "percentage":
		*e = UpdateSalesInvoiceDiscountTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSalesInvoiceDiscountTypeResponse: %v", v)
	}
}

// UpdateSalesInvoiceDiscountResponse - The discount to be applied to the entire invoice, applied on top of any line item discounts.
type UpdateSalesInvoiceDiscountResponse struct {
	// The type of discount.
	Type UpdateSalesInvoiceDiscountTypeResponse `json:"type"`
	// A string containing an exact monetary amount in the given currency, or the percentage.
	Value string `json:"value"`
}

func (o *UpdateSalesInvoiceDiscountResponse) GetType() UpdateSalesInvoiceDiscountTypeResponse {
	if o == nil {
		return UpdateSalesInvoiceDiscountTypeResponse("")
	}
	return o.Type
}

func (o *UpdateSalesInvoiceDiscountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdateSalesInvoiceAmountDue - The amount that is left to be paid.
type UpdateSalesInvoiceAmountDue struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdateSalesInvoiceAmountDue) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdateSalesInvoiceAmountDue) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdateSalesInvoiceSubtotalAmount - The total amount without VAT before discounts.
type UpdateSalesInvoiceSubtotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdateSalesInvoiceSubtotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdateSalesInvoiceSubtotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdateSalesInvoiceTotalAmount - The total amount with VAT.
type UpdateSalesInvoiceTotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdateSalesInvoiceTotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdateSalesInvoiceTotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdateSalesInvoiceTotalVatAmount - The total VAT amount.
type UpdateSalesInvoiceTotalVatAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdateSalesInvoiceTotalVatAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdateSalesInvoiceTotalVatAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdateSalesInvoiceDiscountedSubtotalAmount - The total amount without VAT after discounts.
type UpdateSalesInvoiceDiscountedSubtotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdateSalesInvoiceDiscountedSubtotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdateSalesInvoiceDiscountedSubtotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdateSalesInvoiceSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type UpdateSalesInvoiceSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdateSalesInvoiceSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateSalesInvoiceSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdateSalesInvoiceInvoicePayment - The URL your customer should visit to make payment for the invoice. This is where you should redirect the
// customer to unless the `status` is set to `paid`.
type UpdateSalesInvoiceInvoicePayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdateSalesInvoiceInvoicePayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateSalesInvoiceInvoicePayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdateSalesInvoicePdfLink - The URL the invoice is available at, if generated.
type UpdateSalesInvoicePdfLink struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdateSalesInvoicePdfLink) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateSalesInvoicePdfLink) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdateSalesInvoiceDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type UpdateSalesInvoiceDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdateSalesInvoiceDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdateSalesInvoiceDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdateSalesInvoiceLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type UpdateSalesInvoiceLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *UpdateSalesInvoiceSelf `json:"self,omitempty"`
	// The URL your customer should visit to make payment for the invoice. This is where you should redirect the
	// customer to unless the `status` is set to `paid`.
	InvoicePayment *UpdateSalesInvoiceInvoicePayment `json:"invoicePayment,omitempty"`
	// The URL the invoice is available at, if generated.
	PdfLink *UpdateSalesInvoicePdfLink `json:"pdfLink,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *UpdateSalesInvoiceDocumentation `json:"documentation,omitempty"`
}

func (o *UpdateSalesInvoiceLinks) GetSelf() *UpdateSalesInvoiceSelf {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *UpdateSalesInvoiceLinks) GetInvoicePayment() *UpdateSalesInvoiceInvoicePayment {
	if o == nil {
		return nil
	}
	return o.InvoicePayment
}

func (o *UpdateSalesInvoiceLinks) GetPdfLink() *UpdateSalesInvoicePdfLink {
	if o == nil {
		return nil
	}
	return o.PdfLink
}

func (o *UpdateSalesInvoiceLinks) GetDocumentation() *UpdateSalesInvoiceDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

// UpdateSalesInvoiceResponseBody - The sales invoice object.
type UpdateSalesInvoiceResponseBody struct {
	// Indicates the response contains a sales invoice object. Will always contain the string `sales-invoice` for this
	// endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this invoice. Example: `invoice_4Y0eZitmBnQ6IDoMqZQKh`.
	ID *string `json:"id,omitempty"`
	// When issued, an invoice number will be set for the sales invoice.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`
	// The status for the invoice to end up in.
	//
	// A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
	// the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
	// mark it as paid. It can then subsequently be sent as well, same as with `issued`.
	//
	// A status value that cannot be set but can be returned is `canceled`, for invoices which were
	// issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
	//
	// Dependent parameters:
	//   - `paymentDetails` is required if invoice should be set directly to `paid`
	//   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
	//   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
	Status *UpdateSalesInvoiceStatusResponse `json:"status,omitempty"`
	// The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
	VatScheme *UpdateSalesInvoiceVatScheme `json:"vatScheme,omitempty"`
	// The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
	// price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
	VatMode *UpdateSalesInvoiceVatMode `json:"vatMode,omitempty"`
	// A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
	Memo *string `json:"memo,omitempty"`
	// Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *UpdateSalesInvoiceMetadata `json:"metadata,omitempty"`
	// The payment term to be set on the invoice.
	PaymentTerm *UpdateSalesInvoicePaymentTermResponse `json:"paymentTerm,omitempty"`
	// Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
	// provided details. Required for `paid` status.
	PaymentDetails *UpdateSalesInvoicePaymentDetailsResponse `json:"paymentDetails,omitempty"`
	// Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
	// recipient with the provided `subject` and `body`. Required for `issued` status.
	EmailDetails *UpdateSalesInvoiceEmailDetailsResponse `json:"emailDetails,omitempty"`
	// The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
	// provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
	CustomerID *string `json:"customerId,omitempty"`
	// The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
	// `customerId` becomes required as well. Only allowed for invoices with status `paid`.
	MandateID *string `json:"mandateId,omitempty"`
	// An identifier tied to the recipient data. This should be a unique value based on data your system contains,
	// so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
	// is not required to send a first invoice to a recipient.
	RecipientIdentifier *string                              `json:"recipientIdentifier,omitempty"`
	Recipient           *UpdateSalesInvoiceRecipientResponse `json:"recipient,omitempty"`
	// Provide the line items for the invoice. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the invoice.
	Lines []UpdateSalesInvoiceLineResponse `json:"lines,omitempty"`
	// The discount to be applied to the entire invoice, applied on top of any line item discounts.
	Discount *UpdateSalesInvoiceDiscountResponse `json:"discount,omitempty"`
	// The amount that is left to be paid.
	AmountDue *UpdateSalesInvoiceAmountDue `json:"amountDue,omitempty"`
	// The total amount without VAT before discounts.
	SubtotalAmount *UpdateSalesInvoiceSubtotalAmount `json:"subtotalAmount,omitempty"`
	// The total amount with VAT.
	TotalAmount *UpdateSalesInvoiceTotalAmount `json:"totalAmount,omitempty"`
	// The total VAT amount.
	TotalVatAmount *UpdateSalesInvoiceTotalVatAmount `json:"totalVatAmount,omitempty"`
	// The total amount without VAT after discounts.
	DiscountedSubtotalAmount *UpdateSalesInvoiceDiscountedSubtotalAmount `json:"discountedSubtotalAmount,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// If issued, the date when the sales invoice was issued, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format.
	IssuedAt *string `json:"issuedAt,omitempty"`
	// If paid, the date when the sales invoice was paid, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format.
	PaidAt *string `json:"paidAt,omitempty"`
	// If issued, the date when the sales invoice payment is due, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format.
	DueAt *string `json:"dueAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *UpdateSalesInvoiceLinks `json:"_links,omitempty"`
}

func (o *UpdateSalesInvoiceResponseBody) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *UpdateSalesInvoiceResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateSalesInvoiceResponseBody) GetInvoiceNumber() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceNumber
}

func (o *UpdateSalesInvoiceResponseBody) GetStatus() *UpdateSalesInvoiceStatusResponse {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateSalesInvoiceResponseBody) GetVatScheme() *UpdateSalesInvoiceVatScheme {
	if o == nil {
		return nil
	}
	return o.VatScheme
}

func (o *UpdateSalesInvoiceResponseBody) GetVatMode() *UpdateSalesInvoiceVatMode {
	if o == nil {
		return nil
	}
	return o.VatMode
}

func (o *UpdateSalesInvoiceResponseBody) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *UpdateSalesInvoiceResponseBody) GetMetadata() *UpdateSalesInvoiceMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *UpdateSalesInvoiceResponseBody) GetPaymentTerm() *UpdateSalesInvoicePaymentTermResponse {
	if o == nil {
		return nil
	}
	return o.PaymentTerm
}

func (o *UpdateSalesInvoiceResponseBody) GetPaymentDetails() *UpdateSalesInvoicePaymentDetailsResponse {
	if o == nil {
		return nil
	}
	return o.PaymentDetails
}

func (o *UpdateSalesInvoiceResponseBody) GetEmailDetails() *UpdateSalesInvoiceEmailDetailsResponse {
	if o == nil {
		return nil
	}
	return o.EmailDetails
}

func (o *UpdateSalesInvoiceResponseBody) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *UpdateSalesInvoiceResponseBody) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *UpdateSalesInvoiceResponseBody) GetRecipientIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.RecipientIdentifier
}

func (o *UpdateSalesInvoiceResponseBody) GetRecipient() *UpdateSalesInvoiceRecipientResponse {
	if o == nil {
		return nil
	}
	return o.Recipient
}

func (o *UpdateSalesInvoiceResponseBody) GetLines() []UpdateSalesInvoiceLineResponse {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *UpdateSalesInvoiceResponseBody) GetDiscount() *UpdateSalesInvoiceDiscountResponse {
	if o == nil {
		return nil
	}
	return o.Discount
}

func (o *UpdateSalesInvoiceResponseBody) GetAmountDue() *UpdateSalesInvoiceAmountDue {
	if o == nil {
		return nil
	}
	return o.AmountDue
}

func (o *UpdateSalesInvoiceResponseBody) GetSubtotalAmount() *UpdateSalesInvoiceSubtotalAmount {
	if o == nil {
		return nil
	}
	return o.SubtotalAmount
}

func (o *UpdateSalesInvoiceResponseBody) GetTotalAmount() *UpdateSalesInvoiceTotalAmount {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *UpdateSalesInvoiceResponseBody) GetTotalVatAmount() *UpdateSalesInvoiceTotalVatAmount {
	if o == nil {
		return nil
	}
	return o.TotalVatAmount
}

func (o *UpdateSalesInvoiceResponseBody) GetDiscountedSubtotalAmount() *UpdateSalesInvoiceDiscountedSubtotalAmount {
	if o == nil {
		return nil
	}
	return o.DiscountedSubtotalAmount
}

func (o *UpdateSalesInvoiceResponseBody) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateSalesInvoiceResponseBody) GetIssuedAt() *string {
	if o == nil {
		return nil
	}
	return o.IssuedAt
}

func (o *UpdateSalesInvoiceResponseBody) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *UpdateSalesInvoiceResponseBody) GetDueAt() *string {
	if o == nil {
		return nil
	}
	return o.DueAt
}

func (o *UpdateSalesInvoiceResponseBody) GetLinks() *UpdateSalesInvoiceLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type UpdateSalesInvoiceResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The sales invoice object.
	Object *UpdateSalesInvoiceResponseBody
}

func (o *UpdateSalesInvoiceResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateSalesInvoiceResponse) GetObject() *UpdateSalesInvoiceResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
