// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
)

// CreateRefundAmountRequest - The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
// amount.
type CreateRefundAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreateRefundAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreateRefundAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateRefundMetadataRequestType string

const (
	CreateRefundMetadataRequestTypeStr        CreateRefundMetadataRequestType = "str"
	CreateRefundMetadataRequestTypeMapOfAny   CreateRefundMetadataRequestType = "mapOfAny"
	CreateRefundMetadataRequestTypeArrayOfStr CreateRefundMetadataRequestType = "arrayOfStr"
)

// CreateRefundMetadataRequest - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type CreateRefundMetadataRequest struct {
	Str        *string        `queryParam:"inline"`
	MapOfAny   map[string]any `queryParam:"inline"`
	ArrayOfStr []string       `queryParam:"inline"`

	Type CreateRefundMetadataRequestType
}

func CreateCreateRefundMetadataRequestStr(str string) CreateRefundMetadataRequest {
	typ := CreateRefundMetadataRequestTypeStr

	return CreateRefundMetadataRequest{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRefundMetadataRequestMapOfAny(mapOfAny map[string]any) CreateRefundMetadataRequest {
	typ := CreateRefundMetadataRequestTypeMapOfAny

	return CreateRefundMetadataRequest{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateCreateRefundMetadataRequestArrayOfStr(arrayOfStr []string) CreateRefundMetadataRequest {
	typ := CreateRefundMetadataRequestTypeArrayOfStr

	return CreateRefundMetadataRequest{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreateRefundMetadataRequest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CreateRefundMetadataRequestTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CreateRefundMetadataRequestTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreateRefundMetadataRequestTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateRefundMetadataRequest", string(data))
}

func (u CreateRefundMetadataRequest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreateRefundMetadataRequest: all fields are null")
}

// TypeAcquirerReference - Specifies the reference type
type TypeAcquirerReference string

const (
	TypeAcquirerReferenceAcquirerReference TypeAcquirerReference = "acquirer-reference"
)

func (e TypeAcquirerReference) ToPointer() *TypeAcquirerReference {
	return &e
}
func (e *TypeAcquirerReference) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "acquirer-reference":
		*e = TypeAcquirerReference(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeAcquirerReference: %v", v)
	}
}

type ExternalReferenceRequest struct {
	// Specifies the reference type
	Type *TypeAcquirerReference `json:"type,omitempty"`
	// Unique reference from the payment provider
	ID *string `json:"id,omitempty"`
}

func (o *ExternalReferenceRequest) GetType() *TypeAcquirerReference {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ExternalReferenceRequest) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// RoutingReversalAmountRequest - The amount that will be pulled back.
type RoutingReversalAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *RoutingReversalAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *RoutingReversalAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// RoutingReversalType - The type of source. Currently only the source type `organization` is supported.
type RoutingReversalType string

const (
	RoutingReversalTypeOrganization RoutingReversalType = "organization"
)

func (e RoutingReversalType) ToPointer() *RoutingReversalType {
	return &e
}
func (e *RoutingReversalType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organization":
		*e = RoutingReversalType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RoutingReversalType: %v", v)
	}
}

// SourceOrganization - Where the funds will be pulled back from.
type SourceOrganization struct {
	// The type of source. Currently only the source type `organization` is supported.
	Type *RoutingReversalType `json:"type,omitempty"`
	// Required for source type `organization`. The ID of the connected organization the funds should be pulled
	// back from.
	OrganizationID *string `json:"organizationId,omitempty"`
}

func (o *SourceOrganization) GetType() *RoutingReversalType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *SourceOrganization) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

type RoutingReversalRequest struct {
	// The amount that will be pulled back.
	Amount *RoutingReversalAmountRequest `json:"amount,omitempty"`
	// Where the funds will be pulled back from.
	Source *SourceOrganization `json:"source,omitempty"`
}

func (o *RoutingReversalRequest) GetAmount() *RoutingReversalAmountRequest {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *RoutingReversalRequest) GetSource() *SourceOrganization {
	if o == nil {
		return nil
	}
	return o.Source
}

type CreateRefundRequestBody struct {
	// The description of the refund that may be shown to your customer, depending on the payment method used.
	Description *string `json:"description,omitempty"`
	// The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
	// amount.
	Amount CreateRefundAmountRequest `json:"amount"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata          *CreateRefundMetadataRequest `json:"metadata,omitempty"`
	ExternalReference *ExternalReferenceRequest    `json:"externalReference,omitempty"`
	// *This feature is only available to marketplace operators.*
	//
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants, by providing the `routing` object during [payment creation](create-payment).
	//
	// When creating refunds for these *routed* payments, by default the full amount is deducted from your balance.
	//
	// If you want to pull back the funds that were routed to the connected merchant(s), you can set this parameter to
	// `true` when issuing a full refund.
	//
	// For more fine-grained control and for partial refunds, use the `routingReversals` parameter instead.
	ReverseRouting *bool `json:"reverseRouting,omitempty"`
	// *This feature is only available to marketplace operators.*
	//
	// When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
	//
	// If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
	// needs to be reversed from which merchant(s).
	//
	// If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
	RoutingReversals []RoutingReversalRequest `json:"routingReversals,omitempty"`
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
}

func (o *CreateRefundRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateRefundRequestBody) GetAmount() CreateRefundAmountRequest {
	if o == nil {
		return CreateRefundAmountRequest{}
	}
	return o.Amount
}

func (o *CreateRefundRequestBody) GetMetadata() *CreateRefundMetadataRequest {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreateRefundRequestBody) GetExternalReference() *ExternalReferenceRequest {
	if o == nil {
		return nil
	}
	return o.ExternalReference
}

func (o *CreateRefundRequestBody) GetReverseRouting() *bool {
	if o == nil {
		return nil
	}
	return o.ReverseRouting
}

func (o *CreateRefundRequestBody) GetRoutingReversals() []RoutingReversalRequest {
	if o == nil {
		return nil
	}
	return o.RoutingReversals
}

func (o *CreateRefundRequestBody) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

type CreateRefundRequest struct {
	// Provide the ID of the related payment.
	PaymentID   string                   `pathParam:"style=simple,explode=false,name=paymentId"`
	RequestBody *CreateRefundRequestBody `request:"mediaType=application/json"`
}

func (o *CreateRefundRequest) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *CreateRefundRequest) GetRequestBody() *CreateRefundRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// CreateRefundUnprocessableEntityDocumentation - The URL to the generic Mollie API error handling guide.
type CreateRefundUnprocessableEntityDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *CreateRefundUnprocessableEntityDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateRefundUnprocessableEntityDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CreateRefundUnprocessableEntityLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation CreateRefundUnprocessableEntityDocumentation `json:"documentation"`
}

func (o *CreateRefundUnprocessableEntityLinks) GetDocumentation() CreateRefundUnprocessableEntityDocumentation {
	if o == nil {
		return CreateRefundUnprocessableEntityDocumentation{}
	}
	return o.Documentation
}

// ConflictDocumentation - The URL to the generic Mollie API error handling guide.
type ConflictDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ConflictDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ConflictDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ConflictLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ConflictDocumentation `json:"documentation"`
}

func (o *ConflictLinks) GetDocumentation() ConflictDocumentation {
	if o == nil {
		return ConflictDocumentation{}
	}
	return o.Documentation
}

// CreateRefundNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type CreateRefundNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *CreateRefundNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateRefundNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CreateRefundNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation CreateRefundNotFoundDocumentation `json:"documentation"`
}

func (o *CreateRefundNotFoundLinks) GetDocumentation() CreateRefundNotFoundDocumentation {
	if o == nil {
		return CreateRefundNotFoundDocumentation{}
	}
	return o.Documentation
}

// CreateRefundMode - Whether this entity was created in live mode or in test mode.
type CreateRefundMode string

const (
	CreateRefundModeLive CreateRefundMode = "live"
	CreateRefundModeTest CreateRefundMode = "test"
)

func (e CreateRefundMode) ToPointer() *CreateRefundMode {
	return &e
}

// CreateRefundAmountResponse - The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
// amount.
type CreateRefundAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreateRefundAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreateRefundAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateRefundSettlementAmount - This optional field will contain the approximate amount that will be deducted from your account balance, converted
// to the currency your account is settled in.
//
// The amount is a **negative** amount.
//
// If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
// zero.
//
// Since the field contains an estimated amount during refund processing, it may change over time. For example, while
// the refund is queued the settlement amount is likely not yet available.
//
// To retrieve accurate settlement amounts we recommend using the
// [List balance transactions endpoint](list-balance-transactions) instead.
type CreateRefundSettlementAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreateRefundSettlementAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreateRefundSettlementAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateRefundMetadataResponseType string

const (
	CreateRefundMetadataResponseTypeStr        CreateRefundMetadataResponseType = "str"
	CreateRefundMetadataResponseTypeMapOfAny   CreateRefundMetadataResponseType = "mapOfAny"
	CreateRefundMetadataResponseTypeArrayOfStr CreateRefundMetadataResponseType = "arrayOfStr"
)

// CreateRefundMetadataResponse - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type CreateRefundMetadataResponse struct {
	Str        *string        `queryParam:"inline"`
	MapOfAny   map[string]any `queryParam:"inline"`
	ArrayOfStr []string       `queryParam:"inline"`

	Type CreateRefundMetadataResponseType
}

func CreateCreateRefundMetadataResponseStr(str string) CreateRefundMetadataResponse {
	typ := CreateRefundMetadataResponseTypeStr

	return CreateRefundMetadataResponse{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRefundMetadataResponseMapOfAny(mapOfAny map[string]any) CreateRefundMetadataResponse {
	typ := CreateRefundMetadataResponseTypeMapOfAny

	return CreateRefundMetadataResponse{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateCreateRefundMetadataResponseArrayOfStr(arrayOfStr []string) CreateRefundMetadataResponse {
	typ := CreateRefundMetadataResponseTypeArrayOfStr

	return CreateRefundMetadataResponse{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreateRefundMetadataResponse) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CreateRefundMetadataResponseTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CreateRefundMetadataResponseTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreateRefundMetadataResponseTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateRefundMetadataResponse", string(data))
}

func (u CreateRefundMetadataResponse) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreateRefundMetadataResponse: all fields are null")
}

// CreateRefundStatus - Refunds may take some time to get confirmed.
type CreateRefundStatus string

const (
	CreateRefundStatusQueued     CreateRefundStatus = "queued"
	CreateRefundStatusPending    CreateRefundStatus = "pending"
	CreateRefundStatusProcessing CreateRefundStatus = "processing"
	CreateRefundStatusRefunded   CreateRefundStatus = "refunded"
	CreateRefundStatusFailed     CreateRefundStatus = "failed"
	CreateRefundStatusCanceled   CreateRefundStatus = "canceled"
)

func (e CreateRefundStatus) ToPointer() *CreateRefundStatus {
	return &e
}

// CreateRefundExternalReferenceType - Specifies the reference type
type CreateRefundExternalReferenceType string

const (
	CreateRefundExternalReferenceTypeAcquirerReference CreateRefundExternalReferenceType = "acquirer-reference"
)

func (e CreateRefundExternalReferenceType) ToPointer() *CreateRefundExternalReferenceType {
	return &e
}

type CreateRefundExternalReferenceResponse struct {
	// Specifies the reference type
	Type *CreateRefundExternalReferenceType `json:"type,omitempty"`
	// Unique reference from the payment provider
	ID *string `json:"id,omitempty"`
}

func (o *CreateRefundExternalReferenceResponse) GetType() *CreateRefundExternalReferenceType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateRefundExternalReferenceResponse) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateRefundRoutingReversalAmountResponse - The amount that will be pulled back.
type CreateRefundRoutingReversalAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreateRefundRoutingReversalAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreateRefundRoutingReversalAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateRefundSourceOutput - Where the funds will be pulled back from.
type CreateRefundSourceOutput struct {
	// Required for source type `organization`. The ID of the connected organization the funds should be pulled
	// back from.
	OrganizationID *string `json:"organizationId,omitempty"`
}

func (o *CreateRefundSourceOutput) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

type CreateRefundRoutingReversalResponse struct {
	// The amount that will be pulled back.
	Amount *CreateRefundRoutingReversalAmountResponse `json:"amount,omitempty"`
	// Where the funds will be pulled back from.
	Source *CreateRefundSourceOutput `json:"source,omitempty"`
}

func (o *CreateRefundRoutingReversalResponse) GetAmount() *CreateRefundRoutingReversalAmountResponse {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CreateRefundRoutingReversalResponse) GetSource() *CreateRefundSourceOutput {
	if o == nil {
		return nil
	}
	return o.Source
}

// CreateRefundSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CreateRefundSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreateRefundSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateRefundSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateRefundPayment - The API resource URL of the [payment](get-payment) that this refund belongs to.
type CreateRefundPayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreateRefundPayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateRefundPayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateRefundSettlement - The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
// yet settled.
type CreateRefundSettlement struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *CreateRefundSettlement) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *CreateRefundSettlement) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// CreateRefundDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CreateRefundDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreateRefundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateRefundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateRefundLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type CreateRefundLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self CreateRefundSelf `json:"self"`
	// The API resource URL of the [payment](get-payment) that this refund belongs to.
	Payment CreateRefundPayment `json:"payment"`
	// The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
	// yet settled.
	Settlement *CreateRefundSettlement `json:"settlement,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation CreateRefundDocumentation `json:"documentation"`
}

func (o *CreateRefundLinks) GetSelf() CreateRefundSelf {
	if o == nil {
		return CreateRefundSelf{}
	}
	return o.Self
}

func (o *CreateRefundLinks) GetPayment() CreateRefundPayment {
	if o == nil {
		return CreateRefundPayment{}
	}
	return o.Payment
}

func (o *CreateRefundLinks) GetSettlement() *CreateRefundSettlement {
	if o == nil {
		return nil
	}
	return o.Settlement
}

func (o *CreateRefundLinks) GetDocumentation() CreateRefundDocumentation {
	if o == nil {
		return CreateRefundDocumentation{}
	}
	return o.Documentation
}

// CreateRefundResponseBody - The newly created refund object.
type CreateRefundResponseBody struct {
	// Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie
	// will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
	ID *string `json:"id,omitempty"`
	// Whether this entity was created in live mode or in test mode.
	Mode *CreateRefundMode `json:"mode,omitempty"`
	// The description of the refund that may be shown to your customer, depending on the payment method used.
	Description *string `json:"description,omitempty"`
	// The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
	// amount.
	Amount *CreateRefundAmountResponse `json:"amount,omitempty"`
	// This optional field will contain the approximate amount that will be deducted from your account balance, converted
	// to the currency your account is settled in.
	//
	// The amount is a **negative** amount.
	//
	// If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
	// zero.
	//
	// Since the field contains an estimated amount during refund processing, it may change over time. For example, while
	// the refund is queued the settlement amount is likely not yet available.
	//
	// To retrieve accurate settlement amounts we recommend using the
	// [List balance transactions endpoint](list-balance-transactions) instead.
	SettlementAmount *CreateRefundSettlementAmount `json:"settlementAmount,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *CreateRefundMetadataResponse `json:"metadata,omitempty"`
	// The unique identifier of the payment this refund was created for.
	// The full payment object can be retrieved via the payment URL in the `_links` object.
	PaymentID *string `json:"paymentId,omitempty"`
	// The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
	SettlementID *string `json:"settlementId,omitempty"`
	// Refunds may take some time to get confirmed.
	Status *CreateRefundStatus `json:"status,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt         *string                                `json:"createdAt,omitempty"`
	ExternalReference *CreateRefundExternalReferenceResponse `json:"externalReference,omitempty"`
	// *This feature is only available to marketplace operators.*
	//
	// When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
	//
	// If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
	// needs to be reversed from which merchant(s).
	//
	// If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
	RoutingReversals []CreateRefundRoutingReversalResponse `json:"routingReversals,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *CreateRefundLinks `json:"_links,omitempty"`
}

func (o *CreateRefundResponseBody) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *CreateRefundResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateRefundResponseBody) GetMode() *CreateRefundMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *CreateRefundResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateRefundResponseBody) GetAmount() *CreateRefundAmountResponse {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CreateRefundResponseBody) GetSettlementAmount() *CreateRefundSettlementAmount {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *CreateRefundResponseBody) GetMetadata() *CreateRefundMetadataResponse {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreateRefundResponseBody) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *CreateRefundResponseBody) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *CreateRefundResponseBody) GetStatus() *CreateRefundStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateRefundResponseBody) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateRefundResponseBody) GetExternalReference() *CreateRefundExternalReferenceResponse {
	if o == nil {
		return nil
	}
	return o.ExternalReference
}

func (o *CreateRefundResponseBody) GetRoutingReversals() []CreateRefundRoutingReversalResponse {
	if o == nil {
		return nil
	}
	return o.RoutingReversals
}

func (o *CreateRefundResponseBody) GetLinks() *CreateRefundLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type CreateRefundResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The newly created refund object.
	Object *CreateRefundResponseBody
}

func (o *CreateRefundResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateRefundResponse) GetObject() *CreateRefundResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
