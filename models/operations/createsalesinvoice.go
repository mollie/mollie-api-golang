// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// CreateSalesInvoiceStatusRequest - The status for the invoice to end up in.
//
// A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
// the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
// mark it as paid. It can then subsequently be sent as well, same as with `issued`.
//
// A status value that cannot be set but can be returned is `canceled`, for invoices which were
// issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
//
// Dependent parameters:
//   - `paymentDetails` is required if invoice should be set directly to `paid`
//   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
//   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
type CreateSalesInvoiceStatusRequest string

const (
	CreateSalesInvoiceStatusRequestDraft  CreateSalesInvoiceStatusRequest = "draft"
	CreateSalesInvoiceStatusRequestIssued CreateSalesInvoiceStatusRequest = "issued"
	CreateSalesInvoiceStatusRequestPaid   CreateSalesInvoiceStatusRequest = "paid"
)

func (e CreateSalesInvoiceStatusRequest) ToPointer() *CreateSalesInvoiceStatusRequest {
	return &e
}
func (e *CreateSalesInvoiceStatusRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "issued":
		fallthrough
	case "paid":
		*e = CreateSalesInvoiceStatusRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSalesInvoiceStatusRequest: %v", v)
	}
}

// VatSchemeRequest - The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
type VatSchemeRequest string

const (
	VatSchemeRequestStandard    VatSchemeRequest = "standard"
	VatSchemeRequestOneStopShop VatSchemeRequest = "one-stop-shop"
)

func (e VatSchemeRequest) ToPointer() *VatSchemeRequest {
	return &e
}
func (e *VatSchemeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "one-stop-shop":
		*e = VatSchemeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VatSchemeRequest: %v", v)
	}
}

// VatModeRequest - The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
// price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
type VatModeRequest string

const (
	VatModeRequestExclusive VatModeRequest = "exclusive"
	VatModeRequestInclusive VatModeRequest = "inclusive"
)

func (e VatModeRequest) ToPointer() *VatModeRequest {
	return &e
}
func (e *VatModeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "exclusive":
		fallthrough
	case "inclusive":
		*e = VatModeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VatModeRequest: %v", v)
	}
}

// CreateSalesInvoiceMetadataRequest - Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type CreateSalesInvoiceMetadataRequest struct {
}

// CreateSalesInvoicePaymentTermRequest - The payment term to be set on the invoice.
type CreateSalesInvoicePaymentTermRequest string

const (
	CreateSalesInvoicePaymentTermRequestSevendays               CreateSalesInvoicePaymentTermRequest = "7 days"
	CreateSalesInvoicePaymentTermRequestFourteendays            CreateSalesInvoicePaymentTermRequest = "14 days"
	CreateSalesInvoicePaymentTermRequestThirtydays              CreateSalesInvoicePaymentTermRequest = "30 days"
	CreateSalesInvoicePaymentTermRequestFortyFivedays           CreateSalesInvoicePaymentTermRequest = "45 days"
	CreateSalesInvoicePaymentTermRequestSixtydays               CreateSalesInvoicePaymentTermRequest = "60 days"
	CreateSalesInvoicePaymentTermRequestNinetydays              CreateSalesInvoicePaymentTermRequest = "90 days"
	CreateSalesInvoicePaymentTermRequestOneHundredAndTwentydays CreateSalesInvoicePaymentTermRequest = "120 days"
)

func (e CreateSalesInvoicePaymentTermRequest) ToPointer() *CreateSalesInvoicePaymentTermRequest {
	return &e
}
func (e *CreateSalesInvoicePaymentTermRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "7 days":
		fallthrough
	case "14 days":
		fallthrough
	case "30 days":
		fallthrough
	case "45 days":
		fallthrough
	case "60 days":
		fallthrough
	case "90 days":
		fallthrough
	case "120 days":
		*e = CreateSalesInvoicePaymentTermRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSalesInvoicePaymentTermRequest: %v", v)
	}
}

// CreateSalesInvoiceSourceRequest - The way through which the invoice is to be set to paid.
type CreateSalesInvoiceSourceRequest string

const (
	CreateSalesInvoiceSourceRequestManual      CreateSalesInvoiceSourceRequest = "manual"
	CreateSalesInvoiceSourceRequestPaymentLink CreateSalesInvoiceSourceRequest = "payment-link"
	CreateSalesInvoiceSourceRequestPayment     CreateSalesInvoiceSourceRequest = "payment"
)

func (e CreateSalesInvoiceSourceRequest) ToPointer() *CreateSalesInvoiceSourceRequest {
	return &e
}
func (e *CreateSalesInvoiceSourceRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manual":
		fallthrough
	case "payment-link":
		fallthrough
	case "payment":
		*e = CreateSalesInvoiceSourceRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSalesInvoiceSourceRequest: %v", v)
	}
}

// CreateSalesInvoicePaymentDetailsRequest - Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
// provided details. Required for `paid` status.
type CreateSalesInvoicePaymentDetailsRequest struct {
	// The way through which the invoice is to be set to paid.
	Source CreateSalesInvoiceSourceRequest `json:"source"`
	// A reference to the payment the sales invoice is paid by. Required for `source` values `payment-link` and
	// `payment`.
	SourceReference *string `json:"sourceReference,omitempty"`
}

func (o *CreateSalesInvoicePaymentDetailsRequest) GetSource() CreateSalesInvoiceSourceRequest {
	if o == nil {
		return CreateSalesInvoiceSourceRequest("")
	}
	return o.Source
}

func (o *CreateSalesInvoicePaymentDetailsRequest) GetSourceReference() *string {
	if o == nil {
		return nil
	}
	return o.SourceReference
}

// CreateSalesInvoiceEmailDetailsRequest - Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
// recipient with the provided `subject` and `body`. Required for `issued` status.
type CreateSalesInvoiceEmailDetailsRequest struct {
	// The subject of the email to be sent.
	Subject string `json:"subject"`
	// The body of the email to be sent. To add newline characters, you can use `\n`.
	Body string `json:"body"`
}

func (o *CreateSalesInvoiceEmailDetailsRequest) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

func (o *CreateSalesInvoiceEmailDetailsRequest) GetBody() string {
	if o == nil {
		return ""
	}
	return o.Body
}

// CreateSalesInvoiceRecipientTypeRequest - The type of recipient, either `consumer` or `business`. This will determine what further fields are
// required on the `recipient` object.
type CreateSalesInvoiceRecipientTypeRequest string

const (
	CreateSalesInvoiceRecipientTypeRequestConsumer CreateSalesInvoiceRecipientTypeRequest = "consumer"
	CreateSalesInvoiceRecipientTypeRequestBusiness CreateSalesInvoiceRecipientTypeRequest = "business"
)

func (e CreateSalesInvoiceRecipientTypeRequest) ToPointer() *CreateSalesInvoiceRecipientTypeRequest {
	return &e
}
func (e *CreateSalesInvoiceRecipientTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "business":
		*e = CreateSalesInvoiceRecipientTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSalesInvoiceRecipientTypeRequest: %v", v)
	}
}

// CreateSalesInvoiceLocaleRequest - The locale for the recipient, to be used for translations in PDF generation and payment pages.
type CreateSalesInvoiceLocaleRequest string

const (
	CreateSalesInvoiceLocaleRequestEnUs CreateSalesInvoiceLocaleRequest = "en_US"
	CreateSalesInvoiceLocaleRequestEnGb CreateSalesInvoiceLocaleRequest = "en_GB"
	CreateSalesInvoiceLocaleRequestNlNl CreateSalesInvoiceLocaleRequest = "nl_NL"
	CreateSalesInvoiceLocaleRequestNlBe CreateSalesInvoiceLocaleRequest = "nl_BE"
	CreateSalesInvoiceLocaleRequestDeDe CreateSalesInvoiceLocaleRequest = "de_DE"
	CreateSalesInvoiceLocaleRequestDeAt CreateSalesInvoiceLocaleRequest = "de_AT"
	CreateSalesInvoiceLocaleRequestDeCh CreateSalesInvoiceLocaleRequest = "de_CH"
	CreateSalesInvoiceLocaleRequestFrFr CreateSalesInvoiceLocaleRequest = "fr_FR"
	CreateSalesInvoiceLocaleRequestFrBe CreateSalesInvoiceLocaleRequest = "fr_BE"
)

func (e CreateSalesInvoiceLocaleRequest) ToPointer() *CreateSalesInvoiceLocaleRequest {
	return &e
}
func (e *CreateSalesInvoiceLocaleRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		*e = CreateSalesInvoiceLocaleRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSalesInvoiceLocaleRequest: %v", v)
	}
}

type CreateSalesInvoiceRecipientRequest struct {
	// The type of recipient, either `consumer` or `business`. This will determine what further fields are
	// required on the `recipient` object.
	Type CreateSalesInvoiceRecipientTypeRequest `json:"type"`
	// The title of the `consumer` type recipient, for example Mr. or Mrs..
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain
	// only numbers.
	GivenName *string `json:"givenName,omitempty"`
	// The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain
	// only numbers.
	FamilyName *string `json:"familyName,omitempty"`
	// The trading name of the `business` type recipient.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber`
	// has to be provided.
	OrganizationNumber *string `json:"organizationNumber,omitempty"`
	// The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber`
	// has to be provided.
	VatNumber *string `json:"vatNumber,omitempty"`
	// The email address of the recipient.
	Email string `json:"email"`
	// The phone number of the recipient.
	Phone *string `json:"phone,omitempty"`
	// A street and street number.
	StreetAndNumber string `json:"streetAndNumber"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code.
	PostalCode string `json:"postalCode"`
	// The recipient's city.
	City string `json:"city"`
	// The recipient's region.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	Country string `json:"country"`
	// The locale for the recipient, to be used for translations in PDF generation and payment pages.
	Locale CreateSalesInvoiceLocaleRequest `json:"locale"`
}

func (o *CreateSalesInvoiceRecipientRequest) GetType() CreateSalesInvoiceRecipientTypeRequest {
	if o == nil {
		return CreateSalesInvoiceRecipientTypeRequest("")
	}
	return o.Type
}

func (o *CreateSalesInvoiceRecipientRequest) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CreateSalesInvoiceRecipientRequest) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *CreateSalesInvoiceRecipientRequest) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *CreateSalesInvoiceRecipientRequest) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *CreateSalesInvoiceRecipientRequest) GetOrganizationNumber() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationNumber
}

func (o *CreateSalesInvoiceRecipientRequest) GetVatNumber() *string {
	if o == nil {
		return nil
	}
	return o.VatNumber
}

func (o *CreateSalesInvoiceRecipientRequest) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *CreateSalesInvoiceRecipientRequest) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *CreateSalesInvoiceRecipientRequest) GetStreetAndNumber() string {
	if o == nil {
		return ""
	}
	return o.StreetAndNumber
}

func (o *CreateSalesInvoiceRecipientRequest) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *CreateSalesInvoiceRecipientRequest) GetPostalCode() string {
	if o == nil {
		return ""
	}
	return o.PostalCode
}

func (o *CreateSalesInvoiceRecipientRequest) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateSalesInvoiceRecipientRequest) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *CreateSalesInvoiceRecipientRequest) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateSalesInvoiceRecipientRequest) GetLocale() CreateSalesInvoiceLocaleRequest {
	if o == nil {
		return CreateSalesInvoiceLocaleRequest("")
	}
	return o.Locale
}

// CreateSalesInvoiceUnitPriceRequest - The price of a single item excluding VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// The unit price can be zero in case of free items.
type CreateSalesInvoiceUnitPriceRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreateSalesInvoiceUnitPriceRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreateSalesInvoiceUnitPriceRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateSalesInvoiceLineTypeRequest - The type of discount.
type CreateSalesInvoiceLineTypeRequest string

const (
	CreateSalesInvoiceLineTypeRequestAmount     CreateSalesInvoiceLineTypeRequest = "amount"
	CreateSalesInvoiceLineTypeRequestPercentage CreateSalesInvoiceLineTypeRequest = "percentage"
)

func (e CreateSalesInvoiceLineTypeRequest) ToPointer() *CreateSalesInvoiceLineTypeRequest {
	return &e
}
func (e *CreateSalesInvoiceLineTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amount":
		fallthrough
	case "percentage":
		*e = CreateSalesInvoiceLineTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSalesInvoiceLineTypeRequest: %v", v)
	}
}

// CreateSalesInvoiceLineDiscountRequest - The discount to be applied to the line item.
type CreateSalesInvoiceLineDiscountRequest struct {
	// The type of discount.
	Type CreateSalesInvoiceLineTypeRequest `json:"type"`
	// A string containing an exact monetary amount in the given currency, or the percentage.
	Value string `json:"value"`
}

func (o *CreateSalesInvoiceLineDiscountRequest) GetType() CreateSalesInvoiceLineTypeRequest {
	if o == nil {
		return CreateSalesInvoiceLineTypeRequest("")
	}
	return o.Type
}

func (o *CreateSalesInvoiceLineDiscountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateSalesInvoiceLineRequest struct {
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The vat rate to be applied to this line item.
	VatRate string `json:"vatRate"`
	// The price of a single item excluding VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// The unit price can be zero in case of free items.
	UnitPrice CreateSalesInvoiceUnitPriceRequest `json:"unitPrice"`
	// The discount to be applied to the line item.
	Discount *CreateSalesInvoiceLineDiscountRequest `json:"discount,omitempty"`
}

func (o *CreateSalesInvoiceLineRequest) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CreateSalesInvoiceLineRequest) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *CreateSalesInvoiceLineRequest) GetVatRate() string {
	if o == nil {
		return ""
	}
	return o.VatRate
}

func (o *CreateSalesInvoiceLineRequest) GetUnitPrice() CreateSalesInvoiceUnitPriceRequest {
	if o == nil {
		return CreateSalesInvoiceUnitPriceRequest{}
	}
	return o.UnitPrice
}

func (o *CreateSalesInvoiceLineRequest) GetDiscount() *CreateSalesInvoiceLineDiscountRequest {
	if o == nil {
		return nil
	}
	return o.Discount
}

// CreateSalesInvoiceDiscountTypeRequest - The type of discount.
type CreateSalesInvoiceDiscountTypeRequest string

const (
	CreateSalesInvoiceDiscountTypeRequestAmount     CreateSalesInvoiceDiscountTypeRequest = "amount"
	CreateSalesInvoiceDiscountTypeRequestPercentage CreateSalesInvoiceDiscountTypeRequest = "percentage"
)

func (e CreateSalesInvoiceDiscountTypeRequest) ToPointer() *CreateSalesInvoiceDiscountTypeRequest {
	return &e
}
func (e *CreateSalesInvoiceDiscountTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amount":
		fallthrough
	case "percentage":
		*e = CreateSalesInvoiceDiscountTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSalesInvoiceDiscountTypeRequest: %v", v)
	}
}

// CreateSalesInvoiceDiscountRequest - The discount to be applied to the entire invoice, applied on top of any line item discounts.
type CreateSalesInvoiceDiscountRequest struct {
	// The type of discount.
	Type CreateSalesInvoiceDiscountTypeRequest `json:"type"`
	// A string containing an exact monetary amount in the given currency, or the percentage.
	Value string `json:"value"`
}

func (o *CreateSalesInvoiceDiscountRequest) GetType() CreateSalesInvoiceDiscountTypeRequest {
	if o == nil {
		return CreateSalesInvoiceDiscountTypeRequest("")
	}
	return o.Type
}

func (o *CreateSalesInvoiceDiscountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateSalesInvoiceRequest struct {
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
	// request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
	// required.
	ProfileID *string `json:"profileId,omitempty"`
	// The status for the invoice to end up in.
	//
	// A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
	// the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
	// mark it as paid. It can then subsequently be sent as well, same as with `issued`.
	//
	// A status value that cannot be set but can be returned is `canceled`, for invoices which were
	// issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
	//
	// Dependent parameters:
	//   - `paymentDetails` is required if invoice should be set directly to `paid`
	//   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
	//   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
	Status CreateSalesInvoiceStatusRequest `json:"status"`
	// The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
	VatScheme *VatSchemeRequest `json:"vatScheme,omitempty"`
	// The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
	// price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
	VatMode *VatModeRequest `json:"vatMode,omitempty"`
	// A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
	Memo *string `json:"memo,omitempty"`
	// Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *CreateSalesInvoiceMetadataRequest `json:"metadata,omitempty"`
	// The payment term to be set on the invoice.
	PaymentTerm *CreateSalesInvoicePaymentTermRequest `json:"paymentTerm,omitempty"`
	// Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
	// provided details. Required for `paid` status.
	PaymentDetails *CreateSalesInvoicePaymentDetailsRequest `json:"paymentDetails,omitempty"`
	// Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
	// recipient with the provided `subject` and `body`. Required for `issued` status.
	EmailDetails *CreateSalesInvoiceEmailDetailsRequest `json:"emailDetails,omitempty"`
	// The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
	// provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
	CustomerID *string `json:"customerId,omitempty"`
	// The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
	// `customerId` becomes required as well. Only allowed for invoices with status `paid`.
	MandateID *string `json:"mandateId,omitempty"`
	// An identifier tied to the recipient data. This should be a unique value based on data your system contains,
	// so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
	// is not required to send a first invoice to a recipient.
	RecipientIdentifier string                              `json:"recipientIdentifier"`
	Recipient           *CreateSalesInvoiceRecipientRequest `json:"recipient"`
	// Provide the line items for the invoice. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the invoice.
	Lines []CreateSalesInvoiceLineRequest `json:"lines"`
	// The discount to be applied to the entire invoice, applied on top of any line item discounts.
	Discount *CreateSalesInvoiceDiscountRequest `json:"discount,omitempty"`
}

func (o *CreateSalesInvoiceRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

func (o *CreateSalesInvoiceRequest) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *CreateSalesInvoiceRequest) GetStatus() CreateSalesInvoiceStatusRequest {
	if o == nil {
		return CreateSalesInvoiceStatusRequest("")
	}
	return o.Status
}

func (o *CreateSalesInvoiceRequest) GetVatScheme() *VatSchemeRequest {
	if o == nil {
		return nil
	}
	return o.VatScheme
}

func (o *CreateSalesInvoiceRequest) GetVatMode() *VatModeRequest {
	if o == nil {
		return nil
	}
	return o.VatMode
}

func (o *CreateSalesInvoiceRequest) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *CreateSalesInvoiceRequest) GetMetadata() *CreateSalesInvoiceMetadataRequest {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreateSalesInvoiceRequest) GetPaymentTerm() *CreateSalesInvoicePaymentTermRequest {
	if o == nil {
		return nil
	}
	return o.PaymentTerm
}

func (o *CreateSalesInvoiceRequest) GetPaymentDetails() *CreateSalesInvoicePaymentDetailsRequest {
	if o == nil {
		return nil
	}
	return o.PaymentDetails
}

func (o *CreateSalesInvoiceRequest) GetEmailDetails() *CreateSalesInvoiceEmailDetailsRequest {
	if o == nil {
		return nil
	}
	return o.EmailDetails
}

func (o *CreateSalesInvoiceRequest) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *CreateSalesInvoiceRequest) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *CreateSalesInvoiceRequest) GetRecipientIdentifier() string {
	if o == nil {
		return ""
	}
	return o.RecipientIdentifier
}

func (o *CreateSalesInvoiceRequest) GetRecipient() *CreateSalesInvoiceRecipientRequest {
	if o == nil {
		return nil
	}
	return o.Recipient
}

func (o *CreateSalesInvoiceRequest) GetLines() []CreateSalesInvoiceLineRequest {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *CreateSalesInvoiceRequest) GetDiscount() *CreateSalesInvoiceDiscountRequest {
	if o == nil {
		return nil
	}
	return o.Discount
}

// CreateSalesInvoiceUnprocessableEntityDocumentation - The URL to the generic Mollie API error handling guide.
type CreateSalesInvoiceUnprocessableEntityDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *CreateSalesInvoiceUnprocessableEntityDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateSalesInvoiceUnprocessableEntityDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CreateSalesInvoiceUnprocessableEntityLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation CreateSalesInvoiceUnprocessableEntityDocumentation `json:"documentation"`
}

func (o *CreateSalesInvoiceUnprocessableEntityLinks) GetDocumentation() CreateSalesInvoiceUnprocessableEntityDocumentation {
	if o == nil {
		return CreateSalesInvoiceUnprocessableEntityDocumentation{}
	}
	return o.Documentation
}

// CreateSalesInvoiceNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type CreateSalesInvoiceNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *CreateSalesInvoiceNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateSalesInvoiceNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CreateSalesInvoiceNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation CreateSalesInvoiceNotFoundDocumentation `json:"documentation"`
}

func (o *CreateSalesInvoiceNotFoundLinks) GetDocumentation() CreateSalesInvoiceNotFoundDocumentation {
	if o == nil {
		return CreateSalesInvoiceNotFoundDocumentation{}
	}
	return o.Documentation
}

// CreateSalesInvoiceStatusResponse - The status for the invoice to end up in.
//
// A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
// the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
// mark it as paid. It can then subsequently be sent as well, same as with `issued`.
//
// A status value that cannot be set but can be returned is `canceled`, for invoices which were
// issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
//
// Dependent parameters:
//   - `paymentDetails` is required if invoice should be set directly to `paid`
//   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
//   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
type CreateSalesInvoiceStatusResponse string

const (
	CreateSalesInvoiceStatusResponseDraft  CreateSalesInvoiceStatusResponse = "draft"
	CreateSalesInvoiceStatusResponseIssued CreateSalesInvoiceStatusResponse = "issued"
	CreateSalesInvoiceStatusResponsePaid   CreateSalesInvoiceStatusResponse = "paid"
)

func (e CreateSalesInvoiceStatusResponse) ToPointer() *CreateSalesInvoiceStatusResponse {
	return &e
}

// CreateSalesInvoiceVatSchemeResponse - The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
type CreateSalesInvoiceVatSchemeResponse string

const (
	CreateSalesInvoiceVatSchemeResponseStandard    CreateSalesInvoiceVatSchemeResponse = "standard"
	CreateSalesInvoiceVatSchemeResponseOneStopShop CreateSalesInvoiceVatSchemeResponse = "one-stop-shop"
)

func (e CreateSalesInvoiceVatSchemeResponse) ToPointer() *CreateSalesInvoiceVatSchemeResponse {
	return &e
}

// CreateSalesInvoiceVatModeResponse - The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
// price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
type CreateSalesInvoiceVatModeResponse string

const (
	CreateSalesInvoiceVatModeResponseExclusive CreateSalesInvoiceVatModeResponse = "exclusive"
	CreateSalesInvoiceVatModeResponseInclusive CreateSalesInvoiceVatModeResponse = "inclusive"
)

func (e CreateSalesInvoiceVatModeResponse) ToPointer() *CreateSalesInvoiceVatModeResponse {
	return &e
}

// CreateSalesInvoiceMetadataResponse - Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type CreateSalesInvoiceMetadataResponse struct {
}

// CreateSalesInvoicePaymentTermResponse - The payment term to be set on the invoice.
type CreateSalesInvoicePaymentTermResponse string

const (
	CreateSalesInvoicePaymentTermResponseSevendays               CreateSalesInvoicePaymentTermResponse = "7 days"
	CreateSalesInvoicePaymentTermResponseFourteendays            CreateSalesInvoicePaymentTermResponse = "14 days"
	CreateSalesInvoicePaymentTermResponseThirtydays              CreateSalesInvoicePaymentTermResponse = "30 days"
	CreateSalesInvoicePaymentTermResponseFortyFivedays           CreateSalesInvoicePaymentTermResponse = "45 days"
	CreateSalesInvoicePaymentTermResponseSixtydays               CreateSalesInvoicePaymentTermResponse = "60 days"
	CreateSalesInvoicePaymentTermResponseNinetydays              CreateSalesInvoicePaymentTermResponse = "90 days"
	CreateSalesInvoicePaymentTermResponseOneHundredAndTwentydays CreateSalesInvoicePaymentTermResponse = "120 days"
)

func (e CreateSalesInvoicePaymentTermResponse) ToPointer() *CreateSalesInvoicePaymentTermResponse {
	return &e
}

// CreateSalesInvoiceSourceResponse - The way through which the invoice is to be set to paid.
type CreateSalesInvoiceSourceResponse string

const (
	CreateSalesInvoiceSourceResponseManual      CreateSalesInvoiceSourceResponse = "manual"
	CreateSalesInvoiceSourceResponsePaymentLink CreateSalesInvoiceSourceResponse = "payment-link"
	CreateSalesInvoiceSourceResponsePayment     CreateSalesInvoiceSourceResponse = "payment"
)

func (e CreateSalesInvoiceSourceResponse) ToPointer() *CreateSalesInvoiceSourceResponse {
	return &e
}

// CreateSalesInvoicePaymentDetailsResponse - Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
// provided details. Required for `paid` status.
type CreateSalesInvoicePaymentDetailsResponse struct {
	// The way through which the invoice is to be set to paid.
	Source CreateSalesInvoiceSourceResponse `json:"source"`
	// A reference to the payment the sales invoice is paid by. Required for `source` values `payment-link` and
	// `payment`.
	SourceReference *string `json:"sourceReference,omitempty"`
}

func (o *CreateSalesInvoicePaymentDetailsResponse) GetSource() CreateSalesInvoiceSourceResponse {
	if o == nil {
		return CreateSalesInvoiceSourceResponse("")
	}
	return o.Source
}

func (o *CreateSalesInvoicePaymentDetailsResponse) GetSourceReference() *string {
	if o == nil {
		return nil
	}
	return o.SourceReference
}

// CreateSalesInvoiceEmailDetailsResponse - Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
// recipient with the provided `subject` and `body`. Required for `issued` status.
type CreateSalesInvoiceEmailDetailsResponse struct {
	// The subject of the email to be sent.
	Subject string `json:"subject"`
	// The body of the email to be sent. To add newline characters, you can use `\n`.
	Body string `json:"body"`
}

func (o *CreateSalesInvoiceEmailDetailsResponse) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

func (o *CreateSalesInvoiceEmailDetailsResponse) GetBody() string {
	if o == nil {
		return ""
	}
	return o.Body
}

// CreateSalesInvoiceRecipientTypeResponse - The type of recipient, either `consumer` or `business`. This will determine what further fields are
// required on the `recipient` object.
type CreateSalesInvoiceRecipientTypeResponse string

const (
	CreateSalesInvoiceRecipientTypeResponseConsumer CreateSalesInvoiceRecipientTypeResponse = "consumer"
	CreateSalesInvoiceRecipientTypeResponseBusiness CreateSalesInvoiceRecipientTypeResponse = "business"
)

func (e CreateSalesInvoiceRecipientTypeResponse) ToPointer() *CreateSalesInvoiceRecipientTypeResponse {
	return &e
}

// CreateSalesInvoiceLocaleResponse - The locale for the recipient, to be used for translations in PDF generation and payment pages.
type CreateSalesInvoiceLocaleResponse string

const (
	CreateSalesInvoiceLocaleResponseEnUs CreateSalesInvoiceLocaleResponse = "en_US"
	CreateSalesInvoiceLocaleResponseEnGb CreateSalesInvoiceLocaleResponse = "en_GB"
	CreateSalesInvoiceLocaleResponseNlNl CreateSalesInvoiceLocaleResponse = "nl_NL"
	CreateSalesInvoiceLocaleResponseNlBe CreateSalesInvoiceLocaleResponse = "nl_BE"
	CreateSalesInvoiceLocaleResponseDeDe CreateSalesInvoiceLocaleResponse = "de_DE"
	CreateSalesInvoiceLocaleResponseDeAt CreateSalesInvoiceLocaleResponse = "de_AT"
	CreateSalesInvoiceLocaleResponseDeCh CreateSalesInvoiceLocaleResponse = "de_CH"
	CreateSalesInvoiceLocaleResponseFrFr CreateSalesInvoiceLocaleResponse = "fr_FR"
	CreateSalesInvoiceLocaleResponseFrBe CreateSalesInvoiceLocaleResponse = "fr_BE"
)

func (e CreateSalesInvoiceLocaleResponse) ToPointer() *CreateSalesInvoiceLocaleResponse {
	return &e
}

type CreateSalesInvoiceRecipientResponse struct {
	// The type of recipient, either `consumer` or `business`. This will determine what further fields are
	// required on the `recipient` object.
	Type CreateSalesInvoiceRecipientTypeResponse `json:"type"`
	// The title of the `consumer` type recipient, for example Mr. or Mrs..
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain
	// only numbers.
	GivenName *string `json:"givenName,omitempty"`
	// The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain
	// only numbers.
	FamilyName *string `json:"familyName,omitempty"`
	// The trading name of the `business` type recipient.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber`
	// has to be provided.
	OrganizationNumber *string `json:"organizationNumber,omitempty"`
	// The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber`
	// has to be provided.
	VatNumber *string `json:"vatNumber,omitempty"`
	// The email address of the recipient.
	Email string `json:"email"`
	// The phone number of the recipient.
	Phone *string `json:"phone,omitempty"`
	// A street and street number.
	StreetAndNumber string `json:"streetAndNumber"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code.
	PostalCode string `json:"postalCode"`
	// The recipient's city.
	City string `json:"city"`
	// The recipient's region.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	Country string `json:"country"`
	// The locale for the recipient, to be used for translations in PDF generation and payment pages.
	Locale CreateSalesInvoiceLocaleResponse `json:"locale"`
}

func (o *CreateSalesInvoiceRecipientResponse) GetType() CreateSalesInvoiceRecipientTypeResponse {
	if o == nil {
		return CreateSalesInvoiceRecipientTypeResponse("")
	}
	return o.Type
}

func (o *CreateSalesInvoiceRecipientResponse) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CreateSalesInvoiceRecipientResponse) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *CreateSalesInvoiceRecipientResponse) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *CreateSalesInvoiceRecipientResponse) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *CreateSalesInvoiceRecipientResponse) GetOrganizationNumber() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationNumber
}

func (o *CreateSalesInvoiceRecipientResponse) GetVatNumber() *string {
	if o == nil {
		return nil
	}
	return o.VatNumber
}

func (o *CreateSalesInvoiceRecipientResponse) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *CreateSalesInvoiceRecipientResponse) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *CreateSalesInvoiceRecipientResponse) GetStreetAndNumber() string {
	if o == nil {
		return ""
	}
	return o.StreetAndNumber
}

func (o *CreateSalesInvoiceRecipientResponse) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *CreateSalesInvoiceRecipientResponse) GetPostalCode() string {
	if o == nil {
		return ""
	}
	return o.PostalCode
}

func (o *CreateSalesInvoiceRecipientResponse) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *CreateSalesInvoiceRecipientResponse) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *CreateSalesInvoiceRecipientResponse) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *CreateSalesInvoiceRecipientResponse) GetLocale() CreateSalesInvoiceLocaleResponse {
	if o == nil {
		return CreateSalesInvoiceLocaleResponse("")
	}
	return o.Locale
}

// CreateSalesInvoiceUnitPriceResponse - The price of a single item excluding VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// The unit price can be zero in case of free items.
type CreateSalesInvoiceUnitPriceResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreateSalesInvoiceUnitPriceResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreateSalesInvoiceUnitPriceResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateSalesInvoiceLineTypeResponse - The type of discount.
type CreateSalesInvoiceLineTypeResponse string

const (
	CreateSalesInvoiceLineTypeResponseAmount     CreateSalesInvoiceLineTypeResponse = "amount"
	CreateSalesInvoiceLineTypeResponsePercentage CreateSalesInvoiceLineTypeResponse = "percentage"
)

func (e CreateSalesInvoiceLineTypeResponse) ToPointer() *CreateSalesInvoiceLineTypeResponse {
	return &e
}

// CreateSalesInvoiceLineDiscountResponse - The discount to be applied to the line item.
type CreateSalesInvoiceLineDiscountResponse struct {
	// The type of discount.
	Type CreateSalesInvoiceLineTypeResponse `json:"type"`
	// A string containing an exact monetary amount in the given currency, or the percentage.
	Value string `json:"value"`
}

func (o *CreateSalesInvoiceLineDiscountResponse) GetType() CreateSalesInvoiceLineTypeResponse {
	if o == nil {
		return CreateSalesInvoiceLineTypeResponse("")
	}
	return o.Type
}

func (o *CreateSalesInvoiceLineDiscountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateSalesInvoiceLineResponse struct {
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The vat rate to be applied to this line item.
	VatRate string `json:"vatRate"`
	// The price of a single item excluding VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// The unit price can be zero in case of free items.
	UnitPrice CreateSalesInvoiceUnitPriceResponse `json:"unitPrice"`
	// The discount to be applied to the line item.
	Discount *CreateSalesInvoiceLineDiscountResponse `json:"discount,omitempty"`
}

func (o *CreateSalesInvoiceLineResponse) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CreateSalesInvoiceLineResponse) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *CreateSalesInvoiceLineResponse) GetVatRate() string {
	if o == nil {
		return ""
	}
	return o.VatRate
}

func (o *CreateSalesInvoiceLineResponse) GetUnitPrice() CreateSalesInvoiceUnitPriceResponse {
	if o == nil {
		return CreateSalesInvoiceUnitPriceResponse{}
	}
	return o.UnitPrice
}

func (o *CreateSalesInvoiceLineResponse) GetDiscount() *CreateSalesInvoiceLineDiscountResponse {
	if o == nil {
		return nil
	}
	return o.Discount
}

// CreateSalesInvoiceDiscountTypeResponse - The type of discount.
type CreateSalesInvoiceDiscountTypeResponse string

const (
	CreateSalesInvoiceDiscountTypeResponseAmount     CreateSalesInvoiceDiscountTypeResponse = "amount"
	CreateSalesInvoiceDiscountTypeResponsePercentage CreateSalesInvoiceDiscountTypeResponse = "percentage"
)

func (e CreateSalesInvoiceDiscountTypeResponse) ToPointer() *CreateSalesInvoiceDiscountTypeResponse {
	return &e
}

// CreateSalesInvoiceDiscountResponse - The discount to be applied to the entire invoice, applied on top of any line item discounts.
type CreateSalesInvoiceDiscountResponse struct {
	// The type of discount.
	Type CreateSalesInvoiceDiscountTypeResponse `json:"type"`
	// A string containing an exact monetary amount in the given currency, or the percentage.
	Value string `json:"value"`
}

func (o *CreateSalesInvoiceDiscountResponse) GetType() CreateSalesInvoiceDiscountTypeResponse {
	if o == nil {
		return CreateSalesInvoiceDiscountTypeResponse("")
	}
	return o.Type
}

func (o *CreateSalesInvoiceDiscountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateSalesInvoiceAmountDue - The amount that is left to be paid.
type CreateSalesInvoiceAmountDue struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreateSalesInvoiceAmountDue) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreateSalesInvoiceAmountDue) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateSalesInvoiceSubtotalAmount - The total amount without VAT before discounts.
type CreateSalesInvoiceSubtotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreateSalesInvoiceSubtotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreateSalesInvoiceSubtotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateSalesInvoiceTotalAmount - The total amount with VAT.
type CreateSalesInvoiceTotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreateSalesInvoiceTotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreateSalesInvoiceTotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateSalesInvoiceTotalVatAmount - The total VAT amount.
type CreateSalesInvoiceTotalVatAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreateSalesInvoiceTotalVatAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreateSalesInvoiceTotalVatAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateSalesInvoiceDiscountedSubtotalAmount - The total amount without VAT after discounts.
type CreateSalesInvoiceDiscountedSubtotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreateSalesInvoiceDiscountedSubtotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreateSalesInvoiceDiscountedSubtotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateSalesInvoiceSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CreateSalesInvoiceSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreateSalesInvoiceSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateSalesInvoiceSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateSalesInvoiceInvoicePayment - The URL your customer should visit to make payment for the invoice. This is where you should redirect the
// customer to unless the `status` is set to `paid`.
type CreateSalesInvoiceInvoicePayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreateSalesInvoiceInvoicePayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateSalesInvoiceInvoicePayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateSalesInvoicePdfLink - The URL the invoice is available at, if generated.
type CreateSalesInvoicePdfLink struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreateSalesInvoicePdfLink) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateSalesInvoicePdfLink) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateSalesInvoiceDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CreateSalesInvoiceDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreateSalesInvoiceDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateSalesInvoiceDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateSalesInvoiceLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type CreateSalesInvoiceLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *CreateSalesInvoiceSelf `json:"self,omitempty"`
	// The URL your customer should visit to make payment for the invoice. This is where you should redirect the
	// customer to unless the `status` is set to `paid`.
	InvoicePayment *CreateSalesInvoiceInvoicePayment `json:"invoicePayment,omitempty"`
	// The URL the invoice is available at, if generated.
	PdfLink *CreateSalesInvoicePdfLink `json:"pdfLink,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *CreateSalesInvoiceDocumentation `json:"documentation,omitempty"`
}

func (o *CreateSalesInvoiceLinks) GetSelf() *CreateSalesInvoiceSelf {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *CreateSalesInvoiceLinks) GetInvoicePayment() *CreateSalesInvoiceInvoicePayment {
	if o == nil {
		return nil
	}
	return o.InvoicePayment
}

func (o *CreateSalesInvoiceLinks) GetPdfLink() *CreateSalesInvoicePdfLink {
	if o == nil {
		return nil
	}
	return o.PdfLink
}

func (o *CreateSalesInvoiceLinks) GetDocumentation() *CreateSalesInvoiceDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

// CreateSalesInvoiceResponseBody - The newly created invoice object. For a complete reference of the invoice object, refer to the
// [Get sales invoice endpoint](get-sales-invoice) documentation.
type CreateSalesInvoiceResponseBody struct {
	// Indicates the response contains a sales invoice object. Will always contain the string `sales-invoice` for this
	// endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this invoice. Example: `invoice_4Y0eZitmBnQ6IDoMqZQKh`.
	ID *string `json:"id,omitempty"`
	// When issued, an invoice number will be set for the sales invoice.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`
	// The status for the invoice to end up in.
	//
	// A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
	// the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
	// mark it as paid. It can then subsequently be sent as well, same as with `issued`.
	//
	// A status value that cannot be set but can be returned is `canceled`, for invoices which were
	// issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
	//
	// Dependent parameters:
	//   - `paymentDetails` is required if invoice should be set directly to `paid`
	//   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
	//   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
	Status *CreateSalesInvoiceStatusResponse `json:"status,omitempty"`
	// The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
	VatScheme *CreateSalesInvoiceVatSchemeResponse `json:"vatScheme,omitempty"`
	// The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
	// price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
	VatMode *CreateSalesInvoiceVatModeResponse `json:"vatMode,omitempty"`
	// A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
	Memo *string `json:"memo,omitempty"`
	// Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *CreateSalesInvoiceMetadataResponse `json:"metadata,omitempty"`
	// The payment term to be set on the invoice.
	PaymentTerm *CreateSalesInvoicePaymentTermResponse `json:"paymentTerm,omitempty"`
	// Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
	// provided details. Required for `paid` status.
	PaymentDetails *CreateSalesInvoicePaymentDetailsResponse `json:"paymentDetails,omitempty"`
	// Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
	// recipient with the provided `subject` and `body`. Required for `issued` status.
	EmailDetails *CreateSalesInvoiceEmailDetailsResponse `json:"emailDetails,omitempty"`
	// The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
	// provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
	CustomerID *string `json:"customerId,omitempty"`
	// The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
	// `customerId` becomes required as well. Only allowed for invoices with status `paid`.
	MandateID *string `json:"mandateId,omitempty"`
	// An identifier tied to the recipient data. This should be a unique value based on data your system contains,
	// so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
	// is not required to send a first invoice to a recipient.
	RecipientIdentifier *string                              `json:"recipientIdentifier,omitempty"`
	Recipient           *CreateSalesInvoiceRecipientResponse `json:"recipient,omitempty"`
	// Provide the line items for the invoice. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the invoice.
	Lines []CreateSalesInvoiceLineResponse `json:"lines,omitempty"`
	// The discount to be applied to the entire invoice, applied on top of any line item discounts.
	Discount *CreateSalesInvoiceDiscountResponse `json:"discount,omitempty"`
	// The amount that is left to be paid.
	AmountDue *CreateSalesInvoiceAmountDue `json:"amountDue,omitempty"`
	// The total amount without VAT before discounts.
	SubtotalAmount *CreateSalesInvoiceSubtotalAmount `json:"subtotalAmount,omitempty"`
	// The total amount with VAT.
	TotalAmount *CreateSalesInvoiceTotalAmount `json:"totalAmount,omitempty"`
	// The total VAT amount.
	TotalVatAmount *CreateSalesInvoiceTotalVatAmount `json:"totalVatAmount,omitempty"`
	// The total amount without VAT after discounts.
	DiscountedSubtotalAmount *CreateSalesInvoiceDiscountedSubtotalAmount `json:"discountedSubtotalAmount,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// If issued, the date when the sales invoice was issued, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format.
	IssuedAt *string `json:"issuedAt,omitempty"`
	// If paid, the date when the sales invoice was paid, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format.
	PaidAt *string `json:"paidAt,omitempty"`
	// If issued, the date when the sales invoice payment is due, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format.
	DueAt *string `json:"dueAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *CreateSalesInvoiceLinks `json:"_links,omitempty"`
}

func (o *CreateSalesInvoiceResponseBody) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *CreateSalesInvoiceResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateSalesInvoiceResponseBody) GetInvoiceNumber() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceNumber
}

func (o *CreateSalesInvoiceResponseBody) GetStatus() *CreateSalesInvoiceStatusResponse {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateSalesInvoiceResponseBody) GetVatScheme() *CreateSalesInvoiceVatSchemeResponse {
	if o == nil {
		return nil
	}
	return o.VatScheme
}

func (o *CreateSalesInvoiceResponseBody) GetVatMode() *CreateSalesInvoiceVatModeResponse {
	if o == nil {
		return nil
	}
	return o.VatMode
}

func (o *CreateSalesInvoiceResponseBody) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *CreateSalesInvoiceResponseBody) GetMetadata() *CreateSalesInvoiceMetadataResponse {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreateSalesInvoiceResponseBody) GetPaymentTerm() *CreateSalesInvoicePaymentTermResponse {
	if o == nil {
		return nil
	}
	return o.PaymentTerm
}

func (o *CreateSalesInvoiceResponseBody) GetPaymentDetails() *CreateSalesInvoicePaymentDetailsResponse {
	if o == nil {
		return nil
	}
	return o.PaymentDetails
}

func (o *CreateSalesInvoiceResponseBody) GetEmailDetails() *CreateSalesInvoiceEmailDetailsResponse {
	if o == nil {
		return nil
	}
	return o.EmailDetails
}

func (o *CreateSalesInvoiceResponseBody) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *CreateSalesInvoiceResponseBody) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *CreateSalesInvoiceResponseBody) GetRecipientIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.RecipientIdentifier
}

func (o *CreateSalesInvoiceResponseBody) GetRecipient() *CreateSalesInvoiceRecipientResponse {
	if o == nil {
		return nil
	}
	return o.Recipient
}

func (o *CreateSalesInvoiceResponseBody) GetLines() []CreateSalesInvoiceLineResponse {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *CreateSalesInvoiceResponseBody) GetDiscount() *CreateSalesInvoiceDiscountResponse {
	if o == nil {
		return nil
	}
	return o.Discount
}

func (o *CreateSalesInvoiceResponseBody) GetAmountDue() *CreateSalesInvoiceAmountDue {
	if o == nil {
		return nil
	}
	return o.AmountDue
}

func (o *CreateSalesInvoiceResponseBody) GetSubtotalAmount() *CreateSalesInvoiceSubtotalAmount {
	if o == nil {
		return nil
	}
	return o.SubtotalAmount
}

func (o *CreateSalesInvoiceResponseBody) GetTotalAmount() *CreateSalesInvoiceTotalAmount {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *CreateSalesInvoiceResponseBody) GetTotalVatAmount() *CreateSalesInvoiceTotalVatAmount {
	if o == nil {
		return nil
	}
	return o.TotalVatAmount
}

func (o *CreateSalesInvoiceResponseBody) GetDiscountedSubtotalAmount() *CreateSalesInvoiceDiscountedSubtotalAmount {
	if o == nil {
		return nil
	}
	return o.DiscountedSubtotalAmount
}

func (o *CreateSalesInvoiceResponseBody) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateSalesInvoiceResponseBody) GetIssuedAt() *string {
	if o == nil {
		return nil
	}
	return o.IssuedAt
}

func (o *CreateSalesInvoiceResponseBody) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *CreateSalesInvoiceResponseBody) GetDueAt() *string {
	if o == nil {
		return nil
	}
	return o.DueAt
}

func (o *CreateSalesInvoiceResponseBody) GetLinks() *CreateSalesInvoiceLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type CreateSalesInvoiceResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The newly created invoice object. For a complete reference of the invoice object, refer to the
	// [Get sales invoice endpoint](get-sales-invoice) documentation.
	Object *CreateSalesInvoiceResponseBody
}

func (o *CreateSalesInvoiceResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateSalesInvoiceResponse) GetObject() *CreateSalesInvoiceResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
