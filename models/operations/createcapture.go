// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
)

// CreateCaptureAmountRequest - The amount captured. If no amount is provided, the full authorized amount is captured.
type CreateCaptureAmountRequest struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreateCaptureAmountRequest) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreateCaptureAmountRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateCaptureMetadataRequestType string

const (
	CreateCaptureMetadataRequestTypeStr        CreateCaptureMetadataRequestType = "str"
	CreateCaptureMetadataRequestTypeMapOfAny   CreateCaptureMetadataRequestType = "mapOfAny"
	CreateCaptureMetadataRequestTypeArrayOfStr CreateCaptureMetadataRequestType = "arrayOfStr"
)

// CreateCaptureMetadataRequest - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type CreateCaptureMetadataRequest struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type CreateCaptureMetadataRequestType
}

func CreateCreateCaptureMetadataRequestStr(str string) CreateCaptureMetadataRequest {
	typ := CreateCaptureMetadataRequestTypeStr

	return CreateCaptureMetadataRequest{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateCaptureMetadataRequestMapOfAny(mapOfAny map[string]any) CreateCaptureMetadataRequest {
	typ := CreateCaptureMetadataRequestTypeMapOfAny

	return CreateCaptureMetadataRequest{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateCreateCaptureMetadataRequestArrayOfStr(arrayOfStr []string) CreateCaptureMetadataRequest {
	typ := CreateCaptureMetadataRequestTypeArrayOfStr

	return CreateCaptureMetadataRequest{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreateCaptureMetadataRequest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CreateCaptureMetadataRequestTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CreateCaptureMetadataRequestTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreateCaptureMetadataRequestTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateCaptureMetadataRequest", string(data))
}

func (u CreateCaptureMetadataRequest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreateCaptureMetadataRequest: all fields are null")
}

type CreateCaptureRequestBody struct {
	// The description of the capture.
	Description *string `json:"description,omitempty"`
	// The amount captured. If no amount is provided, the full authorized amount is captured.
	Amount *CreateCaptureAmountRequest `json:"amount,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *CreateCaptureMetadataRequest `json:"metadata,omitempty"`
}

func (o *CreateCaptureRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateCaptureRequestBody) GetAmount() *CreateCaptureAmountRequest {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CreateCaptureRequestBody) GetMetadata() *CreateCaptureMetadataRequest {
	if o == nil {
		return nil
	}
	return o.Metadata
}

type CreateCaptureRequest struct {
	// Provide the ID of the related payment.
	PaymentID   string                    `pathParam:"style=simple,explode=false,name=paymentId"`
	RequestBody *CreateCaptureRequestBody `request:"mediaType=application/json"`
}

func (o *CreateCaptureRequest) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *CreateCaptureRequest) GetRequestBody() *CreateCaptureRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// CreateCaptureUnprocessableEntityDocumentation - The URL to the generic Mollie API error handling guide.
type CreateCaptureUnprocessableEntityDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *CreateCaptureUnprocessableEntityDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateCaptureUnprocessableEntityDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CreateCaptureUnprocessableEntityLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation CreateCaptureUnprocessableEntityDocumentation `json:"documentation"`
}

func (o *CreateCaptureUnprocessableEntityLinks) GetDocumentation() CreateCaptureUnprocessableEntityDocumentation {
	if o == nil {
		return CreateCaptureUnprocessableEntityDocumentation{}
	}
	return o.Documentation
}

// CreateCaptureNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type CreateCaptureNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *CreateCaptureNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateCaptureNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CreateCaptureNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation CreateCaptureNotFoundDocumentation `json:"documentation"`
}

func (o *CreateCaptureNotFoundLinks) GetDocumentation() CreateCaptureNotFoundDocumentation {
	if o == nil {
		return CreateCaptureNotFoundDocumentation{}
	}
	return o.Documentation
}

// CreateCaptureMode - Whether this entity was created in live mode or in test mode.
type CreateCaptureMode string

const (
	CreateCaptureModeLive CreateCaptureMode = "live"
	CreateCaptureModeTest CreateCaptureMode = "test"
)

func (e CreateCaptureMode) ToPointer() *CreateCaptureMode {
	return &e
}
func (e *CreateCaptureMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = CreateCaptureMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCaptureMode: %v", v)
	}
}

// CreateCaptureAmountResponse - The amount captured. If no amount is provided, the full authorized amount is captured.
type CreateCaptureAmountResponse struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreateCaptureAmountResponse) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreateCaptureAmountResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateCaptureSettlementAmount - This optional field will contain the approximate amount that will be settled to your account, converted to the
// currency your account is settled in.
//
// Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
// accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
// instead.
type CreateCaptureSettlementAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *CreateCaptureSettlementAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *CreateCaptureSettlementAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateCaptureStatus - The capture's status.
type CreateCaptureStatus string

const (
	CreateCaptureStatusPending   CreateCaptureStatus = "pending"
	CreateCaptureStatusSucceeded CreateCaptureStatus = "succeeded"
	CreateCaptureStatusFailed    CreateCaptureStatus = "failed"
)

func (e CreateCaptureStatus) ToPointer() *CreateCaptureStatus {
	return &e
}
func (e *CreateCaptureStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "succeeded":
		fallthrough
	case "failed":
		*e = CreateCaptureStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCaptureStatus: %v", v)
	}
}

type CreateCaptureMetadataResponseType string

const (
	CreateCaptureMetadataResponseTypeStr        CreateCaptureMetadataResponseType = "str"
	CreateCaptureMetadataResponseTypeMapOfAny   CreateCaptureMetadataResponseType = "mapOfAny"
	CreateCaptureMetadataResponseTypeArrayOfStr CreateCaptureMetadataResponseType = "arrayOfStr"
)

// CreateCaptureMetadataResponse - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type CreateCaptureMetadataResponse struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type CreateCaptureMetadataResponseType
}

func CreateCreateCaptureMetadataResponseStr(str string) CreateCaptureMetadataResponse {
	typ := CreateCaptureMetadataResponseTypeStr

	return CreateCaptureMetadataResponse{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateCaptureMetadataResponseMapOfAny(mapOfAny map[string]any) CreateCaptureMetadataResponse {
	typ := CreateCaptureMetadataResponseTypeMapOfAny

	return CreateCaptureMetadataResponse{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateCreateCaptureMetadataResponseArrayOfStr(arrayOfStr []string) CreateCaptureMetadataResponse {
	typ := CreateCaptureMetadataResponseTypeArrayOfStr

	return CreateCaptureMetadataResponse{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreateCaptureMetadataResponse) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CreateCaptureMetadataResponseTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CreateCaptureMetadataResponseTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreateCaptureMetadataResponseTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateCaptureMetadataResponse", string(data))
}

func (u CreateCaptureMetadataResponse) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreateCaptureMetadataResponse: all fields are null")
}

// CreateCaptureSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CreateCaptureSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreateCaptureSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateCaptureSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateCapturePayment - The API resource URL of the [payment](get-payment) that this capture belongs to.
type CreateCapturePayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreateCapturePayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateCapturePayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateCaptureSettlement - The API resource URL of the [settlement](get-settlement) this capture has been settled with. Not present if
// not yet settled.
type CreateCaptureSettlement struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *CreateCaptureSettlement) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *CreateCaptureSettlement) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// CreateCaptureShipment - The API resource URL of the [shipment](get-shipment) this capture is associated with. Not present if
// it isn't associated with a shipment.
type CreateCaptureShipment struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *CreateCaptureShipment) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *CreateCaptureShipment) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// CreateCaptureDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CreateCaptureDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreateCaptureDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateCaptureDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateCaptureLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type CreateCaptureLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self CreateCaptureSelf `json:"self"`
	// The API resource URL of the [payment](get-payment) that this capture belongs to.
	Payment CreateCapturePayment `json:"payment"`
	// The API resource URL of the [settlement](get-settlement) this capture has been settled with. Not present if
	// not yet settled.
	Settlement *CreateCaptureSettlement `json:"settlement,omitempty"`
	// The API resource URL of the [shipment](get-shipment) this capture is associated with. Not present if
	// it isn't associated with a shipment.
	Shipment *CreateCaptureShipment `json:"shipment,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation CreateCaptureDocumentation `json:"documentation"`
}

func (o *CreateCaptureLinks) GetSelf() CreateCaptureSelf {
	if o == nil {
		return CreateCaptureSelf{}
	}
	return o.Self
}

func (o *CreateCaptureLinks) GetPayment() CreateCapturePayment {
	if o == nil {
		return CreateCapturePayment{}
	}
	return o.Payment
}

func (o *CreateCaptureLinks) GetSettlement() *CreateCaptureSettlement {
	if o == nil {
		return nil
	}
	return o.Settlement
}

func (o *CreateCaptureLinks) GetShipment() *CreateCaptureShipment {
	if o == nil {
		return nil
	}
	return o.Shipment
}

func (o *CreateCaptureLinks) GetDocumentation() CreateCaptureDocumentation {
	if o == nil {
		return CreateCaptureDocumentation{}
	}
	return o.Documentation
}

// CreateCaptureResponseBody - The newly created capture object. For a complete reference of the
// capture object, refer to the [Get capture endpoint](get-capture) documentation.
type CreateCaptureResponseBody struct {
	// Indicates the response contains a capture object. Will always contain the string `capture` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this capture. Example: `cpt_mNepDkEtco6ah3QNPUGYH`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode CreateCaptureMode `json:"mode"`
	// The description of the capture.
	Description *string `json:"description,omitempty"`
	// The amount captured. If no amount is provided, the full authorized amount is captured.
	Amount *CreateCaptureAmountResponse `json:"amount"`
	// This optional field will contain the approximate amount that will be settled to your account, converted to the
	// currency your account is settled in.
	//
	// Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
	// accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
	// instead.
	SettlementAmount *CreateCaptureSettlementAmount `json:"settlementAmount,omitempty"`
	// The capture's status.
	Status CreateCaptureStatus `json:"status"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *CreateCaptureMetadataResponse `json:"metadata,omitempty"`
	// The unique identifier of the payment this capture was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
	// The full payment object can be retrieved via the payment URL in the `_links` object.
	PaymentID string `json:"paymentId"`
	// The unique identifier of the shipment that triggered the creation of this capture, if applicable. For example:
	// `shp_gNapNy9qQTUFZYnCrCF7J`.
	ShipmentID *string `json:"shipmentId,omitempty"`
	// The identifier referring to the settlement this capture was settled with. For example, `stl_BkEjN2eBb`. This field
	// is omitted if the capture is not settled (yet).
	SettlementID *string `json:"settlementId,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links CreateCaptureLinks `json:"_links"`
}

func (o *CreateCaptureResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *CreateCaptureResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateCaptureResponseBody) GetMode() CreateCaptureMode {
	if o == nil {
		return CreateCaptureMode("")
	}
	return o.Mode
}

func (o *CreateCaptureResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateCaptureResponseBody) GetAmount() *CreateCaptureAmountResponse {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CreateCaptureResponseBody) GetSettlementAmount() *CreateCaptureSettlementAmount {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *CreateCaptureResponseBody) GetStatus() CreateCaptureStatus {
	if o == nil {
		return CreateCaptureStatus("")
	}
	return o.Status
}

func (o *CreateCaptureResponseBody) GetMetadata() *CreateCaptureMetadataResponse {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreateCaptureResponseBody) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *CreateCaptureResponseBody) GetShipmentID() *string {
	if o == nil {
		return nil
	}
	return o.ShipmentID
}

func (o *CreateCaptureResponseBody) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *CreateCaptureResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreateCaptureResponseBody) GetLinks() CreateCaptureLinks {
	if o == nil {
		return CreateCaptureLinks{}
	}
	return o.Links
}

type CreateCaptureResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The newly created capture object. For a complete reference of the
	// capture object, refer to the [Get capture endpoint](get-capture) documentation.
	Object *CreateCaptureResponseBody
}

func (o *CreateCaptureResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateCaptureResponse) GetObject() *CreateCaptureResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
