// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
	"github.com/mollie/mollie-api-golang/types"
)

// ListCustomerPaymentsSort - Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
// newest to oldest.
type ListCustomerPaymentsSort string

const (
	ListCustomerPaymentsSortAsc  ListCustomerPaymentsSort = "asc"
	ListCustomerPaymentsSortDesc ListCustomerPaymentsSort = "desc"
)

func (e ListCustomerPaymentsSort) ToPointer() *ListCustomerPaymentsSort {
	return &e
}
func (e *ListCustomerPaymentsSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = ListCustomerPaymentsSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsSort: %v", v)
	}
}

type ListCustomerPaymentsRequest struct {
	// Provide the ID of the related customer.
	CustomerID string `pathParam:"style=simple,explode=false,name=customerId"`
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate
	// the result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
	// newest to oldest.
	Sort *ListCustomerPaymentsSort `queryParam:"style=form,explode=true,name=sort"`
	// The identifier referring to the [profile](get-profile) you wish to
	// retrieve the resources for.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
	// organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
	ProfileID *string `queryParam:"style=form,explode=true,name=profileId"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *ListCustomerPaymentsRequest) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *ListCustomerPaymentsRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListCustomerPaymentsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListCustomerPaymentsRequest) GetSort() *ListCustomerPaymentsSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListCustomerPaymentsRequest) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *ListCustomerPaymentsRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// ListCustomerPaymentsBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type ListCustomerPaymentsBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListCustomerPaymentsBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListCustomerPaymentsBadRequestDocumentation `json:"documentation"`
}

func (o *ListCustomerPaymentsBadRequestLinks) GetDocumentation() ListCustomerPaymentsBadRequestDocumentation {
	if o == nil {
		return ListCustomerPaymentsBadRequestDocumentation{}
	}
	return o.Documentation
}

// ListCustomerPaymentsMode - Whether this entity was created in live mode or in test mode.
type ListCustomerPaymentsMode string

const (
	ListCustomerPaymentsModeLive ListCustomerPaymentsMode = "live"
	ListCustomerPaymentsModeTest ListCustomerPaymentsMode = "test"
)

func (e ListCustomerPaymentsMode) ToPointer() *ListCustomerPaymentsMode {
	return &e
}
func (e *ListCustomerPaymentsMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = ListCustomerPaymentsMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsMode: %v", v)
	}
}

// ListCustomerPaymentsAmount - The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge â‚¬1000.00.
//
// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
// retrieved using the Get method endpoint.
//
// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
// tip amount.
type ListCustomerPaymentsAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListCustomerPaymentsAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListCustomerPaymentsAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListCustomerPaymentsAmountRefunded - The total amount that is already refunded. Only available when refunds are available for this payment. For some
// payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
// costs for a return shipment to the customer.
type ListCustomerPaymentsAmountRefunded struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListCustomerPaymentsAmountRefunded) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListCustomerPaymentsAmountRefunded) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListCustomerPaymentsAmountRemaining - The remaining amount that can be refunded. Only available when refunds are available for this payment.
type ListCustomerPaymentsAmountRemaining struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListCustomerPaymentsAmountRemaining) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListCustomerPaymentsAmountRemaining) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListCustomerPaymentsAmountCaptured - The total amount that is already captured for this payment. Only available when this payment supports captures.
type ListCustomerPaymentsAmountCaptured struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListCustomerPaymentsAmountCaptured) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListCustomerPaymentsAmountCaptured) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListCustomerPaymentsAmountChargedBack - The total amount that was charged back for this payment. Only available when the total charged back amount is not
// zero.
type ListCustomerPaymentsAmountChargedBack struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListCustomerPaymentsAmountChargedBack) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListCustomerPaymentsAmountChargedBack) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListCustomerPaymentsSettlementAmount - This optional field will contain the approximate amount that will be settled to your account, converted to the
// currency your account is settled in.
//
// Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
// settled by Mollie the `settlementAmount` is omitted from the response.
//
// Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
// using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
type ListCustomerPaymentsSettlementAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListCustomerPaymentsSettlementAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListCustomerPaymentsSettlementAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListCustomerPaymentsLineType - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type ListCustomerPaymentsLineType string

const (
	ListCustomerPaymentsLineTypePhysical    ListCustomerPaymentsLineType = "physical"
	ListCustomerPaymentsLineTypeDigital     ListCustomerPaymentsLineType = "digital"
	ListCustomerPaymentsLineTypeShippingFee ListCustomerPaymentsLineType = "shipping_fee"
	ListCustomerPaymentsLineTypeDiscount    ListCustomerPaymentsLineType = "discount"
	ListCustomerPaymentsLineTypeStoreCredit ListCustomerPaymentsLineType = "store_credit"
	ListCustomerPaymentsLineTypeGiftCard    ListCustomerPaymentsLineType = "gift_card"
	ListCustomerPaymentsLineTypeSurcharge   ListCustomerPaymentsLineType = "surcharge"
	ListCustomerPaymentsLineTypeTip         ListCustomerPaymentsLineType = "tip"
)

func (e ListCustomerPaymentsLineType) ToPointer() *ListCustomerPaymentsLineType {
	return &e
}
func (e *ListCustomerPaymentsLineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "physical":
		fallthrough
	case "digital":
		fallthrough
	case "shipping_fee":
		fallthrough
	case "discount":
		fallthrough
	case "store_credit":
		fallthrough
	case "gift_card":
		fallthrough
	case "surcharge":
		fallthrough
	case "tip":
		*e = ListCustomerPaymentsLineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsLineType: %v", v)
	}
}

// ListCustomerPaymentsUnitPrice - The price of a single item including VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs â‚¬89.00 each.
//
// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
//
// The unit price can be zero in case of free items.
type ListCustomerPaymentsUnitPrice struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListCustomerPaymentsUnitPrice) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListCustomerPaymentsUnitPrice) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListCustomerPaymentsDiscountAmount - Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
// type.
type ListCustomerPaymentsDiscountAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListCustomerPaymentsDiscountAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListCustomerPaymentsDiscountAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListCustomerPaymentsTotalAmount - The total amount of the line, including VAT and discounts.
//
// Should match the following formula: `(unitPrice Ã— quantity) - discountAmount`.
//
// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
type ListCustomerPaymentsTotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListCustomerPaymentsTotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListCustomerPaymentsTotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListCustomerPaymentsVatAmount - The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
// calculated with the formula `totalAmount Ã— (vatRate / (100 + vatRate))`.
//
// Any deviations from this will result in an error.
//
// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
// `SEK 100.00 Ã— (25 / 125) = SEK 20.00`.
type ListCustomerPaymentsVatAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListCustomerPaymentsVatAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListCustomerPaymentsVatAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type ListCustomerPaymentsCategory string

const (
	ListCustomerPaymentsCategoryMeal         ListCustomerPaymentsCategory = "meal"
	ListCustomerPaymentsCategoryEco          ListCustomerPaymentsCategory = "eco"
	ListCustomerPaymentsCategoryGift         ListCustomerPaymentsCategory = "gift"
	ListCustomerPaymentsCategorySportCulture ListCustomerPaymentsCategory = "sport_culture"
)

func (e ListCustomerPaymentsCategory) ToPointer() *ListCustomerPaymentsCategory {
	return &e
}
func (e *ListCustomerPaymentsCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "meal":
		fallthrough
	case "eco":
		fallthrough
	case "gift":
		fallthrough
	case "sport_culture":
		*e = ListCustomerPaymentsCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsCategory: %v", v)
	}
}

// ListCustomerPaymentsRecurringAmount - Total amount and currency of the recurring item.
type ListCustomerPaymentsRecurringAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListCustomerPaymentsRecurringAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListCustomerPaymentsRecurringAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListCustomerPaymentsRecurring - The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
// to inform the shopper of the details for recurring products in the payments.
type ListCustomerPaymentsRecurring struct {
	// A description of the recurring item. If not present, the main description of the item will be used.
	Description *string `json:"description,omitempty"`
	// Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval string `json:"interval"`
	// Total amount and currency of the recurring item.
	Amount *ListCustomerPaymentsRecurringAmount `json:"amount,omitempty"`
	// Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
	Times *int64 `json:"times,omitempty"`
	// The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
	StartDate *string `json:"startDate,omitempty"`
}

func (o *ListCustomerPaymentsRecurring) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListCustomerPaymentsRecurring) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *ListCustomerPaymentsRecurring) GetAmount() *ListCustomerPaymentsRecurringAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListCustomerPaymentsRecurring) GetTimes() *int64 {
	if o == nil {
		return nil
	}
	return o.Times
}

func (o *ListCustomerPaymentsRecurring) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

type ListCustomerPaymentsLine struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *ListCustomerPaymentsLineType `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// The price of a single item including VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs â‚¬89.00 each.
	//
	// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
	//
	// The unit price can be zero in case of free items.
	UnitPrice ListCustomerPaymentsUnitPrice `json:"unitPrice"`
	// Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
	// type.
	DiscountAmount *ListCustomerPaymentsDiscountAmount `json:"discountAmount,omitempty"`
	// The total amount of the line, including VAT and discounts.
	//
	// Should match the following formula: `(unitPrice Ã— quantity) - discountAmount`.
	//
	// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
	TotalAmount ListCustomerPaymentsTotalAmount `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
	// calculated with the formula `totalAmount Ã— (vatRate / (100 + vatRate))`.
	//
	// Any deviations from this will result in an error.
	//
	// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
	// `SEK 100.00 Ã— (25 / 125) = SEK 20.00`.
	VatAmount *ListCustomerPaymentsVatAmount `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []ListCustomerPaymentsCategory `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string `json:"productUrl,omitempty"`
	// The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
	// to inform the shopper of the details for recurring products in the payments.
	Recurring *ListCustomerPaymentsRecurring `json:"recurring,omitempty"`
}

func (o *ListCustomerPaymentsLine) GetType() *ListCustomerPaymentsLineType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListCustomerPaymentsLine) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *ListCustomerPaymentsLine) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *ListCustomerPaymentsLine) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *ListCustomerPaymentsLine) GetUnitPrice() ListCustomerPaymentsUnitPrice {
	if o == nil {
		return ListCustomerPaymentsUnitPrice{}
	}
	return o.UnitPrice
}

func (o *ListCustomerPaymentsLine) GetDiscountAmount() *ListCustomerPaymentsDiscountAmount {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *ListCustomerPaymentsLine) GetTotalAmount() ListCustomerPaymentsTotalAmount {
	if o == nil {
		return ListCustomerPaymentsTotalAmount{}
	}
	return o.TotalAmount
}

func (o *ListCustomerPaymentsLine) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *ListCustomerPaymentsLine) GetVatAmount() *ListCustomerPaymentsVatAmount {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *ListCustomerPaymentsLine) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *ListCustomerPaymentsLine) GetCategories() []ListCustomerPaymentsCategory {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *ListCustomerPaymentsLine) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *ListCustomerPaymentsLine) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}

func (o *ListCustomerPaymentsLine) GetRecurring() *ListCustomerPaymentsRecurring {
	if o == nil {
		return nil
	}
	return o.Recurring
}

// ListCustomerPaymentsBillingAddress - The customer's billing address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
//
// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
type ListCustomerPaymentsBillingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *ListCustomerPaymentsBillingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *ListCustomerPaymentsBillingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *ListCustomerPaymentsBillingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *ListCustomerPaymentsBillingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *ListCustomerPaymentsBillingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *ListCustomerPaymentsBillingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *ListCustomerPaymentsBillingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *ListCustomerPaymentsBillingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ListCustomerPaymentsBillingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *ListCustomerPaymentsBillingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *ListCustomerPaymentsBillingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *ListCustomerPaymentsBillingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// ListCustomerPaymentsShippingAddress - The customer's shipping address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
type ListCustomerPaymentsShippingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *ListCustomerPaymentsShippingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *ListCustomerPaymentsShippingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *ListCustomerPaymentsShippingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *ListCustomerPaymentsShippingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *ListCustomerPaymentsShippingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *ListCustomerPaymentsShippingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *ListCustomerPaymentsShippingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *ListCustomerPaymentsShippingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ListCustomerPaymentsShippingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *ListCustomerPaymentsShippingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *ListCustomerPaymentsShippingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *ListCustomerPaymentsShippingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// ListCustomerPaymentsLocale - Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
// locale, but our hosted payment pages currently only support the specified languages.
//
// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
// customer use a local bank account greatly increases the conversion and speed of payment.
type ListCustomerPaymentsLocale string

const (
	ListCustomerPaymentsLocaleEnUs ListCustomerPaymentsLocale = "en_US"
	ListCustomerPaymentsLocaleEnGb ListCustomerPaymentsLocale = "en_GB"
	ListCustomerPaymentsLocaleNlNl ListCustomerPaymentsLocale = "nl_NL"
	ListCustomerPaymentsLocaleNlBe ListCustomerPaymentsLocale = "nl_BE"
	ListCustomerPaymentsLocaleDeDe ListCustomerPaymentsLocale = "de_DE"
	ListCustomerPaymentsLocaleDeAt ListCustomerPaymentsLocale = "de_AT"
	ListCustomerPaymentsLocaleDeCh ListCustomerPaymentsLocale = "de_CH"
	ListCustomerPaymentsLocaleFrFr ListCustomerPaymentsLocale = "fr_FR"
	ListCustomerPaymentsLocaleFrBe ListCustomerPaymentsLocale = "fr_BE"
	ListCustomerPaymentsLocaleEsEs ListCustomerPaymentsLocale = "es_ES"
	ListCustomerPaymentsLocaleCaEs ListCustomerPaymentsLocale = "ca_ES"
	ListCustomerPaymentsLocalePtPt ListCustomerPaymentsLocale = "pt_PT"
	ListCustomerPaymentsLocaleItIt ListCustomerPaymentsLocale = "it_IT"
	ListCustomerPaymentsLocaleNbNo ListCustomerPaymentsLocale = "nb_NO"
	ListCustomerPaymentsLocaleSvSe ListCustomerPaymentsLocale = "sv_SE"
	ListCustomerPaymentsLocaleFiFi ListCustomerPaymentsLocale = "fi_FI"
	ListCustomerPaymentsLocaleDaDk ListCustomerPaymentsLocale = "da_DK"
	ListCustomerPaymentsLocaleIsIs ListCustomerPaymentsLocale = "is_IS"
	ListCustomerPaymentsLocaleHuHu ListCustomerPaymentsLocale = "hu_HU"
	ListCustomerPaymentsLocalePlPl ListCustomerPaymentsLocale = "pl_PL"
	ListCustomerPaymentsLocaleLvLv ListCustomerPaymentsLocale = "lv_LV"
	ListCustomerPaymentsLocaleLtLt ListCustomerPaymentsLocale = "lt_LT"
)

func (e ListCustomerPaymentsLocale) ToPointer() *ListCustomerPaymentsLocale {
	return &e
}
func (e *ListCustomerPaymentsLocale) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		fallthrough
	case "es_ES":
		fallthrough
	case "ca_ES":
		fallthrough
	case "pt_PT":
		fallthrough
	case "it_IT":
		fallthrough
	case "nb_NO":
		fallthrough
	case "sv_SE":
		fallthrough
	case "fi_FI":
		fallthrough
	case "da_DK":
		fallthrough
	case "is_IS":
		fallthrough
	case "hu_HU":
		fallthrough
	case "pl_PL":
		fallthrough
	case "lv_LV":
		fallthrough
	case "lt_LT":
		*e = ListCustomerPaymentsLocale(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsLocale: %v", v)
	}
}

// ListCustomerPaymentsMethod - The payment method used for this transaction. If a specific method was selected during payment initialization,
// this field reflects that choice.
type ListCustomerPaymentsMethod string

const (
	ListCustomerPaymentsMethodAlma           ListCustomerPaymentsMethod = "alma"
	ListCustomerPaymentsMethodApplepay       ListCustomerPaymentsMethod = "applepay"
	ListCustomerPaymentsMethodBacs           ListCustomerPaymentsMethod = "bacs"
	ListCustomerPaymentsMethodBancomatpay    ListCustomerPaymentsMethod = "bancomatpay"
	ListCustomerPaymentsMethodBancontact     ListCustomerPaymentsMethod = "bancontact"
	ListCustomerPaymentsMethodBanktransfer   ListCustomerPaymentsMethod = "banktransfer"
	ListCustomerPaymentsMethodBelfius        ListCustomerPaymentsMethod = "belfius"
	ListCustomerPaymentsMethodBillie         ListCustomerPaymentsMethod = "billie"
	ListCustomerPaymentsMethodBizum          ListCustomerPaymentsMethod = "bizum"
	ListCustomerPaymentsMethodBlik           ListCustomerPaymentsMethod = "blik"
	ListCustomerPaymentsMethodCreditcard     ListCustomerPaymentsMethod = "creditcard"
	ListCustomerPaymentsMethodDirectdebit    ListCustomerPaymentsMethod = "directdebit"
	ListCustomerPaymentsMethodEps            ListCustomerPaymentsMethod = "eps"
	ListCustomerPaymentsMethodGiftcard       ListCustomerPaymentsMethod = "giftcard"
	ListCustomerPaymentsMethodIdeal          ListCustomerPaymentsMethod = "ideal"
	ListCustomerPaymentsMethodIn3            ListCustomerPaymentsMethod = "in3"
	ListCustomerPaymentsMethodKbc            ListCustomerPaymentsMethod = "kbc"
	ListCustomerPaymentsMethodKlarna         ListCustomerPaymentsMethod = "klarna"
	ListCustomerPaymentsMethodKlarnapaylater ListCustomerPaymentsMethod = "klarnapaylater"
	ListCustomerPaymentsMethodKlarnapaynow   ListCustomerPaymentsMethod = "klarnapaynow"
	ListCustomerPaymentsMethodKlarnasliceit  ListCustomerPaymentsMethod = "klarnasliceit"
	ListCustomerPaymentsMethodMbway          ListCustomerPaymentsMethod = "mbway"
	ListCustomerPaymentsMethodMultibanco     ListCustomerPaymentsMethod = "multibanco"
	ListCustomerPaymentsMethodMybank         ListCustomerPaymentsMethod = "mybank"
	ListCustomerPaymentsMethodPaybybank      ListCustomerPaymentsMethod = "paybybank"
	ListCustomerPaymentsMethodPayconiq       ListCustomerPaymentsMethod = "payconiq"
	ListCustomerPaymentsMethodPaypal         ListCustomerPaymentsMethod = "paypal"
	ListCustomerPaymentsMethodPaysafecard    ListCustomerPaymentsMethod = "paysafecard"
	ListCustomerPaymentsMethodPointofsale    ListCustomerPaymentsMethod = "pointofsale"
	ListCustomerPaymentsMethodPrzelewy24     ListCustomerPaymentsMethod = "przelewy24"
	ListCustomerPaymentsMethodRiverty        ListCustomerPaymentsMethod = "riverty"
	ListCustomerPaymentsMethodSatispay       ListCustomerPaymentsMethod = "satispay"
	ListCustomerPaymentsMethodSwish          ListCustomerPaymentsMethod = "swish"
	ListCustomerPaymentsMethodTrustly        ListCustomerPaymentsMethod = "trustly"
	ListCustomerPaymentsMethodTwint          ListCustomerPaymentsMethod = "twint"
	ListCustomerPaymentsMethodVoucher        ListCustomerPaymentsMethod = "voucher"
)

func (e ListCustomerPaymentsMethod) ToPointer() *ListCustomerPaymentsMethod {
	return &e
}
func (e *ListCustomerPaymentsMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "applepay":
		fallthrough
	case "bacs":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "kbc":
		fallthrough
	case "klarna":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "pointofsale":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = ListCustomerPaymentsMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsMethod: %v", v)
	}
}

type ListCustomerPaymentsMetadataType string

const (
	ListCustomerPaymentsMetadataTypeStr        ListCustomerPaymentsMetadataType = "str"
	ListCustomerPaymentsMetadataTypeMapOfAny   ListCustomerPaymentsMetadataType = "mapOfAny"
	ListCustomerPaymentsMetadataTypeArrayOfStr ListCustomerPaymentsMetadataType = "arrayOfStr"
)

// ListCustomerPaymentsMetadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type ListCustomerPaymentsMetadata struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type ListCustomerPaymentsMetadataType
}

func CreateListCustomerPaymentsMetadataStr(str string) ListCustomerPaymentsMetadata {
	typ := ListCustomerPaymentsMetadataTypeStr

	return ListCustomerPaymentsMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateListCustomerPaymentsMetadataMapOfAny(mapOfAny map[string]any) ListCustomerPaymentsMetadata {
	typ := ListCustomerPaymentsMetadataTypeMapOfAny

	return ListCustomerPaymentsMetadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateListCustomerPaymentsMetadataArrayOfStr(arrayOfStr []string) ListCustomerPaymentsMetadata {
	typ := ListCustomerPaymentsMetadataTypeArrayOfStr

	return ListCustomerPaymentsMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ListCustomerPaymentsMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = ListCustomerPaymentsMetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ListCustomerPaymentsMetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ListCustomerPaymentsMetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListCustomerPaymentsMetadata", string(data))
}

func (u ListCustomerPaymentsMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ListCustomerPaymentsMetadata: all fields are null")
}

// ListCustomerPaymentsCaptureMode - Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
// and capture at a later time.
//
// This field needs to be set to `manual` for method `riverty`.
type ListCustomerPaymentsCaptureMode string

const (
	ListCustomerPaymentsCaptureModeAutomatic ListCustomerPaymentsCaptureMode = "automatic"
	ListCustomerPaymentsCaptureModeManual    ListCustomerPaymentsCaptureMode = "manual"
)

func (e ListCustomerPaymentsCaptureMode) ToPointer() *ListCustomerPaymentsCaptureMode {
	return &e
}
func (e *ListCustomerPaymentsCaptureMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automatic":
		fallthrough
	case "manual":
		*e = ListCustomerPaymentsCaptureMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsCaptureMode: %v", v)
	}
}

// ListCustomerPaymentsApplicationFeeAmount - The fee that you wish to charge.
//
// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
// a â‚¬0.99 fee on a â‚¬1.00 payment.
type ListCustomerPaymentsApplicationFeeAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListCustomerPaymentsApplicationFeeAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListCustomerPaymentsApplicationFeeAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListCustomerPaymentsApplicationFee - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
//
// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
// `routing` parameter.
type ListCustomerPaymentsApplicationFee struct {
	// The fee that you wish to charge.
	//
	// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
	// a â‚¬0.99 fee on a â‚¬1.00 payment.
	Amount *ListCustomerPaymentsApplicationFeeAmount `json:"amount,omitempty"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description *string `json:"description,omitempty"`
}

func (o *ListCustomerPaymentsApplicationFee) GetAmount() *ListCustomerPaymentsApplicationFeeAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListCustomerPaymentsApplicationFee) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// ListCustomerPaymentsRoutingMode - Whether this entity was created in live mode or in test mode.
type ListCustomerPaymentsRoutingMode string

const (
	ListCustomerPaymentsRoutingModeLive ListCustomerPaymentsRoutingMode = "live"
	ListCustomerPaymentsRoutingModeTest ListCustomerPaymentsRoutingMode = "test"
)

func (e ListCustomerPaymentsRoutingMode) ToPointer() *ListCustomerPaymentsRoutingMode {
	return &e
}
func (e *ListCustomerPaymentsRoutingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = ListCustomerPaymentsRoutingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsRoutingMode: %v", v)
	}
}

// ListCustomerPaymentsRoutingAmount - The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
type ListCustomerPaymentsRoutingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListCustomerPaymentsRoutingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListCustomerPaymentsRoutingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListCustomerPaymentsRoutingType - The type of destination. Currently only the destination type `organization` is supported.
type ListCustomerPaymentsRoutingType string

const (
	ListCustomerPaymentsRoutingTypeOrganization ListCustomerPaymentsRoutingType = "organization"
)

func (e ListCustomerPaymentsRoutingType) ToPointer() *ListCustomerPaymentsRoutingType {
	return &e
}
func (e *ListCustomerPaymentsRoutingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organization":
		*e = ListCustomerPaymentsRoutingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsRoutingType: %v", v)
	}
}

// ListCustomerPaymentsDestination - The destination of this portion of the payment.
type ListCustomerPaymentsDestination struct {
	// The type of destination. Currently only the destination type `organization` is supported.
	Type ListCustomerPaymentsRoutingType `json:"type"`
	// Required for destination type `organization`. The ID of the connected organization the funds should be
	// routed to.
	OrganizationID string `json:"organizationId"`
}

func (o *ListCustomerPaymentsDestination) GetType() ListCustomerPaymentsRoutingType {
	if o == nil {
		return ListCustomerPaymentsRoutingType("")
	}
	return o.Type
}

func (o *ListCustomerPaymentsDestination) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

// ListCustomerPaymentsRoutingSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListCustomerPaymentsRoutingSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsRoutingSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsRoutingSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsRoutingPayment - The API resource URL of the [payment](get-payment) that belong to this route.
type ListCustomerPaymentsRoutingPayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsRoutingPayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsRoutingPayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsRoutingLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type ListCustomerPaymentsRoutingLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self ListCustomerPaymentsRoutingSelf `json:"self"`
	// The API resource URL of the [payment](get-payment) that belong to this route.
	Payment ListCustomerPaymentsRoutingPayment `json:"payment"`
}

func (o *ListCustomerPaymentsRoutingLinks) GetSelf() ListCustomerPaymentsRoutingSelf {
	if o == nil {
		return ListCustomerPaymentsRoutingSelf{}
	}
	return o.Self
}

func (o *ListCustomerPaymentsRoutingLinks) GetPayment() ListCustomerPaymentsRoutingPayment {
	if o == nil {
		return ListCustomerPaymentsRoutingPayment{}
	}
	return o.Payment
}

type ListCustomerPaymentsRouting struct {
	// Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this route. Mollie will always refer to the route by this ID.
	// Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode ListCustomerPaymentsRoutingMode `json:"mode"`
	// The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
	Amount ListCustomerPaymentsRoutingAmount `json:"amount"`
	// The destination of this portion of the payment.
	Destination ListCustomerPaymentsDestination `json:"destination"`
	// The date and time when the route was created. The date is given in ISO 8601 format.
	CreatedAt string `json:"createdAt"`
	// Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
	// date must be given in `YYYY-MM-DD` format.
	//
	// If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
	ReleaseDate *string `json:"releaseDate,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links ListCustomerPaymentsRoutingLinks `json:"_links"`
}

func (o *ListCustomerPaymentsRouting) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *ListCustomerPaymentsRouting) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListCustomerPaymentsRouting) GetMode() ListCustomerPaymentsRoutingMode {
	if o == nil {
		return ListCustomerPaymentsRoutingMode("")
	}
	return o.Mode
}

func (o *ListCustomerPaymentsRouting) GetAmount() ListCustomerPaymentsRoutingAmount {
	if o == nil {
		return ListCustomerPaymentsRoutingAmount{}
	}
	return o.Amount
}

func (o *ListCustomerPaymentsRouting) GetDestination() ListCustomerPaymentsDestination {
	if o == nil {
		return ListCustomerPaymentsDestination{}
	}
	return o.Destination
}

func (o *ListCustomerPaymentsRouting) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListCustomerPaymentsRouting) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *ListCustomerPaymentsRouting) GetLinks() ListCustomerPaymentsRoutingLinks {
	if o == nil {
		return ListCustomerPaymentsRoutingLinks{}
	}
	return o.Links
}

// ListCustomerPaymentsSequenceType - **Only relevant for recurring payments.**
//
// Indicate which part of a recurring sequence this payment is for.
//
// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
// on their account in the future.
//
// If set to `recurring`, the customer's card is charged automatically.
//
// Defaults to `oneoff`, which is a regular non-recurring payment.
//
// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
// are set up correctly for recurring payments.
type ListCustomerPaymentsSequenceType string

const (
	ListCustomerPaymentsSequenceTypeOneoff    ListCustomerPaymentsSequenceType = "oneoff"
	ListCustomerPaymentsSequenceTypeFirst     ListCustomerPaymentsSequenceType = "first"
	ListCustomerPaymentsSequenceTypeRecurring ListCustomerPaymentsSequenceType = "recurring"
)

func (e ListCustomerPaymentsSequenceType) ToPointer() *ListCustomerPaymentsSequenceType {
	return &e
}
func (e *ListCustomerPaymentsSequenceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oneoff":
		fallthrough
	case "first":
		fallthrough
	case "recurring":
		*e = ListCustomerPaymentsSequenceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsSequenceType: %v", v)
	}
}

// ListCustomerPaymentsStatusEnum - The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
// statuses occur at what point.
type ListCustomerPaymentsStatusEnum string

const (
	ListCustomerPaymentsStatusEnumOpen       ListCustomerPaymentsStatusEnum = "open"
	ListCustomerPaymentsStatusEnumPending    ListCustomerPaymentsStatusEnum = "pending"
	ListCustomerPaymentsStatusEnumAuthorized ListCustomerPaymentsStatusEnum = "authorized"
	ListCustomerPaymentsStatusEnumPaid       ListCustomerPaymentsStatusEnum = "paid"
	ListCustomerPaymentsStatusEnumCanceled   ListCustomerPaymentsStatusEnum = "canceled"
	ListCustomerPaymentsStatusEnumExpired    ListCustomerPaymentsStatusEnum = "expired"
	ListCustomerPaymentsStatusEnumFailed     ListCustomerPaymentsStatusEnum = "failed"
)

func (e ListCustomerPaymentsStatusEnum) ToPointer() *ListCustomerPaymentsStatusEnum {
	return &e
}
func (e *ListCustomerPaymentsStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "pending":
		fallthrough
	case "authorized":
		fallthrough
	case "paid":
		fallthrough
	case "canceled":
		fallthrough
	case "expired":
		fallthrough
	case "failed":
		*e = ListCustomerPaymentsStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsStatusEnum: %v", v)
	}
}

// ListCustomerPaymentsCode - A machine-readable code that indicates the reason for the payment's status.
type ListCustomerPaymentsCode string

const (
	ListCustomerPaymentsCodeApprovedOrCompletedSuccessfully             ListCustomerPaymentsCode = "approved_or_completed_successfully"
	ListCustomerPaymentsCodeReferToCardIssuer                           ListCustomerPaymentsCode = "refer_to_card_issuer"
	ListCustomerPaymentsCodeInvalidMerchant                             ListCustomerPaymentsCode = "invalid_merchant"
	ListCustomerPaymentsCodeCaptureCard                                 ListCustomerPaymentsCode = "capture_card"
	ListCustomerPaymentsCodeDoNotHonor                                  ListCustomerPaymentsCode = "do_not_honor"
	ListCustomerPaymentsCodeError                                       ListCustomerPaymentsCode = "error"
	ListCustomerPaymentsCodePartialApproval                             ListCustomerPaymentsCode = "partial_approval"
	ListCustomerPaymentsCodeInvalidTransaction                          ListCustomerPaymentsCode = "invalid_transaction"
	ListCustomerPaymentsCodeInvalidAmount                               ListCustomerPaymentsCode = "invalid_amount"
	ListCustomerPaymentsCodeInvalidIssuer                               ListCustomerPaymentsCode = "invalid_issuer"
	ListCustomerPaymentsCodeLostCard                                    ListCustomerPaymentsCode = "lost_card"
	ListCustomerPaymentsCodeStolenCard                                  ListCustomerPaymentsCode = "stolen_card"
	ListCustomerPaymentsCodeInsufficientFunds                           ListCustomerPaymentsCode = "insufficient_funds"
	ListCustomerPaymentsCodeExpiredCard                                 ListCustomerPaymentsCode = "expired_card"
	ListCustomerPaymentsCodeInvalidPin                                  ListCustomerPaymentsCode = "invalid_pin"
	ListCustomerPaymentsCodeTransactionNotPermittedToCardholder         ListCustomerPaymentsCode = "transaction_not_permitted_to_cardholder"
	ListCustomerPaymentsCodeTransactionNotAllowedAtTerminal             ListCustomerPaymentsCode = "transaction_not_allowed_at_terminal"
	ListCustomerPaymentsCodeExceedsWithdrawalAmountLimit                ListCustomerPaymentsCode = "exceeds_withdrawal_amount_limit"
	ListCustomerPaymentsCodeRestrictedCard                              ListCustomerPaymentsCode = "restricted_card"
	ListCustomerPaymentsCodeSecurityViolation                           ListCustomerPaymentsCode = "security_violation"
	ListCustomerPaymentsCodeExceedsWithdrawalCountLimit                 ListCustomerPaymentsCode = "exceeds_withdrawal_count_limit"
	ListCustomerPaymentsCodeAllowableNumberOfPinTriesExceeded           ListCustomerPaymentsCode = "allowable_number_of_pin_tries_exceeded"
	ListCustomerPaymentsCodeNoReasonToDecline                           ListCustomerPaymentsCode = "no_reason_to_decline"
	ListCustomerPaymentsCodeCannotVerifyPin                             ListCustomerPaymentsCode = "cannot_verify_pin"
	ListCustomerPaymentsCodeIssuerUnavailable                           ListCustomerPaymentsCode = "issuer_unavailable"
	ListCustomerPaymentsCodeUnableToRouteTransaction                    ListCustomerPaymentsCode = "unable_to_route_transaction"
	ListCustomerPaymentsCodeDuplicateTransaction                        ListCustomerPaymentsCode = "duplicate_transaction"
	ListCustomerPaymentsCodeSystemMalfunction                           ListCustomerPaymentsCode = "system_malfunction"
	ListCustomerPaymentsCodeHonorWithID                                 ListCustomerPaymentsCode = "honor_with_id"
	ListCustomerPaymentsCodeInvalidCardNumber                           ListCustomerPaymentsCode = "invalid_card_number"
	ListCustomerPaymentsCodeFormatError                                 ListCustomerPaymentsCode = "format_error"
	ListCustomerPaymentsCodeContactCardIssuer                           ListCustomerPaymentsCode = "contact_card_issuer"
	ListCustomerPaymentsCodePinNotChanged                               ListCustomerPaymentsCode = "pin_not_changed"
	ListCustomerPaymentsCodeInvalidNonexistentToAccountSpecified        ListCustomerPaymentsCode = "invalid_nonexistent_to_account_specified"
	ListCustomerPaymentsCodeInvalidNonexistentFromAccountSpecified      ListCustomerPaymentsCode = "invalid_nonexistent_from_account_specified"
	ListCustomerPaymentsCodeInvalidNonexistentAccountSpecified          ListCustomerPaymentsCode = "invalid_nonexistent_account_specified"
	ListCustomerPaymentsCodeLifecycleRelated                            ListCustomerPaymentsCode = "lifecycle_related"
	ListCustomerPaymentsCodeDomesticDebitTransactionNotAllowed          ListCustomerPaymentsCode = "domestic_debit_transaction_not_allowed"
	ListCustomerPaymentsCodePolicyRelated                               ListCustomerPaymentsCode = "policy_related"
	ListCustomerPaymentsCodeFraudSecurityRelated                        ListCustomerPaymentsCode = "fraud_security_related"
	ListCustomerPaymentsCodeInvalidAuthorizationLifeCycle               ListCustomerPaymentsCode = "invalid_authorization_life_cycle"
	ListCustomerPaymentsCodePurchaseAmountOnlyNoCashBackAllowed         ListCustomerPaymentsCode = "purchase_amount_only_no_cash_back_allowed"
	ListCustomerPaymentsCodeCryptographicFailure                        ListCustomerPaymentsCode = "cryptographic_failure"
	ListCustomerPaymentsCodeUnacceptablePin                             ListCustomerPaymentsCode = "unacceptable_pin"
	ListCustomerPaymentsCodeReferToCardIssuerSpecialCondition           ListCustomerPaymentsCode = "refer_to_card_issuer_special_condition"
	ListCustomerPaymentsCodePickUpCardSpecialCondition                  ListCustomerPaymentsCode = "pick_up_card_special_condition"
	ListCustomerPaymentsCodeVipApproval                                 ListCustomerPaymentsCode = "vip_approval"
	ListCustomerPaymentsCodeInvalidAccountNumber                        ListCustomerPaymentsCode = "invalid_account_number"
	ListCustomerPaymentsCodeReEnterTransaction                          ListCustomerPaymentsCode = "re_enter_transaction"
	ListCustomerPaymentsCodeNoActionTaken                               ListCustomerPaymentsCode = "no_action_taken"
	ListCustomerPaymentsCodeUnableToLocateRecord                        ListCustomerPaymentsCode = "unable_to_locate_record"
	ListCustomerPaymentsCodeFileTemporarilyUnavailable                  ListCustomerPaymentsCode = "file_temporarily_unavailable"
	ListCustomerPaymentsCodeNoCreditAccount                             ListCustomerPaymentsCode = "no_credit_account"
	ListCustomerPaymentsCodeClosedAccount                               ListCustomerPaymentsCode = "closed_account"
	ListCustomerPaymentsCodeNoCheckingAccount                           ListCustomerPaymentsCode = "no_checking_account"
	ListCustomerPaymentsCodeNoSavingsAccount                            ListCustomerPaymentsCode = "no_savings_account"
	ListCustomerPaymentsCodeSuspectedFraud                              ListCustomerPaymentsCode = "suspected_fraud"
	ListCustomerPaymentsCodeTransactionDoesNotFulfillAmlRequirement     ListCustomerPaymentsCode = "transaction_does_not_fulfill_aml_requirement"
	ListCustomerPaymentsCodePinDataRequired                             ListCustomerPaymentsCode = "pin_data_required"
	ListCustomerPaymentsCodeUnableToLocatePreviousMessage               ListCustomerPaymentsCode = "unable_to_locate_previous_message"
	ListCustomerPaymentsCodePreviousMessageLocatedInconsistentData      ListCustomerPaymentsCode = "previous_message_located_inconsistent_data"
	ListCustomerPaymentsCodeBlockedFirstUsed                            ListCustomerPaymentsCode = "blocked_first_used"
	ListCustomerPaymentsCodeTransactionReversed                         ListCustomerPaymentsCode = "transaction_reversed"
	ListCustomerPaymentsCodeCreditIssuerUnavailable                     ListCustomerPaymentsCode = "credit_issuer_unavailable"
	ListCustomerPaymentsCodePinCryptographicErrorFound                  ListCustomerPaymentsCode = "pin_cryptographic_error_found"
	ListCustomerPaymentsCodeNegativeOnlineCamResult                     ListCustomerPaymentsCode = "negative_online_cam_result"
	ListCustomerPaymentsCodeViolationOfLaw                              ListCustomerPaymentsCode = "violation_of_law"
	ListCustomerPaymentsCodeForceStip                                   ListCustomerPaymentsCode = "force_stip"
	ListCustomerPaymentsCodeCashServiceNotAvailable                     ListCustomerPaymentsCode = "cash_service_not_available"
	ListCustomerPaymentsCodeCashbackRequestExceedsIssuerLimit           ListCustomerPaymentsCode = "cashback_request_exceeds_issuer_limit"
	ListCustomerPaymentsCodeDeclineForCvv2Failure                       ListCustomerPaymentsCode = "decline_for_cvv2_failure"
	ListCustomerPaymentsCodeTransactionAmountExceedsPreAuthorizedAmount ListCustomerPaymentsCode = "transaction_amount_exceeds_pre_authorized_amount"
	ListCustomerPaymentsCodeInvalidBillerInformation                    ListCustomerPaymentsCode = "invalid_biller_information"
	ListCustomerPaymentsCodePinChangeUnblockRequestDeclined             ListCustomerPaymentsCode = "pin_change_unblock_request_declined"
	ListCustomerPaymentsCodeUnsafePin                                   ListCustomerPaymentsCode = "unsafe_pin"
	ListCustomerPaymentsCodeCardAuthenticationFailed                    ListCustomerPaymentsCode = "card_authentication_failed"
	ListCustomerPaymentsCodeStopPaymentOrder                            ListCustomerPaymentsCode = "stop_payment_order"
	ListCustomerPaymentsCodeRevocationOfAuthorization                   ListCustomerPaymentsCode = "revocation_of_authorization"
	ListCustomerPaymentsCodeRevocationOfAllAuthorizations               ListCustomerPaymentsCode = "revocation_of_all_authorizations"
	ListCustomerPaymentsCodeForwardToIssuerXa                           ListCustomerPaymentsCode = "forward_to_issuer_xa"
	ListCustomerPaymentsCodeForwardToIssuerXd                           ListCustomerPaymentsCode = "forward_to_issuer_xd"
	ListCustomerPaymentsCodeUnableToGoOnline                            ListCustomerPaymentsCode = "unable_to_go_online"
	ListCustomerPaymentsCodeAdditionalCustomerAuthenticationRequired    ListCustomerPaymentsCode = "additional_customer_authentication_required"
	ListCustomerPaymentsCodeMerchantIDNotFound                          ListCustomerPaymentsCode = "merchant_id_not_found"
	ListCustomerPaymentsCodeMerchantAccountClosed                       ListCustomerPaymentsCode = "merchant_account_closed"
	ListCustomerPaymentsCodeTerminalIDNotFound                          ListCustomerPaymentsCode = "terminal_id_not_found"
	ListCustomerPaymentsCodeTerminalClosed                              ListCustomerPaymentsCode = "terminal_closed"
	ListCustomerPaymentsCodeInvalidCategoryCode                         ListCustomerPaymentsCode = "invalid_category_code"
	ListCustomerPaymentsCodeInvalidCurrency                             ListCustomerPaymentsCode = "invalid_currency"
	ListCustomerPaymentsCodeMissingCvv2Cvc2                             ListCustomerPaymentsCode = "missing_cvv2_cvc2"
	ListCustomerPaymentsCodeCvv2NotAllowed                              ListCustomerPaymentsCode = "cvv2_not_allowed"
	ListCustomerPaymentsCodeMerchantNotRegisteredVbv                    ListCustomerPaymentsCode = "merchant_not_registered_vbv"
	ListCustomerPaymentsCodeMerchantNotRegisteredForAmex                ListCustomerPaymentsCode = "merchant_not_registered_for_amex"
	ListCustomerPaymentsCodeTransactionNotPermittedAtTerminal           ListCustomerPaymentsCode = "transaction_not_permitted_at_terminal"
	ListCustomerPaymentsCodeAgreementTerminalNotRelated                 ListCustomerPaymentsCode = "agreement_terminal_not_related"
	ListCustomerPaymentsCodeInvalidProcessorID                          ListCustomerPaymentsCode = "invalid_processor_id"
	ListCustomerPaymentsCodeInvalidMerchantData                         ListCustomerPaymentsCode = "invalid_merchant_data"
	ListCustomerPaymentsCodeSubMerchantAccountClosed                    ListCustomerPaymentsCode = "sub_merchant_account_closed"
	ListCustomerPaymentsCodeTerminalBusy                                ListCustomerPaymentsCode = "terminal_busy"
	ListCustomerPaymentsCodeTerminalUnreachable                         ListCustomerPaymentsCode = "terminal_unreachable"
	ListCustomerPaymentsCodeServiceFailed                               ListCustomerPaymentsCode = "service_failed"
	ListCustomerPaymentsCodeInvalidOperation                            ListCustomerPaymentsCode = "invalid_operation"
	ListCustomerPaymentsCodeAuthorizationError                          ListCustomerPaymentsCode = "authorization_error"
	ListCustomerPaymentsCodeLoginFailedWithoutReason                    ListCustomerPaymentsCode = "login_failed_without_reason"
	ListCustomerPaymentsCodeInvalidRetailer                             ListCustomerPaymentsCode = "invalid_retailer"
	ListCustomerPaymentsCodeCardDoesNotExist                            ListCustomerPaymentsCode = "card_does_not_exist"
	ListCustomerPaymentsCodeCardIsBlocked                               ListCustomerPaymentsCode = "card_is_blocked"
	ListCustomerPaymentsCodeInvalidCardID                               ListCustomerPaymentsCode = "invalid_card_id"
	ListCustomerPaymentsCodeCardIsTransferred                           ListCustomerPaymentsCode = "card_is_transferred"
	ListCustomerPaymentsCodeCardIsNotActive                             ListCustomerPaymentsCode = "card_is_not_active"
	ListCustomerPaymentsCodeIncorrectPurchaseValue                      ListCustomerPaymentsCode = "incorrect_purchase_value"
	ListCustomerPaymentsCodeCardNotAvailable                            ListCustomerPaymentsCode = "card_not_available"
	ListCustomerPaymentsCodeWrongCurrency                               ListCustomerPaymentsCode = "wrong_currency"
	ListCustomerPaymentsCodeLoginFailedUnknownUser                      ListCustomerPaymentsCode = "login_failed_unknown_user"
	ListCustomerPaymentsCodeLoginFailedInvalidPassword                  ListCustomerPaymentsCode = "login_failed_invalid_password"
	ListCustomerPaymentsCodeInvalidEanCode                              ListCustomerPaymentsCode = "invalid_ean_code"
)

func (e ListCustomerPaymentsCode) ToPointer() *ListCustomerPaymentsCode {
	return &e
}
func (e *ListCustomerPaymentsCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved_or_completed_successfully":
		fallthrough
	case "refer_to_card_issuer":
		fallthrough
	case "invalid_merchant":
		fallthrough
	case "capture_card":
		fallthrough
	case "do_not_honor":
		fallthrough
	case "error":
		fallthrough
	case "partial_approval":
		fallthrough
	case "invalid_transaction":
		fallthrough
	case "invalid_amount":
		fallthrough
	case "invalid_issuer":
		fallthrough
	case "lost_card":
		fallthrough
	case "stolen_card":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "expired_card":
		fallthrough
	case "invalid_pin":
		fallthrough
	case "transaction_not_permitted_to_cardholder":
		fallthrough
	case "transaction_not_allowed_at_terminal":
		fallthrough
	case "exceeds_withdrawal_amount_limit":
		fallthrough
	case "restricted_card":
		fallthrough
	case "security_violation":
		fallthrough
	case "exceeds_withdrawal_count_limit":
		fallthrough
	case "allowable_number_of_pin_tries_exceeded":
		fallthrough
	case "no_reason_to_decline":
		fallthrough
	case "cannot_verify_pin":
		fallthrough
	case "issuer_unavailable":
		fallthrough
	case "unable_to_route_transaction":
		fallthrough
	case "duplicate_transaction":
		fallthrough
	case "system_malfunction":
		fallthrough
	case "honor_with_id":
		fallthrough
	case "invalid_card_number":
		fallthrough
	case "format_error":
		fallthrough
	case "contact_card_issuer":
		fallthrough
	case "pin_not_changed":
		fallthrough
	case "invalid_nonexistent_to_account_specified":
		fallthrough
	case "invalid_nonexistent_from_account_specified":
		fallthrough
	case "invalid_nonexistent_account_specified":
		fallthrough
	case "lifecycle_related":
		fallthrough
	case "domestic_debit_transaction_not_allowed":
		fallthrough
	case "policy_related":
		fallthrough
	case "fraud_security_related":
		fallthrough
	case "invalid_authorization_life_cycle":
		fallthrough
	case "purchase_amount_only_no_cash_back_allowed":
		fallthrough
	case "cryptographic_failure":
		fallthrough
	case "unacceptable_pin":
		fallthrough
	case "refer_to_card_issuer_special_condition":
		fallthrough
	case "pick_up_card_special_condition":
		fallthrough
	case "vip_approval":
		fallthrough
	case "invalid_account_number":
		fallthrough
	case "re_enter_transaction":
		fallthrough
	case "no_action_taken":
		fallthrough
	case "unable_to_locate_record":
		fallthrough
	case "file_temporarily_unavailable":
		fallthrough
	case "no_credit_account":
		fallthrough
	case "closed_account":
		fallthrough
	case "no_checking_account":
		fallthrough
	case "no_savings_account":
		fallthrough
	case "suspected_fraud":
		fallthrough
	case "transaction_does_not_fulfill_aml_requirement":
		fallthrough
	case "pin_data_required":
		fallthrough
	case "unable_to_locate_previous_message":
		fallthrough
	case "previous_message_located_inconsistent_data":
		fallthrough
	case "blocked_first_used":
		fallthrough
	case "transaction_reversed":
		fallthrough
	case "credit_issuer_unavailable":
		fallthrough
	case "pin_cryptographic_error_found":
		fallthrough
	case "negative_online_cam_result":
		fallthrough
	case "violation_of_law":
		fallthrough
	case "force_stip":
		fallthrough
	case "cash_service_not_available":
		fallthrough
	case "cashback_request_exceeds_issuer_limit":
		fallthrough
	case "decline_for_cvv2_failure":
		fallthrough
	case "transaction_amount_exceeds_pre_authorized_amount":
		fallthrough
	case "invalid_biller_information":
		fallthrough
	case "pin_change_unblock_request_declined":
		fallthrough
	case "unsafe_pin":
		fallthrough
	case "card_authentication_failed":
		fallthrough
	case "stop_payment_order":
		fallthrough
	case "revocation_of_authorization":
		fallthrough
	case "revocation_of_all_authorizations":
		fallthrough
	case "forward_to_issuer_xa":
		fallthrough
	case "forward_to_issuer_xd":
		fallthrough
	case "unable_to_go_online":
		fallthrough
	case "additional_customer_authentication_required":
		fallthrough
	case "merchant_id_not_found":
		fallthrough
	case "merchant_account_closed":
		fallthrough
	case "terminal_id_not_found":
		fallthrough
	case "terminal_closed":
		fallthrough
	case "invalid_category_code":
		fallthrough
	case "invalid_currency":
		fallthrough
	case "missing_cvv2_cvc2":
		fallthrough
	case "cvv2_not_allowed":
		fallthrough
	case "merchant_not_registered_vbv":
		fallthrough
	case "merchant_not_registered_for_amex":
		fallthrough
	case "transaction_not_permitted_at_terminal":
		fallthrough
	case "agreement_terminal_not_related":
		fallthrough
	case "invalid_processor_id":
		fallthrough
	case "invalid_merchant_data":
		fallthrough
	case "sub_merchant_account_closed":
		fallthrough
	case "terminal_busy":
		fallthrough
	case "terminal_unreachable":
		fallthrough
	case "service_failed":
		fallthrough
	case "invalid_operation":
		fallthrough
	case "authorization_error":
		fallthrough
	case "login_failed_without_reason":
		fallthrough
	case "invalid_retailer":
		fallthrough
	case "card_does_not_exist":
		fallthrough
	case "card_is_blocked":
		fallthrough
	case "invalid_card_id":
		fallthrough
	case "card_is_transferred":
		fallthrough
	case "card_is_not_active":
		fallthrough
	case "incorrect_purchase_value":
		fallthrough
	case "card_not_available":
		fallthrough
	case "wrong_currency":
		fallthrough
	case "login_failed_unknown_user":
		fallthrough
	case "login_failed_invalid_password":
		fallthrough
	case "invalid_ean_code":
		*e = ListCustomerPaymentsCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsCode: %v", v)
	}
}

// ListCustomerPaymentsStatusReason - This object offers details about the status of a payment. Currently it is only available for point-of-sale
// payments.
//
// You can find more information about the possible values of this object on
// [this page](status-reasons).**
type ListCustomerPaymentsStatusReason struct {
	Code ListCustomerPaymentsCode `json:"code"`
	// A description of the status reason, localized according to the payment `locale`.
	Message string `json:"message"`
}

func (o *ListCustomerPaymentsStatusReason) GetCode() ListCustomerPaymentsCode {
	if o == nil {
		return ListCustomerPaymentsCode("")
	}
	return o.Code
}

func (o *ListCustomerPaymentsStatusReason) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

// ListCustomerPaymentsCardAudition - The card's target audience, if known.
type ListCustomerPaymentsCardAudition string

const (
	ListCustomerPaymentsCardAuditionConsumer ListCustomerPaymentsCardAudition = "consumer"
	ListCustomerPaymentsCardAuditionBusiness ListCustomerPaymentsCardAudition = "business"
)

func (e ListCustomerPaymentsCardAudition) ToPointer() *ListCustomerPaymentsCardAudition {
	return &e
}
func (e *ListCustomerPaymentsCardAudition) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "business":
		*e = ListCustomerPaymentsCardAudition(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsCardAudition: %v", v)
	}
}

// ListCustomerPaymentsCardLabel - The card's label, if known.
type ListCustomerPaymentsCardLabel string

const (
	ListCustomerPaymentsCardLabelAmericanExpress ListCustomerPaymentsCardLabel = "American Express"
	ListCustomerPaymentsCardLabelCartaSi         ListCustomerPaymentsCardLabel = "Carta Si"
	ListCustomerPaymentsCardLabelCarteBleue      ListCustomerPaymentsCardLabel = "Carte Bleue"
	ListCustomerPaymentsCardLabelDankort         ListCustomerPaymentsCardLabel = "Dankort"
	ListCustomerPaymentsCardLabelDinersClub      ListCustomerPaymentsCardLabel = "Diners Club"
	ListCustomerPaymentsCardLabelDiscover        ListCustomerPaymentsCardLabel = "Discover"
	ListCustomerPaymentsCardLabelJcb             ListCustomerPaymentsCardLabel = "JCB"
	ListCustomerPaymentsCardLabelLaser           ListCustomerPaymentsCardLabel = "Laser"
	ListCustomerPaymentsCardLabelMaestro         ListCustomerPaymentsCardLabel = "Maestro"
	ListCustomerPaymentsCardLabelMastercard      ListCustomerPaymentsCardLabel = "Mastercard"
	ListCustomerPaymentsCardLabelUnionpay        ListCustomerPaymentsCardLabel = "Unionpay"
	ListCustomerPaymentsCardLabelVisa            ListCustomerPaymentsCardLabel = "Visa"
	ListCustomerPaymentsCardLabelVpay            ListCustomerPaymentsCardLabel = "Vpay"
)

func (e ListCustomerPaymentsCardLabel) ToPointer() *ListCustomerPaymentsCardLabel {
	return &e
}
func (e *ListCustomerPaymentsCardLabel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "American Express":
		fallthrough
	case "Carta Si":
		fallthrough
	case "Carte Bleue":
		fallthrough
	case "Dankort":
		fallthrough
	case "Diners Club":
		fallthrough
	case "Discover":
		fallthrough
	case "JCB":
		fallthrough
	case "Laser":
		fallthrough
	case "Maestro":
		fallthrough
	case "Mastercard":
		fallthrough
	case "Unionpay":
		fallthrough
	case "Visa":
		fallthrough
	case "Vpay":
		*e = ListCustomerPaymentsCardLabel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsCardLabel: %v", v)
	}
}

// ListCustomerPaymentsCardFunding - The card type.
type ListCustomerPaymentsCardFunding string

const (
	ListCustomerPaymentsCardFundingDebit         ListCustomerPaymentsCardFunding = "debit"
	ListCustomerPaymentsCardFundingCredit        ListCustomerPaymentsCardFunding = "credit"
	ListCustomerPaymentsCardFundingPrepaid       ListCustomerPaymentsCardFunding = "prepaid"
	ListCustomerPaymentsCardFundingDeferredDebit ListCustomerPaymentsCardFunding = "deferred-debit"
)

func (e ListCustomerPaymentsCardFunding) ToPointer() *ListCustomerPaymentsCardFunding {
	return &e
}
func (e *ListCustomerPaymentsCardFunding) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debit":
		fallthrough
	case "credit":
		fallthrough
	case "prepaid":
		fallthrough
	case "deferred-debit":
		*e = ListCustomerPaymentsCardFunding(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsCardFunding: %v", v)
	}
}

// ListCustomerPaymentsCardSecurity - The level of security applied during card processing.
type ListCustomerPaymentsCardSecurity string

const (
	ListCustomerPaymentsCardSecurityNormal       ListCustomerPaymentsCardSecurity = "normal"
	ListCustomerPaymentsCardSecurityThreedsecure ListCustomerPaymentsCardSecurity = "3dsecure"
)

func (e ListCustomerPaymentsCardSecurity) ToPointer() *ListCustomerPaymentsCardSecurity {
	return &e
}
func (e *ListCustomerPaymentsCardSecurity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "normal":
		fallthrough
	case "3dsecure":
		*e = ListCustomerPaymentsCardSecurity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsCardSecurity: %v", v)
	}
}

// ListCustomerPaymentsFeeRegion - The applicable card fee region.
type ListCustomerPaymentsFeeRegion string

const (
	ListCustomerPaymentsFeeRegionAmericanExpress  ListCustomerPaymentsFeeRegion = "american-express"
	ListCustomerPaymentsFeeRegionAmexIntraEea     ListCustomerPaymentsFeeRegion = "amex-intra-eea"
	ListCustomerPaymentsFeeRegionCarteBancaire    ListCustomerPaymentsFeeRegion = "carte-bancaire"
	ListCustomerPaymentsFeeRegionIntraEu          ListCustomerPaymentsFeeRegion = "intra-eu"
	ListCustomerPaymentsFeeRegionIntraEuCorporate ListCustomerPaymentsFeeRegion = "intra-eu-corporate"
	ListCustomerPaymentsFeeRegionDomestic         ListCustomerPaymentsFeeRegion = "domestic"
	ListCustomerPaymentsFeeRegionMaestro          ListCustomerPaymentsFeeRegion = "maestro"
	ListCustomerPaymentsFeeRegionOther            ListCustomerPaymentsFeeRegion = "other"
	ListCustomerPaymentsFeeRegionInter            ListCustomerPaymentsFeeRegion = "inter"
	ListCustomerPaymentsFeeRegionIntraEea         ListCustomerPaymentsFeeRegion = "intra_eea"
)

func (e ListCustomerPaymentsFeeRegion) ToPointer() *ListCustomerPaymentsFeeRegion {
	return &e
}
func (e *ListCustomerPaymentsFeeRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "american-express":
		fallthrough
	case "amex-intra-eea":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "intra-eu":
		fallthrough
	case "intra-eu-corporate":
		fallthrough
	case "domestic":
		fallthrough
	case "maestro":
		fallthrough
	case "other":
		fallthrough
	case "inter":
		fallthrough
	case "intra_eea":
		*e = ListCustomerPaymentsFeeRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsFeeRegion: %v", v)
	}
}

// ListCustomerPaymentsFailureReason - A failure code to help understand why the payment failed.
type ListCustomerPaymentsFailureReason string

const (
	ListCustomerPaymentsFailureReasonAuthenticationAbandoned      ListCustomerPaymentsFailureReason = "authentication_abandoned"
	ListCustomerPaymentsFailureReasonAuthenticationFailed         ListCustomerPaymentsFailureReason = "authentication_failed"
	ListCustomerPaymentsFailureReasonAuthenticationRequired       ListCustomerPaymentsFailureReason = "authentication_required"
	ListCustomerPaymentsFailureReasonAuthenticationUnavailableAcs ListCustomerPaymentsFailureReason = "authentication_unavailable_acs"
	ListCustomerPaymentsFailureReasonCardDeclined                 ListCustomerPaymentsFailureReason = "card_declined"
	ListCustomerPaymentsFailureReasonCardExpired                  ListCustomerPaymentsFailureReason = "card_expired"
	ListCustomerPaymentsFailureReasonInactiveCard                 ListCustomerPaymentsFailureReason = "inactive_card"
	ListCustomerPaymentsFailureReasonInsufficientFunds            ListCustomerPaymentsFailureReason = "insufficient_funds"
	ListCustomerPaymentsFailureReasonInvalidCvv                   ListCustomerPaymentsFailureReason = "invalid_cvv"
	ListCustomerPaymentsFailureReasonInvalidCardHolderName        ListCustomerPaymentsFailureReason = "invalid_card_holder_name"
	ListCustomerPaymentsFailureReasonInvalidCardNumber            ListCustomerPaymentsFailureReason = "invalid_card_number"
	ListCustomerPaymentsFailureReasonInvalidCardType              ListCustomerPaymentsFailureReason = "invalid_card_type"
	ListCustomerPaymentsFailureReasonPossibleFraud                ListCustomerPaymentsFailureReason = "possible_fraud"
	ListCustomerPaymentsFailureReasonRefusedByIssuer              ListCustomerPaymentsFailureReason = "refused_by_issuer"
	ListCustomerPaymentsFailureReasonUnknownReason                ListCustomerPaymentsFailureReason = "unknown_reason"
)

func (e ListCustomerPaymentsFailureReason) ToPointer() *ListCustomerPaymentsFailureReason {
	return &e
}
func (e *ListCustomerPaymentsFailureReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "authentication_abandoned":
		fallthrough
	case "authentication_failed":
		fallthrough
	case "authentication_required":
		fallthrough
	case "authentication_unavailable_acs":
		fallthrough
	case "card_declined":
		fallthrough
	case "card_expired":
		fallthrough
	case "inactive_card":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "invalid_cvv":
		fallthrough
	case "invalid_card_holder_name":
		fallthrough
	case "invalid_card_number":
		fallthrough
	case "invalid_card_type":
		fallthrough
	case "possible_fraud":
		fallthrough
	case "refused_by_issuer":
		fallthrough
	case "unknown_reason":
		*e = ListCustomerPaymentsFailureReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsFailureReason: %v", v)
	}
}

// ListCustomerPaymentsWallet - The wallet used when creating the payment.
type ListCustomerPaymentsWallet string

const (
	ListCustomerPaymentsWalletApplepay ListCustomerPaymentsWallet = "applepay"
)

func (e ListCustomerPaymentsWallet) ToPointer() *ListCustomerPaymentsWallet {
	return &e
}
func (e *ListCustomerPaymentsWallet) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "applepay":
		*e = ListCustomerPaymentsWallet(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsWallet: %v", v)
	}
}

// ListCustomerPaymentsSellerProtection - Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
// payments, and if the information is made available by PayPal.
type ListCustomerPaymentsSellerProtection string

const (
	ListCustomerPaymentsSellerProtectionEligible                          ListCustomerPaymentsSellerProtection = "Eligible"
	ListCustomerPaymentsSellerProtectionIneligible                        ListCustomerPaymentsSellerProtection = "Ineligible"
	ListCustomerPaymentsSellerProtectionPartiallyEligibleInrOnly          ListCustomerPaymentsSellerProtection = "Partially Eligible - INR Only"
	ListCustomerPaymentsSellerProtectionPartiallyEligibleUnauthOnly       ListCustomerPaymentsSellerProtection = "Partially Eligible - Unauth Only"
	ListCustomerPaymentsSellerProtectionPartiallyEligible                 ListCustomerPaymentsSellerProtection = "Partially Eligible"
	ListCustomerPaymentsSellerProtectionNone                              ListCustomerPaymentsSellerProtection = "None"
	ListCustomerPaymentsSellerProtectionActive                            ListCustomerPaymentsSellerProtection = "Active"
	ListCustomerPaymentsSellerProtectionFraudControlUnauthPremiumEligible ListCustomerPaymentsSellerProtection = "Fraud Control - Unauth Premium Eligible"
)

func (e ListCustomerPaymentsSellerProtection) ToPointer() *ListCustomerPaymentsSellerProtection {
	return &e
}
func (e *ListCustomerPaymentsSellerProtection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Eligible":
		fallthrough
	case "Ineligible":
		fallthrough
	case "Partially Eligible - INR Only":
		fallthrough
	case "Partially Eligible - Unauth Only":
		fallthrough
	case "Partially Eligible":
		fallthrough
	case "None":
		fallthrough
	case "Active":
		fallthrough
	case "Fraud Control - Unauth Premium Eligible":
		*e = ListCustomerPaymentsSellerProtection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsSellerProtection: %v", v)
	}
}

// ListCustomerPaymentsPaypalFee - An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
// PayPal will not charge a fee for this transaction.
type ListCustomerPaymentsPaypalFee struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListCustomerPaymentsPaypalFee) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListCustomerPaymentsPaypalFee) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListCustomerPaymentsCardReadMethod - The method by which the card was read by the terminal.
type ListCustomerPaymentsCardReadMethod string

const (
	ListCustomerPaymentsCardReadMethodChip                   ListCustomerPaymentsCardReadMethod = "chip"
	ListCustomerPaymentsCardReadMethodMagneticStripe         ListCustomerPaymentsCardReadMethod = "magnetic-stripe"
	ListCustomerPaymentsCardReadMethodNearFieldCommunication ListCustomerPaymentsCardReadMethod = "near-field-communication"
	ListCustomerPaymentsCardReadMethodContactless            ListCustomerPaymentsCardReadMethod = "contactless"
	ListCustomerPaymentsCardReadMethodMoto                   ListCustomerPaymentsCardReadMethod = "moto"
)

func (e ListCustomerPaymentsCardReadMethod) ToPointer() *ListCustomerPaymentsCardReadMethod {
	return &e
}
func (e *ListCustomerPaymentsCardReadMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "chip":
		fallthrough
	case "magnetic-stripe":
		fallthrough
	case "near-field-communication":
		fallthrough
	case "contactless":
		fallthrough
	case "moto":
		*e = ListCustomerPaymentsCardReadMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsCardReadMethod: %v", v)
	}
}

// ListCustomerPaymentsCardVerificationMethod - The method used to verify the cardholder's identity.
type ListCustomerPaymentsCardVerificationMethod string

const (
	ListCustomerPaymentsCardVerificationMethodNoCvmRequired         ListCustomerPaymentsCardVerificationMethod = "no-cvm-required"
	ListCustomerPaymentsCardVerificationMethodOnlinePin             ListCustomerPaymentsCardVerificationMethod = "online-pin"
	ListCustomerPaymentsCardVerificationMethodOfflinePin            ListCustomerPaymentsCardVerificationMethod = "offline-pin"
	ListCustomerPaymentsCardVerificationMethodConsumerDevice        ListCustomerPaymentsCardVerificationMethod = "consumer-device"
	ListCustomerPaymentsCardVerificationMethodSignature             ListCustomerPaymentsCardVerificationMethod = "signature"
	ListCustomerPaymentsCardVerificationMethodSignatureAndOnlinePin ListCustomerPaymentsCardVerificationMethod = "signature-and-online-pin"
	ListCustomerPaymentsCardVerificationMethodOnlinePinAndSignature ListCustomerPaymentsCardVerificationMethod = "online-pin-and-signature"
	ListCustomerPaymentsCardVerificationMethodNone                  ListCustomerPaymentsCardVerificationMethod = "none"
	ListCustomerPaymentsCardVerificationMethodFailed                ListCustomerPaymentsCardVerificationMethod = "failed"
)

func (e ListCustomerPaymentsCardVerificationMethod) ToPointer() *ListCustomerPaymentsCardVerificationMethod {
	return &e
}
func (e *ListCustomerPaymentsCardVerificationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "no-cvm-required":
		fallthrough
	case "online-pin":
		fallthrough
	case "offline-pin":
		fallthrough
	case "consumer-device":
		fallthrough
	case "signature":
		fallthrough
	case "signature-and-online-pin":
		fallthrough
	case "online-pin-and-signature":
		fallthrough
	case "none":
		fallthrough
	case "failed":
		*e = ListCustomerPaymentsCardVerificationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerPaymentsCardVerificationMethod: %v", v)
	}
}

// ListCustomerPaymentsReceipt - The Point of sale receipt object.
type ListCustomerPaymentsReceipt struct {
	// A unique code provided by the cardholderâ€™s bank to confirm that the transaction was successfully approved.
	AuthorizationCode *string `json:"authorizationCode,omitempty"`
	// The unique number that identifies a specific payment application on a chip card.
	ApplicationIdentifier *string `json:"applicationIdentifier,omitempty"`
	// The method by which the card was read by the terminal.
	CardReadMethod *ListCustomerPaymentsCardReadMethod `json:"cardReadMethod,omitempty"`
	// The method used to verify the cardholder's identity.
	CardVerificationMethod *ListCustomerPaymentsCardVerificationMethod `json:"cardVerificationMethod,omitempty"`
}

func (o *ListCustomerPaymentsReceipt) GetAuthorizationCode() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizationCode
}

func (o *ListCustomerPaymentsReceipt) GetApplicationIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationIdentifier
}

func (o *ListCustomerPaymentsReceipt) GetCardReadMethod() *ListCustomerPaymentsCardReadMethod {
	if o == nil {
		return nil
	}
	return o.CardReadMethod
}

func (o *ListCustomerPaymentsReceipt) GetCardVerificationMethod() *ListCustomerPaymentsCardVerificationMethod {
	if o == nil {
		return nil
	}
	return o.CardVerificationMethod
}

// ListCustomerPaymentsQrCode - Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
// the QR code details will be available in this object.
//
// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
// Bancontact QR payments can be completed by the customer using the Bancontact app.
type ListCustomerPaymentsQrCode struct {
	// The height of the QR code image in pixels.
	Height *int64 `json:"height,omitempty"`
	// The width of the QR code image in pixels.
	Width *int64 `json:"width,omitempty"`
	// The URL to the QR code image. The image is a PNG file, and can be displayed directly in the browser or
	// downloaded.
	Src *string `json:"src,omitempty"`
}

func (o *ListCustomerPaymentsQrCode) GetHeight() *int64 {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *ListCustomerPaymentsQrCode) GetWidth() *int64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *ListCustomerPaymentsQrCode) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

// ListCustomerPaymentsRemainderAmount - An amount object for the amount that remained after all gift cards or vouchers were applied.
type ListCustomerPaymentsRemainderAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListCustomerPaymentsRemainderAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListCustomerPaymentsRemainderAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListCustomerPaymentsDetails - An object containing payment details collected during the payment process. For example, details may include the
// customer's card or bank details and a payment reference. For the full list of details, please refer to the
// [method-specific parameters](extra-payment-parameters) guide.
type ListCustomerPaymentsDetails struct {
	// The customer's name, if made available by the payment method. For card payments, refer to details.cardHolder.
	ConsumerName *string `json:"consumerName,omitempty"`
	// The customer's account reference.
	//
	// For banking-based payment methods â€” such as iDEAL â€” this is normally either an IBAN or a domestic bank account
	// number.
	//
	// For PayPal, the account reference is an email address.
	//
	// For card and Bancontact payments, refer to details.cardNumber.
	ConsumerAccount *string `json:"consumerAccount,omitempty"`
	// The BIC of the customer's bank account, if applicable.
	ConsumerBic *string `json:"consumerBic,omitempty"`
	// For wallet payment methods â€” such as Apple Pay and PayPal â€” the shipping address is often already known by the
	// wallet provider. In these cases the shipping address may be available as a payment detail.
	ShippingAddress map[string]any `json:"shippingAddress,omitempty"`
	// For bancontact, it will be the customer's masked card number. For cards, it will be the last 4-digit of the
	// PAN. For Point-of-sale, it will be the the last 4 digits of the customer's masked card number.
	CardNumber *string `json:"cardNumber,omitempty"`
	// The name of the bank that the customer will need to make the bank transfer payment towards.
	BankName *string `json:"bankName,omitempty"`
	// The bank account number the customer will need to make the bank transfer payment towards.
	BankAccount *string `json:"bankAccount,omitempty"`
	// The BIC of the bank the customer will need to make the bank transfer payment towards.
	BankBic *string `json:"bankBic,omitempty"`
	// The Mollie-generated reference the customer needs to use when transfering the amount. Do not apply any
	// formatting here; show it to the customer as-is.
	TransferReference *string `json:"transferReference,omitempty"`
	// A unique fingerprint for a specific card. Can be used to identify returning customers.
	//
	// In the case of Point-of-sale payments, it's a unique identifier assigned to a cardholder's payment account,
	// linking multiple transactions from wallets and physical card to a single account, also across payment methods
	// or when the card is reissued.
	CardFingerprint *string `json:"cardFingerprint,omitempty"`
	// The customer's name as shown on their card.
	CardHolder *string `json:"cardHolder,omitempty"`
	// The card's target audience, if known.
	CardAudition *ListCustomerPaymentsCardAudition `json:"cardAudition,omitempty"`
	// The card's label, if known.
	CardLabel *ListCustomerPaymentsCardLabel `json:"cardLabel,omitempty"`
	// The ISO 3166-1 alpha-2 country code of the country the card was issued in.
	CardCountryCode *string `json:"cardCountryCode,omitempty"`
	// The expiry date (MM/YY) of the card as displayed on the card.
	CardExpiryDate *string `json:"cardExpiryDate,omitempty"`
	// The card type.
	CardFunding *ListCustomerPaymentsCardFunding `json:"cardFunding,omitempty"`
	// The level of security applied during card processing.
	CardSecurity *ListCustomerPaymentsCardSecurity `json:"cardSecurity,omitempty"`
	// The applicable card fee region.
	FeeRegion *ListCustomerPaymentsFeeRegion `json:"feeRegion,omitempty"`
	// The first 6 and last 4 digits of the card number.
	CardMaskedNumber *string `json:"cardMaskedNumber,omitempty"`
	// The outcome of authentication attempted on transactions enforced by 3DS (ie valid only for oneoff and first).
	Card3dsEci *string `json:"card3dsEci,omitempty"`
	// The first 6 digit of the card bank identification number.
	CardBin *string `json:"cardBin,omitempty"`
	// The issuer of the Card.
	CardIssuer *string `json:"cardIssuer,omitempty"`
	// A failure code to help understand why the payment failed.
	FailureReason *ListCustomerPaymentsFailureReason `json:"failureReason,omitempty"`
	// A human-friendly failure message that can be shown to the customer. The message is translated in accordance
	// with the payment's locale setting.
	FailureMessage *string `json:"failureMessage,omitempty"`
	// The wallet used when creating the payment.
	Wallet *ListCustomerPaymentsWallet `json:"wallet,omitempty"`
	// PayPal's reference for the payment.
	PaypalReference *string `json:"paypalReference,omitempty"`
	// ID of the customer's PayPal account.
	PaypalPayerID *string `json:"paypalPayerId,omitempty"`
	// Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
	// payments, and if the information is made available by PayPal.
	SellerProtection *ListCustomerPaymentsSellerProtection `json:"sellerProtection,omitempty"`
	// An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
	// PayPal will not charge a fee for this transaction.
	PaypalFee *ListCustomerPaymentsPaypalFee `json:"paypalFee,omitempty"`
	// The paysafecard customer reference either provided via the API or otherwise auto-generated by Mollie.
	CustomerReference *string `json:"customerReference,omitempty"`
	// The ID of the terminal device where the payment took place on.
	TerminalID *string `json:"terminalId,omitempty"`
	// The first 6 digits & last 4 digits of the customer's masked card number.
	MaskedNumber *string `json:"maskedNumber,omitempty"`
	// The Point of sale receipt object.
	Receipt *ListCustomerPaymentsReceipt `json:"receipt,omitempty"`
	// The creditor identifier indicates who is authorized to execute the payment. In this case, it is a
	// reference to Mollie.
	CreditorIdentifier *string `json:"creditorIdentifier,omitempty"`
	// Estimated date the payment is debited from the customer's bank account, in YYYY-MM-DD format.
	DueDate *types.Date `json:"dueDate,omitempty"`
	// Date the payment has been signed by the customer, in YYYY-MM-DD format. Only available if the payment
	// has been signed.
	SignatureDate *types.Date `json:"signatureDate,omitempty"`
	// The official reason why this payment has failed. A detailed description of each reason is available on the
	// website of the European Payments Council.
	BankReasonCode *string `json:"bankReasonCode,omitempty"`
	// A human-friendly description of the failure reason.
	BankReason *string `json:"bankReason,omitempty"`
	// The end-to-end identifier you provided in the batch file.
	EndToEndIdentifier *string `json:"endToEndIdentifier,omitempty"`
	// The mandate reference you provided in the batch file.
	MandateReference *string `json:"mandateReference,omitempty"`
	// The batch reference you provided in the batch file.
	BatchReference *string `json:"batchReference,omitempty"`
	// The file reference you provided in the batch file.
	FileReference *string `json:"fileReference,omitempty"`
	// Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
	// the QR code details will be available in this object.
	//
	// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
	// Bancontact QR payments can be completed by the customer using the Bancontact app.
	QrCode *ListCustomerPaymentsQrCode `json:"qrCode,omitempty"`
	// For payments with gift cards: the masked gift card number of the first gift card applied to the payment.
	VoucherNumber *string `json:"voucherNumber,omitempty"`
	// An array of detail objects for each gift card that was used on this payment, if any.
	Giftcards []map[string]any `json:"giftcards,omitempty"`
	// For payments with vouchers: the brand name of the first voucher applied.
	Issuer *string `json:"issuer,omitempty"`
	// An array of detail objects for each voucher that was used on this payment, if any.
	Vouchers []map[string]any `json:"vouchers,omitempty"`
	// An amount object for the amount that remained after all gift cards or vouchers were applied.
	RemainderAmount *ListCustomerPaymentsRemainderAmount `json:"remainderAmount,omitempty"`
	// The payment method used to pay the remainder amount, after all gift cards or vouchers were applied.
	RemainderMethod *string `json:"remainderMethod,omitempty"`
	// Optional include. The full payment method details of the remainder payment.
	RemainderDetails map[string]any `json:"remainderDetails,omitempty"`
}

func (l ListCustomerPaymentsDetails) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerPaymentsDetails) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerPaymentsDetails) GetConsumerName() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerName
}

func (o *ListCustomerPaymentsDetails) GetConsumerAccount() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerAccount
}

func (o *ListCustomerPaymentsDetails) GetConsumerBic() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerBic
}

func (o *ListCustomerPaymentsDetails) GetShippingAddress() map[string]any {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *ListCustomerPaymentsDetails) GetCardNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardNumber
}

func (o *ListCustomerPaymentsDetails) GetBankName() *string {
	if o == nil {
		return nil
	}
	return o.BankName
}

func (o *ListCustomerPaymentsDetails) GetBankAccount() *string {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *ListCustomerPaymentsDetails) GetBankBic() *string {
	if o == nil {
		return nil
	}
	return o.BankBic
}

func (o *ListCustomerPaymentsDetails) GetTransferReference() *string {
	if o == nil {
		return nil
	}
	return o.TransferReference
}

func (o *ListCustomerPaymentsDetails) GetCardFingerprint() *string {
	if o == nil {
		return nil
	}
	return o.CardFingerprint
}

func (o *ListCustomerPaymentsDetails) GetCardHolder() *string {
	if o == nil {
		return nil
	}
	return o.CardHolder
}

func (o *ListCustomerPaymentsDetails) GetCardAudition() *ListCustomerPaymentsCardAudition {
	if o == nil {
		return nil
	}
	return o.CardAudition
}

func (o *ListCustomerPaymentsDetails) GetCardLabel() *ListCustomerPaymentsCardLabel {
	if o == nil {
		return nil
	}
	return o.CardLabel
}

func (o *ListCustomerPaymentsDetails) GetCardCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CardCountryCode
}

func (o *ListCustomerPaymentsDetails) GetCardExpiryDate() *string {
	if o == nil {
		return nil
	}
	return o.CardExpiryDate
}

func (o *ListCustomerPaymentsDetails) GetCardFunding() *ListCustomerPaymentsCardFunding {
	if o == nil {
		return nil
	}
	return o.CardFunding
}

func (o *ListCustomerPaymentsDetails) GetCardSecurity() *ListCustomerPaymentsCardSecurity {
	if o == nil {
		return nil
	}
	return o.CardSecurity
}

func (o *ListCustomerPaymentsDetails) GetFeeRegion() *ListCustomerPaymentsFeeRegion {
	if o == nil {
		return nil
	}
	return o.FeeRegion
}

func (o *ListCustomerPaymentsDetails) GetCardMaskedNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardMaskedNumber
}

func (o *ListCustomerPaymentsDetails) GetCard3dsEci() *string {
	if o == nil {
		return nil
	}
	return o.Card3dsEci
}

func (o *ListCustomerPaymentsDetails) GetCardBin() *string {
	if o == nil {
		return nil
	}
	return o.CardBin
}

func (o *ListCustomerPaymentsDetails) GetCardIssuer() *string {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *ListCustomerPaymentsDetails) GetFailureReason() *ListCustomerPaymentsFailureReason {
	if o == nil {
		return nil
	}
	return o.FailureReason
}

func (o *ListCustomerPaymentsDetails) GetFailureMessage() *string {
	if o == nil {
		return nil
	}
	return o.FailureMessage
}

func (o *ListCustomerPaymentsDetails) GetWallet() *ListCustomerPaymentsWallet {
	if o == nil {
		return nil
	}
	return o.Wallet
}

func (o *ListCustomerPaymentsDetails) GetPaypalReference() *string {
	if o == nil {
		return nil
	}
	return o.PaypalReference
}

func (o *ListCustomerPaymentsDetails) GetPaypalPayerID() *string {
	if o == nil {
		return nil
	}
	return o.PaypalPayerID
}

func (o *ListCustomerPaymentsDetails) GetSellerProtection() *ListCustomerPaymentsSellerProtection {
	if o == nil {
		return nil
	}
	return o.SellerProtection
}

func (o *ListCustomerPaymentsDetails) GetPaypalFee() *ListCustomerPaymentsPaypalFee {
	if o == nil {
		return nil
	}
	return o.PaypalFee
}

func (o *ListCustomerPaymentsDetails) GetCustomerReference() *string {
	if o == nil {
		return nil
	}
	return o.CustomerReference
}

func (o *ListCustomerPaymentsDetails) GetTerminalID() *string {
	if o == nil {
		return nil
	}
	return o.TerminalID
}

func (o *ListCustomerPaymentsDetails) GetMaskedNumber() *string {
	if o == nil {
		return nil
	}
	return o.MaskedNumber
}

func (o *ListCustomerPaymentsDetails) GetReceipt() *ListCustomerPaymentsReceipt {
	if o == nil {
		return nil
	}
	return o.Receipt
}

func (o *ListCustomerPaymentsDetails) GetCreditorIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.CreditorIdentifier
}

func (o *ListCustomerPaymentsDetails) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *ListCustomerPaymentsDetails) GetSignatureDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.SignatureDate
}

func (o *ListCustomerPaymentsDetails) GetBankReasonCode() *string {
	if o == nil {
		return nil
	}
	return o.BankReasonCode
}

func (o *ListCustomerPaymentsDetails) GetBankReason() *string {
	if o == nil {
		return nil
	}
	return o.BankReason
}

func (o *ListCustomerPaymentsDetails) GetEndToEndIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.EndToEndIdentifier
}

func (o *ListCustomerPaymentsDetails) GetMandateReference() *string {
	if o == nil {
		return nil
	}
	return o.MandateReference
}

func (o *ListCustomerPaymentsDetails) GetBatchReference() *string {
	if o == nil {
		return nil
	}
	return o.BatchReference
}

func (o *ListCustomerPaymentsDetails) GetFileReference() *string {
	if o == nil {
		return nil
	}
	return o.FileReference
}

func (o *ListCustomerPaymentsDetails) GetQrCode() *ListCustomerPaymentsQrCode {
	if o == nil {
		return nil
	}
	return o.QrCode
}

func (o *ListCustomerPaymentsDetails) GetVoucherNumber() *string {
	if o == nil {
		return nil
	}
	return o.VoucherNumber
}

func (o *ListCustomerPaymentsDetails) GetGiftcards() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Giftcards
}

func (o *ListCustomerPaymentsDetails) GetIssuer() *string {
	if o == nil {
		return nil
	}
	return o.Issuer
}

func (o *ListCustomerPaymentsDetails) GetVouchers() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Vouchers
}

func (o *ListCustomerPaymentsDetails) GetRemainderAmount() *ListCustomerPaymentsRemainderAmount {
	if o == nil {
		return nil
	}
	return o.RemainderAmount
}

func (o *ListCustomerPaymentsDetails) GetRemainderMethod() *string {
	if o == nil {
		return nil
	}
	return o.RemainderMethod
}

func (o *ListCustomerPaymentsDetails) GetRemainderDetails() map[string]any {
	if o == nil {
		return nil
	}
	return o.RemainderDetails
}

// ListCustomerPaymentsPaymentSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListCustomerPaymentsPaymentSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsPaymentSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsPaymentSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsCheckout - The URL your customer should visit to make the payment. This is where you should redirect the customer to.
type ListCustomerPaymentsCheckout struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsCheckout) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsCheckout) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsMobileAppCheckout - The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
type ListCustomerPaymentsMobileAppCheckout struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsMobileAppCheckout) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsMobileAppCheckout) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsChangePaymentState - For test mode payments in certain scenarios, a hosted interface is available to help you test different
// payment states.
//
// Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
// payments are executed without any user interaction.
//
// Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
// chargeback for the test payment.
type ListCustomerPaymentsChangePaymentState struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsChangePaymentState) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsChangePaymentState) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsDashboard - Direct link to the payment in the Mollie Dashboard.
type ListCustomerPaymentsDashboard struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsDashboard) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsDashboard) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsRefunds - The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
type ListCustomerPaymentsRefunds struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsRefunds) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsRefunds) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsChargebacks - The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
// payment.
type ListCustomerPaymentsChargebacks struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsChargebacks) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsChargebacks) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsCaptures - The API resource URL of the [captures](list-payment-captures) that belong to this payment.
type ListCustomerPaymentsCaptures struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsCaptures) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsCaptures) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsSettlement - The API resource URL of the [settlement](get-settlement) this payment has been settled with.
// Not present if not yet settled.
type ListCustomerPaymentsSettlement struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsSettlement) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsSettlement) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsCustomer - The API resource URL of the [customer](get-customer).
type ListCustomerPaymentsCustomer struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsCustomer) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsCustomer) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsMandate - The API resource URL of the [mandate](get-mandate).
type ListCustomerPaymentsMandate struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsMandate) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsMandate) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsSubscription - The API resource URL of the [subscription](get-subscription).
type ListCustomerPaymentsSubscription struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsSubscription) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsSubscription) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsOrder - The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
// order.
type ListCustomerPaymentsOrder struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsOrder) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsOrder) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsTerminal - The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
// point-of-sale payments.
type ListCustomerPaymentsTerminal struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsTerminal) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsTerminal) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsPaymentDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListCustomerPaymentsPaymentDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsPaymentDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsPaymentDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsLinksStatus - Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
// successful).
type ListCustomerPaymentsLinksStatus struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsLinksStatus) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsLinksStatus) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsPayOnline - Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
// bank transfer.
type ListCustomerPaymentsPayOnline struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsPayOnline) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsPayOnline) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsPaymentLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type ListCustomerPaymentsPaymentLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self ListCustomerPaymentsPaymentSelf `json:"self"`
	// The URL your customer should visit to make the payment. This is where you should redirect the customer to.
	Checkout *ListCustomerPaymentsCheckout `json:"checkout,omitempty"`
	// The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
	MobileAppCheckout *ListCustomerPaymentsMobileAppCheckout `json:"mobileAppCheckout,omitempty"`
	// For test mode payments in certain scenarios, a hosted interface is available to help you test different
	// payment states.
	//
	// Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
	// payments are executed without any user interaction.
	//
	// Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
	// chargeback for the test payment.
	ChangePaymentState *ListCustomerPaymentsChangePaymentState `json:"changePaymentState,omitempty"`
	// Direct link to the payment in the Mollie Dashboard.
	Dashboard ListCustomerPaymentsDashboard `json:"dashboard"`
	// The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
	Refunds *ListCustomerPaymentsRefunds `json:"refunds,omitempty"`
	// The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
	// payment.
	Chargebacks *ListCustomerPaymentsChargebacks `json:"chargebacks,omitempty"`
	// The API resource URL of the [captures](list-payment-captures) that belong to this payment.
	Captures *ListCustomerPaymentsCaptures `json:"captures,omitempty"`
	// The API resource URL of the [settlement](get-settlement) this payment has been settled with.
	// Not present if not yet settled.
	Settlement *ListCustomerPaymentsSettlement `json:"settlement,omitempty"`
	// The API resource URL of the [customer](get-customer).
	Customer *ListCustomerPaymentsCustomer `json:"customer,omitempty"`
	// The API resource URL of the [mandate](get-mandate).
	Mandate *ListCustomerPaymentsMandate `json:"mandate,omitempty"`
	// The API resource URL of the [subscription](get-subscription).
	Subscription *ListCustomerPaymentsSubscription `json:"subscription,omitempty"`
	// The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
	// order.
	Order *ListCustomerPaymentsOrder `json:"order,omitempty"`
	// The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
	// point-of-sale payments.
	Terminal *ListCustomerPaymentsTerminal `json:"terminal,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *ListCustomerPaymentsPaymentDocumentation `json:"documentation,omitempty"`
	// Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
	// successful).
	Status *ListCustomerPaymentsLinksStatus `json:"status,omitempty"`
	// Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
	// bank transfer.
	PayOnline *ListCustomerPaymentsPayOnline `json:"payOnline,omitempty"`
}

func (o *ListCustomerPaymentsPaymentLinks) GetSelf() ListCustomerPaymentsPaymentSelf {
	if o == nil {
		return ListCustomerPaymentsPaymentSelf{}
	}
	return o.Self
}

func (o *ListCustomerPaymentsPaymentLinks) GetCheckout() *ListCustomerPaymentsCheckout {
	if o == nil {
		return nil
	}
	return o.Checkout
}

func (o *ListCustomerPaymentsPaymentLinks) GetMobileAppCheckout() *ListCustomerPaymentsMobileAppCheckout {
	if o == nil {
		return nil
	}
	return o.MobileAppCheckout
}

func (o *ListCustomerPaymentsPaymentLinks) GetChangePaymentState() *ListCustomerPaymentsChangePaymentState {
	if o == nil {
		return nil
	}
	return o.ChangePaymentState
}

func (o *ListCustomerPaymentsPaymentLinks) GetDashboard() ListCustomerPaymentsDashboard {
	if o == nil {
		return ListCustomerPaymentsDashboard{}
	}
	return o.Dashboard
}

func (o *ListCustomerPaymentsPaymentLinks) GetRefunds() *ListCustomerPaymentsRefunds {
	if o == nil {
		return nil
	}
	return o.Refunds
}

func (o *ListCustomerPaymentsPaymentLinks) GetChargebacks() *ListCustomerPaymentsChargebacks {
	if o == nil {
		return nil
	}
	return o.Chargebacks
}

func (o *ListCustomerPaymentsPaymentLinks) GetCaptures() *ListCustomerPaymentsCaptures {
	if o == nil {
		return nil
	}
	return o.Captures
}

func (o *ListCustomerPaymentsPaymentLinks) GetSettlement() *ListCustomerPaymentsSettlement {
	if o == nil {
		return nil
	}
	return o.Settlement
}

func (o *ListCustomerPaymentsPaymentLinks) GetCustomer() *ListCustomerPaymentsCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *ListCustomerPaymentsPaymentLinks) GetMandate() *ListCustomerPaymentsMandate {
	if o == nil {
		return nil
	}
	return o.Mandate
}

func (o *ListCustomerPaymentsPaymentLinks) GetSubscription() *ListCustomerPaymentsSubscription {
	if o == nil {
		return nil
	}
	return o.Subscription
}

func (o *ListCustomerPaymentsPaymentLinks) GetOrder() *ListCustomerPaymentsOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListCustomerPaymentsPaymentLinks) GetTerminal() *ListCustomerPaymentsTerminal {
	if o == nil {
		return nil
	}
	return o.Terminal
}

func (o *ListCustomerPaymentsPaymentLinks) GetDocumentation() *ListCustomerPaymentsPaymentDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

func (o *ListCustomerPaymentsPaymentLinks) GetStatus() *ListCustomerPaymentsLinksStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListCustomerPaymentsPaymentLinks) GetPayOnline() *ListCustomerPaymentsPayOnline {
	if o == nil {
		return nil
	}
	return o.PayOnline
}

type ListCustomerPaymentsPaymentOutput struct {
	// Indicates the response contains a payment object. Will always contain the string `payment` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this payment. Mollie assigns this identifier at payment creation time. Mollie
	// will always refer to the payment by this ID. Example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode ListCustomerPaymentsMode `json:"mode"`
	// The description of the payment. This will be shown to your customer on their card or bank statement when possible.
	// We truncate the description automatically according to the limits of the used payment method. The description is
	// also visible in any exports you generate.
	//
	// We recommend you use a unique identifier so that you can always link the payment to the order in your back office.
	// This is particularly useful for bookkeeping.
	//
	// The maximum length of the description field differs per payment method, with the absolute maximum being 255
	// characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
	Description string `json:"description"`
	// The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge â‚¬1000.00.
	//
	// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
	// retrieved using the Get method endpoint.
	//
	// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
	// tip amount.
	Amount ListCustomerPaymentsAmount `json:"amount"`
	// The total amount that is already refunded. Only available when refunds are available for this payment. For some
	// payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
	// costs for a return shipment to the customer.
	AmountRefunded *ListCustomerPaymentsAmountRefunded `json:"amountRefunded,omitempty"`
	// The remaining amount that can be refunded. Only available when refunds are available for this payment.
	AmountRemaining *ListCustomerPaymentsAmountRemaining `json:"amountRemaining,omitempty"`
	// The total amount that is already captured for this payment. Only available when this payment supports captures.
	AmountCaptured *ListCustomerPaymentsAmountCaptured `json:"amountCaptured,omitempty"`
	// The total amount that was charged back for this payment. Only available when the total charged back amount is not
	// zero.
	AmountChargedBack *ListCustomerPaymentsAmountChargedBack `json:"amountChargedBack,omitempty"`
	// This optional field will contain the approximate amount that will be settled to your account, converted to the
	// currency your account is settled in.
	//
	// Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
	// settled by Mollie the `settlementAmount` is omitted from the response.
	//
	// Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
	// using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
	SettlementAmount *ListCustomerPaymentsSettlementAmount `json:"settlementAmount,omitempty"`
	// The URL your customer will be redirected to after the payment process.
	//
	// It could make sense for the redirectUrl to contain a unique identifier â€“ like your order ID â€“ so you can show the
	// right page referencing the order when your customer returns.
	//
	// The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for
	// Apple Pay payments with an `applePayPaymentToken`.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not
	// provided, the customer will be redirected to the `redirectUrl` instead â€” see above.
	//
	// Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is
	// therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle
	// payment cancellations.
	CancelURL *string `json:"cancelUrl,omitempty"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines []ListCustomerPaymentsLine `json:"lines,omitempty"`
	// The customer's billing address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	//
	// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
	BillingAddress *ListCustomerPaymentsBillingAddress `json:"billingAddress,omitempty"`
	// The customer's shipping address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	ShippingAddress *ListCustomerPaymentsShippingAddress `json:"shippingAddress,omitempty"`
	// Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
	// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
	// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
	// locale, but our hosted payment pages currently only support the specified languages.
	//
	// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
	// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
	// customer use a local bank account greatly increases the conversion and speed of payment.
	Locale *ListCustomerPaymentsLocale `json:"locale,omitempty"`
	// This optional field contains your customer's ISO 3166-1 alpha-2 country code, detected by us during checkout. This
	// field is omitted if the country code was not detected.
	CountryCode *string `json:"countryCode,omitempty"`
	// The payment method used for this transaction. If a specific method was selected during payment initialization,
	// this field reflects that choice.
	Method *ListCustomerPaymentsMethod `json:"method,omitempty"`
	// For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT
	// rates you have used for the order to ensure your customer's country matches the VAT country.
	//
	// Use this parameter to restrict the payment methods available to your customer to those from a single country.
	//
	// If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
	//
	// The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
	RestrictPaymentMethodsToCountry *string `json:"restrictPaymentMethodsToCountry,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *ListCustomerPaymentsMetadata `json:"metadata,omitempty"`
	// Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
	// and capture at a later time.
	//
	// This field needs to be set to `manual` for method `riverty`.
	CaptureMode *ListCustomerPaymentsCaptureMode `json:"captureMode,omitempty"`
	// **Only relevant if you wish to manage authorization and capturing separately.**
	//
	// Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a
	// later point either be 'captured' or canceled.
	//
	// By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a
	// capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For
	// example `8 hours` or `2 days`.
	//
	// To schedule an automatic capture, the `captureMode` must be set to `automatic`.
	//
	// The maximum delay is 7 days (168 hours).
	//
	// Possible values: `... hours` `... days`
	CaptureDelay *string `json:"captureDelay,omitempty"`
	// Indicates the date before which the payment needs to be captured, in ISO 8601 format. From this date onwards we
	// can no longer guarantee a successful capture. The parameter is omitted if the payment is not authorized (yet).
	CaptureBefore *string `json:"captureBefore,omitempty"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	//
	// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
	// `routing` parameter.
	ApplicationFee *ListCustomerPaymentsApplicationFee `json:"applicationFee,omitempty"`
	// *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
	//
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you create payments on your own account that you want to split between yourself and one or more connected
	// merchants, you can use this `routing` parameter to route the payment accordingly.
	//
	// The `routing` parameter should contain an array of objects, with each object describing the destination for a
	// specific portion of the payment.
	//
	// It is not necessary to indicate in the array which portion goes to yourself. After all portions of the total
	// payment amount have been routed, the amount left will be routed to the current organization automatically.
	//
	// If instead you use OAuth to create payments on a connected merchant's account, refer to the `applicationFee`
	// parameter.
	Routing []ListCustomerPaymentsRouting `json:"routing,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// Indicate which part of a recurring sequence this payment is for.
	//
	// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
	// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
	// on their account in the future.
	//
	// If set to `recurring`, the customer's card is charged automatically.
	//
	// Defaults to `oneoff`, which is a regular non-recurring payment.
	//
	// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
	// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
	// are set up correctly for recurring payments.
	SequenceType *ListCustomerPaymentsSequenceType `json:"sequenceType"`
	// If the payment was automatically created via a subscription, the ID of the [subscription](get-subscription) will
	// be added to the response.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// When creating recurring payments, the ID of a specific [mandate](get-mandate) can be supplied to indicate which of
	// the customer's accounts should be credited.
	MandateID *string `json:"mandateId,omitempty"`
	// The ID of the [customer](get-customer) the payment is being created for. This is used primarily for recurring
	// payments, but can also be used on regular payments to enable single-click payments.
	//
	// If `sequenceType` is set to `recurring`, this field is required.
	CustomerID *string `json:"customerId,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// When using an API Key, the `profileId` can be omitted since it is linked to the key. However, for OAuth and
	// Organization tokens, the `profileId` is required.
	//
	// For more information, see [Authentication](authentication).
	ProfileID string `json:"profileId"`
	// The identifier referring to the [settlement](get-settlement) this payment was settled with.
	SettlementID *string `json:"settlementId,omitempty"`
	// If the payment was created for an [order](get-order), the ID of that order will be part of the response.
	OrderID *string `json:"orderId,omitempty"`
	// The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
	// statuses occur at what point.
	Status ListCustomerPaymentsStatusEnum `json:"status"`
	// This object offers details about the status of a payment. Currently it is only available for point-of-sale
	// payments.
	//
	// You can find more information about the possible values of this object on
	// [this page](status-reasons).**
	StatusReason *ListCustomerPaymentsStatusReason `json:"statusReason,omitempty"`
	// Whether the payment can be canceled. This parameter is omitted if the payment reaches a final state.
	IsCancelable *bool `json:"isCancelable,omitempty"`
	// An object containing payment details collected during the payment process. For example, details may include the
	// customer's card or bank details and a payment reference. For the full list of details, please refer to the
	// [method-specific parameters](extra-payment-parameters) guide.
	Details *ListCustomerPaymentsDetails `json:"details,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The date and time the payment became authorized, in ISO 8601 format. This parameter is omitted if the payment is
	// not authorized (yet).
	AuthorizedAt *string `json:"authorizedAt,omitempty"`
	// The date and time the payment became paid, in ISO 8601 format. This parameter is omitted if the payment is not
	// completed (yet).
	PaidAt *string `json:"paidAt,omitempty"`
	// The date and time the payment was canceled, in ISO 8601 format. This parameter is omitted if the payment is not
	// canceled (yet).
	CanceledAt *string `json:"canceledAt,omitempty"`
	// The date and time the payment will expire, in ISO 8601 format. This parameter is omitted if the payment can no
	// longer expire.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The date and time the payment was expired, in ISO 8601 format. This parameter is omitted if the payment did not
	// expire (yet).
	ExpiredAt *string `json:"expiredAt,omitempty"`
	// The date and time the payment failed, in ISO 8601 format. This parameter is omitted if the payment did not fail
	// (yet).
	FailedAt *string `json:"failedAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links ListCustomerPaymentsPaymentLinks `json:"_links"`
}

func (o *ListCustomerPaymentsPaymentOutput) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *ListCustomerPaymentsPaymentOutput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListCustomerPaymentsPaymentOutput) GetMode() ListCustomerPaymentsMode {
	if o == nil {
		return ListCustomerPaymentsMode("")
	}
	return o.Mode
}

func (o *ListCustomerPaymentsPaymentOutput) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *ListCustomerPaymentsPaymentOutput) GetAmount() ListCustomerPaymentsAmount {
	if o == nil {
		return ListCustomerPaymentsAmount{}
	}
	return o.Amount
}

func (o *ListCustomerPaymentsPaymentOutput) GetAmountRefunded() *ListCustomerPaymentsAmountRefunded {
	if o == nil {
		return nil
	}
	return o.AmountRefunded
}

func (o *ListCustomerPaymentsPaymentOutput) GetAmountRemaining() *ListCustomerPaymentsAmountRemaining {
	if o == nil {
		return nil
	}
	return o.AmountRemaining
}

func (o *ListCustomerPaymentsPaymentOutput) GetAmountCaptured() *ListCustomerPaymentsAmountCaptured {
	if o == nil {
		return nil
	}
	return o.AmountCaptured
}

func (o *ListCustomerPaymentsPaymentOutput) GetAmountChargedBack() *ListCustomerPaymentsAmountChargedBack {
	if o == nil {
		return nil
	}
	return o.AmountChargedBack
}

func (o *ListCustomerPaymentsPaymentOutput) GetSettlementAmount() *ListCustomerPaymentsSettlementAmount {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *ListCustomerPaymentsPaymentOutput) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *ListCustomerPaymentsPaymentOutput) GetCancelURL() *string {
	if o == nil {
		return nil
	}
	return o.CancelURL
}

func (o *ListCustomerPaymentsPaymentOutput) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *ListCustomerPaymentsPaymentOutput) GetLines() []ListCustomerPaymentsLine {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *ListCustomerPaymentsPaymentOutput) GetBillingAddress() *ListCustomerPaymentsBillingAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *ListCustomerPaymentsPaymentOutput) GetShippingAddress() *ListCustomerPaymentsShippingAddress {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *ListCustomerPaymentsPaymentOutput) GetLocale() *ListCustomerPaymentsLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *ListCustomerPaymentsPaymentOutput) GetCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CountryCode
}

func (o *ListCustomerPaymentsPaymentOutput) GetMethod() *ListCustomerPaymentsMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *ListCustomerPaymentsPaymentOutput) GetRestrictPaymentMethodsToCountry() *string {
	if o == nil {
		return nil
	}
	return o.RestrictPaymentMethodsToCountry
}

func (o *ListCustomerPaymentsPaymentOutput) GetMetadata() *ListCustomerPaymentsMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ListCustomerPaymentsPaymentOutput) GetCaptureMode() *ListCustomerPaymentsCaptureMode {
	if o == nil {
		return nil
	}
	return o.CaptureMode
}

func (o *ListCustomerPaymentsPaymentOutput) GetCaptureDelay() *string {
	if o == nil {
		return nil
	}
	return o.CaptureDelay
}

func (o *ListCustomerPaymentsPaymentOutput) GetCaptureBefore() *string {
	if o == nil {
		return nil
	}
	return o.CaptureBefore
}

func (o *ListCustomerPaymentsPaymentOutput) GetApplicationFee() *ListCustomerPaymentsApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *ListCustomerPaymentsPaymentOutput) GetRouting() []ListCustomerPaymentsRouting {
	if o == nil {
		return nil
	}
	return o.Routing
}

func (o *ListCustomerPaymentsPaymentOutput) GetSequenceType() *ListCustomerPaymentsSequenceType {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *ListCustomerPaymentsPaymentOutput) GetSubscriptionID() *string {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

func (o *ListCustomerPaymentsPaymentOutput) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *ListCustomerPaymentsPaymentOutput) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *ListCustomerPaymentsPaymentOutput) GetProfileID() string {
	if o == nil {
		return ""
	}
	return o.ProfileID
}

func (o *ListCustomerPaymentsPaymentOutput) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *ListCustomerPaymentsPaymentOutput) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *ListCustomerPaymentsPaymentOutput) GetStatus() ListCustomerPaymentsStatusEnum {
	if o == nil {
		return ListCustomerPaymentsStatusEnum("")
	}
	return o.Status
}

func (o *ListCustomerPaymentsPaymentOutput) GetStatusReason() *ListCustomerPaymentsStatusReason {
	if o == nil {
		return nil
	}
	return o.StatusReason
}

func (o *ListCustomerPaymentsPaymentOutput) GetIsCancelable() *bool {
	if o == nil {
		return nil
	}
	return o.IsCancelable
}

func (o *ListCustomerPaymentsPaymentOutput) GetDetails() *ListCustomerPaymentsDetails {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *ListCustomerPaymentsPaymentOutput) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListCustomerPaymentsPaymentOutput) GetAuthorizedAt() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizedAt
}

func (o *ListCustomerPaymentsPaymentOutput) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *ListCustomerPaymentsPaymentOutput) GetCanceledAt() *string {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *ListCustomerPaymentsPaymentOutput) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *ListCustomerPaymentsPaymentOutput) GetExpiredAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredAt
}

func (o *ListCustomerPaymentsPaymentOutput) GetFailedAt() *string {
	if o == nil {
		return nil
	}
	return o.FailedAt
}

func (o *ListCustomerPaymentsPaymentOutput) GetLinks() ListCustomerPaymentsPaymentLinks {
	if o == nil {
		return ListCustomerPaymentsPaymentLinks{}
	}
	return o.Links
}

type ListCustomerPaymentsEmbedded struct {
	// An array of payment objects.
	Payments []ListCustomerPaymentsPaymentOutput `json:"payments,omitempty"`
}

func (o *ListCustomerPaymentsEmbedded) GetPayments() []ListCustomerPaymentsPaymentOutput {
	if o == nil {
		return nil
	}
	return o.Payments
}

// ListCustomerPaymentsSelf - The URL to the current set of items.
type ListCustomerPaymentsSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsPrevious - The previous set of items, if available.
type ListCustomerPaymentsPrevious struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListCustomerPaymentsPrevious) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListCustomerPaymentsPrevious) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListCustomerPaymentsNext - The next set of items, if available.
type ListCustomerPaymentsNext struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListCustomerPaymentsNext) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListCustomerPaymentsNext) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListCustomerPaymentsDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListCustomerPaymentsDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListCustomerPaymentsDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListCustomerPaymentsDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListCustomerPaymentsLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
type ListCustomerPaymentsLinks struct {
	// The URL to the current set of items.
	Self ListCustomerPaymentsSelf `json:"self"`
	// The previous set of items, if available.
	Previous *ListCustomerPaymentsPrevious `json:"previous"`
	// The next set of items, if available.
	Next *ListCustomerPaymentsNext `json:"next"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListCustomerPaymentsDocumentation `json:"documentation"`
}

func (o *ListCustomerPaymentsLinks) GetSelf() ListCustomerPaymentsSelf {
	if o == nil {
		return ListCustomerPaymentsSelf{}
	}
	return o.Self
}

func (o *ListCustomerPaymentsLinks) GetPrevious() *ListCustomerPaymentsPrevious {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *ListCustomerPaymentsLinks) GetNext() *ListCustomerPaymentsNext {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListCustomerPaymentsLinks) GetDocumentation() ListCustomerPaymentsDocumentation {
	if o == nil {
		return ListCustomerPaymentsDocumentation{}
	}
	return o.Documentation
}

// ListCustomerPaymentsResponseBody - A list of payment objects.
type ListCustomerPaymentsResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    int64                        `json:"count"`
	Embedded ListCustomerPaymentsEmbedded `json:"_embedded"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links ListCustomerPaymentsLinks `json:"_links"`
}

func (o *ListCustomerPaymentsResponseBody) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListCustomerPaymentsResponseBody) GetEmbedded() ListCustomerPaymentsEmbedded {
	if o == nil {
		return ListCustomerPaymentsEmbedded{}
	}
	return o.Embedded
}

func (o *ListCustomerPaymentsResponseBody) GetLinks() ListCustomerPaymentsLinks {
	if o == nil {
		return ListCustomerPaymentsLinks{}
	}
	return o.Links
}

type ListCustomerPaymentsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of payment objects.
	Object *ListCustomerPaymentsResponseBody
}

func (o *ListCustomerPaymentsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListCustomerPaymentsResponse) GetObject() *ListCustomerPaymentsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
