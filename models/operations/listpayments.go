// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
	"github.com/mollie/mollie-api-golang/types"
)

// ListPaymentsSort - Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
// newest to oldest.
type ListPaymentsSort string

const (
	ListPaymentsSortAsc  ListPaymentsSort = "asc"
	ListPaymentsSortDesc ListPaymentsSort = "desc"
)

func (e ListPaymentsSort) ToPointer() *ListPaymentsSort {
	return &e
}
func (e *ListPaymentsSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = ListPaymentsSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPaymentsSort: %v", v)
	}
}

type ListPaymentsRequest struct {
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate
	// the result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
	// newest to oldest.
	Sort *ListPaymentsSort `queryParam:"style=form,explode=true,name=sort"`
	// The identifier referring to the [profile](get-profile) you wish to
	// retrieve the resources for.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
	// organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
	ProfileID *string `queryParam:"style=form,explode=true,name=profileId"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *ListPaymentsRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListPaymentsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListPaymentsRequest) GetSort() *ListPaymentsSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListPaymentsRequest) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *ListPaymentsRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// ListPaymentsBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type ListPaymentsBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListPaymentsBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListPaymentsBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListPaymentsBadRequestDocumentation `json:"documentation"`
}

func (o *ListPaymentsBadRequestLinks) GetDocumentation() ListPaymentsBadRequestDocumentation {
	if o == nil {
		return ListPaymentsBadRequestDocumentation{}
	}
	return o.Documentation
}

// ListPaymentsMode - Whether this entity was created in live mode or in test mode.
type ListPaymentsMode string

const (
	ListPaymentsModeLive ListPaymentsMode = "live"
	ListPaymentsModeTest ListPaymentsMode = "test"
)

func (e ListPaymentsMode) ToPointer() *ListPaymentsMode {
	return &e
}

// ListPaymentsAmount - The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
//
// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
// retrieved using the Get method endpoint.
//
// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
// tip amount.
type ListPaymentsAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentsAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentsAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentsAmountRefunded - The total amount that is already refunded. Only available when refunds are available for this payment. For some
// payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
// costs for a return shipment to the customer.
type ListPaymentsAmountRefunded struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentsAmountRefunded) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentsAmountRefunded) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentsAmountRemaining - The remaining amount that can be refunded. Only available when refunds are available for this payment.
type ListPaymentsAmountRemaining struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentsAmountRemaining) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentsAmountRemaining) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentsAmountCaptured - The total amount that is already captured for this payment. Only available when this payment supports captures.
type ListPaymentsAmountCaptured struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentsAmountCaptured) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentsAmountCaptured) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentsAmountChargedBack - The total amount that was charged back for this payment. Only available when the total charged back amount is not
// zero.
type ListPaymentsAmountChargedBack struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentsAmountChargedBack) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentsAmountChargedBack) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentsSettlementAmount - This optional field will contain the approximate amount that will be settled to your account, converted to the
// currency your account is settled in.
//
// Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
// settled by Mollie the `settlementAmount` is omitted from the response.
//
// Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
// using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
type ListPaymentsSettlementAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentsSettlementAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentsSettlementAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentsLineType - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type ListPaymentsLineType string

const (
	ListPaymentsLineTypePhysical    ListPaymentsLineType = "physical"
	ListPaymentsLineTypeDigital     ListPaymentsLineType = "digital"
	ListPaymentsLineTypeShippingFee ListPaymentsLineType = "shipping_fee"
	ListPaymentsLineTypeDiscount    ListPaymentsLineType = "discount"
	ListPaymentsLineTypeStoreCredit ListPaymentsLineType = "store_credit"
	ListPaymentsLineTypeGiftCard    ListPaymentsLineType = "gift_card"
	ListPaymentsLineTypeSurcharge   ListPaymentsLineType = "surcharge"
	ListPaymentsLineTypeTip         ListPaymentsLineType = "tip"
)

func (e ListPaymentsLineType) ToPointer() *ListPaymentsLineType {
	return &e
}

// ListPaymentsUnitPrice - The price of a single item including VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
//
// The unit price can be zero in case of free items.
type ListPaymentsUnitPrice struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentsUnitPrice) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentsUnitPrice) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentsDiscountAmount - Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
// type.
type ListPaymentsDiscountAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentsDiscountAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentsDiscountAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentsTotalAmount - The total amount of the line, including VAT and discounts.
//
// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
//
// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
type ListPaymentsTotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentsTotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentsTotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentsVatAmount - The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
//
// Any deviations from this will result in an error.
//
// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
// `SEK 100.00 × (25 / 125) = SEK 20.00`.
type ListPaymentsVatAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentsVatAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentsVatAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type ListPaymentsCategory string

const (
	ListPaymentsCategoryMeal         ListPaymentsCategory = "meal"
	ListPaymentsCategoryEco          ListPaymentsCategory = "eco"
	ListPaymentsCategoryGift         ListPaymentsCategory = "gift"
	ListPaymentsCategorySportCulture ListPaymentsCategory = "sport_culture"
)

func (e ListPaymentsCategory) ToPointer() *ListPaymentsCategory {
	return &e
}

// ListPaymentsRecurringAmount - Total amount and currency of the recurring item.
type ListPaymentsRecurringAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentsRecurringAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentsRecurringAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentsRecurring - The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
// to inform the shopper of the details for recurring products in the payments.
type ListPaymentsRecurring struct {
	// A description of the recurring item. If not present, the main description of the item will be used.
	Description *string `json:"description,omitempty"`
	// Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval string `json:"interval"`
	// Total amount and currency of the recurring item.
	Amount *ListPaymentsRecurringAmount `json:"amount,omitempty"`
	// Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
	Times *int64 `json:"times,omitempty"`
	// The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
	StartDate *string `json:"startDate,omitempty"`
}

func (o *ListPaymentsRecurring) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListPaymentsRecurring) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *ListPaymentsRecurring) GetAmount() *ListPaymentsRecurringAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListPaymentsRecurring) GetTimes() *int64 {
	if o == nil {
		return nil
	}
	return o.Times
}

func (o *ListPaymentsRecurring) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

type ListPaymentsLine struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *ListPaymentsLineType `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// The price of a single item including VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
	//
	// The unit price can be zero in case of free items.
	UnitPrice ListPaymentsUnitPrice `json:"unitPrice"`
	// Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
	// type.
	DiscountAmount *ListPaymentsDiscountAmount `json:"discountAmount,omitempty"`
	// The total amount of the line, including VAT and discounts.
	//
	// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
	//
	// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
	TotalAmount ListPaymentsTotalAmount `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
	// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
	//
	// Any deviations from this will result in an error.
	//
	// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
	// `SEK 100.00 × (25 / 125) = SEK 20.00`.
	VatAmount *ListPaymentsVatAmount `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []ListPaymentsCategory `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string `json:"productUrl,omitempty"`
	// The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
	// to inform the shopper of the details for recurring products in the payments.
	Recurring *ListPaymentsRecurring `json:"recurring,omitempty"`
}

func (o *ListPaymentsLine) GetType() *ListPaymentsLineType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListPaymentsLine) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *ListPaymentsLine) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *ListPaymentsLine) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *ListPaymentsLine) GetUnitPrice() ListPaymentsUnitPrice {
	if o == nil {
		return ListPaymentsUnitPrice{}
	}
	return o.UnitPrice
}

func (o *ListPaymentsLine) GetDiscountAmount() *ListPaymentsDiscountAmount {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *ListPaymentsLine) GetTotalAmount() ListPaymentsTotalAmount {
	if o == nil {
		return ListPaymentsTotalAmount{}
	}
	return o.TotalAmount
}

func (o *ListPaymentsLine) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *ListPaymentsLine) GetVatAmount() *ListPaymentsVatAmount {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *ListPaymentsLine) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *ListPaymentsLine) GetCategories() []ListPaymentsCategory {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *ListPaymentsLine) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *ListPaymentsLine) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}

func (o *ListPaymentsLine) GetRecurring() *ListPaymentsRecurring {
	if o == nil {
		return nil
	}
	return o.Recurring
}

// ListPaymentsBillingAddress - The customer's billing address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
//
// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
type ListPaymentsBillingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *ListPaymentsBillingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *ListPaymentsBillingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *ListPaymentsBillingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *ListPaymentsBillingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *ListPaymentsBillingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *ListPaymentsBillingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *ListPaymentsBillingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *ListPaymentsBillingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ListPaymentsBillingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *ListPaymentsBillingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *ListPaymentsBillingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *ListPaymentsBillingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// ListPaymentsShippingAddress - The customer's shipping address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
type ListPaymentsShippingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *ListPaymentsShippingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *ListPaymentsShippingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *ListPaymentsShippingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *ListPaymentsShippingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *ListPaymentsShippingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *ListPaymentsShippingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *ListPaymentsShippingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *ListPaymentsShippingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ListPaymentsShippingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *ListPaymentsShippingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *ListPaymentsShippingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *ListPaymentsShippingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// ListPaymentsLocale - Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
// locale, but our hosted payment pages currently only support the specified languages.
//
// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
// customer use a local bank account greatly increases the conversion and speed of payment.
type ListPaymentsLocale string

const (
	ListPaymentsLocaleEnUs ListPaymentsLocale = "en_US"
	ListPaymentsLocaleEnGb ListPaymentsLocale = "en_GB"
	ListPaymentsLocaleNlNl ListPaymentsLocale = "nl_NL"
	ListPaymentsLocaleNlBe ListPaymentsLocale = "nl_BE"
	ListPaymentsLocaleDeDe ListPaymentsLocale = "de_DE"
	ListPaymentsLocaleDeAt ListPaymentsLocale = "de_AT"
	ListPaymentsLocaleDeCh ListPaymentsLocale = "de_CH"
	ListPaymentsLocaleFrFr ListPaymentsLocale = "fr_FR"
	ListPaymentsLocaleFrBe ListPaymentsLocale = "fr_BE"
	ListPaymentsLocaleEsEs ListPaymentsLocale = "es_ES"
	ListPaymentsLocaleCaEs ListPaymentsLocale = "ca_ES"
	ListPaymentsLocalePtPt ListPaymentsLocale = "pt_PT"
	ListPaymentsLocaleItIt ListPaymentsLocale = "it_IT"
	ListPaymentsLocaleNbNo ListPaymentsLocale = "nb_NO"
	ListPaymentsLocaleSvSe ListPaymentsLocale = "sv_SE"
	ListPaymentsLocaleFiFi ListPaymentsLocale = "fi_FI"
	ListPaymentsLocaleDaDk ListPaymentsLocale = "da_DK"
	ListPaymentsLocaleIsIs ListPaymentsLocale = "is_IS"
	ListPaymentsLocaleHuHu ListPaymentsLocale = "hu_HU"
	ListPaymentsLocalePlPl ListPaymentsLocale = "pl_PL"
	ListPaymentsLocaleLvLv ListPaymentsLocale = "lv_LV"
	ListPaymentsLocaleLtLt ListPaymentsLocale = "lt_LT"
)

func (e ListPaymentsLocale) ToPointer() *ListPaymentsLocale {
	return &e
}

// ListPaymentsMethod - The payment method used for this transaction. If a specific method was selected during payment initialization,
// this field reflects that choice.
type ListPaymentsMethod string

const (
	ListPaymentsMethodAlma           ListPaymentsMethod = "alma"
	ListPaymentsMethodApplepay       ListPaymentsMethod = "applepay"
	ListPaymentsMethodBacs           ListPaymentsMethod = "bacs"
	ListPaymentsMethodBancomatpay    ListPaymentsMethod = "bancomatpay"
	ListPaymentsMethodBancontact     ListPaymentsMethod = "bancontact"
	ListPaymentsMethodBanktransfer   ListPaymentsMethod = "banktransfer"
	ListPaymentsMethodBelfius        ListPaymentsMethod = "belfius"
	ListPaymentsMethodBillie         ListPaymentsMethod = "billie"
	ListPaymentsMethodBizum          ListPaymentsMethod = "bizum"
	ListPaymentsMethodBlik           ListPaymentsMethod = "blik"
	ListPaymentsMethodCreditcard     ListPaymentsMethod = "creditcard"
	ListPaymentsMethodDirectdebit    ListPaymentsMethod = "directdebit"
	ListPaymentsMethodEps            ListPaymentsMethod = "eps"
	ListPaymentsMethodGiftcard       ListPaymentsMethod = "giftcard"
	ListPaymentsMethodIdeal          ListPaymentsMethod = "ideal"
	ListPaymentsMethodIn3            ListPaymentsMethod = "in3"
	ListPaymentsMethodKbc            ListPaymentsMethod = "kbc"
	ListPaymentsMethodKlarna         ListPaymentsMethod = "klarna"
	ListPaymentsMethodKlarnapaylater ListPaymentsMethod = "klarnapaylater"
	ListPaymentsMethodKlarnapaynow   ListPaymentsMethod = "klarnapaynow"
	ListPaymentsMethodKlarnasliceit  ListPaymentsMethod = "klarnasliceit"
	ListPaymentsMethodMbway          ListPaymentsMethod = "mbway"
	ListPaymentsMethodMultibanco     ListPaymentsMethod = "multibanco"
	ListPaymentsMethodMybank         ListPaymentsMethod = "mybank"
	ListPaymentsMethodPaybybank      ListPaymentsMethod = "paybybank"
	ListPaymentsMethodPayconiq       ListPaymentsMethod = "payconiq"
	ListPaymentsMethodPaypal         ListPaymentsMethod = "paypal"
	ListPaymentsMethodPaysafecard    ListPaymentsMethod = "paysafecard"
	ListPaymentsMethodPointofsale    ListPaymentsMethod = "pointofsale"
	ListPaymentsMethodPrzelewy24     ListPaymentsMethod = "przelewy24"
	ListPaymentsMethodRiverty        ListPaymentsMethod = "riverty"
	ListPaymentsMethodSatispay       ListPaymentsMethod = "satispay"
	ListPaymentsMethodSwish          ListPaymentsMethod = "swish"
	ListPaymentsMethodTrustly        ListPaymentsMethod = "trustly"
	ListPaymentsMethodTwint          ListPaymentsMethod = "twint"
	ListPaymentsMethodVoucher        ListPaymentsMethod = "voucher"
)

func (e ListPaymentsMethod) ToPointer() *ListPaymentsMethod {
	return &e
}

type ListPaymentsMetadataType string

const (
	ListPaymentsMetadataTypeStr        ListPaymentsMetadataType = "str"
	ListPaymentsMetadataTypeMapOfAny   ListPaymentsMetadataType = "mapOfAny"
	ListPaymentsMetadataTypeArrayOfStr ListPaymentsMetadataType = "arrayOfStr"
)

// ListPaymentsMetadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type ListPaymentsMetadata struct {
	Str        *string        `queryParam:"inline"`
	MapOfAny   map[string]any `queryParam:"inline"`
	ArrayOfStr []string       `queryParam:"inline"`

	Type ListPaymentsMetadataType
}

func CreateListPaymentsMetadataStr(str string) ListPaymentsMetadata {
	typ := ListPaymentsMetadataTypeStr

	return ListPaymentsMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateListPaymentsMetadataMapOfAny(mapOfAny map[string]any) ListPaymentsMetadata {
	typ := ListPaymentsMetadataTypeMapOfAny

	return ListPaymentsMetadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateListPaymentsMetadataArrayOfStr(arrayOfStr []string) ListPaymentsMetadata {
	typ := ListPaymentsMetadataTypeArrayOfStr

	return ListPaymentsMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ListPaymentsMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = ListPaymentsMetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ListPaymentsMetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ListPaymentsMetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListPaymentsMetadata", string(data))
}

func (u ListPaymentsMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ListPaymentsMetadata: all fields are null")
}

// ListPaymentsCaptureMode - Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
// and capture at a later time.
//
// This field needs to be set to `manual` for method `riverty`.
type ListPaymentsCaptureMode string

const (
	ListPaymentsCaptureModeAutomatic ListPaymentsCaptureMode = "automatic"
	ListPaymentsCaptureModeManual    ListPaymentsCaptureMode = "manual"
)

func (e ListPaymentsCaptureMode) ToPointer() *ListPaymentsCaptureMode {
	return &e
}

// ListPaymentsApplicationFeeAmount - The fee that you wish to charge.
//
// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
// a €0.99 fee on a €1.00 payment.
type ListPaymentsApplicationFeeAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentsApplicationFeeAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentsApplicationFeeAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentsApplicationFee - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
//
// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
// `routing` parameter.
type ListPaymentsApplicationFee struct {
	// The fee that you wish to charge.
	//
	// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
	// a €0.99 fee on a €1.00 payment.
	Amount *ListPaymentsApplicationFeeAmount `json:"amount,omitempty"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description *string `json:"description,omitempty"`
}

func (o *ListPaymentsApplicationFee) GetAmount() *ListPaymentsApplicationFeeAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListPaymentsApplicationFee) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// ListPaymentsRoutingMode - Whether this entity was created in live mode or in test mode.
type ListPaymentsRoutingMode string

const (
	ListPaymentsRoutingModeLive ListPaymentsRoutingMode = "live"
	ListPaymentsRoutingModeTest ListPaymentsRoutingMode = "test"
)

func (e ListPaymentsRoutingMode) ToPointer() *ListPaymentsRoutingMode {
	return &e
}

// ListPaymentsRoutingAmount - The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
type ListPaymentsRoutingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentsRoutingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentsRoutingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentsDestinationType - The type of destination. Currently only the destination type `organization` is supported.
type ListPaymentsDestinationType string

const (
	ListPaymentsDestinationTypeOrganization ListPaymentsDestinationType = "organization"
)

func (e ListPaymentsDestinationType) ToPointer() *ListPaymentsDestinationType {
	return &e
}

// ListPaymentsDestination - The destination of this portion of the payment.
type ListPaymentsDestination struct {
	// The type of destination. Currently only the destination type `organization` is supported.
	Type ListPaymentsDestinationType `json:"type"`
	// Required for destination type `organization`. The ID of the connected organization the funds should be
	// routed to.
	OrganizationID string `json:"organizationId"`
}

func (o *ListPaymentsDestination) GetType() ListPaymentsDestinationType {
	if o == nil {
		return ListPaymentsDestinationType("")
	}
	return o.Type
}

func (o *ListPaymentsDestination) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

// ListPaymentsRoutingSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListPaymentsRoutingSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsRoutingSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsRoutingSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsRoutingPayment - The API resource URL of the [payment](get-payment) that belong to this route.
type ListPaymentsRoutingPayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsRoutingPayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsRoutingPayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsRoutingLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type ListPaymentsRoutingLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self ListPaymentsRoutingSelf `json:"self"`
	// The API resource URL of the [payment](get-payment) that belong to this route.
	Payment ListPaymentsRoutingPayment `json:"payment"`
}

func (o *ListPaymentsRoutingLinks) GetSelf() ListPaymentsRoutingSelf {
	if o == nil {
		return ListPaymentsRoutingSelf{}
	}
	return o.Self
}

func (o *ListPaymentsRoutingLinks) GetPayment() ListPaymentsRoutingPayment {
	if o == nil {
		return ListPaymentsRoutingPayment{}
	}
	return o.Payment
}

type ListPaymentsRouting struct {
	// Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this route. Mollie will always refer to the route by this ID.
	// Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode ListPaymentsRoutingMode `json:"mode"`
	// The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
	Amount ListPaymentsRoutingAmount `json:"amount"`
	// The destination of this portion of the payment.
	Destination ListPaymentsDestination `json:"destination"`
	// The date and time when the route was created. The date is given in ISO 8601 format.
	CreatedAt string `json:"createdAt"`
	// Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
	// date must be given in `YYYY-MM-DD` format.
	//
	// If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
	ReleaseDate *string `json:"releaseDate,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links ListPaymentsRoutingLinks `json:"_links"`
}

func (o *ListPaymentsRouting) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *ListPaymentsRouting) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListPaymentsRouting) GetMode() ListPaymentsRoutingMode {
	if o == nil {
		return ListPaymentsRoutingMode("")
	}
	return o.Mode
}

func (o *ListPaymentsRouting) GetAmount() ListPaymentsRoutingAmount {
	if o == nil {
		return ListPaymentsRoutingAmount{}
	}
	return o.Amount
}

func (o *ListPaymentsRouting) GetDestination() ListPaymentsDestination {
	if o == nil {
		return ListPaymentsDestination{}
	}
	return o.Destination
}

func (o *ListPaymentsRouting) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListPaymentsRouting) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *ListPaymentsRouting) GetLinks() ListPaymentsRoutingLinks {
	if o == nil {
		return ListPaymentsRoutingLinks{}
	}
	return o.Links
}

// ListPaymentsSequenceType - **Only relevant for recurring payments.**
//
// Indicate which part of a recurring sequence this payment is for.
//
// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
// on their account in the future.
//
// If set to `recurring`, the customer's card is charged automatically.
//
// Defaults to `oneoff`, which is a regular non-recurring payment.
//
// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
// are set up correctly for recurring payments.
type ListPaymentsSequenceType string

const (
	ListPaymentsSequenceTypeOneoff    ListPaymentsSequenceType = "oneoff"
	ListPaymentsSequenceTypeFirst     ListPaymentsSequenceType = "first"
	ListPaymentsSequenceTypeRecurring ListPaymentsSequenceType = "recurring"
)

func (e ListPaymentsSequenceType) ToPointer() *ListPaymentsSequenceType {
	return &e
}

// ListPaymentsStatusEnum - The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
// statuses occur at what point.
type ListPaymentsStatusEnum string

const (
	ListPaymentsStatusEnumOpen       ListPaymentsStatusEnum = "open"
	ListPaymentsStatusEnumPending    ListPaymentsStatusEnum = "pending"
	ListPaymentsStatusEnumAuthorized ListPaymentsStatusEnum = "authorized"
	ListPaymentsStatusEnumPaid       ListPaymentsStatusEnum = "paid"
	ListPaymentsStatusEnumCanceled   ListPaymentsStatusEnum = "canceled"
	ListPaymentsStatusEnumExpired    ListPaymentsStatusEnum = "expired"
	ListPaymentsStatusEnumFailed     ListPaymentsStatusEnum = "failed"
)

func (e ListPaymentsStatusEnum) ToPointer() *ListPaymentsStatusEnum {
	return &e
}

// ListPaymentsCode - A machine-readable code that indicates the reason for the payment's status.
type ListPaymentsCode string

const (
	ListPaymentsCodeApprovedOrCompletedSuccessfully             ListPaymentsCode = "approved_or_completed_successfully"
	ListPaymentsCodeReferToCardIssuer                           ListPaymentsCode = "refer_to_card_issuer"
	ListPaymentsCodeInvalidMerchant                             ListPaymentsCode = "invalid_merchant"
	ListPaymentsCodeCaptureCard                                 ListPaymentsCode = "capture_card"
	ListPaymentsCodeDoNotHonor                                  ListPaymentsCode = "do_not_honor"
	ListPaymentsCodeError                                       ListPaymentsCode = "error"
	ListPaymentsCodePartialApproval                             ListPaymentsCode = "partial_approval"
	ListPaymentsCodeInvalidTransaction                          ListPaymentsCode = "invalid_transaction"
	ListPaymentsCodeInvalidAmount                               ListPaymentsCode = "invalid_amount"
	ListPaymentsCodeInvalidIssuer                               ListPaymentsCode = "invalid_issuer"
	ListPaymentsCodeLostCard                                    ListPaymentsCode = "lost_card"
	ListPaymentsCodeStolenCard                                  ListPaymentsCode = "stolen_card"
	ListPaymentsCodeInsufficientFunds                           ListPaymentsCode = "insufficient_funds"
	ListPaymentsCodeExpiredCard                                 ListPaymentsCode = "expired_card"
	ListPaymentsCodeInvalidPin                                  ListPaymentsCode = "invalid_pin"
	ListPaymentsCodeTransactionNotPermittedToCardholder         ListPaymentsCode = "transaction_not_permitted_to_cardholder"
	ListPaymentsCodeTransactionNotAllowedAtTerminal             ListPaymentsCode = "transaction_not_allowed_at_terminal"
	ListPaymentsCodeExceedsWithdrawalAmountLimit                ListPaymentsCode = "exceeds_withdrawal_amount_limit"
	ListPaymentsCodeRestrictedCard                              ListPaymentsCode = "restricted_card"
	ListPaymentsCodeSecurityViolation                           ListPaymentsCode = "security_violation"
	ListPaymentsCodeExceedsWithdrawalCountLimit                 ListPaymentsCode = "exceeds_withdrawal_count_limit"
	ListPaymentsCodeAllowableNumberOfPinTriesExceeded           ListPaymentsCode = "allowable_number_of_pin_tries_exceeded"
	ListPaymentsCodeNoReasonToDecline                           ListPaymentsCode = "no_reason_to_decline"
	ListPaymentsCodeCannotVerifyPin                             ListPaymentsCode = "cannot_verify_pin"
	ListPaymentsCodeIssuerUnavailable                           ListPaymentsCode = "issuer_unavailable"
	ListPaymentsCodeUnableToRouteTransaction                    ListPaymentsCode = "unable_to_route_transaction"
	ListPaymentsCodeDuplicateTransaction                        ListPaymentsCode = "duplicate_transaction"
	ListPaymentsCodeSystemMalfunction                           ListPaymentsCode = "system_malfunction"
	ListPaymentsCodeHonorWithID                                 ListPaymentsCode = "honor_with_id"
	ListPaymentsCodeInvalidCardNumber                           ListPaymentsCode = "invalid_card_number"
	ListPaymentsCodeFormatError                                 ListPaymentsCode = "format_error"
	ListPaymentsCodeContactCardIssuer                           ListPaymentsCode = "contact_card_issuer"
	ListPaymentsCodePinNotChanged                               ListPaymentsCode = "pin_not_changed"
	ListPaymentsCodeInvalidNonexistentToAccountSpecified        ListPaymentsCode = "invalid_nonexistent_to_account_specified"
	ListPaymentsCodeInvalidNonexistentFromAccountSpecified      ListPaymentsCode = "invalid_nonexistent_from_account_specified"
	ListPaymentsCodeInvalidNonexistentAccountSpecified          ListPaymentsCode = "invalid_nonexistent_account_specified"
	ListPaymentsCodeLifecycleRelated                            ListPaymentsCode = "lifecycle_related"
	ListPaymentsCodeDomesticDebitTransactionNotAllowed          ListPaymentsCode = "domestic_debit_transaction_not_allowed"
	ListPaymentsCodePolicyRelated                               ListPaymentsCode = "policy_related"
	ListPaymentsCodeFraudSecurityRelated                        ListPaymentsCode = "fraud_security_related"
	ListPaymentsCodeInvalidAuthorizationLifeCycle               ListPaymentsCode = "invalid_authorization_life_cycle"
	ListPaymentsCodePurchaseAmountOnlyNoCashBackAllowed         ListPaymentsCode = "purchase_amount_only_no_cash_back_allowed"
	ListPaymentsCodeCryptographicFailure                        ListPaymentsCode = "cryptographic_failure"
	ListPaymentsCodeUnacceptablePin                             ListPaymentsCode = "unacceptable_pin"
	ListPaymentsCodeReferToCardIssuerSpecialCondition           ListPaymentsCode = "refer_to_card_issuer_special_condition"
	ListPaymentsCodePickUpCardSpecialCondition                  ListPaymentsCode = "pick_up_card_special_condition"
	ListPaymentsCodeVipApproval                                 ListPaymentsCode = "vip_approval"
	ListPaymentsCodeInvalidAccountNumber                        ListPaymentsCode = "invalid_account_number"
	ListPaymentsCodeReEnterTransaction                          ListPaymentsCode = "re_enter_transaction"
	ListPaymentsCodeNoActionTaken                               ListPaymentsCode = "no_action_taken"
	ListPaymentsCodeUnableToLocateRecord                        ListPaymentsCode = "unable_to_locate_record"
	ListPaymentsCodeFileTemporarilyUnavailable                  ListPaymentsCode = "file_temporarily_unavailable"
	ListPaymentsCodeNoCreditAccount                             ListPaymentsCode = "no_credit_account"
	ListPaymentsCodeClosedAccount                               ListPaymentsCode = "closed_account"
	ListPaymentsCodeNoCheckingAccount                           ListPaymentsCode = "no_checking_account"
	ListPaymentsCodeNoSavingsAccount                            ListPaymentsCode = "no_savings_account"
	ListPaymentsCodeSuspectedFraud                              ListPaymentsCode = "suspected_fraud"
	ListPaymentsCodeTransactionDoesNotFulfillAmlRequirement     ListPaymentsCode = "transaction_does_not_fulfill_aml_requirement"
	ListPaymentsCodePinDataRequired                             ListPaymentsCode = "pin_data_required"
	ListPaymentsCodeUnableToLocatePreviousMessage               ListPaymentsCode = "unable_to_locate_previous_message"
	ListPaymentsCodePreviousMessageLocatedInconsistentData      ListPaymentsCode = "previous_message_located_inconsistent_data"
	ListPaymentsCodeBlockedFirstUsed                            ListPaymentsCode = "blocked_first_used"
	ListPaymentsCodeTransactionReversed                         ListPaymentsCode = "transaction_reversed"
	ListPaymentsCodeCreditIssuerUnavailable                     ListPaymentsCode = "credit_issuer_unavailable"
	ListPaymentsCodePinCryptographicErrorFound                  ListPaymentsCode = "pin_cryptographic_error_found"
	ListPaymentsCodeNegativeOnlineCamResult                     ListPaymentsCode = "negative_online_cam_result"
	ListPaymentsCodeViolationOfLaw                              ListPaymentsCode = "violation_of_law"
	ListPaymentsCodeForceStip                                   ListPaymentsCode = "force_stip"
	ListPaymentsCodeCashServiceNotAvailable                     ListPaymentsCode = "cash_service_not_available"
	ListPaymentsCodeCashbackRequestExceedsIssuerLimit           ListPaymentsCode = "cashback_request_exceeds_issuer_limit"
	ListPaymentsCodeDeclineForCvv2Failure                       ListPaymentsCode = "decline_for_cvv2_failure"
	ListPaymentsCodeTransactionAmountExceedsPreAuthorizedAmount ListPaymentsCode = "transaction_amount_exceeds_pre_authorized_amount"
	ListPaymentsCodeInvalidBillerInformation                    ListPaymentsCode = "invalid_biller_information"
	ListPaymentsCodePinChangeUnblockRequestDeclined             ListPaymentsCode = "pin_change_unblock_request_declined"
	ListPaymentsCodeUnsafePin                                   ListPaymentsCode = "unsafe_pin"
	ListPaymentsCodeCardAuthenticationFailed                    ListPaymentsCode = "card_authentication_failed"
	ListPaymentsCodeStopPaymentOrder                            ListPaymentsCode = "stop_payment_order"
	ListPaymentsCodeRevocationOfAuthorization                   ListPaymentsCode = "revocation_of_authorization"
	ListPaymentsCodeRevocationOfAllAuthorizations               ListPaymentsCode = "revocation_of_all_authorizations"
	ListPaymentsCodeForwardToIssuerXa                           ListPaymentsCode = "forward_to_issuer_xa"
	ListPaymentsCodeForwardToIssuerXd                           ListPaymentsCode = "forward_to_issuer_xd"
	ListPaymentsCodeUnableToGoOnline                            ListPaymentsCode = "unable_to_go_online"
	ListPaymentsCodeAdditionalCustomerAuthenticationRequired    ListPaymentsCode = "additional_customer_authentication_required"
	ListPaymentsCodeMerchantIDNotFound                          ListPaymentsCode = "merchant_id_not_found"
	ListPaymentsCodeMerchantAccountClosed                       ListPaymentsCode = "merchant_account_closed"
	ListPaymentsCodeTerminalIDNotFound                          ListPaymentsCode = "terminal_id_not_found"
	ListPaymentsCodeTerminalClosed                              ListPaymentsCode = "terminal_closed"
	ListPaymentsCodeInvalidCategoryCode                         ListPaymentsCode = "invalid_category_code"
	ListPaymentsCodeInvalidCurrency                             ListPaymentsCode = "invalid_currency"
	ListPaymentsCodeMissingCvv2Cvc2                             ListPaymentsCode = "missing_cvv2_cvc2"
	ListPaymentsCodeCvv2NotAllowed                              ListPaymentsCode = "cvv2_not_allowed"
	ListPaymentsCodeMerchantNotRegisteredVbv                    ListPaymentsCode = "merchant_not_registered_vbv"
	ListPaymentsCodeMerchantNotRegisteredForAmex                ListPaymentsCode = "merchant_not_registered_for_amex"
	ListPaymentsCodeTransactionNotPermittedAtTerminal           ListPaymentsCode = "transaction_not_permitted_at_terminal"
	ListPaymentsCodeAgreementTerminalNotRelated                 ListPaymentsCode = "agreement_terminal_not_related"
	ListPaymentsCodeInvalidProcessorID                          ListPaymentsCode = "invalid_processor_id"
	ListPaymentsCodeInvalidMerchantData                         ListPaymentsCode = "invalid_merchant_data"
	ListPaymentsCodeSubMerchantAccountClosed                    ListPaymentsCode = "sub_merchant_account_closed"
	ListPaymentsCodeTerminalBusy                                ListPaymentsCode = "terminal_busy"
	ListPaymentsCodeTerminalUnreachable                         ListPaymentsCode = "terminal_unreachable"
	ListPaymentsCodeServiceFailed                               ListPaymentsCode = "service_failed"
	ListPaymentsCodeInvalidOperation                            ListPaymentsCode = "invalid_operation"
	ListPaymentsCodeAuthorizationError                          ListPaymentsCode = "authorization_error"
	ListPaymentsCodeLoginFailedWithoutReason                    ListPaymentsCode = "login_failed_without_reason"
	ListPaymentsCodeInvalidRetailer                             ListPaymentsCode = "invalid_retailer"
	ListPaymentsCodeCardDoesNotExist                            ListPaymentsCode = "card_does_not_exist"
	ListPaymentsCodeCardIsBlocked                               ListPaymentsCode = "card_is_blocked"
	ListPaymentsCodeInvalidCardID                               ListPaymentsCode = "invalid_card_id"
	ListPaymentsCodeCardIsTransferred                           ListPaymentsCode = "card_is_transferred"
	ListPaymentsCodeCardIsNotActive                             ListPaymentsCode = "card_is_not_active"
	ListPaymentsCodeIncorrectPurchaseValue                      ListPaymentsCode = "incorrect_purchase_value"
	ListPaymentsCodeCardNotAvailable                            ListPaymentsCode = "card_not_available"
	ListPaymentsCodeWrongCurrency                               ListPaymentsCode = "wrong_currency"
	ListPaymentsCodeLoginFailedUnknownUser                      ListPaymentsCode = "login_failed_unknown_user"
	ListPaymentsCodeLoginFailedInvalidPassword                  ListPaymentsCode = "login_failed_invalid_password"
	ListPaymentsCodeInvalidEanCode                              ListPaymentsCode = "invalid_ean_code"
)

func (e ListPaymentsCode) ToPointer() *ListPaymentsCode {
	return &e
}

// ListPaymentsStatusReason - This object offers details about the status of a payment. Currently it is only available for point-of-sale
// payments.
//
// You can find more information about the possible values of this object on
// [this page](status-reasons).**
type ListPaymentsStatusReason struct {
	Code ListPaymentsCode `json:"code"`
	// A description of the status reason, localized according to the payment `locale`.
	Message string `json:"message"`
}

func (o *ListPaymentsStatusReason) GetCode() ListPaymentsCode {
	if o == nil {
		return ListPaymentsCode("")
	}
	return o.Code
}

func (o *ListPaymentsStatusReason) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

// ListPaymentsCardAudition - The card's target audience, if known.
type ListPaymentsCardAudition string

const (
	ListPaymentsCardAuditionConsumer ListPaymentsCardAudition = "consumer"
	ListPaymentsCardAuditionBusiness ListPaymentsCardAudition = "business"
)

func (e ListPaymentsCardAudition) ToPointer() *ListPaymentsCardAudition {
	return &e
}

// ListPaymentsCardLabel - The card's label, if known.
type ListPaymentsCardLabel string

const (
	ListPaymentsCardLabelAmericanExpress ListPaymentsCardLabel = "American Express"
	ListPaymentsCardLabelCartaSi         ListPaymentsCardLabel = "Carta Si"
	ListPaymentsCardLabelCarteBleue      ListPaymentsCardLabel = "Carte Bleue"
	ListPaymentsCardLabelDankort         ListPaymentsCardLabel = "Dankort"
	ListPaymentsCardLabelDinersClub      ListPaymentsCardLabel = "Diners Club"
	ListPaymentsCardLabelDiscover        ListPaymentsCardLabel = "Discover"
	ListPaymentsCardLabelJcb             ListPaymentsCardLabel = "JCB"
	ListPaymentsCardLabelLaser           ListPaymentsCardLabel = "Laser"
	ListPaymentsCardLabelMaestro         ListPaymentsCardLabel = "Maestro"
	ListPaymentsCardLabelMastercard      ListPaymentsCardLabel = "Mastercard"
	ListPaymentsCardLabelUnionpay        ListPaymentsCardLabel = "Unionpay"
	ListPaymentsCardLabelVisa            ListPaymentsCardLabel = "Visa"
	ListPaymentsCardLabelVpay            ListPaymentsCardLabel = "Vpay"
)

func (e ListPaymentsCardLabel) ToPointer() *ListPaymentsCardLabel {
	return &e
}

// ListPaymentsCardFunding - The card type.
type ListPaymentsCardFunding string

const (
	ListPaymentsCardFundingDebit         ListPaymentsCardFunding = "debit"
	ListPaymentsCardFundingCredit        ListPaymentsCardFunding = "credit"
	ListPaymentsCardFundingPrepaid       ListPaymentsCardFunding = "prepaid"
	ListPaymentsCardFundingDeferredDebit ListPaymentsCardFunding = "deferred-debit"
)

func (e ListPaymentsCardFunding) ToPointer() *ListPaymentsCardFunding {
	return &e
}

// ListPaymentsCardSecurity - The level of security applied during card processing.
type ListPaymentsCardSecurity string

const (
	ListPaymentsCardSecurityNormal       ListPaymentsCardSecurity = "normal"
	ListPaymentsCardSecurityThreedsecure ListPaymentsCardSecurity = "3dsecure"
)

func (e ListPaymentsCardSecurity) ToPointer() *ListPaymentsCardSecurity {
	return &e
}

// ListPaymentsFeeRegion - The applicable card fee region.
type ListPaymentsFeeRegion string

const (
	ListPaymentsFeeRegionAmericanExpress  ListPaymentsFeeRegion = "american-express"
	ListPaymentsFeeRegionAmexIntraEea     ListPaymentsFeeRegion = "amex-intra-eea"
	ListPaymentsFeeRegionCarteBancaire    ListPaymentsFeeRegion = "carte-bancaire"
	ListPaymentsFeeRegionIntraEu          ListPaymentsFeeRegion = "intra-eu"
	ListPaymentsFeeRegionIntraEuCorporate ListPaymentsFeeRegion = "intra-eu-corporate"
	ListPaymentsFeeRegionDomestic         ListPaymentsFeeRegion = "domestic"
	ListPaymentsFeeRegionMaestro          ListPaymentsFeeRegion = "maestro"
	ListPaymentsFeeRegionOther            ListPaymentsFeeRegion = "other"
	ListPaymentsFeeRegionInter            ListPaymentsFeeRegion = "inter"
	ListPaymentsFeeRegionIntraEea         ListPaymentsFeeRegion = "intra_eea"
)

func (e ListPaymentsFeeRegion) ToPointer() *ListPaymentsFeeRegion {
	return &e
}

// ListPaymentsFailureReason - A failure code to help understand why the payment failed.
type ListPaymentsFailureReason string

const (
	ListPaymentsFailureReasonAuthenticationAbandoned      ListPaymentsFailureReason = "authentication_abandoned"
	ListPaymentsFailureReasonAuthenticationFailed         ListPaymentsFailureReason = "authentication_failed"
	ListPaymentsFailureReasonAuthenticationRequired       ListPaymentsFailureReason = "authentication_required"
	ListPaymentsFailureReasonAuthenticationUnavailableAcs ListPaymentsFailureReason = "authentication_unavailable_acs"
	ListPaymentsFailureReasonCardDeclined                 ListPaymentsFailureReason = "card_declined"
	ListPaymentsFailureReasonCardExpired                  ListPaymentsFailureReason = "card_expired"
	ListPaymentsFailureReasonInactiveCard                 ListPaymentsFailureReason = "inactive_card"
	ListPaymentsFailureReasonInsufficientFunds            ListPaymentsFailureReason = "insufficient_funds"
	ListPaymentsFailureReasonInvalidCvv                   ListPaymentsFailureReason = "invalid_cvv"
	ListPaymentsFailureReasonInvalidCardHolderName        ListPaymentsFailureReason = "invalid_card_holder_name"
	ListPaymentsFailureReasonInvalidCardNumber            ListPaymentsFailureReason = "invalid_card_number"
	ListPaymentsFailureReasonInvalidCardType              ListPaymentsFailureReason = "invalid_card_type"
	ListPaymentsFailureReasonPossibleFraud                ListPaymentsFailureReason = "possible_fraud"
	ListPaymentsFailureReasonRefusedByIssuer              ListPaymentsFailureReason = "refused_by_issuer"
	ListPaymentsFailureReasonUnknownReason                ListPaymentsFailureReason = "unknown_reason"
)

func (e ListPaymentsFailureReason) ToPointer() *ListPaymentsFailureReason {
	return &e
}

// ListPaymentsWallet - The wallet used when creating the payment.
type ListPaymentsWallet string

const (
	ListPaymentsWalletApplepay ListPaymentsWallet = "applepay"
)

func (e ListPaymentsWallet) ToPointer() *ListPaymentsWallet {
	return &e
}

// ListPaymentsSellerProtection - Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
// payments, and if the information is made available by PayPal.
type ListPaymentsSellerProtection string

const (
	ListPaymentsSellerProtectionEligible                          ListPaymentsSellerProtection = "Eligible"
	ListPaymentsSellerProtectionIneligible                        ListPaymentsSellerProtection = "Ineligible"
	ListPaymentsSellerProtectionPartiallyEligibleInrOnly          ListPaymentsSellerProtection = "Partially Eligible - INR Only"
	ListPaymentsSellerProtectionPartiallyEligibleUnauthOnly       ListPaymentsSellerProtection = "Partially Eligible - Unauth Only"
	ListPaymentsSellerProtectionPartiallyEligible                 ListPaymentsSellerProtection = "Partially Eligible"
	ListPaymentsSellerProtectionNone                              ListPaymentsSellerProtection = "None"
	ListPaymentsSellerProtectionActive                            ListPaymentsSellerProtection = "Active"
	ListPaymentsSellerProtectionFraudControlUnauthPremiumEligible ListPaymentsSellerProtection = "Fraud Control - Unauth Premium Eligible"
)

func (e ListPaymentsSellerProtection) ToPointer() *ListPaymentsSellerProtection {
	return &e
}

// ListPaymentsPaypalFee - An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
// PayPal will not charge a fee for this transaction.
type ListPaymentsPaypalFee struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentsPaypalFee) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentsPaypalFee) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentsCardReadMethod - The method by which the card was read by the terminal.
type ListPaymentsCardReadMethod string

const (
	ListPaymentsCardReadMethodChip                   ListPaymentsCardReadMethod = "chip"
	ListPaymentsCardReadMethodMagneticStripe         ListPaymentsCardReadMethod = "magnetic-stripe"
	ListPaymentsCardReadMethodNearFieldCommunication ListPaymentsCardReadMethod = "near-field-communication"
	ListPaymentsCardReadMethodContactless            ListPaymentsCardReadMethod = "contactless"
	ListPaymentsCardReadMethodMoto                   ListPaymentsCardReadMethod = "moto"
)

func (e ListPaymentsCardReadMethod) ToPointer() *ListPaymentsCardReadMethod {
	return &e
}

// ListPaymentsCardVerificationMethod - The method used to verify the cardholder's identity.
type ListPaymentsCardVerificationMethod string

const (
	ListPaymentsCardVerificationMethodNoCvmRequired         ListPaymentsCardVerificationMethod = "no-cvm-required"
	ListPaymentsCardVerificationMethodOnlinePin             ListPaymentsCardVerificationMethod = "online-pin"
	ListPaymentsCardVerificationMethodOfflinePin            ListPaymentsCardVerificationMethod = "offline-pin"
	ListPaymentsCardVerificationMethodConsumerDevice        ListPaymentsCardVerificationMethod = "consumer-device"
	ListPaymentsCardVerificationMethodSignature             ListPaymentsCardVerificationMethod = "signature"
	ListPaymentsCardVerificationMethodSignatureAndOnlinePin ListPaymentsCardVerificationMethod = "signature-and-online-pin"
	ListPaymentsCardVerificationMethodOnlinePinAndSignature ListPaymentsCardVerificationMethod = "online-pin-and-signature"
	ListPaymentsCardVerificationMethodNone                  ListPaymentsCardVerificationMethod = "none"
	ListPaymentsCardVerificationMethodFailed                ListPaymentsCardVerificationMethod = "failed"
)

func (e ListPaymentsCardVerificationMethod) ToPointer() *ListPaymentsCardVerificationMethod {
	return &e
}

// ListPaymentsReceipt - The Point of sale receipt object.
type ListPaymentsReceipt struct {
	// A unique code provided by the cardholder’s bank to confirm that the transaction was successfully approved.
	AuthorizationCode *string `json:"authorizationCode,omitempty"`
	// The unique number that identifies a specific payment application on a chip card.
	ApplicationIdentifier *string `json:"applicationIdentifier,omitempty"`
	// The method by which the card was read by the terminal.
	CardReadMethod *ListPaymentsCardReadMethod `json:"cardReadMethod,omitempty"`
	// The method used to verify the cardholder's identity.
	CardVerificationMethod *ListPaymentsCardVerificationMethod `json:"cardVerificationMethod,omitempty"`
}

func (o *ListPaymentsReceipt) GetAuthorizationCode() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizationCode
}

func (o *ListPaymentsReceipt) GetApplicationIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationIdentifier
}

func (o *ListPaymentsReceipt) GetCardReadMethod() *ListPaymentsCardReadMethod {
	if o == nil {
		return nil
	}
	return o.CardReadMethod
}

func (o *ListPaymentsReceipt) GetCardVerificationMethod() *ListPaymentsCardVerificationMethod {
	if o == nil {
		return nil
	}
	return o.CardVerificationMethod
}

// ListPaymentsQrCode - Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
// the QR code details will be available in this object.
//
// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
// Bancontact QR payments can be completed by the customer using the Bancontact app.
type ListPaymentsQrCode struct {
	// The height of the QR code image in pixels.
	Height *int64 `json:"height,omitempty"`
	// The width of the QR code image in pixels.
	Width *int64 `json:"width,omitempty"`
	// The URL to the QR code image. The image is a PNG file, and can be displayed directly in the browser or
	// downloaded.
	Src *string `json:"src,omitempty"`
}

func (o *ListPaymentsQrCode) GetHeight() *int64 {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *ListPaymentsQrCode) GetWidth() *int64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *ListPaymentsQrCode) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

// ListPaymentsRemainderAmount - An amount object for the amount that remained after all gift cards or vouchers were applied.
type ListPaymentsRemainderAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentsRemainderAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentsRemainderAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentsDetails - An object containing payment details collected during the payment process. For example, details may include the
// customer's card or bank details and a payment reference. For the full list of details, please refer to the
// [method-specific parameters](extra-payment-parameters) guide.
type ListPaymentsDetails struct {
	// The customer's name, if made available by the payment method. For card payments, refer to details.cardHolder.
	ConsumerName *string `json:"consumerName,omitempty"`
	// The customer's account reference.
	//
	// For banking-based payment methods — such as iDEAL — this is normally either an IBAN or a domestic bank account
	// number.
	//
	// For PayPal, the account reference is an email address.
	//
	// For card and Bancontact payments, refer to details.cardNumber.
	ConsumerAccount *string `json:"consumerAccount,omitempty"`
	// The BIC of the customer's bank account, if applicable.
	ConsumerBic *string `json:"consumerBic,omitempty"`
	// For wallet payment methods — such as Apple Pay and PayPal — the shipping address is often already known by the
	// wallet provider. In these cases the shipping address may be available as a payment detail.
	ShippingAddress map[string]any `json:"shippingAddress,omitempty"`
	// For bancontact, it will be the customer's masked card number. For cards, it will be the last 4-digit of the
	// PAN. For Point-of-sale, it will be the the last 4 digits of the customer's masked card number.
	CardNumber *string `json:"cardNumber,omitempty"`
	// The name of the bank that the customer will need to make the bank transfer payment towards.
	BankName *string `json:"bankName,omitempty"`
	// The bank account number the customer will need to make the bank transfer payment towards.
	BankAccount *string `json:"bankAccount,omitempty"`
	// The BIC of the bank the customer will need to make the bank transfer payment towards.
	BankBic *string `json:"bankBic,omitempty"`
	// The Mollie-generated reference the customer needs to use when transfering the amount. Do not apply any
	// formatting here; show it to the customer as-is.
	TransferReference *string `json:"transferReference,omitempty"`
	// A unique fingerprint for a specific card. Can be used to identify returning customers.
	//
	// In the case of Point-of-sale payments, it's a unique identifier assigned to a cardholder's payment account,
	// linking multiple transactions from wallets and physical card to a single account, also across payment methods
	// or when the card is reissued.
	CardFingerprint *string `json:"cardFingerprint,omitempty"`
	// The customer's name as shown on their card.
	CardHolder *string `json:"cardHolder,omitempty"`
	// The card's target audience, if known.
	CardAudition *ListPaymentsCardAudition `json:"cardAudition,omitempty"`
	// The card's label, if known.
	CardLabel *ListPaymentsCardLabel `json:"cardLabel,omitempty"`
	// The ISO 3166-1 alpha-2 country code of the country the card was issued in.
	CardCountryCode *string `json:"cardCountryCode,omitempty"`
	// The expiry date (MM/YY) of the card as displayed on the card.
	CardExpiryDate *string `json:"cardExpiryDate,omitempty"`
	// The card type.
	CardFunding *ListPaymentsCardFunding `json:"cardFunding,omitempty"`
	// The level of security applied during card processing.
	CardSecurity *ListPaymentsCardSecurity `json:"cardSecurity,omitempty"`
	// The applicable card fee region.
	FeeRegion *ListPaymentsFeeRegion `json:"feeRegion,omitempty"`
	// The first 6 and last 4 digits of the card number.
	CardMaskedNumber *string `json:"cardMaskedNumber,omitempty"`
	// The outcome of authentication attempted on transactions enforced by 3DS (ie valid only for oneoff and first).
	Card3dsEci *string `json:"card3dsEci,omitempty"`
	// The first 6 digit of the card bank identification number.
	CardBin *string `json:"cardBin,omitempty"`
	// The issuer of the Card.
	CardIssuer *string `json:"cardIssuer,omitempty"`
	// A failure code to help understand why the payment failed.
	FailureReason *ListPaymentsFailureReason `json:"failureReason,omitempty"`
	// A human-friendly failure message that can be shown to the customer. The message is translated in accordance
	// with the payment's locale setting.
	FailureMessage *string `json:"failureMessage,omitempty"`
	// The wallet used when creating the payment.
	Wallet *ListPaymentsWallet `json:"wallet,omitempty"`
	// PayPal's reference for the payment.
	PaypalReference *string `json:"paypalReference,omitempty"`
	// ID of the customer's PayPal account.
	PaypalPayerID *string `json:"paypalPayerId,omitempty"`
	// Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
	// payments, and if the information is made available by PayPal.
	SellerProtection *ListPaymentsSellerProtection `json:"sellerProtection,omitempty"`
	// An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
	// PayPal will not charge a fee for this transaction.
	PaypalFee *ListPaymentsPaypalFee `json:"paypalFee,omitempty"`
	// The paysafecard customer reference either provided via the API or otherwise auto-generated by Mollie.
	CustomerReference *string `json:"customerReference,omitempty"`
	// The ID of the terminal device where the payment took place on.
	TerminalID *string `json:"terminalId,omitempty"`
	// The first 6 digits & last 4 digits of the customer's masked card number.
	MaskedNumber *string `json:"maskedNumber,omitempty"`
	// The Point of sale receipt object.
	Receipt *ListPaymentsReceipt `json:"receipt,omitempty"`
	// The creditor identifier indicates who is authorized to execute the payment. In this case, it is a
	// reference to Mollie.
	CreditorIdentifier *string `json:"creditorIdentifier,omitempty"`
	// Estimated date the payment is debited from the customer's bank account, in YYYY-MM-DD format.
	DueDate *types.Date `json:"dueDate,omitempty"`
	// Date the payment has been signed by the customer, in YYYY-MM-DD format. Only available if the payment
	// has been signed.
	SignatureDate *types.Date `json:"signatureDate,omitempty"`
	// The official reason why this payment has failed. A detailed description of each reason is available on the
	// website of the European Payments Council.
	BankReasonCode *string `json:"bankReasonCode,omitempty"`
	// A human-friendly description of the failure reason.
	BankReason *string `json:"bankReason,omitempty"`
	// The end-to-end identifier you provided in the batch file.
	EndToEndIdentifier *string `json:"endToEndIdentifier,omitempty"`
	// The mandate reference you provided in the batch file.
	MandateReference *string `json:"mandateReference,omitempty"`
	// The batch reference you provided in the batch file.
	BatchReference *string `json:"batchReference,omitempty"`
	// The file reference you provided in the batch file.
	FileReference *string `json:"fileReference,omitempty"`
	// Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
	// the QR code details will be available in this object.
	//
	// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
	// Bancontact QR payments can be completed by the customer using the Bancontact app.
	QrCode *ListPaymentsQrCode `json:"qrCode,omitempty"`
	// For payments with gift cards: the masked gift card number of the first gift card applied to the payment.
	VoucherNumber *string `json:"voucherNumber,omitempty"`
	// An array of detail objects for each gift card that was used on this payment, if any.
	Giftcards []map[string]any `json:"giftcards,omitempty"`
	// For payments with vouchers: the brand name of the first voucher applied.
	Issuer *string `json:"issuer,omitempty"`
	// An array of detail objects for each voucher that was used on this payment, if any.
	Vouchers []map[string]any `json:"vouchers,omitempty"`
	// An amount object for the amount that remained after all gift cards or vouchers were applied.
	RemainderAmount *ListPaymentsRemainderAmount `json:"remainderAmount,omitempty"`
	// The payment method used to pay the remainder amount, after all gift cards or vouchers were applied.
	RemainderMethod *string `json:"remainderMethod,omitempty"`
	// Optional include. The full payment method details of the remainder payment.
	RemainderDetails map[string]any `json:"remainderDetails,omitempty"`
}

func (l ListPaymentsDetails) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListPaymentsDetails) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *ListPaymentsDetails) GetConsumerName() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerName
}

func (o *ListPaymentsDetails) GetConsumerAccount() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerAccount
}

func (o *ListPaymentsDetails) GetConsumerBic() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerBic
}

func (o *ListPaymentsDetails) GetShippingAddress() map[string]any {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *ListPaymentsDetails) GetCardNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardNumber
}

func (o *ListPaymentsDetails) GetBankName() *string {
	if o == nil {
		return nil
	}
	return o.BankName
}

func (o *ListPaymentsDetails) GetBankAccount() *string {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *ListPaymentsDetails) GetBankBic() *string {
	if o == nil {
		return nil
	}
	return o.BankBic
}

func (o *ListPaymentsDetails) GetTransferReference() *string {
	if o == nil {
		return nil
	}
	return o.TransferReference
}

func (o *ListPaymentsDetails) GetCardFingerprint() *string {
	if o == nil {
		return nil
	}
	return o.CardFingerprint
}

func (o *ListPaymentsDetails) GetCardHolder() *string {
	if o == nil {
		return nil
	}
	return o.CardHolder
}

func (o *ListPaymentsDetails) GetCardAudition() *ListPaymentsCardAudition {
	if o == nil {
		return nil
	}
	return o.CardAudition
}

func (o *ListPaymentsDetails) GetCardLabel() *ListPaymentsCardLabel {
	if o == nil {
		return nil
	}
	return o.CardLabel
}

func (o *ListPaymentsDetails) GetCardCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CardCountryCode
}

func (o *ListPaymentsDetails) GetCardExpiryDate() *string {
	if o == nil {
		return nil
	}
	return o.CardExpiryDate
}

func (o *ListPaymentsDetails) GetCardFunding() *ListPaymentsCardFunding {
	if o == nil {
		return nil
	}
	return o.CardFunding
}

func (o *ListPaymentsDetails) GetCardSecurity() *ListPaymentsCardSecurity {
	if o == nil {
		return nil
	}
	return o.CardSecurity
}

func (o *ListPaymentsDetails) GetFeeRegion() *ListPaymentsFeeRegion {
	if o == nil {
		return nil
	}
	return o.FeeRegion
}

func (o *ListPaymentsDetails) GetCardMaskedNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardMaskedNumber
}

func (o *ListPaymentsDetails) GetCard3dsEci() *string {
	if o == nil {
		return nil
	}
	return o.Card3dsEci
}

func (o *ListPaymentsDetails) GetCardBin() *string {
	if o == nil {
		return nil
	}
	return o.CardBin
}

func (o *ListPaymentsDetails) GetCardIssuer() *string {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *ListPaymentsDetails) GetFailureReason() *ListPaymentsFailureReason {
	if o == nil {
		return nil
	}
	return o.FailureReason
}

func (o *ListPaymentsDetails) GetFailureMessage() *string {
	if o == nil {
		return nil
	}
	return o.FailureMessage
}

func (o *ListPaymentsDetails) GetWallet() *ListPaymentsWallet {
	if o == nil {
		return nil
	}
	return o.Wallet
}

func (o *ListPaymentsDetails) GetPaypalReference() *string {
	if o == nil {
		return nil
	}
	return o.PaypalReference
}

func (o *ListPaymentsDetails) GetPaypalPayerID() *string {
	if o == nil {
		return nil
	}
	return o.PaypalPayerID
}

func (o *ListPaymentsDetails) GetSellerProtection() *ListPaymentsSellerProtection {
	if o == nil {
		return nil
	}
	return o.SellerProtection
}

func (o *ListPaymentsDetails) GetPaypalFee() *ListPaymentsPaypalFee {
	if o == nil {
		return nil
	}
	return o.PaypalFee
}

func (o *ListPaymentsDetails) GetCustomerReference() *string {
	if o == nil {
		return nil
	}
	return o.CustomerReference
}

func (o *ListPaymentsDetails) GetTerminalID() *string {
	if o == nil {
		return nil
	}
	return o.TerminalID
}

func (o *ListPaymentsDetails) GetMaskedNumber() *string {
	if o == nil {
		return nil
	}
	return o.MaskedNumber
}

func (o *ListPaymentsDetails) GetReceipt() *ListPaymentsReceipt {
	if o == nil {
		return nil
	}
	return o.Receipt
}

func (o *ListPaymentsDetails) GetCreditorIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.CreditorIdentifier
}

func (o *ListPaymentsDetails) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *ListPaymentsDetails) GetSignatureDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.SignatureDate
}

func (o *ListPaymentsDetails) GetBankReasonCode() *string {
	if o == nil {
		return nil
	}
	return o.BankReasonCode
}

func (o *ListPaymentsDetails) GetBankReason() *string {
	if o == nil {
		return nil
	}
	return o.BankReason
}

func (o *ListPaymentsDetails) GetEndToEndIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.EndToEndIdentifier
}

func (o *ListPaymentsDetails) GetMandateReference() *string {
	if o == nil {
		return nil
	}
	return o.MandateReference
}

func (o *ListPaymentsDetails) GetBatchReference() *string {
	if o == nil {
		return nil
	}
	return o.BatchReference
}

func (o *ListPaymentsDetails) GetFileReference() *string {
	if o == nil {
		return nil
	}
	return o.FileReference
}

func (o *ListPaymentsDetails) GetQrCode() *ListPaymentsQrCode {
	if o == nil {
		return nil
	}
	return o.QrCode
}

func (o *ListPaymentsDetails) GetVoucherNumber() *string {
	if o == nil {
		return nil
	}
	return o.VoucherNumber
}

func (o *ListPaymentsDetails) GetGiftcards() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Giftcards
}

func (o *ListPaymentsDetails) GetIssuer() *string {
	if o == nil {
		return nil
	}
	return o.Issuer
}

func (o *ListPaymentsDetails) GetVouchers() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Vouchers
}

func (o *ListPaymentsDetails) GetRemainderAmount() *ListPaymentsRemainderAmount {
	if o == nil {
		return nil
	}
	return o.RemainderAmount
}

func (o *ListPaymentsDetails) GetRemainderMethod() *string {
	if o == nil {
		return nil
	}
	return o.RemainderMethod
}

func (o *ListPaymentsDetails) GetRemainderDetails() map[string]any {
	if o == nil {
		return nil
	}
	return o.RemainderDetails
}

// ListPaymentsPaymentSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListPaymentsPaymentSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsPaymentSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsPaymentSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsCheckout - The URL your customer should visit to make the payment. This is where you should redirect the customer to.
type ListPaymentsCheckout struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsCheckout) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsCheckout) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsMobileAppCheckout - The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
type ListPaymentsMobileAppCheckout struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsMobileAppCheckout) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsMobileAppCheckout) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsChangePaymentState - For test mode payments in certain scenarios, a hosted interface is available to help you test different
// payment states.
//
// Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
// payments are executed without any user interaction.
//
// Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
// chargeback for the test payment.
type ListPaymentsChangePaymentState struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsChangePaymentState) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsChangePaymentState) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsDashboard - Direct link to the payment in the Mollie Dashboard.
type ListPaymentsDashboard struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsDashboard) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsDashboard) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsRefunds - The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
type ListPaymentsRefunds struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsRefunds) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsRefunds) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsChargebacks - The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
// payment.
type ListPaymentsChargebacks struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsChargebacks) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsChargebacks) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsCaptures - The API resource URL of the [captures](list-payment-captures) that belong to this payment.
type ListPaymentsCaptures struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsCaptures) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsCaptures) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsSettlement - The API resource URL of the [settlement](get-settlement) this payment has been settled with.
// Not present if not yet settled.
type ListPaymentsSettlement struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsSettlement) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsSettlement) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsCustomer - The API resource URL of the [customer](get-customer).
type ListPaymentsCustomer struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsCustomer) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsCustomer) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsMandate - The API resource URL of the [mandate](get-mandate).
type ListPaymentsMandate struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsMandate) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsMandate) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsSubscription - The API resource URL of the [subscription](get-subscription).
type ListPaymentsSubscription struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsSubscription) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsSubscription) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsOrder - The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
// order.
type ListPaymentsOrder struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsOrder) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsOrder) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsTerminal - The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
// point-of-sale payments.
type ListPaymentsTerminal struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsTerminal) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsTerminal) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsPaymentDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListPaymentsPaymentDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsPaymentDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsPaymentDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsLinksStatus - Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
// successful).
type ListPaymentsLinksStatus struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsLinksStatus) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsLinksStatus) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsPayOnline - Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
// bank transfer.
type ListPaymentsPayOnline struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsPayOnline) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsPayOnline) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsPaymentLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type ListPaymentsPaymentLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self ListPaymentsPaymentSelf `json:"self"`
	// The URL your customer should visit to make the payment. This is where you should redirect the customer to.
	Checkout *ListPaymentsCheckout `json:"checkout,omitempty"`
	// The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
	MobileAppCheckout *ListPaymentsMobileAppCheckout `json:"mobileAppCheckout,omitempty"`
	// For test mode payments in certain scenarios, a hosted interface is available to help you test different
	// payment states.
	//
	// Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
	// payments are executed without any user interaction.
	//
	// Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
	// chargeback for the test payment.
	ChangePaymentState *ListPaymentsChangePaymentState `json:"changePaymentState,omitempty"`
	// Direct link to the payment in the Mollie Dashboard.
	Dashboard ListPaymentsDashboard `json:"dashboard"`
	// The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
	Refunds *ListPaymentsRefunds `json:"refunds,omitempty"`
	// The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
	// payment.
	Chargebacks *ListPaymentsChargebacks `json:"chargebacks,omitempty"`
	// The API resource URL of the [captures](list-payment-captures) that belong to this payment.
	Captures *ListPaymentsCaptures `json:"captures,omitempty"`
	// The API resource URL of the [settlement](get-settlement) this payment has been settled with.
	// Not present if not yet settled.
	Settlement *ListPaymentsSettlement `json:"settlement,omitempty"`
	// The API resource URL of the [customer](get-customer).
	Customer *ListPaymentsCustomer `json:"customer,omitempty"`
	// The API resource URL of the [mandate](get-mandate).
	Mandate *ListPaymentsMandate `json:"mandate,omitempty"`
	// The API resource URL of the [subscription](get-subscription).
	Subscription *ListPaymentsSubscription `json:"subscription,omitempty"`
	// The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
	// order.
	Order *ListPaymentsOrder `json:"order,omitempty"`
	// The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
	// point-of-sale payments.
	Terminal *ListPaymentsTerminal `json:"terminal,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *ListPaymentsPaymentDocumentation `json:"documentation,omitempty"`
	// Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
	// successful).
	Status *ListPaymentsLinksStatus `json:"status,omitempty"`
	// Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
	// bank transfer.
	PayOnline *ListPaymentsPayOnline `json:"payOnline,omitempty"`
}

func (o *ListPaymentsPaymentLinks) GetSelf() ListPaymentsPaymentSelf {
	if o == nil {
		return ListPaymentsPaymentSelf{}
	}
	return o.Self
}

func (o *ListPaymentsPaymentLinks) GetCheckout() *ListPaymentsCheckout {
	if o == nil {
		return nil
	}
	return o.Checkout
}

func (o *ListPaymentsPaymentLinks) GetMobileAppCheckout() *ListPaymentsMobileAppCheckout {
	if o == nil {
		return nil
	}
	return o.MobileAppCheckout
}

func (o *ListPaymentsPaymentLinks) GetChangePaymentState() *ListPaymentsChangePaymentState {
	if o == nil {
		return nil
	}
	return o.ChangePaymentState
}

func (o *ListPaymentsPaymentLinks) GetDashboard() ListPaymentsDashboard {
	if o == nil {
		return ListPaymentsDashboard{}
	}
	return o.Dashboard
}

func (o *ListPaymentsPaymentLinks) GetRefunds() *ListPaymentsRefunds {
	if o == nil {
		return nil
	}
	return o.Refunds
}

func (o *ListPaymentsPaymentLinks) GetChargebacks() *ListPaymentsChargebacks {
	if o == nil {
		return nil
	}
	return o.Chargebacks
}

func (o *ListPaymentsPaymentLinks) GetCaptures() *ListPaymentsCaptures {
	if o == nil {
		return nil
	}
	return o.Captures
}

func (o *ListPaymentsPaymentLinks) GetSettlement() *ListPaymentsSettlement {
	if o == nil {
		return nil
	}
	return o.Settlement
}

func (o *ListPaymentsPaymentLinks) GetCustomer() *ListPaymentsCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *ListPaymentsPaymentLinks) GetMandate() *ListPaymentsMandate {
	if o == nil {
		return nil
	}
	return o.Mandate
}

func (o *ListPaymentsPaymentLinks) GetSubscription() *ListPaymentsSubscription {
	if o == nil {
		return nil
	}
	return o.Subscription
}

func (o *ListPaymentsPaymentLinks) GetOrder() *ListPaymentsOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *ListPaymentsPaymentLinks) GetTerminal() *ListPaymentsTerminal {
	if o == nil {
		return nil
	}
	return o.Terminal
}

func (o *ListPaymentsPaymentLinks) GetDocumentation() *ListPaymentsPaymentDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

func (o *ListPaymentsPaymentLinks) GetStatus() *ListPaymentsLinksStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListPaymentsPaymentLinks) GetPayOnline() *ListPaymentsPayOnline {
	if o == nil {
		return nil
	}
	return o.PayOnline
}

type ListPaymentsPaymentOutput struct {
	// Indicates the response contains a payment object. Will always contain the string `payment` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this payment. Mollie assigns this identifier at payment creation time. Mollie
	// will always refer to the payment by this ID. Example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode ListPaymentsMode `json:"mode"`
	// The description of the payment. This will be shown to your customer on their card or bank statement when possible.
	// We truncate the description automatically according to the limits of the used payment method. The description is
	// also visible in any exports you generate.
	//
	// We recommend you use a unique identifier so that you can always link the payment to the order in your back office.
	// This is particularly useful for bookkeeping.
	//
	// The maximum length of the description field differs per payment method, with the absolute maximum being 255
	// characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
	Description string `json:"description"`
	// The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
	//
	// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
	// retrieved using the Get method endpoint.
	//
	// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
	// tip amount.
	Amount ListPaymentsAmount `json:"amount"`
	// The total amount that is already refunded. Only available when refunds are available for this payment. For some
	// payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
	// costs for a return shipment to the customer.
	AmountRefunded *ListPaymentsAmountRefunded `json:"amountRefunded,omitempty"`
	// The remaining amount that can be refunded. Only available when refunds are available for this payment.
	AmountRemaining *ListPaymentsAmountRemaining `json:"amountRemaining,omitempty"`
	// The total amount that is already captured for this payment. Only available when this payment supports captures.
	AmountCaptured *ListPaymentsAmountCaptured `json:"amountCaptured,omitempty"`
	// The total amount that was charged back for this payment. Only available when the total charged back amount is not
	// zero.
	AmountChargedBack *ListPaymentsAmountChargedBack `json:"amountChargedBack,omitempty"`
	// This optional field will contain the approximate amount that will be settled to your account, converted to the
	// currency your account is settled in.
	//
	// Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
	// settled by Mollie the `settlementAmount` is omitted from the response.
	//
	// Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
	// using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
	SettlementAmount *ListPaymentsSettlementAmount `json:"settlementAmount,omitempty"`
	// The URL your customer will be redirected to after the payment process.
	//
	// It could make sense for the redirectUrl to contain a unique identifier – like your order ID – so you can show the
	// right page referencing the order when your customer returns.
	//
	// The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for
	// Apple Pay payments with an `applePayPaymentToken`.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not
	// provided, the customer will be redirected to the `redirectUrl` instead — see above.
	//
	// Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is
	// therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle
	// payment cancellations.
	CancelURL *string `json:"cancelUrl,omitempty"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines []ListPaymentsLine `json:"lines,omitempty"`
	// The customer's billing address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	//
	// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
	BillingAddress *ListPaymentsBillingAddress `json:"billingAddress,omitempty"`
	// The customer's shipping address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	ShippingAddress *ListPaymentsShippingAddress `json:"shippingAddress,omitempty"`
	// Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
	// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
	// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
	// locale, but our hosted payment pages currently only support the specified languages.
	//
	// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
	// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
	// customer use a local bank account greatly increases the conversion and speed of payment.
	Locale *ListPaymentsLocale `json:"locale,omitempty"`
	// This optional field contains your customer's ISO 3166-1 alpha-2 country code, detected by us during checkout. This
	// field is omitted if the country code was not detected.
	CountryCode *string `json:"countryCode,omitempty"`
	// The payment method used for this transaction. If a specific method was selected during payment initialization,
	// this field reflects that choice.
	Method *ListPaymentsMethod `json:"method,omitempty"`
	// For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT
	// rates you have used for the order to ensure your customer's country matches the VAT country.
	//
	// Use this parameter to restrict the payment methods available to your customer to those from a single country.
	//
	// If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
	//
	// The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
	RestrictPaymentMethodsToCountry *string `json:"restrictPaymentMethodsToCountry,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *ListPaymentsMetadata `json:"metadata,omitempty"`
	// Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
	// and capture at a later time.
	//
	// This field needs to be set to `manual` for method `riverty`.
	CaptureMode *ListPaymentsCaptureMode `json:"captureMode,omitempty"`
	// **Only relevant if you wish to manage authorization and capturing separately.**
	//
	// Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a
	// later point either be 'captured' or canceled.
	//
	// By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a
	// capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For
	// example `8 hours` or `2 days`.
	//
	// To schedule an automatic capture, the `captureMode` must be set to `automatic`.
	//
	// The maximum delay is 7 days (168 hours).
	//
	// Possible values: `... hours` `... days`
	CaptureDelay *string `json:"captureDelay,omitempty"`
	// Indicates the date before which the payment needs to be captured, in ISO 8601 format. From this date onwards we
	// can no longer guarantee a successful capture. The parameter is omitted if the payment is not authorized (yet).
	CaptureBefore *string `json:"captureBefore,omitempty"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	//
	// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
	// `routing` parameter.
	ApplicationFee *ListPaymentsApplicationFee `json:"applicationFee,omitempty"`
	// *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
	//
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you create payments on your own account that you want to split between yourself and one or more connected
	// merchants, you can use this `routing` parameter to route the payment accordingly.
	//
	// The `routing` parameter should contain an array of objects, with each object describing the destination for a
	// specific portion of the payment.
	//
	// It is not necessary to indicate in the array which portion goes to yourself. After all portions of the total
	// payment amount have been routed, the amount left will be routed to the current organization automatically.
	//
	// If instead you use OAuth to create payments on a connected merchant's account, refer to the `applicationFee`
	// parameter.
	Routing []ListPaymentsRouting `json:"routing,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// Indicate which part of a recurring sequence this payment is for.
	//
	// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
	// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
	// on their account in the future.
	//
	// If set to `recurring`, the customer's card is charged automatically.
	//
	// Defaults to `oneoff`, which is a regular non-recurring payment.
	//
	// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
	// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
	// are set up correctly for recurring payments.
	SequenceType *ListPaymentsSequenceType `json:"sequenceType"`
	// If the payment was automatically created via a subscription, the ID of the [subscription](get-subscription) will
	// be added to the response.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// When creating recurring payments, the ID of a specific [mandate](get-mandate) can be supplied to indicate which of
	// the customer's accounts should be credited.
	MandateID *string `json:"mandateId,omitempty"`
	// The ID of the [customer](get-customer) the payment is being created for. This is used primarily for recurring
	// payments, but can also be used on regular payments to enable single-click payments.
	//
	// If `sequenceType` is set to `recurring`, this field is required.
	CustomerID *string `json:"customerId,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// When using an API Key, the `profileId` can be omitted since it is linked to the key. However, for OAuth and
	// Organization tokens, the `profileId` is required.
	//
	// For more information, see [Authentication](authentication).
	ProfileID string `json:"profileId"`
	// The identifier referring to the [settlement](get-settlement) this payment was settled with.
	SettlementID *string `json:"settlementId,omitempty"`
	// If the payment was created for an [order](get-order), the ID of that order will be part of the response.
	OrderID *string `json:"orderId,omitempty"`
	// The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
	// statuses occur at what point.
	Status ListPaymentsStatusEnum `json:"status"`
	// This object offers details about the status of a payment. Currently it is only available for point-of-sale
	// payments.
	//
	// You can find more information about the possible values of this object on
	// [this page](status-reasons).**
	StatusReason *ListPaymentsStatusReason `json:"statusReason,omitempty"`
	// Whether the payment can be canceled. This parameter is omitted if the payment reaches a final state.
	IsCancelable *bool `json:"isCancelable,omitempty"`
	// An object containing payment details collected during the payment process. For example, details may include the
	// customer's card or bank details and a payment reference. For the full list of details, please refer to the
	// [method-specific parameters](extra-payment-parameters) guide.
	Details *ListPaymentsDetails `json:"details,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The date and time the payment became authorized, in ISO 8601 format. This parameter is omitted if the payment is
	// not authorized (yet).
	AuthorizedAt *string `json:"authorizedAt,omitempty"`
	// The date and time the payment became paid, in ISO 8601 format. This parameter is omitted if the payment is not
	// completed (yet).
	PaidAt *string `json:"paidAt,omitempty"`
	// The date and time the payment was canceled, in ISO 8601 format. This parameter is omitted if the payment is not
	// canceled (yet).
	CanceledAt *string `json:"canceledAt,omitempty"`
	// The date and time the payment will expire, in ISO 8601 format. This parameter is omitted if the payment can no
	// longer expire.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The date and time the payment was expired, in ISO 8601 format. This parameter is omitted if the payment did not
	// expire (yet).
	ExpiredAt *string `json:"expiredAt,omitempty"`
	// The date and time the payment failed, in ISO 8601 format. This parameter is omitted if the payment did not fail
	// (yet).
	FailedAt *string `json:"failedAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links ListPaymentsPaymentLinks `json:"_links"`
}

func (o *ListPaymentsPaymentOutput) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *ListPaymentsPaymentOutput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListPaymentsPaymentOutput) GetMode() ListPaymentsMode {
	if o == nil {
		return ListPaymentsMode("")
	}
	return o.Mode
}

func (o *ListPaymentsPaymentOutput) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *ListPaymentsPaymentOutput) GetAmount() ListPaymentsAmount {
	if o == nil {
		return ListPaymentsAmount{}
	}
	return o.Amount
}

func (o *ListPaymentsPaymentOutput) GetAmountRefunded() *ListPaymentsAmountRefunded {
	if o == nil {
		return nil
	}
	return o.AmountRefunded
}

func (o *ListPaymentsPaymentOutput) GetAmountRemaining() *ListPaymentsAmountRemaining {
	if o == nil {
		return nil
	}
	return o.AmountRemaining
}

func (o *ListPaymentsPaymentOutput) GetAmountCaptured() *ListPaymentsAmountCaptured {
	if o == nil {
		return nil
	}
	return o.AmountCaptured
}

func (o *ListPaymentsPaymentOutput) GetAmountChargedBack() *ListPaymentsAmountChargedBack {
	if o == nil {
		return nil
	}
	return o.AmountChargedBack
}

func (o *ListPaymentsPaymentOutput) GetSettlementAmount() *ListPaymentsSettlementAmount {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *ListPaymentsPaymentOutput) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *ListPaymentsPaymentOutput) GetCancelURL() *string {
	if o == nil {
		return nil
	}
	return o.CancelURL
}

func (o *ListPaymentsPaymentOutput) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *ListPaymentsPaymentOutput) GetLines() []ListPaymentsLine {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *ListPaymentsPaymentOutput) GetBillingAddress() *ListPaymentsBillingAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *ListPaymentsPaymentOutput) GetShippingAddress() *ListPaymentsShippingAddress {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *ListPaymentsPaymentOutput) GetLocale() *ListPaymentsLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *ListPaymentsPaymentOutput) GetCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CountryCode
}

func (o *ListPaymentsPaymentOutput) GetMethod() *ListPaymentsMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *ListPaymentsPaymentOutput) GetRestrictPaymentMethodsToCountry() *string {
	if o == nil {
		return nil
	}
	return o.RestrictPaymentMethodsToCountry
}

func (o *ListPaymentsPaymentOutput) GetMetadata() *ListPaymentsMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ListPaymentsPaymentOutput) GetCaptureMode() *ListPaymentsCaptureMode {
	if o == nil {
		return nil
	}
	return o.CaptureMode
}

func (o *ListPaymentsPaymentOutput) GetCaptureDelay() *string {
	if o == nil {
		return nil
	}
	return o.CaptureDelay
}

func (o *ListPaymentsPaymentOutput) GetCaptureBefore() *string {
	if o == nil {
		return nil
	}
	return o.CaptureBefore
}

func (o *ListPaymentsPaymentOutput) GetApplicationFee() *ListPaymentsApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *ListPaymentsPaymentOutput) GetRouting() []ListPaymentsRouting {
	if o == nil {
		return nil
	}
	return o.Routing
}

func (o *ListPaymentsPaymentOutput) GetSequenceType() *ListPaymentsSequenceType {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *ListPaymentsPaymentOutput) GetSubscriptionID() *string {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

func (o *ListPaymentsPaymentOutput) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *ListPaymentsPaymentOutput) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *ListPaymentsPaymentOutput) GetProfileID() string {
	if o == nil {
		return ""
	}
	return o.ProfileID
}

func (o *ListPaymentsPaymentOutput) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *ListPaymentsPaymentOutput) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *ListPaymentsPaymentOutput) GetStatus() ListPaymentsStatusEnum {
	if o == nil {
		return ListPaymentsStatusEnum("")
	}
	return o.Status
}

func (o *ListPaymentsPaymentOutput) GetStatusReason() *ListPaymentsStatusReason {
	if o == nil {
		return nil
	}
	return o.StatusReason
}

func (o *ListPaymentsPaymentOutput) GetIsCancelable() *bool {
	if o == nil {
		return nil
	}
	return o.IsCancelable
}

func (o *ListPaymentsPaymentOutput) GetDetails() *ListPaymentsDetails {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *ListPaymentsPaymentOutput) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListPaymentsPaymentOutput) GetAuthorizedAt() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizedAt
}

func (o *ListPaymentsPaymentOutput) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *ListPaymentsPaymentOutput) GetCanceledAt() *string {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *ListPaymentsPaymentOutput) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *ListPaymentsPaymentOutput) GetExpiredAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredAt
}

func (o *ListPaymentsPaymentOutput) GetFailedAt() *string {
	if o == nil {
		return nil
	}
	return o.FailedAt
}

func (o *ListPaymentsPaymentOutput) GetLinks() ListPaymentsPaymentLinks {
	if o == nil {
		return ListPaymentsPaymentLinks{}
	}
	return o.Links
}

type ListPaymentsEmbedded struct {
	// An array of payment objects.
	Payments []ListPaymentsPaymentOutput `json:"payments,omitempty"`
}

func (o *ListPaymentsEmbedded) GetPayments() []ListPaymentsPaymentOutput {
	if o == nil {
		return nil
	}
	return o.Payments
}

// ListPaymentsSelf - The URL to the current set of items.
type ListPaymentsSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsPrevious - The previous set of items, if available.
type ListPaymentsPrevious struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListPaymentsPrevious) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListPaymentsPrevious) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListPaymentsNext - The next set of items, if available.
type ListPaymentsNext struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListPaymentsNext) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListPaymentsNext) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListPaymentsDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListPaymentsDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentsDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentsDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentsLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
type ListPaymentsLinks struct {
	// The URL to the current set of items.
	Self ListPaymentsSelf `json:"self"`
	// The previous set of items, if available.
	Previous *ListPaymentsPrevious `json:"previous"`
	// The next set of items, if available.
	Next *ListPaymentsNext `json:"next"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListPaymentsDocumentation `json:"documentation"`
}

func (o *ListPaymentsLinks) GetSelf() ListPaymentsSelf {
	if o == nil {
		return ListPaymentsSelf{}
	}
	return o.Self
}

func (o *ListPaymentsLinks) GetPrevious() *ListPaymentsPrevious {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *ListPaymentsLinks) GetNext() *ListPaymentsNext {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListPaymentsLinks) GetDocumentation() ListPaymentsDocumentation {
	if o == nil {
		return ListPaymentsDocumentation{}
	}
	return o.Documentation
}

// ListPaymentsResponseBody - A list of payment objects.
type ListPaymentsResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    int64                `json:"count"`
	Embedded ListPaymentsEmbedded `json:"_embedded"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links ListPaymentsLinks `json:"_links"`
}

func (o *ListPaymentsResponseBody) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListPaymentsResponseBody) GetEmbedded() ListPaymentsEmbedded {
	if o == nil {
		return ListPaymentsEmbedded{}
	}
	return o.Embedded
}

func (o *ListPaymentsResponseBody) GetLinks() ListPaymentsLinks {
	if o == nil {
		return ListPaymentsLinks{}
	}
	return o.Links
}

type ListPaymentsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of payment objects.
	Object *ListPaymentsResponseBody
}

func (o *ListPaymentsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListPaymentsResponse) GetObject() *ListPaymentsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
