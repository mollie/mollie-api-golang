// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

type ListSalesInvoicesRequest struct {
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
	// result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *ListSalesInvoicesRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListSalesInvoicesRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListSalesInvoicesRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// ListSalesInvoicesBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type ListSalesInvoicesBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListSalesInvoicesBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSalesInvoicesBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListSalesInvoicesBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListSalesInvoicesBadRequestDocumentation `json:"documentation"`
}

func (o *ListSalesInvoicesBadRequestLinks) GetDocumentation() ListSalesInvoicesBadRequestDocumentation {
	if o == nil {
		return ListSalesInvoicesBadRequestDocumentation{}
	}
	return o.Documentation
}

// ListSalesInvoicesStatus - The status for the invoice to end up in.
//
// A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
// the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
// mark it as paid. It can then subsequently be sent as well, same as with `issued`.
//
// A status value that cannot be set but can be returned is `canceled`, for invoices which were
// issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
//
// Dependent parameters:
//   - `paymentDetails` is required if invoice should be set directly to `paid`
//   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
//   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
type ListSalesInvoicesStatus string

const (
	ListSalesInvoicesStatusDraft  ListSalesInvoicesStatus = "draft"
	ListSalesInvoicesStatusIssued ListSalesInvoicesStatus = "issued"
	ListSalesInvoicesStatusPaid   ListSalesInvoicesStatus = "paid"
)

func (e ListSalesInvoicesStatus) ToPointer() *ListSalesInvoicesStatus {
	return &e
}
func (e *ListSalesInvoicesStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "issued":
		fallthrough
	case "paid":
		*e = ListSalesInvoicesStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSalesInvoicesStatus: %v", v)
	}
}

// ListSalesInvoicesVatScheme - The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
type ListSalesInvoicesVatScheme string

const (
	ListSalesInvoicesVatSchemeStandard    ListSalesInvoicesVatScheme = "standard"
	ListSalesInvoicesVatSchemeOneStopShop ListSalesInvoicesVatScheme = "one-stop-shop"
)

func (e ListSalesInvoicesVatScheme) ToPointer() *ListSalesInvoicesVatScheme {
	return &e
}
func (e *ListSalesInvoicesVatScheme) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "one-stop-shop":
		*e = ListSalesInvoicesVatScheme(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSalesInvoicesVatScheme: %v", v)
	}
}

// ListSalesInvoicesVatMode - The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
// price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
type ListSalesInvoicesVatMode string

const (
	ListSalesInvoicesVatModeExclusive ListSalesInvoicesVatMode = "exclusive"
	ListSalesInvoicesVatModeInclusive ListSalesInvoicesVatMode = "inclusive"
)

func (e ListSalesInvoicesVatMode) ToPointer() *ListSalesInvoicesVatMode {
	return &e
}
func (e *ListSalesInvoicesVatMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "exclusive":
		fallthrough
	case "inclusive":
		*e = ListSalesInvoicesVatMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSalesInvoicesVatMode: %v", v)
	}
}

// ListSalesInvoicesMetadata - Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type ListSalesInvoicesMetadata struct {
}

// ListSalesInvoicesPaymentTerm - The payment term to be set on the invoice.
type ListSalesInvoicesPaymentTerm string

const (
	ListSalesInvoicesPaymentTermSevendays               ListSalesInvoicesPaymentTerm = "7 days"
	ListSalesInvoicesPaymentTermFourteendays            ListSalesInvoicesPaymentTerm = "14 days"
	ListSalesInvoicesPaymentTermThirtydays              ListSalesInvoicesPaymentTerm = "30 days"
	ListSalesInvoicesPaymentTermFortyFivedays           ListSalesInvoicesPaymentTerm = "45 days"
	ListSalesInvoicesPaymentTermSixtydays               ListSalesInvoicesPaymentTerm = "60 days"
	ListSalesInvoicesPaymentTermNinetydays              ListSalesInvoicesPaymentTerm = "90 days"
	ListSalesInvoicesPaymentTermOneHundredAndTwentydays ListSalesInvoicesPaymentTerm = "120 days"
)

func (e ListSalesInvoicesPaymentTerm) ToPointer() *ListSalesInvoicesPaymentTerm {
	return &e
}
func (e *ListSalesInvoicesPaymentTerm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "7 days":
		fallthrough
	case "14 days":
		fallthrough
	case "30 days":
		fallthrough
	case "45 days":
		fallthrough
	case "60 days":
		fallthrough
	case "90 days":
		fallthrough
	case "120 days":
		*e = ListSalesInvoicesPaymentTerm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSalesInvoicesPaymentTerm: %v", v)
	}
}

// ListSalesInvoicesSource - The way through which the invoice is to be set to paid.
type ListSalesInvoicesSource string

const (
	ListSalesInvoicesSourceManual      ListSalesInvoicesSource = "manual"
	ListSalesInvoicesSourcePaymentLink ListSalesInvoicesSource = "payment-link"
	ListSalesInvoicesSourcePayment     ListSalesInvoicesSource = "payment"
)

func (e ListSalesInvoicesSource) ToPointer() *ListSalesInvoicesSource {
	return &e
}
func (e *ListSalesInvoicesSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manual":
		fallthrough
	case "payment-link":
		fallthrough
	case "payment":
		*e = ListSalesInvoicesSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSalesInvoicesSource: %v", v)
	}
}

// ListSalesInvoicesPaymentDetails - Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
// provided details. Required for `paid` status.
type ListSalesInvoicesPaymentDetails struct {
	// The way through which the invoice is to be set to paid.
	Source ListSalesInvoicesSource `json:"source"`
	// A reference to the payment the sales invoice is paid by. Required for `source` values `payment-link` and
	// `payment`.
	SourceReference *string `json:"sourceReference,omitempty"`
}

func (o *ListSalesInvoicesPaymentDetails) GetSource() ListSalesInvoicesSource {
	if o == nil {
		return ListSalesInvoicesSource("")
	}
	return o.Source
}

func (o *ListSalesInvoicesPaymentDetails) GetSourceReference() *string {
	if o == nil {
		return nil
	}
	return o.SourceReference
}

// ListSalesInvoicesEmailDetails - Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
// recipient with the provided `subject` and `body`. Required for `issued` status.
type ListSalesInvoicesEmailDetails struct {
	// The subject of the email to be sent.
	Subject string `json:"subject"`
	// The body of the email to be sent. To add newline characters, you can use `\n`.
	Body string `json:"body"`
}

func (o *ListSalesInvoicesEmailDetails) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

func (o *ListSalesInvoicesEmailDetails) GetBody() string {
	if o == nil {
		return ""
	}
	return o.Body
}

// ListSalesInvoicesRecipientType - The type of recipient, either `consumer` or `business`. This will determine what further fields are
// required on the `recipient` object.
type ListSalesInvoicesRecipientType string

const (
	ListSalesInvoicesRecipientTypeConsumer ListSalesInvoicesRecipientType = "consumer"
	ListSalesInvoicesRecipientTypeBusiness ListSalesInvoicesRecipientType = "business"
)

func (e ListSalesInvoicesRecipientType) ToPointer() *ListSalesInvoicesRecipientType {
	return &e
}
func (e *ListSalesInvoicesRecipientType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "business":
		*e = ListSalesInvoicesRecipientType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSalesInvoicesRecipientType: %v", v)
	}
}

// ListSalesInvoicesLocale - The locale for the recipient, to be used for translations in PDF generation and payment pages.
type ListSalesInvoicesLocale string

const (
	ListSalesInvoicesLocaleEnUs ListSalesInvoicesLocale = "en_US"
	ListSalesInvoicesLocaleEnGb ListSalesInvoicesLocale = "en_GB"
	ListSalesInvoicesLocaleNlNl ListSalesInvoicesLocale = "nl_NL"
	ListSalesInvoicesLocaleNlBe ListSalesInvoicesLocale = "nl_BE"
	ListSalesInvoicesLocaleDeDe ListSalesInvoicesLocale = "de_DE"
	ListSalesInvoicesLocaleDeAt ListSalesInvoicesLocale = "de_AT"
	ListSalesInvoicesLocaleDeCh ListSalesInvoicesLocale = "de_CH"
	ListSalesInvoicesLocaleFrFr ListSalesInvoicesLocale = "fr_FR"
	ListSalesInvoicesLocaleFrBe ListSalesInvoicesLocale = "fr_BE"
)

func (e ListSalesInvoicesLocale) ToPointer() *ListSalesInvoicesLocale {
	return &e
}
func (e *ListSalesInvoicesLocale) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		*e = ListSalesInvoicesLocale(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSalesInvoicesLocale: %v", v)
	}
}

type ListSalesInvoicesRecipient struct {
	// The type of recipient, either `consumer` or `business`. This will determine what further fields are
	// required on the `recipient` object.
	Type ListSalesInvoicesRecipientType `json:"type"`
	// The title of the `consumer` type recipient, for example Mr. or Mrs..
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain
	// only numbers.
	GivenName *string `json:"givenName,omitempty"`
	// The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain
	// only numbers.
	FamilyName *string `json:"familyName,omitempty"`
	// The trading name of the `business` type recipient.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber`
	// has to be provided.
	OrganizationNumber *string `json:"organizationNumber,omitempty"`
	// The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber`
	// has to be provided.
	VatNumber *string `json:"vatNumber,omitempty"`
	// The email address of the recipient.
	Email string `json:"email"`
	// The phone number of the recipient.
	Phone *string `json:"phone,omitempty"`
	// A street and street number.
	StreetAndNumber string `json:"streetAndNumber"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code.
	PostalCode string `json:"postalCode"`
	// The recipient's city.
	City string `json:"city"`
	// The recipient's region.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	Country string `json:"country"`
	// The locale for the recipient, to be used for translations in PDF generation and payment pages.
	Locale ListSalesInvoicesLocale `json:"locale"`
}

func (o *ListSalesInvoicesRecipient) GetType() ListSalesInvoicesRecipientType {
	if o == nil {
		return ListSalesInvoicesRecipientType("")
	}
	return o.Type
}

func (o *ListSalesInvoicesRecipient) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *ListSalesInvoicesRecipient) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *ListSalesInvoicesRecipient) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *ListSalesInvoicesRecipient) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *ListSalesInvoicesRecipient) GetOrganizationNumber() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationNumber
}

func (o *ListSalesInvoicesRecipient) GetVatNumber() *string {
	if o == nil {
		return nil
	}
	return o.VatNumber
}

func (o *ListSalesInvoicesRecipient) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *ListSalesInvoicesRecipient) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *ListSalesInvoicesRecipient) GetStreetAndNumber() string {
	if o == nil {
		return ""
	}
	return o.StreetAndNumber
}

func (o *ListSalesInvoicesRecipient) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *ListSalesInvoicesRecipient) GetPostalCode() string {
	if o == nil {
		return ""
	}
	return o.PostalCode
}

func (o *ListSalesInvoicesRecipient) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *ListSalesInvoicesRecipient) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *ListSalesInvoicesRecipient) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *ListSalesInvoicesRecipient) GetLocale() ListSalesInvoicesLocale {
	if o == nil {
		return ListSalesInvoicesLocale("")
	}
	return o.Locale
}

// ListSalesInvoicesUnitPrice - The price of a single item excluding VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// The unit price can be zero in case of free items.
type ListSalesInvoicesUnitPrice struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSalesInvoicesUnitPrice) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSalesInvoicesUnitPrice) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSalesInvoicesLineType - The type of discount.
type ListSalesInvoicesLineType string

const (
	ListSalesInvoicesLineTypeAmount     ListSalesInvoicesLineType = "amount"
	ListSalesInvoicesLineTypePercentage ListSalesInvoicesLineType = "percentage"
)

func (e ListSalesInvoicesLineType) ToPointer() *ListSalesInvoicesLineType {
	return &e
}
func (e *ListSalesInvoicesLineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amount":
		fallthrough
	case "percentage":
		*e = ListSalesInvoicesLineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSalesInvoicesLineType: %v", v)
	}
}

// ListSalesInvoicesLineDiscount - The discount to be applied to the line item.
type ListSalesInvoicesLineDiscount struct {
	// The type of discount.
	Type ListSalesInvoicesLineType `json:"type"`
	// A string containing an exact monetary amount in the given currency, or the percentage.
	Value string `json:"value"`
}

func (o *ListSalesInvoicesLineDiscount) GetType() ListSalesInvoicesLineType {
	if o == nil {
		return ListSalesInvoicesLineType("")
	}
	return o.Type
}

func (o *ListSalesInvoicesLineDiscount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type ListSalesInvoicesLine struct {
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The vat rate to be applied to this line item.
	VatRate string `json:"vatRate"`
	// The price of a single item excluding VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// The unit price can be zero in case of free items.
	UnitPrice ListSalesInvoicesUnitPrice `json:"unitPrice"`
	// The discount to be applied to the line item.
	Discount *ListSalesInvoicesLineDiscount `json:"discount,omitempty"`
}

func (o *ListSalesInvoicesLine) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *ListSalesInvoicesLine) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *ListSalesInvoicesLine) GetVatRate() string {
	if o == nil {
		return ""
	}
	return o.VatRate
}

func (o *ListSalesInvoicesLine) GetUnitPrice() ListSalesInvoicesUnitPrice {
	if o == nil {
		return ListSalesInvoicesUnitPrice{}
	}
	return o.UnitPrice
}

func (o *ListSalesInvoicesLine) GetDiscount() *ListSalesInvoicesLineDiscount {
	if o == nil {
		return nil
	}
	return o.Discount
}

// ListSalesInvoicesDiscountType - The type of discount.
type ListSalesInvoicesDiscountType string

const (
	ListSalesInvoicesDiscountTypeAmount     ListSalesInvoicesDiscountType = "amount"
	ListSalesInvoicesDiscountTypePercentage ListSalesInvoicesDiscountType = "percentage"
)

func (e ListSalesInvoicesDiscountType) ToPointer() *ListSalesInvoicesDiscountType {
	return &e
}
func (e *ListSalesInvoicesDiscountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amount":
		fallthrough
	case "percentage":
		*e = ListSalesInvoicesDiscountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSalesInvoicesDiscountType: %v", v)
	}
}

// ListSalesInvoicesDiscount - The discount to be applied to the entire invoice, applied on top of any line item discounts.
type ListSalesInvoicesDiscount struct {
	// The type of discount.
	Type ListSalesInvoicesDiscountType `json:"type"`
	// A string containing an exact monetary amount in the given currency, or the percentage.
	Value string `json:"value"`
}

func (o *ListSalesInvoicesDiscount) GetType() ListSalesInvoicesDiscountType {
	if o == nil {
		return ListSalesInvoicesDiscountType("")
	}
	return o.Type
}

func (o *ListSalesInvoicesDiscount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSalesInvoicesAmountDue - The amount that is left to be paid.
type ListSalesInvoicesAmountDue struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSalesInvoicesAmountDue) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSalesInvoicesAmountDue) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSalesInvoicesSubtotalAmount - The total amount without VAT before discounts.
type ListSalesInvoicesSubtotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSalesInvoicesSubtotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSalesInvoicesSubtotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSalesInvoicesTotalAmount - The total amount with VAT.
type ListSalesInvoicesTotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSalesInvoicesTotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSalesInvoicesTotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSalesInvoicesTotalVatAmount - The total VAT amount.
type ListSalesInvoicesTotalVatAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSalesInvoicesTotalVatAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSalesInvoicesTotalVatAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListSalesInvoicesDiscountedSubtotalAmount - The total amount without VAT after discounts.
type ListSalesInvoicesDiscountedSubtotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListSalesInvoicesDiscountedSubtotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListSalesInvoicesDiscountedSubtotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// SalesInvoiceSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type SalesInvoiceSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *SalesInvoiceSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *SalesInvoiceSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSalesInvoicesInvoicePayment - The URL your customer should visit to make payment for the invoice. This is where you should redirect the
// customer to unless the `status` is set to `paid`.
type ListSalesInvoicesInvoicePayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSalesInvoicesInvoicePayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSalesInvoicesInvoicePayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSalesInvoicesPdfLink - The URL the invoice is available at, if generated.
type ListSalesInvoicesPdfLink struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSalesInvoicesPdfLink) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSalesInvoicesPdfLink) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// SalesInvoiceDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type SalesInvoiceDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *SalesInvoiceDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *SalesInvoiceDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// SalesInvoiceLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type SalesInvoiceLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *SalesInvoiceSelf `json:"self,omitempty"`
	// The URL your customer should visit to make payment for the invoice. This is where you should redirect the
	// customer to unless the `status` is set to `paid`.
	InvoicePayment *ListSalesInvoicesInvoicePayment `json:"invoicePayment,omitempty"`
	// The URL the invoice is available at, if generated.
	PdfLink *ListSalesInvoicesPdfLink `json:"pdfLink,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *SalesInvoiceDocumentation `json:"documentation,omitempty"`
}

func (o *SalesInvoiceLinks) GetSelf() *SalesInvoiceSelf {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *SalesInvoiceLinks) GetInvoicePayment() *ListSalesInvoicesInvoicePayment {
	if o == nil {
		return nil
	}
	return o.InvoicePayment
}

func (o *SalesInvoiceLinks) GetPdfLink() *ListSalesInvoicesPdfLink {
	if o == nil {
		return nil
	}
	return o.PdfLink
}

func (o *SalesInvoiceLinks) GetDocumentation() *SalesInvoiceDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

type SalesInvoice struct {
	// Indicates the response contains a sales invoice object. Will always contain the string `sales-invoice` for this
	// endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this invoice. Example: `invoice_4Y0eZitmBnQ6IDoMqZQKh`.
	ID *string `json:"id,omitempty"`
	// When issued, an invoice number will be set for the sales invoice.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`
	// The status for the invoice to end up in.
	//
	// A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
	// the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
	// mark it as paid. It can then subsequently be sent as well, same as with `issued`.
	//
	// A status value that cannot be set but can be returned is `canceled`, for invoices which were
	// issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
	//
	// Dependent parameters:
	//   - `paymentDetails` is required if invoice should be set directly to `paid`
	//   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
	//   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
	Status *ListSalesInvoicesStatus `json:"status,omitempty"`
	// The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
	VatScheme *ListSalesInvoicesVatScheme `json:"vatScheme,omitempty"`
	// The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
	// price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
	VatMode *ListSalesInvoicesVatMode `json:"vatMode,omitempty"`
	// A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
	Memo *string `json:"memo,omitempty"`
	// Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *ListSalesInvoicesMetadata `json:"metadata,omitempty"`
	// The payment term to be set on the invoice.
	PaymentTerm *ListSalesInvoicesPaymentTerm `json:"paymentTerm,omitempty"`
	// Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
	// provided details. Required for `paid` status.
	PaymentDetails *ListSalesInvoicesPaymentDetails `json:"paymentDetails,omitempty"`
	// Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
	// recipient with the provided `subject` and `body`. Required for `issued` status.
	EmailDetails *ListSalesInvoicesEmailDetails `json:"emailDetails,omitempty"`
	// The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
	// provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
	CustomerID *string `json:"customerId,omitempty"`
	// The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
	// `customerId` becomes required as well. Only allowed for invoices with status `paid`.
	MandateID *string `json:"mandateId,omitempty"`
	// An identifier tied to the recipient data. This should be a unique value based on data your system contains,
	// so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
	// is not required to send a first invoice to a recipient.
	RecipientIdentifier *string                     `json:"recipientIdentifier,omitempty"`
	Recipient           *ListSalesInvoicesRecipient `json:"recipient,omitempty"`
	// Provide the line items for the invoice. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the invoice.
	Lines []ListSalesInvoicesLine `json:"lines,omitempty"`
	// The discount to be applied to the entire invoice, applied on top of any line item discounts.
	Discount *ListSalesInvoicesDiscount `json:"discount,omitempty"`
	// The amount that is left to be paid.
	AmountDue *ListSalesInvoicesAmountDue `json:"amountDue,omitempty"`
	// The total amount without VAT before discounts.
	SubtotalAmount *ListSalesInvoicesSubtotalAmount `json:"subtotalAmount,omitempty"`
	// The total amount with VAT.
	TotalAmount *ListSalesInvoicesTotalAmount `json:"totalAmount,omitempty"`
	// The total VAT amount.
	TotalVatAmount *ListSalesInvoicesTotalVatAmount `json:"totalVatAmount,omitempty"`
	// The total amount without VAT after discounts.
	DiscountedSubtotalAmount *ListSalesInvoicesDiscountedSubtotalAmount `json:"discountedSubtotalAmount,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// If issued, the date when the sales invoice was issued, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format.
	IssuedAt *string `json:"issuedAt,omitempty"`
	// If paid, the date when the sales invoice was paid, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format.
	PaidAt *string `json:"paidAt,omitempty"`
	// If issued, the date when the sales invoice payment is due, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format.
	DueAt *string `json:"dueAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *SalesInvoiceLinks `json:"_links,omitempty"`
}

func (o *SalesInvoice) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *SalesInvoice) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SalesInvoice) GetInvoiceNumber() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceNumber
}

func (o *SalesInvoice) GetStatus() *ListSalesInvoicesStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *SalesInvoice) GetVatScheme() *ListSalesInvoicesVatScheme {
	if o == nil {
		return nil
	}
	return o.VatScheme
}

func (o *SalesInvoice) GetVatMode() *ListSalesInvoicesVatMode {
	if o == nil {
		return nil
	}
	return o.VatMode
}

func (o *SalesInvoice) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *SalesInvoice) GetMetadata() *ListSalesInvoicesMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *SalesInvoice) GetPaymentTerm() *ListSalesInvoicesPaymentTerm {
	if o == nil {
		return nil
	}
	return o.PaymentTerm
}

func (o *SalesInvoice) GetPaymentDetails() *ListSalesInvoicesPaymentDetails {
	if o == nil {
		return nil
	}
	return o.PaymentDetails
}

func (o *SalesInvoice) GetEmailDetails() *ListSalesInvoicesEmailDetails {
	if o == nil {
		return nil
	}
	return o.EmailDetails
}

func (o *SalesInvoice) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *SalesInvoice) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *SalesInvoice) GetRecipientIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.RecipientIdentifier
}

func (o *SalesInvoice) GetRecipient() *ListSalesInvoicesRecipient {
	if o == nil {
		return nil
	}
	return o.Recipient
}

func (o *SalesInvoice) GetLines() []ListSalesInvoicesLine {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *SalesInvoice) GetDiscount() *ListSalesInvoicesDiscount {
	if o == nil {
		return nil
	}
	return o.Discount
}

func (o *SalesInvoice) GetAmountDue() *ListSalesInvoicesAmountDue {
	if o == nil {
		return nil
	}
	return o.AmountDue
}

func (o *SalesInvoice) GetSubtotalAmount() *ListSalesInvoicesSubtotalAmount {
	if o == nil {
		return nil
	}
	return o.SubtotalAmount
}

func (o *SalesInvoice) GetTotalAmount() *ListSalesInvoicesTotalAmount {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *SalesInvoice) GetTotalVatAmount() *ListSalesInvoicesTotalVatAmount {
	if o == nil {
		return nil
	}
	return o.TotalVatAmount
}

func (o *SalesInvoice) GetDiscountedSubtotalAmount() *ListSalesInvoicesDiscountedSubtotalAmount {
	if o == nil {
		return nil
	}
	return o.DiscountedSubtotalAmount
}

func (o *SalesInvoice) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *SalesInvoice) GetIssuedAt() *string {
	if o == nil {
		return nil
	}
	return o.IssuedAt
}

func (o *SalesInvoice) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *SalesInvoice) GetDueAt() *string {
	if o == nil {
		return nil
	}
	return o.DueAt
}

func (o *SalesInvoice) GetLinks() *SalesInvoiceLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type ListSalesInvoicesEmbedded struct {
	// An array of sales invoice objects. For a complete reference of the sales invoice object, refer to
	// the [Get sales invoice endpoint](get-sales-invoice) documentation.
	SalesInvoices []SalesInvoice `json:"sales_invoices,omitempty"`
}

func (o *ListSalesInvoicesEmbedded) GetSalesInvoices() []SalesInvoice {
	if o == nil {
		return nil
	}
	return o.SalesInvoices
}

// ListSalesInvoicesSelf - The URL to the current set of items.
type ListSalesInvoicesSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSalesInvoicesSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSalesInvoicesSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSalesInvoicesPrevious - The previous set of items, if available.
type ListSalesInvoicesPrevious struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSalesInvoicesPrevious) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSalesInvoicesPrevious) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSalesInvoicesNext - The next set of items, if available.
type ListSalesInvoicesNext struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListSalesInvoicesNext) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListSalesInvoicesNext) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListSalesInvoicesDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListSalesInvoicesDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListSalesInvoicesDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListSalesInvoicesDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListSalesInvoicesLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
type ListSalesInvoicesLinks struct {
	// The URL to the current set of items.
	Self ListSalesInvoicesSelf `json:"self"`
	// The previous set of items, if available.
	Previous *ListSalesInvoicesPrevious `json:"previous"`
	// The next set of items, if available.
	Next *ListSalesInvoicesNext `json:"next"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListSalesInvoicesDocumentation `json:"documentation"`
}

func (o *ListSalesInvoicesLinks) GetSelf() ListSalesInvoicesSelf {
	if o == nil {
		return ListSalesInvoicesSelf{}
	}
	return o.Self
}

func (o *ListSalesInvoicesLinks) GetPrevious() *ListSalesInvoicesPrevious {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *ListSalesInvoicesLinks) GetNext() *ListSalesInvoicesNext {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListSalesInvoicesLinks) GetDocumentation() ListSalesInvoicesDocumentation {
	if o == nil {
		return ListSalesInvoicesDocumentation{}
	}
	return o.Documentation
}

// ListSalesInvoicesResponseBody - A list of sales invoice objects. For a complete reference of the sales invoice object, refer to the
// [Get sales invoice endpoint](get-sales-invoice) documentation.
type ListSalesInvoicesResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    *int64                     `json:"count,omitempty"`
	Embedded *ListSalesInvoicesEmbedded `json:"_embedded,omitempty"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links *ListSalesInvoicesLinks `json:"_links,omitempty"`
}

func (o *ListSalesInvoicesResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ListSalesInvoicesResponseBody) GetEmbedded() *ListSalesInvoicesEmbedded {
	if o == nil {
		return nil
	}
	return o.Embedded
}

func (o *ListSalesInvoicesResponseBody) GetLinks() *ListSalesInvoicesLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type ListSalesInvoicesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of sales invoice objects. For a complete reference of the sales invoice object, refer to the
	// [Get sales invoice endpoint](get-sales-invoice) documentation.
	Object *ListSalesInvoicesResponseBody
}

func (o *ListSalesInvoicesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListSalesInvoicesResponse) GetObject() *ListSalesInvoicesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
