// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// GetMethodLocale - Passing a locale will sort the payment methods in the preferred order
// for the country, and translate the payment method names in the corresponding language.
type GetMethodLocale string

const (
	GetMethodLocaleEnUs GetMethodLocale = "en_US"
	GetMethodLocaleEnGb GetMethodLocale = "en_GB"
	GetMethodLocaleNlNl GetMethodLocale = "nl_NL"
	GetMethodLocaleNlBe GetMethodLocale = "nl_BE"
	GetMethodLocaleDeDe GetMethodLocale = "de_DE"
	GetMethodLocaleDeAt GetMethodLocale = "de_AT"
	GetMethodLocaleDeCh GetMethodLocale = "de_CH"
	GetMethodLocaleFrFr GetMethodLocale = "fr_FR"
	GetMethodLocaleFrBe GetMethodLocale = "fr_BE"
	GetMethodLocaleEsEs GetMethodLocale = "es_ES"
	GetMethodLocaleCaEs GetMethodLocale = "ca_ES"
	GetMethodLocalePtPt GetMethodLocale = "pt_PT"
	GetMethodLocaleItIt GetMethodLocale = "it_IT"
	GetMethodLocaleNbNo GetMethodLocale = "nb_NO"
	GetMethodLocaleSvSe GetMethodLocale = "sv_SE"
	GetMethodLocaleFiFi GetMethodLocale = "fi_FI"
	GetMethodLocaleDaDk GetMethodLocale = "da_DK"
	GetMethodLocaleIsIs GetMethodLocale = "is_IS"
	GetMethodLocaleHuHu GetMethodLocale = "hu_HU"
	GetMethodLocalePlPl GetMethodLocale = "pl_PL"
	GetMethodLocaleLvLv GetMethodLocale = "lv_LV"
	GetMethodLocaleLtLt GetMethodLocale = "lt_LT"
)

func (e GetMethodLocale) ToPointer() *GetMethodLocale {
	return &e
}
func (e *GetMethodLocale) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		fallthrough
	case "es_ES":
		fallthrough
	case "ca_ES":
		fallthrough
	case "pt_PT":
		fallthrough
	case "it_IT":
		fallthrough
	case "nb_NO":
		fallthrough
	case "sv_SE":
		fallthrough
	case "fi_FI":
		fallthrough
	case "da_DK":
		fallthrough
	case "is_IS":
		fallthrough
	case "hu_HU":
		fallthrough
	case "pl_PL":
		fallthrough
	case "lv_LV":
		fallthrough
	case "lt_LT":
		*e = GetMethodLocale(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMethodLocale: %v", v)
	}
}

// GetMethodInclude - This endpoint allows you to include additional information via the
// `include` query string parameter.
type GetMethodInclude string

const (
	GetMethodIncludeIssuers GetMethodInclude = "issuers"
)

func (e GetMethodInclude) ToPointer() *GetMethodInclude {
	return &e
}
func (e *GetMethodInclude) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "issuers":
		*e = GetMethodInclude(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMethodInclude: %v", v)
	}
}

// GetMethodSequenceType - Set this parameter to `first` to only return the methods that
// can be used for the first payment of a recurring sequence.
//
// Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
type GetMethodSequenceType string

const (
	GetMethodSequenceTypeOneoff    GetMethodSequenceType = "oneoff"
	GetMethodSequenceTypeFirst     GetMethodSequenceType = "first"
	GetMethodSequenceTypeRecurring GetMethodSequenceType = "recurring"
)

func (e GetMethodSequenceType) ToPointer() *GetMethodSequenceType {
	return &e
}
func (e *GetMethodSequenceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oneoff":
		fallthrough
	case "first":
		fallthrough
	case "recurring":
		*e = GetMethodSequenceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMethodSequenceType: %v", v)
	}
}

type GetMethodRequest struct {
	// Provide the ID of the item you want to perform this operation on.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Passing a locale will sort the payment methods in the preferred order
	// for the country, and translate the payment method names in the corresponding language.
	Locale *GetMethodLocale `queryParam:"style=form,explode=true,name=locale"`
	// If provided, the `minimumAmount` and `maximumAmount` will be converted
	// to the given currency. An error is returned if the currency is not supported by the payment method.
	Currency *string `queryParam:"style=form,explode=true,name=currency"`
	// The identifier referring to the [profile](get-profile) you wish to
	// retrieve the resources for.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
	// organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
	ProfileID *string `queryParam:"style=form,explode=true,name=profileId"`
	// This endpoint allows you to include additional information via the
	// `include` query string parameter.
	Include *GetMethodInclude `queryParam:"style=form,explode=true,name=include"`
	// Set this parameter to `first` to only return the methods that
	// can be used for the first payment of a recurring sequence.
	//
	// Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
	SequenceType *GetMethodSequenceType `queryParam:"style=form,explode=true,name=sequenceType"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *GetMethodRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetMethodRequest) GetLocale() *GetMethodLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *GetMethodRequest) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *GetMethodRequest) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *GetMethodRequest) GetInclude() *GetMethodInclude {
	if o == nil {
		return nil
	}
	return o.Include
}

func (o *GetMethodRequest) GetSequenceType() *GetMethodSequenceType {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *GetMethodRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// GetMethodNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type GetMethodNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetMethodNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetMethodNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetMethodNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetMethodNotFoundDocumentation `json:"documentation"`
}

func (o *GetMethodNotFoundLinks) GetDocumentation() GetMethodNotFoundDocumentation {
	if o == nil {
		return GetMethodNotFoundDocumentation{}
	}
	return o.Documentation
}

// GetMethodBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type GetMethodBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetMethodBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetMethodBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetMethodBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetMethodBadRequestDocumentation `json:"documentation"`
}

func (o *GetMethodBadRequestLinks) GetDocumentation() GetMethodBadRequestDocumentation {
	if o == nil {
		return GetMethodBadRequestDocumentation{}
	}
	return o.Documentation
}

// GetMethodID - The unique identifier of the payment method. When used during [payment creation](create-payment), the payment
// method selection screen will be skipped.
type GetMethodID string

const (
	GetMethodIDAlma           GetMethodID = "alma"
	GetMethodIDApplepay       GetMethodID = "applepay"
	GetMethodIDBacs           GetMethodID = "bacs"
	GetMethodIDBancomatpay    GetMethodID = "bancomatpay"
	GetMethodIDBancontact     GetMethodID = "bancontact"
	GetMethodIDBanktransfer   GetMethodID = "banktransfer"
	GetMethodIDBelfius        GetMethodID = "belfius"
	GetMethodIDBillie         GetMethodID = "billie"
	GetMethodIDBizum          GetMethodID = "bizum"
	GetMethodIDBlik           GetMethodID = "blik"
	GetMethodIDCreditcard     GetMethodID = "creditcard"
	GetMethodIDDirectdebit    GetMethodID = "directdebit"
	GetMethodIDEps            GetMethodID = "eps"
	GetMethodIDGiftcard       GetMethodID = "giftcard"
	GetMethodIDIdeal          GetMethodID = "ideal"
	GetMethodIDIn3            GetMethodID = "in3"
	GetMethodIDKbc            GetMethodID = "kbc"
	GetMethodIDKlarna         GetMethodID = "klarna"
	GetMethodIDKlarnapaylater GetMethodID = "klarnapaylater"
	GetMethodIDKlarnapaynow   GetMethodID = "klarnapaynow"
	GetMethodIDKlarnasliceit  GetMethodID = "klarnasliceit"
	GetMethodIDMbway          GetMethodID = "mbway"
	GetMethodIDMultibanco     GetMethodID = "multibanco"
	GetMethodIDMybank         GetMethodID = "mybank"
	GetMethodIDPaybybank      GetMethodID = "paybybank"
	GetMethodIDPayconiq       GetMethodID = "payconiq"
	GetMethodIDPaypal         GetMethodID = "paypal"
	GetMethodIDPaysafecard    GetMethodID = "paysafecard"
	GetMethodIDPointofsale    GetMethodID = "pointofsale"
	GetMethodIDPrzelewy24     GetMethodID = "przelewy24"
	GetMethodIDRiverty        GetMethodID = "riverty"
	GetMethodIDSatispay       GetMethodID = "satispay"
	GetMethodIDSwish          GetMethodID = "swish"
	GetMethodIDTrustly        GetMethodID = "trustly"
	GetMethodIDTwint          GetMethodID = "twint"
	GetMethodIDVoucher        GetMethodID = "voucher"
)

func (e GetMethodID) ToPointer() *GetMethodID {
	return &e
}

// GetMethodMinimumAmount - The minimum payment amount required to use this payment method.
type GetMethodMinimumAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetMethodMinimumAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetMethodMinimumAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetMethodMaximumAmount - The maximum payment amount allowed when using this payment method. If there is no method-specific maximum, `null`
// is returned instead.
type GetMethodMaximumAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetMethodMaximumAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetMethodMaximumAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetMethodImage - URLs of images representing the payment method.
type GetMethodImage struct {
	// The URL pointing to an icon of 32 by 24 pixels.
	Size1x string `json:"size1x"`
	// The URL pointing to an icon of 64 by 48 pixels.
	Size2x string `json:"size2x"`
	// The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can
	// scale to any desired size without compromising visual quality.
	Svg string `json:"svg"`
}

func (o *GetMethodImage) GetSize1x() string {
	if o == nil {
		return ""
	}
	return o.Size1x
}

func (o *GetMethodImage) GetSize2x() string {
	if o == nil {
		return ""
	}
	return o.Size2x
}

func (o *GetMethodImage) GetSvg() string {
	if o == nil {
		return ""
	}
	return o.Svg
}

// GetMethodStatus - The payment method's activation status for this profile.
type GetMethodStatus string

const (
	GetMethodStatusActivated       GetMethodStatus = "activated"
	GetMethodStatusPendingBoarding GetMethodStatus = "pending-boarding"
	GetMethodStatusPendingReview   GetMethodStatus = "pending-review"
	GetMethodStatusPendingExternal GetMethodStatus = "pending-external"
	GetMethodStatusRejected        GetMethodStatus = "rejected"
)

func (e GetMethodStatus) ToPointer() *GetMethodStatus {
	return &e
}

// GetMethodIssuerImage - URLs of images representing the issuer.
// required:
//   - size1x
//   - size2x
//   - svg
type GetMethodIssuerImage struct {
	// The URL pointing to an icon of 32 by 24 pixels.
	Size1x *string `json:"size1x,omitempty"`
	// The URL pointing to an icon of 64 by 48 pixels.
	Size2x *string `json:"size2x,omitempty"`
	// The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can
	// scale to any desired size without compromising visual quality.
	Svg *string `json:"svg,omitempty"`
}

func (o *GetMethodIssuerImage) GetSize1x() *string {
	if o == nil {
		return nil
	}
	return o.Size1x
}

func (o *GetMethodIssuerImage) GetSize2x() *string {
	if o == nil {
		return nil
	}
	return o.Size2x
}

func (o *GetMethodIssuerImage) GetSvg() *string {
	if o == nil {
		return nil
	}
	return o.Svg
}

type GetMethodIssuer struct {
	Resource string `json:"resource"`
	ID       string `json:"id"`
	// The full name of the issuer.
	Name string `json:"name"`
	// URLs of images representing the issuer.
	// required:
	//   - size1x
	//   - size2x
	//   - svg
	Image GetMethodIssuerImage `json:"image"`
}

func (o *GetMethodIssuer) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *GetMethodIssuer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetMethodIssuer) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetMethodIssuer) GetImage() GetMethodIssuerImage {
	if o == nil {
		return GetMethodIssuerImage{}
	}
	return o.Image
}

// GetMethodSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetMethodSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetMethodSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetMethodSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetMethodDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetMethodDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetMethodDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetMethodDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetMethodLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetMethodLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self GetMethodSelf `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *GetMethodDocumentation `json:"documentation,omitempty"`
}

func (o *GetMethodLinks) GetSelf() GetMethodSelf {
	if o == nil {
		return GetMethodSelf{}
	}
	return o.Self
}

func (o *GetMethodLinks) GetDocumentation() *GetMethodDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

// GetMethodResponseBody - The payment method object.
type GetMethodResponseBody struct {
	// Indicates the response contains a payment method object. Will always contain the string `method` for this
	// endpoint.
	Resource string `json:"resource"`
	// The unique identifier of the payment method. When used during [payment creation](create-payment), the payment
	// method selection screen will be skipped.
	ID GetMethodID `json:"id"`
	// The full name of the payment method.
	//
	// If a `locale` parameter is provided, the name is translated to the given locale if possible.
	Description string `json:"description"`
	// The minimum payment amount required to use this payment method.
	MinimumAmount GetMethodMinimumAmount `json:"minimumAmount"`
	// The maximum payment amount allowed when using this payment method. If there is no method-specific maximum, `null`
	// is returned instead.
	MaximumAmount *GetMethodMaximumAmount `json:"maximumAmount"`
	// URLs of images representing the payment method.
	Image GetMethodImage `json:"image"`
	// The payment method's activation status for this profile.
	Status GetMethodStatus `json:"status"`
	// **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant
	// for iDEAL, KBC/CBC, gift cards, and vouchers.
	Issuers []GetMethodIssuer `json:"issuers,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links GetMethodLinks `json:"_links"`
}

func (o *GetMethodResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *GetMethodResponseBody) GetID() GetMethodID {
	if o == nil {
		return GetMethodID("")
	}
	return o.ID
}

func (o *GetMethodResponseBody) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *GetMethodResponseBody) GetMinimumAmount() GetMethodMinimumAmount {
	if o == nil {
		return GetMethodMinimumAmount{}
	}
	return o.MinimumAmount
}

func (o *GetMethodResponseBody) GetMaximumAmount() *GetMethodMaximumAmount {
	if o == nil {
		return nil
	}
	return o.MaximumAmount
}

func (o *GetMethodResponseBody) GetImage() GetMethodImage {
	if o == nil {
		return GetMethodImage{}
	}
	return o.Image
}

func (o *GetMethodResponseBody) GetStatus() GetMethodStatus {
	if o == nil {
		return GetMethodStatus("")
	}
	return o.Status
}

func (o *GetMethodResponseBody) GetIssuers() []GetMethodIssuer {
	if o == nil {
		return nil
	}
	return o.Issuers
}

func (o *GetMethodResponseBody) GetLinks() GetMethodLinks {
	if o == nil {
		return GetMethodLinks{}
	}
	return o.Links
}

type GetMethodResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The payment method object.
	Object *GetMethodResponseBody
}

func (o *GetMethodResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetMethodResponse) GetObject() *GetMethodResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
