// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type GetMethodGlobals struct {
	// The identifier referring to the [profile](get-profile) you wish to
	// retrieve the resources for.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
	// organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
	ProfileID *string `queryParam:"style=form,explode=true,name=profileId"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (g *GetMethodGlobals) GetProfileID() *string {
	if g == nil {
		return nil
	}
	return g.ProfileID
}

func (g *GetMethodGlobals) GetTestmode() *bool {
	if g == nil {
		return nil
	}
	return g.Testmode
}

type GetMethodRequest struct {
	// Provide the ID of the item you want to perform this operation on.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Response language
	Locale *components.Locale `queryParam:"style=form,explode=true,name=locale"`
	// If provided, the `minimumAmount` and `maximumAmount` will be converted
	// to the given currency. An error is returned if the currency is not supported by the payment method.
	Currency *string `queryParam:"style=form,explode=true,name=currency"`
	// The identifier referring to the [profile](get-profile) you wish to
	// retrieve the resources for.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
	// organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
	ProfileID *string `queryParam:"style=form,explode=true,name=profileId"`
	// This endpoint allows you to include additional information via the `include` query string parameter.
	Include *string `queryParam:"style=form,explode=true,name=include"`
	// Set this parameter to `first` to only return the methods that
	// can be used for the first payment of a recurring sequence.
	//
	// Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
	SequenceType *components.SequenceType `queryParam:"style=form,explode=true,name=sequenceType"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
	// A unique key to ensure idempotent requests. This key should be a UUID v4 string.
	IdempotencyKey *string `header:"style=simple,explode=false,name=idempotency-key"`
}

func (g *GetMethodRequest) GetID() string {
	if g == nil {
		return ""
	}
	return g.ID
}

func (g *GetMethodRequest) GetLocale() *components.Locale {
	if g == nil {
		return nil
	}
	return g.Locale
}

func (g *GetMethodRequest) GetCurrency() *string {
	if g == nil {
		return nil
	}
	return g.Currency
}

func (g *GetMethodRequest) GetProfileID() *string {
	if g == nil {
		return nil
	}
	return g.ProfileID
}

func (g *GetMethodRequest) GetInclude() *string {
	if g == nil {
		return nil
	}
	return g.Include
}

func (g *GetMethodRequest) GetSequenceType() *components.SequenceType {
	if g == nil {
		return nil
	}
	return g.SequenceType
}

func (g *GetMethodRequest) GetTestmode() *bool {
	if g == nil {
		return nil
	}
	return g.Testmode
}

func (g *GetMethodRequest) GetIdempotencyKey() *string {
	if g == nil {
		return nil
	}
	return g.IdempotencyKey
}

type GetMethodResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The payment method object.
	EntityMethod *components.EntityMethod
}

func (g *GetMethodResponse) GetHTTPMeta() components.HTTPMetadata {
	if g == nil {
		return components.HTTPMetadata{}
	}
	return g.HTTPMeta
}

func (g *GetMethodResponse) GetEntityMethod() *components.EntityMethod {
	if g == nil {
		return nil
	}
	return g.EntityMethod
}
