// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
)

type ListAllSubscriptionsRequest struct {
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
	// result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// The identifier referring to the [profile](get-profile) you wish to retrieve subscriptions for.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` is already implied.
	//
	// To retrieve all subscriptions across the organization, use an organization-level API credential and omit the
	// `profileId` parameter.
	ProfileID *string `queryParam:"style=form,explode=true,name=profileId"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *ListAllSubscriptionsRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListAllSubscriptionsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListAllSubscriptionsRequest) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *ListAllSubscriptionsRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// ListAllSubscriptionsNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type ListAllSubscriptionsNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListAllSubscriptionsNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListAllSubscriptionsNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListAllSubscriptionsNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListAllSubscriptionsNotFoundDocumentation `json:"documentation"`
}

func (o *ListAllSubscriptionsNotFoundLinks) GetDocumentation() ListAllSubscriptionsNotFoundDocumentation {
	if o == nil {
		return ListAllSubscriptionsNotFoundDocumentation{}
	}
	return o.Documentation
}

// ListAllSubscriptionsBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type ListAllSubscriptionsBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListAllSubscriptionsBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListAllSubscriptionsBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListAllSubscriptionsBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListAllSubscriptionsBadRequestDocumentation `json:"documentation"`
}

func (o *ListAllSubscriptionsBadRequestLinks) GetDocumentation() ListAllSubscriptionsBadRequestDocumentation {
	if o == nil {
		return ListAllSubscriptionsBadRequestDocumentation{}
	}
	return o.Documentation
}

// ListAllSubscriptionsMode - Whether this entity was created in live mode or in test mode.
type ListAllSubscriptionsMode string

const (
	ListAllSubscriptionsModeLive ListAllSubscriptionsMode = "live"
	ListAllSubscriptionsModeTest ListAllSubscriptionsMode = "test"
)

func (e ListAllSubscriptionsMode) ToPointer() *ListAllSubscriptionsMode {
	return &e
}
func (e *ListAllSubscriptionsMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = ListAllSubscriptionsMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAllSubscriptionsMode: %v", v)
	}
}

// ListAllSubscriptionsStatus - The subscription's current status is directly related to the status of the underlying customer or mandate that is
// enabling the subscription.
type ListAllSubscriptionsStatus string

const (
	ListAllSubscriptionsStatusPending   ListAllSubscriptionsStatus = "pending"
	ListAllSubscriptionsStatusActive    ListAllSubscriptionsStatus = "active"
	ListAllSubscriptionsStatusCanceled  ListAllSubscriptionsStatus = "canceled"
	ListAllSubscriptionsStatusSuspended ListAllSubscriptionsStatus = "suspended"
	ListAllSubscriptionsStatusCompleted ListAllSubscriptionsStatus = "completed"
)

func (e ListAllSubscriptionsStatus) ToPointer() *ListAllSubscriptionsStatus {
	return &e
}
func (e *ListAllSubscriptionsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "active":
		fallthrough
	case "canceled":
		fallthrough
	case "suspended":
		fallthrough
	case "completed":
		*e = ListAllSubscriptionsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAllSubscriptionsStatus: %v", v)
	}
}

// ListAllSubscriptionsAmount - The amount for each individual payment that is charged with this subscription. For example, for a monthly
// subscription of €10, the subscription amount should be set to €10.
type ListAllSubscriptionsAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListAllSubscriptionsAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListAllSubscriptionsAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListAllSubscriptionsMethod - The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
type ListAllSubscriptionsMethod string

const (
	ListAllSubscriptionsMethodCreditcard  ListAllSubscriptionsMethod = "creditcard"
	ListAllSubscriptionsMethodDirectdebit ListAllSubscriptionsMethod = "directdebit"
	ListAllSubscriptionsMethodPaypal      ListAllSubscriptionsMethod = "paypal"
)

func (e ListAllSubscriptionsMethod) ToPointer() *ListAllSubscriptionsMethod {
	return &e
}
func (e *ListAllSubscriptionsMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "paypal":
		*e = ListAllSubscriptionsMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAllSubscriptionsMethod: %v", v)
	}
}

// ListAllSubscriptionsApplicationFeeAmount - In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
type ListAllSubscriptionsApplicationFeeAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListAllSubscriptionsApplicationFeeAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListAllSubscriptionsApplicationFeeAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListAllSubscriptionsApplicationFee - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
//
// Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
// information.
type ListAllSubscriptionsApplicationFee struct {
	// In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
	Amount      ListAllSubscriptionsApplicationFeeAmount `json:"amount"`
	Description string                                   `json:"description"`
}

func (o *ListAllSubscriptionsApplicationFee) GetAmount() ListAllSubscriptionsApplicationFeeAmount {
	if o == nil {
		return ListAllSubscriptionsApplicationFeeAmount{}
	}
	return o.Amount
}

func (o *ListAllSubscriptionsApplicationFee) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

type ListAllSubscriptionsMetadataType string

const (
	ListAllSubscriptionsMetadataTypeStr        ListAllSubscriptionsMetadataType = "str"
	ListAllSubscriptionsMetadataTypeMapOfAny   ListAllSubscriptionsMetadataType = "mapOfAny"
	ListAllSubscriptionsMetadataTypeArrayOfStr ListAllSubscriptionsMetadataType = "arrayOfStr"
)

// ListAllSubscriptionsMetadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
// Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
// 1kB.
//
// Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
type ListAllSubscriptionsMetadata struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type ListAllSubscriptionsMetadataType
}

func CreateListAllSubscriptionsMetadataStr(str string) ListAllSubscriptionsMetadata {
	typ := ListAllSubscriptionsMetadataTypeStr

	return ListAllSubscriptionsMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateListAllSubscriptionsMetadataMapOfAny(mapOfAny map[string]any) ListAllSubscriptionsMetadata {
	typ := ListAllSubscriptionsMetadataTypeMapOfAny

	return ListAllSubscriptionsMetadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateListAllSubscriptionsMetadataArrayOfStr(arrayOfStr []string) ListAllSubscriptionsMetadata {
	typ := ListAllSubscriptionsMetadataTypeArrayOfStr

	return ListAllSubscriptionsMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ListAllSubscriptionsMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = ListAllSubscriptionsMetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ListAllSubscriptionsMetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ListAllSubscriptionsMetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListAllSubscriptionsMetadata", string(data))
}

func (u ListAllSubscriptionsMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ListAllSubscriptionsMetadata: all fields are null")
}

// ListAllSubscriptionsSubscriptionSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListAllSubscriptionsSubscriptionSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListAllSubscriptionsSubscriptionSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListAllSubscriptionsSubscriptionSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListAllSubscriptionsCustomer - The API resource URL of the [customer](get-customer) this subscription was created for.
type ListAllSubscriptionsCustomer struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListAllSubscriptionsCustomer) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListAllSubscriptionsCustomer) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListAllSubscriptionsMandate - The API resource URL of the [mandate](get-mandate) this subscription was created for.
type ListAllSubscriptionsMandate struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListAllSubscriptionsMandate) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListAllSubscriptionsMandate) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListAllSubscriptionsProfile - The API resource URL of the [profile](get-profile) this subscription was created for.
type ListAllSubscriptionsProfile struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListAllSubscriptionsProfile) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListAllSubscriptionsProfile) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListAllSubscriptionsPayments - The API resource URL of the [payments](list-payments) created for this subscription. Omitted if no such
// payments exist (yet).
type ListAllSubscriptionsPayments struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListAllSubscriptionsPayments) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListAllSubscriptionsPayments) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListAllSubscriptionsSubscriptionDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListAllSubscriptionsSubscriptionDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListAllSubscriptionsSubscriptionDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListAllSubscriptionsSubscriptionDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListAllSubscriptionsSubscriptionLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type ListAllSubscriptionsSubscriptionLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self ListAllSubscriptionsSubscriptionSelf `json:"self"`
	// The API resource URL of the [customer](get-customer) this subscription was created for.
	Customer *ListAllSubscriptionsCustomer `json:"customer"`
	// The API resource URL of the [mandate](get-mandate) this subscription was created for.
	Mandate *ListAllSubscriptionsMandate `json:"mandate,omitempty"`
	// The API resource URL of the [profile](get-profile) this subscription was created for.
	Profile *ListAllSubscriptionsProfile `json:"profile"`
	// The API resource URL of the [payments](list-payments) created for this subscription. Omitted if no such
	// payments exist (yet).
	Payments *ListAllSubscriptionsPayments `json:"payments,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListAllSubscriptionsSubscriptionDocumentation `json:"documentation"`
}

func (o *ListAllSubscriptionsSubscriptionLinks) GetSelf() ListAllSubscriptionsSubscriptionSelf {
	if o == nil {
		return ListAllSubscriptionsSubscriptionSelf{}
	}
	return o.Self
}

func (o *ListAllSubscriptionsSubscriptionLinks) GetCustomer() *ListAllSubscriptionsCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *ListAllSubscriptionsSubscriptionLinks) GetMandate() *ListAllSubscriptionsMandate {
	if o == nil {
		return nil
	}
	return o.Mandate
}

func (o *ListAllSubscriptionsSubscriptionLinks) GetProfile() *ListAllSubscriptionsProfile {
	if o == nil {
		return nil
	}
	return o.Profile
}

func (o *ListAllSubscriptionsSubscriptionLinks) GetPayments() *ListAllSubscriptionsPayments {
	if o == nil {
		return nil
	}
	return o.Payments
}

func (o *ListAllSubscriptionsSubscriptionLinks) GetDocumentation() ListAllSubscriptionsSubscriptionDocumentation {
	if o == nil {
		return ListAllSubscriptionsSubscriptionDocumentation{}
	}
	return o.Documentation
}

type ListAllSubscriptionsSubscription struct {
	// Indicates the response contains a subscription object. Will always contain the string `subscription` for this
	// endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this subscription. Example: `sub_rVKGtNd6s3`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode ListAllSubscriptionsMode `json:"mode"`
	// The subscription's current status is directly related to the status of the underlying customer or mandate that is
	// enabling the subscription.
	Status ListAllSubscriptionsStatus `json:"status"`
	// The amount for each individual payment that is charged with this subscription. For example, for a monthly
	// subscription of €10, the subscription amount should be set to €10.
	Amount ListAllSubscriptionsAmount `json:"amount"`
	// Total number of payments for the subscription. Once this number of payments is reached, the subscription is
	// considered completed.
	//
	// Test mode subscriptions will get canceled automatically after 10 payments.
	Times *int64 `json:"times"`
	// Number of payments left for the subscription.
	TimesRemaining *int64 `json:"timesRemaining"`
	// Interval to wait between payments, for example `1 month` or `14 days`.
	//
	// The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval string `json:"interval"`
	// The start date of the subscription in `YYYY-MM-DD` format.
	StartDate string `json:"startDate"`
	// The date of the next scheduled payment in `YYYY-MM-DD` format. If the subscription has been completed or canceled,
	// this parameter will not be returned.
	NextPaymentDate *string `json:"nextPaymentDate,omitempty"`
	// The subscription's description will be used as the description of the resulting individual payments and so showing
	// up on the bank statement of the consumer.
	//
	// **Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
	Description string `json:"description"`
	// The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
	Method *ListAllSubscriptionsMethod `json:"method"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
	//
	// Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
	// information.
	ApplicationFee *ListAllSubscriptionsApplicationFee `json:"applicationFee,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
	// Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
	// 1kB.
	//
	// Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
	Metadata *ListAllSubscriptionsMetadata `json:"metadata"`
	// We will call this URL for any payment status changes of payments resulting from this subscription.
	//
	// This webhook will receive **all** events for the subscription's payments. This may include payment failures as
	// well. Be sure to verify the payment's subscription ID and its status.
	WebhookURL string `json:"webhookUrl"`
	// The customer this subscription belongs to.
	CustomerID string `json:"customerId"`
	// The mandate used for this subscription, if any.
	MandateID *string `json:"mandateId,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The subscription's date and time of cancellation, in ISO 8601 format. This parameter is omitted if the
	// subscription is not canceled (yet).
	CanceledAt *string `json:"canceledAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links ListAllSubscriptionsSubscriptionLinks `json:"_links"`
}

func (o *ListAllSubscriptionsSubscription) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *ListAllSubscriptionsSubscription) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListAllSubscriptionsSubscription) GetMode() ListAllSubscriptionsMode {
	if o == nil {
		return ListAllSubscriptionsMode("")
	}
	return o.Mode
}

func (o *ListAllSubscriptionsSubscription) GetStatus() ListAllSubscriptionsStatus {
	if o == nil {
		return ListAllSubscriptionsStatus("")
	}
	return o.Status
}

func (o *ListAllSubscriptionsSubscription) GetAmount() ListAllSubscriptionsAmount {
	if o == nil {
		return ListAllSubscriptionsAmount{}
	}
	return o.Amount
}

func (o *ListAllSubscriptionsSubscription) GetTimes() *int64 {
	if o == nil {
		return nil
	}
	return o.Times
}

func (o *ListAllSubscriptionsSubscription) GetTimesRemaining() *int64 {
	if o == nil {
		return nil
	}
	return o.TimesRemaining
}

func (o *ListAllSubscriptionsSubscription) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *ListAllSubscriptionsSubscription) GetStartDate() string {
	if o == nil {
		return ""
	}
	return o.StartDate
}

func (o *ListAllSubscriptionsSubscription) GetNextPaymentDate() *string {
	if o == nil {
		return nil
	}
	return o.NextPaymentDate
}

func (o *ListAllSubscriptionsSubscription) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *ListAllSubscriptionsSubscription) GetMethod() *ListAllSubscriptionsMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *ListAllSubscriptionsSubscription) GetApplicationFee() *ListAllSubscriptionsApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *ListAllSubscriptionsSubscription) GetMetadata() *ListAllSubscriptionsMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ListAllSubscriptionsSubscription) GetWebhookURL() string {
	if o == nil {
		return ""
	}
	return o.WebhookURL
}

func (o *ListAllSubscriptionsSubscription) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *ListAllSubscriptionsSubscription) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *ListAllSubscriptionsSubscription) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListAllSubscriptionsSubscription) GetCanceledAt() *string {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *ListAllSubscriptionsSubscription) GetLinks() ListAllSubscriptionsSubscriptionLinks {
	if o == nil {
		return ListAllSubscriptionsSubscriptionLinks{}
	}
	return o.Links
}

type ListAllSubscriptionsEmbedded struct {
	// A list of subscription objects.
	Subscriptions []ListAllSubscriptionsSubscription `json:"subscriptions,omitempty"`
}

func (o *ListAllSubscriptionsEmbedded) GetSubscriptions() []ListAllSubscriptionsSubscription {
	if o == nil {
		return nil
	}
	return o.Subscriptions
}

// ListAllSubscriptionsSelf - The URL to the current set of items.
type ListAllSubscriptionsSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListAllSubscriptionsSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListAllSubscriptionsSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListAllSubscriptionsPrevious - The previous set of items, if available.
type ListAllSubscriptionsPrevious struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListAllSubscriptionsPrevious) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListAllSubscriptionsPrevious) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListAllSubscriptionsNext - The next set of items, if available.
type ListAllSubscriptionsNext struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListAllSubscriptionsNext) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListAllSubscriptionsNext) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListAllSubscriptionsDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListAllSubscriptionsDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListAllSubscriptionsDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListAllSubscriptionsDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListAllSubscriptionsLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
type ListAllSubscriptionsLinks struct {
	// The URL to the current set of items.
	Self ListAllSubscriptionsSelf `json:"self"`
	// The previous set of items, if available.
	Previous *ListAllSubscriptionsPrevious `json:"previous"`
	// The next set of items, if available.
	Next *ListAllSubscriptionsNext `json:"next"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListAllSubscriptionsDocumentation `json:"documentation"`
}

func (o *ListAllSubscriptionsLinks) GetSelf() ListAllSubscriptionsSelf {
	if o == nil {
		return ListAllSubscriptionsSelf{}
	}
	return o.Self
}

func (o *ListAllSubscriptionsLinks) GetPrevious() *ListAllSubscriptionsPrevious {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *ListAllSubscriptionsLinks) GetNext() *ListAllSubscriptionsNext {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListAllSubscriptionsLinks) GetDocumentation() ListAllSubscriptionsDocumentation {
	if o == nil {
		return ListAllSubscriptionsDocumentation{}
	}
	return o.Documentation
}

// ListAllSubscriptionsResponseBody - A list of subscription objects.
type ListAllSubscriptionsResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    int64                        `json:"count"`
	Embedded ListAllSubscriptionsEmbedded `json:"_embedded"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links ListAllSubscriptionsLinks `json:"_links"`
}

func (o *ListAllSubscriptionsResponseBody) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListAllSubscriptionsResponseBody) GetEmbedded() ListAllSubscriptionsEmbedded {
	if o == nil {
		return ListAllSubscriptionsEmbedded{}
	}
	return o.Embedded
}

func (o *ListAllSubscriptionsResponseBody) GetLinks() ListAllSubscriptionsLinks {
	if o == nil {
		return ListAllSubscriptionsLinks{}
	}
	return o.Links
}

type ListAllSubscriptionsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of subscription objects.
	Object *ListAllSubscriptionsResponseBody
}

func (o *ListAllSubscriptionsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListAllSubscriptionsResponse) GetObject() *ListAllSubscriptionsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
