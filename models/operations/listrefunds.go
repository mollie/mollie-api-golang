// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
)

// ListRefundsEmbed - This endpoint allows embedding related API items by appending the following values via the `embed` query string
// parameter.
type ListRefundsEmbed string

const (
	ListRefundsEmbedPayment ListRefundsEmbed = "payment"
)

func (e ListRefundsEmbed) ToPointer() *ListRefundsEmbed {
	return &e
}
func (e *ListRefundsEmbed) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		*e = ListRefundsEmbed(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListRefundsEmbed: %v", v)
	}
}

type ListRefundsRequest struct {
	// Provide the ID of the related payment.
	PaymentID string `pathParam:"style=simple,explode=false,name=paymentId"`
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
	// result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// This endpoint allows embedding related API items by appending the following values via the `embed` query string
	// parameter.
	Embed *ListRefundsEmbed `queryParam:"style=form,explode=true,name=embed"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *ListRefundsRequest) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *ListRefundsRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListRefundsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListRefundsRequest) GetEmbed() *ListRefundsEmbed {
	if o == nil {
		return nil
	}
	return o.Embed
}

func (o *ListRefundsRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// ListRefundsNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type ListRefundsNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListRefundsNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListRefundsNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListRefundsNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListRefundsNotFoundDocumentation `json:"documentation"`
}

func (o *ListRefundsNotFoundLinks) GetDocumentation() ListRefundsNotFoundDocumentation {
	if o == nil {
		return ListRefundsNotFoundDocumentation{}
	}
	return o.Documentation
}

// ListRefundsBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type ListRefundsBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListRefundsBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListRefundsBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListRefundsBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListRefundsBadRequestDocumentation `json:"documentation"`
}

func (o *ListRefundsBadRequestLinks) GetDocumentation() ListRefundsBadRequestDocumentation {
	if o == nil {
		return ListRefundsBadRequestDocumentation{}
	}
	return o.Documentation
}

// ListRefundsMode - Whether this entity was created in live mode or in test mode.
type ListRefundsMode string

const (
	ListRefundsModeLive ListRefundsMode = "live"
	ListRefundsModeTest ListRefundsMode = "test"
)

func (e ListRefundsMode) ToPointer() *ListRefundsMode {
	return &e
}

// ListRefundsAmount - The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
// amount.
type ListRefundsAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListRefundsAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListRefundsAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListRefundsSettlementAmount - This optional field will contain the approximate amount that will be deducted from your account balance, converted
// to the currency your account is settled in.
//
// The amount is a **negative** amount.
//
// If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
// zero.
//
// Since the field contains an estimated amount during refund processing, it may change over time. For example, while
// the refund is queued the settlement amount is likely not yet available.
//
// To retrieve accurate settlement amounts we recommend using the
// [List balance transactions endpoint](list-balance-transactions) instead.
type ListRefundsSettlementAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListRefundsSettlementAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListRefundsSettlementAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type ListRefundsMetadataType string

const (
	ListRefundsMetadataTypeStr        ListRefundsMetadataType = "str"
	ListRefundsMetadataTypeMapOfAny   ListRefundsMetadataType = "mapOfAny"
	ListRefundsMetadataTypeArrayOfStr ListRefundsMetadataType = "arrayOfStr"
)

// ListRefundsMetadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type ListRefundsMetadata struct {
	Str        *string        `queryParam:"inline"`
	MapOfAny   map[string]any `queryParam:"inline"`
	ArrayOfStr []string       `queryParam:"inline"`

	Type ListRefundsMetadataType
}

func CreateListRefundsMetadataStr(str string) ListRefundsMetadata {
	typ := ListRefundsMetadataTypeStr

	return ListRefundsMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateListRefundsMetadataMapOfAny(mapOfAny map[string]any) ListRefundsMetadata {
	typ := ListRefundsMetadataTypeMapOfAny

	return ListRefundsMetadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateListRefundsMetadataArrayOfStr(arrayOfStr []string) ListRefundsMetadata {
	typ := ListRefundsMetadataTypeArrayOfStr

	return ListRefundsMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ListRefundsMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = ListRefundsMetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ListRefundsMetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ListRefundsMetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListRefundsMetadata", string(data))
}

func (u ListRefundsMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ListRefundsMetadata: all fields are null")
}

// ListRefundsStatus - Refunds may take some time to get confirmed.
type ListRefundsStatus string

const (
	ListRefundsStatusQueued     ListRefundsStatus = "queued"
	ListRefundsStatusPending    ListRefundsStatus = "pending"
	ListRefundsStatusProcessing ListRefundsStatus = "processing"
	ListRefundsStatusRefunded   ListRefundsStatus = "refunded"
	ListRefundsStatusFailed     ListRefundsStatus = "failed"
	ListRefundsStatusCanceled   ListRefundsStatus = "canceled"
)

func (e ListRefundsStatus) ToPointer() *ListRefundsStatus {
	return &e
}

// ListRefundsType - Specifies the reference type
type ListRefundsType string

const (
	ListRefundsTypeAcquirerReference ListRefundsType = "acquirer-reference"
)

func (e ListRefundsType) ToPointer() *ListRefundsType {
	return &e
}

type ListRefundsExternalReference struct {
	// Specifies the reference type
	Type *ListRefundsType `json:"type,omitempty"`
	// Unique reference from the payment provider
	ID *string `json:"id,omitempty"`
}

func (o *ListRefundsExternalReference) GetType() *ListRefundsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListRefundsExternalReference) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ListRefundsRoutingReversalAmount - The amount that will be pulled back.
type ListRefundsRoutingReversalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListRefundsRoutingReversalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListRefundsRoutingReversalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListRefundsSource - Where the funds will be pulled back from.
type ListRefundsSource struct {
	// Required for source type `organization`. The ID of the connected organization the funds should be pulled
	// back from.
	OrganizationID *string `json:"organizationId,omitempty"`
}

func (o *ListRefundsSource) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

type ListRefundsRoutingReversal struct {
	// The amount that will be pulled back.
	Amount *ListRefundsRoutingReversalAmount `json:"amount,omitempty"`
	// Where the funds will be pulled back from.
	Source *ListRefundsSource `json:"source,omitempty"`
}

func (o *ListRefundsRoutingReversal) GetAmount() *ListRefundsRoutingReversalAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListRefundsRoutingReversal) GetSource() *ListRefundsSource {
	if o == nil {
		return nil
	}
	return o.Source
}

// ListRefundsRefundSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListRefundsRefundSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListRefundsRefundSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListRefundsRefundSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListRefundsPayment - The API resource URL of the [payment](get-payment) that this refund belongs to.
type ListRefundsPayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListRefundsPayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListRefundsPayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListRefundsSettlement - The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
// yet settled.
type ListRefundsSettlement struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListRefundsSettlement) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListRefundsSettlement) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListRefundsRefundDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListRefundsRefundDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListRefundsRefundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListRefundsRefundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListRefundsRefundLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type ListRefundsRefundLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self ListRefundsRefundSelf `json:"self"`
	// The API resource URL of the [payment](get-payment) that this refund belongs to.
	Payment ListRefundsPayment `json:"payment"`
	// The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
	// yet settled.
	Settlement *ListRefundsSettlement `json:"settlement,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListRefundsRefundDocumentation `json:"documentation"`
}

func (o *ListRefundsRefundLinks) GetSelf() ListRefundsRefundSelf {
	if o == nil {
		return ListRefundsRefundSelf{}
	}
	return o.Self
}

func (o *ListRefundsRefundLinks) GetPayment() ListRefundsPayment {
	if o == nil {
		return ListRefundsPayment{}
	}
	return o.Payment
}

func (o *ListRefundsRefundLinks) GetSettlement() *ListRefundsSettlement {
	if o == nil {
		return nil
	}
	return o.Settlement
}

func (o *ListRefundsRefundLinks) GetDocumentation() ListRefundsRefundDocumentation {
	if o == nil {
		return ListRefundsRefundDocumentation{}
	}
	return o.Documentation
}

type ListRefundsRefund struct {
	// Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie
	// will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
	ID *string `json:"id,omitempty"`
	// Whether this entity was created in live mode or in test mode.
	Mode *ListRefundsMode `json:"mode,omitempty"`
	// The description of the refund that may be shown to your customer, depending on the payment method used.
	Description *string `json:"description,omitempty"`
	// The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
	// amount.
	Amount *ListRefundsAmount `json:"amount,omitempty"`
	// This optional field will contain the approximate amount that will be deducted from your account balance, converted
	// to the currency your account is settled in.
	//
	// The amount is a **negative** amount.
	//
	// If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
	// zero.
	//
	// Since the field contains an estimated amount during refund processing, it may change over time. For example, while
	// the refund is queued the settlement amount is likely not yet available.
	//
	// To retrieve accurate settlement amounts we recommend using the
	// [List balance transactions endpoint](list-balance-transactions) instead.
	SettlementAmount *ListRefundsSettlementAmount `json:"settlementAmount,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *ListRefundsMetadata `json:"metadata,omitempty"`
	// The unique identifier of the payment this refund was created for.
	// The full payment object can be retrieved via the payment URL in the `_links` object.
	PaymentID *string `json:"paymentId,omitempty"`
	// The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
	SettlementID *string `json:"settlementId,omitempty"`
	// Refunds may take some time to get confirmed.
	Status *ListRefundsStatus `json:"status,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt         *string                       `json:"createdAt,omitempty"`
	ExternalReference *ListRefundsExternalReference `json:"externalReference,omitempty"`
	// *This feature is only available to marketplace operators.*
	//
	// When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
	//
	// If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
	// needs to be reversed from which merchant(s).
	//
	// If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
	RoutingReversals []ListRefundsRoutingReversal `json:"routingReversals,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *ListRefundsRefundLinks `json:"_links,omitempty"`
}

func (o *ListRefundsRefund) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *ListRefundsRefund) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ListRefundsRefund) GetMode() *ListRefundsMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *ListRefundsRefund) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListRefundsRefund) GetAmount() *ListRefundsAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListRefundsRefund) GetSettlementAmount() *ListRefundsSettlementAmount {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *ListRefundsRefund) GetMetadata() *ListRefundsMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ListRefundsRefund) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *ListRefundsRefund) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *ListRefundsRefund) GetStatus() *ListRefundsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListRefundsRefund) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ListRefundsRefund) GetExternalReference() *ListRefundsExternalReference {
	if o == nil {
		return nil
	}
	return o.ExternalReference
}

func (o *ListRefundsRefund) GetRoutingReversals() []ListRefundsRoutingReversal {
	if o == nil {
		return nil
	}
	return o.RoutingReversals
}

func (o *ListRefundsRefund) GetLinks() *ListRefundsRefundLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type ListRefundsEmbedded struct {
	// An array of refund objects.
	Refunds []ListRefundsRefund `json:"refunds,omitempty"`
}

func (o *ListRefundsEmbedded) GetRefunds() []ListRefundsRefund {
	if o == nil {
		return nil
	}
	return o.Refunds
}

// ListRefundsSelf - The URL to the current set of items.
type ListRefundsSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListRefundsSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListRefundsSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListRefundsPrevious - The previous set of items, if available.
type ListRefundsPrevious struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListRefundsPrevious) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListRefundsPrevious) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListRefundsNext - The next set of items, if available.
type ListRefundsNext struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListRefundsNext) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListRefundsNext) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListRefundsDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListRefundsDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListRefundsDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListRefundsDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListRefundsLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
type ListRefundsLinks struct {
	// The URL to the current set of items.
	Self ListRefundsSelf `json:"self"`
	// The previous set of items, if available.
	Previous *ListRefundsPrevious `json:"previous"`
	// The next set of items, if available.
	Next *ListRefundsNext `json:"next"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListRefundsDocumentation `json:"documentation"`
}

func (o *ListRefundsLinks) GetSelf() ListRefundsSelf {
	if o == nil {
		return ListRefundsSelf{}
	}
	return o.Self
}

func (o *ListRefundsLinks) GetPrevious() *ListRefundsPrevious {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *ListRefundsLinks) GetNext() *ListRefundsNext {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListRefundsLinks) GetDocumentation() ListRefundsDocumentation {
	if o == nil {
		return ListRefundsDocumentation{}
	}
	return o.Documentation
}

// ListRefundsResponseBody - A list of refund objects. For a complete reference of the refund object, refer to the
// [Get refund endpoint](get-refund) documentation.
type ListRefundsResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    *int64               `json:"count,omitempty"`
	Embedded *ListRefundsEmbedded `json:"_embedded,omitempty"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links *ListRefundsLinks `json:"_links,omitempty"`
}

func (o *ListRefundsResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ListRefundsResponseBody) GetEmbedded() *ListRefundsEmbedded {
	if o == nil {
		return nil
	}
	return o.Embedded
}

func (o *ListRefundsResponseBody) GetLinks() *ListRefundsLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type ListRefundsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of refund objects. For a complete reference of the refund object, refer to the
	// [Get refund endpoint](get-refund) documentation.
	Object *ListRefundsResponseBody
}

func (o *ListRefundsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListRefundsResponse) GetObject() *ListRefundsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
