// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
)

// GetCaptureEmbed - This endpoint allows you to embed additional resources via the
// `embed` query string parameter.
type GetCaptureEmbed string

const (
	GetCaptureEmbedPayment GetCaptureEmbed = "payment"
)

func (e GetCaptureEmbed) ToPointer() *GetCaptureEmbed {
	return &e
}
func (e *GetCaptureEmbed) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		*e = GetCaptureEmbed(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCaptureEmbed: %v", v)
	}
}

type GetCaptureRequest struct {
	// Provide the ID of the related payment.
	PaymentID string `pathParam:"style=simple,explode=false,name=paymentId"`
	// Provide the ID of the related capture.
	CaptureID string `pathParam:"style=simple,explode=false,name=captureId"`
	// This endpoint allows you to embed additional resources via the
	// `embed` query string parameter.
	Embed *GetCaptureEmbed `queryParam:"style=form,explode=true,name=embed"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *GetCaptureRequest) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *GetCaptureRequest) GetCaptureID() string {
	if o == nil {
		return ""
	}
	return o.CaptureID
}

func (o *GetCaptureRequest) GetEmbed() *GetCaptureEmbed {
	if o == nil {
		return nil
	}
	return o.Embed
}

func (o *GetCaptureRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// GetCaptureNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type GetCaptureNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetCaptureNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetCaptureNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetCaptureNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetCaptureNotFoundDocumentation `json:"documentation"`
}

func (o *GetCaptureNotFoundLinks) GetDocumentation() GetCaptureNotFoundDocumentation {
	if o == nil {
		return GetCaptureNotFoundDocumentation{}
	}
	return o.Documentation
}

// GetCaptureMode - Whether this entity was created in live mode or in test mode.
type GetCaptureMode string

const (
	GetCaptureModeLive GetCaptureMode = "live"
	GetCaptureModeTest GetCaptureMode = "test"
)

func (e GetCaptureMode) ToPointer() *GetCaptureMode {
	return &e
}
func (e *GetCaptureMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = GetCaptureMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCaptureMode: %v", v)
	}
}

// GetCaptureAmount - The amount captured. If no amount is provided, the full authorized amount is captured.
type GetCaptureAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetCaptureAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetCaptureAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetCaptureSettlementAmount - This optional field will contain the approximate amount that will be settled to your account, converted to the
// currency your account is settled in.
//
// Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
// accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
// instead.
type GetCaptureSettlementAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetCaptureSettlementAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetCaptureSettlementAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetCaptureStatus - The capture's status.
type GetCaptureStatus string

const (
	GetCaptureStatusPending   GetCaptureStatus = "pending"
	GetCaptureStatusSucceeded GetCaptureStatus = "succeeded"
	GetCaptureStatusFailed    GetCaptureStatus = "failed"
)

func (e GetCaptureStatus) ToPointer() *GetCaptureStatus {
	return &e
}
func (e *GetCaptureStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "succeeded":
		fallthrough
	case "failed":
		*e = GetCaptureStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCaptureStatus: %v", v)
	}
}

type GetCaptureMetadataType string

const (
	GetCaptureMetadataTypeStr        GetCaptureMetadataType = "str"
	GetCaptureMetadataTypeMapOfAny   GetCaptureMetadataType = "mapOfAny"
	GetCaptureMetadataTypeArrayOfStr GetCaptureMetadataType = "arrayOfStr"
)

// GetCaptureMetadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type GetCaptureMetadata struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type GetCaptureMetadataType
}

func CreateGetCaptureMetadataStr(str string) GetCaptureMetadata {
	typ := GetCaptureMetadataTypeStr

	return GetCaptureMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetCaptureMetadataMapOfAny(mapOfAny map[string]any) GetCaptureMetadata {
	typ := GetCaptureMetadataTypeMapOfAny

	return GetCaptureMetadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateGetCaptureMetadataArrayOfStr(arrayOfStr []string) GetCaptureMetadata {
	typ := GetCaptureMetadataTypeArrayOfStr

	return GetCaptureMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *GetCaptureMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = GetCaptureMetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = GetCaptureMetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetCaptureMetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetCaptureMetadata", string(data))
}

func (u GetCaptureMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type GetCaptureMetadata: all fields are null")
}

// GetCaptureSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetCaptureSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetCaptureSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetCaptureSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetCapturePayment - The API resource URL of the [payment](get-payment) that this capture belongs to.
type GetCapturePayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetCapturePayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetCapturePayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetCaptureSettlement - The API resource URL of the [settlement](get-settlement) this capture has been settled with. Not present if
// not yet settled.
type GetCaptureSettlement struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *GetCaptureSettlement) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *GetCaptureSettlement) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// GetCaptureShipment - The API resource URL of the [shipment](get-shipment) this capture is associated with. Not present if
// it isn't associated with a shipment.
type GetCaptureShipment struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *GetCaptureShipment) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *GetCaptureShipment) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// GetCaptureDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetCaptureDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetCaptureDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetCaptureDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetCaptureLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetCaptureLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self GetCaptureSelf `json:"self"`
	// The API resource URL of the [payment](get-payment) that this capture belongs to.
	Payment GetCapturePayment `json:"payment"`
	// The API resource URL of the [settlement](get-settlement) this capture has been settled with. Not present if
	// not yet settled.
	Settlement *GetCaptureSettlement `json:"settlement,omitempty"`
	// The API resource URL of the [shipment](get-shipment) this capture is associated with. Not present if
	// it isn't associated with a shipment.
	Shipment *GetCaptureShipment `json:"shipment,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation GetCaptureDocumentation `json:"documentation"`
}

func (o *GetCaptureLinks) GetSelf() GetCaptureSelf {
	if o == nil {
		return GetCaptureSelf{}
	}
	return o.Self
}

func (o *GetCaptureLinks) GetPayment() GetCapturePayment {
	if o == nil {
		return GetCapturePayment{}
	}
	return o.Payment
}

func (o *GetCaptureLinks) GetSettlement() *GetCaptureSettlement {
	if o == nil {
		return nil
	}
	return o.Settlement
}

func (o *GetCaptureLinks) GetShipment() *GetCaptureShipment {
	if o == nil {
		return nil
	}
	return o.Shipment
}

func (o *GetCaptureLinks) GetDocumentation() GetCaptureDocumentation {
	if o == nil {
		return GetCaptureDocumentation{}
	}
	return o.Documentation
}

// GetCaptureResponseBody - The capture object.
type GetCaptureResponseBody struct {
	// Indicates the response contains a capture object. Will always contain the string `capture` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this capture. Example: `cpt_mNepDkEtco6ah3QNPUGYH`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode GetCaptureMode `json:"mode"`
	// The description of the capture.
	Description *string `json:"description,omitempty"`
	// The amount captured. If no amount is provided, the full authorized amount is captured.
	Amount *GetCaptureAmount `json:"amount"`
	// This optional field will contain the approximate amount that will be settled to your account, converted to the
	// currency your account is settled in.
	//
	// Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
	// accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
	// instead.
	SettlementAmount *GetCaptureSettlementAmount `json:"settlementAmount,omitempty"`
	// The capture's status.
	Status GetCaptureStatus `json:"status"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *GetCaptureMetadata `json:"metadata,omitempty"`
	// The unique identifier of the payment this capture was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
	// The full payment object can be retrieved via the payment URL in the `_links` object.
	PaymentID string `json:"paymentId"`
	// The unique identifier of the shipment that triggered the creation of this capture, if applicable. For example:
	// `shp_gNapNy9qQTUFZYnCrCF7J`.
	ShipmentID *string `json:"shipmentId,omitempty"`
	// The identifier referring to the settlement this capture was settled with. For example, `stl_BkEjN2eBb`. This field
	// is omitted if the capture is not settled (yet).
	SettlementID *string `json:"settlementId,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links GetCaptureLinks `json:"_links"`
}

func (o *GetCaptureResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *GetCaptureResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetCaptureResponseBody) GetMode() GetCaptureMode {
	if o == nil {
		return GetCaptureMode("")
	}
	return o.Mode
}

func (o *GetCaptureResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetCaptureResponseBody) GetAmount() *GetCaptureAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *GetCaptureResponseBody) GetSettlementAmount() *GetCaptureSettlementAmount {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *GetCaptureResponseBody) GetStatus() GetCaptureStatus {
	if o == nil {
		return GetCaptureStatus("")
	}
	return o.Status
}

func (o *GetCaptureResponseBody) GetMetadata() *GetCaptureMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *GetCaptureResponseBody) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *GetCaptureResponseBody) GetShipmentID() *string {
	if o == nil {
		return nil
	}
	return o.ShipmentID
}

func (o *GetCaptureResponseBody) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *GetCaptureResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GetCaptureResponseBody) GetLinks() GetCaptureLinks {
	if o == nil {
		return GetCaptureLinks{}
	}
	return o.Links
}

type GetCaptureResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The capture object.
	Object *GetCaptureResponseBody
}

func (o *GetCaptureResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetCaptureResponse) GetObject() *GetCaptureResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
