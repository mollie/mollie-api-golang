// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type GetCaptureRequest struct {
	// Provide the ID of the related payment.
	PaymentID string `pathParam:"style=simple,explode=false,name=paymentId"`
	// Provide the ID of the related capture.
	CaptureID string `pathParam:"style=simple,explode=false,name=captureId"`
	// This endpoint allows embedding related API items by appending the following values via the `embed` query string
	// parameter.
	Embed *string `queryParam:"style=form,explode=true,name=embed"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
	// A unique key to ensure idempotent requests. This key should be a UUID v4 string.
	IdempotencyKey *string `header:"style=simple,explode=false,name=idempotency-key"`
}

func (o *GetCaptureRequest) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *GetCaptureRequest) GetCaptureID() string {
	if o == nil {
		return ""
	}
	return o.CaptureID
}

func (o *GetCaptureRequest) GetEmbed() *string {
	if o == nil {
		return nil
	}
	return o.Embed
}

func (o *GetCaptureRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

func (o *GetCaptureRequest) GetIdempotencyKey() *string {
	if o == nil {
		return nil
	}
	return o.IdempotencyKey
}

type GetCaptureResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The capture object.
	CaptureResponse *components.CaptureResponse
}

func (o *GetCaptureResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetCaptureResponse) GetCaptureResponse() *components.CaptureResponse {
	if o == nil {
		return nil
	}
	return o.CaptureResponse
}
