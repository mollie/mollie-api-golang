// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type ListAllChargebacksGlobals struct {
	// The identifier referring to the [profile](get-profile) you wish to
	// retrieve the resources for.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
	// organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
	ProfileID *string `queryParam:"style=form,explode=true,name=profileId"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (l *ListAllChargebacksGlobals) GetProfileID() *string {
	if l == nil {
		return nil
	}
	return l.ProfileID
}

func (l *ListAllChargebacksGlobals) GetTestmode() *bool {
	if l == nil {
		return nil
	}
	return l.Testmode
}

type ListAllChargebacksRequest struct {
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
	// result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// This endpoint allows embedding related API items by appending the following values via the `embed` query string
	// parameter.
	Embed *string `queryParam:"style=form,explode=true,name=embed"`
	// Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
	// newest to oldest.
	Sort *components.Sorting `queryParam:"style=form,explode=true,name=sort"`
	// The identifier referring to the [profile](get-profile) you wish to
	// retrieve chargebacks for.
	//
	// Most API credentials are linked to a single profile. In these cases the
	// `profileId` is already implied.
	//
	// To retrieve all chargebacks across the organization, use an
	// organization-level API credential and omit the `profileId` parameter.
	ProfileID *string `queryParam:"style=form,explode=true,name=profileId"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
	// A unique key to ensure idempotent requests. This key should be a UUID v4 string.
	IdempotencyKey *string `header:"style=simple,explode=false,name=idempotency-key"`
}

func (l *ListAllChargebacksRequest) GetFrom() *string {
	if l == nil {
		return nil
	}
	return l.From
}

func (l *ListAllChargebacksRequest) GetLimit() *int64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListAllChargebacksRequest) GetEmbed() *string {
	if l == nil {
		return nil
	}
	return l.Embed
}

func (l *ListAllChargebacksRequest) GetSort() *components.Sorting {
	if l == nil {
		return nil
	}
	return l.Sort
}

func (l *ListAllChargebacksRequest) GetProfileID() *string {
	if l == nil {
		return nil
	}
	return l.ProfileID
}

func (l *ListAllChargebacksRequest) GetTestmode() *bool {
	if l == nil {
		return nil
	}
	return l.Testmode
}

func (l *ListAllChargebacksRequest) GetIdempotencyKey() *string {
	if l == nil {
		return nil
	}
	return l.IdempotencyKey
}

type ListAllChargebacksEmbedded struct {
	// A list of chargeback objects.
	Chargebacks []components.EntityChargeback `json:"chargebacks"`
}

func (l *ListAllChargebacksEmbedded) GetChargebacks() []components.EntityChargeback {
	if l == nil {
		return []components.EntityChargeback{}
	}
	return l.Chargebacks
}

// ListAllChargebacksResponseBody - A list of chargeback objects.
type ListAllChargebacksResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    int64                      `json:"count"`
	Embedded ListAllChargebacksEmbedded `json:"_embedded"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links components.ListLinks `json:"_links"`
}

func (l *ListAllChargebacksResponseBody) GetCount() int64 {
	if l == nil {
		return 0
	}
	return l.Count
}

func (l *ListAllChargebacksResponseBody) GetEmbedded() ListAllChargebacksEmbedded {
	if l == nil {
		return ListAllChargebacksEmbedded{}
	}
	return l.Embedded
}

func (l *ListAllChargebacksResponseBody) GetLinks() components.ListLinks {
	if l == nil {
		return components.ListLinks{}
	}
	return l.Links
}

type ListAllChargebacksResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of chargeback objects.
	Object *ListAllChargebacksResponseBody
}

func (l *ListAllChargebacksResponse) GetHTTPMeta() components.HTTPMetadata {
	if l == nil {
		return components.HTTPMetadata{}
	}
	return l.HTTPMeta
}

func (l *ListAllChargebacksResponse) GetObject() *ListAllChargebacksResponseBody {
	if l == nil {
		return nil
	}
	return l.Object
}
