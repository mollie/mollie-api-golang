// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
)

// GetRefundEmbed - This endpoint allows embedding related API items by appending the following values via the `embed` query string
// parameter.
type GetRefundEmbed string

const (
	GetRefundEmbedPayment GetRefundEmbed = "payment"
)

func (e GetRefundEmbed) ToPointer() *GetRefundEmbed {
	return &e
}
func (e *GetRefundEmbed) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		*e = GetRefundEmbed(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRefundEmbed: %v", v)
	}
}

type GetRefundRequest struct {
	// Provide the ID of the related payment.
	PaymentID string `pathParam:"style=simple,explode=false,name=paymentId"`
	// Provide the ID of the related refund.
	RefundID string `pathParam:"style=simple,explode=false,name=refundId"`
	// This endpoint allows embedding related API items by appending the following values via the `embed` query string
	// parameter.
	Embed *GetRefundEmbed `queryParam:"style=form,explode=true,name=embed"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *GetRefundRequest) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *GetRefundRequest) GetRefundID() string {
	if o == nil {
		return ""
	}
	return o.RefundID
}

func (o *GetRefundRequest) GetEmbed() *GetRefundEmbed {
	if o == nil {
		return nil
	}
	return o.Embed
}

func (o *GetRefundRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// GetRefundNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type GetRefundNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetRefundNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetRefundNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetRefundNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetRefundNotFoundDocumentation `json:"documentation"`
}

func (o *GetRefundNotFoundLinks) GetDocumentation() GetRefundNotFoundDocumentation {
	if o == nil {
		return GetRefundNotFoundDocumentation{}
	}
	return o.Documentation
}

// GetRefundMode - Whether this entity was created in live mode or in test mode.
type GetRefundMode string

const (
	GetRefundModeLive GetRefundMode = "live"
	GetRefundModeTest GetRefundMode = "test"
)

func (e GetRefundMode) ToPointer() *GetRefundMode {
	return &e
}

// GetRefundAmount - The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
// amount.
type GetRefundAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetRefundAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetRefundAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetRefundSettlementAmount - This optional field will contain the approximate amount that will be deducted from your account balance, converted
// to the currency your account is settled in.
//
// The amount is a **negative** amount.
//
// If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
// zero.
//
// Since the field contains an estimated amount during refund processing, it may change over time. For example, while
// the refund is queued the settlement amount is likely not yet available.
//
// To retrieve accurate settlement amounts we recommend using the
// [List balance transactions endpoint](list-balance-transactions) instead.
type GetRefundSettlementAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetRefundSettlementAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetRefundSettlementAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetRefundMetadataType string

const (
	GetRefundMetadataTypeStr        GetRefundMetadataType = "str"
	GetRefundMetadataTypeMapOfAny   GetRefundMetadataType = "mapOfAny"
	GetRefundMetadataTypeArrayOfStr GetRefundMetadataType = "arrayOfStr"
)

// GetRefundMetadata - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type GetRefundMetadata struct {
	Str        *string        `queryParam:"inline"`
	MapOfAny   map[string]any `queryParam:"inline"`
	ArrayOfStr []string       `queryParam:"inline"`

	Type GetRefundMetadataType
}

func CreateGetRefundMetadataStr(str string) GetRefundMetadata {
	typ := GetRefundMetadataTypeStr

	return GetRefundMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRefundMetadataMapOfAny(mapOfAny map[string]any) GetRefundMetadata {
	typ := GetRefundMetadataTypeMapOfAny

	return GetRefundMetadata{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateGetRefundMetadataArrayOfStr(arrayOfStr []string) GetRefundMetadata {
	typ := GetRefundMetadataTypeArrayOfStr

	return GetRefundMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *GetRefundMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = GetRefundMetadataTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = GetRefundMetadataTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetRefundMetadataTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetRefundMetadata", string(data))
}

func (u GetRefundMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type GetRefundMetadata: all fields are null")
}

// GetRefundStatus - Refunds may take some time to get confirmed.
type GetRefundStatus string

const (
	GetRefundStatusQueued     GetRefundStatus = "queued"
	GetRefundStatusPending    GetRefundStatus = "pending"
	GetRefundStatusProcessing GetRefundStatus = "processing"
	GetRefundStatusRefunded   GetRefundStatus = "refunded"
	GetRefundStatusFailed     GetRefundStatus = "failed"
	GetRefundStatusCanceled   GetRefundStatus = "canceled"
)

func (e GetRefundStatus) ToPointer() *GetRefundStatus {
	return &e
}

// GetRefundType - Specifies the reference type
type GetRefundType string

const (
	GetRefundTypeAcquirerReference GetRefundType = "acquirer-reference"
)

func (e GetRefundType) ToPointer() *GetRefundType {
	return &e
}

type GetRefundExternalReference struct {
	// Specifies the reference type
	Type *GetRefundType `json:"type,omitempty"`
	// Unique reference from the payment provider
	ID *string `json:"id,omitempty"`
}

func (o *GetRefundExternalReference) GetType() *GetRefundType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetRefundExternalReference) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// GetRefundRoutingReversalAmount - The amount that will be pulled back.
type GetRefundRoutingReversalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetRefundRoutingReversalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetRefundRoutingReversalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetRefundSource - Where the funds will be pulled back from.
type GetRefundSource struct {
	// Required for source type `organization`. The ID of the connected organization the funds should be pulled
	// back from.
	OrganizationID *string `json:"organizationId,omitempty"`
}

func (o *GetRefundSource) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

type GetRefundRoutingReversal struct {
	// The amount that will be pulled back.
	Amount *GetRefundRoutingReversalAmount `json:"amount,omitempty"`
	// Where the funds will be pulled back from.
	Source *GetRefundSource `json:"source,omitempty"`
}

func (o *GetRefundRoutingReversal) GetAmount() *GetRefundRoutingReversalAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *GetRefundRoutingReversal) GetSource() *GetRefundSource {
	if o == nil {
		return nil
	}
	return o.Source
}

// GetRefundSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetRefundSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetRefundSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetRefundSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetRefundPayment - The API resource URL of the [payment](get-payment) that this refund belongs to.
type GetRefundPayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetRefundPayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetRefundPayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetRefundSettlement - The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
// yet settled.
type GetRefundSettlement struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *GetRefundSettlement) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *GetRefundSettlement) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// GetRefundDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetRefundDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetRefundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetRefundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetRefundLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetRefundLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self GetRefundSelf `json:"self"`
	// The API resource URL of the [payment](get-payment) that this refund belongs to.
	Payment GetRefundPayment `json:"payment"`
	// The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not
	// yet settled.
	Settlement *GetRefundSettlement `json:"settlement,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation GetRefundDocumentation `json:"documentation"`
}

func (o *GetRefundLinks) GetSelf() GetRefundSelf {
	if o == nil {
		return GetRefundSelf{}
	}
	return o.Self
}

func (o *GetRefundLinks) GetPayment() GetRefundPayment {
	if o == nil {
		return GetRefundPayment{}
	}
	return o.Payment
}

func (o *GetRefundLinks) GetSettlement() *GetRefundSettlement {
	if o == nil {
		return nil
	}
	return o.Settlement
}

func (o *GetRefundLinks) GetDocumentation() GetRefundDocumentation {
	if o == nil {
		return GetRefundDocumentation{}
	}
	return o.Documentation
}

// GetRefundResponseBody - The payment object.
type GetRefundResponseBody struct {
	// Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie
	// will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
	ID *string `json:"id,omitempty"`
	// Whether this entity was created in live mode or in test mode.
	Mode *GetRefundMode `json:"mode,omitempty"`
	// The description of the refund that may be shown to your customer, depending on the payment method used.
	Description *string `json:"description,omitempty"`
	// The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
	// amount.
	Amount *GetRefundAmount `json:"amount,omitempty"`
	// This optional field will contain the approximate amount that will be deducted from your account balance, converted
	// to the currency your account is settled in.
	//
	// The amount is a **negative** amount.
	//
	// If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
	// zero.
	//
	// Since the field contains an estimated amount during refund processing, it may change over time. For example, while
	// the refund is queued the settlement amount is likely not yet available.
	//
	// To retrieve accurate settlement amounts we recommend using the
	// [List balance transactions endpoint](list-balance-transactions) instead.
	SettlementAmount *GetRefundSettlementAmount `json:"settlementAmount,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *GetRefundMetadata `json:"metadata,omitempty"`
	// The unique identifier of the payment this refund was created for.
	// The full payment object can be retrieved via the payment URL in the `_links` object.
	PaymentID *string `json:"paymentId,omitempty"`
	// The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
	SettlementID *string `json:"settlementId,omitempty"`
	// Refunds may take some time to get confirmed.
	Status *GetRefundStatus `json:"status,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt         *string                     `json:"createdAt,omitempty"`
	ExternalReference *GetRefundExternalReference `json:"externalReference,omitempty"`
	// *This feature is only available to marketplace operators.*
	//
	// When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
	//
	// If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
	// needs to be reversed from which merchant(s).
	//
	// If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
	RoutingReversals []GetRefundRoutingReversal `json:"routingReversals,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *GetRefundLinks `json:"_links,omitempty"`
}

func (o *GetRefundResponseBody) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *GetRefundResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetRefundResponseBody) GetMode() *GetRefundMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *GetRefundResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetRefundResponseBody) GetAmount() *GetRefundAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *GetRefundResponseBody) GetSettlementAmount() *GetRefundSettlementAmount {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *GetRefundResponseBody) GetMetadata() *GetRefundMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *GetRefundResponseBody) GetPaymentID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentID
}

func (o *GetRefundResponseBody) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *GetRefundResponseBody) GetStatus() *GetRefundStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetRefundResponseBody) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetRefundResponseBody) GetExternalReference() *GetRefundExternalReference {
	if o == nil {
		return nil
	}
	return o.ExternalReference
}

func (o *GetRefundResponseBody) GetRoutingReversals() []GetRefundRoutingReversal {
	if o == nil {
		return nil
	}
	return o.RoutingReversals
}

func (o *GetRefundResponseBody) GetLinks() *GetRefundLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type GetRefundResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The payment object.
	Object *GetRefundResponseBody
}

func (o *GetRefundResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetRefundResponse) GetObject() *GetRefundResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
