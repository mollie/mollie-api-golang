// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// CreateMandateMethodRequest - Payment method of the mandate.
//
// SEPA Direct Debit and PayPal mandates can be created directly.
type CreateMandateMethodRequest string

const (
	CreateMandateMethodRequestCreditcard  CreateMandateMethodRequest = "creditcard"
	CreateMandateMethodRequestDirectdebit CreateMandateMethodRequest = "directdebit"
	CreateMandateMethodRequestPaypal      CreateMandateMethodRequest = "paypal"
)

func (e CreateMandateMethodRequest) ToPointer() *CreateMandateMethodRequest {
	return &e
}
func (e *CreateMandateMethodRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "paypal":
		*e = CreateMandateMethodRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateMandateMethodRequest: %v", v)
	}
}

type CreateMandateRequestBody struct {
	// The identifier uniquely referring to this mandate. Example: `mdt_pWUnw6pkBN`.
	ID *string `json:"id,omitempty"`
	// Payment method of the mandate.
	//
	// SEPA Direct Debit and PayPal mandates can be created directly.
	Method CreateMandateMethodRequest `json:"method"`
	// The customer's name.
	ConsumerName string `json:"consumerName"`
	// The customer's IBAN. Required for SEPA Direct Debit mandates.
	ConsumerAccount *string `json:"consumerAccount,omitempty"`
	// The BIC of the customer's bank.
	ConsumerBic *string `json:"consumerBic,omitempty"`
	// The customer's email address. Required for PayPal mandates.
	ConsumerEmail *string `json:"consumerEmail,omitempty"`
	// The date when the mandate was signed in `YYYY-MM-DD` format.
	SignatureDate *string `json:"signatureDate,omitempty"`
	// A custom mandate reference. For SEPA Direct Debit, it is vital to provide a unique reference. Some banks will
	// decline Direct Debit payments if the mandate reference is not unique.
	MandateReference *string `json:"mandateReference,omitempty"`
	// The billing agreement ID given by PayPal. For example: `B-12A34567B8901234CD`. Required for PayPal mandates.
	// Must provide either this field or `payPalVaultId`, but not both.
	PaypalBillingAgreementID *string `json:"paypalBillingAgreementId,omitempty"`
	// The Vault ID given by PayPal. For example: `8kk8451t`. Required for PayPal mandates.
	// Must provide either this field or `paypalBillingAgreementId`, but not both.
	PayPalVaultID *string `json:"payPalVaultId,omitempty"`
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
}

func (o *CreateMandateRequestBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateMandateRequestBody) GetMethod() CreateMandateMethodRequest {
	if o == nil {
		return CreateMandateMethodRequest("")
	}
	return o.Method
}

func (o *CreateMandateRequestBody) GetConsumerName() string {
	if o == nil {
		return ""
	}
	return o.ConsumerName
}

func (o *CreateMandateRequestBody) GetConsumerAccount() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerAccount
}

func (o *CreateMandateRequestBody) GetConsumerBic() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerBic
}

func (o *CreateMandateRequestBody) GetConsumerEmail() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerEmail
}

func (o *CreateMandateRequestBody) GetSignatureDate() *string {
	if o == nil {
		return nil
	}
	return o.SignatureDate
}

func (o *CreateMandateRequestBody) GetMandateReference() *string {
	if o == nil {
		return nil
	}
	return o.MandateReference
}

func (o *CreateMandateRequestBody) GetPaypalBillingAgreementID() *string {
	if o == nil {
		return nil
	}
	return o.PaypalBillingAgreementID
}

func (o *CreateMandateRequestBody) GetPayPalVaultID() *string {
	if o == nil {
		return nil
	}
	return o.PayPalVaultID
}

func (o *CreateMandateRequestBody) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

type CreateMandateRequest struct {
	// Provide the ID of the related customer.
	CustomerID  string                    `pathParam:"style=simple,explode=false,name=customerId"`
	RequestBody *CreateMandateRequestBody `request:"mediaType=application/json"`
}

func (o *CreateMandateRequest) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *CreateMandateRequest) GetRequestBody() *CreateMandateRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// CreateMandateNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type CreateMandateNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *CreateMandateNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateMandateNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type CreateMandateNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation CreateMandateNotFoundDocumentation `json:"documentation"`
}

func (o *CreateMandateNotFoundLinks) GetDocumentation() CreateMandateNotFoundDocumentation {
	if o == nil {
		return CreateMandateNotFoundDocumentation{}
	}
	return o.Documentation
}

// CreateMandateMode - Whether this entity was created in live mode or in test mode.
type CreateMandateMode string

const (
	CreateMandateModeLive CreateMandateMode = "live"
	CreateMandateModeTest CreateMandateMode = "test"
)

func (e CreateMandateMode) ToPointer() *CreateMandateMode {
	return &e
}
func (e *CreateMandateMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = CreateMandateMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateMandateMode: %v", v)
	}
}

// CreateMandateMethodResponse - Payment method of the mandate.
//
// SEPA Direct Debit and PayPal mandates can be created directly.
type CreateMandateMethodResponse string

const (
	CreateMandateMethodResponseCreditcard  CreateMandateMethodResponse = "creditcard"
	CreateMandateMethodResponseDirectdebit CreateMandateMethodResponse = "directdebit"
	CreateMandateMethodResponsePaypal      CreateMandateMethodResponse = "paypal"
)

func (e CreateMandateMethodResponse) ToPointer() *CreateMandateMethodResponse {
	return &e
}
func (e *CreateMandateMethodResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "paypal":
		*e = CreateMandateMethodResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateMandateMethodResponse: %v", v)
	}
}

// CreateMandateCardLabel - The card's label. Available for card mandates, if the card label could be detected.
type CreateMandateCardLabel string

const (
	CreateMandateCardLabelAmericanExpress CreateMandateCardLabel = "American Express"
	CreateMandateCardLabelCartaSi         CreateMandateCardLabel = "Carta Si"
	CreateMandateCardLabelCarteBleue      CreateMandateCardLabel = "Carte Bleue"
	CreateMandateCardLabelDankort         CreateMandateCardLabel = "Dankort"
	CreateMandateCardLabelDinersClub      CreateMandateCardLabel = "Diners Club"
	CreateMandateCardLabelDiscover        CreateMandateCardLabel = "Discover"
	CreateMandateCardLabelJcb             CreateMandateCardLabel = "JCB"
	CreateMandateCardLabelLaser           CreateMandateCardLabel = "Laser"
	CreateMandateCardLabelMaestro         CreateMandateCardLabel = "Maestro"
	CreateMandateCardLabelMastercard      CreateMandateCardLabel = "Mastercard"
	CreateMandateCardLabelUnionpay        CreateMandateCardLabel = "Unionpay"
	CreateMandateCardLabelVisa            CreateMandateCardLabel = "Visa"
)

func (e CreateMandateCardLabel) ToPointer() *CreateMandateCardLabel {
	return &e
}
func (e *CreateMandateCardLabel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "American Express":
		fallthrough
	case "Carta Si":
		fallthrough
	case "Carte Bleue":
		fallthrough
	case "Dankort":
		fallthrough
	case "Diners Club":
		fallthrough
	case "Discover":
		fallthrough
	case "JCB":
		fallthrough
	case "Laser":
		fallthrough
	case "Maestro":
		fallthrough
	case "Mastercard":
		fallthrough
	case "Unionpay":
		fallthrough
	case "Visa":
		*e = CreateMandateCardLabel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateMandateCardLabel: %v", v)
	}
}

type CreateMandateDetails struct {
	// The customer's name. Available for SEPA Direct Debit and PayPal mandates.
	ConsumerName *string `json:"consumerName,omitempty"`
	// The customer's IBAN or email address. Available for SEPA Direct Debit and PayPal mandates.
	ConsumerAccount *string `json:"consumerAccount,omitempty"`
	// The BIC of the customer's bank. Available for SEPA Direct Debit mandates.
	ConsumerBic *string `json:"consumerBic,omitempty"`
	// The card holder's name. Available for card mandates.
	CardHolder *string `json:"cardHolder,omitempty"`
	// The last four digits of the card number. Available for card mandates.
	CardNumber *string `json:"cardNumber,omitempty"`
	// The card's expiry date in `YYYY-MM-DD` format. Available for card mandates.
	CardExpiryDate *string `json:"cardExpiryDate,omitempty"`
	// The card's label. Available for card mandates, if the card label could be detected.
	CardLabel *CreateMandateCardLabel `json:"cardLabel,omitempty"`
	// Unique alphanumeric representation of this specific card. Available for card mandates. Can be used to identify
	// returning customers.
	CardFingerprint *string `json:"cardFingerprint,omitempty"`
}

func (o *CreateMandateDetails) GetConsumerName() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerName
}

func (o *CreateMandateDetails) GetConsumerAccount() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerAccount
}

func (o *CreateMandateDetails) GetConsumerBic() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerBic
}

func (o *CreateMandateDetails) GetCardHolder() *string {
	if o == nil {
		return nil
	}
	return o.CardHolder
}

func (o *CreateMandateDetails) GetCardNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardNumber
}

func (o *CreateMandateDetails) GetCardExpiryDate() *string {
	if o == nil {
		return nil
	}
	return o.CardExpiryDate
}

func (o *CreateMandateDetails) GetCardLabel() *CreateMandateCardLabel {
	if o == nil {
		return nil
	}
	return o.CardLabel
}

func (o *CreateMandateDetails) GetCardFingerprint() *string {
	if o == nil {
		return nil
	}
	return o.CardFingerprint
}

// CreateMandateStatus - The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
// when we did not received the IBAN yet from the first payment.
type CreateMandateStatus string

const (
	CreateMandateStatusValid   CreateMandateStatus = "valid"
	CreateMandateStatusPending CreateMandateStatus = "pending"
	CreateMandateStatusInvalid CreateMandateStatus = "invalid"
)

func (e CreateMandateStatus) ToPointer() *CreateMandateStatus {
	return &e
}
func (e *CreateMandateStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "valid":
		fallthrough
	case "pending":
		fallthrough
	case "invalid":
		*e = CreateMandateStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateMandateStatus: %v", v)
	}
}

// CreateMandateSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CreateMandateSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreateMandateSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateMandateSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateMandateCustomer - The API resource URL of the [customer](get-customer) that this mandate belongs to.
type CreateMandateCustomer struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreateMandateCustomer) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateMandateCustomer) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateMandateDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type CreateMandateDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *CreateMandateDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *CreateMandateDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// CreateMandateLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type CreateMandateLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self CreateMandateSelf `json:"self"`
	// The API resource URL of the [customer](get-customer) that this mandate belongs to.
	Customer CreateMandateCustomer `json:"customer"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation CreateMandateDocumentation `json:"documentation"`
}

func (o *CreateMandateLinks) GetSelf() CreateMandateSelf {
	if o == nil {
		return CreateMandateSelf{}
	}
	return o.Self
}

func (o *CreateMandateLinks) GetCustomer() CreateMandateCustomer {
	if o == nil {
		return CreateMandateCustomer{}
	}
	return o.Customer
}

func (o *CreateMandateLinks) GetDocumentation() CreateMandateDocumentation {
	if o == nil {
		return CreateMandateDocumentation{}
	}
	return o.Documentation
}

// CreateMandateResponseBody - The newly created mandate object.
type CreateMandateResponseBody struct {
	// Indicates the response contains a mandate object. Will always contain the string `mandate` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this mandate. Example: `mdt_pWUnw6pkBN`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode CreateMandateMode `json:"mode"`
	// Payment method of the mandate.
	//
	// SEPA Direct Debit and PayPal mandates can be created directly.
	Method  CreateMandateMethodResponse `json:"method"`
	Details CreateMandateDetails        `json:"details"`
	// The date when the mandate was signed in `YYYY-MM-DD` format.
	SignatureDate *string `json:"signatureDate"`
	// A custom mandate reference. For SEPA Direct Debit, it is vital to provide a unique reference. Some banks will
	// decline Direct Debit payments if the mandate reference is not unique.
	MandateReference *string `json:"mandateReference"`
	// The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
	// when we did not received the IBAN yet from the first payment.
	Status CreateMandateStatus `json:"status"`
	// The identifier referring to the [customer](get-customer) this mandate was linked to.
	CustomerID string `json:"customerId"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links CreateMandateLinks `json:"_links"`
}

func (o *CreateMandateResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *CreateMandateResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateMandateResponseBody) GetMode() CreateMandateMode {
	if o == nil {
		return CreateMandateMode("")
	}
	return o.Mode
}

func (o *CreateMandateResponseBody) GetMethod() CreateMandateMethodResponse {
	if o == nil {
		return CreateMandateMethodResponse("")
	}
	return o.Method
}

func (o *CreateMandateResponseBody) GetDetails() CreateMandateDetails {
	if o == nil {
		return CreateMandateDetails{}
	}
	return o.Details
}

func (o *CreateMandateResponseBody) GetSignatureDate() *string {
	if o == nil {
		return nil
	}
	return o.SignatureDate
}

func (o *CreateMandateResponseBody) GetMandateReference() *string {
	if o == nil {
		return nil
	}
	return o.MandateReference
}

func (o *CreateMandateResponseBody) GetStatus() CreateMandateStatus {
	if o == nil {
		return CreateMandateStatus("")
	}
	return o.Status
}

func (o *CreateMandateResponseBody) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *CreateMandateResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreateMandateResponseBody) GetLinks() CreateMandateLinks {
	if o == nil {
		return CreateMandateLinks{}
	}
	return o.Links
}

type CreateMandateResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The newly created mandate object.
	Object *CreateMandateResponseBody
}

func (o *CreateMandateResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateMandateResponse) GetObject() *CreateMandateResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
