// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

type GetWebhookRequest struct {
	// Provide the ID of the item you want to perform this operation on.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *GetWebhookRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetWebhookRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// GetWebhookUnprocessableEntityDocumentation - The URL to the generic Mollie API error handling guide.
type GetWebhookUnprocessableEntityDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetWebhookUnprocessableEntityDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetWebhookUnprocessableEntityDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetWebhookUnprocessableEntityLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetWebhookUnprocessableEntityDocumentation `json:"documentation"`
}

func (o *GetWebhookUnprocessableEntityLinks) GetDocumentation() GetWebhookUnprocessableEntityDocumentation {
	if o == nil {
		return GetWebhookUnprocessableEntityDocumentation{}
	}
	return o.Documentation
}

// GetWebhookNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type GetWebhookNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetWebhookNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetWebhookNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetWebhookNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetWebhookNotFoundDocumentation `json:"documentation"`
}

func (o *GetWebhookNotFoundLinks) GetDocumentation() GetWebhookNotFoundDocumentation {
	if o == nil {
		return GetWebhookNotFoundDocumentation{}
	}
	return o.Documentation
}

// GetWebhookWebhookEventTypes - The event's type
type GetWebhookWebhookEventTypes string

const (
	GetWebhookWebhookEventTypesPaymentLinkPaid           GetWebhookWebhookEventTypes = "payment-link.paid"
	GetWebhookWebhookEventTypesBalanceTransactionCreated GetWebhookWebhookEventTypes = "balance-transaction.created"
	GetWebhookWebhookEventTypesSalesInvoiceCreated       GetWebhookWebhookEventTypes = "sales-invoice.created"
	GetWebhookWebhookEventTypesSalesInvoiceIssued        GetWebhookWebhookEventTypes = "sales-invoice.issued"
	GetWebhookWebhookEventTypesSalesInvoiceCanceled      GetWebhookWebhookEventTypes = "sales-invoice.canceled"
	GetWebhookWebhookEventTypesSalesInvoicePaid          GetWebhookWebhookEventTypes = "sales-invoice.paid"
	GetWebhookWebhookEventTypesWildcard                  GetWebhookWebhookEventTypes = "*"
)

func (e GetWebhookWebhookEventTypes) ToPointer() *GetWebhookWebhookEventTypes {
	return &e
}
func (e *GetWebhookWebhookEventTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-link.paid":
		fallthrough
	case "balance-transaction.created":
		fallthrough
	case "sales-invoice.created":
		fallthrough
	case "sales-invoice.issued":
		fallthrough
	case "sales-invoice.canceled":
		fallthrough
	case "sales-invoice.paid":
		fallthrough
	case "*":
		*e = GetWebhookWebhookEventTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhookWebhookEventTypes: %v", v)
	}
}

// GetWebhookStatus - The subscription's current status.
type GetWebhookStatus string

const (
	GetWebhookStatusEnabled  GetWebhookStatus = "enabled"
	GetWebhookStatusBlocked  GetWebhookStatus = "blocked"
	GetWebhookStatusDisabled GetWebhookStatus = "disabled"
	GetWebhookStatusDeleted  GetWebhookStatus = "deleted"
)

func (e GetWebhookStatus) ToPointer() *GetWebhookStatus {
	return &e
}
func (e *GetWebhookStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "blocked":
		fallthrough
	case "disabled":
		fallthrough
	case "deleted":
		*e = GetWebhookStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhookStatus: %v", v)
	}
}

// GetWebhookMode - Whether this entity was created in live mode or in test mode.
type GetWebhookMode string

const (
	GetWebhookModeLive GetWebhookMode = "live"
	GetWebhookModeTest GetWebhookMode = "test"
)

func (e GetWebhookMode) ToPointer() *GetWebhookMode {
	return &e
}
func (e *GetWebhookMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = GetWebhookMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhookMode: %v", v)
	}
}

// GetWebhookDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetWebhookDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetWebhookDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetWebhookDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetWebhookLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetWebhookLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation GetWebhookDocumentation `json:"documentation"`
}

func (o *GetWebhookLinks) GetDocumentation() GetWebhookDocumentation {
	if o == nil {
		return GetWebhookDocumentation{}
	}
	return o.Documentation
}

// GetWebhookResponseBody - The webhook object.
type GetWebhookResponseBody struct {
	// Indicates the response contains a webhook subscription object.
	// Will always contain the string `webhook` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this subscription.
	ID string `json:"id"`
	// The subscription's events destination.
	URL string `json:"url"`
	// The identifier uniquely referring to the profile that created the subscription.
	ProfileID *string `json:"profileId"`
	// The subscription's date time of creation.
	CreatedAt string `json:"createdAt"`
	// The subscription's name.
	Name string `json:"name"`
	// The events types that are subscribed.
	EventTypes []GetWebhookWebhookEventTypes `json:"eventTypes"`
	// The subscription's current status.
	Status GetWebhookStatus `json:"status"`
	// Whether this entity was created in live mode or in test mode.
	Mode GetWebhookMode `json:"mode"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links GetWebhookLinks `json:"_links"`
}

func (o *GetWebhookResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *GetWebhookResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetWebhookResponseBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetWebhookResponseBody) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *GetWebhookResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GetWebhookResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetWebhookResponseBody) GetEventTypes() []GetWebhookWebhookEventTypes {
	if o == nil {
		return []GetWebhookWebhookEventTypes{}
	}
	return o.EventTypes
}

func (o *GetWebhookResponseBody) GetStatus() GetWebhookStatus {
	if o == nil {
		return GetWebhookStatus("")
	}
	return o.Status
}

func (o *GetWebhookResponseBody) GetMode() GetWebhookMode {
	if o == nil {
		return GetWebhookMode("")
	}
	return o.Mode
}

func (o *GetWebhookResponseBody) GetLinks() GetWebhookLinks {
	if o == nil {
		return GetWebhookLinks{}
	}
	return o.Links
}

type GetWebhookResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The webhook object.
	Object *GetWebhookResponseBody
}

func (o *GetWebhookResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetWebhookResponse) GetObject() *GetWebhookResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
