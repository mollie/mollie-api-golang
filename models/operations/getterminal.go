// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

type GetTerminalRequest struct {
	// Provide the ID of the related terminal.
	TerminalID string `pathParam:"style=simple,explode=false,name=terminalId"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *GetTerminalRequest) GetTerminalID() string {
	if o == nil {
		return ""
	}
	return o.TerminalID
}

func (o *GetTerminalRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// GetTerminalNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type GetTerminalNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetTerminalNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetTerminalNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetTerminalNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetTerminalNotFoundDocumentation `json:"documentation"`
}

func (o *GetTerminalNotFoundLinks) GetDocumentation() GetTerminalNotFoundDocumentation {
	if o == nil {
		return GetTerminalNotFoundDocumentation{}
	}
	return o.Documentation
}

// GetTerminalMode - Whether this entity was created in live mode or in test mode.
type GetTerminalMode string

const (
	GetTerminalModeLive GetTerminalMode = "live"
	GetTerminalModeTest GetTerminalMode = "test"
)

func (e GetTerminalMode) ToPointer() *GetTerminalMode {
	return &e
}
func (e *GetTerminalMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = GetTerminalMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTerminalMode: %v", v)
	}
}

// GetTerminalStatus - The status of the terminal.
type GetTerminalStatus string

const (
	GetTerminalStatusPending  GetTerminalStatus = "pending"
	GetTerminalStatusActive   GetTerminalStatus = "active"
	GetTerminalStatusInactive GetTerminalStatus = "inactive"
)

func (e GetTerminalStatus) ToPointer() *GetTerminalStatus {
	return &e
}
func (e *GetTerminalStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "active":
		fallthrough
	case "inactive":
		*e = GetTerminalStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTerminalStatus: %v", v)
	}
}

// GetTerminalBrand - The brand of the terminal.
type GetTerminalBrand string

const (
	GetTerminalBrandPax GetTerminalBrand = "PAX"
	GetTerminalBrandTap GetTerminalBrand = "Tap"
)

func (e GetTerminalBrand) ToPointer() *GetTerminalBrand {
	return &e
}
func (e *GetTerminalBrand) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PAX":
		fallthrough
	case "Tap":
		*e = GetTerminalBrand(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTerminalBrand: %v", v)
	}
}

// GetTerminalModel - The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
type GetTerminalModel string

const (
	GetTerminalModelA35     GetTerminalModel = "A35"
	GetTerminalModelA77     GetTerminalModel = "A77"
	GetTerminalModelA920    GetTerminalModel = "A920"
	GetTerminalModelA920Pro GetTerminalModel = "A920Pro"
	GetTerminalModelIm30    GetTerminalModel = "IM30"
	GetTerminalModelTap     GetTerminalModel = "Tap"
)

func (e GetTerminalModel) ToPointer() *GetTerminalModel {
	return &e
}
func (e *GetTerminalModel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A35":
		fallthrough
	case "A77":
		fallthrough
	case "A920":
		fallthrough
	case "A920Pro":
		fallthrough
	case "IM30":
		fallthrough
	case "Tap":
		*e = GetTerminalModel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTerminalModel: %v", v)
	}
}

// GetTerminalSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetTerminalSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetTerminalSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetTerminalSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetTerminalDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetTerminalDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetTerminalDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetTerminalDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetTerminalLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetTerminalLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self GetTerminalSelf `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation GetTerminalDocumentation `json:"documentation"`
}

func (o *GetTerminalLinks) GetSelf() GetTerminalSelf {
	if o == nil {
		return GetTerminalSelf{}
	}
	return o.Self
}

func (o *GetTerminalLinks) GetDocumentation() GetTerminalDocumentation {
	if o == nil {
		return GetTerminalDocumentation{}
	}
	return o.Documentation
}

// GetTerminalResponseBody - The terminal object.
type GetTerminalResponseBody struct {
	// Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this terminal. Example: `term_7MgL4wea46qkRcoTZjWEH`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode GetTerminalMode `json:"mode"`
	// A short description of the terminal. The description can be used as an identifier for the terminal. Currently, the
	// description is set when the terminal is initially configured. It will be visible in the Mollie Dashboard, and it
	// may be visible on the device itself depending on the device.
	Description string `json:"description"`
	// The status of the terminal.
	Status GetTerminalStatus `json:"status"`
	// The brand of the terminal.
	Brand *GetTerminalBrand `json:"brand"`
	// The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
	Model *GetTerminalModel `json:"model"`
	// The serial number of the terminal. The serial number is provided at terminal creation time.
	SerialNumber *string `json:"serialNumber"`
	// The currency configured on the terminal, in ISO 4217 format. Currently most of our terminals are bound to a
	// specific currency, chosen during setup.
	Currency string `json:"currency"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
	// request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
	// required.
	ProfileID string `json:"profileId"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	UpdatedAt string `json:"updatedAt"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links GetTerminalLinks `json:"_links"`
}

func (o *GetTerminalResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *GetTerminalResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetTerminalResponseBody) GetMode() GetTerminalMode {
	if o == nil {
		return GetTerminalMode("")
	}
	return o.Mode
}

func (o *GetTerminalResponseBody) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *GetTerminalResponseBody) GetStatus() GetTerminalStatus {
	if o == nil {
		return GetTerminalStatus("")
	}
	return o.Status
}

func (o *GetTerminalResponseBody) GetBrand() *GetTerminalBrand {
	if o == nil {
		return nil
	}
	return o.Brand
}

func (o *GetTerminalResponseBody) GetModel() *GetTerminalModel {
	if o == nil {
		return nil
	}
	return o.Model
}

func (o *GetTerminalResponseBody) GetSerialNumber() *string {
	if o == nil {
		return nil
	}
	return o.SerialNumber
}

func (o *GetTerminalResponseBody) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetTerminalResponseBody) GetProfileID() string {
	if o == nil {
		return ""
	}
	return o.ProfileID
}

func (o *GetTerminalResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GetTerminalResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *GetTerminalResponseBody) GetLinks() GetTerminalLinks {
	if o == nil {
		return GetTerminalLinks{}
	}
	return o.Links
}

type GetTerminalResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The terminal object.
	Object *GetTerminalResponseBody
}

func (o *GetTerminalResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetTerminalResponse) GetObject() *GetTerminalResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
