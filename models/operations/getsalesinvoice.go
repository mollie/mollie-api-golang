// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type GetSalesInvoiceRequest struct {
	// Provide the ID of the item you want to perform this operation on.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *GetSalesInvoiceRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetSalesInvoiceRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// GetSalesInvoiceNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type GetSalesInvoiceNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetSalesInvoiceNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetSalesInvoiceNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetSalesInvoiceNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetSalesInvoiceNotFoundDocumentation `json:"documentation"`
}

func (o *GetSalesInvoiceNotFoundLinks) GetDocumentation() GetSalesInvoiceNotFoundDocumentation {
	if o == nil {
		return GetSalesInvoiceNotFoundDocumentation{}
	}
	return o.Documentation
}

// GetSalesInvoiceStatus - The status for the invoice to end up in.
//
// A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
// the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
// mark it as paid. It can then subsequently be sent as well, same as with `issued`.
//
// A status value that cannot be set but can be returned is `canceled`, for invoices which were
// issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
//
// Dependent parameters:
//   - `paymentDetails` is required if invoice should be set directly to `paid`
//   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
//   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
type GetSalesInvoiceStatus string

const (
	GetSalesInvoiceStatusDraft  GetSalesInvoiceStatus = "draft"
	GetSalesInvoiceStatusIssued GetSalesInvoiceStatus = "issued"
	GetSalesInvoiceStatusPaid   GetSalesInvoiceStatus = "paid"
)

func (e GetSalesInvoiceStatus) ToPointer() *GetSalesInvoiceStatus {
	return &e
}

// GetSalesInvoiceVatScheme - The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
type GetSalesInvoiceVatScheme string

const (
	GetSalesInvoiceVatSchemeStandard    GetSalesInvoiceVatScheme = "standard"
	GetSalesInvoiceVatSchemeOneStopShop GetSalesInvoiceVatScheme = "one-stop-shop"
)

func (e GetSalesInvoiceVatScheme) ToPointer() *GetSalesInvoiceVatScheme {
	return &e
}

// GetSalesInvoiceVatMode - The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
// price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
type GetSalesInvoiceVatMode string

const (
	GetSalesInvoiceVatModeExclusive GetSalesInvoiceVatMode = "exclusive"
	GetSalesInvoiceVatModeInclusive GetSalesInvoiceVatMode = "inclusive"
)

func (e GetSalesInvoiceVatMode) ToPointer() *GetSalesInvoiceVatMode {
	return &e
}

// GetSalesInvoiceMetadata - Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type GetSalesInvoiceMetadata struct {
}

// GetSalesInvoicePaymentTerm - The payment term to be set on the invoice.
type GetSalesInvoicePaymentTerm string

const (
	GetSalesInvoicePaymentTermSevendays               GetSalesInvoicePaymentTerm = "7 days"
	GetSalesInvoicePaymentTermFourteendays            GetSalesInvoicePaymentTerm = "14 days"
	GetSalesInvoicePaymentTermThirtydays              GetSalesInvoicePaymentTerm = "30 days"
	GetSalesInvoicePaymentTermFortyFivedays           GetSalesInvoicePaymentTerm = "45 days"
	GetSalesInvoicePaymentTermSixtydays               GetSalesInvoicePaymentTerm = "60 days"
	GetSalesInvoicePaymentTermNinetydays              GetSalesInvoicePaymentTerm = "90 days"
	GetSalesInvoicePaymentTermOneHundredAndTwentydays GetSalesInvoicePaymentTerm = "120 days"
)

func (e GetSalesInvoicePaymentTerm) ToPointer() *GetSalesInvoicePaymentTerm {
	return &e
}

// GetSalesInvoiceSource - The way through which the invoice is to be set to paid.
type GetSalesInvoiceSource string

const (
	GetSalesInvoiceSourceManual      GetSalesInvoiceSource = "manual"
	GetSalesInvoiceSourcePaymentLink GetSalesInvoiceSource = "payment-link"
	GetSalesInvoiceSourcePayment     GetSalesInvoiceSource = "payment"
)

func (e GetSalesInvoiceSource) ToPointer() *GetSalesInvoiceSource {
	return &e
}

// GetSalesInvoicePaymentDetails - Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
// provided details. Required for `paid` status.
type GetSalesInvoicePaymentDetails struct {
	// The way through which the invoice is to be set to paid.
	Source GetSalesInvoiceSource `json:"source"`
	// A reference to the payment the sales invoice is paid by. Required for `source` values `payment-link` and
	// `payment`.
	SourceReference *string `json:"sourceReference,omitempty"`
}

func (o *GetSalesInvoicePaymentDetails) GetSource() GetSalesInvoiceSource {
	if o == nil {
		return GetSalesInvoiceSource("")
	}
	return o.Source
}

func (o *GetSalesInvoicePaymentDetails) GetSourceReference() *string {
	if o == nil {
		return nil
	}
	return o.SourceReference
}

// GetSalesInvoiceEmailDetails - Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
// recipient with the provided `subject` and `body`. Required for `issued` status.
type GetSalesInvoiceEmailDetails struct {
	// The subject of the email to be sent.
	Subject string `json:"subject"`
	// The body of the email to be sent. To add newline characters, you can use `\n`.
	Body string `json:"body"`
}

func (o *GetSalesInvoiceEmailDetails) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

func (o *GetSalesInvoiceEmailDetails) GetBody() string {
	if o == nil {
		return ""
	}
	return o.Body
}

// GetSalesInvoiceRecipientType - The type of recipient, either `consumer` or `business`. This will determine what further fields are
// required on the `recipient` object.
type GetSalesInvoiceRecipientType string

const (
	GetSalesInvoiceRecipientTypeConsumer GetSalesInvoiceRecipientType = "consumer"
	GetSalesInvoiceRecipientTypeBusiness GetSalesInvoiceRecipientType = "business"
)

func (e GetSalesInvoiceRecipientType) ToPointer() *GetSalesInvoiceRecipientType {
	return &e
}

// GetSalesInvoiceLocale - The locale for the recipient, to be used for translations in PDF generation and payment pages.
type GetSalesInvoiceLocale string

const (
	GetSalesInvoiceLocaleEnUs GetSalesInvoiceLocale = "en_US"
	GetSalesInvoiceLocaleEnGb GetSalesInvoiceLocale = "en_GB"
	GetSalesInvoiceLocaleNlNl GetSalesInvoiceLocale = "nl_NL"
	GetSalesInvoiceLocaleNlBe GetSalesInvoiceLocale = "nl_BE"
	GetSalesInvoiceLocaleDeDe GetSalesInvoiceLocale = "de_DE"
	GetSalesInvoiceLocaleDeAt GetSalesInvoiceLocale = "de_AT"
	GetSalesInvoiceLocaleDeCh GetSalesInvoiceLocale = "de_CH"
	GetSalesInvoiceLocaleFrFr GetSalesInvoiceLocale = "fr_FR"
	GetSalesInvoiceLocaleFrBe GetSalesInvoiceLocale = "fr_BE"
)

func (e GetSalesInvoiceLocale) ToPointer() *GetSalesInvoiceLocale {
	return &e
}

type GetSalesInvoiceRecipient struct {
	// The type of recipient, either `consumer` or `business`. This will determine what further fields are
	// required on the `recipient` object.
	Type GetSalesInvoiceRecipientType `json:"type"`
	// The title of the `consumer` type recipient, for example Mr. or Mrs..
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain
	// only numbers.
	GivenName *string `json:"givenName,omitempty"`
	// The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain
	// only numbers.
	FamilyName *string `json:"familyName,omitempty"`
	// The trading name of the `business` type recipient.
	OrganizationName *string `json:"organizationName,omitempty"`
	// The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber`
	// has to be provided.
	OrganizationNumber *string `json:"organizationNumber,omitempty"`
	// The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber`
	// has to be provided.
	VatNumber *string `json:"vatNumber,omitempty"`
	// The email address of the recipient.
	Email string `json:"email"`
	// The phone number of the recipient.
	Phone *string `json:"phone,omitempty"`
	// A street and street number.
	StreetAndNumber string `json:"streetAndNumber"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code.
	PostalCode string `json:"postalCode"`
	// The recipient's city.
	City string `json:"city"`
	// The recipient's region.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	Country string `json:"country"`
	// The locale for the recipient, to be used for translations in PDF generation and payment pages.
	Locale GetSalesInvoiceLocale `json:"locale"`
}

func (o *GetSalesInvoiceRecipient) GetType() GetSalesInvoiceRecipientType {
	if o == nil {
		return GetSalesInvoiceRecipientType("")
	}
	return o.Type
}

func (o *GetSalesInvoiceRecipient) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *GetSalesInvoiceRecipient) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *GetSalesInvoiceRecipient) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *GetSalesInvoiceRecipient) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *GetSalesInvoiceRecipient) GetOrganizationNumber() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationNumber
}

func (o *GetSalesInvoiceRecipient) GetVatNumber() *string {
	if o == nil {
		return nil
	}
	return o.VatNumber
}

func (o *GetSalesInvoiceRecipient) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *GetSalesInvoiceRecipient) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *GetSalesInvoiceRecipient) GetStreetAndNumber() string {
	if o == nil {
		return ""
	}
	return o.StreetAndNumber
}

func (o *GetSalesInvoiceRecipient) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *GetSalesInvoiceRecipient) GetPostalCode() string {
	if o == nil {
		return ""
	}
	return o.PostalCode
}

func (o *GetSalesInvoiceRecipient) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *GetSalesInvoiceRecipient) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *GetSalesInvoiceRecipient) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *GetSalesInvoiceRecipient) GetLocale() GetSalesInvoiceLocale {
	if o == nil {
		return GetSalesInvoiceLocale("")
	}
	return o.Locale
}

// GetSalesInvoiceUnitPrice - The price of a single item excluding VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// The unit price can be zero in case of free items.
type GetSalesInvoiceUnitPrice struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetSalesInvoiceUnitPrice) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetSalesInvoiceUnitPrice) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetSalesInvoiceLineType - The type of discount.
type GetSalesInvoiceLineType string

const (
	GetSalesInvoiceLineTypeAmount     GetSalesInvoiceLineType = "amount"
	GetSalesInvoiceLineTypePercentage GetSalesInvoiceLineType = "percentage"
)

func (e GetSalesInvoiceLineType) ToPointer() *GetSalesInvoiceLineType {
	return &e
}

// GetSalesInvoiceLineDiscount - The discount to be applied to the line item.
type GetSalesInvoiceLineDiscount struct {
	// The type of discount.
	Type GetSalesInvoiceLineType `json:"type"`
	// A string containing an exact monetary amount in the given currency, or the percentage.
	Value string `json:"value"`
}

func (o *GetSalesInvoiceLineDiscount) GetType() GetSalesInvoiceLineType {
	if o == nil {
		return GetSalesInvoiceLineType("")
	}
	return o.Type
}

func (o *GetSalesInvoiceLineDiscount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetSalesInvoiceLine struct {
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The vat rate to be applied to this line item.
	VatRate string `json:"vatRate"`
	// The price of a single item excluding VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// The unit price can be zero in case of free items.
	UnitPrice GetSalesInvoiceUnitPrice `json:"unitPrice"`
	// The discount to be applied to the line item.
	Discount *GetSalesInvoiceLineDiscount `json:"discount,omitempty"`
}

func (o *GetSalesInvoiceLine) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *GetSalesInvoiceLine) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *GetSalesInvoiceLine) GetVatRate() string {
	if o == nil {
		return ""
	}
	return o.VatRate
}

func (o *GetSalesInvoiceLine) GetUnitPrice() GetSalesInvoiceUnitPrice {
	if o == nil {
		return GetSalesInvoiceUnitPrice{}
	}
	return o.UnitPrice
}

func (o *GetSalesInvoiceLine) GetDiscount() *GetSalesInvoiceLineDiscount {
	if o == nil {
		return nil
	}
	return o.Discount
}

// GetSalesInvoiceDiscountType - The type of discount.
type GetSalesInvoiceDiscountType string

const (
	GetSalesInvoiceDiscountTypeAmount     GetSalesInvoiceDiscountType = "amount"
	GetSalesInvoiceDiscountTypePercentage GetSalesInvoiceDiscountType = "percentage"
)

func (e GetSalesInvoiceDiscountType) ToPointer() *GetSalesInvoiceDiscountType {
	return &e
}

// GetSalesInvoiceDiscount - The discount to be applied to the entire invoice, applied on top of any line item discounts.
type GetSalesInvoiceDiscount struct {
	// The type of discount.
	Type GetSalesInvoiceDiscountType `json:"type"`
	// A string containing an exact monetary amount in the given currency, or the percentage.
	Value string `json:"value"`
}

func (o *GetSalesInvoiceDiscount) GetType() GetSalesInvoiceDiscountType {
	if o == nil {
		return GetSalesInvoiceDiscountType("")
	}
	return o.Type
}

func (o *GetSalesInvoiceDiscount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetSalesInvoiceAmountDue - The amount that is left to be paid.
type GetSalesInvoiceAmountDue struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetSalesInvoiceAmountDue) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetSalesInvoiceAmountDue) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetSalesInvoiceSubtotalAmount - The total amount without VAT before discounts.
type GetSalesInvoiceSubtotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetSalesInvoiceSubtotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetSalesInvoiceSubtotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetSalesInvoiceTotalAmount - The total amount with VAT.
type GetSalesInvoiceTotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetSalesInvoiceTotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetSalesInvoiceTotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetSalesInvoiceTotalVatAmount - The total VAT amount.
type GetSalesInvoiceTotalVatAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetSalesInvoiceTotalVatAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetSalesInvoiceTotalVatAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetSalesInvoiceDiscountedSubtotalAmount - The total amount without VAT after discounts.
type GetSalesInvoiceDiscountedSubtotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetSalesInvoiceDiscountedSubtotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetSalesInvoiceDiscountedSubtotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetSalesInvoiceSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetSalesInvoiceSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetSalesInvoiceSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetSalesInvoiceSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetSalesInvoiceInvoicePayment - The URL your customer should visit to make payment for the invoice. This is where you should redirect the
// customer to unless the `status` is set to `paid`.
type GetSalesInvoiceInvoicePayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetSalesInvoiceInvoicePayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetSalesInvoiceInvoicePayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetSalesInvoicePdfLink - The URL the invoice is available at, if generated.
type GetSalesInvoicePdfLink struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetSalesInvoicePdfLink) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetSalesInvoicePdfLink) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetSalesInvoiceDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetSalesInvoiceDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetSalesInvoiceDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetSalesInvoiceDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetSalesInvoiceLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetSalesInvoiceLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *GetSalesInvoiceSelf `json:"self,omitempty"`
	// The URL your customer should visit to make payment for the invoice. This is where you should redirect the
	// customer to unless the `status` is set to `paid`.
	InvoicePayment *GetSalesInvoiceInvoicePayment `json:"invoicePayment,omitempty"`
	// The URL the invoice is available at, if generated.
	PdfLink *GetSalesInvoicePdfLink `json:"pdfLink,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *GetSalesInvoiceDocumentation `json:"documentation,omitempty"`
}

func (o *GetSalesInvoiceLinks) GetSelf() *GetSalesInvoiceSelf {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *GetSalesInvoiceLinks) GetInvoicePayment() *GetSalesInvoiceInvoicePayment {
	if o == nil {
		return nil
	}
	return o.InvoicePayment
}

func (o *GetSalesInvoiceLinks) GetPdfLink() *GetSalesInvoicePdfLink {
	if o == nil {
		return nil
	}
	return o.PdfLink
}

func (o *GetSalesInvoiceLinks) GetDocumentation() *GetSalesInvoiceDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

// GetSalesInvoiceResponseBody - The Sales Invoice object.
type GetSalesInvoiceResponseBody struct {
	// Indicates the response contains a sales invoice object. Will always contain the string `sales-invoice` for this
	// endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this invoice. Example: `invoice_4Y0eZitmBnQ6IDoMqZQKh`.
	ID *string `json:"id,omitempty"`
	// When issued, an invoice number will be set for the sales invoice.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`
	// The status for the invoice to end up in.
	//
	// A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
	// the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
	// mark it as paid. It can then subsequently be sent as well, same as with `issued`.
	//
	// A status value that cannot be set but can be returned is `canceled`, for invoices which were
	// issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
	//
	// Dependent parameters:
	//   - `paymentDetails` is required if invoice should be set directly to `paid`
	//   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
	//   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
	Status *GetSalesInvoiceStatus `json:"status,omitempty"`
	// The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
	VatScheme *GetSalesInvoiceVatScheme `json:"vatScheme,omitempty"`
	// The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
	// price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
	VatMode *GetSalesInvoiceVatMode `json:"vatMode,omitempty"`
	// A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
	Memo *string `json:"memo,omitempty"`
	// Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *GetSalesInvoiceMetadata `json:"metadata,omitempty"`
	// The payment term to be set on the invoice.
	PaymentTerm *GetSalesInvoicePaymentTerm `json:"paymentTerm,omitempty"`
	// Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
	// provided details. Required for `paid` status.
	PaymentDetails *GetSalesInvoicePaymentDetails `json:"paymentDetails,omitempty"`
	// Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
	// recipient with the provided `subject` and `body`. Required for `issued` status.
	EmailDetails *GetSalesInvoiceEmailDetails `json:"emailDetails,omitempty"`
	// The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
	// provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
	CustomerID *string `json:"customerId,omitempty"`
	// The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
	// `customerId` becomes required as well. Only allowed for invoices with status `paid`.
	MandateID *string `json:"mandateId,omitempty"`
	// An identifier tied to the recipient data. This should be a unique value based on data your system contains,
	// so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
	// is not required to send a first invoice to a recipient.
	RecipientIdentifier *string                   `json:"recipientIdentifier,omitempty"`
	Recipient           *GetSalesInvoiceRecipient `json:"recipient,omitempty"`
	// Provide the line items for the invoice. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the invoice.
	Lines []GetSalesInvoiceLine `json:"lines,omitempty"`
	// The discount to be applied to the entire invoice, applied on top of any line item discounts.
	Discount *GetSalesInvoiceDiscount `json:"discount,omitempty"`
	// The amount that is left to be paid.
	AmountDue *GetSalesInvoiceAmountDue `json:"amountDue,omitempty"`
	// The total amount without VAT before discounts.
	SubtotalAmount *GetSalesInvoiceSubtotalAmount `json:"subtotalAmount,omitempty"`
	// The total amount with VAT.
	TotalAmount *GetSalesInvoiceTotalAmount `json:"totalAmount,omitempty"`
	// The total VAT amount.
	TotalVatAmount *GetSalesInvoiceTotalVatAmount `json:"totalVatAmount,omitempty"`
	// The total amount without VAT after discounts.
	DiscountedSubtotalAmount *GetSalesInvoiceDiscountedSubtotalAmount `json:"discountedSubtotalAmount,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// If issued, the date when the sales invoice was issued, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format.
	IssuedAt *string `json:"issuedAt,omitempty"`
	// If paid, the date when the sales invoice was paid, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format.
	PaidAt *string `json:"paidAt,omitempty"`
	// If issued, the date when the sales invoice payment is due, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format.
	DueAt *string `json:"dueAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *GetSalesInvoiceLinks `json:"_links,omitempty"`
}

func (o *GetSalesInvoiceResponseBody) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *GetSalesInvoiceResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetSalesInvoiceResponseBody) GetInvoiceNumber() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceNumber
}

func (o *GetSalesInvoiceResponseBody) GetStatus() *GetSalesInvoiceStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetSalesInvoiceResponseBody) GetVatScheme() *GetSalesInvoiceVatScheme {
	if o == nil {
		return nil
	}
	return o.VatScheme
}

func (o *GetSalesInvoiceResponseBody) GetVatMode() *GetSalesInvoiceVatMode {
	if o == nil {
		return nil
	}
	return o.VatMode
}

func (o *GetSalesInvoiceResponseBody) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *GetSalesInvoiceResponseBody) GetMetadata() *GetSalesInvoiceMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *GetSalesInvoiceResponseBody) GetPaymentTerm() *GetSalesInvoicePaymentTerm {
	if o == nil {
		return nil
	}
	return o.PaymentTerm
}

func (o *GetSalesInvoiceResponseBody) GetPaymentDetails() *GetSalesInvoicePaymentDetails {
	if o == nil {
		return nil
	}
	return o.PaymentDetails
}

func (o *GetSalesInvoiceResponseBody) GetEmailDetails() *GetSalesInvoiceEmailDetails {
	if o == nil {
		return nil
	}
	return o.EmailDetails
}

func (o *GetSalesInvoiceResponseBody) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *GetSalesInvoiceResponseBody) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *GetSalesInvoiceResponseBody) GetRecipientIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.RecipientIdentifier
}

func (o *GetSalesInvoiceResponseBody) GetRecipient() *GetSalesInvoiceRecipient {
	if o == nil {
		return nil
	}
	return o.Recipient
}

func (o *GetSalesInvoiceResponseBody) GetLines() []GetSalesInvoiceLine {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *GetSalesInvoiceResponseBody) GetDiscount() *GetSalesInvoiceDiscount {
	if o == nil {
		return nil
	}
	return o.Discount
}

func (o *GetSalesInvoiceResponseBody) GetAmountDue() *GetSalesInvoiceAmountDue {
	if o == nil {
		return nil
	}
	return o.AmountDue
}

func (o *GetSalesInvoiceResponseBody) GetSubtotalAmount() *GetSalesInvoiceSubtotalAmount {
	if o == nil {
		return nil
	}
	return o.SubtotalAmount
}

func (o *GetSalesInvoiceResponseBody) GetTotalAmount() *GetSalesInvoiceTotalAmount {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *GetSalesInvoiceResponseBody) GetTotalVatAmount() *GetSalesInvoiceTotalVatAmount {
	if o == nil {
		return nil
	}
	return o.TotalVatAmount
}

func (o *GetSalesInvoiceResponseBody) GetDiscountedSubtotalAmount() *GetSalesInvoiceDiscountedSubtotalAmount {
	if o == nil {
		return nil
	}
	return o.DiscountedSubtotalAmount
}

func (o *GetSalesInvoiceResponseBody) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetSalesInvoiceResponseBody) GetIssuedAt() *string {
	if o == nil {
		return nil
	}
	return o.IssuedAt
}

func (o *GetSalesInvoiceResponseBody) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *GetSalesInvoiceResponseBody) GetDueAt() *string {
	if o == nil {
		return nil
	}
	return o.DueAt
}

func (o *GetSalesInvoiceResponseBody) GetLinks() *GetSalesInvoiceLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type GetSalesInvoiceResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The Sales Invoice object.
	Object *GetSalesInvoiceResponseBody
}

func (o *GetSalesInvoiceResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetSalesInvoiceResponse) GetObject() *GetSalesInvoiceResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
