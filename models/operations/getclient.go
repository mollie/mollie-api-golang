// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

type GetClientRequest struct {
	// Provide the ID of the item you want to perform this operation on.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// This endpoint allows embedding related API items by appending the following values via the `embed` query string
	// parameter.
	//
	// * `organization`: Include the organization of the client. Available for `signuplink` partners, or for `oauth`
	//   partners with the `organizations.read` scope.
	// * `onboarding`: Include the onboarding status of the client. Available for `signuplink` partners, or for `oauth`
	//   partners with the `onboarding.read` scope.
	// * `capabilities`: Include the [capabilities](list-capabilities) of the client organization.
	//   Available for *oauth* partners with the `onboarding.read` scope.
	Embed *string `queryParam:"style=form,explode=true,name=embed"`
}

func (o *GetClientRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetClientRequest) GetEmbed() *string {
	if o == nil {
		return nil
	}
	return o.Embed
}

// GetClientNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type GetClientNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetClientNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetClientNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetClientNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetClientNotFoundDocumentation `json:"documentation"`
}

func (o *GetClientNotFoundLinks) GetDocumentation() GetClientNotFoundDocumentation {
	if o == nil {
		return GetClientNotFoundDocumentation{}
	}
	return o.Documentation
}

// GetClientCommission - The commission object.
type GetClientCommission struct {
	// The commission count.
	Count *int64 `json:"count,omitempty"`
}

func (o *GetClientCommission) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

// GetClientSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetClientSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetClientSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetClientSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetClientLinksOrganization - The API resource URL of the client's organization.
type GetClientLinksOrganization struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetClientLinksOrganization) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetClientLinksOrganization) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetClientLinksOnboarding - The API resource URL of the client's onboarding status.
type GetClientLinksOnboarding struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetClientLinksOnboarding) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetClientLinksOnboarding) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetClientDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetClientDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetClientDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetClientDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetClientLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetClientLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *GetClientSelf `json:"self,omitempty"`
	// The API resource URL of the client's organization.
	Organization *GetClientLinksOrganization `json:"organization,omitempty"`
	// The API resource URL of the client's onboarding status.
	Onboarding *GetClientLinksOnboarding `json:"onboarding,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *GetClientDocumentation `json:"documentation,omitempty"`
}

func (o *GetClientLinks) GetSelf() *GetClientSelf {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *GetClientLinks) GetOrganization() *GetClientLinksOrganization {
	if o == nil {
		return nil
	}
	return o.Organization
}

func (o *GetClientLinks) GetOnboarding() *GetClientLinksOnboarding {
	if o == nil {
		return nil
	}
	return o.Onboarding
}

func (o *GetClientLinks) GetDocumentation() *GetClientDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

// GetClientLocale - The preferred locale of the merchant, as set in their Mollie dashboard.
type GetClientLocale string

const (
	GetClientLocaleEnUs GetClientLocale = "en_US"
	GetClientLocaleEnGb GetClientLocale = "en_GB"
	GetClientLocaleNlNl GetClientLocale = "nl_NL"
	GetClientLocaleNlBe GetClientLocale = "nl_BE"
	GetClientLocaleDeDe GetClientLocale = "de_DE"
	GetClientLocaleDeAt GetClientLocale = "de_AT"
	GetClientLocaleDeCh GetClientLocale = "de_CH"
	GetClientLocaleFrFr GetClientLocale = "fr_FR"
	GetClientLocaleFrBe GetClientLocale = "fr_BE"
	GetClientLocaleEsEs GetClientLocale = "es_ES"
	GetClientLocaleCaEs GetClientLocale = "ca_ES"
	GetClientLocalePtPt GetClientLocale = "pt_PT"
	GetClientLocaleItIt GetClientLocale = "it_IT"
	GetClientLocaleNbNo GetClientLocale = "nb_NO"
	GetClientLocaleSvSe GetClientLocale = "sv_SE"
	GetClientLocaleFiFi GetClientLocale = "fi_FI"
	GetClientLocaleDaDk GetClientLocale = "da_DK"
	GetClientLocaleIsIs GetClientLocale = "is_IS"
	GetClientLocaleHuHu GetClientLocale = "hu_HU"
	GetClientLocalePlPl GetClientLocale = "pl_PL"
	GetClientLocaleLvLv GetClientLocale = "lv_LV"
	GetClientLocaleLtLt GetClientLocale = "lt_LT"
)

func (e GetClientLocale) ToPointer() *GetClientLocale {
	return &e
}
func (e *GetClientLocale) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		fallthrough
	case "es_ES":
		fallthrough
	case "ca_ES":
		fallthrough
	case "pt_PT":
		fallthrough
	case "it_IT":
		fallthrough
	case "nb_NO":
		fallthrough
	case "sv_SE":
		fallthrough
	case "fi_FI":
		fallthrough
	case "da_DK":
		fallthrough
	case "is_IS":
		fallthrough
	case "hu_HU":
		fallthrough
	case "pl_PL":
		fallthrough
	case "lv_LV":
		fallthrough
	case "lt_LT":
		*e = GetClientLocale(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetClientLocale: %v", v)
	}
}

// GetClientAddress - The address of the organization.
type GetClientAddress struct {
	// A street and street number.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	PostalCode *string `json:"postalCode,omitempty"`
	City       *string `json:"city,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	Country *string `json:"country,omitempty"`
}

func (o *GetClientAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *GetClientAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *GetClientAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *GetClientAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// GetClientVatRegulation - Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United
// Kingdom, and shifted VAT for merchants in the European Union.
//
// The field is not present for merchants residing in other countries.
type GetClientVatRegulation string

const (
	GetClientVatRegulationDutch   GetClientVatRegulation = "dutch"
	GetClientVatRegulationBritish GetClientVatRegulation = "british"
	GetClientVatRegulationShifted GetClientVatRegulation = "shifted"
)

func (e GetClientVatRegulation) ToPointer() *GetClientVatRegulation {
	return &e
}
func (e *GetClientVatRegulation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dutch":
		fallthrough
	case "british":
		fallthrough
	case "shifted":
		*e = GetClientVatRegulation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetClientVatRegulation: %v", v)
	}
}

// GetClientOrganizationSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetClientOrganizationSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetClientOrganizationSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetClientOrganizationSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetClientOrganizationDashboard - Direct link to the organization's Mollie dashboard.
type GetClientOrganizationDashboard struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetClientOrganizationDashboard) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetClientOrganizationDashboard) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetClientOrganizationDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetClientOrganizationDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetClientOrganizationDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetClientOrganizationDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetClientOrganizationLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetClientOrganizationLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *GetClientOrganizationSelf `json:"self,omitempty"`
	// Direct link to the organization's Mollie dashboard.
	Dashboard *GetClientOrganizationDashboard `json:"dashboard,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *GetClientOrganizationDocumentation `json:"documentation,omitempty"`
}

func (o *GetClientOrganizationLinks) GetSelf() *GetClientOrganizationSelf {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *GetClientOrganizationLinks) GetDashboard() *GetClientOrganizationDashboard {
	if o == nil {
		return nil
	}
	return o.Dashboard
}

func (o *GetClientOrganizationLinks) GetDocumentation() *GetClientOrganizationDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

type GetClientEmbeddedOrganization struct {
	// Indicates the response contains an organization object. Will always contain the string `organization` for this
	// resource type.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this organization. Example: `org_12345678`.
	ID *string `json:"id,omitempty"`
	// The name of the organization.
	Name *string `json:"name,omitempty"`
	// The email address associated with the organization.
	Email *string `json:"email,omitempty"`
	// The preferred locale of the merchant, as set in their Mollie dashboard.
	Locale *GetClientLocale `json:"locale,omitempty"`
	// The address of the organization.
	Address *GetClientAddress `json:"address,omitempty"`
	// The registration number of the organization at their local chamber of commerce.
	RegistrationNumber *string `json:"registrationNumber,omitempty"`
	// The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT numbers are
	// verified against the international registry *VIES*.
	//
	// The field is not present for merchants residing in other countries.
	VatNumber *string `json:"vatNumber,omitempty"`
	// Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United
	// Kingdom, and shifted VAT for merchants in the European Union.
	//
	// The field is not present for merchants residing in other countries.
	VatRegulation *GetClientVatRegulation `json:"vatRegulation,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *GetClientOrganizationLinks `json:"_links,omitempty"`
}

func (o *GetClientEmbeddedOrganization) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *GetClientEmbeddedOrganization) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetClientEmbeddedOrganization) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetClientEmbeddedOrganization) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetClientEmbeddedOrganization) GetLocale() *GetClientLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *GetClientEmbeddedOrganization) GetAddress() *GetClientAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *GetClientEmbeddedOrganization) GetRegistrationNumber() *string {
	if o == nil {
		return nil
	}
	return o.RegistrationNumber
}

func (o *GetClientEmbeddedOrganization) GetVatNumber() *string {
	if o == nil {
		return nil
	}
	return o.VatNumber
}

func (o *GetClientEmbeddedOrganization) GetVatRegulation() *GetClientVatRegulation {
	if o == nil {
		return nil
	}
	return o.VatRegulation
}

func (o *GetClientEmbeddedOrganization) GetLinks() *GetClientOrganizationLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

// GetClientOnboardingStatus - The current status of the organization's onboarding process.
//
// * `needs-data` — The merchant needs to provide additional information
// * `in-review` — The merchant provided all information, awaiting review from Mollie
// * `completed` — The onboarding is completed
type GetClientOnboardingStatus string

const (
	GetClientOnboardingStatusNeedsData GetClientOnboardingStatus = "needs-data"
	GetClientOnboardingStatusInReview  GetClientOnboardingStatus = "in-review"
	GetClientOnboardingStatusCompleted GetClientOnboardingStatus = "completed"
)

func (e GetClientOnboardingStatus) ToPointer() *GetClientOnboardingStatus {
	return &e
}
func (e *GetClientOnboardingStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "needs-data":
		fallthrough
	case "in-review":
		fallthrough
	case "completed":
		*e = GetClientOnboardingStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetClientOnboardingStatus: %v", v)
	}
}

// GetClientOnboardingSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetClientOnboardingSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetClientOnboardingSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetClientOnboardingSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetClientOnboardingDashboard - Direct link to the onboarding process in the Mollie dashboard. The merchant can be redirected to this page to
// complete their onboarding.
type GetClientOnboardingDashboard struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetClientOnboardingDashboard) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetClientOnboardingDashboard) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetClientOnboardingOrganization - The API resource URL of the organization.
type GetClientOnboardingOrganization struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetClientOnboardingOrganization) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetClientOnboardingOrganization) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetClientOnboardingDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetClientOnboardingDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetClientOnboardingDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetClientOnboardingDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetClientOnboardingLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetClientOnboardingLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *GetClientOnboardingSelf `json:"self,omitempty"`
	// Direct link to the onboarding process in the Mollie dashboard. The merchant can be redirected to this page to
	// complete their onboarding.
	Dashboard *GetClientOnboardingDashboard `json:"dashboard,omitempty"`
	// The API resource URL of the organization.
	Organization *GetClientOnboardingOrganization `json:"organization,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *GetClientOnboardingDocumentation `json:"documentation,omitempty"`
}

func (o *GetClientOnboardingLinks) GetSelf() *GetClientOnboardingSelf {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *GetClientOnboardingLinks) GetDashboard() *GetClientOnboardingDashboard {
	if o == nil {
		return nil
	}
	return o.Dashboard
}

func (o *GetClientOnboardingLinks) GetOrganization() *GetClientOnboardingOrganization {
	if o == nil {
		return nil
	}
	return o.Organization
}

func (o *GetClientOnboardingLinks) GetDocumentation() *GetClientOnboardingDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

type GetClientEmbeddedOnboarding struct {
	// Indicates the response contains an onboarding status object. Will always contain the string `onboarding` for this
	// resource type.
	Resource *string `json:"resource,omitempty"`
	// The name of the organization.
	Name *string `json:"name,omitempty"`
	// The current status of the organization's onboarding process.
	//
	// * `needs-data` — The merchant needs to provide additional information
	// * `in-review` — The merchant provided all information, awaiting review from Mollie
	// * `completed` — The onboarding is completed
	Status *GetClientOnboardingStatus `json:"status,omitempty"`
	// Whether the organization can receive payments.
	CanReceivePayments *bool `json:"canReceivePayments,omitempty"`
	// Whether the organization can receive settlements to their external bank account.
	CanReceiveSettlements *bool `json:"canReceiveSettlements,omitempty"`
	// The sign up date time of the organization in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	SignedUpAt *string `json:"signedUpAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *GetClientOnboardingLinks `json:"_links,omitempty"`
}

func (o *GetClientEmbeddedOnboarding) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *GetClientEmbeddedOnboarding) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetClientEmbeddedOnboarding) GetStatus() *GetClientOnboardingStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetClientEmbeddedOnboarding) GetCanReceivePayments() *bool {
	if o == nil {
		return nil
	}
	return o.CanReceivePayments
}

func (o *GetClientEmbeddedOnboarding) GetCanReceiveSettlements() *bool {
	if o == nil {
		return nil
	}
	return o.CanReceiveSettlements
}

func (o *GetClientEmbeddedOnboarding) GetSignedUpAt() *string {
	if o == nil {
		return nil
	}
	return o.SignedUpAt
}

func (o *GetClientEmbeddedOnboarding) GetLinks() *GetClientOnboardingLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type GetClientCapabilitiesStatus string

const (
	GetClientCapabilitiesStatusUnrequested GetClientCapabilitiesStatus = "unrequested"
	GetClientCapabilitiesStatusEnabled     GetClientCapabilitiesStatus = "enabled"
	GetClientCapabilitiesStatusDisabled    GetClientCapabilitiesStatus = "disabled"
	GetClientCapabilitiesStatusPending     GetClientCapabilitiesStatus = "pending"
)

func (e GetClientCapabilitiesStatus) ToPointer() *GetClientCapabilitiesStatus {
	return &e
}
func (e *GetClientCapabilitiesStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unrequested":
		fallthrough
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "pending":
		*e = GetClientCapabilitiesStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetClientCapabilitiesStatus: %v", v)
	}
}

type GetClientStatusReason string

const (
	GetClientStatusReasonRequirementPastDue          GetClientStatusReason = "requirement-past-due"
	GetClientStatusReasonOnboardingInformationNeeded GetClientStatusReason = "onboarding-information-needed"
)

func (e GetClientStatusReason) ToPointer() *GetClientStatusReason {
	return &e
}
func (e *GetClientStatusReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "requirement-past-due":
		fallthrough
	case "onboarding-information-needed":
		*e = GetClientStatusReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetClientStatusReason: %v", v)
	}
}

// GetClientRequirementStatus - The status of the requirement depends on its due date.
// If no due date is given, the status will be `requested`.
type GetClientRequirementStatus string

const (
	GetClientRequirementStatusCurrentlyDue GetClientRequirementStatus = "currently-due"
	GetClientRequirementStatusPastDue      GetClientRequirementStatus = "past-due"
	GetClientRequirementStatusRequested    GetClientRequirementStatus = "requested"
)

func (e GetClientRequirementStatus) ToPointer() *GetClientRequirementStatus {
	return &e
}
func (e *GetClientRequirementStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "currently-due":
		fallthrough
	case "past-due":
		fallthrough
	case "requested":
		*e = GetClientRequirementStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetClientRequirementStatus: %v", v)
	}
}

// GetClientCapabilitiesDashboard - If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled.
// For example, where necessary documents are to be uploaded.
type GetClientCapabilitiesDashboard struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *GetClientCapabilitiesDashboard) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *GetClientCapabilitiesDashboard) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

type GetClientRequirementLinks struct {
	// If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled.
	// For example, where necessary documents are to be uploaded.
	Dashboard *GetClientCapabilitiesDashboard `json:"dashboard,omitempty"`
}

func (o *GetClientRequirementLinks) GetDashboard() *GetClientCapabilitiesDashboard {
	if o == nil {
		return nil
	}
	return o.Dashboard
}

type GetClientRequirement struct {
	// The name of this requirement, referring to the task to be fulfilled by the organization
	// to enable or re-enable the capability. The name is unique among other requirements
	// of the same capability.
	ID *string `json:"id,omitempty"`
	// The status of the requirement depends on its due date.
	// If no due date is given, the status will be `requested`.
	Status *GetClientRequirementStatus `json:"status,omitempty"`
	// Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format.
	DueDate *string                    `json:"dueDate,omitempty"`
	Links   *GetClientRequirementLinks `json:"_links,omitempty"`
}

func (o *GetClientRequirement) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetClientRequirement) GetStatus() *GetClientRequirementStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetClientRequirement) GetDueDate() *string {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *GetClientRequirement) GetLinks() *GetClientRequirementLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type GetClientCapabilities struct {
	// Always the word `capability` for this resource type.
	Resource *string `json:"resource,omitempty"`
	// A unique name for this capability like `payments` / `settlements`.
	Name         *string                      `json:"name,omitempty"`
	Status       *GetClientCapabilitiesStatus `json:"status,omitempty"`
	StatusReason *GetClientStatusReason       `json:"statusReason,omitempty"`
	Requirements []GetClientRequirement       `json:"requirements,omitempty"`
}

func (o *GetClientCapabilities) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *GetClientCapabilities) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetClientCapabilities) GetStatus() *GetClientCapabilitiesStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetClientCapabilities) GetStatusReason() *GetClientStatusReason {
	if o == nil {
		return nil
	}
	return o.StatusReason
}

func (o *GetClientCapabilities) GetRequirements() []GetClientRequirement {
	if o == nil {
		return nil
	}
	return o.Requirements
}

type GetClientEmbedded struct {
	Organization *GetClientEmbeddedOrganization `json:"organization,omitempty"`
	Onboarding   *GetClientEmbeddedOnboarding   `json:"onboarding,omitempty"`
	Capabilities *GetClientCapabilities         `json:"capabilities,omitempty"`
}

func (o *GetClientEmbedded) GetOrganization() *GetClientEmbeddedOrganization {
	if o == nil {
		return nil
	}
	return o.Organization
}

func (o *GetClientEmbedded) GetOnboarding() *GetClientEmbeddedOnboarding {
	if o == nil {
		return nil
	}
	return o.Onboarding
}

func (o *GetClientEmbedded) GetCapabilities() *GetClientCapabilities {
	if o == nil {
		return nil
	}
	return o.Capabilities
}

// GetClientResponseBody - The client object.
type GetClientResponseBody struct {
	// Indicates the response contains a client object. Will always contain the string `client` for this resource type.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this client. Example: `org_12345678`.
	ID *string `json:"id,omitempty"`
	// The commission object.
	Commission *GetClientCommission `json:"commission,omitempty"`
	// The date and time the client organization was created, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format.
	OrganizationCreatedAt *string `json:"organizationCreatedAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links    *GetClientLinks    `json:"_links,omitempty"`
	Embedded *GetClientEmbedded `json:"_embedded,omitempty"`
}

func (o *GetClientResponseBody) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *GetClientResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetClientResponseBody) GetCommission() *GetClientCommission {
	if o == nil {
		return nil
	}
	return o.Commission
}

func (o *GetClientResponseBody) GetOrganizationCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationCreatedAt
}

func (o *GetClientResponseBody) GetLinks() *GetClientLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *GetClientResponseBody) GetEmbedded() *GetClientEmbedded {
	if o == nil {
		return nil
	}
	return o.Embedded
}

type GetClientResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The client object.
	Object *GetClientResponseBody
}

func (o *GetClientResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetClientResponse) GetObject() *GetClientResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
