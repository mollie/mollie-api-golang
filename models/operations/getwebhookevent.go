// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
)

type GetWebhookEventRequest struct {
	// Provide the ID of the item you want to perform this operation on.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *GetWebhookEventRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetWebhookEventRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// GetWebhookEventNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type GetWebhookEventNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetWebhookEventNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetWebhookEventNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetWebhookEventNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetWebhookEventNotFoundDocumentation `json:"documentation"`
}

func (o *GetWebhookEventNotFoundLinks) GetDocumentation() GetWebhookEventNotFoundDocumentation {
	if o == nil {
		return GetWebhookEventNotFoundDocumentation{}
	}
	return o.Documentation
}

// GetWebhookEventWebhookEventTypes - The event's type
type GetWebhookEventWebhookEventTypes string

const (
	GetWebhookEventWebhookEventTypesPaymentLinkPaid           GetWebhookEventWebhookEventTypes = "payment-link.paid"
	GetWebhookEventWebhookEventTypesBalanceTransactionCreated GetWebhookEventWebhookEventTypes = "balance-transaction.created"
	GetWebhookEventWebhookEventTypesSalesInvoiceCreated       GetWebhookEventWebhookEventTypes = "sales-invoice.created"
	GetWebhookEventWebhookEventTypesSalesInvoiceIssued        GetWebhookEventWebhookEventTypes = "sales-invoice.issued"
	GetWebhookEventWebhookEventTypesSalesInvoiceCanceled      GetWebhookEventWebhookEventTypes = "sales-invoice.canceled"
	GetWebhookEventWebhookEventTypesSalesInvoicePaid          GetWebhookEventWebhookEventTypes = "sales-invoice.paid"
	GetWebhookEventWebhookEventTypesWildcard                  GetWebhookEventWebhookEventTypes = "*"
)

func (e GetWebhookEventWebhookEventTypes) ToPointer() *GetWebhookEventWebhookEventTypes {
	return &e
}
func (e *GetWebhookEventWebhookEventTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-link.paid":
		fallthrough
	case "balance-transaction.created":
		fallthrough
	case "sales-invoice.created":
		fallthrough
	case "sales-invoice.issued":
		fallthrough
	case "sales-invoice.canceled":
		fallthrough
	case "sales-invoice.paid":
		fallthrough
	case "*":
		*e = GetWebhookEventWebhookEventTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhookEventWebhookEventTypes: %v", v)
	}
}

// GetWebhookEventMode2 - Whether this entity was created in live mode or in test mode.
type GetWebhookEventMode2 string

const (
	GetWebhookEventMode2Live GetWebhookEventMode2 = "live"
	GetWebhookEventMode2Test GetWebhookEventMode2 = "test"
)

func (e GetWebhookEventMode2) ToPointer() *GetWebhookEventMode2 {
	return &e
}
func (e *GetWebhookEventMode2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = GetWebhookEventMode2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhookEventMode2: %v", v)
	}
}

// GetWebhookEventStatus - The profile status determines whether the profile is able to receive live payments.
//
// * `unverified`: The profile has not been verified yet and can only be used to create test payments.
// * `verified`: The profile has been verified and can be used to create live payments and test payments.
// * `blocked`: The profile is blocked and can no longer be used or changed.
type GetWebhookEventStatus string

const (
	GetWebhookEventStatusUnverified GetWebhookEventStatus = "unverified"
	GetWebhookEventStatusVerified   GetWebhookEventStatus = "verified"
	GetWebhookEventStatusBlocked    GetWebhookEventStatus = "blocked"
)

func (e GetWebhookEventStatus) ToPointer() *GetWebhookEventStatus {
	return &e
}
func (e *GetWebhookEventStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unverified":
		fallthrough
	case "verified":
		fallthrough
	case "blocked":
		*e = GetWebhookEventStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhookEventStatus: %v", v)
	}
}

// GetWebhookEventReviewStatus - The status of the requested changes.
type GetWebhookEventReviewStatus string

const (
	GetWebhookEventReviewStatusPending  GetWebhookEventReviewStatus = "pending"
	GetWebhookEventReviewStatusRejected GetWebhookEventReviewStatus = "rejected"
)

func (e GetWebhookEventReviewStatus) ToPointer() *GetWebhookEventReviewStatus {
	return &e
}
func (e *GetWebhookEventReviewStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "rejected":
		*e = GetWebhookEventReviewStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhookEventReviewStatus: %v", v)
	}
}

// GetWebhookEventReview - Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved
// automatically, unless a switch to a live profile has been requested. The review object will therefore usually be
// `null` in test mode.
type GetWebhookEventReview struct {
	// The status of the requested changes.
	Status *GetWebhookEventReviewStatus `json:"status,omitempty"`
}

func (g GetWebhookEventReview) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventReview) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventReview) GetStatus() *GetWebhookEventReviewStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

// EntitySelf2 - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type EntitySelf2 struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (e EntitySelf2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntitySelf2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"href", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *EntitySelf2) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *EntitySelf2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetWebhookEventDashboard - Link to the profile in the Mollie dashboard.
type GetWebhookEventDashboard struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (g GetWebhookEventDashboard) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventDashboard) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"href", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventDashboard) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetWebhookEventDashboard) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetWebhookEventChargebacks - The API resource URL of the chargebacks that belong to this profile.
type GetWebhookEventChargebacks struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (g GetWebhookEventChargebacks) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventChargebacks) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"href", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventChargebacks) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetWebhookEventChargebacks) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetWebhookEventMethods - The API resource URL of the methods that are enabled for this profile.
type GetWebhookEventMethods struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (g GetWebhookEventMethods) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventMethods) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"href", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventMethods) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetWebhookEventMethods) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetWebhookEventPayments - The API resource URL of the payments that belong to this profile.
type GetWebhookEventPayments struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (g GetWebhookEventPayments) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventPayments) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"href", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventPayments) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetWebhookEventPayments) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetWebhookEventRefunds - The API resource URL of the refunds that belong to this profile.
type GetWebhookEventRefunds struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (g GetWebhookEventRefunds) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventRefunds) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"href", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventRefunds) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetWebhookEventRefunds) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetWebhookEventCheckoutPreviewURL - The hosted checkout preview URL. You need to be logged in to access this page.
type GetWebhookEventCheckoutPreviewURL struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (g GetWebhookEventCheckoutPreviewURL) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventCheckoutPreviewURL) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"href", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventCheckoutPreviewURL) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetWebhookEventCheckoutPreviewURL) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// EntityDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type EntityDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (e EntityDocumentation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityDocumentation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"href", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *EntityDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *EntityDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// EntityLinks2 - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type EntityLinks2 struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *EntitySelf2 `json:"self,omitempty"`
	// Link to the profile in the Mollie dashboard.
	Dashboard *GetWebhookEventDashboard `json:"dashboard,omitempty"`
	// The API resource URL of the chargebacks that belong to this profile.
	Chargebacks *GetWebhookEventChargebacks `json:"chargebacks,omitempty"`
	// The API resource URL of the methods that are enabled for this profile.
	Methods *GetWebhookEventMethods `json:"methods,omitempty"`
	// The API resource URL of the payments that belong to this profile.
	Payments *GetWebhookEventPayments `json:"payments,omitempty"`
	// The API resource URL of the refunds that belong to this profile.
	Refunds *GetWebhookEventRefunds `json:"refunds,omitempty"`
	// The hosted checkout preview URL. You need to be logged in to access this page.
	CheckoutPreviewURL *GetWebhookEventCheckoutPreviewURL `json:"checkoutPreviewUrl,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *EntityDocumentation `json:"documentation,omitempty"`
}

func (e EntityLinks2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityLinks2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *EntityLinks2) GetSelf() *EntitySelf2 {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *EntityLinks2) GetDashboard() *GetWebhookEventDashboard {
	if o == nil {
		return nil
	}
	return o.Dashboard
}

func (o *EntityLinks2) GetChargebacks() *GetWebhookEventChargebacks {
	if o == nil {
		return nil
	}
	return o.Chargebacks
}

func (o *EntityLinks2) GetMethods() *GetWebhookEventMethods {
	if o == nil {
		return nil
	}
	return o.Methods
}

func (o *EntityLinks2) GetPayments() *GetWebhookEventPayments {
	if o == nil {
		return nil
	}
	return o.Payments
}

func (o *EntityLinks2) GetRefunds() *GetWebhookEventRefunds {
	if o == nil {
		return nil
	}
	return o.Refunds
}

func (o *EntityLinks2) GetCheckoutPreviewURL() *GetWebhookEventCheckoutPreviewURL {
	if o == nil {
		return nil
	}
	return o.CheckoutPreviewURL
}

func (o *EntityLinks2) GetDocumentation() *EntityDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

type GetWebhookEventProfile struct {
	// Indicates the response contains a profile object. Will always contain the string `profile` for this endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this profile. Example: `pfl_v9hTwCvYqw`.
	ID *string `json:"id,omitempty"`
	// Whether this entity was created in live mode or in test mode.
	Mode *GetWebhookEventMode2 `json:"mode,omitempty"`
	// The profile's name, this will usually reflect the trade name or brand name of the profile's website or
	// application.
	Name *string `json:"name,omitempty"`
	// The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are
	// allowed.
	Website *string `json:"website,omitempty"`
	// The email address associated with the profile's trade name or brand.
	Email *string `json:"email,omitempty"`
	// The phone number associated with the profile's trade name or brand.
	Phone *string `json:"phone,omitempty"`
	// The products or services offered by the profile's website or application.
	Description *string `json:"description,omitempty"`
	// A list of countries where you expect that the majority of the profile's customers reside,
	// in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	CountriesOfActivity []string `json:"countriesOfActivity,omitempty"`
	// The industry associated with the profile's trade name or brand. Please refer to the
	// [business category list](common-data-types#business-category) for all possible options.
	BusinessCategory *string `json:"businessCategory,omitempty"`
	// The profile status determines whether the profile is able to receive live payments.
	//
	// * `unverified`: The profile has not been verified yet and can only be used to create test payments.
	// * `verified`: The profile has been verified and can be used to create live payments and test payments.
	// * `blocked`: The profile is blocked and can no longer be used or changed.
	Status *GetWebhookEventStatus `json:"status,omitempty"`
	// Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved
	// automatically, unless a switch to a live profile has been requested. The review object will therefore usually be
	// `null` in test mode.
	Review *GetWebhookEventReview `json:"review,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *EntityLinks2 `json:"_links,omitempty"`
}

func (g GetWebhookEventProfile) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventProfile) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventProfile) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *GetWebhookEventProfile) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetWebhookEventProfile) GetMode() *GetWebhookEventMode2 {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *GetWebhookEventProfile) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetWebhookEventProfile) GetWebsite() *string {
	if o == nil {
		return nil
	}
	return o.Website
}

func (o *GetWebhookEventProfile) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetWebhookEventProfile) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *GetWebhookEventProfile) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetWebhookEventProfile) GetCountriesOfActivity() []string {
	if o == nil {
		return nil
	}
	return o.CountriesOfActivity
}

func (o *GetWebhookEventProfile) GetBusinessCategory() *string {
	if o == nil {
		return nil
	}
	return o.BusinessCategory
}

func (o *GetWebhookEventProfile) GetStatus() *GetWebhookEventStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetWebhookEventProfile) GetReview() *GetWebhookEventReview {
	if o == nil {
		return nil
	}
	return o.Review
}

func (o *GetWebhookEventProfile) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetWebhookEventProfile) GetLinks() *EntityLinks2 {
	if o == nil {
		return nil
	}
	return o.Links
}

// GetWebhookEventMode1 - Whether this entity was created in live mode or in test mode.
type GetWebhookEventMode1 string

const (
	GetWebhookEventMode1Live GetWebhookEventMode1 = "live"
	GetWebhookEventMode1Test GetWebhookEventMode1 = "test"
)

func (e GetWebhookEventMode1) ToPointer() *GetWebhookEventMode1 {
	return &e
}
func (e *GetWebhookEventMode1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = GetWebhookEventMode1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhookEventMode1: %v", v)
	}
}

// GetWebhookEventAmount - The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
// amount.
type GetWebhookEventAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (g GetWebhookEventAmount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventAmount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"currency", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetWebhookEventAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetWebhookEventMinimumAmount - The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
// customer will be prompted to enter a value greater than or equal to the minimum amount.
type GetWebhookEventMinimumAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (g GetWebhookEventMinimumAmount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventMinimumAmount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"currency", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventMinimumAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetWebhookEventMinimumAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetWebhookEventType - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type GetWebhookEventType string

const (
	GetWebhookEventTypePhysical    GetWebhookEventType = "physical"
	GetWebhookEventTypeDigital     GetWebhookEventType = "digital"
	GetWebhookEventTypeShippingFee GetWebhookEventType = "shipping_fee"
	GetWebhookEventTypeDiscount    GetWebhookEventType = "discount"
	GetWebhookEventTypeStoreCredit GetWebhookEventType = "store_credit"
	GetWebhookEventTypeGiftCard    GetWebhookEventType = "gift_card"
	GetWebhookEventTypeSurcharge   GetWebhookEventType = "surcharge"
	GetWebhookEventTypeTip         GetWebhookEventType = "tip"
)

func (e GetWebhookEventType) ToPointer() *GetWebhookEventType {
	return &e
}
func (e *GetWebhookEventType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "physical":
		fallthrough
	case "digital":
		fallthrough
	case "shipping_fee":
		fallthrough
	case "discount":
		fallthrough
	case "store_credit":
		fallthrough
	case "gift_card":
		fallthrough
	case "surcharge":
		fallthrough
	case "tip":
		*e = GetWebhookEventType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhookEventType: %v", v)
	}
}

// GetWebhookEventUnitPrice - The price of a single item including VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
//
// The unit price can be zero in case of free items.
type GetWebhookEventUnitPrice struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (g GetWebhookEventUnitPrice) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventUnitPrice) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"currency", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventUnitPrice) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetWebhookEventUnitPrice) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetWebhookEventDiscountAmount - Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
// type.
type GetWebhookEventDiscountAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (g GetWebhookEventDiscountAmount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventDiscountAmount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"currency", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventDiscountAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetWebhookEventDiscountAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetWebhookEventTotalAmount - The total amount of the line, including VAT and discounts.
//
// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
//
// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
type GetWebhookEventTotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (g GetWebhookEventTotalAmount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventTotalAmount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"currency", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventTotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetWebhookEventTotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetWebhookEventVatAmount - The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
//
// Any deviations from this will result in an error.
//
// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
// `SEK 100.00 × (25 / 125) = SEK 20.00`.
type GetWebhookEventVatAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (g GetWebhookEventVatAmount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventVatAmount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"currency", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventVatAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetWebhookEventVatAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetWebhookEventCategory string

const (
	GetWebhookEventCategoryMeal         GetWebhookEventCategory = "meal"
	GetWebhookEventCategoryEco          GetWebhookEventCategory = "eco"
	GetWebhookEventCategoryGift         GetWebhookEventCategory = "gift"
	GetWebhookEventCategorySportCulture GetWebhookEventCategory = "sport_culture"
)

func (e GetWebhookEventCategory) ToPointer() *GetWebhookEventCategory {
	return &e
}
func (e *GetWebhookEventCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "meal":
		fallthrough
	case "eco":
		fallthrough
	case "gift":
		fallthrough
	case "sport_culture":
		*e = GetWebhookEventCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhookEventCategory: %v", v)
	}
}

type GetWebhookEventLine struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *GetWebhookEventType `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// The price of a single item including VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
	//
	// The unit price can be zero in case of free items.
	UnitPrice GetWebhookEventUnitPrice `json:"unitPrice"`
	// Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
	// type.
	DiscountAmount *GetWebhookEventDiscountAmount `json:"discountAmount,omitempty"`
	// The total amount of the line, including VAT and discounts.
	//
	// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
	//
	// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
	TotalAmount GetWebhookEventTotalAmount `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
	// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
	//
	// Any deviations from this will result in an error.
	//
	// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
	// `SEK 100.00 × (25 / 125) = SEK 20.00`.
	VatAmount *GetWebhookEventVatAmount `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []GetWebhookEventCategory `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string `json:"productUrl,omitempty"`
}

func (g GetWebhookEventLine) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventLine) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"description", "quantity", "unitPrice", "totalAmount"}); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventLine) GetType() *GetWebhookEventType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetWebhookEventLine) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *GetWebhookEventLine) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *GetWebhookEventLine) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *GetWebhookEventLine) GetUnitPrice() GetWebhookEventUnitPrice {
	if o == nil {
		return GetWebhookEventUnitPrice{}
	}
	return o.UnitPrice
}

func (o *GetWebhookEventLine) GetDiscountAmount() *GetWebhookEventDiscountAmount {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *GetWebhookEventLine) GetTotalAmount() GetWebhookEventTotalAmount {
	if o == nil {
		return GetWebhookEventTotalAmount{}
	}
	return o.TotalAmount
}

func (o *GetWebhookEventLine) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *GetWebhookEventLine) GetVatAmount() *GetWebhookEventVatAmount {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *GetWebhookEventLine) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *GetWebhookEventLine) GetCategories() []GetWebhookEventCategory {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *GetWebhookEventLine) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *GetWebhookEventLine) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}

// GetWebhookEventBillingAddress - The customer's billing address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
//
// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
type GetWebhookEventBillingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (g GetWebhookEventBillingAddress) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventBillingAddress) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventBillingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *GetWebhookEventBillingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *GetWebhookEventBillingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *GetWebhookEventBillingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *GetWebhookEventBillingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *GetWebhookEventBillingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *GetWebhookEventBillingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *GetWebhookEventBillingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetWebhookEventBillingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *GetWebhookEventBillingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *GetWebhookEventBillingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *GetWebhookEventBillingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// GetWebhookEventShippingAddress - The customer's shipping address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
type GetWebhookEventShippingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (g GetWebhookEventShippingAddress) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventShippingAddress) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventShippingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *GetWebhookEventShippingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *GetWebhookEventShippingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *GetWebhookEventShippingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *GetWebhookEventShippingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *GetWebhookEventShippingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *GetWebhookEventShippingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *GetWebhookEventShippingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *GetWebhookEventShippingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *GetWebhookEventShippingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *GetWebhookEventShippingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *GetWebhookEventShippingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// GetWebhookEventApplicationFeeAmount - The fee that you wish to charge.
//
// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
// a €0.99 fee on a €1.00 payment.
type GetWebhookEventApplicationFeeAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (g GetWebhookEventApplicationFeeAmount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventApplicationFeeAmount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"currency", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventApplicationFeeAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetWebhookEventApplicationFeeAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetWebhookEventApplicationFee - With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
type GetWebhookEventApplicationFee struct {
	// The fee that you wish to charge.
	//
	// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
	// a €0.99 fee on a €1.00 payment.
	Amount GetWebhookEventApplicationFeeAmount `json:"amount"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description string `json:"description"`
}

func (g GetWebhookEventApplicationFee) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventApplicationFee) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"amount", "description"}); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventApplicationFee) GetAmount() GetWebhookEventApplicationFeeAmount {
	if o == nil {
		return GetWebhookEventApplicationFeeAmount{}
	}
	return o.Amount
}

func (o *GetWebhookEventApplicationFee) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

// GetWebhookEventSequenceType - If set to `first`, a payment mandate is established right after a payment is made by the customer.
//
// Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
//
// The mandate ID can be retrieved by making a call to the
// [Payment Link Payments Endpoint](get-payment-link-payments).
type GetWebhookEventSequenceType string

const (
	GetWebhookEventSequenceTypeOneoff GetWebhookEventSequenceType = "oneoff"
	GetWebhookEventSequenceTypeFirst  GetWebhookEventSequenceType = "first"
)

func (e GetWebhookEventSequenceType) ToPointer() *GetWebhookEventSequenceType {
	return &e
}
func (e *GetWebhookEventSequenceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oneoff":
		fallthrough
	case "first":
		*e = GetWebhookEventSequenceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhookEventSequenceType: %v", v)
	}
}

// EntitySelf1 - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type EntitySelf1 struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (e EntitySelf1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntitySelf1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"href", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *EntitySelf1) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *EntitySelf1) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetWebhookEventLinksPaymentLink - The URL your customer should visit to make the payment. This is where you should redirect the customer to.
type GetWebhookEventLinksPaymentLink struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (g GetWebhookEventLinksPaymentLink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventLinksPaymentLink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"href", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventLinksPaymentLink) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetWebhookEventLinksPaymentLink) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// EntityLinks1 - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type EntityLinks1 struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self EntitySelf1 `json:"self"`
	// The URL your customer should visit to make the payment. This is where you should redirect the customer to.
	PaymentLink GetWebhookEventLinksPaymentLink `json:"paymentLink"`
}

func (e EntityLinks1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityLinks1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"self", "paymentLink"}); err != nil {
		return err
	}
	return nil
}

func (o *EntityLinks1) GetSelf() EntitySelf1 {
	if o == nil {
		return EntitySelf1{}
	}
	return o.Self
}

func (o *EntityLinks1) GetPaymentLink() GetWebhookEventLinksPaymentLink {
	if o == nil {
		return GetWebhookEventLinksPaymentLink{}
	}
	return o.PaymentLink
}

type GetWebhookEventPaymentLinkOutput struct {
	// Indicates the response contains a payment link object. Will always contain the string `payment-link` for this
	// endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this payment link. Example: `pl_4Y0eZitmBnQ6IDoMqZQKh`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode GetWebhookEventMode1 `json:"mode"`
	// A short description of the payment link. The description is visible in the Dashboard and will be shown on the
	// customer's bank or card statement when possible.
	Description string `json:"description"`
	// The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
	// amount.
	Amount *GetWebhookEventAmount `json:"amount"`
	// The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
	// customer will be prompted to enter a value greater than or equal to the minimum amount.
	MinimumAmount *GetWebhookEventMinimumAmount `json:"minimumAmount,omitempty"`
	// Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
	Archived bool `json:"archived"`
	// The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
	// the customer will be shown a generic message after completing the payment.
	RedirectURL *string `json:"redirectUrl"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
	// resulting from the payment link.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines []GetWebhookEventLine `json:"lines,omitempty"`
	// The customer's billing address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	//
	// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
	BillingAddress *GetWebhookEventBillingAddress `json:"billingAddress,omitempty"`
	// The customer's shipping address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	ShippingAddress *GetWebhookEventShippingAddress `json:"shippingAddress,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
	// request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
	// required.
	ProfileID *string `json:"profileId"`
	// Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
	// payments using the same link.
	//
	// If no value is specified, the field defaults to `false`, allowing only a single payment per link.
	Reusable *bool `json:"reusable"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The date and time the payment link became paid, in ISO 8601 format.
	PaidAt *string `json:"paidAt"`
	// The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
	// the payment link will not expire automatically.
	ExpiresAt *string `json:"expiresAt"`
	// An array of payment methods that are allowed to be used for this payment link. When this parameter is
	// not provided or is an empty array, all enabled payment methods will be available.
	//
	// Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
	// 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
	// 'in3', 'riverty', 'klarna', 'billie'.
	AllowedMethods []string `json:"allowedMethods"`
	// With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	ApplicationFee *GetWebhookEventApplicationFee `json:"applicationFee,omitempty"`
	// If set to `first`, a payment mandate is established right after a payment is made by the customer.
	//
	// Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
	//
	// The mandate ID can be retrieved by making a call to the
	// [Payment Link Payments Endpoint](get-payment-link-payments).
	SequenceType *GetWebhookEventSequenceType `json:"sequenceType,omitempty"`
	// **Only relevant when `sequenceType` is set to `first`**
	//
	// The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
	// the customer will be required to input relevant information which will be used to establish a mandate after
	// the payment is made.
	CustomerID *string `json:"customerId,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links EntityLinks1 `json:"_links"`
}

func (g GetWebhookEventPaymentLinkOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebhookEventPaymentLinkOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"resource", "id", "mode", "description", "amount", "archived", "redirectUrl", "webhookUrl", "profileId", "reusable", "createdAt", "paidAt", "expiresAt", "allowedMethods", "_links"}); err != nil {
		return err
	}
	return nil
}

func (o *GetWebhookEventPaymentLinkOutput) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *GetWebhookEventPaymentLinkOutput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetWebhookEventPaymentLinkOutput) GetMode() GetWebhookEventMode1 {
	if o == nil {
		return GetWebhookEventMode1("")
	}
	return o.Mode
}

func (o *GetWebhookEventPaymentLinkOutput) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *GetWebhookEventPaymentLinkOutput) GetAmount() *GetWebhookEventAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *GetWebhookEventPaymentLinkOutput) GetMinimumAmount() *GetWebhookEventMinimumAmount {
	if o == nil {
		return nil
	}
	return o.MinimumAmount
}

func (o *GetWebhookEventPaymentLinkOutput) GetArchived() bool {
	if o == nil {
		return false
	}
	return o.Archived
}

func (o *GetWebhookEventPaymentLinkOutput) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *GetWebhookEventPaymentLinkOutput) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *GetWebhookEventPaymentLinkOutput) GetLines() []GetWebhookEventLine {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *GetWebhookEventPaymentLinkOutput) GetBillingAddress() *GetWebhookEventBillingAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *GetWebhookEventPaymentLinkOutput) GetShippingAddress() *GetWebhookEventShippingAddress {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *GetWebhookEventPaymentLinkOutput) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *GetWebhookEventPaymentLinkOutput) GetReusable() *bool {
	if o == nil {
		return nil
	}
	return o.Reusable
}

func (o *GetWebhookEventPaymentLinkOutput) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GetWebhookEventPaymentLinkOutput) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *GetWebhookEventPaymentLinkOutput) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *GetWebhookEventPaymentLinkOutput) GetAllowedMethods() []string {
	if o == nil {
		return nil
	}
	return o.AllowedMethods
}

func (o *GetWebhookEventPaymentLinkOutput) GetApplicationFee() *GetWebhookEventApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *GetWebhookEventPaymentLinkOutput) GetSequenceType() *GetWebhookEventSequenceType {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *GetWebhookEventPaymentLinkOutput) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *GetWebhookEventPaymentLinkOutput) GetLinks() EntityLinks1 {
	if o == nil {
		return EntityLinks1{}
	}
	return o.Links
}

type EntityType string

const (
	EntityTypeGetWebhookEventPaymentLinkOutput EntityType = "get_webhook_event_payment-link_output"
	EntityTypeGetWebhookEventProfile           EntityType = "get_webhook_event_profile"
)

type Entity struct {
	GetWebhookEventPaymentLinkOutput *GetWebhookEventPaymentLinkOutput `queryParam:"inline" name:"entity"`
	GetWebhookEventProfile           *GetWebhookEventProfile           `queryParam:"inline" name:"entity"`

	Type EntityType
}

func CreateEntityGetWebhookEventPaymentLinkOutput(getWebhookEventPaymentLinkOutput GetWebhookEventPaymentLinkOutput) Entity {
	typ := EntityTypeGetWebhookEventPaymentLinkOutput

	return Entity{
		GetWebhookEventPaymentLinkOutput: &getWebhookEventPaymentLinkOutput,
		Type:                             typ,
	}
}

func CreateEntityGetWebhookEventProfile(getWebhookEventProfile GetWebhookEventProfile) Entity {
	typ := EntityTypeGetWebhookEventProfile

	return Entity{
		GetWebhookEventProfile: &getWebhookEventProfile,
		Type:                   typ,
	}
}

func (u *Entity) UnmarshalJSON(data []byte) error {

	var getWebhookEventPaymentLinkOutput GetWebhookEventPaymentLinkOutput = GetWebhookEventPaymentLinkOutput{}
	if err := utils.UnmarshalJSON(data, &getWebhookEventPaymentLinkOutput, "", true, nil); err == nil {
		u.GetWebhookEventPaymentLinkOutput = &getWebhookEventPaymentLinkOutput
		u.Type = EntityTypeGetWebhookEventPaymentLinkOutput
		return nil
	}

	var getWebhookEventProfile GetWebhookEventProfile = GetWebhookEventProfile{}
	if err := utils.UnmarshalJSON(data, &getWebhookEventProfile, "", true, nil); err == nil {
		u.GetWebhookEventProfile = &getWebhookEventProfile
		u.Type = EntityTypeGetWebhookEventProfile
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Entity", string(data))
}

func (u Entity) MarshalJSON() ([]byte, error) {
	if u.GetWebhookEventPaymentLinkOutput != nil {
		return utils.MarshalJSON(u.GetWebhookEventPaymentLinkOutput, "", true)
	}

	if u.GetWebhookEventProfile != nil {
		return utils.MarshalJSON(u.GetWebhookEventProfile, "", true)
	}

	return nil, errors.New("could not marshal union type Entity: all fields are null")
}

// GetWebhookEventEmbedded - Full payload of the event.
type GetWebhookEventEmbedded struct {
	Entity *Entity `json:"entity,omitempty"`
}

func (o *GetWebhookEventEmbedded) GetEntity() *Entity {
	if o == nil {
		return nil
	}
	return o.Entity
}

// GetWebhookEventSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetWebhookEventSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetWebhookEventSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetWebhookEventSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetWebhookEventDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetWebhookEventDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetWebhookEventDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetWebhookEventDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// LinksEntity - The API resource URL of the entity that this event belongs to.
type LinksEntity struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *LinksEntity) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *LinksEntity) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetWebhookEventLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetWebhookEventLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self GetWebhookEventSelf `json:"self"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation GetWebhookEventDocumentation `json:"documentation"`
	// The API resource URL of the entity that this event belongs to.
	Entity *LinksEntity `json:"entity,omitempty"`
}

func (o *GetWebhookEventLinks) GetSelf() GetWebhookEventSelf {
	if o == nil {
		return GetWebhookEventSelf{}
	}
	return o.Self
}

func (o *GetWebhookEventLinks) GetDocumentation() GetWebhookEventDocumentation {
	if o == nil {
		return GetWebhookEventDocumentation{}
	}
	return o.Documentation
}

func (o *GetWebhookEventLinks) GetEntity() *LinksEntity {
	if o == nil {
		return nil
	}
	return o.Entity
}

// GetWebhookEventResponseBody - The webhook event object.
type GetWebhookEventResponseBody struct {
	// Indicates the response contains a webhook event object. Will always contain the string `event` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this event.
	ID string `json:"id"`
	// The event's type
	WebhookEventTypes GetWebhookEventWebhookEventTypes `json:"type"`
	// The entity token that triggered the event
	EntityID string `json:"entityId"`
	// The event's date time of creation.
	CreatedAt string `json:"createdAt"`
	// Full payload of the event.
	Embedded *GetWebhookEventEmbedded `json:"_embedded,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links GetWebhookEventLinks `json:"_links"`
}

func (o *GetWebhookEventResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *GetWebhookEventResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetWebhookEventResponseBody) GetWebhookEventTypes() GetWebhookEventWebhookEventTypes {
	if o == nil {
		return GetWebhookEventWebhookEventTypes("")
	}
	return o.WebhookEventTypes
}

func (o *GetWebhookEventResponseBody) GetEntityID() string {
	if o == nil {
		return ""
	}
	return o.EntityID
}

func (o *GetWebhookEventResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GetWebhookEventResponseBody) GetEmbedded() *GetWebhookEventEmbedded {
	if o == nil {
		return nil
	}
	return o.Embedded
}

func (o *GetWebhookEventResponseBody) GetLinks() GetWebhookEventLinks {
	if o == nil {
		return GetWebhookEventLinks{}
	}
	return o.Links
}

type GetWebhookEventResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The webhook event object.
	Object *GetWebhookEventResponseBody
}

func (o *GetWebhookEventResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetWebhookEventResponse) GetObject() *GetWebhookEventResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
