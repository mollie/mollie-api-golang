// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

type GetBalanceRequest struct {
	// Provide the ID of the item you want to perform this operation on.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *GetBalanceRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetBalanceRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// GetBalanceNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type GetBalanceNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *GetBalanceNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetBalanceNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetBalanceNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation GetBalanceNotFoundDocumentation `json:"documentation"`
}

func (o *GetBalanceNotFoundLinks) GetDocumentation() GetBalanceNotFoundDocumentation {
	if o == nil {
		return GetBalanceNotFoundDocumentation{}
	}
	return o.Documentation
}

// GetBalanceMode - Whether this entity was created in live mode or in test mode.
type GetBalanceMode string

const (
	GetBalanceModeLive GetBalanceMode = "live"
	GetBalanceModeTest GetBalanceMode = "test"
)

func (e GetBalanceMode) ToPointer() *GetBalanceMode {
	return &e
}
func (e *GetBalanceMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = GetBalanceMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBalanceMode: %v", v)
	}
}

// GetBalanceCurrency - The balance's ISO 4217 currency code.
type GetBalanceCurrency string

const (
	GetBalanceCurrencyEur GetBalanceCurrency = "EUR"
	GetBalanceCurrencyGbp GetBalanceCurrency = "GBP"
	GetBalanceCurrencyChf GetBalanceCurrency = "CHF"
	GetBalanceCurrencyDkk GetBalanceCurrency = "DKK"
	GetBalanceCurrencyNok GetBalanceCurrency = "NOK"
	GetBalanceCurrencyPln GetBalanceCurrency = "PLN"
	GetBalanceCurrencySek GetBalanceCurrency = "SEK"
	GetBalanceCurrencyUsd GetBalanceCurrency = "USD"
	GetBalanceCurrencyCzk GetBalanceCurrency = "CZK"
	GetBalanceCurrencyHuf GetBalanceCurrency = "HUF"
	GetBalanceCurrencyAud GetBalanceCurrency = "AUD"
	GetBalanceCurrencyCad GetBalanceCurrency = "CAD"
)

func (e GetBalanceCurrency) ToPointer() *GetBalanceCurrency {
	return &e
}
func (e *GetBalanceCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "CHF":
		fallthrough
	case "DKK":
		fallthrough
	case "NOK":
		fallthrough
	case "PLN":
		fallthrough
	case "SEK":
		fallthrough
	case "USD":
		fallthrough
	case "CZK":
		fallthrough
	case "HUF":
		fallthrough
	case "AUD":
		fallthrough
	case "CAD":
		*e = GetBalanceCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBalanceCurrency: %v", v)
	}
}

// GetBalanceStatus - The status of the balance.
type GetBalanceStatus string

const (
	GetBalanceStatusActive   GetBalanceStatus = "active"
	GetBalanceStatusInactive GetBalanceStatus = "inactive"
)

func (e GetBalanceStatus) ToPointer() *GetBalanceStatus {
	return &e
}
func (e *GetBalanceStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		*e = GetBalanceStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBalanceStatus: %v", v)
	}
}

// GetBalanceTransferFrequency - The frequency with which the available amount on the balance will be settled to the configured transfer
// destination.
//
// Settlements created during weekends or on bank holidays will take place on the next business day.
type GetBalanceTransferFrequency string

const (
	GetBalanceTransferFrequencyDaily          GetBalanceTransferFrequency = "daily"
	GetBalanceTransferFrequencyEveryMonday    GetBalanceTransferFrequency = "every-monday"
	GetBalanceTransferFrequencyEveryTuesday   GetBalanceTransferFrequency = "every-tuesday"
	GetBalanceTransferFrequencyEveryWednesday GetBalanceTransferFrequency = "every-wednesday"
	GetBalanceTransferFrequencyEveryThursday  GetBalanceTransferFrequency = "every-thursday"
	GetBalanceTransferFrequencyEveryFriday    GetBalanceTransferFrequency = "every-friday"
	GetBalanceTransferFrequencyMonthly        GetBalanceTransferFrequency = "monthly"
	GetBalanceTransferFrequencyNever          GetBalanceTransferFrequency = "never"
)

func (e GetBalanceTransferFrequency) ToPointer() *GetBalanceTransferFrequency {
	return &e
}
func (e *GetBalanceTransferFrequency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "daily":
		fallthrough
	case "every-monday":
		fallthrough
	case "every-tuesday":
		fallthrough
	case "every-wednesday":
		fallthrough
	case "every-thursday":
		fallthrough
	case "every-friday":
		fallthrough
	case "monthly":
		fallthrough
	case "never":
		*e = GetBalanceTransferFrequency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBalanceTransferFrequency: %v", v)
	}
}

// GetBalanceTransferThreshold - The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds
// this threshold, the complete balance will be paid out to the transfer destination according to the configured
// frequency.
type GetBalanceTransferThreshold struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetBalanceTransferThreshold) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetBalanceTransferThreshold) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetBalanceType - The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
//
// * `bank-account` — Transfer the balance amount to an external bank account
type GetBalanceType string

const (
	GetBalanceTypeBankAccount GetBalanceType = "bank-account"
)

func (e GetBalanceType) ToPointer() *GetBalanceType {
	return &e
}
func (e *GetBalanceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bank-account":
		*e = GetBalanceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBalanceType: %v", v)
	}
}

// GetBalanceTransferDestination - The destination where the available amount will be automatically transferred to according to the configured
// transfer frequency.
type GetBalanceTransferDestination struct {
	// The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
	//
	// * `bank-account` — Transfer the balance amount to an external bank account
	Type *GetBalanceType `json:"type,omitempty"`
	// The configured bank account number of the beneficiary the balance amount is to be transferred to.
	BankAccount *string `json:"bankAccount,omitempty"`
	// The full name of the beneficiary the balance amount is to be transferred to.
	BeneficiaryName *string `json:"beneficiaryName,omitempty"`
}

func (o *GetBalanceTransferDestination) GetType() *GetBalanceType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetBalanceTransferDestination) GetBankAccount() *string {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *GetBalanceTransferDestination) GetBeneficiaryName() *string {
	if o == nil {
		return nil
	}
	return o.BeneficiaryName
}

// GetBalanceAvailableAmount - The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
type GetBalanceAvailableAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetBalanceAvailableAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetBalanceAvailableAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetBalancePendingAmount - The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a
// few days to clear.
type GetBalancePendingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *GetBalancePendingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *GetBalancePendingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetBalanceSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetBalanceSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetBalanceSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetBalanceSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetBalanceDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetBalanceDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetBalanceDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetBalanceDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetBalanceLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetBalanceLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *GetBalanceSelf `json:"self,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *GetBalanceDocumentation `json:"documentation,omitempty"`
}

func (o *GetBalanceLinks) GetSelf() *GetBalanceSelf {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *GetBalanceLinks) GetDocumentation() *GetBalanceDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

// GetBalanceResponseBody - The balance object.
type GetBalanceResponseBody struct {
	// Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
	Resource *string `json:"resource,omitempty"`
	// The identifier uniquely referring to this balance.
	ID *string `json:"id,omitempty"`
	// Whether this entity was created in live mode or in test mode.
	Mode *GetBalanceMode `json:"mode,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The balance's ISO 4217 currency code.
	Currency *GetBalanceCurrency `json:"currency,omitempty"`
	// The description or name of the balance. Can be used to denote the purpose of the balance.
	Description *string `json:"description,omitempty"`
	// The status of the balance.
	Status *GetBalanceStatus `json:"status,omitempty"`
	// The frequency with which the available amount on the balance will be settled to the configured transfer
	// destination.
	//
	// Settlements created during weekends or on bank holidays will take place on the next business day.
	TransferFrequency *GetBalanceTransferFrequency `json:"transferFrequency,omitempty"`
	// The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds
	// this threshold, the complete balance will be paid out to the transfer destination according to the configured
	// frequency.
	TransferThreshold *GetBalanceTransferThreshold `json:"transferThreshold,omitempty"`
	// The transfer reference set to be included in all the transfers for this balance.
	TransferReference *string `json:"transferReference,omitempty"`
	// The destination where the available amount will be automatically transferred to according to the configured
	// transfer frequency.
	TransferDestination *GetBalanceTransferDestination `json:"transferDestination,omitempty"`
	// The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
	AvailableAmount *GetBalanceAvailableAmount `json:"availableAmount,omitempty"`
	// The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a
	// few days to clear.
	PendingAmount *GetBalancePendingAmount `json:"pendingAmount,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *GetBalanceLinks `json:"_links,omitempty"`
}

func (o *GetBalanceResponseBody) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *GetBalanceResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetBalanceResponseBody) GetMode() *GetBalanceMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *GetBalanceResponseBody) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetBalanceResponseBody) GetCurrency() *GetBalanceCurrency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *GetBalanceResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetBalanceResponseBody) GetStatus() *GetBalanceStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetBalanceResponseBody) GetTransferFrequency() *GetBalanceTransferFrequency {
	if o == nil {
		return nil
	}
	return o.TransferFrequency
}

func (o *GetBalanceResponseBody) GetTransferThreshold() *GetBalanceTransferThreshold {
	if o == nil {
		return nil
	}
	return o.TransferThreshold
}

func (o *GetBalanceResponseBody) GetTransferReference() *string {
	if o == nil {
		return nil
	}
	return o.TransferReference
}

func (o *GetBalanceResponseBody) GetTransferDestination() *GetBalanceTransferDestination {
	if o == nil {
		return nil
	}
	return o.TransferDestination
}

func (o *GetBalanceResponseBody) GetAvailableAmount() *GetBalanceAvailableAmount {
	if o == nil {
		return nil
	}
	return o.AvailableAmount
}

func (o *GetBalanceResponseBody) GetPendingAmount() *GetBalancePendingAmount {
	if o == nil {
		return nil
	}
	return o.PendingAmount
}

func (o *GetBalanceResponseBody) GetLinks() *GetBalanceLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type GetBalanceResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The balance object.
	Object *GetBalanceResponseBody
}

func (o *GetBalanceResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetBalanceResponse) GetObject() *GetBalanceResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
