// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/mollie/mollie-api-golang/models/components"
)

// PartnerType - Indicates the type of partner. Will be `null` if the currently authenticated organization is not
// enrolled as a partner.
type PartnerType string

const (
	PartnerTypeOauth      PartnerType = "oauth"
	PartnerTypeSignuplink PartnerType = "signuplink"
	PartnerTypeUseragent  PartnerType = "useragent"
)

func (e PartnerType) ToPointer() *PartnerType {
	return &e
}
func (e *PartnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth":
		fallthrough
	case "signuplink":
		fallthrough
	case "useragent":
		*e = PartnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PartnerType: %v", v)
	}
}

type UserAgentToken struct {
	// The unique User-Agent token.
	Token *string `json:"token,omitempty"`
	// The date from which the token is active, in ISO 8601 format.
	StartsAt *string `json:"startsAt,omitempty"`
	// The date until when the token will be active, in ISO 8601 format. Will be `null` if the token
	// does not have an end date (yet).
	EndsAt *string `json:"endsAt,omitempty"`
}

func (o *UserAgentToken) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *UserAgentToken) GetStartsAt() *string {
	if o == nil {
		return nil
	}
	return o.StartsAt
}

func (o *UserAgentToken) GetEndsAt() *string {
	if o == nil {
		return nil
	}
	return o.EndsAt
}

// GetPartnerStatusSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetPartnerStatusSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPartnerStatusSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPartnerStatusSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// Signuplink - The URL that can be used to have new organizations sign up and be automatically linked to this
// partner. Will be omitted if the partner is not of type `signuplink`.
type Signuplink struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *Signuplink) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *Signuplink) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPartnerStatusDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type GetPartnerStatusDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *GetPartnerStatusDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *GetPartnerStatusDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// GetPartnerStatusLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type GetPartnerStatusLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self *GetPartnerStatusSelf `json:"self,omitempty"`
	// The URL that can be used to have new organizations sign up and be automatically linked to this
	// partner. Will be omitted if the partner is not of type `signuplink`.
	Signuplink *Signuplink `json:"signuplink,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *GetPartnerStatusDocumentation `json:"documentation,omitempty"`
}

func (o *GetPartnerStatusLinks) GetSelf() *GetPartnerStatusSelf {
	if o == nil {
		return nil
	}
	return o.Self
}

func (o *GetPartnerStatusLinks) GetSignuplink() *Signuplink {
	if o == nil {
		return nil
	}
	return o.Signuplink
}

func (o *GetPartnerStatusLinks) GetDocumentation() *GetPartnerStatusDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

// GetPartnerStatusResponseBody - The partner status object.
type GetPartnerStatusResponseBody struct {
	// Indicates the response contains a partner status object. Will always contain the string `partner` for
	// this endpoint.
	Resource string `json:"resource"`
	// Indicates the type of partner. Will be `null` if the currently authenticated organization is not
	// enrolled as a partner.
	PartnerType *PartnerType `json:"partnerType"`
	// Whether the current organization is receiving commissions.
	IsCommissionPartner *bool `json:"isCommissionPartner,omitempty"`
	// Array of User-Agent token objects. Present if the organization is a partner of type `useragent`, or if
	// they were in the past.
	UserAgentTokens []UserAgentToken `json:"userAgentTokens,omitempty"`
	// The date the partner contract was signed, in ISO 8601 format. Omitted if no contract has been signed
	// (yet).
	PartnerContractSignedAt *string `json:"partnerContractSignedAt,omitempty"`
	// Whether an update to the partner contract is available and requiring the organization's agreement.
	PartnerContractUpdateAvailable *bool `json:"partnerContractUpdateAvailable,omitempty"`
	// The expiration date of the signed partner contract, in ISO 8601 format. Omitted if contract has no
	// expiration date (yet).
	PartnerContractExpiresAt *string `json:"partnerContractExpiresAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links *GetPartnerStatusLinks `json:"_links,omitempty"`
}

func (o *GetPartnerStatusResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *GetPartnerStatusResponseBody) GetPartnerType() *PartnerType {
	if o == nil {
		return nil
	}
	return o.PartnerType
}

func (o *GetPartnerStatusResponseBody) GetIsCommissionPartner() *bool {
	if o == nil {
		return nil
	}
	return o.IsCommissionPartner
}

func (o *GetPartnerStatusResponseBody) GetUserAgentTokens() []UserAgentToken {
	if o == nil {
		return nil
	}
	return o.UserAgentTokens
}

func (o *GetPartnerStatusResponseBody) GetPartnerContractSignedAt() *string {
	if o == nil {
		return nil
	}
	return o.PartnerContractSignedAt
}

func (o *GetPartnerStatusResponseBody) GetPartnerContractUpdateAvailable() *bool {
	if o == nil {
		return nil
	}
	return o.PartnerContractUpdateAvailable
}

func (o *GetPartnerStatusResponseBody) GetPartnerContractExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.PartnerContractExpiresAt
}

func (o *GetPartnerStatusResponseBody) GetLinks() *GetPartnerStatusLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

type GetPartnerStatusResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The partner status object.
	Object *GetPartnerStatusResponseBody
}

func (o *GetPartnerStatusResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetPartnerStatusResponse) GetObject() *GetPartnerStatusResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
