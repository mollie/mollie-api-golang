// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type ListPaymentLinksRequest struct {
	// Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
	// result set.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// The maximum number of items to return. Defaults to 50 items.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
	// parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
	// setting the `testmode` query parameter to `true`.
	//
	// Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
	Testmode *bool `queryParam:"style=form,explode=true,name=testmode"`
}

func (o *ListPaymentLinksRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListPaymentLinksRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListPaymentLinksRequest) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

// ListPaymentLinksBadRequestDocumentation - The URL to the generic Mollie API error handling guide.
type ListPaymentLinksBadRequestDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *ListPaymentLinksBadRequestDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentLinksBadRequestDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type ListPaymentLinksBadRequestLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation ListPaymentLinksBadRequestDocumentation `json:"documentation"`
}

func (o *ListPaymentLinksBadRequestLinks) GetDocumentation() ListPaymentLinksBadRequestDocumentation {
	if o == nil {
		return ListPaymentLinksBadRequestDocumentation{}
	}
	return o.Documentation
}

// ListPaymentLinksMode - Whether this entity was created in live mode or in test mode.
type ListPaymentLinksMode string

const (
	ListPaymentLinksModeLive ListPaymentLinksMode = "live"
	ListPaymentLinksModeTest ListPaymentLinksMode = "test"
)

func (e ListPaymentLinksMode) ToPointer() *ListPaymentLinksMode {
	return &e
}

// ListPaymentLinksAmount - The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
// amount.
type ListPaymentLinksAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentLinksAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentLinksAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentLinksMinimumAmount - The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
// customer will be prompted to enter a value greater than or equal to the minimum amount.
type ListPaymentLinksMinimumAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentLinksMinimumAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentLinksMinimumAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentLinksType - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type ListPaymentLinksType string

const (
	ListPaymentLinksTypePhysical    ListPaymentLinksType = "physical"
	ListPaymentLinksTypeDigital     ListPaymentLinksType = "digital"
	ListPaymentLinksTypeShippingFee ListPaymentLinksType = "shipping_fee"
	ListPaymentLinksTypeDiscount    ListPaymentLinksType = "discount"
	ListPaymentLinksTypeStoreCredit ListPaymentLinksType = "store_credit"
	ListPaymentLinksTypeGiftCard    ListPaymentLinksType = "gift_card"
	ListPaymentLinksTypeSurcharge   ListPaymentLinksType = "surcharge"
	ListPaymentLinksTypeTip         ListPaymentLinksType = "tip"
)

func (e ListPaymentLinksType) ToPointer() *ListPaymentLinksType {
	return &e
}

// ListPaymentLinksUnitPrice - The price of a single item including VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
//
// The unit price can be zero in case of free items.
type ListPaymentLinksUnitPrice struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentLinksUnitPrice) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentLinksUnitPrice) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentLinksDiscountAmount - Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
// type.
type ListPaymentLinksDiscountAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentLinksDiscountAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentLinksDiscountAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentLinksTotalAmount - The total amount of the line, including VAT and discounts.
//
// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
//
// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
type ListPaymentLinksTotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentLinksTotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentLinksTotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentLinksVatAmount - The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
//
// Any deviations from this will result in an error.
//
// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
// `SEK 100.00 × (25 / 125) = SEK 20.00`.
type ListPaymentLinksVatAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentLinksVatAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentLinksVatAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type ListPaymentLinksCategory string

const (
	ListPaymentLinksCategoryMeal         ListPaymentLinksCategory = "meal"
	ListPaymentLinksCategoryEco          ListPaymentLinksCategory = "eco"
	ListPaymentLinksCategoryGift         ListPaymentLinksCategory = "gift"
	ListPaymentLinksCategorySportCulture ListPaymentLinksCategory = "sport_culture"
)

func (e ListPaymentLinksCategory) ToPointer() *ListPaymentLinksCategory {
	return &e
}

type ListPaymentLinksLine struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *ListPaymentLinksType `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// The price of a single item including VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
	//
	// The unit price can be zero in case of free items.
	UnitPrice ListPaymentLinksUnitPrice `json:"unitPrice"`
	// Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
	// type.
	DiscountAmount *ListPaymentLinksDiscountAmount `json:"discountAmount,omitempty"`
	// The total amount of the line, including VAT and discounts.
	//
	// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
	//
	// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
	TotalAmount ListPaymentLinksTotalAmount `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
	// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
	//
	// Any deviations from this will result in an error.
	//
	// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
	// `SEK 100.00 × (25 / 125) = SEK 20.00`.
	VatAmount *ListPaymentLinksVatAmount `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []ListPaymentLinksCategory `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string `json:"productUrl,omitempty"`
}

func (o *ListPaymentLinksLine) GetType() *ListPaymentLinksType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListPaymentLinksLine) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *ListPaymentLinksLine) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *ListPaymentLinksLine) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *ListPaymentLinksLine) GetUnitPrice() ListPaymentLinksUnitPrice {
	if o == nil {
		return ListPaymentLinksUnitPrice{}
	}
	return o.UnitPrice
}

func (o *ListPaymentLinksLine) GetDiscountAmount() *ListPaymentLinksDiscountAmount {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *ListPaymentLinksLine) GetTotalAmount() ListPaymentLinksTotalAmount {
	if o == nil {
		return ListPaymentLinksTotalAmount{}
	}
	return o.TotalAmount
}

func (o *ListPaymentLinksLine) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *ListPaymentLinksLine) GetVatAmount() *ListPaymentLinksVatAmount {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *ListPaymentLinksLine) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *ListPaymentLinksLine) GetCategories() []ListPaymentLinksCategory {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *ListPaymentLinksLine) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *ListPaymentLinksLine) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}

// ListPaymentLinksBillingAddress - The customer's billing address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
//
// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
type ListPaymentLinksBillingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *ListPaymentLinksBillingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *ListPaymentLinksBillingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *ListPaymentLinksBillingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *ListPaymentLinksBillingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *ListPaymentLinksBillingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *ListPaymentLinksBillingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *ListPaymentLinksBillingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *ListPaymentLinksBillingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ListPaymentLinksBillingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *ListPaymentLinksBillingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *ListPaymentLinksBillingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *ListPaymentLinksBillingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// ListPaymentLinksShippingAddress - The customer's shipping address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
type ListPaymentLinksShippingAddress struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *ListPaymentLinksShippingAddress) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *ListPaymentLinksShippingAddress) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *ListPaymentLinksShippingAddress) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *ListPaymentLinksShippingAddress) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *ListPaymentLinksShippingAddress) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *ListPaymentLinksShippingAddress) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *ListPaymentLinksShippingAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *ListPaymentLinksShippingAddress) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ListPaymentLinksShippingAddress) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *ListPaymentLinksShippingAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *ListPaymentLinksShippingAddress) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *ListPaymentLinksShippingAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// ListPaymentLinksApplicationFeeAmount - The fee that you wish to charge.
//
// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
// a €0.99 fee on a €1.00 payment.
type ListPaymentLinksApplicationFeeAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *ListPaymentLinksApplicationFeeAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *ListPaymentLinksApplicationFeeAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// ListPaymentLinksApplicationFee - With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
type ListPaymentLinksApplicationFee struct {
	// The fee that you wish to charge.
	//
	// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
	// a €0.99 fee on a €1.00 payment.
	Amount ListPaymentLinksApplicationFeeAmount `json:"amount"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description string `json:"description"`
}

func (o *ListPaymentLinksApplicationFee) GetAmount() ListPaymentLinksApplicationFeeAmount {
	if o == nil {
		return ListPaymentLinksApplicationFeeAmount{}
	}
	return o.Amount
}

func (o *ListPaymentLinksApplicationFee) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

// ListPaymentLinksSequenceType - If set to `first`, a payment mandate is established right after a payment is made by the customer.
//
// Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
//
// The mandate ID can be retrieved by making a call to the
// [Payment Link Payments Endpoint](get-payment-link-payments).
type ListPaymentLinksSequenceType string

const (
	ListPaymentLinksSequenceTypeOneoff ListPaymentLinksSequenceType = "oneoff"
	ListPaymentLinksSequenceTypeFirst  ListPaymentLinksSequenceType = "first"
)

func (e ListPaymentLinksSequenceType) ToPointer() *ListPaymentLinksSequenceType {
	return &e
}

// PaymentLinkSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type PaymentLinkSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *PaymentLinkSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *PaymentLinkSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentLinksLinksPaymentLink - The URL your customer should visit to make the payment. This is where you should redirect the customer to.
type ListPaymentLinksLinksPaymentLink struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentLinksLinksPaymentLink) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentLinksLinksPaymentLink) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// PaymentLinkLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type PaymentLinkLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self PaymentLinkSelf `json:"self"`
	// The URL your customer should visit to make the payment. This is where you should redirect the customer to.
	PaymentLink ListPaymentLinksLinksPaymentLink `json:"paymentLink"`
}

func (o *PaymentLinkLinks) GetSelf() PaymentLinkSelf {
	if o == nil {
		return PaymentLinkSelf{}
	}
	return o.Self
}

func (o *PaymentLinkLinks) GetPaymentLink() ListPaymentLinksLinksPaymentLink {
	if o == nil {
		return ListPaymentLinksLinksPaymentLink{}
	}
	return o.PaymentLink
}

type ListPaymentLinksPaymentLinkOutput struct {
	// Indicates the response contains a payment link object. Will always contain the string `payment-link` for this
	// endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this payment link. Example: `pl_4Y0eZitmBnQ6IDoMqZQKh`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode ListPaymentLinksMode `json:"mode"`
	// A short description of the payment link. The description is visible in the Dashboard and will be shown on the
	// customer's bank or card statement when possible.
	Description string `json:"description"`
	// The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
	// amount.
	Amount *ListPaymentLinksAmount `json:"amount"`
	// The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
	// customer will be prompted to enter a value greater than or equal to the minimum amount.
	MinimumAmount *ListPaymentLinksMinimumAmount `json:"minimumAmount,omitempty"`
	// Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
	Archived bool `json:"archived"`
	// The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
	// the customer will be shown a generic message after completing the payment.
	RedirectURL *string `json:"redirectUrl"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
	// resulting from the payment link.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines []ListPaymentLinksLine `json:"lines,omitempty"`
	// The customer's billing address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	//
	// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
	BillingAddress *ListPaymentLinksBillingAddress `json:"billingAddress,omitempty"`
	// The customer's shipping address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	ShippingAddress *ListPaymentLinksShippingAddress `json:"shippingAddress,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
	// request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
	// required.
	ProfileID *string `json:"profileId"`
	// Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
	// payments using the same link.
	//
	// If no value is specified, the field defaults to `false`, allowing only a single payment per link.
	Reusable *bool `json:"reusable"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The date and time the payment link became paid, in ISO 8601 format.
	PaidAt *string `json:"paidAt"`
	// The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
	// the payment link will not expire automatically.
	ExpiresAt *string `json:"expiresAt"`
	// An array of payment methods that are allowed to be used for this payment link. When this parameter is
	// not provided or is an empty array, all enabled payment methods will be available.
	//
	// Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
	// 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
	// 'in3', 'riverty', 'klarna', 'billie'.
	AllowedMethods []string `json:"allowedMethods"`
	// With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	ApplicationFee *ListPaymentLinksApplicationFee `json:"applicationFee,omitempty"`
	// If set to `first`, a payment mandate is established right after a payment is made by the customer.
	//
	// Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
	//
	// The mandate ID can be retrieved by making a call to the
	// [Payment Link Payments Endpoint](get-payment-link-payments).
	SequenceType *ListPaymentLinksSequenceType `json:"sequenceType,omitempty"`
	// **Only relevant when `sequenceType` is set to `first`**
	//
	// The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
	// the customer will be required to input relevant information which will be used to establish a mandate after
	// the payment is made.
	CustomerID *string `json:"customerId,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links PaymentLinkLinks `json:"_links"`
}

func (o *ListPaymentLinksPaymentLinkOutput) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *ListPaymentLinksPaymentLinkOutput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListPaymentLinksPaymentLinkOutput) GetMode() ListPaymentLinksMode {
	if o == nil {
		return ListPaymentLinksMode("")
	}
	return o.Mode
}

func (o *ListPaymentLinksPaymentLinkOutput) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *ListPaymentLinksPaymentLinkOutput) GetAmount() *ListPaymentLinksAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListPaymentLinksPaymentLinkOutput) GetMinimumAmount() *ListPaymentLinksMinimumAmount {
	if o == nil {
		return nil
	}
	return o.MinimumAmount
}

func (o *ListPaymentLinksPaymentLinkOutput) GetArchived() bool {
	if o == nil {
		return false
	}
	return o.Archived
}

func (o *ListPaymentLinksPaymentLinkOutput) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *ListPaymentLinksPaymentLinkOutput) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *ListPaymentLinksPaymentLinkOutput) GetLines() []ListPaymentLinksLine {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *ListPaymentLinksPaymentLinkOutput) GetBillingAddress() *ListPaymentLinksBillingAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *ListPaymentLinksPaymentLinkOutput) GetShippingAddress() *ListPaymentLinksShippingAddress {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *ListPaymentLinksPaymentLinkOutput) GetProfileID() *string {
	if o == nil {
		return nil
	}
	return o.ProfileID
}

func (o *ListPaymentLinksPaymentLinkOutput) GetReusable() *bool {
	if o == nil {
		return nil
	}
	return o.Reusable
}

func (o *ListPaymentLinksPaymentLinkOutput) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListPaymentLinksPaymentLinkOutput) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *ListPaymentLinksPaymentLinkOutput) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *ListPaymentLinksPaymentLinkOutput) GetAllowedMethods() []string {
	if o == nil {
		return nil
	}
	return o.AllowedMethods
}

func (o *ListPaymentLinksPaymentLinkOutput) GetApplicationFee() *ListPaymentLinksApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *ListPaymentLinksPaymentLinkOutput) GetSequenceType() *ListPaymentLinksSequenceType {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *ListPaymentLinksPaymentLinkOutput) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *ListPaymentLinksPaymentLinkOutput) GetLinks() PaymentLinkLinks {
	if o == nil {
		return PaymentLinkLinks{}
	}
	return o.Links
}

type ListPaymentLinksEmbedded struct {
	// An array of payment link objects.
	PaymentLinks []ListPaymentLinksPaymentLinkOutput `json:"payment_links,omitempty"`
}

func (o *ListPaymentLinksEmbedded) GetPaymentLinks() []ListPaymentLinksPaymentLinkOutput {
	if o == nil {
		return nil
	}
	return o.PaymentLinks
}

// ListPaymentLinksSelf - The URL to the current set of items.
type ListPaymentLinksSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentLinksSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentLinksSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentLinksPrevious - The previous set of items, if available.
type ListPaymentLinksPrevious struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListPaymentLinksPrevious) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListPaymentLinksPrevious) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListPaymentLinksNext - The next set of items, if available.
type ListPaymentLinksNext struct {
	// The actual URL string.
	Href *string `json:"href,omitempty"`
	// The content type of the page or endpoint the URL points to.
	Type *string `json:"type,omitempty"`
}

func (o *ListPaymentLinksNext) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *ListPaymentLinksNext) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// ListPaymentLinksDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type ListPaymentLinksDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *ListPaymentLinksDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *ListPaymentLinksDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// ListPaymentLinksLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
type ListPaymentLinksLinks struct {
	// The URL to the current set of items.
	Self ListPaymentLinksSelf `json:"self"`
	// The previous set of items, if available.
	Previous *ListPaymentLinksPrevious `json:"previous"`
	// The next set of items, if available.
	Next *ListPaymentLinksNext `json:"next"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation ListPaymentLinksDocumentation `json:"documentation"`
}

func (o *ListPaymentLinksLinks) GetSelf() ListPaymentLinksSelf {
	if o == nil {
		return ListPaymentLinksSelf{}
	}
	return o.Self
}

func (o *ListPaymentLinksLinks) GetPrevious() *ListPaymentLinksPrevious {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *ListPaymentLinksLinks) GetNext() *ListPaymentLinksNext {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListPaymentLinksLinks) GetDocumentation() ListPaymentLinksDocumentation {
	if o == nil {
		return ListPaymentLinksDocumentation{}
	}
	return o.Documentation
}

// ListPaymentLinksResponseBody - A list of payment link objects.
type ListPaymentLinksResponseBody struct {
	// The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
	// as well.
	//
	// The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
	// limit is 50 items.
	Count    int64                    `json:"count"`
	Embedded ListPaymentLinksEmbedded `json:"_embedded"`
	// Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
	Links ListPaymentLinksLinks `json:"_links"`
}

func (o *ListPaymentLinksResponseBody) GetCount() int64 {
	if o == nil {
		return 0
	}
	return o.Count
}

func (o *ListPaymentLinksResponseBody) GetEmbedded() ListPaymentLinksEmbedded {
	if o == nil {
		return ListPaymentLinksEmbedded{}
	}
	return o.Embedded
}

func (o *ListPaymentLinksResponseBody) GetLinks() ListPaymentLinksLinks {
	if o == nil {
		return ListPaymentLinksLinks{}
	}
	return o.Links
}

type ListPaymentLinksResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A list of payment link objects.
	Object *ListPaymentLinksResponseBody
}

func (o *ListPaymentLinksResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListPaymentLinksResponse) GetObject() *ListPaymentLinksResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
