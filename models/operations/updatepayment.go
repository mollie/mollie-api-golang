// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mollie/mollie-api-golang/internal/utils"
	"github.com/mollie/mollie-api-golang/models/components"
	"github.com/mollie/mollie-api-golang/types"
)

type UpdatePaymentMetadataRequestType string

const (
	UpdatePaymentMetadataRequestTypeStr        UpdatePaymentMetadataRequestType = "str"
	UpdatePaymentMetadataRequestTypeMapOfAny   UpdatePaymentMetadataRequestType = "mapOfAny"
	UpdatePaymentMetadataRequestTypeArrayOfStr UpdatePaymentMetadataRequestType = "arrayOfStr"
)

// UpdatePaymentMetadataRequest - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type UpdatePaymentMetadataRequest struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type UpdatePaymentMetadataRequestType
}

func CreateUpdatePaymentMetadataRequestStr(str string) UpdatePaymentMetadataRequest {
	typ := UpdatePaymentMetadataRequestTypeStr

	return UpdatePaymentMetadataRequest{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdatePaymentMetadataRequestMapOfAny(mapOfAny map[string]any) UpdatePaymentMetadataRequest {
	typ := UpdatePaymentMetadataRequestTypeMapOfAny

	return UpdatePaymentMetadataRequest{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateUpdatePaymentMetadataRequestArrayOfStr(arrayOfStr []string) UpdatePaymentMetadataRequest {
	typ := UpdatePaymentMetadataRequestTypeArrayOfStr

	return UpdatePaymentMetadataRequest{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *UpdatePaymentMetadataRequest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = UpdatePaymentMetadataRequestTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = UpdatePaymentMetadataRequestTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpdatePaymentMetadataRequestTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdatePaymentMetadataRequest", string(data))
}

func (u UpdatePaymentMetadataRequest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type UpdatePaymentMetadataRequest: all fields are null")
}

// UpdatePaymentMethodRequest - Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment
// method and your customer will skip the selection screen and is sent directly to the chosen payment method. The
// parameter enables you to fully integrate the payment method selection into your website.
//
// You can also specify the methods in an array. By doing so we will still show the payment method selection screen
// but will only show the methods specified in the array. For example, you can use this functionality to only show
// payment methods from a specific country to your customer `['bancontact', 'belfius']`.
type UpdatePaymentMethodRequest string

const (
	UpdatePaymentMethodRequestAlma           UpdatePaymentMethodRequest = "alma"
	UpdatePaymentMethodRequestApplepay       UpdatePaymentMethodRequest = "applepay"
	UpdatePaymentMethodRequestBacs           UpdatePaymentMethodRequest = "bacs"
	UpdatePaymentMethodRequestBancomatpay    UpdatePaymentMethodRequest = "bancomatpay"
	UpdatePaymentMethodRequestBancontact     UpdatePaymentMethodRequest = "bancontact"
	UpdatePaymentMethodRequestBanktransfer   UpdatePaymentMethodRequest = "banktransfer"
	UpdatePaymentMethodRequestBelfius        UpdatePaymentMethodRequest = "belfius"
	UpdatePaymentMethodRequestBillie         UpdatePaymentMethodRequest = "billie"
	UpdatePaymentMethodRequestBizum          UpdatePaymentMethodRequest = "bizum"
	UpdatePaymentMethodRequestBlik           UpdatePaymentMethodRequest = "blik"
	UpdatePaymentMethodRequestCreditcard     UpdatePaymentMethodRequest = "creditcard"
	UpdatePaymentMethodRequestDirectdebit    UpdatePaymentMethodRequest = "directdebit"
	UpdatePaymentMethodRequestEps            UpdatePaymentMethodRequest = "eps"
	UpdatePaymentMethodRequestGiftcard       UpdatePaymentMethodRequest = "giftcard"
	UpdatePaymentMethodRequestIdeal          UpdatePaymentMethodRequest = "ideal"
	UpdatePaymentMethodRequestIn3            UpdatePaymentMethodRequest = "in3"
	UpdatePaymentMethodRequestKbc            UpdatePaymentMethodRequest = "kbc"
	UpdatePaymentMethodRequestKlarna         UpdatePaymentMethodRequest = "klarna"
	UpdatePaymentMethodRequestKlarnapaylater UpdatePaymentMethodRequest = "klarnapaylater"
	UpdatePaymentMethodRequestKlarnapaynow   UpdatePaymentMethodRequest = "klarnapaynow"
	UpdatePaymentMethodRequestKlarnasliceit  UpdatePaymentMethodRequest = "klarnasliceit"
	UpdatePaymentMethodRequestMbway          UpdatePaymentMethodRequest = "mbway"
	UpdatePaymentMethodRequestMultibanco     UpdatePaymentMethodRequest = "multibanco"
	UpdatePaymentMethodRequestMybank         UpdatePaymentMethodRequest = "mybank"
	UpdatePaymentMethodRequestPaybybank      UpdatePaymentMethodRequest = "paybybank"
	UpdatePaymentMethodRequestPayconiq       UpdatePaymentMethodRequest = "payconiq"
	UpdatePaymentMethodRequestPaypal         UpdatePaymentMethodRequest = "paypal"
	UpdatePaymentMethodRequestPaysafecard    UpdatePaymentMethodRequest = "paysafecard"
	UpdatePaymentMethodRequestPointofsale    UpdatePaymentMethodRequest = "pointofsale"
	UpdatePaymentMethodRequestPrzelewy24     UpdatePaymentMethodRequest = "przelewy24"
	UpdatePaymentMethodRequestRiverty        UpdatePaymentMethodRequest = "riverty"
	UpdatePaymentMethodRequestSatispay       UpdatePaymentMethodRequest = "satispay"
	UpdatePaymentMethodRequestSwish          UpdatePaymentMethodRequest = "swish"
	UpdatePaymentMethodRequestTrustly        UpdatePaymentMethodRequest = "trustly"
	UpdatePaymentMethodRequestTwint          UpdatePaymentMethodRequest = "twint"
	UpdatePaymentMethodRequestVoucher        UpdatePaymentMethodRequest = "voucher"
)

func (e UpdatePaymentMethodRequest) ToPointer() *UpdatePaymentMethodRequest {
	return &e
}
func (e *UpdatePaymentMethodRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "applepay":
		fallthrough
	case "bacs":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "kbc":
		fallthrough
	case "klarna":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "pointofsale":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = UpdatePaymentMethodRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentMethodRequest: %v", v)
	}
}

// UpdatePaymentLocaleRequest - Allows you to preset the language to be used.
type UpdatePaymentLocaleRequest string

const (
	UpdatePaymentLocaleRequestEnUs UpdatePaymentLocaleRequest = "en_US"
	UpdatePaymentLocaleRequestEnGb UpdatePaymentLocaleRequest = "en_GB"
	UpdatePaymentLocaleRequestNlNl UpdatePaymentLocaleRequest = "nl_NL"
	UpdatePaymentLocaleRequestNlBe UpdatePaymentLocaleRequest = "nl_BE"
	UpdatePaymentLocaleRequestDeDe UpdatePaymentLocaleRequest = "de_DE"
	UpdatePaymentLocaleRequestDeAt UpdatePaymentLocaleRequest = "de_AT"
	UpdatePaymentLocaleRequestDeCh UpdatePaymentLocaleRequest = "de_CH"
	UpdatePaymentLocaleRequestFrFr UpdatePaymentLocaleRequest = "fr_FR"
	UpdatePaymentLocaleRequestFrBe UpdatePaymentLocaleRequest = "fr_BE"
	UpdatePaymentLocaleRequestEsEs UpdatePaymentLocaleRequest = "es_ES"
	UpdatePaymentLocaleRequestCaEs UpdatePaymentLocaleRequest = "ca_ES"
	UpdatePaymentLocaleRequestPtPt UpdatePaymentLocaleRequest = "pt_PT"
	UpdatePaymentLocaleRequestItIt UpdatePaymentLocaleRequest = "it_IT"
	UpdatePaymentLocaleRequestNbNo UpdatePaymentLocaleRequest = "nb_NO"
	UpdatePaymentLocaleRequestSvSe UpdatePaymentLocaleRequest = "sv_SE"
	UpdatePaymentLocaleRequestFiFi UpdatePaymentLocaleRequest = "fi_FI"
	UpdatePaymentLocaleRequestDaDk UpdatePaymentLocaleRequest = "da_DK"
	UpdatePaymentLocaleRequestIsIs UpdatePaymentLocaleRequest = "is_IS"
	UpdatePaymentLocaleRequestHuHu UpdatePaymentLocaleRequest = "hu_HU"
	UpdatePaymentLocaleRequestPlPl UpdatePaymentLocaleRequest = "pl_PL"
	UpdatePaymentLocaleRequestLvLv UpdatePaymentLocaleRequest = "lv_LV"
	UpdatePaymentLocaleRequestLtLt UpdatePaymentLocaleRequest = "lt_LT"
)

func (e UpdatePaymentLocaleRequest) ToPointer() *UpdatePaymentLocaleRequest {
	return &e
}
func (e *UpdatePaymentLocaleRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		fallthrough
	case "es_ES":
		fallthrough
	case "ca_ES":
		fallthrough
	case "pt_PT":
		fallthrough
	case "it_IT":
		fallthrough
	case "nb_NO":
		fallthrough
	case "sv_SE":
		fallthrough
	case "fi_FI":
		fallthrough
	case "da_DK":
		fallthrough
	case "is_IS":
		fallthrough
	case "hu_HU":
		fallthrough
	case "pl_PL":
		fallthrough
	case "lv_LV":
		fallthrough
	case "lt_LT":
		*e = UpdatePaymentLocaleRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentLocaleRequest: %v", v)
	}
}

type UpdatePaymentBillingAddressRequest struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *UpdatePaymentBillingAddressRequest) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *UpdatePaymentBillingAddressRequest) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *UpdatePaymentBillingAddressRequest) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *UpdatePaymentBillingAddressRequest) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *UpdatePaymentBillingAddressRequest) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *UpdatePaymentBillingAddressRequest) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *UpdatePaymentBillingAddressRequest) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *UpdatePaymentBillingAddressRequest) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UpdatePaymentBillingAddressRequest) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *UpdatePaymentBillingAddressRequest) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *UpdatePaymentBillingAddressRequest) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *UpdatePaymentBillingAddressRequest) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

type UpdatePaymentShippingAddressRequest struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *UpdatePaymentShippingAddressRequest) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *UpdatePaymentShippingAddressRequest) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *UpdatePaymentShippingAddressRequest) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *UpdatePaymentShippingAddressRequest) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *UpdatePaymentShippingAddressRequest) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *UpdatePaymentShippingAddressRequest) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *UpdatePaymentShippingAddressRequest) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *UpdatePaymentShippingAddressRequest) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UpdatePaymentShippingAddressRequest) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *UpdatePaymentShippingAddressRequest) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *UpdatePaymentShippingAddressRequest) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *UpdatePaymentShippingAddressRequest) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

type UpdatePaymentRequestBody struct {
	// The description of the payment. This will be shown to your customer on their card or bank statement when possible.
	// We truncate the description automatically according to the limits of the used payment method. The description is
	// also visible in any exports you generate.
	//
	// We recommend you use a unique identifier so that you can always link the payment to the order in your back office.
	// This is particularly useful for bookkeeping.
	//
	// The maximum length of the description field differs per payment method, with the absolute maximum being 255
	// characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
	Description *string `json:"description,omitempty"`
	// The URL your customer will be redirected to after the payment process.
	//
	// It could make sense for the redirectUrl to contain a unique identifier – like your order ID – so you can show the
	// right page referencing the order when your customer returns.
	//
	// The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for
	// Apple Pay payments with an `applePayPaymentToken`.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not
	// provided, the customer will be redirected to the `redirectUrl` instead — see above.
	//
	// Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is
	// therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle
	// payment cancellations.
	CancelURL *string `json:"cancelUrl,omitempty"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *UpdatePaymentMetadataRequest `json:"metadata,omitempty"`
	// Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment
	// method and your customer will skip the selection screen and is sent directly to the chosen payment method. The
	// parameter enables you to fully integrate the payment method selection into your website.
	//
	// You can also specify the methods in an array. By doing so we will still show the payment method selection screen
	// but will only show the methods specified in the array. For example, you can use this functionality to only show
	// payment methods from a specific country to your customer `['bancontact', 'belfius']`.
	Method *UpdatePaymentMethodRequest `json:"method,omitempty"`
	// Allows you to preset the language to be used.
	Locale *UpdatePaymentLocaleRequest `json:"locale,omitempty"`
	// The date by which the payment should be completed in `YYYY-MM-DD` format
	DueDate *string `json:"dueDate,omitempty"`
	// For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT
	// rates you have used for the order to ensure your customer's country matches the VAT country.
	//
	// Use this parameter to restrict the payment methods available to your customer to those from a single country.
	//
	// If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
	//
	// The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
	RestrictPaymentMethodsToCountry *string `json:"restrictPaymentMethodsToCountry,omitempty"`
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
	// **Only relevant for iDEAL, KBC/CBC, gift card, and voucher payments.**
	//
	// **⚠️ With the introduction of iDEAL 2 in 2025, this field will be ignored for iDEAL payments. For more information
	// on the migration, refer to our [help center](https://help.mollie.com/hc/articles/19100313768338-iDEAL-2-0).**
	//
	// Some payment methods are a network of connected banks or card issuers. In these cases, after selecting the payment
	// method, the customer may still need to select the appropriate issuer before the payment can proceed.
	//
	// We provide hosted issuer selection screens, but these screens can be skipped by providing the `issuer` via the API
	// up front.
	//
	// The full list of issuers for a specific method can be retrieved via the Methods API by using the optional
	// `issuers` include.
	//
	// A valid issuer for iDEAL is for example `ideal_INGBNL2A` (for ING Bank).
	Issuer          *string                              `json:"issuer,omitempty"`
	BillingAddress  *UpdatePaymentBillingAddressRequest  `json:"billingAddress,omitempty"`
	ShippingAddress *UpdatePaymentShippingAddressRequest `json:"shippingAddress,omitempty"`
	BillingEmail    *string                              `json:"billingEmail,omitempty"`
}

func (o *UpdatePaymentRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdatePaymentRequestBody) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *UpdatePaymentRequestBody) GetCancelURL() *string {
	if o == nil {
		return nil
	}
	return o.CancelURL
}

func (o *UpdatePaymentRequestBody) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *UpdatePaymentRequestBody) GetMetadata() *UpdatePaymentMetadataRequest {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *UpdatePaymentRequestBody) GetMethod() *UpdatePaymentMethodRequest {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *UpdatePaymentRequestBody) GetLocale() *UpdatePaymentLocaleRequest {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *UpdatePaymentRequestBody) GetDueDate() *string {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *UpdatePaymentRequestBody) GetRestrictPaymentMethodsToCountry() *string {
	if o == nil {
		return nil
	}
	return o.RestrictPaymentMethodsToCountry
}

func (o *UpdatePaymentRequestBody) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

func (o *UpdatePaymentRequestBody) GetIssuer() *string {
	if o == nil {
		return nil
	}
	return o.Issuer
}

func (o *UpdatePaymentRequestBody) GetBillingAddress() *UpdatePaymentBillingAddressRequest {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *UpdatePaymentRequestBody) GetShippingAddress() *UpdatePaymentShippingAddressRequest {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *UpdatePaymentRequestBody) GetBillingEmail() *string {
	if o == nil {
		return nil
	}
	return o.BillingEmail
}

type UpdatePaymentRequest struct {
	// Provide the ID of the related payment.
	PaymentID   string                    `pathParam:"style=simple,explode=false,name=paymentId"`
	RequestBody *UpdatePaymentRequestBody `request:"mediaType=application/json"`
}

func (o *UpdatePaymentRequest) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *UpdatePaymentRequest) GetRequestBody() *UpdatePaymentRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// UpdatePaymentUnprocessableEntityDocumentation - The URL to the generic Mollie API error handling guide.
type UpdatePaymentUnprocessableEntityDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *UpdatePaymentUnprocessableEntityDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentUnprocessableEntityDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type UpdatePaymentUnprocessableEntityLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation UpdatePaymentUnprocessableEntityDocumentation `json:"documentation"`
}

func (o *UpdatePaymentUnprocessableEntityLinks) GetDocumentation() UpdatePaymentUnprocessableEntityDocumentation {
	if o == nil {
		return UpdatePaymentUnprocessableEntityDocumentation{}
	}
	return o.Documentation
}

// UpdatePaymentNotFoundDocumentation - The URL to the generic Mollie API error handling guide.
type UpdatePaymentNotFoundDocumentation struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

func (o *UpdatePaymentNotFoundDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentNotFoundDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type UpdatePaymentNotFoundLinks struct {
	// The URL to the generic Mollie API error handling guide.
	Documentation UpdatePaymentNotFoundDocumentation `json:"documentation"`
}

func (o *UpdatePaymentNotFoundLinks) GetDocumentation() UpdatePaymentNotFoundDocumentation {
	if o == nil {
		return UpdatePaymentNotFoundDocumentation{}
	}
	return o.Documentation
}

// UpdatePaymentMode - Whether this entity was created in live mode or in test mode.
type UpdatePaymentMode string

const (
	UpdatePaymentModeLive UpdatePaymentMode = "live"
	UpdatePaymentModeTest UpdatePaymentMode = "test"
)

func (e UpdatePaymentMode) ToPointer() *UpdatePaymentMode {
	return &e
}
func (e *UpdatePaymentMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = UpdatePaymentMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentMode: %v", v)
	}
}

// UpdatePaymentAmount - The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
//
// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
// retrieved using the Get method endpoint.
//
// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
// tip amount.
type UpdatePaymentAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentAmountRefunded - The total amount that is already refunded. Only available when refunds are available for this payment. For some
// payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
// costs for a return shipment to the customer.
type UpdatePaymentAmountRefunded struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentAmountRefunded) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentAmountRefunded) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentAmountRemaining - The remaining amount that can be refunded. Only available when refunds are available for this payment.
type UpdatePaymentAmountRemaining struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentAmountRemaining) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentAmountRemaining) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentAmountCaptured - The total amount that is already captured for this payment. Only available when this payment supports captures.
type UpdatePaymentAmountCaptured struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentAmountCaptured) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentAmountCaptured) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentAmountChargedBack - The total amount that was charged back for this payment. Only available when the total charged back amount is not
// zero.
type UpdatePaymentAmountChargedBack struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentAmountChargedBack) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentAmountChargedBack) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentSettlementAmount - This optional field will contain the approximate amount that will be settled to your account, converted to the
// currency your account is settled in.
//
// Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
// settled by Mollie the `settlementAmount` is omitted from the response.
//
// Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
// using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
type UpdatePaymentSettlementAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentSettlementAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentSettlementAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentLineType - The type of product purchased. For example, a physical or a digital product.
//
// The `tip` payment line type is not available when creating a payment.
type UpdatePaymentLineType string

const (
	UpdatePaymentLineTypePhysical    UpdatePaymentLineType = "physical"
	UpdatePaymentLineTypeDigital     UpdatePaymentLineType = "digital"
	UpdatePaymentLineTypeShippingFee UpdatePaymentLineType = "shipping_fee"
	UpdatePaymentLineTypeDiscount    UpdatePaymentLineType = "discount"
	UpdatePaymentLineTypeStoreCredit UpdatePaymentLineType = "store_credit"
	UpdatePaymentLineTypeGiftCard    UpdatePaymentLineType = "gift_card"
	UpdatePaymentLineTypeSurcharge   UpdatePaymentLineType = "surcharge"
	UpdatePaymentLineTypeTip         UpdatePaymentLineType = "tip"
)

func (e UpdatePaymentLineType) ToPointer() *UpdatePaymentLineType {
	return &e
}
func (e *UpdatePaymentLineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "physical":
		fallthrough
	case "digital":
		fallthrough
	case "shipping_fee":
		fallthrough
	case "discount":
		fallthrough
	case "store_credit":
		fallthrough
	case "gift_card":
		fallthrough
	case "surcharge":
		fallthrough
	case "tip":
		*e = UpdatePaymentLineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentLineType: %v", v)
	}
}

// UpdatePaymentUnitPrice - The price of a single item including VAT.
//
// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
//
// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
//
// The unit price can be zero in case of free items.
type UpdatePaymentUnitPrice struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentUnitPrice) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentUnitPrice) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentDiscountAmount - Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
// type.
type UpdatePaymentDiscountAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentDiscountAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentDiscountAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentTotalAmount - The total amount of the line, including VAT and discounts.
//
// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
//
// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
type UpdatePaymentTotalAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentTotalAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentTotalAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentVatAmount - The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
//
// Any deviations from this will result in an error.
//
// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
// `SEK 100.00 × (25 / 125) = SEK 20.00`.
type UpdatePaymentVatAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentVatAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentVatAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdatePaymentCategory string

const (
	UpdatePaymentCategoryMeal         UpdatePaymentCategory = "meal"
	UpdatePaymentCategoryEco          UpdatePaymentCategory = "eco"
	UpdatePaymentCategoryGift         UpdatePaymentCategory = "gift"
	UpdatePaymentCategorySportCulture UpdatePaymentCategory = "sport_culture"
)

func (e UpdatePaymentCategory) ToPointer() *UpdatePaymentCategory {
	return &e
}
func (e *UpdatePaymentCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "meal":
		fallthrough
	case "eco":
		fallthrough
	case "gift":
		fallthrough
	case "sport_culture":
		*e = UpdatePaymentCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentCategory: %v", v)
	}
}

// UpdatePaymentRecurringAmount - Total amount and currency of the recurring item.
type UpdatePaymentRecurringAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentRecurringAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentRecurringAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentRecurring - The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
// to inform the shopper of the details for recurring products in the payments.
type UpdatePaymentRecurring struct {
	// A description of the recurring item. If not present, the main description of the item will be used.
	Description *string `json:"description,omitempty"`
	// Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
	//
	// Possible values: `... days`, `... weeks`, `... months`.
	Interval string `json:"interval"`
	// Total amount and currency of the recurring item.
	Amount *UpdatePaymentRecurringAmount `json:"amount,omitempty"`
	// Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
	Times *int64 `json:"times,omitempty"`
	// The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
	StartDate *string `json:"startDate,omitempty"`
}

func (o *UpdatePaymentRecurring) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdatePaymentRecurring) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *UpdatePaymentRecurring) GetAmount() *UpdatePaymentRecurringAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *UpdatePaymentRecurring) GetTimes() *int64 {
	if o == nil {
		return nil
	}
	return o.Times
}

func (o *UpdatePaymentRecurring) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

type UpdatePaymentLine struct {
	// The type of product purchased. For example, a physical or a digital product.
	//
	// The `tip` payment line type is not available when creating a payment.
	Type *UpdatePaymentLineType `json:"type,omitempty"`
	// A description of the line item. For example *LEGO 4440 Forest Police Station*.
	Description string `json:"description"`
	// The number of items.
	Quantity int64 `json:"quantity"`
	// The unit for the quantity. For example *pcs*, *kg*, or *cm*.
	QuantityUnit *string `json:"quantityUnit,omitempty"`
	// The price of a single item including VAT.
	//
	// For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
	//
	// For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
	//
	// The unit price can be zero in case of free items.
	UnitPrice UpdatePaymentUnitPrice `json:"unitPrice"`
	// Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount
	// type.
	DiscountAmount *UpdatePaymentDiscountAmount `json:"discountAmount,omitempty"`
	// The total amount of the line, including VAT and discounts.
	//
	// Should match the following formula: `(unitPrice × quantity) - discountAmount`.
	//
	// The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
	TotalAmount UpdatePaymentTotalAmount `json:"totalAmount"`
	// The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
	// not as a float, to ensure the correct number of decimals are passed.
	VatRate *string `json:"vatRate,omitempty"`
	// The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be
	// calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
	//
	// Any deviations from this will result in an error.
	//
	// For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of
	// `SEK 100.00 × (25 / 125) = SEK 20.00`.
	VatAmount *UpdatePaymentVatAmount `json:"vatAmount,omitempty"`
	// The SKU, EAN, ISBN or UPC of the product sold.
	Sku *string `json:"sku,omitempty"`
	// An array with the voucher categories, in case of a line eligible for a voucher. See the
	// [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
	Categories []UpdatePaymentCategory `json:"categories,omitempty"`
	// A link pointing to an image of the product sold.
	ImageURL *string `json:"imageUrl,omitempty"`
	// A link pointing to the product page in your web shop of the product sold.
	ProductURL *string `json:"productUrl,omitempty"`
	// The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout
	// to inform the shopper of the details for recurring products in the payments.
	Recurring *UpdatePaymentRecurring `json:"recurring,omitempty"`
}

func (o *UpdatePaymentLine) GetType() *UpdatePaymentLineType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdatePaymentLine) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *UpdatePaymentLine) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *UpdatePaymentLine) GetQuantityUnit() *string {
	if o == nil {
		return nil
	}
	return o.QuantityUnit
}

func (o *UpdatePaymentLine) GetUnitPrice() UpdatePaymentUnitPrice {
	if o == nil {
		return UpdatePaymentUnitPrice{}
	}
	return o.UnitPrice
}

func (o *UpdatePaymentLine) GetDiscountAmount() *UpdatePaymentDiscountAmount {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *UpdatePaymentLine) GetTotalAmount() UpdatePaymentTotalAmount {
	if o == nil {
		return UpdatePaymentTotalAmount{}
	}
	return o.TotalAmount
}

func (o *UpdatePaymentLine) GetVatRate() *string {
	if o == nil {
		return nil
	}
	return o.VatRate
}

func (o *UpdatePaymentLine) GetVatAmount() *UpdatePaymentVatAmount {
	if o == nil {
		return nil
	}
	return o.VatAmount
}

func (o *UpdatePaymentLine) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *UpdatePaymentLine) GetCategories() []UpdatePaymentCategory {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *UpdatePaymentLine) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *UpdatePaymentLine) GetProductURL() *string {
	if o == nil {
		return nil
	}
	return o.ProductURL
}

func (o *UpdatePaymentLine) GetRecurring() *UpdatePaymentRecurring {
	if o == nil {
		return nil
	}
	return o.Recurring
}

// UpdatePaymentBillingAddressResponse - The customer's billing address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
//
// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
type UpdatePaymentBillingAddressResponse struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *UpdatePaymentBillingAddressResponse) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *UpdatePaymentBillingAddressResponse) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *UpdatePaymentBillingAddressResponse) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *UpdatePaymentBillingAddressResponse) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *UpdatePaymentBillingAddressResponse) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *UpdatePaymentBillingAddressResponse) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *UpdatePaymentBillingAddressResponse) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *UpdatePaymentBillingAddressResponse) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UpdatePaymentBillingAddressResponse) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *UpdatePaymentBillingAddressResponse) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *UpdatePaymentBillingAddressResponse) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *UpdatePaymentBillingAddressResponse) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// UpdatePaymentShippingAddressResponse - The customer's shipping address details. We advise to provide these details to improve fraud protection and
// conversion.
//
// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
// `country`.
type UpdatePaymentShippingAddressResponse struct {
	// The title of the person, for example *Mr.* or *Mrs.*.
	Title *string `json:"title,omitempty"`
	// The given name (first name) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	GivenName *string `json:"givenName,omitempty"`
	// The given family name (surname) of the person should be at least two characters and cannot contain only
	// numbers.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	FamilyName *string `json:"familyName,omitempty"`
	// The name of the organization, in case the addressee is an organization.
	OrganizationName *string `json:"organizationName,omitempty"`
	// A street and street number.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	StreetAndNumber *string `json:"streetAndNumber,omitempty"`
	// Any additional addressing details, for example an apartment number.
	StreetAdditional *string `json:"streetAdditional,omitempty"`
	// A postal code. This field may be required if the provided country has a postal code system.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	PostalCode *string `json:"postalCode,omitempty"`
	// A valid e-mail address.
	//
	// If you provide the email address for a `banktransfer` payment, we will automatically send the instructions
	// email upon payment creation. The language of the email will follow the locale parameter of the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Email *string `json:"email,omitempty"`
	// If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
	Phone *string `json:"phone,omitempty"`
	// A city name.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	City *string `json:"city,omitempty"`
	// The top-level administrative subdivision of the country. For example: Noord-Holland.
	Region *string `json:"region,omitempty"`
	// A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
	//
	// Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
	Country *string `json:"country,omitempty"`
}

func (o *UpdatePaymentShippingAddressResponse) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *UpdatePaymentShippingAddressResponse) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *UpdatePaymentShippingAddressResponse) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *UpdatePaymentShippingAddressResponse) GetOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationName
}

func (o *UpdatePaymentShippingAddressResponse) GetStreetAndNumber() *string {
	if o == nil {
		return nil
	}
	return o.StreetAndNumber
}

func (o *UpdatePaymentShippingAddressResponse) GetStreetAdditional() *string {
	if o == nil {
		return nil
	}
	return o.StreetAdditional
}

func (o *UpdatePaymentShippingAddressResponse) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *UpdatePaymentShippingAddressResponse) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *UpdatePaymentShippingAddressResponse) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *UpdatePaymentShippingAddressResponse) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *UpdatePaymentShippingAddressResponse) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *UpdatePaymentShippingAddressResponse) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

// UpdatePaymentLocaleResponse - Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
// locale, but our hosted payment pages currently only support the specified languages.
//
// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
// customer use a local bank account greatly increases the conversion and speed of payment.
type UpdatePaymentLocaleResponse string

const (
	UpdatePaymentLocaleResponseEnUs UpdatePaymentLocaleResponse = "en_US"
	UpdatePaymentLocaleResponseEnGb UpdatePaymentLocaleResponse = "en_GB"
	UpdatePaymentLocaleResponseNlNl UpdatePaymentLocaleResponse = "nl_NL"
	UpdatePaymentLocaleResponseNlBe UpdatePaymentLocaleResponse = "nl_BE"
	UpdatePaymentLocaleResponseDeDe UpdatePaymentLocaleResponse = "de_DE"
	UpdatePaymentLocaleResponseDeAt UpdatePaymentLocaleResponse = "de_AT"
	UpdatePaymentLocaleResponseDeCh UpdatePaymentLocaleResponse = "de_CH"
	UpdatePaymentLocaleResponseFrFr UpdatePaymentLocaleResponse = "fr_FR"
	UpdatePaymentLocaleResponseFrBe UpdatePaymentLocaleResponse = "fr_BE"
	UpdatePaymentLocaleResponseEsEs UpdatePaymentLocaleResponse = "es_ES"
	UpdatePaymentLocaleResponseCaEs UpdatePaymentLocaleResponse = "ca_ES"
	UpdatePaymentLocaleResponsePtPt UpdatePaymentLocaleResponse = "pt_PT"
	UpdatePaymentLocaleResponseItIt UpdatePaymentLocaleResponse = "it_IT"
	UpdatePaymentLocaleResponseNbNo UpdatePaymentLocaleResponse = "nb_NO"
	UpdatePaymentLocaleResponseSvSe UpdatePaymentLocaleResponse = "sv_SE"
	UpdatePaymentLocaleResponseFiFi UpdatePaymentLocaleResponse = "fi_FI"
	UpdatePaymentLocaleResponseDaDk UpdatePaymentLocaleResponse = "da_DK"
	UpdatePaymentLocaleResponseIsIs UpdatePaymentLocaleResponse = "is_IS"
	UpdatePaymentLocaleResponseHuHu UpdatePaymentLocaleResponse = "hu_HU"
	UpdatePaymentLocaleResponsePlPl UpdatePaymentLocaleResponse = "pl_PL"
	UpdatePaymentLocaleResponseLvLv UpdatePaymentLocaleResponse = "lv_LV"
	UpdatePaymentLocaleResponseLtLt UpdatePaymentLocaleResponse = "lt_LT"
)

func (e UpdatePaymentLocaleResponse) ToPointer() *UpdatePaymentLocaleResponse {
	return &e
}
func (e *UpdatePaymentLocaleResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "en_US":
		fallthrough
	case "en_GB":
		fallthrough
	case "nl_NL":
		fallthrough
	case "nl_BE":
		fallthrough
	case "de_DE":
		fallthrough
	case "de_AT":
		fallthrough
	case "de_CH":
		fallthrough
	case "fr_FR":
		fallthrough
	case "fr_BE":
		fallthrough
	case "es_ES":
		fallthrough
	case "ca_ES":
		fallthrough
	case "pt_PT":
		fallthrough
	case "it_IT":
		fallthrough
	case "nb_NO":
		fallthrough
	case "sv_SE":
		fallthrough
	case "fi_FI":
		fallthrough
	case "da_DK":
		fallthrough
	case "is_IS":
		fallthrough
	case "hu_HU":
		fallthrough
	case "pl_PL":
		fallthrough
	case "lv_LV":
		fallthrough
	case "lt_LT":
		*e = UpdatePaymentLocaleResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentLocaleResponse: %v", v)
	}
}

// UpdatePaymentMethodResponse - The payment method used for this transaction. If a specific method was selected during payment initialization,
// this field reflects that choice.
type UpdatePaymentMethodResponse string

const (
	UpdatePaymentMethodResponseAlma           UpdatePaymentMethodResponse = "alma"
	UpdatePaymentMethodResponseApplepay       UpdatePaymentMethodResponse = "applepay"
	UpdatePaymentMethodResponseBacs           UpdatePaymentMethodResponse = "bacs"
	UpdatePaymentMethodResponseBancomatpay    UpdatePaymentMethodResponse = "bancomatpay"
	UpdatePaymentMethodResponseBancontact     UpdatePaymentMethodResponse = "bancontact"
	UpdatePaymentMethodResponseBanktransfer   UpdatePaymentMethodResponse = "banktransfer"
	UpdatePaymentMethodResponseBelfius        UpdatePaymentMethodResponse = "belfius"
	UpdatePaymentMethodResponseBillie         UpdatePaymentMethodResponse = "billie"
	UpdatePaymentMethodResponseBizum          UpdatePaymentMethodResponse = "bizum"
	UpdatePaymentMethodResponseBlik           UpdatePaymentMethodResponse = "blik"
	UpdatePaymentMethodResponseCreditcard     UpdatePaymentMethodResponse = "creditcard"
	UpdatePaymentMethodResponseDirectdebit    UpdatePaymentMethodResponse = "directdebit"
	UpdatePaymentMethodResponseEps            UpdatePaymentMethodResponse = "eps"
	UpdatePaymentMethodResponseGiftcard       UpdatePaymentMethodResponse = "giftcard"
	UpdatePaymentMethodResponseIdeal          UpdatePaymentMethodResponse = "ideal"
	UpdatePaymentMethodResponseIn3            UpdatePaymentMethodResponse = "in3"
	UpdatePaymentMethodResponseKbc            UpdatePaymentMethodResponse = "kbc"
	UpdatePaymentMethodResponseKlarna         UpdatePaymentMethodResponse = "klarna"
	UpdatePaymentMethodResponseKlarnapaylater UpdatePaymentMethodResponse = "klarnapaylater"
	UpdatePaymentMethodResponseKlarnapaynow   UpdatePaymentMethodResponse = "klarnapaynow"
	UpdatePaymentMethodResponseKlarnasliceit  UpdatePaymentMethodResponse = "klarnasliceit"
	UpdatePaymentMethodResponseMbway          UpdatePaymentMethodResponse = "mbway"
	UpdatePaymentMethodResponseMultibanco     UpdatePaymentMethodResponse = "multibanco"
	UpdatePaymentMethodResponseMybank         UpdatePaymentMethodResponse = "mybank"
	UpdatePaymentMethodResponsePaybybank      UpdatePaymentMethodResponse = "paybybank"
	UpdatePaymentMethodResponsePayconiq       UpdatePaymentMethodResponse = "payconiq"
	UpdatePaymentMethodResponsePaypal         UpdatePaymentMethodResponse = "paypal"
	UpdatePaymentMethodResponsePaysafecard    UpdatePaymentMethodResponse = "paysafecard"
	UpdatePaymentMethodResponsePointofsale    UpdatePaymentMethodResponse = "pointofsale"
	UpdatePaymentMethodResponsePrzelewy24     UpdatePaymentMethodResponse = "przelewy24"
	UpdatePaymentMethodResponseRiverty        UpdatePaymentMethodResponse = "riverty"
	UpdatePaymentMethodResponseSatispay       UpdatePaymentMethodResponse = "satispay"
	UpdatePaymentMethodResponseSwish          UpdatePaymentMethodResponse = "swish"
	UpdatePaymentMethodResponseTrustly        UpdatePaymentMethodResponse = "trustly"
	UpdatePaymentMethodResponseTwint          UpdatePaymentMethodResponse = "twint"
	UpdatePaymentMethodResponseVoucher        UpdatePaymentMethodResponse = "voucher"
)

func (e UpdatePaymentMethodResponse) ToPointer() *UpdatePaymentMethodResponse {
	return &e
}
func (e *UpdatePaymentMethodResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alma":
		fallthrough
	case "applepay":
		fallthrough
	case "bacs":
		fallthrough
	case "bancomatpay":
		fallthrough
	case "bancontact":
		fallthrough
	case "banktransfer":
		fallthrough
	case "belfius":
		fallthrough
	case "billie":
		fallthrough
	case "bizum":
		fallthrough
	case "blik":
		fallthrough
	case "creditcard":
		fallthrough
	case "directdebit":
		fallthrough
	case "eps":
		fallthrough
	case "giftcard":
		fallthrough
	case "ideal":
		fallthrough
	case "in3":
		fallthrough
	case "kbc":
		fallthrough
	case "klarna":
		fallthrough
	case "klarnapaylater":
		fallthrough
	case "klarnapaynow":
		fallthrough
	case "klarnasliceit":
		fallthrough
	case "mbway":
		fallthrough
	case "multibanco":
		fallthrough
	case "mybank":
		fallthrough
	case "paybybank":
		fallthrough
	case "payconiq":
		fallthrough
	case "paypal":
		fallthrough
	case "paysafecard":
		fallthrough
	case "pointofsale":
		fallthrough
	case "przelewy24":
		fallthrough
	case "riverty":
		fallthrough
	case "satispay":
		fallthrough
	case "swish":
		fallthrough
	case "trustly":
		fallthrough
	case "twint":
		fallthrough
	case "voucher":
		*e = UpdatePaymentMethodResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentMethodResponse: %v", v)
	}
}

type UpdatePaymentMetadataResponseType string

const (
	UpdatePaymentMetadataResponseTypeStr        UpdatePaymentMetadataResponseType = "str"
	UpdatePaymentMetadataResponseTypeMapOfAny   UpdatePaymentMetadataResponseType = "mapOfAny"
	UpdatePaymentMetadataResponseTypeArrayOfStr UpdatePaymentMetadataResponseType = "arrayOfStr"
)

// UpdatePaymentMetadataResponse - Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
type UpdatePaymentMetadataResponse struct {
	Str        *string        `queryParam:"inline" name:"metadata"`
	MapOfAny   map[string]any `queryParam:"inline" name:"metadata"`
	ArrayOfStr []string       `queryParam:"inline" name:"metadata"`

	Type UpdatePaymentMetadataResponseType
}

func CreateUpdatePaymentMetadataResponseStr(str string) UpdatePaymentMetadataResponse {
	typ := UpdatePaymentMetadataResponseTypeStr

	return UpdatePaymentMetadataResponse{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdatePaymentMetadataResponseMapOfAny(mapOfAny map[string]any) UpdatePaymentMetadataResponse {
	typ := UpdatePaymentMetadataResponseTypeMapOfAny

	return UpdatePaymentMetadataResponse{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateUpdatePaymentMetadataResponseArrayOfStr(arrayOfStr []string) UpdatePaymentMetadataResponse {
	typ := UpdatePaymentMetadataResponseTypeArrayOfStr

	return UpdatePaymentMetadataResponse{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *UpdatePaymentMetadataResponse) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = UpdatePaymentMetadataResponseTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = UpdatePaymentMetadataResponseTypeMapOfAny
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpdatePaymentMetadataResponseTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdatePaymentMetadataResponse", string(data))
}

func (u UpdatePaymentMetadataResponse) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type UpdatePaymentMetadataResponse: all fields are null")
}

// UpdatePaymentCaptureMode - Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
// and capture at a later time.
//
// This field needs to be set to `manual` for method `riverty`.
type UpdatePaymentCaptureMode string

const (
	UpdatePaymentCaptureModeAutomatic UpdatePaymentCaptureMode = "automatic"
	UpdatePaymentCaptureModeManual    UpdatePaymentCaptureMode = "manual"
)

func (e UpdatePaymentCaptureMode) ToPointer() *UpdatePaymentCaptureMode {
	return &e
}
func (e *UpdatePaymentCaptureMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automatic":
		fallthrough
	case "manual":
		*e = UpdatePaymentCaptureMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentCaptureMode: %v", v)
	}
}

// UpdatePaymentApplicationFeeAmount - The fee that you wish to charge.
//
// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
// a €0.99 fee on a €1.00 payment.
type UpdatePaymentApplicationFeeAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentApplicationFeeAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentApplicationFeeAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentApplicationFee - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
// merchants.
//
// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
// to your own account balance.
//
// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
// `routing` parameter.
type UpdatePaymentApplicationFee struct {
	// The fee that you wish to charge.
	//
	// Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge
	// a €0.99 fee on a €1.00 payment.
	Amount *UpdatePaymentApplicationFeeAmount `json:"amount,omitempty"`
	// The description of the application fee. This will appear on settlement reports towards both you and the
	// connected merchant.
	Description *string `json:"description,omitempty"`
}

func (o *UpdatePaymentApplicationFee) GetAmount() *UpdatePaymentApplicationFeeAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *UpdatePaymentApplicationFee) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// UpdatePaymentRoutingMode - Whether this entity was created in live mode or in test mode.
type UpdatePaymentRoutingMode string

const (
	UpdatePaymentRoutingModeLive UpdatePaymentRoutingMode = "live"
	UpdatePaymentRoutingModeTest UpdatePaymentRoutingMode = "test"
)

func (e UpdatePaymentRoutingMode) ToPointer() *UpdatePaymentRoutingMode {
	return &e
}
func (e *UpdatePaymentRoutingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "live":
		fallthrough
	case "test":
		*e = UpdatePaymentRoutingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentRoutingMode: %v", v)
	}
}

// UpdatePaymentRoutingAmount - The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
type UpdatePaymentRoutingAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentRoutingAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentRoutingAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentRoutingType - The type of destination. Currently only the destination type `organization` is supported.
type UpdatePaymentRoutingType string

const (
	UpdatePaymentRoutingTypeOrganization UpdatePaymentRoutingType = "organization"
)

func (e UpdatePaymentRoutingType) ToPointer() *UpdatePaymentRoutingType {
	return &e
}
func (e *UpdatePaymentRoutingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organization":
		*e = UpdatePaymentRoutingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentRoutingType: %v", v)
	}
}

// UpdatePaymentDestination - The destination of this portion of the payment.
type UpdatePaymentDestination struct {
	// The type of destination. Currently only the destination type `organization` is supported.
	Type UpdatePaymentRoutingType `json:"type"`
	// Required for destination type `organization`. The ID of the connected organization the funds should be
	// routed to.
	OrganizationID string `json:"organizationId"`
}

func (o *UpdatePaymentDestination) GetType() UpdatePaymentRoutingType {
	if o == nil {
		return UpdatePaymentRoutingType("")
	}
	return o.Type
}

func (o *UpdatePaymentDestination) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

// UpdatePaymentRoutingSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type UpdatePaymentRoutingSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentRoutingSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentRoutingSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentPayment - The API resource URL of the [payment](get-payment) that belong to this route.
type UpdatePaymentPayment struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentPayment) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentPayment) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentRoutingLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type UpdatePaymentRoutingLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self UpdatePaymentRoutingSelf `json:"self"`
	// The API resource URL of the [payment](get-payment) that belong to this route.
	Payment UpdatePaymentPayment `json:"payment"`
}

func (o *UpdatePaymentRoutingLinks) GetSelf() UpdatePaymentRoutingSelf {
	if o == nil {
		return UpdatePaymentRoutingSelf{}
	}
	return o.Self
}

func (o *UpdatePaymentRoutingLinks) GetPayment() UpdatePaymentPayment {
	if o == nil {
		return UpdatePaymentPayment{}
	}
	return o.Payment
}

type UpdatePaymentRouting struct {
	// Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this route. Mollie will always refer to the route by this ID.
	// Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode UpdatePaymentRoutingMode `json:"mode"`
	// The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
	Amount UpdatePaymentRoutingAmount `json:"amount"`
	// The destination of this portion of the payment.
	Destination UpdatePaymentDestination `json:"destination"`
	// The date and time when the route was created. The date is given in ISO 8601 format.
	CreatedAt string `json:"createdAt"`
	// Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
	// date must be given in `YYYY-MM-DD` format.
	//
	// If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
	ReleaseDate *string `json:"releaseDate,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links UpdatePaymentRoutingLinks `json:"_links"`
}

func (o *UpdatePaymentRouting) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *UpdatePaymentRouting) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdatePaymentRouting) GetMode() UpdatePaymentRoutingMode {
	if o == nil {
		return UpdatePaymentRoutingMode("")
	}
	return o.Mode
}

func (o *UpdatePaymentRouting) GetAmount() UpdatePaymentRoutingAmount {
	if o == nil {
		return UpdatePaymentRoutingAmount{}
	}
	return o.Amount
}

func (o *UpdatePaymentRouting) GetDestination() UpdatePaymentDestination {
	if o == nil {
		return UpdatePaymentDestination{}
	}
	return o.Destination
}

func (o *UpdatePaymentRouting) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *UpdatePaymentRouting) GetReleaseDate() *string {
	if o == nil {
		return nil
	}
	return o.ReleaseDate
}

func (o *UpdatePaymentRouting) GetLinks() UpdatePaymentRoutingLinks {
	if o == nil {
		return UpdatePaymentRoutingLinks{}
	}
	return o.Links
}

// UpdatePaymentSequenceType - **Only relevant for recurring payments.**
//
// Indicate which part of a recurring sequence this payment is for.
//
// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
// on their account in the future.
//
// If set to `recurring`, the customer's card is charged automatically.
//
// Defaults to `oneoff`, which is a regular non-recurring payment.
//
// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
// are set up correctly for recurring payments.
type UpdatePaymentSequenceType string

const (
	UpdatePaymentSequenceTypeOneoff    UpdatePaymentSequenceType = "oneoff"
	UpdatePaymentSequenceTypeFirst     UpdatePaymentSequenceType = "first"
	UpdatePaymentSequenceTypeRecurring UpdatePaymentSequenceType = "recurring"
)

func (e UpdatePaymentSequenceType) ToPointer() *UpdatePaymentSequenceType {
	return &e
}
func (e *UpdatePaymentSequenceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oneoff":
		fallthrough
	case "first":
		fallthrough
	case "recurring":
		*e = UpdatePaymentSequenceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentSequenceType: %v", v)
	}
}

// UpdatePaymentStatusEnum - The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
// statuses occur at what point.
type UpdatePaymentStatusEnum string

const (
	UpdatePaymentStatusEnumOpen       UpdatePaymentStatusEnum = "open"
	UpdatePaymentStatusEnumPending    UpdatePaymentStatusEnum = "pending"
	UpdatePaymentStatusEnumAuthorized UpdatePaymentStatusEnum = "authorized"
	UpdatePaymentStatusEnumPaid       UpdatePaymentStatusEnum = "paid"
	UpdatePaymentStatusEnumCanceled   UpdatePaymentStatusEnum = "canceled"
	UpdatePaymentStatusEnumExpired    UpdatePaymentStatusEnum = "expired"
	UpdatePaymentStatusEnumFailed     UpdatePaymentStatusEnum = "failed"
)

func (e UpdatePaymentStatusEnum) ToPointer() *UpdatePaymentStatusEnum {
	return &e
}
func (e *UpdatePaymentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "pending":
		fallthrough
	case "authorized":
		fallthrough
	case "paid":
		fallthrough
	case "canceled":
		fallthrough
	case "expired":
		fallthrough
	case "failed":
		*e = UpdatePaymentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentStatusEnum: %v", v)
	}
}

// UpdatePaymentCode - A machine-readable code that indicates the reason for the payment's status.
type UpdatePaymentCode string

const (
	UpdatePaymentCodeApprovedOrCompletedSuccessfully             UpdatePaymentCode = "approved_or_completed_successfully"
	UpdatePaymentCodeReferToCardIssuer                           UpdatePaymentCode = "refer_to_card_issuer"
	UpdatePaymentCodeInvalidMerchant                             UpdatePaymentCode = "invalid_merchant"
	UpdatePaymentCodeCaptureCard                                 UpdatePaymentCode = "capture_card"
	UpdatePaymentCodeDoNotHonor                                  UpdatePaymentCode = "do_not_honor"
	UpdatePaymentCodeError                                       UpdatePaymentCode = "error"
	UpdatePaymentCodePartialApproval                             UpdatePaymentCode = "partial_approval"
	UpdatePaymentCodeInvalidTransaction                          UpdatePaymentCode = "invalid_transaction"
	UpdatePaymentCodeInvalidAmount                               UpdatePaymentCode = "invalid_amount"
	UpdatePaymentCodeInvalidIssuer                               UpdatePaymentCode = "invalid_issuer"
	UpdatePaymentCodeLostCard                                    UpdatePaymentCode = "lost_card"
	UpdatePaymentCodeStolenCard                                  UpdatePaymentCode = "stolen_card"
	UpdatePaymentCodeInsufficientFunds                           UpdatePaymentCode = "insufficient_funds"
	UpdatePaymentCodeExpiredCard                                 UpdatePaymentCode = "expired_card"
	UpdatePaymentCodeInvalidPin                                  UpdatePaymentCode = "invalid_pin"
	UpdatePaymentCodeTransactionNotPermittedToCardholder         UpdatePaymentCode = "transaction_not_permitted_to_cardholder"
	UpdatePaymentCodeTransactionNotAllowedAtTerminal             UpdatePaymentCode = "transaction_not_allowed_at_terminal"
	UpdatePaymentCodeExceedsWithdrawalAmountLimit                UpdatePaymentCode = "exceeds_withdrawal_amount_limit"
	UpdatePaymentCodeRestrictedCard                              UpdatePaymentCode = "restricted_card"
	UpdatePaymentCodeSecurityViolation                           UpdatePaymentCode = "security_violation"
	UpdatePaymentCodeExceedsWithdrawalCountLimit                 UpdatePaymentCode = "exceeds_withdrawal_count_limit"
	UpdatePaymentCodeAllowableNumberOfPinTriesExceeded           UpdatePaymentCode = "allowable_number_of_pin_tries_exceeded"
	UpdatePaymentCodeNoReasonToDecline                           UpdatePaymentCode = "no_reason_to_decline"
	UpdatePaymentCodeCannotVerifyPin                             UpdatePaymentCode = "cannot_verify_pin"
	UpdatePaymentCodeIssuerUnavailable                           UpdatePaymentCode = "issuer_unavailable"
	UpdatePaymentCodeUnableToRouteTransaction                    UpdatePaymentCode = "unable_to_route_transaction"
	UpdatePaymentCodeDuplicateTransaction                        UpdatePaymentCode = "duplicate_transaction"
	UpdatePaymentCodeSystemMalfunction                           UpdatePaymentCode = "system_malfunction"
	UpdatePaymentCodeHonorWithID                                 UpdatePaymentCode = "honor_with_id"
	UpdatePaymentCodeInvalidCardNumber                           UpdatePaymentCode = "invalid_card_number"
	UpdatePaymentCodeFormatError                                 UpdatePaymentCode = "format_error"
	UpdatePaymentCodeContactCardIssuer                           UpdatePaymentCode = "contact_card_issuer"
	UpdatePaymentCodePinNotChanged                               UpdatePaymentCode = "pin_not_changed"
	UpdatePaymentCodeInvalidNonexistentToAccountSpecified        UpdatePaymentCode = "invalid_nonexistent_to_account_specified"
	UpdatePaymentCodeInvalidNonexistentFromAccountSpecified      UpdatePaymentCode = "invalid_nonexistent_from_account_specified"
	UpdatePaymentCodeInvalidNonexistentAccountSpecified          UpdatePaymentCode = "invalid_nonexistent_account_specified"
	UpdatePaymentCodeLifecycleRelated                            UpdatePaymentCode = "lifecycle_related"
	UpdatePaymentCodeDomesticDebitTransactionNotAllowed          UpdatePaymentCode = "domestic_debit_transaction_not_allowed"
	UpdatePaymentCodePolicyRelated                               UpdatePaymentCode = "policy_related"
	UpdatePaymentCodeFraudSecurityRelated                        UpdatePaymentCode = "fraud_security_related"
	UpdatePaymentCodeInvalidAuthorizationLifeCycle               UpdatePaymentCode = "invalid_authorization_life_cycle"
	UpdatePaymentCodePurchaseAmountOnlyNoCashBackAllowed         UpdatePaymentCode = "purchase_amount_only_no_cash_back_allowed"
	UpdatePaymentCodeCryptographicFailure                        UpdatePaymentCode = "cryptographic_failure"
	UpdatePaymentCodeUnacceptablePin                             UpdatePaymentCode = "unacceptable_pin"
	UpdatePaymentCodeReferToCardIssuerSpecialCondition           UpdatePaymentCode = "refer_to_card_issuer_special_condition"
	UpdatePaymentCodePickUpCardSpecialCondition                  UpdatePaymentCode = "pick_up_card_special_condition"
	UpdatePaymentCodeVipApproval                                 UpdatePaymentCode = "vip_approval"
	UpdatePaymentCodeInvalidAccountNumber                        UpdatePaymentCode = "invalid_account_number"
	UpdatePaymentCodeReEnterTransaction                          UpdatePaymentCode = "re_enter_transaction"
	UpdatePaymentCodeNoActionTaken                               UpdatePaymentCode = "no_action_taken"
	UpdatePaymentCodeUnableToLocateRecord                        UpdatePaymentCode = "unable_to_locate_record"
	UpdatePaymentCodeFileTemporarilyUnavailable                  UpdatePaymentCode = "file_temporarily_unavailable"
	UpdatePaymentCodeNoCreditAccount                             UpdatePaymentCode = "no_credit_account"
	UpdatePaymentCodeClosedAccount                               UpdatePaymentCode = "closed_account"
	UpdatePaymentCodeNoCheckingAccount                           UpdatePaymentCode = "no_checking_account"
	UpdatePaymentCodeNoSavingsAccount                            UpdatePaymentCode = "no_savings_account"
	UpdatePaymentCodeSuspectedFraud                              UpdatePaymentCode = "suspected_fraud"
	UpdatePaymentCodeTransactionDoesNotFulfillAmlRequirement     UpdatePaymentCode = "transaction_does_not_fulfill_aml_requirement"
	UpdatePaymentCodePinDataRequired                             UpdatePaymentCode = "pin_data_required"
	UpdatePaymentCodeUnableToLocatePreviousMessage               UpdatePaymentCode = "unable_to_locate_previous_message"
	UpdatePaymentCodePreviousMessageLocatedInconsistentData      UpdatePaymentCode = "previous_message_located_inconsistent_data"
	UpdatePaymentCodeBlockedFirstUsed                            UpdatePaymentCode = "blocked_first_used"
	UpdatePaymentCodeTransactionReversed                         UpdatePaymentCode = "transaction_reversed"
	UpdatePaymentCodeCreditIssuerUnavailable                     UpdatePaymentCode = "credit_issuer_unavailable"
	UpdatePaymentCodePinCryptographicErrorFound                  UpdatePaymentCode = "pin_cryptographic_error_found"
	UpdatePaymentCodeNegativeOnlineCamResult                     UpdatePaymentCode = "negative_online_cam_result"
	UpdatePaymentCodeViolationOfLaw                              UpdatePaymentCode = "violation_of_law"
	UpdatePaymentCodeForceStip                                   UpdatePaymentCode = "force_stip"
	UpdatePaymentCodeCashServiceNotAvailable                     UpdatePaymentCode = "cash_service_not_available"
	UpdatePaymentCodeCashbackRequestExceedsIssuerLimit           UpdatePaymentCode = "cashback_request_exceeds_issuer_limit"
	UpdatePaymentCodeDeclineForCvv2Failure                       UpdatePaymentCode = "decline_for_cvv2_failure"
	UpdatePaymentCodeTransactionAmountExceedsPreAuthorizedAmount UpdatePaymentCode = "transaction_amount_exceeds_pre_authorized_amount"
	UpdatePaymentCodeInvalidBillerInformation                    UpdatePaymentCode = "invalid_biller_information"
	UpdatePaymentCodePinChangeUnblockRequestDeclined             UpdatePaymentCode = "pin_change_unblock_request_declined"
	UpdatePaymentCodeUnsafePin                                   UpdatePaymentCode = "unsafe_pin"
	UpdatePaymentCodeCardAuthenticationFailed                    UpdatePaymentCode = "card_authentication_failed"
	UpdatePaymentCodeStopPaymentOrder                            UpdatePaymentCode = "stop_payment_order"
	UpdatePaymentCodeRevocationOfAuthorization                   UpdatePaymentCode = "revocation_of_authorization"
	UpdatePaymentCodeRevocationOfAllAuthorizations               UpdatePaymentCode = "revocation_of_all_authorizations"
	UpdatePaymentCodeForwardToIssuerXa                           UpdatePaymentCode = "forward_to_issuer_xa"
	UpdatePaymentCodeForwardToIssuerXd                           UpdatePaymentCode = "forward_to_issuer_xd"
	UpdatePaymentCodeUnableToGoOnline                            UpdatePaymentCode = "unable_to_go_online"
	UpdatePaymentCodeAdditionalCustomerAuthenticationRequired    UpdatePaymentCode = "additional_customer_authentication_required"
	UpdatePaymentCodeMerchantIDNotFound                          UpdatePaymentCode = "merchant_id_not_found"
	UpdatePaymentCodeMerchantAccountClosed                       UpdatePaymentCode = "merchant_account_closed"
	UpdatePaymentCodeTerminalIDNotFound                          UpdatePaymentCode = "terminal_id_not_found"
	UpdatePaymentCodeTerminalClosed                              UpdatePaymentCode = "terminal_closed"
	UpdatePaymentCodeInvalidCategoryCode                         UpdatePaymentCode = "invalid_category_code"
	UpdatePaymentCodeInvalidCurrency                             UpdatePaymentCode = "invalid_currency"
	UpdatePaymentCodeMissingCvv2Cvc2                             UpdatePaymentCode = "missing_cvv2_cvc2"
	UpdatePaymentCodeCvv2NotAllowed                              UpdatePaymentCode = "cvv2_not_allowed"
	UpdatePaymentCodeMerchantNotRegisteredVbv                    UpdatePaymentCode = "merchant_not_registered_vbv"
	UpdatePaymentCodeMerchantNotRegisteredForAmex                UpdatePaymentCode = "merchant_not_registered_for_amex"
	UpdatePaymentCodeTransactionNotPermittedAtTerminal           UpdatePaymentCode = "transaction_not_permitted_at_terminal"
	UpdatePaymentCodeAgreementTerminalNotRelated                 UpdatePaymentCode = "agreement_terminal_not_related"
	UpdatePaymentCodeInvalidProcessorID                          UpdatePaymentCode = "invalid_processor_id"
	UpdatePaymentCodeInvalidMerchantData                         UpdatePaymentCode = "invalid_merchant_data"
	UpdatePaymentCodeSubMerchantAccountClosed                    UpdatePaymentCode = "sub_merchant_account_closed"
	UpdatePaymentCodeTerminalBusy                                UpdatePaymentCode = "terminal_busy"
	UpdatePaymentCodeTerminalUnreachable                         UpdatePaymentCode = "terminal_unreachable"
	UpdatePaymentCodeServiceFailed                               UpdatePaymentCode = "service_failed"
	UpdatePaymentCodeInvalidOperation                            UpdatePaymentCode = "invalid_operation"
	UpdatePaymentCodeAuthorizationError                          UpdatePaymentCode = "authorization_error"
	UpdatePaymentCodeLoginFailedWithoutReason                    UpdatePaymentCode = "login_failed_without_reason"
	UpdatePaymentCodeInvalidRetailer                             UpdatePaymentCode = "invalid_retailer"
	UpdatePaymentCodeCardDoesNotExist                            UpdatePaymentCode = "card_does_not_exist"
	UpdatePaymentCodeCardIsBlocked                               UpdatePaymentCode = "card_is_blocked"
	UpdatePaymentCodeInvalidCardID                               UpdatePaymentCode = "invalid_card_id"
	UpdatePaymentCodeCardIsTransferred                           UpdatePaymentCode = "card_is_transferred"
	UpdatePaymentCodeCardIsNotActive                             UpdatePaymentCode = "card_is_not_active"
	UpdatePaymentCodeIncorrectPurchaseValue                      UpdatePaymentCode = "incorrect_purchase_value"
	UpdatePaymentCodeCardNotAvailable                            UpdatePaymentCode = "card_not_available"
	UpdatePaymentCodeWrongCurrency                               UpdatePaymentCode = "wrong_currency"
	UpdatePaymentCodeLoginFailedUnknownUser                      UpdatePaymentCode = "login_failed_unknown_user"
	UpdatePaymentCodeLoginFailedInvalidPassword                  UpdatePaymentCode = "login_failed_invalid_password"
	UpdatePaymentCodeInvalidEanCode                              UpdatePaymentCode = "invalid_ean_code"
)

func (e UpdatePaymentCode) ToPointer() *UpdatePaymentCode {
	return &e
}
func (e *UpdatePaymentCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved_or_completed_successfully":
		fallthrough
	case "refer_to_card_issuer":
		fallthrough
	case "invalid_merchant":
		fallthrough
	case "capture_card":
		fallthrough
	case "do_not_honor":
		fallthrough
	case "error":
		fallthrough
	case "partial_approval":
		fallthrough
	case "invalid_transaction":
		fallthrough
	case "invalid_amount":
		fallthrough
	case "invalid_issuer":
		fallthrough
	case "lost_card":
		fallthrough
	case "stolen_card":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "expired_card":
		fallthrough
	case "invalid_pin":
		fallthrough
	case "transaction_not_permitted_to_cardholder":
		fallthrough
	case "transaction_not_allowed_at_terminal":
		fallthrough
	case "exceeds_withdrawal_amount_limit":
		fallthrough
	case "restricted_card":
		fallthrough
	case "security_violation":
		fallthrough
	case "exceeds_withdrawal_count_limit":
		fallthrough
	case "allowable_number_of_pin_tries_exceeded":
		fallthrough
	case "no_reason_to_decline":
		fallthrough
	case "cannot_verify_pin":
		fallthrough
	case "issuer_unavailable":
		fallthrough
	case "unable_to_route_transaction":
		fallthrough
	case "duplicate_transaction":
		fallthrough
	case "system_malfunction":
		fallthrough
	case "honor_with_id":
		fallthrough
	case "invalid_card_number":
		fallthrough
	case "format_error":
		fallthrough
	case "contact_card_issuer":
		fallthrough
	case "pin_not_changed":
		fallthrough
	case "invalid_nonexistent_to_account_specified":
		fallthrough
	case "invalid_nonexistent_from_account_specified":
		fallthrough
	case "invalid_nonexistent_account_specified":
		fallthrough
	case "lifecycle_related":
		fallthrough
	case "domestic_debit_transaction_not_allowed":
		fallthrough
	case "policy_related":
		fallthrough
	case "fraud_security_related":
		fallthrough
	case "invalid_authorization_life_cycle":
		fallthrough
	case "purchase_amount_only_no_cash_back_allowed":
		fallthrough
	case "cryptographic_failure":
		fallthrough
	case "unacceptable_pin":
		fallthrough
	case "refer_to_card_issuer_special_condition":
		fallthrough
	case "pick_up_card_special_condition":
		fallthrough
	case "vip_approval":
		fallthrough
	case "invalid_account_number":
		fallthrough
	case "re_enter_transaction":
		fallthrough
	case "no_action_taken":
		fallthrough
	case "unable_to_locate_record":
		fallthrough
	case "file_temporarily_unavailable":
		fallthrough
	case "no_credit_account":
		fallthrough
	case "closed_account":
		fallthrough
	case "no_checking_account":
		fallthrough
	case "no_savings_account":
		fallthrough
	case "suspected_fraud":
		fallthrough
	case "transaction_does_not_fulfill_aml_requirement":
		fallthrough
	case "pin_data_required":
		fallthrough
	case "unable_to_locate_previous_message":
		fallthrough
	case "previous_message_located_inconsistent_data":
		fallthrough
	case "blocked_first_used":
		fallthrough
	case "transaction_reversed":
		fallthrough
	case "credit_issuer_unavailable":
		fallthrough
	case "pin_cryptographic_error_found":
		fallthrough
	case "negative_online_cam_result":
		fallthrough
	case "violation_of_law":
		fallthrough
	case "force_stip":
		fallthrough
	case "cash_service_not_available":
		fallthrough
	case "cashback_request_exceeds_issuer_limit":
		fallthrough
	case "decline_for_cvv2_failure":
		fallthrough
	case "transaction_amount_exceeds_pre_authorized_amount":
		fallthrough
	case "invalid_biller_information":
		fallthrough
	case "pin_change_unblock_request_declined":
		fallthrough
	case "unsafe_pin":
		fallthrough
	case "card_authentication_failed":
		fallthrough
	case "stop_payment_order":
		fallthrough
	case "revocation_of_authorization":
		fallthrough
	case "revocation_of_all_authorizations":
		fallthrough
	case "forward_to_issuer_xa":
		fallthrough
	case "forward_to_issuer_xd":
		fallthrough
	case "unable_to_go_online":
		fallthrough
	case "additional_customer_authentication_required":
		fallthrough
	case "merchant_id_not_found":
		fallthrough
	case "merchant_account_closed":
		fallthrough
	case "terminal_id_not_found":
		fallthrough
	case "terminal_closed":
		fallthrough
	case "invalid_category_code":
		fallthrough
	case "invalid_currency":
		fallthrough
	case "missing_cvv2_cvc2":
		fallthrough
	case "cvv2_not_allowed":
		fallthrough
	case "merchant_not_registered_vbv":
		fallthrough
	case "merchant_not_registered_for_amex":
		fallthrough
	case "transaction_not_permitted_at_terminal":
		fallthrough
	case "agreement_terminal_not_related":
		fallthrough
	case "invalid_processor_id":
		fallthrough
	case "invalid_merchant_data":
		fallthrough
	case "sub_merchant_account_closed":
		fallthrough
	case "terminal_busy":
		fallthrough
	case "terminal_unreachable":
		fallthrough
	case "service_failed":
		fallthrough
	case "invalid_operation":
		fallthrough
	case "authorization_error":
		fallthrough
	case "login_failed_without_reason":
		fallthrough
	case "invalid_retailer":
		fallthrough
	case "card_does_not_exist":
		fallthrough
	case "card_is_blocked":
		fallthrough
	case "invalid_card_id":
		fallthrough
	case "card_is_transferred":
		fallthrough
	case "card_is_not_active":
		fallthrough
	case "incorrect_purchase_value":
		fallthrough
	case "card_not_available":
		fallthrough
	case "wrong_currency":
		fallthrough
	case "login_failed_unknown_user":
		fallthrough
	case "login_failed_invalid_password":
		fallthrough
	case "invalid_ean_code":
		*e = UpdatePaymentCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentCode: %v", v)
	}
}

// UpdatePaymentStatusReason - This object offers details about the status of a payment. Currently it is only available for point-of-sale
// payments.
//
// You can find more information about the possible values of this object on
// [this page](status-reasons).**
type UpdatePaymentStatusReason struct {
	Code UpdatePaymentCode `json:"code"`
	// A description of the status reason, localized according to the payment `locale`.
	Message string `json:"message"`
}

func (o *UpdatePaymentStatusReason) GetCode() UpdatePaymentCode {
	if o == nil {
		return UpdatePaymentCode("")
	}
	return o.Code
}

func (o *UpdatePaymentStatusReason) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

// UpdatePaymentCardAudition - The card's target audience, if known.
type UpdatePaymentCardAudition string

const (
	UpdatePaymentCardAuditionConsumer UpdatePaymentCardAudition = "consumer"
	UpdatePaymentCardAuditionBusiness UpdatePaymentCardAudition = "business"
)

func (e UpdatePaymentCardAudition) ToPointer() *UpdatePaymentCardAudition {
	return &e
}
func (e *UpdatePaymentCardAudition) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "business":
		*e = UpdatePaymentCardAudition(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentCardAudition: %v", v)
	}
}

// UpdatePaymentCardLabel - The card's label, if known.
type UpdatePaymentCardLabel string

const (
	UpdatePaymentCardLabelAmericanExpress UpdatePaymentCardLabel = "American Express"
	UpdatePaymentCardLabelCartaSi         UpdatePaymentCardLabel = "Carta Si"
	UpdatePaymentCardLabelCarteBleue      UpdatePaymentCardLabel = "Carte Bleue"
	UpdatePaymentCardLabelDankort         UpdatePaymentCardLabel = "Dankort"
	UpdatePaymentCardLabelDinersClub      UpdatePaymentCardLabel = "Diners Club"
	UpdatePaymentCardLabelDiscover        UpdatePaymentCardLabel = "Discover"
	UpdatePaymentCardLabelJcb             UpdatePaymentCardLabel = "JCB"
	UpdatePaymentCardLabelLaser           UpdatePaymentCardLabel = "Laser"
	UpdatePaymentCardLabelMaestro         UpdatePaymentCardLabel = "Maestro"
	UpdatePaymentCardLabelMastercard      UpdatePaymentCardLabel = "Mastercard"
	UpdatePaymentCardLabelUnionpay        UpdatePaymentCardLabel = "Unionpay"
	UpdatePaymentCardLabelVisa            UpdatePaymentCardLabel = "Visa"
	UpdatePaymentCardLabelVpay            UpdatePaymentCardLabel = "Vpay"
)

func (e UpdatePaymentCardLabel) ToPointer() *UpdatePaymentCardLabel {
	return &e
}
func (e *UpdatePaymentCardLabel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "American Express":
		fallthrough
	case "Carta Si":
		fallthrough
	case "Carte Bleue":
		fallthrough
	case "Dankort":
		fallthrough
	case "Diners Club":
		fallthrough
	case "Discover":
		fallthrough
	case "JCB":
		fallthrough
	case "Laser":
		fallthrough
	case "Maestro":
		fallthrough
	case "Mastercard":
		fallthrough
	case "Unionpay":
		fallthrough
	case "Visa":
		fallthrough
	case "Vpay":
		*e = UpdatePaymentCardLabel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentCardLabel: %v", v)
	}
}

// UpdatePaymentCardFunding - The card type.
type UpdatePaymentCardFunding string

const (
	UpdatePaymentCardFundingDebit         UpdatePaymentCardFunding = "debit"
	UpdatePaymentCardFundingCredit        UpdatePaymentCardFunding = "credit"
	UpdatePaymentCardFundingPrepaid       UpdatePaymentCardFunding = "prepaid"
	UpdatePaymentCardFundingDeferredDebit UpdatePaymentCardFunding = "deferred-debit"
)

func (e UpdatePaymentCardFunding) ToPointer() *UpdatePaymentCardFunding {
	return &e
}
func (e *UpdatePaymentCardFunding) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debit":
		fallthrough
	case "credit":
		fallthrough
	case "prepaid":
		fallthrough
	case "deferred-debit":
		*e = UpdatePaymentCardFunding(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentCardFunding: %v", v)
	}
}

// UpdatePaymentCardSecurity - The level of security applied during card processing.
type UpdatePaymentCardSecurity string

const (
	UpdatePaymentCardSecurityNormal       UpdatePaymentCardSecurity = "normal"
	UpdatePaymentCardSecurityThreedsecure UpdatePaymentCardSecurity = "3dsecure"
)

func (e UpdatePaymentCardSecurity) ToPointer() *UpdatePaymentCardSecurity {
	return &e
}
func (e *UpdatePaymentCardSecurity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "normal":
		fallthrough
	case "3dsecure":
		*e = UpdatePaymentCardSecurity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentCardSecurity: %v", v)
	}
}

// UpdatePaymentFeeRegion - The applicable card fee region.
type UpdatePaymentFeeRegion string

const (
	UpdatePaymentFeeRegionAmericanExpress  UpdatePaymentFeeRegion = "american-express"
	UpdatePaymentFeeRegionAmexIntraEea     UpdatePaymentFeeRegion = "amex-intra-eea"
	UpdatePaymentFeeRegionCarteBancaire    UpdatePaymentFeeRegion = "carte-bancaire"
	UpdatePaymentFeeRegionIntraEu          UpdatePaymentFeeRegion = "intra-eu"
	UpdatePaymentFeeRegionIntraEuCorporate UpdatePaymentFeeRegion = "intra-eu-corporate"
	UpdatePaymentFeeRegionDomestic         UpdatePaymentFeeRegion = "domestic"
	UpdatePaymentFeeRegionMaestro          UpdatePaymentFeeRegion = "maestro"
	UpdatePaymentFeeRegionOther            UpdatePaymentFeeRegion = "other"
	UpdatePaymentFeeRegionInter            UpdatePaymentFeeRegion = "inter"
	UpdatePaymentFeeRegionIntraEea         UpdatePaymentFeeRegion = "intra_eea"
)

func (e UpdatePaymentFeeRegion) ToPointer() *UpdatePaymentFeeRegion {
	return &e
}
func (e *UpdatePaymentFeeRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "american-express":
		fallthrough
	case "amex-intra-eea":
		fallthrough
	case "carte-bancaire":
		fallthrough
	case "intra-eu":
		fallthrough
	case "intra-eu-corporate":
		fallthrough
	case "domestic":
		fallthrough
	case "maestro":
		fallthrough
	case "other":
		fallthrough
	case "inter":
		fallthrough
	case "intra_eea":
		*e = UpdatePaymentFeeRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentFeeRegion: %v", v)
	}
}

// UpdatePaymentFailureReason - A failure code to help understand why the payment failed.
type UpdatePaymentFailureReason string

const (
	UpdatePaymentFailureReasonAuthenticationAbandoned      UpdatePaymentFailureReason = "authentication_abandoned"
	UpdatePaymentFailureReasonAuthenticationFailed         UpdatePaymentFailureReason = "authentication_failed"
	UpdatePaymentFailureReasonAuthenticationRequired       UpdatePaymentFailureReason = "authentication_required"
	UpdatePaymentFailureReasonAuthenticationUnavailableAcs UpdatePaymentFailureReason = "authentication_unavailable_acs"
	UpdatePaymentFailureReasonCardDeclined                 UpdatePaymentFailureReason = "card_declined"
	UpdatePaymentFailureReasonCardExpired                  UpdatePaymentFailureReason = "card_expired"
	UpdatePaymentFailureReasonInactiveCard                 UpdatePaymentFailureReason = "inactive_card"
	UpdatePaymentFailureReasonInsufficientFunds            UpdatePaymentFailureReason = "insufficient_funds"
	UpdatePaymentFailureReasonInvalidCvv                   UpdatePaymentFailureReason = "invalid_cvv"
	UpdatePaymentFailureReasonInvalidCardHolderName        UpdatePaymentFailureReason = "invalid_card_holder_name"
	UpdatePaymentFailureReasonInvalidCardNumber            UpdatePaymentFailureReason = "invalid_card_number"
	UpdatePaymentFailureReasonInvalidCardType              UpdatePaymentFailureReason = "invalid_card_type"
	UpdatePaymentFailureReasonPossibleFraud                UpdatePaymentFailureReason = "possible_fraud"
	UpdatePaymentFailureReasonRefusedByIssuer              UpdatePaymentFailureReason = "refused_by_issuer"
	UpdatePaymentFailureReasonUnknownReason                UpdatePaymentFailureReason = "unknown_reason"
)

func (e UpdatePaymentFailureReason) ToPointer() *UpdatePaymentFailureReason {
	return &e
}
func (e *UpdatePaymentFailureReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "authentication_abandoned":
		fallthrough
	case "authentication_failed":
		fallthrough
	case "authentication_required":
		fallthrough
	case "authentication_unavailable_acs":
		fallthrough
	case "card_declined":
		fallthrough
	case "card_expired":
		fallthrough
	case "inactive_card":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "invalid_cvv":
		fallthrough
	case "invalid_card_holder_name":
		fallthrough
	case "invalid_card_number":
		fallthrough
	case "invalid_card_type":
		fallthrough
	case "possible_fraud":
		fallthrough
	case "refused_by_issuer":
		fallthrough
	case "unknown_reason":
		*e = UpdatePaymentFailureReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentFailureReason: %v", v)
	}
}

// UpdatePaymentWallet - The wallet used when creating the payment.
type UpdatePaymentWallet string

const (
	UpdatePaymentWalletApplepay UpdatePaymentWallet = "applepay"
)

func (e UpdatePaymentWallet) ToPointer() *UpdatePaymentWallet {
	return &e
}
func (e *UpdatePaymentWallet) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "applepay":
		*e = UpdatePaymentWallet(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentWallet: %v", v)
	}
}

// UpdatePaymentSellerProtection - Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
// payments, and if the information is made available by PayPal.
type UpdatePaymentSellerProtection string

const (
	UpdatePaymentSellerProtectionEligible                          UpdatePaymentSellerProtection = "Eligible"
	UpdatePaymentSellerProtectionIneligible                        UpdatePaymentSellerProtection = "Ineligible"
	UpdatePaymentSellerProtectionPartiallyEligibleInrOnly          UpdatePaymentSellerProtection = "Partially Eligible - INR Only"
	UpdatePaymentSellerProtectionPartiallyEligibleUnauthOnly       UpdatePaymentSellerProtection = "Partially Eligible - Unauth Only"
	UpdatePaymentSellerProtectionPartiallyEligible                 UpdatePaymentSellerProtection = "Partially Eligible"
	UpdatePaymentSellerProtectionNone                              UpdatePaymentSellerProtection = "None"
	UpdatePaymentSellerProtectionActive                            UpdatePaymentSellerProtection = "Active"
	UpdatePaymentSellerProtectionFraudControlUnauthPremiumEligible UpdatePaymentSellerProtection = "Fraud Control - Unauth Premium Eligible"
)

func (e UpdatePaymentSellerProtection) ToPointer() *UpdatePaymentSellerProtection {
	return &e
}
func (e *UpdatePaymentSellerProtection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Eligible":
		fallthrough
	case "Ineligible":
		fallthrough
	case "Partially Eligible - INR Only":
		fallthrough
	case "Partially Eligible - Unauth Only":
		fallthrough
	case "Partially Eligible":
		fallthrough
	case "None":
		fallthrough
	case "Active":
		fallthrough
	case "Fraud Control - Unauth Premium Eligible":
		*e = UpdatePaymentSellerProtection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentSellerProtection: %v", v)
	}
}

// UpdatePaymentPaypalFee - An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
// PayPal will not charge a fee for this transaction.
type UpdatePaymentPaypalFee struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentPaypalFee) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentPaypalFee) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentCardReadMethod - The method by which the card was read by the terminal.
type UpdatePaymentCardReadMethod string

const (
	UpdatePaymentCardReadMethodChip                   UpdatePaymentCardReadMethod = "chip"
	UpdatePaymentCardReadMethodMagneticStripe         UpdatePaymentCardReadMethod = "magnetic-stripe"
	UpdatePaymentCardReadMethodNearFieldCommunication UpdatePaymentCardReadMethod = "near-field-communication"
	UpdatePaymentCardReadMethodContactless            UpdatePaymentCardReadMethod = "contactless"
	UpdatePaymentCardReadMethodMoto                   UpdatePaymentCardReadMethod = "moto"
)

func (e UpdatePaymentCardReadMethod) ToPointer() *UpdatePaymentCardReadMethod {
	return &e
}
func (e *UpdatePaymentCardReadMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "chip":
		fallthrough
	case "magnetic-stripe":
		fallthrough
	case "near-field-communication":
		fallthrough
	case "contactless":
		fallthrough
	case "moto":
		*e = UpdatePaymentCardReadMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentCardReadMethod: %v", v)
	}
}

// UpdatePaymentCardVerificationMethod - The method used to verify the cardholder's identity.
type UpdatePaymentCardVerificationMethod string

const (
	UpdatePaymentCardVerificationMethodNoCvmRequired         UpdatePaymentCardVerificationMethod = "no-cvm-required"
	UpdatePaymentCardVerificationMethodOnlinePin             UpdatePaymentCardVerificationMethod = "online-pin"
	UpdatePaymentCardVerificationMethodOfflinePin            UpdatePaymentCardVerificationMethod = "offline-pin"
	UpdatePaymentCardVerificationMethodConsumerDevice        UpdatePaymentCardVerificationMethod = "consumer-device"
	UpdatePaymentCardVerificationMethodSignature             UpdatePaymentCardVerificationMethod = "signature"
	UpdatePaymentCardVerificationMethodSignatureAndOnlinePin UpdatePaymentCardVerificationMethod = "signature-and-online-pin"
	UpdatePaymentCardVerificationMethodOnlinePinAndSignature UpdatePaymentCardVerificationMethod = "online-pin-and-signature"
	UpdatePaymentCardVerificationMethodNone                  UpdatePaymentCardVerificationMethod = "none"
	UpdatePaymentCardVerificationMethodFailed                UpdatePaymentCardVerificationMethod = "failed"
)

func (e UpdatePaymentCardVerificationMethod) ToPointer() *UpdatePaymentCardVerificationMethod {
	return &e
}
func (e *UpdatePaymentCardVerificationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "no-cvm-required":
		fallthrough
	case "online-pin":
		fallthrough
	case "offline-pin":
		fallthrough
	case "consumer-device":
		fallthrough
	case "signature":
		fallthrough
	case "signature-and-online-pin":
		fallthrough
	case "online-pin-and-signature":
		fallthrough
	case "none":
		fallthrough
	case "failed":
		*e = UpdatePaymentCardVerificationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePaymentCardVerificationMethod: %v", v)
	}
}

// UpdatePaymentReceipt - The Point of sale receipt object.
type UpdatePaymentReceipt struct {
	// A unique code provided by the cardholder’s bank to confirm that the transaction was successfully approved.
	AuthorizationCode *string `json:"authorizationCode,omitempty"`
	// The unique number that identifies a specific payment application on a chip card.
	ApplicationIdentifier *string `json:"applicationIdentifier,omitempty"`
	// The method by which the card was read by the terminal.
	CardReadMethod *UpdatePaymentCardReadMethod `json:"cardReadMethod,omitempty"`
	// The method used to verify the cardholder's identity.
	CardVerificationMethod *UpdatePaymentCardVerificationMethod `json:"cardVerificationMethod,omitempty"`
}

func (o *UpdatePaymentReceipt) GetAuthorizationCode() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizationCode
}

func (o *UpdatePaymentReceipt) GetApplicationIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationIdentifier
}

func (o *UpdatePaymentReceipt) GetCardReadMethod() *UpdatePaymentCardReadMethod {
	if o == nil {
		return nil
	}
	return o.CardReadMethod
}

func (o *UpdatePaymentReceipt) GetCardVerificationMethod() *UpdatePaymentCardVerificationMethod {
	if o == nil {
		return nil
	}
	return o.CardVerificationMethod
}

// UpdatePaymentQrCode - Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
// the QR code details will be available in this object.
//
// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
// Bancontact QR payments can be completed by the customer using the Bancontact app.
type UpdatePaymentQrCode struct {
	// The height of the QR code image in pixels.
	Height *int64 `json:"height,omitempty"`
	// The width of the QR code image in pixels.
	Width *int64 `json:"width,omitempty"`
	// The URL to the QR code image. The image is a PNG file, and can be displayed directly in the browser or
	// downloaded.
	Src *string `json:"src,omitempty"`
}

func (o *UpdatePaymentQrCode) GetHeight() *int64 {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *UpdatePaymentQrCode) GetWidth() *int64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *UpdatePaymentQrCode) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

// UpdatePaymentRemainderAmount - An amount object for the amount that remained after all gift cards or vouchers were applied.
type UpdatePaymentRemainderAmount struct {
	// A three-character ISO 4217 currency code.
	Currency string `json:"currency"`
	// A string containing an exact monetary amount in the given currency.
	Value string `json:"value"`
}

func (o *UpdatePaymentRemainderAmount) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *UpdatePaymentRemainderAmount) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdatePaymentDetails - An object containing payment details collected during the payment process. For example, details may include the
// customer's card or bank details and a payment reference. For the full list of details, please refer to the
// [method-specific parameters](extra-payment-parameters) guide.
type UpdatePaymentDetails struct {
	// The customer's name, if made available by the payment method. For card payments, refer to details.cardHolder.
	ConsumerName *string `json:"consumerName,omitempty"`
	// The customer's account reference.
	//
	// For banking-based payment methods — such as iDEAL — this is normally either an IBAN or a domestic bank account
	// number.
	//
	// For PayPal, the account reference is an email address.
	//
	// For card and Bancontact payments, refer to details.cardNumber.
	ConsumerAccount *string `json:"consumerAccount,omitempty"`
	// The BIC of the customer's bank account, if applicable.
	ConsumerBic *string `json:"consumerBic,omitempty"`
	// For wallet payment methods — such as Apple Pay and PayPal — the shipping address is often already known by the
	// wallet provider. In these cases the shipping address may be available as a payment detail.
	ShippingAddress map[string]any `json:"shippingAddress,omitempty"`
	// For bancontact, it will be the customer's masked card number. For cards, it will be the last 4-digit of the
	// PAN. For Point-of-sale, it will be the the last 4 digits of the customer's masked card number.
	CardNumber *string `json:"cardNumber,omitempty"`
	// The name of the bank that the customer will need to make the bank transfer payment towards.
	BankName *string `json:"bankName,omitempty"`
	// The bank account number the customer will need to make the bank transfer payment towards.
	BankAccount *string `json:"bankAccount,omitempty"`
	// The BIC of the bank the customer will need to make the bank transfer payment towards.
	BankBic *string `json:"bankBic,omitempty"`
	// The Mollie-generated reference the customer needs to use when transfering the amount. Do not apply any
	// formatting here; show it to the customer as-is.
	TransferReference *string `json:"transferReference,omitempty"`
	// A unique fingerprint for a specific card. Can be used to identify returning customers.
	//
	// In the case of Point-of-sale payments, it's a unique identifier assigned to a cardholder's payment account,
	// linking multiple transactions from wallets and physical card to a single account, also across payment methods
	// or when the card is reissued.
	CardFingerprint *string `json:"cardFingerprint,omitempty"`
	// The customer's name as shown on their card.
	CardHolder *string `json:"cardHolder,omitempty"`
	// The card's target audience, if known.
	CardAudition *UpdatePaymentCardAudition `json:"cardAudition,omitempty"`
	// The card's label, if known.
	CardLabel *UpdatePaymentCardLabel `json:"cardLabel,omitempty"`
	// The ISO 3166-1 alpha-2 country code of the country the card was issued in.
	CardCountryCode *string `json:"cardCountryCode,omitempty"`
	// The expiry date (MM/YY) of the card as displayed on the card.
	CardExpiryDate *string `json:"cardExpiryDate,omitempty"`
	// The card type.
	CardFunding *UpdatePaymentCardFunding `json:"cardFunding,omitempty"`
	// The level of security applied during card processing.
	CardSecurity *UpdatePaymentCardSecurity `json:"cardSecurity,omitempty"`
	// The applicable card fee region.
	FeeRegion *UpdatePaymentFeeRegion `json:"feeRegion,omitempty"`
	// The first 6 and last 4 digits of the card number.
	CardMaskedNumber *string `json:"cardMaskedNumber,omitempty"`
	// The outcome of authentication attempted on transactions enforced by 3DS (ie valid only for oneoff and first).
	Card3dsEci *string `json:"card3dsEci,omitempty"`
	// The first 6 digit of the card bank identification number.
	CardBin *string `json:"cardBin,omitempty"`
	// The issuer of the Card.
	CardIssuer *string `json:"cardIssuer,omitempty"`
	// A failure code to help understand why the payment failed.
	FailureReason *UpdatePaymentFailureReason `json:"failureReason,omitempty"`
	// A human-friendly failure message that can be shown to the customer. The message is translated in accordance
	// with the payment's locale setting.
	FailureMessage *string `json:"failureMessage,omitempty"`
	// The wallet used when creating the payment.
	Wallet *UpdatePaymentWallet `json:"wallet,omitempty"`
	// PayPal's reference for the payment.
	PaypalReference *string `json:"paypalReference,omitempty"`
	// ID of the customer's PayPal account.
	PaypalPayerID *string `json:"paypalPayerId,omitempty"`
	// Indicates to what extent the payment is eligible for PayPal's Seller Protection. Only available for PayPal
	// payments, and if the information is made available by PayPal.
	SellerProtection *UpdatePaymentSellerProtection `json:"sellerProtection,omitempty"`
	// An amount object containing the fee PayPal will charge for this transaction. The field may be omitted if
	// PayPal will not charge a fee for this transaction.
	PaypalFee *UpdatePaymentPaypalFee `json:"paypalFee,omitempty"`
	// The paysafecard customer reference either provided via the API or otherwise auto-generated by Mollie.
	CustomerReference *string `json:"customerReference,omitempty"`
	// The ID of the terminal device where the payment took place on.
	TerminalID *string `json:"terminalId,omitempty"`
	// The first 6 digits & last 4 digits of the customer's masked card number.
	MaskedNumber *string `json:"maskedNumber,omitempty"`
	// The Point of sale receipt object.
	Receipt *UpdatePaymentReceipt `json:"receipt,omitempty"`
	// The creditor identifier indicates who is authorized to execute the payment. In this case, it is a
	// reference to Mollie.
	CreditorIdentifier *string `json:"creditorIdentifier,omitempty"`
	// Estimated date the payment is debited from the customer's bank account, in YYYY-MM-DD format.
	DueDate *types.Date `json:"dueDate,omitempty"`
	// Date the payment has been signed by the customer, in YYYY-MM-DD format. Only available if the payment
	// has been signed.
	SignatureDate *types.Date `json:"signatureDate,omitempty"`
	// The official reason why this payment has failed. A detailed description of each reason is available on the
	// website of the European Payments Council.
	BankReasonCode *string `json:"bankReasonCode,omitempty"`
	// A human-friendly description of the failure reason.
	BankReason *string `json:"bankReason,omitempty"`
	// The end-to-end identifier you provided in the batch file.
	EndToEndIdentifier *string `json:"endToEndIdentifier,omitempty"`
	// The mandate reference you provided in the batch file.
	MandateReference *string `json:"mandateReference,omitempty"`
	// The batch reference you provided in the batch file.
	BatchReference *string `json:"batchReference,omitempty"`
	// The file reference you provided in the batch file.
	FileReference *string `json:"fileReference,omitempty"`
	// Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
	// the QR code details will be available in this object.
	//
	// The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
	// Bancontact QR payments can be completed by the customer using the Bancontact app.
	QrCode *UpdatePaymentQrCode `json:"qrCode,omitempty"`
	// For payments with gift cards: the masked gift card number of the first gift card applied to the payment.
	VoucherNumber *string `json:"voucherNumber,omitempty"`
	// An array of detail objects for each gift card that was used on this payment, if any.
	Giftcards []map[string]any `json:"giftcards,omitempty"`
	// For payments with vouchers: the brand name of the first voucher applied.
	Issuer *string `json:"issuer,omitempty"`
	// An array of detail objects for each voucher that was used on this payment, if any.
	Vouchers []map[string]any `json:"vouchers,omitempty"`
	// An amount object for the amount that remained after all gift cards or vouchers were applied.
	RemainderAmount *UpdatePaymentRemainderAmount `json:"remainderAmount,omitempty"`
	// The payment method used to pay the remainder amount, after all gift cards or vouchers were applied.
	RemainderMethod *string `json:"remainderMethod,omitempty"`
	// Optional include. The full payment method details of the remainder payment.
	RemainderDetails map[string]any `json:"remainderDetails,omitempty"`
}

func (u UpdatePaymentDetails) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdatePaymentDetails) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *UpdatePaymentDetails) GetConsumerName() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerName
}

func (o *UpdatePaymentDetails) GetConsumerAccount() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerAccount
}

func (o *UpdatePaymentDetails) GetConsumerBic() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerBic
}

func (o *UpdatePaymentDetails) GetShippingAddress() map[string]any {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *UpdatePaymentDetails) GetCardNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardNumber
}

func (o *UpdatePaymentDetails) GetBankName() *string {
	if o == nil {
		return nil
	}
	return o.BankName
}

func (o *UpdatePaymentDetails) GetBankAccount() *string {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *UpdatePaymentDetails) GetBankBic() *string {
	if o == nil {
		return nil
	}
	return o.BankBic
}

func (o *UpdatePaymentDetails) GetTransferReference() *string {
	if o == nil {
		return nil
	}
	return o.TransferReference
}

func (o *UpdatePaymentDetails) GetCardFingerprint() *string {
	if o == nil {
		return nil
	}
	return o.CardFingerprint
}

func (o *UpdatePaymentDetails) GetCardHolder() *string {
	if o == nil {
		return nil
	}
	return o.CardHolder
}

func (o *UpdatePaymentDetails) GetCardAudition() *UpdatePaymentCardAudition {
	if o == nil {
		return nil
	}
	return o.CardAudition
}

func (o *UpdatePaymentDetails) GetCardLabel() *UpdatePaymentCardLabel {
	if o == nil {
		return nil
	}
	return o.CardLabel
}

func (o *UpdatePaymentDetails) GetCardCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CardCountryCode
}

func (o *UpdatePaymentDetails) GetCardExpiryDate() *string {
	if o == nil {
		return nil
	}
	return o.CardExpiryDate
}

func (o *UpdatePaymentDetails) GetCardFunding() *UpdatePaymentCardFunding {
	if o == nil {
		return nil
	}
	return o.CardFunding
}

func (o *UpdatePaymentDetails) GetCardSecurity() *UpdatePaymentCardSecurity {
	if o == nil {
		return nil
	}
	return o.CardSecurity
}

func (o *UpdatePaymentDetails) GetFeeRegion() *UpdatePaymentFeeRegion {
	if o == nil {
		return nil
	}
	return o.FeeRegion
}

func (o *UpdatePaymentDetails) GetCardMaskedNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardMaskedNumber
}

func (o *UpdatePaymentDetails) GetCard3dsEci() *string {
	if o == nil {
		return nil
	}
	return o.Card3dsEci
}

func (o *UpdatePaymentDetails) GetCardBin() *string {
	if o == nil {
		return nil
	}
	return o.CardBin
}

func (o *UpdatePaymentDetails) GetCardIssuer() *string {
	if o == nil {
		return nil
	}
	return o.CardIssuer
}

func (o *UpdatePaymentDetails) GetFailureReason() *UpdatePaymentFailureReason {
	if o == nil {
		return nil
	}
	return o.FailureReason
}

func (o *UpdatePaymentDetails) GetFailureMessage() *string {
	if o == nil {
		return nil
	}
	return o.FailureMessage
}

func (o *UpdatePaymentDetails) GetWallet() *UpdatePaymentWallet {
	if o == nil {
		return nil
	}
	return o.Wallet
}

func (o *UpdatePaymentDetails) GetPaypalReference() *string {
	if o == nil {
		return nil
	}
	return o.PaypalReference
}

func (o *UpdatePaymentDetails) GetPaypalPayerID() *string {
	if o == nil {
		return nil
	}
	return o.PaypalPayerID
}

func (o *UpdatePaymentDetails) GetSellerProtection() *UpdatePaymentSellerProtection {
	if o == nil {
		return nil
	}
	return o.SellerProtection
}

func (o *UpdatePaymentDetails) GetPaypalFee() *UpdatePaymentPaypalFee {
	if o == nil {
		return nil
	}
	return o.PaypalFee
}

func (o *UpdatePaymentDetails) GetCustomerReference() *string {
	if o == nil {
		return nil
	}
	return o.CustomerReference
}

func (o *UpdatePaymentDetails) GetTerminalID() *string {
	if o == nil {
		return nil
	}
	return o.TerminalID
}

func (o *UpdatePaymentDetails) GetMaskedNumber() *string {
	if o == nil {
		return nil
	}
	return o.MaskedNumber
}

func (o *UpdatePaymentDetails) GetReceipt() *UpdatePaymentReceipt {
	if o == nil {
		return nil
	}
	return o.Receipt
}

func (o *UpdatePaymentDetails) GetCreditorIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.CreditorIdentifier
}

func (o *UpdatePaymentDetails) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *UpdatePaymentDetails) GetSignatureDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.SignatureDate
}

func (o *UpdatePaymentDetails) GetBankReasonCode() *string {
	if o == nil {
		return nil
	}
	return o.BankReasonCode
}

func (o *UpdatePaymentDetails) GetBankReason() *string {
	if o == nil {
		return nil
	}
	return o.BankReason
}

func (o *UpdatePaymentDetails) GetEndToEndIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.EndToEndIdentifier
}

func (o *UpdatePaymentDetails) GetMandateReference() *string {
	if o == nil {
		return nil
	}
	return o.MandateReference
}

func (o *UpdatePaymentDetails) GetBatchReference() *string {
	if o == nil {
		return nil
	}
	return o.BatchReference
}

func (o *UpdatePaymentDetails) GetFileReference() *string {
	if o == nil {
		return nil
	}
	return o.FileReference
}

func (o *UpdatePaymentDetails) GetQrCode() *UpdatePaymentQrCode {
	if o == nil {
		return nil
	}
	return o.QrCode
}

func (o *UpdatePaymentDetails) GetVoucherNumber() *string {
	if o == nil {
		return nil
	}
	return o.VoucherNumber
}

func (o *UpdatePaymentDetails) GetGiftcards() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Giftcards
}

func (o *UpdatePaymentDetails) GetIssuer() *string {
	if o == nil {
		return nil
	}
	return o.Issuer
}

func (o *UpdatePaymentDetails) GetVouchers() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Vouchers
}

func (o *UpdatePaymentDetails) GetRemainderAmount() *UpdatePaymentRemainderAmount {
	if o == nil {
		return nil
	}
	return o.RemainderAmount
}

func (o *UpdatePaymentDetails) GetRemainderMethod() *string {
	if o == nil {
		return nil
	}
	return o.RemainderMethod
}

func (o *UpdatePaymentDetails) GetRemainderDetails() map[string]any {
	if o == nil {
		return nil
	}
	return o.RemainderDetails
}

// UpdatePaymentSelf - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type UpdatePaymentSelf struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentSelf) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentSelf) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentCheckout - The URL your customer should visit to make the payment. This is where you should redirect the customer to.
type UpdatePaymentCheckout struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentCheckout) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentCheckout) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentMobileAppCheckout - The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
type UpdatePaymentMobileAppCheckout struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentMobileAppCheckout) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentMobileAppCheckout) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentChangePaymentState - For test mode payments in certain scenarios, a hosted interface is available to help you test different
// payment states.
//
// Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
// payments are executed without any user interaction.
//
// Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
// chargeback for the test payment.
type UpdatePaymentChangePaymentState struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentChangePaymentState) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentChangePaymentState) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentDashboard - Direct link to the payment in the Mollie Dashboard.
type UpdatePaymentDashboard struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentDashboard) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentDashboard) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentRefunds - The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
type UpdatePaymentRefunds struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentRefunds) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentRefunds) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentChargebacks - The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
// payment.
type UpdatePaymentChargebacks struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentChargebacks) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentChargebacks) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentCaptures - The API resource URL of the [captures](list-payment-captures) that belong to this payment.
type UpdatePaymentCaptures struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentCaptures) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentCaptures) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentSettlement - The API resource URL of the [settlement](get-settlement) this payment has been settled with.
// Not present if not yet settled.
type UpdatePaymentSettlement struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentSettlement) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentSettlement) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentCustomer - The API resource URL of the [customer](get-customer).
type UpdatePaymentCustomer struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentCustomer) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentCustomer) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentMandate - The API resource URL of the [mandate](get-mandate).
type UpdatePaymentMandate struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentMandate) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentMandate) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentSubscription - The API resource URL of the [subscription](get-subscription).
type UpdatePaymentSubscription struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentSubscription) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentSubscription) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentOrder - The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
// order.
type UpdatePaymentOrder struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentOrder) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentOrder) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentTerminal - The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
// point-of-sale payments.
type UpdatePaymentTerminal struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentTerminal) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentTerminal) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentDocumentation - In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
type UpdatePaymentDocumentation struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentDocumentation) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentDocumentation) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentLinksStatus - Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
// successful).
type UpdatePaymentLinksStatus struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentLinksStatus) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentLinksStatus) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentPayOnline - Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
// bank transfer.
type UpdatePaymentPayOnline struct {
	// The actual URL string.
	Href string `json:"href"`
	// The content type of the page or endpoint the URL points to.
	Type string `json:"type"`
}

func (o *UpdatePaymentPayOnline) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *UpdatePaymentPayOnline) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// UpdatePaymentLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
type UpdatePaymentLinks struct {
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Self UpdatePaymentSelf `json:"self"`
	// The URL your customer should visit to make the payment. This is where you should redirect the customer to.
	Checkout *UpdatePaymentCheckout `json:"checkout,omitempty"`
	// The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
	MobileAppCheckout *UpdatePaymentMobileAppCheckout `json:"mobileAppCheckout,omitempty"`
	// For test mode payments in certain scenarios, a hosted interface is available to help you test different
	// payment states.
	//
	// Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
	// payments are executed without any user interaction.
	//
	// Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
	// chargeback for the test payment.
	ChangePaymentState *UpdatePaymentChangePaymentState `json:"changePaymentState,omitempty"`
	// Direct link to the payment in the Mollie Dashboard.
	Dashboard UpdatePaymentDashboard `json:"dashboard"`
	// The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
	Refunds *UpdatePaymentRefunds `json:"refunds,omitempty"`
	// The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
	// payment.
	Chargebacks *UpdatePaymentChargebacks `json:"chargebacks,omitempty"`
	// The API resource URL of the [captures](list-payment-captures) that belong to this payment.
	Captures *UpdatePaymentCaptures `json:"captures,omitempty"`
	// The API resource URL of the [settlement](get-settlement) this payment has been settled with.
	// Not present if not yet settled.
	Settlement *UpdatePaymentSettlement `json:"settlement,omitempty"`
	// The API resource URL of the [customer](get-customer).
	Customer *UpdatePaymentCustomer `json:"customer,omitempty"`
	// The API resource URL of the [mandate](get-mandate).
	Mandate *UpdatePaymentMandate `json:"mandate,omitempty"`
	// The API resource URL of the [subscription](get-subscription).
	Subscription *UpdatePaymentSubscription `json:"subscription,omitempty"`
	// The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
	// order.
	Order *UpdatePaymentOrder `json:"order,omitempty"`
	// The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
	// point-of-sale payments.
	Terminal *UpdatePaymentTerminal `json:"terminal,omitempty"`
	// In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
	Documentation *UpdatePaymentDocumentation `json:"documentation,omitempty"`
	// Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
	// successful).
	Status *UpdatePaymentLinksStatus `json:"status,omitempty"`
	// Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
	// bank transfer.
	PayOnline *UpdatePaymentPayOnline `json:"payOnline,omitempty"`
}

func (o *UpdatePaymentLinks) GetSelf() UpdatePaymentSelf {
	if o == nil {
		return UpdatePaymentSelf{}
	}
	return o.Self
}

func (o *UpdatePaymentLinks) GetCheckout() *UpdatePaymentCheckout {
	if o == nil {
		return nil
	}
	return o.Checkout
}

func (o *UpdatePaymentLinks) GetMobileAppCheckout() *UpdatePaymentMobileAppCheckout {
	if o == nil {
		return nil
	}
	return o.MobileAppCheckout
}

func (o *UpdatePaymentLinks) GetChangePaymentState() *UpdatePaymentChangePaymentState {
	if o == nil {
		return nil
	}
	return o.ChangePaymentState
}

func (o *UpdatePaymentLinks) GetDashboard() UpdatePaymentDashboard {
	if o == nil {
		return UpdatePaymentDashboard{}
	}
	return o.Dashboard
}

func (o *UpdatePaymentLinks) GetRefunds() *UpdatePaymentRefunds {
	if o == nil {
		return nil
	}
	return o.Refunds
}

func (o *UpdatePaymentLinks) GetChargebacks() *UpdatePaymentChargebacks {
	if o == nil {
		return nil
	}
	return o.Chargebacks
}

func (o *UpdatePaymentLinks) GetCaptures() *UpdatePaymentCaptures {
	if o == nil {
		return nil
	}
	return o.Captures
}

func (o *UpdatePaymentLinks) GetSettlement() *UpdatePaymentSettlement {
	if o == nil {
		return nil
	}
	return o.Settlement
}

func (o *UpdatePaymentLinks) GetCustomer() *UpdatePaymentCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *UpdatePaymentLinks) GetMandate() *UpdatePaymentMandate {
	if o == nil {
		return nil
	}
	return o.Mandate
}

func (o *UpdatePaymentLinks) GetSubscription() *UpdatePaymentSubscription {
	if o == nil {
		return nil
	}
	return o.Subscription
}

func (o *UpdatePaymentLinks) GetOrder() *UpdatePaymentOrder {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *UpdatePaymentLinks) GetTerminal() *UpdatePaymentTerminal {
	if o == nil {
		return nil
	}
	return o.Terminal
}

func (o *UpdatePaymentLinks) GetDocumentation() *UpdatePaymentDocumentation {
	if o == nil {
		return nil
	}
	return o.Documentation
}

func (o *UpdatePaymentLinks) GetStatus() *UpdatePaymentLinksStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdatePaymentLinks) GetPayOnline() *UpdatePaymentPayOnline {
	if o == nil {
		return nil
	}
	return o.PayOnline
}

// UpdatePaymentResponseBody - The updated payment object.
type UpdatePaymentResponseBody struct {
	// Indicates the response contains a payment object. Will always contain the string `payment` for this endpoint.
	Resource string `json:"resource"`
	// The identifier uniquely referring to this payment. Mollie assigns this identifier at payment creation time. Mollie
	// will always refer to the payment by this ID. Example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
	ID string `json:"id"`
	// Whether this entity was created in live mode or in test mode.
	Mode UpdatePaymentMode `json:"mode"`
	// The description of the payment. This will be shown to your customer on their card or bank statement when possible.
	// We truncate the description automatically according to the limits of the used payment method. The description is
	// also visible in any exports you generate.
	//
	// We recommend you use a unique identifier so that you can always link the payment to the order in your back office.
	// This is particularly useful for bookkeeping.
	//
	// The maximum length of the description field differs per payment method, with the absolute maximum being 255
	// characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
	Description string `json:"description"`
	// The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
	//
	// You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be
	// retrieved using the Get method endpoint.
	//
	// If a tip was added for a Point-of-Sale payment, the amount will be updated to reflect the initial amount plus the
	// tip amount.
	Amount UpdatePaymentAmount `json:"amount"`
	// The total amount that is already refunded. Only available when refunds are available for this payment. For some
	// payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the
	// costs for a return shipment to the customer.
	AmountRefunded *UpdatePaymentAmountRefunded `json:"amountRefunded,omitempty"`
	// The remaining amount that can be refunded. Only available when refunds are available for this payment.
	AmountRemaining *UpdatePaymentAmountRemaining `json:"amountRemaining,omitempty"`
	// The total amount that is already captured for this payment. Only available when this payment supports captures.
	AmountCaptured *UpdatePaymentAmountCaptured `json:"amountCaptured,omitempty"`
	// The total amount that was charged back for this payment. Only available when the total charged back amount is not
	// zero.
	AmountChargedBack *UpdatePaymentAmountChargedBack `json:"amountChargedBack,omitempty"`
	// This optional field will contain the approximate amount that will be settled to your account, converted to the
	// currency your account is settled in.
	//
	// Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is
	// settled by Mollie the `settlementAmount` is omitted from the response.
	//
	// Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest
	// using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
	SettlementAmount *UpdatePaymentSettlementAmount `json:"settlementAmount,omitempty"`
	// The URL your customer will be redirected to after the payment process.
	//
	// It could make sense for the redirectUrl to contain a unique identifier – like your order ID – so you can show the
	// right page referencing the order when your customer returns.
	//
	// The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for
	// Apple Pay payments with an `applePayPaymentToken`.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not
	// provided, the customer will be redirected to the `redirectUrl` instead — see above.
	//
	// Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is
	// therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle
	// payment cancellations.
	CancelURL *string `json:"cancelUrl,omitempty"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	// Optionally provide the order lines for the payment. Each line contains details such as a description of the item
	// ordered and its price.
	//
	// All lines must have the same currency as the payment.
	//
	// Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
	Lines []UpdatePaymentLine `json:"lines,omitempty"`
	// The customer's billing address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	//
	// Required for payment method `in3`, `klarna`, `billie` and `riverty`.
	BillingAddress *UpdatePaymentBillingAddressResponse `json:"billingAddress,omitempty"`
	// The customer's shipping address details. We advise to provide these details to improve fraud protection and
	// conversion.
	//
	// Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
	// `country`.
	ShippingAddress *UpdatePaymentShippingAddressResponse `json:"shippingAddress,omitempty"`
	// Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale
	// is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser
	// language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897
	// locale, but our hosted payment pages currently only support the specified languages.
	//
	// For bank transfer payments specifically, the locale will determine the target bank account the customer has to
	// transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the
	// customer use a local bank account greatly increases the conversion and speed of payment.
	Locale *UpdatePaymentLocaleResponse `json:"locale,omitempty"`
	// This optional field contains your customer's ISO 3166-1 alpha-2 country code, detected by us during checkout. This
	// field is omitted if the country code was not detected.
	CountryCode *string `json:"countryCode,omitempty"`
	// The payment method used for this transaction. If a specific method was selected during payment initialization,
	// this field reflects that choice.
	Method *UpdatePaymentMethodResponse `json:"method,omitempty"`
	// For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT
	// rates you have used for the order to ensure your customer's country matches the VAT country.
	//
	// Use this parameter to restrict the payment methods available to your customer to those from a single country.
	//
	// If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
	//
	// The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
	RestrictPaymentMethodsToCountry *string `json:"restrictPaymentMethodsToCountry,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *UpdatePaymentMetadataResponse `json:"metadata,omitempty"`
	// Indicate if the funds should be captured immediately or if you want to [place a hold](https://docs.mollie.com/docs/place-a-hold-for-a-payment#/)
	// and capture at a later time.
	//
	// This field needs to be set to `manual` for method `riverty`.
	CaptureMode *UpdatePaymentCaptureMode `json:"captureMode,omitempty"`
	// **Only relevant if you wish to manage authorization and capturing separately.**
	//
	// Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a
	// later point either be 'captured' or canceled.
	//
	// By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a
	// capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For
	// example `8 hours` or `2 days`.
	//
	// To schedule an automatic capture, the `captureMode` must be set to `automatic`.
	//
	// The maximum delay is 7 days (168 hours).
	//
	// Possible values: `... hours` `... days`
	CaptureDelay *string `json:"captureDelay,omitempty"`
	// Indicates the date before which the payment needs to be captured, in ISO 8601 format. From this date onwards we
	// can no longer guarantee a successful capture. The parameter is omitted if the payment is not authorized (yet).
	CaptureBefore *string `json:"captureBefore,omitempty"`
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this
	// `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent
	// to your own account balance.
	//
	// If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the
	// `routing` parameter.
	ApplicationFee *UpdatePaymentApplicationFee `json:"applicationFee,omitempty"`
	// *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
	//
	// With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
	// merchants.
	//
	// If you create payments on your own account that you want to split between yourself and one or more connected
	// merchants, you can use this `routing` parameter to route the payment accordingly.
	//
	// The `routing` parameter should contain an array of objects, with each object describing the destination for a
	// specific portion of the payment.
	//
	// It is not necessary to indicate in the array which portion goes to yourself. After all portions of the total
	// payment amount have been routed, the amount left will be routed to the current organization automatically.
	//
	// If instead you use OAuth to create payments on a connected merchant's account, refer to the `applicationFee`
	// parameter.
	Routing []UpdatePaymentRouting `json:"routing,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// Indicate which part of a recurring sequence this payment is for.
	//
	// Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is
	// through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place
	// on their account in the future.
	//
	// If set to `recurring`, the customer's card is charged automatically.
	//
	// Defaults to `oneoff`, which is a regular non-recurring payment.
	//
	// For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our
	// [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account
	// are set up correctly for recurring payments.
	SequenceType *UpdatePaymentSequenceType `json:"sequenceType"`
	// If the payment was automatically created via a subscription, the ID of the [subscription](get-subscription) will
	// be added to the response.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// **Only relevant for recurring payments.**
	//
	// When creating recurring payments, the ID of a specific [mandate](get-mandate) can be supplied to indicate which of
	// the customer's accounts should be credited.
	MandateID *string `json:"mandateId,omitempty"`
	// The ID of the [customer](get-customer) the payment is being created for. This is used primarily for recurring
	// payments, but can also be used on regular payments to enable single-click payments.
	//
	// If `sequenceType` is set to `recurring`, this field is required.
	CustomerID *string `json:"customerId,omitempty"`
	// The identifier referring to the [profile](get-profile) this entity belongs to.
	//
	// When using an API Key, the `profileId` can be omitted since it is linked to the key. However, for OAuth and
	// Organization tokens, the `profileId` is required.
	//
	// For more information, see [Authentication](authentication).
	ProfileID string `json:"profileId"`
	// The identifier referring to the [settlement](get-settlement) this payment was settled with.
	SettlementID *string `json:"settlementId,omitempty"`
	// If the payment was created for an [order](get-order), the ID of that order will be part of the response.
	OrderID *string `json:"orderId,omitempty"`
	// The payment's status. Refer to the [documentation regarding statuses](https://docs.mollie.com/docs/status-change#/) for more info about which
	// statuses occur at what point.
	Status UpdatePaymentStatusEnum `json:"status"`
	// This object offers details about the status of a payment. Currently it is only available for point-of-sale
	// payments.
	//
	// You can find more information about the possible values of this object on
	// [this page](status-reasons).**
	StatusReason *UpdatePaymentStatusReason `json:"statusReason,omitempty"`
	// Whether the payment can be canceled. This parameter is omitted if the payment reaches a final state.
	IsCancelable *bool `json:"isCancelable,omitempty"`
	// An object containing payment details collected during the payment process. For example, details may include the
	// customer's card or bank details and a payment reference. For the full list of details, please refer to the
	// [method-specific parameters](extra-payment-parameters) guide.
	Details *UpdatePaymentDetails `json:"details,omitempty"`
	// The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt string `json:"createdAt"`
	// The date and time the payment became authorized, in ISO 8601 format. This parameter is omitted if the payment is
	// not authorized (yet).
	AuthorizedAt *string `json:"authorizedAt,omitempty"`
	// The date and time the payment became paid, in ISO 8601 format. This parameter is omitted if the payment is not
	// completed (yet).
	PaidAt *string `json:"paidAt,omitempty"`
	// The date and time the payment was canceled, in ISO 8601 format. This parameter is omitted if the payment is not
	// canceled (yet).
	CanceledAt *string `json:"canceledAt,omitempty"`
	// The date and time the payment will expire, in ISO 8601 format. This parameter is omitted if the payment can no
	// longer expire.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The date and time the payment was expired, in ISO 8601 format. This parameter is omitted if the payment did not
	// expire (yet).
	ExpiredAt *string `json:"expiredAt,omitempty"`
	// The date and time the payment failed, in ISO 8601 format. This parameter is omitted if the payment did not fail
	// (yet).
	FailedAt *string `json:"failedAt,omitempty"`
	// An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
	Links UpdatePaymentLinks `json:"_links"`
}

func (o *UpdatePaymentResponseBody) GetResource() string {
	if o == nil {
		return ""
	}
	return o.Resource
}

func (o *UpdatePaymentResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdatePaymentResponseBody) GetMode() UpdatePaymentMode {
	if o == nil {
		return UpdatePaymentMode("")
	}
	return o.Mode
}

func (o *UpdatePaymentResponseBody) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *UpdatePaymentResponseBody) GetAmount() UpdatePaymentAmount {
	if o == nil {
		return UpdatePaymentAmount{}
	}
	return o.Amount
}

func (o *UpdatePaymentResponseBody) GetAmountRefunded() *UpdatePaymentAmountRefunded {
	if o == nil {
		return nil
	}
	return o.AmountRefunded
}

func (o *UpdatePaymentResponseBody) GetAmountRemaining() *UpdatePaymentAmountRemaining {
	if o == nil {
		return nil
	}
	return o.AmountRemaining
}

func (o *UpdatePaymentResponseBody) GetAmountCaptured() *UpdatePaymentAmountCaptured {
	if o == nil {
		return nil
	}
	return o.AmountCaptured
}

func (o *UpdatePaymentResponseBody) GetAmountChargedBack() *UpdatePaymentAmountChargedBack {
	if o == nil {
		return nil
	}
	return o.AmountChargedBack
}

func (o *UpdatePaymentResponseBody) GetSettlementAmount() *UpdatePaymentSettlementAmount {
	if o == nil {
		return nil
	}
	return o.SettlementAmount
}

func (o *UpdatePaymentResponseBody) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *UpdatePaymentResponseBody) GetCancelURL() *string {
	if o == nil {
		return nil
	}
	return o.CancelURL
}

func (o *UpdatePaymentResponseBody) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *UpdatePaymentResponseBody) GetLines() []UpdatePaymentLine {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *UpdatePaymentResponseBody) GetBillingAddress() *UpdatePaymentBillingAddressResponse {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *UpdatePaymentResponseBody) GetShippingAddress() *UpdatePaymentShippingAddressResponse {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *UpdatePaymentResponseBody) GetLocale() *UpdatePaymentLocaleResponse {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *UpdatePaymentResponseBody) GetCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CountryCode
}

func (o *UpdatePaymentResponseBody) GetMethod() *UpdatePaymentMethodResponse {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *UpdatePaymentResponseBody) GetRestrictPaymentMethodsToCountry() *string {
	if o == nil {
		return nil
	}
	return o.RestrictPaymentMethodsToCountry
}

func (o *UpdatePaymentResponseBody) GetMetadata() *UpdatePaymentMetadataResponse {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *UpdatePaymentResponseBody) GetCaptureMode() *UpdatePaymentCaptureMode {
	if o == nil {
		return nil
	}
	return o.CaptureMode
}

func (o *UpdatePaymentResponseBody) GetCaptureDelay() *string {
	if o == nil {
		return nil
	}
	return o.CaptureDelay
}

func (o *UpdatePaymentResponseBody) GetCaptureBefore() *string {
	if o == nil {
		return nil
	}
	return o.CaptureBefore
}

func (o *UpdatePaymentResponseBody) GetApplicationFee() *UpdatePaymentApplicationFee {
	if o == nil {
		return nil
	}
	return o.ApplicationFee
}

func (o *UpdatePaymentResponseBody) GetRouting() []UpdatePaymentRouting {
	if o == nil {
		return nil
	}
	return o.Routing
}

func (o *UpdatePaymentResponseBody) GetSequenceType() *UpdatePaymentSequenceType {
	if o == nil {
		return nil
	}
	return o.SequenceType
}

func (o *UpdatePaymentResponseBody) GetSubscriptionID() *string {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

func (o *UpdatePaymentResponseBody) GetMandateID() *string {
	if o == nil {
		return nil
	}
	return o.MandateID
}

func (o *UpdatePaymentResponseBody) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *UpdatePaymentResponseBody) GetProfileID() string {
	if o == nil {
		return ""
	}
	return o.ProfileID
}

func (o *UpdatePaymentResponseBody) GetSettlementID() *string {
	if o == nil {
		return nil
	}
	return o.SettlementID
}

func (o *UpdatePaymentResponseBody) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *UpdatePaymentResponseBody) GetStatus() UpdatePaymentStatusEnum {
	if o == nil {
		return UpdatePaymentStatusEnum("")
	}
	return o.Status
}

func (o *UpdatePaymentResponseBody) GetStatusReason() *UpdatePaymentStatusReason {
	if o == nil {
		return nil
	}
	return o.StatusReason
}

func (o *UpdatePaymentResponseBody) GetIsCancelable() *bool {
	if o == nil {
		return nil
	}
	return o.IsCancelable
}

func (o *UpdatePaymentResponseBody) GetDetails() *UpdatePaymentDetails {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *UpdatePaymentResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *UpdatePaymentResponseBody) GetAuthorizedAt() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizedAt
}

func (o *UpdatePaymentResponseBody) GetPaidAt() *string {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *UpdatePaymentResponseBody) GetCanceledAt() *string {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdatePaymentResponseBody) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *UpdatePaymentResponseBody) GetExpiredAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiredAt
}

func (o *UpdatePaymentResponseBody) GetFailedAt() *string {
	if o == nil {
		return nil
	}
	return o.FailedAt
}

func (o *UpdatePaymentResponseBody) GetLinks() UpdatePaymentLinks {
	if o == nil {
		return UpdatePaymentLinks{}
	}
	return o.Links
}

type UpdatePaymentResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The updated payment object.
	Object *UpdatePaymentResponseBody
}

func (o *UpdatePaymentResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdatePaymentResponse) GetObject() *UpdatePaymentResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
