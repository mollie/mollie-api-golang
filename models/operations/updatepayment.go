// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/mollie/mollie-api-golang/models/components"
)

type UpdatePaymentRequestBody struct {
	// The description of the payment. This will be shown to your customer on their card or bank statement when possible.
	// We truncate the description automatically according to the limits of the used payment method. The description is
	// also visible in any exports you generate.
	//
	// We recommend you use a unique identifier so that you can always link the payment to the order in your back office.
	// This is particularly useful for bookkeeping.
	//
	// The maximum length of the description field differs per payment method, with the absolute maximum being 255
	// characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
	Description *string `json:"description,omitempty"`
	// The URL your customer will be redirected to after the payment process.
	//
	// It could make sense for the redirectUrl to contain a unique identifier – like your order ID – so you can show the
	// right page referencing the order when your customer returns.
	//
	// The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for
	// Apple Pay payments with an `applePayPaymentToken`.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not
	// provided, the customer will be redirected to the `redirectUrl` instead — see above.
	//
	// Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is
	// therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle
	// payment cancellations.
	CancelURL *string `json:"cancelUrl,omitempty"`
	// The webhook URL where we will send payment status updates to.
	//
	// The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
	//
	// The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
	// webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
	// local machine.
	WebhookURL *string `json:"webhookUrl,omitempty"`
	// Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
	// you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
	Metadata *components.Metadata `json:"metadata,omitempty"`
	// Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment
	// method and your customer will skip the selection screen and is sent directly to the chosen payment method. The
	// parameter enables you to fully integrate the payment method selection into your website.
	//
	// You can also specify the methods in an array. By doing so we will still show the payment method selection screen
	// but will only show the methods specified in the array. For example, you can use this functionality to only show
	// payment methods from a specific country to your customer `['bancontact', 'belfius']`.
	Method *components.Method `json:"method,omitempty"`
	// Allows you to preset the language to be used.
	Locale *components.Locale `json:"locale,omitempty"`
	// The date by which the payment should be completed in `YYYY-MM-DD` format
	DueDate *string `json:"dueDate,omitempty"`
	// For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT
	// rates you have used for the order to ensure your customer's country matches the VAT country.
	//
	// Use this parameter to restrict the payment methods available to your customer to those from a single country.
	//
	// If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
	//
	// The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
	RestrictPaymentMethodsToCountry *string `json:"restrictPaymentMethodsToCountry,omitempty"`
	// Whether to create the entity in test mode or live mode.
	//
	// Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
	// omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
	// `testmode` to `true`.
	Testmode *bool `json:"testmode,omitempty"`
	// **Only relevant for iDEAL, KBC/CBC, gift card, and voucher payments.**
	//
	// **⚠️ With the introduction of iDEAL 2 in 2025, this field will be ignored for iDEAL payments. For more information
	// on the migration, refer to our [help center](https://help.mollie.com/hc/articles/19100313768338-iDEAL-2-0).**
	//
	// Some payment methods are a network of connected banks or card issuers. In these cases, after selecting the payment
	// method, the customer may still need to select the appropriate issuer before the payment can proceed.
	//
	// We provide hosted issuer selection screens, but these screens can be skipped by providing the `issuer` via the API
	// up front.
	//
	// The full list of issuers for a specific method can be retrieved via the Methods API by using the optional
	// `issuers` include.
	//
	// A valid issuer for iDEAL is for example `ideal_INGBNL2A` (for ING Bank).
	Issuer          *string                    `json:"issuer,omitempty"`
	BillingAddress  *components.PaymentAddress `json:"billingAddress,omitempty"`
	ShippingAddress *components.PaymentAddress `json:"shippingAddress,omitempty"`
	BillingEmail    *string                    `json:"billingEmail,omitempty"`
}

func (o *UpdatePaymentRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdatePaymentRequestBody) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *UpdatePaymentRequestBody) GetCancelURL() *string {
	if o == nil {
		return nil
	}
	return o.CancelURL
}

func (o *UpdatePaymentRequestBody) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *UpdatePaymentRequestBody) GetMetadata() *components.Metadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *UpdatePaymentRequestBody) GetMethod() *components.Method {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *UpdatePaymentRequestBody) GetLocale() *components.Locale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *UpdatePaymentRequestBody) GetDueDate() *string {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *UpdatePaymentRequestBody) GetRestrictPaymentMethodsToCountry() *string {
	if o == nil {
		return nil
	}
	return o.RestrictPaymentMethodsToCountry
}

func (o *UpdatePaymentRequestBody) GetTestmode() *bool {
	if o == nil {
		return nil
	}
	return o.Testmode
}

func (o *UpdatePaymentRequestBody) GetIssuer() *string {
	if o == nil {
		return nil
	}
	return o.Issuer
}

func (o *UpdatePaymentRequestBody) GetBillingAddress() *components.PaymentAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *UpdatePaymentRequestBody) GetShippingAddress() *components.PaymentAddress {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *UpdatePaymentRequestBody) GetBillingEmail() *string {
	if o == nil {
		return nil
	}
	return o.BillingEmail
}

type UpdatePaymentRequest struct {
	// Provide the ID of the related payment.
	PaymentID   string                    `pathParam:"style=simple,explode=false,name=paymentId"`
	RequestBody *UpdatePaymentRequestBody `request:"mediaType=application/json"`
}

func (o *UpdatePaymentRequest) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *UpdatePaymentRequest) GetRequestBody() *UpdatePaymentRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdatePaymentResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The updated payment object.
	PaymentResponse *components.PaymentResponse
}

func (o *UpdatePaymentResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdatePaymentResponse) GetPaymentResponse() *components.PaymentResponse {
	if o == nil {
		return nil
	}
	return o.PaymentResponse
}
